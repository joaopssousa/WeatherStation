
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08040200  08040200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138b8  08040400  08040400  00000400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08053cb8  08053cb8  00013cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08055200  08055200  00025600  2**0
                  CONTENTS
  4 .ARM          00000008  08055200  08055200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08055208  08055208  00025600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08055208  08055208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08055210  08055210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20001000  08055218  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000008  080555f8  080555f8  000255f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004fd4  200013e0  200013e0  000313e0  2**3
                  ALLOC
 11 ._user_heap_stack 00001204  200063b4  200063b4  000313e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025600  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007a32b  00000000  00000000  00025630  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000e638  00000000  00000000  0009f95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000240f0  00000000  00000000  000adf93  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002928  00000000  00000000  000d2088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003f28  00000000  00000000  000d49b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003775b  00000000  00000000  000d88d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0004162e  00000000  00000000  00110033  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00100e95  00000000  00000000  00151661  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002524f6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008eb8  00000000  00000000  00252574  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         0000009c  00000000  00000000  0025b42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000014d  00000000  00000000  0025b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040400 <__do_global_dtors_aux>:
 8040400:	b510      	push	{r4, lr}
 8040402:	4c05      	ldr	r4, [pc, #20]	; (8040418 <APPLI_region_ROM_start+0x18>)
 8040404:	7823      	ldrb	r3, [r4, #0]
 8040406:	b933      	cbnz	r3, 8040416 <__do_global_dtors_aux+0x16>
 8040408:	4b04      	ldr	r3, [pc, #16]	; (804041c <APPLI_region_ROM_start+0x1c>)
 804040a:	b113      	cbz	r3, 8040412 <__do_global_dtors_aux+0x12>
 804040c:	4804      	ldr	r0, [pc, #16]	; (8040420 <APPLI_region_ROM_start+0x20>)
 804040e:	f3af 8000 	nop.w
 8040412:	2301      	movs	r3, #1
 8040414:	7023      	strb	r3, [r4, #0]
 8040416:	bd10      	pop	{r4, pc}
 8040418:	200013e0 	.word	0x200013e0
 804041c:	00000000 	.word	0x00000000
 8040420:	08053ca0 	.word	0x08053ca0

08040424 <frame_dummy>:
 8040424:	b508      	push	{r3, lr}
 8040426:	4b03      	ldr	r3, [pc, #12]	; (8040434 <frame_dummy+0x10>)
 8040428:	b11b      	cbz	r3, 8040432 <frame_dummy+0xe>
 804042a:	4903      	ldr	r1, [pc, #12]	; (8040438 <frame_dummy+0x14>)
 804042c:	4803      	ldr	r0, [pc, #12]	; (804043c <frame_dummy+0x18>)
 804042e:	f3af 8000 	nop.w
 8040432:	bd08      	pop	{r3, pc}
 8040434:	00000000 	.word	0x00000000
 8040438:	200013e4 	.word	0x200013e4
 804043c:	08053ca0 	.word	0x08053ca0

08040440 <strlen>:
 8040440:	4603      	mov	r3, r0
 8040442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040446:	2a00      	cmp	r2, #0
 8040448:	d1fb      	bne.n	8040442 <strlen+0x2>
 804044a:	1a18      	subs	r0, r3, r0
 804044c:	3801      	subs	r0, #1
 804044e:	4770      	bx	lr

08040450 <memchr>:
 8040450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040454:	2a10      	cmp	r2, #16
 8040456:	db2b      	blt.n	80404b0 <memchr+0x60>
 8040458:	f010 0f07 	tst.w	r0, #7
 804045c:	d008      	beq.n	8040470 <memchr+0x20>
 804045e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040462:	3a01      	subs	r2, #1
 8040464:	428b      	cmp	r3, r1
 8040466:	d02d      	beq.n	80404c4 <memchr+0x74>
 8040468:	f010 0f07 	tst.w	r0, #7
 804046c:	b342      	cbz	r2, 80404c0 <memchr+0x70>
 804046e:	d1f6      	bne.n	804045e <memchr+0xe>
 8040470:	b4f0      	push	{r4, r5, r6, r7}
 8040472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804047a:	f022 0407 	bic.w	r4, r2, #7
 804047e:	f07f 0700 	mvns.w	r7, #0
 8040482:	2300      	movs	r3, #0
 8040484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040488:	3c08      	subs	r4, #8
 804048a:	ea85 0501 	eor.w	r5, r5, r1
 804048e:	ea86 0601 	eor.w	r6, r6, r1
 8040492:	fa85 f547 	uadd8	r5, r5, r7
 8040496:	faa3 f587 	sel	r5, r3, r7
 804049a:	fa86 f647 	uadd8	r6, r6, r7
 804049e:	faa5 f687 	sel	r6, r5, r7
 80404a2:	b98e      	cbnz	r6, 80404c8 <memchr+0x78>
 80404a4:	d1ee      	bne.n	8040484 <memchr+0x34>
 80404a6:	bcf0      	pop	{r4, r5, r6, r7}
 80404a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80404ac:	f002 0207 	and.w	r2, r2, #7
 80404b0:	b132      	cbz	r2, 80404c0 <memchr+0x70>
 80404b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80404b6:	3a01      	subs	r2, #1
 80404b8:	ea83 0301 	eor.w	r3, r3, r1
 80404bc:	b113      	cbz	r3, 80404c4 <memchr+0x74>
 80404be:	d1f8      	bne.n	80404b2 <memchr+0x62>
 80404c0:	2000      	movs	r0, #0
 80404c2:	4770      	bx	lr
 80404c4:	3801      	subs	r0, #1
 80404c6:	4770      	bx	lr
 80404c8:	2d00      	cmp	r5, #0
 80404ca:	bf06      	itte	eq
 80404cc:	4635      	moveq	r5, r6
 80404ce:	3803      	subeq	r0, #3
 80404d0:	3807      	subne	r0, #7
 80404d2:	f015 0f01 	tst.w	r5, #1
 80404d6:	d107      	bne.n	80404e8 <memchr+0x98>
 80404d8:	3001      	adds	r0, #1
 80404da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80404de:	bf02      	ittt	eq
 80404e0:	3001      	addeq	r0, #1
 80404e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80404e6:	3001      	addeq	r0, #1
 80404e8:	bcf0      	pop	{r4, r5, r6, r7}
 80404ea:	3801      	subs	r0, #1
 80404ec:	4770      	bx	lr
 80404ee:	bf00      	nop

080404f0 <__aeabi_drsub>:
 80404f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80404f4:	e002      	b.n	80404fc <__adddf3>
 80404f6:	bf00      	nop

080404f8 <__aeabi_dsub>:
 80404f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080404fc <__adddf3>:
 80404fc:	b530      	push	{r4, r5, lr}
 80404fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040502:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040506:	ea94 0f05 	teq	r4, r5
 804050a:	bf08      	it	eq
 804050c:	ea90 0f02 	teqeq	r0, r2
 8040510:	bf1f      	itttt	ne
 8040512:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040516:	ea55 0c02 	orrsne.w	ip, r5, r2
 804051a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804051e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040522:	f000 80e2 	beq.w	80406ea <__adddf3+0x1ee>
 8040526:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804052a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804052e:	bfb8      	it	lt
 8040530:	426d      	neglt	r5, r5
 8040532:	dd0c      	ble.n	804054e <__adddf3+0x52>
 8040534:	442c      	add	r4, r5
 8040536:	ea80 0202 	eor.w	r2, r0, r2
 804053a:	ea81 0303 	eor.w	r3, r1, r3
 804053e:	ea82 0000 	eor.w	r0, r2, r0
 8040542:	ea83 0101 	eor.w	r1, r3, r1
 8040546:	ea80 0202 	eor.w	r2, r0, r2
 804054a:	ea81 0303 	eor.w	r3, r1, r3
 804054e:	2d36      	cmp	r5, #54	; 0x36
 8040550:	bf88      	it	hi
 8040552:	bd30      	pophi	{r4, r5, pc}
 8040554:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040558:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804055c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040560:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040564:	d002      	beq.n	804056c <__adddf3+0x70>
 8040566:	4240      	negs	r0, r0
 8040568:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804056c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040570:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040574:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040578:	d002      	beq.n	8040580 <__adddf3+0x84>
 804057a:	4252      	negs	r2, r2
 804057c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040580:	ea94 0f05 	teq	r4, r5
 8040584:	f000 80a7 	beq.w	80406d6 <__adddf3+0x1da>
 8040588:	f1a4 0401 	sub.w	r4, r4, #1
 804058c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040590:	db0d      	blt.n	80405ae <__adddf3+0xb2>
 8040592:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040596:	fa22 f205 	lsr.w	r2, r2, r5
 804059a:	1880      	adds	r0, r0, r2
 804059c:	f141 0100 	adc.w	r1, r1, #0
 80405a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80405a4:	1880      	adds	r0, r0, r2
 80405a6:	fa43 f305 	asr.w	r3, r3, r5
 80405aa:	4159      	adcs	r1, r3
 80405ac:	e00e      	b.n	80405cc <__adddf3+0xd0>
 80405ae:	f1a5 0520 	sub.w	r5, r5, #32
 80405b2:	f10e 0e20 	add.w	lr, lr, #32
 80405b6:	2a01      	cmp	r2, #1
 80405b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80405bc:	bf28      	it	cs
 80405be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80405c2:	fa43 f305 	asr.w	r3, r3, r5
 80405c6:	18c0      	adds	r0, r0, r3
 80405c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80405cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405d0:	d507      	bpl.n	80405e2 <__adddf3+0xe6>
 80405d2:	f04f 0e00 	mov.w	lr, #0
 80405d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80405da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80405de:	eb6e 0101 	sbc.w	r1, lr, r1
 80405e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80405e6:	d31b      	bcc.n	8040620 <__adddf3+0x124>
 80405e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80405ec:	d30c      	bcc.n	8040608 <__adddf3+0x10c>
 80405ee:	0849      	lsrs	r1, r1, #1
 80405f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80405f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80405f8:	f104 0401 	add.w	r4, r4, #1
 80405fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040600:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040604:	f080 809a 	bcs.w	804073c <__adddf3+0x240>
 8040608:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804060c:	bf08      	it	eq
 804060e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040612:	f150 0000 	adcs.w	r0, r0, #0
 8040616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804061a:	ea41 0105 	orr.w	r1, r1, r5
 804061e:	bd30      	pop	{r4, r5, pc}
 8040620:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040624:	4140      	adcs	r0, r0
 8040626:	eb41 0101 	adc.w	r1, r1, r1
 804062a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804062e:	f1a4 0401 	sub.w	r4, r4, #1
 8040632:	d1e9      	bne.n	8040608 <__adddf3+0x10c>
 8040634:	f091 0f00 	teq	r1, #0
 8040638:	bf04      	itt	eq
 804063a:	4601      	moveq	r1, r0
 804063c:	2000      	moveq	r0, #0
 804063e:	fab1 f381 	clz	r3, r1
 8040642:	bf08      	it	eq
 8040644:	3320      	addeq	r3, #32
 8040646:	f1a3 030b 	sub.w	r3, r3, #11
 804064a:	f1b3 0220 	subs.w	r2, r3, #32
 804064e:	da0c      	bge.n	804066a <__adddf3+0x16e>
 8040650:	320c      	adds	r2, #12
 8040652:	dd08      	ble.n	8040666 <__adddf3+0x16a>
 8040654:	f102 0c14 	add.w	ip, r2, #20
 8040658:	f1c2 020c 	rsb	r2, r2, #12
 804065c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040660:	fa21 f102 	lsr.w	r1, r1, r2
 8040664:	e00c      	b.n	8040680 <__adddf3+0x184>
 8040666:	f102 0214 	add.w	r2, r2, #20
 804066a:	bfd8      	it	le
 804066c:	f1c2 0c20 	rsble	ip, r2, #32
 8040670:	fa01 f102 	lsl.w	r1, r1, r2
 8040674:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040678:	bfdc      	itt	le
 804067a:	ea41 010c 	orrle.w	r1, r1, ip
 804067e:	4090      	lslle	r0, r2
 8040680:	1ae4      	subs	r4, r4, r3
 8040682:	bfa2      	ittt	ge
 8040684:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040688:	4329      	orrge	r1, r5
 804068a:	bd30      	popge	{r4, r5, pc}
 804068c:	ea6f 0404 	mvn.w	r4, r4
 8040690:	3c1f      	subs	r4, #31
 8040692:	da1c      	bge.n	80406ce <__adddf3+0x1d2>
 8040694:	340c      	adds	r4, #12
 8040696:	dc0e      	bgt.n	80406b6 <__adddf3+0x1ba>
 8040698:	f104 0414 	add.w	r4, r4, #20
 804069c:	f1c4 0220 	rsb	r2, r4, #32
 80406a0:	fa20 f004 	lsr.w	r0, r0, r4
 80406a4:	fa01 f302 	lsl.w	r3, r1, r2
 80406a8:	ea40 0003 	orr.w	r0, r0, r3
 80406ac:	fa21 f304 	lsr.w	r3, r1, r4
 80406b0:	ea45 0103 	orr.w	r1, r5, r3
 80406b4:	bd30      	pop	{r4, r5, pc}
 80406b6:	f1c4 040c 	rsb	r4, r4, #12
 80406ba:	f1c4 0220 	rsb	r2, r4, #32
 80406be:	fa20 f002 	lsr.w	r0, r0, r2
 80406c2:	fa01 f304 	lsl.w	r3, r1, r4
 80406c6:	ea40 0003 	orr.w	r0, r0, r3
 80406ca:	4629      	mov	r1, r5
 80406cc:	bd30      	pop	{r4, r5, pc}
 80406ce:	fa21 f004 	lsr.w	r0, r1, r4
 80406d2:	4629      	mov	r1, r5
 80406d4:	bd30      	pop	{r4, r5, pc}
 80406d6:	f094 0f00 	teq	r4, #0
 80406da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80406de:	bf06      	itte	eq
 80406e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80406e4:	3401      	addeq	r4, #1
 80406e6:	3d01      	subne	r5, #1
 80406e8:	e74e      	b.n	8040588 <__adddf3+0x8c>
 80406ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80406ee:	bf18      	it	ne
 80406f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80406f4:	d029      	beq.n	804074a <__adddf3+0x24e>
 80406f6:	ea94 0f05 	teq	r4, r5
 80406fa:	bf08      	it	eq
 80406fc:	ea90 0f02 	teqeq	r0, r2
 8040700:	d005      	beq.n	804070e <__adddf3+0x212>
 8040702:	ea54 0c00 	orrs.w	ip, r4, r0
 8040706:	bf04      	itt	eq
 8040708:	4619      	moveq	r1, r3
 804070a:	4610      	moveq	r0, r2
 804070c:	bd30      	pop	{r4, r5, pc}
 804070e:	ea91 0f03 	teq	r1, r3
 8040712:	bf1e      	ittt	ne
 8040714:	2100      	movne	r1, #0
 8040716:	2000      	movne	r0, #0
 8040718:	bd30      	popne	{r4, r5, pc}
 804071a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804071e:	d105      	bne.n	804072c <__adddf3+0x230>
 8040720:	0040      	lsls	r0, r0, #1
 8040722:	4149      	adcs	r1, r1
 8040724:	bf28      	it	cs
 8040726:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804072a:	bd30      	pop	{r4, r5, pc}
 804072c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040730:	bf3c      	itt	cc
 8040732:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040736:	bd30      	popcc	{r4, r5, pc}
 8040738:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804073c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040744:	f04f 0000 	mov.w	r0, #0
 8040748:	bd30      	pop	{r4, r5, pc}
 804074a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804074e:	bf1a      	itte	ne
 8040750:	4619      	movne	r1, r3
 8040752:	4610      	movne	r0, r2
 8040754:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040758:	bf1c      	itt	ne
 804075a:	460b      	movne	r3, r1
 804075c:	4602      	movne	r2, r0
 804075e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040762:	bf06      	itte	eq
 8040764:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040768:	ea91 0f03 	teqeq	r1, r3
 804076c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040770:	bd30      	pop	{r4, r5, pc}
 8040772:	bf00      	nop

08040774 <__aeabi_ui2d>:
 8040774:	f090 0f00 	teq	r0, #0
 8040778:	bf04      	itt	eq
 804077a:	2100      	moveq	r1, #0
 804077c:	4770      	bxeq	lr
 804077e:	b530      	push	{r4, r5, lr}
 8040780:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040784:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040788:	f04f 0500 	mov.w	r5, #0
 804078c:	f04f 0100 	mov.w	r1, #0
 8040790:	e750      	b.n	8040634 <__adddf3+0x138>
 8040792:	bf00      	nop

08040794 <__aeabi_i2d>:
 8040794:	f090 0f00 	teq	r0, #0
 8040798:	bf04      	itt	eq
 804079a:	2100      	moveq	r1, #0
 804079c:	4770      	bxeq	lr
 804079e:	b530      	push	{r4, r5, lr}
 80407a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80407a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80407a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80407ac:	bf48      	it	mi
 80407ae:	4240      	negmi	r0, r0
 80407b0:	f04f 0100 	mov.w	r1, #0
 80407b4:	e73e      	b.n	8040634 <__adddf3+0x138>
 80407b6:	bf00      	nop

080407b8 <__aeabi_f2d>:
 80407b8:	0042      	lsls	r2, r0, #1
 80407ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80407be:	ea4f 0131 	mov.w	r1, r1, rrx
 80407c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80407c6:	bf1f      	itttt	ne
 80407c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80407cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80407d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80407d4:	4770      	bxne	lr
 80407d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80407da:	bf08      	it	eq
 80407dc:	4770      	bxeq	lr
 80407de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80407e2:	bf04      	itt	eq
 80407e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80407e8:	4770      	bxeq	lr
 80407ea:	b530      	push	{r4, r5, lr}
 80407ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80407f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80407f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80407f8:	e71c      	b.n	8040634 <__adddf3+0x138>
 80407fa:	bf00      	nop

080407fc <__aeabi_ul2d>:
 80407fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040800:	bf08      	it	eq
 8040802:	4770      	bxeq	lr
 8040804:	b530      	push	{r4, r5, lr}
 8040806:	f04f 0500 	mov.w	r5, #0
 804080a:	e00a      	b.n	8040822 <__aeabi_l2d+0x16>

0804080c <__aeabi_l2d>:
 804080c:	ea50 0201 	orrs.w	r2, r0, r1
 8040810:	bf08      	it	eq
 8040812:	4770      	bxeq	lr
 8040814:	b530      	push	{r4, r5, lr}
 8040816:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804081a:	d502      	bpl.n	8040822 <__aeabi_l2d+0x16>
 804081c:	4240      	negs	r0, r0
 804081e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040822:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040826:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804082a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804082e:	f43f aed8 	beq.w	80405e2 <__adddf3+0xe6>
 8040832:	f04f 0203 	mov.w	r2, #3
 8040836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804083a:	bf18      	it	ne
 804083c:	3203      	addne	r2, #3
 804083e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040842:	bf18      	it	ne
 8040844:	3203      	addne	r2, #3
 8040846:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804084a:	f1c2 0320 	rsb	r3, r2, #32
 804084e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040852:	fa20 f002 	lsr.w	r0, r0, r2
 8040856:	fa01 fe03 	lsl.w	lr, r1, r3
 804085a:	ea40 000e 	orr.w	r0, r0, lr
 804085e:	fa21 f102 	lsr.w	r1, r1, r2
 8040862:	4414      	add	r4, r2
 8040864:	e6bd      	b.n	80405e2 <__adddf3+0xe6>
 8040866:	bf00      	nop

08040868 <__aeabi_dmul>:
 8040868:	b570      	push	{r4, r5, r6, lr}
 804086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040876:	bf1d      	ittte	ne
 8040878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804087c:	ea94 0f0c 	teqne	r4, ip
 8040880:	ea95 0f0c 	teqne	r5, ip
 8040884:	f000 f8de 	bleq	8040a44 <__aeabi_dmul+0x1dc>
 8040888:	442c      	add	r4, r5
 804088a:	ea81 0603 	eor.w	r6, r1, r3
 804088e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040892:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040896:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804089a:	bf18      	it	ne
 804089c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80408a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80408a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80408a8:	d038      	beq.n	804091c <__aeabi_dmul+0xb4>
 80408aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80408ae:	f04f 0500 	mov.w	r5, #0
 80408b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80408b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80408ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80408be:	f04f 0600 	mov.w	r6, #0
 80408c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80408c6:	f09c 0f00 	teq	ip, #0
 80408ca:	bf18      	it	ne
 80408cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80408d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80408d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80408d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80408dc:	d204      	bcs.n	80408e8 <__aeabi_dmul+0x80>
 80408de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80408e2:	416d      	adcs	r5, r5
 80408e4:	eb46 0606 	adc.w	r6, r6, r6
 80408e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80408ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80408f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80408f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80408f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80408fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040900:	bf88      	it	hi
 8040902:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040906:	d81e      	bhi.n	8040946 <__aeabi_dmul+0xde>
 8040908:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804090c:	bf08      	it	eq
 804090e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040912:	f150 0000 	adcs.w	r0, r0, #0
 8040916:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804091a:	bd70      	pop	{r4, r5, r6, pc}
 804091c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040920:	ea46 0101 	orr.w	r1, r6, r1
 8040924:	ea40 0002 	orr.w	r0, r0, r2
 8040928:	ea81 0103 	eor.w	r1, r1, r3
 804092c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040930:	bfc2      	ittt	gt
 8040932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804093a:	bd70      	popgt	{r4, r5, r6, pc}
 804093c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040940:	f04f 0e00 	mov.w	lr, #0
 8040944:	3c01      	subs	r4, #1
 8040946:	f300 80ab 	bgt.w	8040aa0 <__aeabi_dmul+0x238>
 804094a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804094e:	bfde      	ittt	le
 8040950:	2000      	movle	r0, #0
 8040952:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040956:	bd70      	pople	{r4, r5, r6, pc}
 8040958:	f1c4 0400 	rsb	r4, r4, #0
 804095c:	3c20      	subs	r4, #32
 804095e:	da35      	bge.n	80409cc <__aeabi_dmul+0x164>
 8040960:	340c      	adds	r4, #12
 8040962:	dc1b      	bgt.n	804099c <__aeabi_dmul+0x134>
 8040964:	f104 0414 	add.w	r4, r4, #20
 8040968:	f1c4 0520 	rsb	r5, r4, #32
 804096c:	fa00 f305 	lsl.w	r3, r0, r5
 8040970:	fa20 f004 	lsr.w	r0, r0, r4
 8040974:	fa01 f205 	lsl.w	r2, r1, r5
 8040978:	ea40 0002 	orr.w	r0, r0, r2
 804097c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040984:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040988:	fa21 f604 	lsr.w	r6, r1, r4
 804098c:	eb42 0106 	adc.w	r1, r2, r6
 8040990:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040994:	bf08      	it	eq
 8040996:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804099a:	bd70      	pop	{r4, r5, r6, pc}
 804099c:	f1c4 040c 	rsb	r4, r4, #12
 80409a0:	f1c4 0520 	rsb	r5, r4, #32
 80409a4:	fa00 f304 	lsl.w	r3, r0, r4
 80409a8:	fa20 f005 	lsr.w	r0, r0, r5
 80409ac:	fa01 f204 	lsl.w	r2, r1, r4
 80409b0:	ea40 0002 	orr.w	r0, r0, r2
 80409b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80409bc:	f141 0100 	adc.w	r1, r1, #0
 80409c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409c4:	bf08      	it	eq
 80409c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409ca:	bd70      	pop	{r4, r5, r6, pc}
 80409cc:	f1c4 0520 	rsb	r5, r4, #32
 80409d0:	fa00 f205 	lsl.w	r2, r0, r5
 80409d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80409d8:	fa20 f304 	lsr.w	r3, r0, r4
 80409dc:	fa01 f205 	lsl.w	r2, r1, r5
 80409e0:	ea43 0302 	orr.w	r3, r3, r2
 80409e4:	fa21 f004 	lsr.w	r0, r1, r4
 80409e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409ec:	fa21 f204 	lsr.w	r2, r1, r4
 80409f0:	ea20 0002 	bic.w	r0, r0, r2
 80409f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80409f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409fc:	bf08      	it	eq
 80409fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040a02:	bd70      	pop	{r4, r5, r6, pc}
 8040a04:	f094 0f00 	teq	r4, #0
 8040a08:	d10f      	bne.n	8040a2a <__aeabi_dmul+0x1c2>
 8040a0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8040a0e:	0040      	lsls	r0, r0, #1
 8040a10:	eb41 0101 	adc.w	r1, r1, r1
 8040a14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040a18:	bf08      	it	eq
 8040a1a:	3c01      	subeq	r4, #1
 8040a1c:	d0f7      	beq.n	8040a0e <__aeabi_dmul+0x1a6>
 8040a1e:	ea41 0106 	orr.w	r1, r1, r6
 8040a22:	f095 0f00 	teq	r5, #0
 8040a26:	bf18      	it	ne
 8040a28:	4770      	bxne	lr
 8040a2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040a2e:	0052      	lsls	r2, r2, #1
 8040a30:	eb43 0303 	adc.w	r3, r3, r3
 8040a34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040a38:	bf08      	it	eq
 8040a3a:	3d01      	subeq	r5, #1
 8040a3c:	d0f7      	beq.n	8040a2e <__aeabi_dmul+0x1c6>
 8040a3e:	ea43 0306 	orr.w	r3, r3, r6
 8040a42:	4770      	bx	lr
 8040a44:	ea94 0f0c 	teq	r4, ip
 8040a48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040a4c:	bf18      	it	ne
 8040a4e:	ea95 0f0c 	teqne	r5, ip
 8040a52:	d00c      	beq.n	8040a6e <__aeabi_dmul+0x206>
 8040a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a58:	bf18      	it	ne
 8040a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a5e:	d1d1      	bne.n	8040a04 <__aeabi_dmul+0x19c>
 8040a60:	ea81 0103 	eor.w	r1, r1, r3
 8040a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a68:	f04f 0000 	mov.w	r0, #0
 8040a6c:	bd70      	pop	{r4, r5, r6, pc}
 8040a6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a72:	bf06      	itte	eq
 8040a74:	4610      	moveq	r0, r2
 8040a76:	4619      	moveq	r1, r3
 8040a78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a7c:	d019      	beq.n	8040ab2 <__aeabi_dmul+0x24a>
 8040a7e:	ea94 0f0c 	teq	r4, ip
 8040a82:	d102      	bne.n	8040a8a <__aeabi_dmul+0x222>
 8040a84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040a88:	d113      	bne.n	8040ab2 <__aeabi_dmul+0x24a>
 8040a8a:	ea95 0f0c 	teq	r5, ip
 8040a8e:	d105      	bne.n	8040a9c <__aeabi_dmul+0x234>
 8040a90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040a94:	bf1c      	itt	ne
 8040a96:	4610      	movne	r0, r2
 8040a98:	4619      	movne	r1, r3
 8040a9a:	d10a      	bne.n	8040ab2 <__aeabi_dmul+0x24a>
 8040a9c:	ea81 0103 	eor.w	r1, r1, r3
 8040aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040aa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040aa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040aac:	f04f 0000 	mov.w	r0, #0
 8040ab0:	bd70      	pop	{r4, r5, r6, pc}
 8040ab2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040ab6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040aba:	bd70      	pop	{r4, r5, r6, pc}

08040abc <__aeabi_ddiv>:
 8040abc:	b570      	push	{r4, r5, r6, lr}
 8040abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040aca:	bf1d      	ittte	ne
 8040acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040ad0:	ea94 0f0c 	teqne	r4, ip
 8040ad4:	ea95 0f0c 	teqne	r5, ip
 8040ad8:	f000 f8a7 	bleq	8040c2a <__aeabi_ddiv+0x16e>
 8040adc:	eba4 0405 	sub.w	r4, r4, r5
 8040ae0:	ea81 0e03 	eor.w	lr, r1, r3
 8040ae4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040ae8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040aec:	f000 8088 	beq.w	8040c00 <__aeabi_ddiv+0x144>
 8040af0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040af4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040af8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040afc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040b00:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040b04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040b08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040b0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040b10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040b14:	429d      	cmp	r5, r3
 8040b16:	bf08      	it	eq
 8040b18:	4296      	cmpeq	r6, r2
 8040b1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040b1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040b22:	d202      	bcs.n	8040b2a <__aeabi_ddiv+0x6e>
 8040b24:	085b      	lsrs	r3, r3, #1
 8040b26:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b2a:	1ab6      	subs	r6, r6, r2
 8040b2c:	eb65 0503 	sbc.w	r5, r5, r3
 8040b30:	085b      	lsrs	r3, r3, #1
 8040b32:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040b3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040b3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b46:	bf22      	ittt	cs
 8040b48:	1ab6      	subcs	r6, r6, r2
 8040b4a:	4675      	movcs	r5, lr
 8040b4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040b50:	085b      	lsrs	r3, r3, #1
 8040b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b56:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b5e:	bf22      	ittt	cs
 8040b60:	1ab6      	subcs	r6, r6, r2
 8040b62:	4675      	movcs	r5, lr
 8040b64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040b68:	085b      	lsrs	r3, r3, #1
 8040b6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b76:	bf22      	ittt	cs
 8040b78:	1ab6      	subcs	r6, r6, r2
 8040b7a:	4675      	movcs	r5, lr
 8040b7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040b80:	085b      	lsrs	r3, r3, #1
 8040b82:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b86:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b8e:	bf22      	ittt	cs
 8040b90:	1ab6      	subcs	r6, r6, r2
 8040b92:	4675      	movcs	r5, lr
 8040b94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040b98:	ea55 0e06 	orrs.w	lr, r5, r6
 8040b9c:	d018      	beq.n	8040bd0 <__aeabi_ddiv+0x114>
 8040b9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040ba2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040ba6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040baa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040bae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040bb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040bb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040bba:	d1c0      	bne.n	8040b3e <__aeabi_ddiv+0x82>
 8040bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bc0:	d10b      	bne.n	8040bda <__aeabi_ddiv+0x11e>
 8040bc2:	ea41 0100 	orr.w	r1, r1, r0
 8040bc6:	f04f 0000 	mov.w	r0, #0
 8040bca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040bce:	e7b6      	b.n	8040b3e <__aeabi_ddiv+0x82>
 8040bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bd4:	bf04      	itt	eq
 8040bd6:	4301      	orreq	r1, r0
 8040bd8:	2000      	moveq	r0, #0
 8040bda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040bde:	bf88      	it	hi
 8040be0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040be4:	f63f aeaf 	bhi.w	8040946 <__aeabi_dmul+0xde>
 8040be8:	ebb5 0c03 	subs.w	ip, r5, r3
 8040bec:	bf04      	itt	eq
 8040bee:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040bf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040bf6:	f150 0000 	adcs.w	r0, r0, #0
 8040bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040bfe:	bd70      	pop	{r4, r5, r6, pc}
 8040c00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040c04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040c08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040c0c:	bfc2      	ittt	gt
 8040c0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040c12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040c16:	bd70      	popgt	{r4, r5, r6, pc}
 8040c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c1c:	f04f 0e00 	mov.w	lr, #0
 8040c20:	3c01      	subs	r4, #1
 8040c22:	e690      	b.n	8040946 <__aeabi_dmul+0xde>
 8040c24:	ea45 0e06 	orr.w	lr, r5, r6
 8040c28:	e68d      	b.n	8040946 <__aeabi_dmul+0xde>
 8040c2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040c2e:	ea94 0f0c 	teq	r4, ip
 8040c32:	bf08      	it	eq
 8040c34:	ea95 0f0c 	teqeq	r5, ip
 8040c38:	f43f af3b 	beq.w	8040ab2 <__aeabi_dmul+0x24a>
 8040c3c:	ea94 0f0c 	teq	r4, ip
 8040c40:	d10a      	bne.n	8040c58 <__aeabi_ddiv+0x19c>
 8040c42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040c46:	f47f af34 	bne.w	8040ab2 <__aeabi_dmul+0x24a>
 8040c4a:	ea95 0f0c 	teq	r5, ip
 8040c4e:	f47f af25 	bne.w	8040a9c <__aeabi_dmul+0x234>
 8040c52:	4610      	mov	r0, r2
 8040c54:	4619      	mov	r1, r3
 8040c56:	e72c      	b.n	8040ab2 <__aeabi_dmul+0x24a>
 8040c58:	ea95 0f0c 	teq	r5, ip
 8040c5c:	d106      	bne.n	8040c6c <__aeabi_ddiv+0x1b0>
 8040c5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040c62:	f43f aefd 	beq.w	8040a60 <__aeabi_dmul+0x1f8>
 8040c66:	4610      	mov	r0, r2
 8040c68:	4619      	mov	r1, r3
 8040c6a:	e722      	b.n	8040ab2 <__aeabi_dmul+0x24a>
 8040c6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040c70:	bf18      	it	ne
 8040c72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040c76:	f47f aec5 	bne.w	8040a04 <__aeabi_dmul+0x19c>
 8040c7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040c7e:	f47f af0d 	bne.w	8040a9c <__aeabi_dmul+0x234>
 8040c82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040c86:	f47f aeeb 	bne.w	8040a60 <__aeabi_dmul+0x1f8>
 8040c8a:	e712      	b.n	8040ab2 <__aeabi_dmul+0x24a>

08040c8c <__gedf2>:
 8040c8c:	f04f 3cff 	mov.w	ip, #4294967295
 8040c90:	e006      	b.n	8040ca0 <__cmpdf2+0x4>
 8040c92:	bf00      	nop

08040c94 <__ledf2>:
 8040c94:	f04f 0c01 	mov.w	ip, #1
 8040c98:	e002      	b.n	8040ca0 <__cmpdf2+0x4>
 8040c9a:	bf00      	nop

08040c9c <__cmpdf2>:
 8040c9c:	f04f 0c01 	mov.w	ip, #1
 8040ca0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040cb0:	bf18      	it	ne
 8040cb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040cb6:	d01b      	beq.n	8040cf0 <__cmpdf2+0x54>
 8040cb8:	b001      	add	sp, #4
 8040cba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040cbe:	bf0c      	ite	eq
 8040cc0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040cc4:	ea91 0f03 	teqne	r1, r3
 8040cc8:	bf02      	ittt	eq
 8040cca:	ea90 0f02 	teqeq	r0, r2
 8040cce:	2000      	moveq	r0, #0
 8040cd0:	4770      	bxeq	lr
 8040cd2:	f110 0f00 	cmn.w	r0, #0
 8040cd6:	ea91 0f03 	teq	r1, r3
 8040cda:	bf58      	it	pl
 8040cdc:	4299      	cmppl	r1, r3
 8040cde:	bf08      	it	eq
 8040ce0:	4290      	cmpeq	r0, r2
 8040ce2:	bf2c      	ite	cs
 8040ce4:	17d8      	asrcs	r0, r3, #31
 8040ce6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040cea:	f040 0001 	orr.w	r0, r0, #1
 8040cee:	4770      	bx	lr
 8040cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cf8:	d102      	bne.n	8040d00 <__cmpdf2+0x64>
 8040cfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040cfe:	d107      	bne.n	8040d10 <__cmpdf2+0x74>
 8040d00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040d08:	d1d6      	bne.n	8040cb8 <__cmpdf2+0x1c>
 8040d0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040d0e:	d0d3      	beq.n	8040cb8 <__cmpdf2+0x1c>
 8040d10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040d14:	4770      	bx	lr
 8040d16:	bf00      	nop

08040d18 <__aeabi_cdrcmple>:
 8040d18:	4684      	mov	ip, r0
 8040d1a:	4610      	mov	r0, r2
 8040d1c:	4662      	mov	r2, ip
 8040d1e:	468c      	mov	ip, r1
 8040d20:	4619      	mov	r1, r3
 8040d22:	4663      	mov	r3, ip
 8040d24:	e000      	b.n	8040d28 <__aeabi_cdcmpeq>
 8040d26:	bf00      	nop

08040d28 <__aeabi_cdcmpeq>:
 8040d28:	b501      	push	{r0, lr}
 8040d2a:	f7ff ffb7 	bl	8040c9c <__cmpdf2>
 8040d2e:	2800      	cmp	r0, #0
 8040d30:	bf48      	it	mi
 8040d32:	f110 0f00 	cmnmi.w	r0, #0
 8040d36:	bd01      	pop	{r0, pc}

08040d38 <__aeabi_dcmpeq>:
 8040d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d3c:	f7ff fff4 	bl	8040d28 <__aeabi_cdcmpeq>
 8040d40:	bf0c      	ite	eq
 8040d42:	2001      	moveq	r0, #1
 8040d44:	2000      	movne	r0, #0
 8040d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d4a:	bf00      	nop

08040d4c <__aeabi_dcmplt>:
 8040d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d50:	f7ff ffea 	bl	8040d28 <__aeabi_cdcmpeq>
 8040d54:	bf34      	ite	cc
 8040d56:	2001      	movcc	r0, #1
 8040d58:	2000      	movcs	r0, #0
 8040d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d5e:	bf00      	nop

08040d60 <__aeabi_dcmple>:
 8040d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d64:	f7ff ffe0 	bl	8040d28 <__aeabi_cdcmpeq>
 8040d68:	bf94      	ite	ls
 8040d6a:	2001      	movls	r0, #1
 8040d6c:	2000      	movhi	r0, #0
 8040d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d72:	bf00      	nop

08040d74 <__aeabi_dcmpge>:
 8040d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d78:	f7ff ffce 	bl	8040d18 <__aeabi_cdrcmple>
 8040d7c:	bf94      	ite	ls
 8040d7e:	2001      	movls	r0, #1
 8040d80:	2000      	movhi	r0, #0
 8040d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d86:	bf00      	nop

08040d88 <__aeabi_dcmpgt>:
 8040d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d8c:	f7ff ffc4 	bl	8040d18 <__aeabi_cdrcmple>
 8040d90:	bf34      	ite	cc
 8040d92:	2001      	movcc	r0, #1
 8040d94:	2000      	movcs	r0, #0
 8040d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d9a:	bf00      	nop

08040d9c <__aeabi_dcmpun>:
 8040d9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040da4:	d102      	bne.n	8040dac <__aeabi_dcmpun+0x10>
 8040da6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040daa:	d10a      	bne.n	8040dc2 <__aeabi_dcmpun+0x26>
 8040dac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040db4:	d102      	bne.n	8040dbc <__aeabi_dcmpun+0x20>
 8040db6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040dba:	d102      	bne.n	8040dc2 <__aeabi_dcmpun+0x26>
 8040dbc:	f04f 0000 	mov.w	r0, #0
 8040dc0:	4770      	bx	lr
 8040dc2:	f04f 0001 	mov.w	r0, #1
 8040dc6:	4770      	bx	lr

08040dc8 <__aeabi_d2iz>:
 8040dc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040dcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040dd0:	d215      	bcs.n	8040dfe <__aeabi_d2iz+0x36>
 8040dd2:	d511      	bpl.n	8040df8 <__aeabi_d2iz+0x30>
 8040dd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040dd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040ddc:	d912      	bls.n	8040e04 <__aeabi_d2iz+0x3c>
 8040dde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040de6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040dee:	fa23 f002 	lsr.w	r0, r3, r2
 8040df2:	bf18      	it	ne
 8040df4:	4240      	negne	r0, r0
 8040df6:	4770      	bx	lr
 8040df8:	f04f 0000 	mov.w	r0, #0
 8040dfc:	4770      	bx	lr
 8040dfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e02:	d105      	bne.n	8040e10 <__aeabi_d2iz+0x48>
 8040e04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040e08:	bf08      	it	eq
 8040e0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040e0e:	4770      	bx	lr
 8040e10:	f04f 0000 	mov.w	r0, #0
 8040e14:	4770      	bx	lr
 8040e16:	bf00      	nop

08040e18 <__aeabi_d2uiz>:
 8040e18:	004a      	lsls	r2, r1, #1
 8040e1a:	d211      	bcs.n	8040e40 <__aeabi_d2uiz+0x28>
 8040e1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040e20:	d211      	bcs.n	8040e46 <__aeabi_d2uiz+0x2e>
 8040e22:	d50d      	bpl.n	8040e40 <__aeabi_d2uiz+0x28>
 8040e24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040e28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040e2c:	d40e      	bmi.n	8040e4c <__aeabi_d2uiz+0x34>
 8040e2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040e36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040e3a:	fa23 f002 	lsr.w	r0, r3, r2
 8040e3e:	4770      	bx	lr
 8040e40:	f04f 0000 	mov.w	r0, #0
 8040e44:	4770      	bx	lr
 8040e46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e4a:	d102      	bne.n	8040e52 <__aeabi_d2uiz+0x3a>
 8040e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8040e50:	4770      	bx	lr
 8040e52:	f04f 0000 	mov.w	r0, #0
 8040e56:	4770      	bx	lr

08040e58 <__aeabi_ldivmod>:
 8040e58:	b97b      	cbnz	r3, 8040e7a <__aeabi_ldivmod+0x22>
 8040e5a:	b972      	cbnz	r2, 8040e7a <__aeabi_ldivmod+0x22>
 8040e5c:	2900      	cmp	r1, #0
 8040e5e:	bfbe      	ittt	lt
 8040e60:	2000      	movlt	r0, #0
 8040e62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8040e66:	e006      	blt.n	8040e76 <__aeabi_ldivmod+0x1e>
 8040e68:	bf08      	it	eq
 8040e6a:	2800      	cmpeq	r0, #0
 8040e6c:	bf1c      	itt	ne
 8040e6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8040e72:	f04f 30ff 	movne.w	r0, #4294967295
 8040e76:	f000 b9bd 	b.w	80411f4 <__aeabi_idiv0>
 8040e7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8040e7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040e82:	2900      	cmp	r1, #0
 8040e84:	db09      	blt.n	8040e9a <__aeabi_ldivmod+0x42>
 8040e86:	2b00      	cmp	r3, #0
 8040e88:	db1a      	blt.n	8040ec0 <__aeabi_ldivmod+0x68>
 8040e8a:	f000 f84d 	bl	8040f28 <__udivmoddi4>
 8040e8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e96:	b004      	add	sp, #16
 8040e98:	4770      	bx	lr
 8040e9a:	4240      	negs	r0, r0
 8040e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040ea0:	2b00      	cmp	r3, #0
 8040ea2:	db1b      	blt.n	8040edc <__aeabi_ldivmod+0x84>
 8040ea4:	f000 f840 	bl	8040f28 <__udivmoddi4>
 8040ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040eb0:	b004      	add	sp, #16
 8040eb2:	4240      	negs	r0, r0
 8040eb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040eb8:	4252      	negs	r2, r2
 8040eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040ebe:	4770      	bx	lr
 8040ec0:	4252      	negs	r2, r2
 8040ec2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040ec6:	f000 f82f 	bl	8040f28 <__udivmoddi4>
 8040eca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040ed2:	b004      	add	sp, #16
 8040ed4:	4240      	negs	r0, r0
 8040ed6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040eda:	4770      	bx	lr
 8040edc:	4252      	negs	r2, r2
 8040ede:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040ee2:	f000 f821 	bl	8040f28 <__udivmoddi4>
 8040ee6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040eee:	b004      	add	sp, #16
 8040ef0:	4252      	negs	r2, r2
 8040ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040ef6:	4770      	bx	lr

08040ef8 <__aeabi_uldivmod>:
 8040ef8:	b953      	cbnz	r3, 8040f10 <__aeabi_uldivmod+0x18>
 8040efa:	b94a      	cbnz	r2, 8040f10 <__aeabi_uldivmod+0x18>
 8040efc:	2900      	cmp	r1, #0
 8040efe:	bf08      	it	eq
 8040f00:	2800      	cmpeq	r0, #0
 8040f02:	bf1c      	itt	ne
 8040f04:	f04f 31ff 	movne.w	r1, #4294967295
 8040f08:	f04f 30ff 	movne.w	r0, #4294967295
 8040f0c:	f000 b972 	b.w	80411f4 <__aeabi_idiv0>
 8040f10:	f1ad 0c08 	sub.w	ip, sp, #8
 8040f14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040f18:	f000 f806 	bl	8040f28 <__udivmoddi4>
 8040f1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040f24:	b004      	add	sp, #16
 8040f26:	4770      	bx	lr

08040f28 <__udivmoddi4>:
 8040f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040f2c:	9e08      	ldr	r6, [sp, #32]
 8040f2e:	4604      	mov	r4, r0
 8040f30:	4688      	mov	r8, r1
 8040f32:	2b00      	cmp	r3, #0
 8040f34:	d14b      	bne.n	8040fce <__udivmoddi4+0xa6>
 8040f36:	428a      	cmp	r2, r1
 8040f38:	4615      	mov	r5, r2
 8040f3a:	d967      	bls.n	804100c <__udivmoddi4+0xe4>
 8040f3c:	fab2 f282 	clz	r2, r2
 8040f40:	b14a      	cbz	r2, 8040f56 <__udivmoddi4+0x2e>
 8040f42:	f1c2 0720 	rsb	r7, r2, #32
 8040f46:	fa01 f302 	lsl.w	r3, r1, r2
 8040f4a:	fa20 f707 	lsr.w	r7, r0, r7
 8040f4e:	4095      	lsls	r5, r2
 8040f50:	ea47 0803 	orr.w	r8, r7, r3
 8040f54:	4094      	lsls	r4, r2
 8040f56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040f5a:	0c23      	lsrs	r3, r4, #16
 8040f5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8040f60:	fa1f fc85 	uxth.w	ip, r5
 8040f64:	fb0e 8817 	mls	r8, lr, r7, r8
 8040f68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040f6c:	fb07 f10c 	mul.w	r1, r7, ip
 8040f70:	4299      	cmp	r1, r3
 8040f72:	d909      	bls.n	8040f88 <__udivmoddi4+0x60>
 8040f74:	18eb      	adds	r3, r5, r3
 8040f76:	f107 30ff 	add.w	r0, r7, #4294967295
 8040f7a:	f080 811b 	bcs.w	80411b4 <__udivmoddi4+0x28c>
 8040f7e:	4299      	cmp	r1, r3
 8040f80:	f240 8118 	bls.w	80411b4 <__udivmoddi4+0x28c>
 8040f84:	3f02      	subs	r7, #2
 8040f86:	442b      	add	r3, r5
 8040f88:	1a5b      	subs	r3, r3, r1
 8040f8a:	b2a4      	uxth	r4, r4
 8040f8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8040f90:	fb0e 3310 	mls	r3, lr, r0, r3
 8040f94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040f98:	fb00 fc0c 	mul.w	ip, r0, ip
 8040f9c:	45a4      	cmp	ip, r4
 8040f9e:	d909      	bls.n	8040fb4 <__udivmoddi4+0x8c>
 8040fa0:	192c      	adds	r4, r5, r4
 8040fa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8040fa6:	f080 8107 	bcs.w	80411b8 <__udivmoddi4+0x290>
 8040faa:	45a4      	cmp	ip, r4
 8040fac:	f240 8104 	bls.w	80411b8 <__udivmoddi4+0x290>
 8040fb0:	3802      	subs	r0, #2
 8040fb2:	442c      	add	r4, r5
 8040fb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8040fb8:	eba4 040c 	sub.w	r4, r4, ip
 8040fbc:	2700      	movs	r7, #0
 8040fbe:	b11e      	cbz	r6, 8040fc8 <__udivmoddi4+0xa0>
 8040fc0:	40d4      	lsrs	r4, r2
 8040fc2:	2300      	movs	r3, #0
 8040fc4:	e9c6 4300 	strd	r4, r3, [r6]
 8040fc8:	4639      	mov	r1, r7
 8040fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040fce:	428b      	cmp	r3, r1
 8040fd0:	d909      	bls.n	8040fe6 <__udivmoddi4+0xbe>
 8040fd2:	2e00      	cmp	r6, #0
 8040fd4:	f000 80eb 	beq.w	80411ae <__udivmoddi4+0x286>
 8040fd8:	2700      	movs	r7, #0
 8040fda:	e9c6 0100 	strd	r0, r1, [r6]
 8040fde:	4638      	mov	r0, r7
 8040fe0:	4639      	mov	r1, r7
 8040fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040fe6:	fab3 f783 	clz	r7, r3
 8040fea:	2f00      	cmp	r7, #0
 8040fec:	d147      	bne.n	804107e <__udivmoddi4+0x156>
 8040fee:	428b      	cmp	r3, r1
 8040ff0:	d302      	bcc.n	8040ff8 <__udivmoddi4+0xd0>
 8040ff2:	4282      	cmp	r2, r0
 8040ff4:	f200 80fa 	bhi.w	80411ec <__udivmoddi4+0x2c4>
 8040ff8:	1a84      	subs	r4, r0, r2
 8040ffa:	eb61 0303 	sbc.w	r3, r1, r3
 8040ffe:	2001      	movs	r0, #1
 8041000:	4698      	mov	r8, r3
 8041002:	2e00      	cmp	r6, #0
 8041004:	d0e0      	beq.n	8040fc8 <__udivmoddi4+0xa0>
 8041006:	e9c6 4800 	strd	r4, r8, [r6]
 804100a:	e7dd      	b.n	8040fc8 <__udivmoddi4+0xa0>
 804100c:	b902      	cbnz	r2, 8041010 <__udivmoddi4+0xe8>
 804100e:	deff      	udf	#255	; 0xff
 8041010:	fab2 f282 	clz	r2, r2
 8041014:	2a00      	cmp	r2, #0
 8041016:	f040 808f 	bne.w	8041138 <__udivmoddi4+0x210>
 804101a:	1b49      	subs	r1, r1, r5
 804101c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8041020:	fa1f f885 	uxth.w	r8, r5
 8041024:	2701      	movs	r7, #1
 8041026:	fbb1 fcfe 	udiv	ip, r1, lr
 804102a:	0c23      	lsrs	r3, r4, #16
 804102c:	fb0e 111c 	mls	r1, lr, ip, r1
 8041030:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8041034:	fb08 f10c 	mul.w	r1, r8, ip
 8041038:	4299      	cmp	r1, r3
 804103a:	d907      	bls.n	804104c <__udivmoddi4+0x124>
 804103c:	18eb      	adds	r3, r5, r3
 804103e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8041042:	d202      	bcs.n	804104a <__udivmoddi4+0x122>
 8041044:	4299      	cmp	r1, r3
 8041046:	f200 80cd 	bhi.w	80411e4 <__udivmoddi4+0x2bc>
 804104a:	4684      	mov	ip, r0
 804104c:	1a59      	subs	r1, r3, r1
 804104e:	b2a3      	uxth	r3, r4
 8041050:	fbb1 f0fe 	udiv	r0, r1, lr
 8041054:	fb0e 1410 	mls	r4, lr, r0, r1
 8041058:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 804105c:	fb08 f800 	mul.w	r8, r8, r0
 8041060:	45a0      	cmp	r8, r4
 8041062:	d907      	bls.n	8041074 <__udivmoddi4+0x14c>
 8041064:	192c      	adds	r4, r5, r4
 8041066:	f100 33ff 	add.w	r3, r0, #4294967295
 804106a:	d202      	bcs.n	8041072 <__udivmoddi4+0x14a>
 804106c:	45a0      	cmp	r8, r4
 804106e:	f200 80b6 	bhi.w	80411de <__udivmoddi4+0x2b6>
 8041072:	4618      	mov	r0, r3
 8041074:	eba4 0408 	sub.w	r4, r4, r8
 8041078:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804107c:	e79f      	b.n	8040fbe <__udivmoddi4+0x96>
 804107e:	f1c7 0c20 	rsb	ip, r7, #32
 8041082:	40bb      	lsls	r3, r7
 8041084:	fa22 fe0c 	lsr.w	lr, r2, ip
 8041088:	ea4e 0e03 	orr.w	lr, lr, r3
 804108c:	fa01 f407 	lsl.w	r4, r1, r7
 8041090:	fa20 f50c 	lsr.w	r5, r0, ip
 8041094:	fa21 f30c 	lsr.w	r3, r1, ip
 8041098:	ea4f 481e 	mov.w	r8, lr, lsr #16
 804109c:	4325      	orrs	r5, r4
 804109e:	fbb3 f9f8 	udiv	r9, r3, r8
 80410a2:	0c2c      	lsrs	r4, r5, #16
 80410a4:	fb08 3319 	mls	r3, r8, r9, r3
 80410a8:	fa1f fa8e 	uxth.w	sl, lr
 80410ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80410b0:	fb09 f40a 	mul.w	r4, r9, sl
 80410b4:	429c      	cmp	r4, r3
 80410b6:	fa02 f207 	lsl.w	r2, r2, r7
 80410ba:	fa00 f107 	lsl.w	r1, r0, r7
 80410be:	d90b      	bls.n	80410d8 <__udivmoddi4+0x1b0>
 80410c0:	eb1e 0303 	adds.w	r3, lr, r3
 80410c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80410c8:	f080 8087 	bcs.w	80411da <__udivmoddi4+0x2b2>
 80410cc:	429c      	cmp	r4, r3
 80410ce:	f240 8084 	bls.w	80411da <__udivmoddi4+0x2b2>
 80410d2:	f1a9 0902 	sub.w	r9, r9, #2
 80410d6:	4473      	add	r3, lr
 80410d8:	1b1b      	subs	r3, r3, r4
 80410da:	b2ad      	uxth	r5, r5
 80410dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80410e0:	fb08 3310 	mls	r3, r8, r0, r3
 80410e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80410e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80410ec:	45a2      	cmp	sl, r4
 80410ee:	d908      	bls.n	8041102 <__udivmoddi4+0x1da>
 80410f0:	eb1e 0404 	adds.w	r4, lr, r4
 80410f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80410f8:	d26b      	bcs.n	80411d2 <__udivmoddi4+0x2aa>
 80410fa:	45a2      	cmp	sl, r4
 80410fc:	d969      	bls.n	80411d2 <__udivmoddi4+0x2aa>
 80410fe:	3802      	subs	r0, #2
 8041100:	4474      	add	r4, lr
 8041102:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8041106:	fba0 8902 	umull	r8, r9, r0, r2
 804110a:	eba4 040a 	sub.w	r4, r4, sl
 804110e:	454c      	cmp	r4, r9
 8041110:	46c2      	mov	sl, r8
 8041112:	464b      	mov	r3, r9
 8041114:	d354      	bcc.n	80411c0 <__udivmoddi4+0x298>
 8041116:	d051      	beq.n	80411bc <__udivmoddi4+0x294>
 8041118:	2e00      	cmp	r6, #0
 804111a:	d069      	beq.n	80411f0 <__udivmoddi4+0x2c8>
 804111c:	ebb1 050a 	subs.w	r5, r1, sl
 8041120:	eb64 0403 	sbc.w	r4, r4, r3
 8041124:	fa04 fc0c 	lsl.w	ip, r4, ip
 8041128:	40fd      	lsrs	r5, r7
 804112a:	40fc      	lsrs	r4, r7
 804112c:	ea4c 0505 	orr.w	r5, ip, r5
 8041130:	e9c6 5400 	strd	r5, r4, [r6]
 8041134:	2700      	movs	r7, #0
 8041136:	e747      	b.n	8040fc8 <__udivmoddi4+0xa0>
 8041138:	f1c2 0320 	rsb	r3, r2, #32
 804113c:	fa20 f703 	lsr.w	r7, r0, r3
 8041140:	4095      	lsls	r5, r2
 8041142:	fa01 f002 	lsl.w	r0, r1, r2
 8041146:	fa21 f303 	lsr.w	r3, r1, r3
 804114a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 804114e:	4338      	orrs	r0, r7
 8041150:	0c01      	lsrs	r1, r0, #16
 8041152:	fbb3 f7fe 	udiv	r7, r3, lr
 8041156:	fa1f f885 	uxth.w	r8, r5
 804115a:	fb0e 3317 	mls	r3, lr, r7, r3
 804115e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041162:	fb07 f308 	mul.w	r3, r7, r8
 8041166:	428b      	cmp	r3, r1
 8041168:	fa04 f402 	lsl.w	r4, r4, r2
 804116c:	d907      	bls.n	804117e <__udivmoddi4+0x256>
 804116e:	1869      	adds	r1, r5, r1
 8041170:	f107 3cff 	add.w	ip, r7, #4294967295
 8041174:	d22f      	bcs.n	80411d6 <__udivmoddi4+0x2ae>
 8041176:	428b      	cmp	r3, r1
 8041178:	d92d      	bls.n	80411d6 <__udivmoddi4+0x2ae>
 804117a:	3f02      	subs	r7, #2
 804117c:	4429      	add	r1, r5
 804117e:	1acb      	subs	r3, r1, r3
 8041180:	b281      	uxth	r1, r0
 8041182:	fbb3 f0fe 	udiv	r0, r3, lr
 8041186:	fb0e 3310 	mls	r3, lr, r0, r3
 804118a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804118e:	fb00 f308 	mul.w	r3, r0, r8
 8041192:	428b      	cmp	r3, r1
 8041194:	d907      	bls.n	80411a6 <__udivmoddi4+0x27e>
 8041196:	1869      	adds	r1, r5, r1
 8041198:	f100 3cff 	add.w	ip, r0, #4294967295
 804119c:	d217      	bcs.n	80411ce <__udivmoddi4+0x2a6>
 804119e:	428b      	cmp	r3, r1
 80411a0:	d915      	bls.n	80411ce <__udivmoddi4+0x2a6>
 80411a2:	3802      	subs	r0, #2
 80411a4:	4429      	add	r1, r5
 80411a6:	1ac9      	subs	r1, r1, r3
 80411a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80411ac:	e73b      	b.n	8041026 <__udivmoddi4+0xfe>
 80411ae:	4637      	mov	r7, r6
 80411b0:	4630      	mov	r0, r6
 80411b2:	e709      	b.n	8040fc8 <__udivmoddi4+0xa0>
 80411b4:	4607      	mov	r7, r0
 80411b6:	e6e7      	b.n	8040f88 <__udivmoddi4+0x60>
 80411b8:	4618      	mov	r0, r3
 80411ba:	e6fb      	b.n	8040fb4 <__udivmoddi4+0x8c>
 80411bc:	4541      	cmp	r1, r8
 80411be:	d2ab      	bcs.n	8041118 <__udivmoddi4+0x1f0>
 80411c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80411c4:	eb69 020e 	sbc.w	r2, r9, lr
 80411c8:	3801      	subs	r0, #1
 80411ca:	4613      	mov	r3, r2
 80411cc:	e7a4      	b.n	8041118 <__udivmoddi4+0x1f0>
 80411ce:	4660      	mov	r0, ip
 80411d0:	e7e9      	b.n	80411a6 <__udivmoddi4+0x27e>
 80411d2:	4618      	mov	r0, r3
 80411d4:	e795      	b.n	8041102 <__udivmoddi4+0x1da>
 80411d6:	4667      	mov	r7, ip
 80411d8:	e7d1      	b.n	804117e <__udivmoddi4+0x256>
 80411da:	4681      	mov	r9, r0
 80411dc:	e77c      	b.n	80410d8 <__udivmoddi4+0x1b0>
 80411de:	3802      	subs	r0, #2
 80411e0:	442c      	add	r4, r5
 80411e2:	e747      	b.n	8041074 <__udivmoddi4+0x14c>
 80411e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80411e8:	442b      	add	r3, r5
 80411ea:	e72f      	b.n	804104c <__udivmoddi4+0x124>
 80411ec:	4638      	mov	r0, r7
 80411ee:	e708      	b.n	8041002 <__udivmoddi4+0xda>
 80411f0:	4637      	mov	r7, r6
 80411f2:	e6e9      	b.n	8040fc8 <__udivmoddi4+0xa0>

080411f4 <__aeabi_idiv0>:
 80411f4:	4770      	bx	lr
 80411f6:	bf00      	nop

080411f8 <init_battery_monitor>:

static ADC_HandleTypeDef hadc_bat_monitor;

// starts and configures the peripherals that are to be used
void init_battery_monitor(void)
{
 80411f8:	b530      	push	{r4, r5, lr}
 80411fa:	b085      	sub	sp, #20
  VBAT (PC14) peripheral initialization
  */
static void config_vbat_reader(void)
{

  ADC_ChannelConfTypeDef sConfig = {0};
 80411fc:	2210      	movs	r2, #16
 80411fe:	2100      	movs	r1, #0
 8041200:	4668      	mov	r0, sp
 8041202:	f00f fcea 	bl	8050bda <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc_bat_monitor.Instance = ADC1;
 8041206:	4c12      	ldr	r4, [pc, #72]	; (8041250 <init_battery_monitor+0x58>)
  hadc_bat_monitor.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8041208:	4a12      	ldr	r2, [pc, #72]	; (8041254 <init_battery_monitor+0x5c>)
 804120a:	2300      	movs	r3, #0
  hadc_bat_monitor.Init.Resolution = ADC_RESOLUTION_12B;
  hadc_bat_monitor.Init.ScanConvMode = DISABLE;
  hadc_bat_monitor.Init.ContinuousConvMode = ENABLE;
 804120c:	2501      	movs	r5, #1
  hadc_bat_monitor.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 804120e:	e9c4 2300 	strd	r2, r3, [r4]
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc_bat_monitor.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc_bat_monitor.Init.NbrOfConversion = 1;
  hadc_bat_monitor.Init.DMAContinuousRequests = DISABLE;
  hadc_bat_monitor.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc_bat_monitor) != HAL_OK)
 8041212:	4620      	mov	r0, r4
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8041214:	4a10      	ldr	r2, [pc, #64]	; (8041258 <init_battery_monitor+0x60>)
  hadc_bat_monitor.Init.Resolution = ADC_RESOLUTION_12B;
 8041216:	60a3      	str	r3, [r4, #8]
  hadc_bat_monitor.Init.ScanConvMode = DISABLE;
 8041218:	6123      	str	r3, [r4, #16]
  hadc_bat_monitor.Init.ContinuousConvMode = ENABLE;
 804121a:	7625      	strb	r5, [r4, #24]
  hadc_bat_monitor.Init.DiscontinuousConvMode = DISABLE;
 804121c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc_bat_monitor.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8041220:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8041222:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc_bat_monitor.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8041224:	60e3      	str	r3, [r4, #12]
  hadc_bat_monitor.Init.NbrOfConversion = 1;
 8041226:	61e5      	str	r5, [r4, #28]
  hadc_bat_monitor.Init.DMAContinuousRequests = DISABLE;
 8041228:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc_bat_monitor.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 804122c:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc_bat_monitor) != HAL_OK)
 804122e:	f002 fbf1 	bl	8043a14 <HAL_ADC_Init>
 8041232:	b100      	cbz	r0, 8041236 <init_battery_monitor+0x3e>
 8041234:	e7fe      	b.n	8041234 <init_battery_monitor+0x3c>
  {
    while(1);
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8041236:	230e      	movs	r3, #14
  sConfig.Rank = 1;
 8041238:	e9cd 3500 	strd	r3, r5, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 804123c:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 804123e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 8041240:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8041242:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 8041244:	f002 fd74 	bl	8043d30 <HAL_ADC_ConfigChannel>
 8041248:	b100      	cbz	r0, 804124c <init_battery_monitor+0x54>
 804124a:	e7fe      	b.n	804124a <init_battery_monitor+0x52>
}
 804124c:	b005      	add	sp, #20
 804124e:	bd30      	pop	{r4, r5, pc}
 8041250:	200013fc 	.word	0x200013fc
 8041254:	40012000 	.word	0x40012000
 8041258:	0f000001 	.word	0x0f000001
 804125c:	00000000 	.word	0x00000000

08041260 <get_battery_voltage>:
{
 8041260:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc_bat_monitor);
 8041262:	4c1b      	ldr	r4, [pc, #108]	; (80412d0 <get_battery_voltage+0x70>)
 8041264:	4620      	mov	r0, r4
 8041266:	f002 fc7b 	bl	8043b60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc_bat_monitor, 1000);
 804126a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804126e:	4620      	mov	r0, r4
 8041270:	f002 fd0a 	bl	8043c88 <HAL_ADC_PollForConversion>
	uint16_t adc_return_value = HAL_ADC_GetValue(&hadc_bat_monitor);
 8041274:	4620      	mov	r0, r4
 8041276:	f002 fd57 	bl	8043d28 <HAL_ADC_GetValue>
	double voltage_on_adc_pin = adc_return_value *  MAX_INPUT_VOLTAGE_ON_ADC / MAX_RESOLUTION_ADC;
 804127a:	b280      	uxth	r0, r0
 804127c:	f7ff fa8a 	bl	8040794 <__aeabi_i2d>
 8041280:	a30b      	add	r3, pc, #44	; (adr r3, 80412b0 <get_battery_voltage+0x50>)
 8041282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041286:	f7ff faef 	bl	8040868 <__aeabi_dmul>
 804128a:	a30b      	add	r3, pc, #44	; (adr r3, 80412b8 <get_battery_voltage+0x58>)
 804128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041290:	f7ff fc14 	bl	8040abc <__aeabi_ddiv>
	double battery_voltage = (VOLTAGE_DIVIDER_RATIO * voltage_on_adc_pin) - OFFSET;
 8041294:	a30a      	add	r3, pc, #40	; (adr r3, 80412c0 <get_battery_voltage+0x60>)
 8041296:	e9d3 2300 	ldrd	r2, r3, [r3]
 804129a:	f7ff fae5 	bl	8040868 <__aeabi_dmul>
 804129e:	a30a      	add	r3, pc, #40	; (adr r3, 80412c8 <get_battery_voltage+0x68>)
 80412a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80412a4:	f7ff f928 	bl	80404f8 <__aeabi_dsub>
}
 80412a8:	ec41 0b10 	vmov	d0, r0, r1
 80412ac:	bd10      	pop	{r4, pc}
 80412ae:	bf00      	nop
 80412b0:	66666666 	.word	0x66666666
 80412b4:	400a6666 	.word	0x400a6666
 80412b8:	00000000 	.word	0x00000000
 80412bc:	40affe00 	.word	0x40affe00
 80412c0:	b851eb85 	.word	0xb851eb85
 80412c4:	3ff7851e 	.word	0x3ff7851e
 80412c8:	9999999a 	.word	0x9999999a
 80412cc:	3fb99999 	.word	0x3fb99999
 80412d0:	200013fc 	.word	0x200013fc

080412d4 <assert_version>:
		return true;
	return false;
}

bool assert_version(uint8_t major_version, uint8_t minor_version, uint8_t patch_version){
	if(MAJOR_FIRMWARE_VERSION == major_version){ // Criar define para posições da versão
 80412d4:	2801      	cmp	r0, #1
 80412d6:	d105      	bne.n	80412e4 <assert_version+0x10>
		if (MINOR_FIRMWARE_VERSION == minor_version){
 80412d8:	b939      	cbnz	r1, 80412ea <assert_version+0x16>
			if (PATCH_FIRMWARE_VERSION < patch_version){
 80412da:	2a11      	cmp	r2, #17
 80412dc:	bf94      	ite	ls
 80412de:	2000      	movls	r0, #0
 80412e0:	2001      	movhi	r0, #1
 80412e2:	4770      	bx	lr
		}
		else if(MINOR_FIRMWARE_VERSION < minor_version){
			return true;
		}
	}
	else if (MAJOR_FIRMWARE_VERSION < major_version){
 80412e4:	bf8c      	ite	hi
 80412e6:	2001      	movhi	r0, #1
 80412e8:	2000      	movls	r0, #0
		return true;
	}
	return false;
}
 80412ea:	4770      	bx	lr

080412ec <ble_handler>:


int ble_handler(uint8_t *message)
{
 80412ec:	b508      	push	{r3, lr}
	switch (message[1]) {
 80412ee:	7842      	ldrb	r2, [r0, #1]
 80412f0:	2a21      	cmp	r2, #33	; 0x21
{
 80412f2:	4603      	mov	r3, r0
	switch (message[1]) {
 80412f4:	d007      	beq.n	8041306 <ble_handler+0x1a>
 80412f6:	2a22      	cmp	r2, #34	; 0x22
 80412f8:	d00d      	beq.n	8041316 <ble_handler+0x2a>
 80412fa:	2a20      	cmp	r2, #32
 80412fc:	d109      	bne.n	8041312 <ble_handler+0x26>
		case REQUEST_DEVICE_TYPE:
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
			break;

		case REQUEST_FIRMWARE_VERSION:
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_firmware_version_buffer, sizeof(answer_firmware_version_buffer), 100);
 80412fe:	2364      	movs	r3, #100	; 0x64
 8041300:	2206      	movs	r2, #6
 8041302:	4912      	ldr	r1, [pc, #72]	; (804134c <ble_handler+0x60>)
 8041304:	e002      	b.n	804130c <ble_handler+0x20>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
 8041306:	4912      	ldr	r1, [pc, #72]	; (8041350 <ble_handler+0x64>)
 8041308:	2364      	movs	r3, #100	; 0x64
 804130a:	2204      	movs	r2, #4
				{
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
				}
			}
			else{
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 804130c:	4811      	ldr	r0, [pc, #68]	; (8041354 <ble_handler+0x68>)
 804130e:	f005 ffab 	bl	8047268 <HAL_UART_Transmit>
			break;
/*********************************************************************************************************************************/
	}

	return 0;
}
 8041312:	2000      	movs	r0, #0
 8041314:	bd08      	pop	{r3, pc}
			if(assert_version(message[2], message[3], message[4])){
 8041316:	7902      	ldrb	r2, [r0, #4]
 8041318:	78c1      	ldrb	r1, [r0, #3]
 804131a:	7880      	ldrb	r0, [r0, #2]
 804131c:	f7ff ffda 	bl	80412d4 <assert_version>
 8041320:	b178      	cbz	r0, 8041342 <ble_handler+0x56>
	if (DEVICE_TYPE == device_type)
 8041322:	795b      	ldrb	r3, [r3, #5]
 8041324:	2b01      	cmp	r3, #1
 8041326:	d108      	bne.n	804133a <ble_handler+0x4e>
					flags_ble.update_mode = SET;
 8041328:	4a0b      	ldr	r2, [pc, #44]	; (8041358 <ble_handler+0x6c>)
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 804132a:	490c      	ldr	r1, [pc, #48]	; (804135c <ble_handler+0x70>)
					flags_ble.update_mode = SET;
 804132c:	7813      	ldrb	r3, [r2, #0]
 804132e:	f043 0310 	orr.w	r3, r3, #16
 8041332:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041334:	2364      	movs	r3, #100	; 0x64
 8041336:	2203      	movs	r2, #3
 8041338:	e7e8      	b.n	804130c <ble_handler+0x20>
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
 804133a:	2364      	movs	r3, #100	; 0x64
 804133c:	2203      	movs	r2, #3
 804133e:	4908      	ldr	r1, [pc, #32]	; (8041360 <ble_handler+0x74>)
 8041340:	e7e4      	b.n	804130c <ble_handler+0x20>
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041342:	2364      	movs	r3, #100	; 0x64
 8041344:	2203      	movs	r2, #3
 8041346:	4907      	ldr	r1, [pc, #28]	; (8041364 <ble_handler+0x78>)
 8041348:	e7e0      	b.n	804130c <ble_handler+0x20>
 804134a:	bf00      	nop
 804134c:	20001004 	.word	0x20001004
 8041350:	20001000 	.word	0x20001000
 8041354:	20003dd4 	.word	0x20003dd4
 8041358:	20003dd0 	.word	0x20003dd0
 804135c:	2000100a 	.word	0x2000100a
 8041360:	2000100d 	.word	0x2000100d
 8041364:	20001010 	.word	0x20001010

08041368 <ble_config>:

void ble_config(void) {
 8041368:	b510      	push	{r4, lr}
	/* Set Baudrate	*/
	HAL_UART_Transmit(&huart1, (uint8_t *)BAUD_9600, sizeof(BAUD_9600)-1, 100); //9600
 804136a:	2364      	movs	r3, #100	; 0x64
void ble_config(void) {
 804136c:	b088      	sub	sp, #32
	HAL_UART_Transmit(&huart1, (uint8_t *)BAUD_9600, sizeof(BAUD_9600)-1, 100); //9600
 804136e:	2208      	movs	r2, #8
 8041370:	491e      	ldr	r1, [pc, #120]	; (80413ec <ble_config+0x84>)
 8041372:	481f      	ldr	r0, [pc, #124]	; (80413f0 <ble_config+0x88>)
 8041374:	f005 ff78 	bl	8047268 <HAL_UART_Transmit>

	uint8_t weatherstationSetName[20] = {0};
	uint8_t name_Id[4] = {0};
	uint16_t dev_addr = LORAWAN_DEVICE_ADDRESS;//0x0002
	uint8_t hex[4] = {0};
 8041378:	ac08      	add	r4, sp, #32
	uint8_t weatherstationSetName[20] = {0};
 804137a:	2214      	movs	r2, #20
 804137c:	2100      	movs	r1, #0
 804137e:	a803      	add	r0, sp, #12
 8041380:	f00f fc2b 	bl	8050bda <memset>
	uint8_t name_Id[4] = {0};
 8041384:	2300      	movs	r3, #0
	uint8_t hex[4] = {0};
 8041386:	f844 3d18 	str.w	r3, [r4, #-24]!
	sprintf((char*)hex, "%x", dev_addr);
 804138a:	2202      	movs	r2, #2
 804138c:	4919      	ldr	r1, [pc, #100]	; (80413f4 <ble_config+0x8c>)
	uint8_t name_Id[4] = {0};
 804138e:	9301      	str	r3, [sp, #4]
	sprintf((char*)hex, "%x", dev_addr);
 8041390:	4620      	mov	r0, r4
 8041392:	f010 f9b1 	bl	80516f8 <siprintf>
	uint8_t lenght = strlen((char*)hex);
 8041396:	4620      	mov	r0, r4
 8041398:	f7ff f852 	bl	8040440 <strlen>

	switch(lenght) {
 804139c:	b2c0      	uxtb	r0, r0
 804139e:	3801      	subs	r0, #1
 80413a0:	2803      	cmp	r0, #3
 80413a2:	d808      	bhi.n	80413b6 <ble_config+0x4e>
 80413a4:	e8df f000 	tbb	[pc, r0]
 80413a8:	1c191602 	.word	0x1c191602
	case 1:
		sprintf((char*)name_Id, "000%s", hex);
 80413ac:	4912      	ldr	r1, [pc, #72]	; (80413f8 <ble_config+0x90>)
 80413ae:	4622      	mov	r2, r4
		break;
	case 2:
		sprintf((char*)name_Id, "00%s", hex);
 80413b0:	a801      	add	r0, sp, #4
 80413b2:	f010 f9a1 	bl	80516f8 <siprintf>
		break;
	default:
		break;
	}

	strcat(strcpy((char*)weatherstationSetName, WEATHERSTATION_NAME), (char*)name_Id);
 80413b6:	4911      	ldr	r1, [pc, #68]	; (80413fc <ble_config+0x94>)
 80413b8:	a803      	add	r0, sp, #12
 80413ba:	f010 f9cc 	bl	8051756 <strcpy>
 80413be:	a901      	add	r1, sp, #4
 80413c0:	f010 f9ba 	bl	8051738 <strcat>

	/* Set Ble name	*/
	switch(DEVICE_TYPE) {
	case WEATHERSTATION:
		//sprintf((char*)weatherstationSetName,"%s%s", WEATHERSTATION_NAME, dev_addr);
		HAL_UART_Transmit(&huart1, (uint8_t *)weatherstationSetName, sizeof(weatherstationSetName)-1, 100);
 80413c4:	2364      	movs	r3, #100	; 0x64
 80413c6:	2213      	movs	r2, #19
 80413c8:	a903      	add	r1, sp, #12
 80413ca:	4809      	ldr	r0, [pc, #36]	; (80413f0 <ble_config+0x88>)
 80413cc:	f005 ff4c 	bl	8047268 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)"AT+NAMEEletrificador_xxxx", sizeof("AT+NAMEEletrificador_xxxx")-1, 100);
		break;
	default:
		break;
	}
}
 80413d0:	b008      	add	sp, #32
 80413d2:	bd10      	pop	{r4, pc}
		sprintf((char*)name_Id, "00%s", hex);
 80413d4:	4622      	mov	r2, r4
 80413d6:	490a      	ldr	r1, [pc, #40]	; (8041400 <ble_config+0x98>)
 80413d8:	e7ea      	b.n	80413b0 <ble_config+0x48>
		sprintf((char*)name_Id, "0%s", hex);
 80413da:	4622      	mov	r2, r4
 80413dc:	4909      	ldr	r1, [pc, #36]	; (8041404 <ble_config+0x9c>)
 80413de:	e7e7      	b.n	80413b0 <ble_config+0x48>
		sprintf((char*)name_Id, "%s", hex);
 80413e0:	4621      	mov	r1, r4
 80413e2:	a801      	add	r0, sp, #4
 80413e4:	f010 f9b7 	bl	8051756 <strcpy>
		break;
 80413e8:	e7e5      	b.n	80413b6 <ble_config+0x4e>
 80413ea:	bf00      	nop
 80413ec:	080542d8 	.word	0x080542d8
 80413f0:	20003dd4 	.word	0x20003dd4
 80413f4:	080542e1 	.word	0x080542e1
 80413f8:	080542e4 	.word	0x080542e4
 80413fc:	080542ea 	.word	0x080542ea
 8041400:	080542e5 	.word	0x080542e5
 8041404:	080542e6 	.word	0x080542e6

08041408 <MX_USART1_UART_Init>:
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8041408:	480b      	ldr	r0, [pc, #44]	; (8041438 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 804140a:	4a0c      	ldr	r2, [pc, #48]	; (804143c <MX_USART1_UART_Init+0x34>)
{
 804140c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 804140e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8041412:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8041416:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8041418:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 804141a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 804141e:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041420:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041424:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8041426:	f005 fed9 	bl	80471dc <HAL_UART_Init>
 804142a:	b118      	cbz	r0, 8041434 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 804142c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8041430:	f00d ba84 	b.w	804e93c <Error_Handler>
}
 8041434:	bd08      	pop	{r3, pc}
 8041436:	bf00      	nop
 8041438:	20003dd4 	.word	0x20003dd4
 804143c:	40011000 	.word	0x40011000

08041440 <Ble_Init_GPIO>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Ble_Init_GPIO(void)
{
 8041440:	b530      	push	{r4, r5, lr}
 8041442:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041444:	2214      	movs	r2, #20
 8041446:	2100      	movs	r1, #0
 8041448:	a803      	add	r0, sp, #12
 804144a:	f00f fbc6 	bl	8050bda <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804144e:	2400      	movs	r4, #0
 8041450:	4b18      	ldr	r3, [pc, #96]	; (80414b4 <Ble_Init_GPIO+0x74>)
 8041452:	9401      	str	r4, [sp, #4]
 8041454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 8041456:	4d18      	ldr	r5, [pc, #96]	; (80414b8 <Ble_Init_GPIO+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041458:	f042 0201 	orr.w	r2, r2, #1
 804145c:	631a      	str	r2, [r3, #48]	; 0x30
 804145e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041460:	f002 0201 	and.w	r2, r2, #1
 8041464:	9201      	str	r2, [sp, #4]
 8041466:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041468:	9402      	str	r4, [sp, #8]
 804146a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804146c:	f042 0202 	orr.w	r2, r2, #2
 8041470:	631a      	str	r2, [r3, #48]	; 0x30
 8041472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041474:	f003 0302 	and.w	r3, r3, #2
 8041478:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 804147a:	4628      	mov	r0, r5
 804147c:	2201      	movs	r2, #1
 804147e:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041482:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 8041484:	f003 fa64 	bl	8044950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_BRK_Pin */
  GPIO_InitStruct.Pin = BLE_BRK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041488:	f44f 7280 	mov.w	r2, #256	; 0x100
 804148c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 804148e:	a903      	add	r1, sp, #12
 8041490:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041492:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041496:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 804149a:	f003 f8e5 	bl	8044668 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 804149e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 80414a2:	a903      	add	r1, sp, #12
 80414a4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80414a6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 80414ac:	f003 f8dc 	bl	8044668 <HAL_GPIO_Init>

}
 80414b0:	b009      	add	sp, #36	; 0x24
 80414b2:	bd30      	pop	{r4, r5, pc}
 80414b4:	40023800 	.word	0x40023800
 80414b8:	40020000 	.word	0x40020000

080414bc <read_data>:
		return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80414bc:	b530      	push	{r4, r5, lr}
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80414be:	8c84      	ldrh	r4, [r0, #36]	; 0x24
		uint8_t len) {
 80414c0:	b085      	sub	sp, #20
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80414c2:	f241 3588 	movw	r5, #5000	; 0x1388
 80414c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
	tx_buff = (dev->addr << 1);
 80414ca:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80414cc:	9200      	str	r2, [sp, #0]
 80414ce:	b2a4      	uxth	r4, r4
 80414d0:	460a      	mov	r2, r1
 80414d2:	2301      	movs	r3, #1
 80414d4:	4621      	mov	r1, r4
 80414d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80414d8:	f003 fd5c 	bl	8044f94 <HAL_I2C_Mem_Read>
		return 0;
	else
		return 1;

}
 80414dc:	3000      	adds	r0, #0
 80414de:	bf18      	it	ne
 80414e0:	2001      	movne	r0, #1
 80414e2:	b005      	add	sp, #20
 80414e4:	bd30      	pop	{r4, r5, pc}

080414e6 <read_register16>:
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80414e6:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80414e8:	2302      	movs	r3, #2
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80414ea:	b087      	sub	sp, #28
	tx_buff = (dev->addr << 1);
 80414ec:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80414ee:	4615      	mov	r5, r2
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80414f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80414f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 80414f8:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80414fa:	ab05      	add	r3, sp, #20
 80414fc:	9300      	str	r3, [sp, #0]
 80414fe:	b2a4      	uxth	r4, r4
 8041500:	460a      	mov	r2, r1
 8041502:	2301      	movs	r3, #1
 8041504:	4621      	mov	r1, r4
 8041506:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8041508:	f003 fd44 	bl	8044f94 <HAL_I2C_Mem_Read>
 804150c:	b948      	cbnz	r0, 8041522 <read_register16+0x3c>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 804150e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8041512:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8041516:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804151a:	802b      	strh	r3, [r5, #0]
		return true;
 804151c:	2001      	movs	r0, #1
}
 804151e:	b007      	add	sp, #28
 8041520:	bd30      	pop	{r4, r5, pc}
		return false;
 8041522:	2000      	movs	r0, #0
 8041524:	e7fb      	b.n	804151e <read_register16+0x38>

08041526 <write_register8>:
	}

	return false;
}

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8041526:	b530      	push	{r4, r5, lr}
 8041528:	b087      	sub	sp, #28
 804152a:	ad06      	add	r5, sp, #24
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 804152c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 804152e:	f805 2d01 	strb.w	r2, [r5, #-1]!

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8041532:	2301      	movs	r3, #1
 8041534:	f242 7210 	movw	r2, #10000	; 0x2710
 8041538:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 804153c:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 804153e:	9500      	str	r5, [sp, #0]
 8041540:	b2a4      	uxth	r4, r4
 8041542:	460a      	mov	r2, r1
 8041544:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8041546:	4621      	mov	r1, r4
 8041548:	f003 fc94 	bl	8044e74 <HAL_I2C_Mem_Write>
		return false;
	else
		return true;
}
 804154c:	3000      	adds	r0, #0
 804154e:	bf18      	it	ne
 8041550:	2001      	movne	r0, #1
 8041552:	b007      	add	sp, #28
 8041554:	bd30      	pop	{r4, r5, pc}

08041556 <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 8041556:	2303      	movs	r3, #3
	params->filter = BMP280_FILTER_OFF;
 8041558:	2200      	movs	r2, #0
	params->mode = BMP280_MODE_NORMAL;
 804155a:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 804155c:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 804155e:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8041560:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8041562:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8041564:	7143      	strb	r3, [r0, #5]
}
 8041566:	4770      	bx	lr

08041568 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {

	if (dev->addr != BMP280_I2C_ADDRESS_0
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8041568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	if (dev->addr != BMP280_I2C_ADDRESS_0
 804156a:	3b76      	subs	r3, #118	; 0x76
 804156c:	2b01      	cmp	r3, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 804156e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8041570:	4604      	mov	r4, r0
 8041572:	460e      	mov	r6, r1
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8041574:	d902      	bls.n	804157c <bmp280_init+0x14>
	if (!read_calibration_data(dev)) {
		return false;
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
		return false;
 8041576:	2000      	movs	r0, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 8041578:	b002      	add	sp, #8
 804157a:	bd70      	pop	{r4, r5, r6, pc}
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 804157c:	2301      	movs	r3, #1
 804157e:	f100 0232 	add.w	r2, r0, #50	; 0x32
 8041582:	21d0      	movs	r1, #208	; 0xd0
 8041584:	f7ff ff9a 	bl	80414bc <read_data>
 8041588:	2800      	cmp	r0, #0
 804158a:	d1f4      	bne.n	8041576 <bmp280_init+0xe>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 804158c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8041590:	2b58      	cmp	r3, #88	; 0x58
 8041592:	d001      	beq.n	8041598 <bmp280_init+0x30>
 8041594:	2b60      	cmp	r3, #96	; 0x60
 8041596:	d1ee      	bne.n	8041576 <bmp280_init+0xe>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8041598:	22b6      	movs	r2, #182	; 0xb6
 804159a:	21e0      	movs	r1, #224	; 0xe0
 804159c:	4620      	mov	r0, r4
 804159e:	f7ff ffc2 	bl	8041526 <write_register8>
 80415a2:	2800      	cmp	r0, #0
 80415a4:	d1e7      	bne.n	8041576 <bmp280_init+0xe>
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80415a6:	2301      	movs	r3, #1
 80415a8:	f10d 0206 	add.w	r2, sp, #6
 80415ac:	21f3      	movs	r1, #243	; 0xf3
 80415ae:	4620      	mov	r0, r4
 80415b0:	f7ff ff84 	bl	80414bc <read_data>
 80415b4:	2800      	cmp	r0, #0
 80415b6:	d1f6      	bne.n	80415a6 <bmp280_init+0x3e>
				&& (status & 1) == 0)
 80415b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80415bc:	07db      	lsls	r3, r3, #31
 80415be:	d4f2      	bmi.n	80415a6 <bmp280_init+0x3e>
	if (read_register16(dev, 0x88, &dev->dig_T1)
 80415c0:	4622      	mov	r2, r4
 80415c2:	2188      	movs	r1, #136	; 0x88
 80415c4:	4620      	mov	r0, r4
 80415c6:	f7ff ff8e 	bl	80414e6 <read_register16>
 80415ca:	2800      	cmp	r0, #0
 80415cc:	d0d3      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80415ce:	1ca2      	adds	r2, r4, #2
 80415d0:	218a      	movs	r1, #138	; 0x8a
 80415d2:	4620      	mov	r0, r4
 80415d4:	f7ff ff87 	bl	80414e6 <read_register16>
 80415d8:	2800      	cmp	r0, #0
 80415da:	d0cc      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80415dc:	1d22      	adds	r2, r4, #4
 80415de:	218c      	movs	r1, #140	; 0x8c
 80415e0:	4620      	mov	r0, r4
 80415e2:	f7ff ff80 	bl	80414e6 <read_register16>
 80415e6:	2800      	cmp	r0, #0
 80415e8:	d0c5      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80415ea:	1da2      	adds	r2, r4, #6
 80415ec:	218e      	movs	r1, #142	; 0x8e
 80415ee:	4620      	mov	r0, r4
 80415f0:	f7ff ff79 	bl	80414e6 <read_register16>
 80415f4:	2800      	cmp	r0, #0
 80415f6:	d0be      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80415f8:	f104 0208 	add.w	r2, r4, #8
 80415fc:	2190      	movs	r1, #144	; 0x90
 80415fe:	4620      	mov	r0, r4
 8041600:	f7ff ff71 	bl	80414e6 <read_register16>
 8041604:	2800      	cmp	r0, #0
 8041606:	d0b6      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8041608:	f104 020a 	add.w	r2, r4, #10
 804160c:	2192      	movs	r1, #146	; 0x92
 804160e:	4620      	mov	r0, r4
 8041610:	f7ff ff69 	bl	80414e6 <read_register16>
 8041614:	2800      	cmp	r0, #0
 8041616:	d0ae      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8041618:	f104 020c 	add.w	r2, r4, #12
 804161c:	2194      	movs	r1, #148	; 0x94
 804161e:	4620      	mov	r0, r4
 8041620:	f7ff ff61 	bl	80414e6 <read_register16>
 8041624:	2800      	cmp	r0, #0
 8041626:	d0a6      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8041628:	f104 020e 	add.w	r2, r4, #14
 804162c:	2196      	movs	r1, #150	; 0x96
 804162e:	4620      	mov	r0, r4
 8041630:	f7ff ff59 	bl	80414e6 <read_register16>
 8041634:	2800      	cmp	r0, #0
 8041636:	d09e      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8041638:	f104 0210 	add.w	r2, r4, #16
 804163c:	2198      	movs	r1, #152	; 0x98
 804163e:	4620      	mov	r0, r4
 8041640:	f7ff ff51 	bl	80414e6 <read_register16>
 8041644:	2800      	cmp	r0, #0
 8041646:	d096      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8041648:	f104 0212 	add.w	r2, r4, #18
 804164c:	219a      	movs	r1, #154	; 0x9a
 804164e:	4620      	mov	r0, r4
 8041650:	f7ff ff49 	bl	80414e6 <read_register16>
 8041654:	2800      	cmp	r0, #0
 8041656:	d08e      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8041658:	f104 0214 	add.w	r2, r4, #20
 804165c:	219c      	movs	r1, #156	; 0x9c
 804165e:	4620      	mov	r0, r4
 8041660:	f7ff ff41 	bl	80414e6 <read_register16>
 8041664:	2800      	cmp	r0, #0
 8041666:	d086      	beq.n	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0x9e,
 8041668:	f104 0216 	add.w	r2, r4, #22
 804166c:	219e      	movs	r1, #158	; 0x9e
 804166e:	4620      	mov	r0, r4
 8041670:	f7ff ff39 	bl	80414e6 <read_register16>
 8041674:	2800      	cmp	r0, #0
 8041676:	f43f af7e 	beq.w	8041576 <bmp280_init+0xe>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 804167a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 804167e:	2b60      	cmp	r3, #96	; 0x60
 8041680:	d144      	bne.n	804170c <bmp280_init+0x1a4>
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8041682:	2301      	movs	r3, #1
 8041684:	f104 0218 	add.w	r2, r4, #24
 8041688:	21a1      	movs	r1, #161	; 0xa1
 804168a:	4620      	mov	r0, r4
 804168c:	f7ff ff16 	bl	80414bc <read_data>
 8041690:	2800      	cmp	r0, #0
 8041692:	f47f af70 	bne.w	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8041696:	f104 021a 	add.w	r2, r4, #26
 804169a:	21e1      	movs	r1, #225	; 0xe1
 804169c:	4620      	mov	r0, r4
 804169e:	f7ff ff22 	bl	80414e6 <read_register16>
 80416a2:	2800      	cmp	r0, #0
 80416a4:	f43f af67 	beq.w	8041576 <bmp280_init+0xe>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80416a8:	2301      	movs	r3, #1
 80416aa:	f104 021c 	add.w	r2, r4, #28
 80416ae:	21e3      	movs	r1, #227	; 0xe3
 80416b0:	4620      	mov	r0, r4
 80416b2:	f7ff ff03 	bl	80414bc <read_data>
 80416b6:	2800      	cmp	r0, #0
 80416b8:	f47f af5d 	bne.w	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0xe4, &h4)
 80416bc:	aa01      	add	r2, sp, #4
 80416be:	21e4      	movs	r1, #228	; 0xe4
 80416c0:	4620      	mov	r0, r4
 80416c2:	f7ff ff10 	bl	80414e6 <read_register16>
 80416c6:	2800      	cmp	r0, #0
 80416c8:	f43f af55 	beq.w	8041576 <bmp280_init+0xe>
			&& read_register16(dev, 0xe5, &h5)
 80416cc:	f10d 0206 	add.w	r2, sp, #6
 80416d0:	21e5      	movs	r1, #229	; 0xe5
 80416d2:	4620      	mov	r0, r4
 80416d4:	f7ff ff07 	bl	80414e6 <read_register16>
 80416d8:	2800      	cmp	r0, #0
 80416da:	f43f af4c 	beq.w	8041576 <bmp280_init+0xe>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80416de:	2301      	movs	r3, #1
 80416e0:	f104 0222 	add.w	r2, r4, #34	; 0x22
 80416e4:	21e7      	movs	r1, #231	; 0xe7
 80416e6:	4620      	mov	r0, r4
 80416e8:	f7ff fee8 	bl	80414bc <read_data>
 80416ec:	2800      	cmp	r0, #0
 80416ee:	f47f af42 	bne.w	8041576 <bmp280_init+0xe>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80416f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80416f6:	0113      	lsls	r3, r2, #4
 80416f8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80416fc:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8041700:	4313      	orrs	r3, r2
 8041702:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 8041704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8041708:	091b      	lsrs	r3, r3, #4
 804170a:	8423      	strh	r3, [r4, #32]
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 804170c:	7872      	ldrb	r2, [r6, #1]
 804170e:	7973      	ldrb	r3, [r6, #5]
 8041710:	0092      	lsls	r2, r2, #2
 8041712:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8041716:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 804171a:	21f5      	movs	r1, #245	; 0xf5
 804171c:	4620      	mov	r0, r4
 804171e:	f7ff ff02 	bl	8041526 <write_register8>
 8041722:	2800      	cmp	r0, #0
 8041724:	f47f af27 	bne.w	8041576 <bmp280_init+0xe>
	if (params->mode == BMP280_MODE_FORCED) {
 8041728:	7833      	ldrb	r3, [r6, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 804172a:	78b5      	ldrb	r5, [r6, #2]
	if (params->mode == BMP280_MODE_FORCED) {
 804172c:	2b01      	cmp	r3, #1
	uint8_t ctrl = (params->oversampling_temperature << 5)
 804172e:	78f3      	ldrb	r3, [r6, #3]
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8041730:	bf08      	it	eq
 8041732:	7030      	strbeq	r0, [r6, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8041734:	00ad      	lsls	r5, r5, #2
 8041736:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 804173a:	7833      	ldrb	r3, [r6, #0]
 804173c:	431d      	orrs	r5, r3
	if (dev->id == BME280_CHIP_ID) {
 804173e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8041742:	2b60      	cmp	r3, #96	; 0x60
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8041744:	b2ed      	uxtb	r5, r5
	if (dev->id == BME280_CHIP_ID) {
 8041746:	d008      	beq.n	804175a <bmp280_init+0x1f2>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8041748:	462a      	mov	r2, r5
 804174a:	21f4      	movs	r1, #244	; 0xf4
 804174c:	4620      	mov	r0, r4
 804174e:	f7ff feea 	bl	8041526 <write_register8>
 8041752:	fab0 f080 	clz	r0, r0
 8041756:	0940      	lsrs	r0, r0, #5
 8041758:	e70e      	b.n	8041578 <bmp280_init+0x10>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 804175a:	7932      	ldrb	r2, [r6, #4]
 804175c:	21f2      	movs	r1, #242	; 0xf2
 804175e:	4620      	mov	r0, r4
 8041760:	f7ff fee1 	bl	8041526 <write_register8>
 8041764:	2800      	cmp	r0, #0
 8041766:	d0ef      	beq.n	8041748 <bmp280_init+0x1e0>
 8041768:	e705      	b.n	8041576 <bmp280_init+0xe>

0804176a <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 804176a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804176e:	461d      	mov	r5, r3
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8041770:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
		uint32_t *humidity) {
 8041774:	b08b      	sub	sp, #44	; 0x2c
	if (dev->id != BME280_CHIP_ID) {
 8041776:	2b60      	cmp	r3, #96	; 0x60
		uint32_t *humidity) {
 8041778:	4604      	mov	r4, r0
 804177a:	460e      	mov	r6, r1
 804177c:	9207      	str	r2, [sp, #28]
	if (dev->id != BME280_CHIP_ID) {
 804177e:	d005      	beq.n	804178c <bmp280_read_fixed+0x22>
		if (humidity)
 8041780:	b115      	cbz	r5, 8041788 <bmp280_read_fixed+0x1e>
			*humidity = 0;
 8041782:	2300      	movs	r3, #0
 8041784:	602b      	str	r3, [r5, #0]
		humidity = NULL;
 8041786:	461d      	mov	r5, r3
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8041788:	2306      	movs	r3, #6
 804178a:	e003      	b.n	8041794 <bmp280_read_fixed+0x2a>
 804178c:	2d00      	cmp	r5, #0
 804178e:	bf0c      	ite	eq
 8041790:	2306      	moveq	r3, #6
 8041792:	2308      	movne	r3, #8
	if (read_data(dev, 0xf7, data, size)) {
 8041794:	aa08      	add	r2, sp, #32
 8041796:	21f7      	movs	r1, #247	; 0xf7
 8041798:	4620      	mov	r0, r4
 804179a:	f7ff fe8f 	bl	80414bc <read_data>
 804179e:	4684      	mov	ip, r0
 80417a0:	2800      	cmp	r0, #0
 80417a2:	f040 812f 	bne.w	8041a04 <bmp280_read_fixed+0x29a>
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80417a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80417aa:	9305      	str	r3, [sp, #20]
 80417ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80417b0:	9306      	str	r3, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80417b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80417b6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80417ba:	8821      	ldrh	r1, [r4, #0]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80417bc:	f89d e022 	ldrb.w	lr, [sp, #34]	; 0x22
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80417c0:	011b      	lsls	r3, r3, #4
 80417c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80417c6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80417ca:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80417ce:	ebc1 1213 	rsb	r2, r1, r3, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80417d2:	0049      	lsls	r1, r1, #1
 80417d4:	ebc1 03d3 	rsb	r3, r1, r3, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 80417d8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80417dc:	4352      	muls	r2, r2
			* (int32_t) dev->dig_T2) >> 11;
 80417de:	434b      	muls	r3, r1
			* (int32_t) dev->dig_T3) >> 14;
 80417e0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80417e4:	1312      	asrs	r2, r2, #12
			* (int32_t) dev->dig_T3) >> 14;
 80417e6:	434a      	muls	r2, r1
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80417e8:	1392      	asrs	r2, r2, #14
	*fine_temp = var1 + var2;
 80417ea:	eb02 23e3 	add.w	r3, r2, r3, asr #11
 80417ee:	9304      	str	r3, [sp, #16]
	return (*fine_temp * 5 + 128) >> 8;
 80417f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80417f4:	3380      	adds	r3, #128	; 0x80
 80417f6:	121b      	asrs	r3, r3, #8

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80417f8:	6033      	str	r3, [r6, #0]
	var1 = (int64_t) fine_temp - 128000;
 80417fa:	9b04      	ldr	r3, [sp, #16]
 80417fc:	f5b3 32fa 	subs.w	r2, r3, #128000	; 0x1f400
 8041800:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8041804:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8041808:	e9cd 2300 	strd	r2, r3, [sp]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 804180c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8041810:	4353      	muls	r3, r2
 8041812:	9a00      	ldr	r2, [sp, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041814:	9901      	ldr	r1, [sp, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041816:	fba2 ab02 	umull	sl, fp, r2, r2
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 804181a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 804181e:	fb02 f601 	mul.w	r6, r2, r1
 8041822:	9900      	ldr	r1, [sp, #0]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041824:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041828:	17d3      	asrs	r3, r2, #31
 804182a:	fb01 6603 	mla	r6, r1, r3, r6
 804182e:	fba2 2301 	umull	r2, r3, r2, r1
 8041832:	4433      	add	r3, r6
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041834:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041838:	ea4f 3903 	mov.w	r9, r3, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 804183c:	17f7      	asrs	r7, r6, #31
 804183e:	fb06 f30b 	mul.w	r3, r6, fp
 8041842:	fb0a 3307 	mla	r3, sl, r7, r3
 8041846:	fba6 670a 	umull	r6, r7, r6, sl
 804184a:	441f      	add	r7, r3
 804184c:	0a30      	lsrs	r0, r6, #8
 804184e:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041852:	ea4f 3802 	mov.w	r8, r2, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041856:	1239      	asrs	r1, r7, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041858:	ea49 5912 	orr.w	r9, r9, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 804185c:	eb10 0208 	adds.w	r2, r0, r8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8041860:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041864:	eb41 0309 	adc.w	r3, r1, r9
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8041868:	1c10      	adds	r0, r2, #0
 804186a:	f543 4100 	adc.w	r1, r3, #32768	; 0x8000
 804186e:	fba0 6708 	umull	r6, r7, r0, r8
 8041872:	fb08 7701 	mla	r7, r8, r1, r7
 8041876:	107b      	asrs	r3, r7, #1
 8041878:	9302      	str	r3, [sp, #8]
 804187a:	17fb      	asrs	r3, r7, #31
 804187c:	9303      	str	r3, [sp, #12]
	if (var1 == 0) {
 804187e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8041882:	4313      	orrs	r3, r2
 8041884:	f000 80bc 	beq.w	8041a00 <bmp280_read_fixed+0x296>
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041888:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 804188c:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8041890:	9800      	ldr	r0, [sp, #0]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041892:	fb02 f10b 	mul.w	r1, r2, fp
 8041896:	17d3      	asrs	r3, r2, #31
 8041898:	fb0a 1103 	mla	r1, sl, r3, r1
 804189c:	fba2 230a 	umull	r2, r3, r2, sl
 80418a0:	440b      	add	r3, r1
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80418a2:	9901      	ldr	r1, [sp, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80418a4:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80418a8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80418ac:	fb08 f101 	mul.w	r1, r8, r1
 80418b0:	fb00 1109 	mla	r1, r0, r9, r1
 80418b4:	fba8 8900 	umull	r8, r9, r8, r0
 80418b8:	4489      	add	r9, r1
 80418ba:	ea4f 4648 	mov.w	r6, r8, lsl #17
 80418be:	ea4f 4749 	mov.w	r7, r9, lsl #17
 80418c2:	18b0      	adds	r0, r6, r2
 80418c4:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 80418c8:	eb47 0103 	adc.w	r1, r7, r3
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80418cc:	9b06      	ldr	r3, [sp, #24]
 80418ce:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80418d2:	ea4e 1e03 	orr.w	lr, lr, r3, lsl #4
 80418d6:	9b05      	ldr	r3, [sp, #20]
 80418d8:	ea4e 3e03 	orr.w	lr, lr, r3, lsl #12
	p = 1048576 - adc_press;
 80418dc:	f5ce 1e80 	rsb	lr, lr, #1048576	; 0x100000
 80418e0:	ea4f 79ee 	mov.w	r9, lr, asr #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80418e4:	eb10 060c 	adds.w	r6, r0, ip
	p = (((p << 31) - var2) * 3125) / var1;
 80418e8:	ea4f 73c9 	mov.w	r3, r9, lsl #31
 80418ec:	ea4f 72ce 	mov.w	r2, lr, lsl #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80418f0:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 80418f4:	eb41 0709 	adc.w	r7, r1, r9
	p = (((p << 31) - var2) * 3125) / var1;
 80418f8:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
 80418fc:	1b92      	subs	r2, r2, r6
 80418fe:	eb63 0307 	sbc.w	r3, r3, r7
 8041902:	4699      	mov	r9, r3
 8041904:	f640 4335 	movw	r3, #3125	; 0xc35
 8041908:	fba2 0103 	umull	r0, r1, r2, r3
 804190c:	fb03 1109 	mla	r1, r3, r9, r1
 8041910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8041914:	f7ff faa0 	bl	8040e58 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8041918:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 804191c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8041920:	134e      	asrs	r6, r1, #13
 8041922:	0b47      	lsrs	r7, r0, #13
 8041924:	ea47 47c1 	orr.w	r7, r7, r1, lsl #19
 8041928:	fb02 fc06 	mul.w	ip, r2, r6
 804192c:	17d3      	asrs	r3, r2, #31
 804192e:	fb07 cc03 	mla	ip, r7, r3, ip
 8041932:	fba2 2307 	umull	r2, r3, r2, r7
 8041936:	4463      	add	r3, ip
 8041938:	4356      	muls	r6, r2
 804193a:	fb07 6603 	mla	r6, r7, r3, r6
 804193e:	fba2 2307 	umull	r2, r3, r2, r7
 8041942:	4433      	add	r3, r6
 8041944:	0e56      	lsrs	r6, r2, #25
 8041946:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 804194a:	1832      	adds	r2, r6, r0
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 804194c:	ea4f 6763 	mov.w	r7, r3, asr #25
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8041950:	eb47 0301 	adc.w	r3, r7, r1
	p = (((p << 31) - var2) * 3125) / var1;
 8041954:	4680      	mov	r8, r0
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8041956:	fb0a f101 	mul.w	r1, sl, r1
 804195a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 804195e:	fb08 170b 	mla	r7, r8, fp, r1
 8041962:	fbaa 0108 	umull	r0, r1, sl, r8
 8041966:	4439      	add	r1, r7
 8041968:	0cc6      	lsrs	r6, r0, #19
 804196a:	ea46 3641 	orr.w	r6, r6, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 804196e:	1990      	adds	r0, r2, r6
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8041970:	ea4f 47e1 	mov.w	r7, r1, asr #19
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8041974:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8041978:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 804197c:	eb43 0107 	adc.w	r1, r3, r7
 8041980:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 8041984:	0110      	lsls	r0, r2, #4
	return p;
 8041986:	4460      	add	r0, ip
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8041988:	9b07      	ldr	r3, [sp, #28]
 804198a:	6018      	str	r0, [r3, #0]

	if (humidity) {
 804198c:	b3b5      	cbz	r5, 80419fc <bmp280_read_fixed+0x292>
	v_x1_u32r = fine_temp - (int32_t) 76800;
 804198e:	9b04      	ldr	r3, [sp, #16]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8041990:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8041994:	f5a3 3296 	sub.w	r2, r3, #76800	; 0x12c00
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8041998:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 804199c:	ba49      	rev16	r1, r1
 804199e:	051b      	lsls	r3, r3, #20
 80419a0:	b289      	uxth	r1, r1
 80419a2:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80419a6:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80419aa:	fb02 1313 	mls	r3, r2, r3, r1
 80419ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80419b2:	13d9      	asrs	r1, r3, #15
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80419b4:	7f23      	ldrb	r3, [r4, #28]
 80419b6:	4353      	muls	r3, r2
 80419b8:	12db      	asrs	r3, r3, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80419ba:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80419be:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 80419c2:	4353      	muls	r3, r2
 80419c4:	129b      	asrs	r3, r3, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80419c6:	4343      	muls	r3, r0
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80419c8:	129b      	asrs	r3, r3, #10
 80419ca:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80419ce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80419d2:	4353      	muls	r3, r2
 80419d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80419d8:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80419da:	434b      	muls	r3, r1
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80419dc:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 80419de:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80419e0:	4352      	muls	r2, r2
 80419e2:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 80419e4:	434a      	muls	r2, r1
	v_x1_u32r = v_x1_u32r
 80419e6:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80419ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80419ee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80419f2:	bfa8      	it	ge
 80419f4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 80419f8:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80419fa:	602b      	str	r3, [r5, #0]
	}

	return true;
 80419fc:	2001      	movs	r0, #1
 80419fe:	e002      	b.n	8041a06 <bmp280_read_fixed+0x29c>
		return 0;  // avoid exception caused by division by zero
 8041a00:	4660      	mov	r0, ip
 8041a02:	e7c1      	b.n	8041988 <bmp280_read_fixed+0x21e>
		return false;
 8041a04:	2000      	movs	r0, #0
}
 8041a06:	b00b      	add	sp, #44	; 0x2c
 8041a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08041a0c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure, float *humidity)
{
 8041a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8041a0e:	460e      	mov	r6, r1
 8041a10:	4615      	mov	r5, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, humidity ? &fixed_humidity : NULL)) {
 8041a12:	461c      	mov	r4, r3
 8041a14:	b9eb      	cbnz	r3, 8041a52 <bmp280_read_float+0x46>
 8041a16:	aa02      	add	r2, sp, #8
 8041a18:	a901      	add	r1, sp, #4
 8041a1a:	f7ff fea6 	bl	804176a <bmp280_read_fixed>
 8041a1e:	b1b0      	cbz	r0, 8041a4e <bmp280_read_float+0x42>
		*temperature = (float) fixed_temperature / 100;
 8041a20:	eddd 7a01 	vldr	s15, [sp, #4]
 8041a24:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8041a58 <bmp280_read_float+0x4c>
 8041a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8041a2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 8041a30:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 8041a34:	ed86 7a00 	vstr	s14, [r6]
		*pressure = (float) fixed_pressure / 256;
 8041a38:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8041a3c:	edc5 7a00 	vstr	s15, [r5]
		if (humidity)
 8041a40:	b12c      	cbz	r4, 8041a4e <bmp280_read_float+0x42>
			*humidity = (float) fixed_humidity / 1024;
 8041a42:	eddd 7a03 	vldr	s15, [sp, #12]
 8041a46:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
 8041a4a:	edc4 7a00 	vstr	s15, [r4]
		return true;
	}

	return false;
}
 8041a4e:	b004      	add	sp, #16
 8041a50:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, humidity ? &fixed_humidity : NULL)) {
 8041a52:	ab03      	add	r3, sp, #12
 8041a54:	e7df      	b.n	8041a16 <bmp280_read_float+0xa>
 8041a56:	bf00      	nop
 8041a58:	42c80000 	.word	0x42c80000

08041a5c <init_irradiator>:
 * @param none
 * @retval none
 */
static void MX_USART2_UART_Init(void);

void init_irradiator(void) {
 8041a5c:	b530      	push	{r4, r5, lr}
 8041a5e:	b089      	sub	sp, #36	; 0x24
}


static void Irradiator_Init_GPIO(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041a60:	2400      	movs	r4, #0

  __HAL_RCC_USART2_CLK_ENABLE();
 8041a62:	4b21      	ldr	r3, [pc, #132]	; (8041ae8 <init_irradiator+0x8c>)
 8041a64:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041a66:	9405      	str	r4, [sp, #20]
  __HAL_RCC_USART2_CLK_ENABLE();
 8041a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Pin = IRRADIATOR_TX_Pin|IRRADIATOR_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041a6a:	4820      	ldr	r0, [pc, #128]	; (8041aec <init_irradiator+0x90>)
  __HAL_RCC_USART2_CLK_ENABLE();
 8041a6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8041a70:	641a      	str	r2, [r3, #64]	; 0x40
 8041a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8041a74:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8041a78:	9201      	str	r2, [sp, #4]
 8041a7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041a7c:	9402      	str	r4, [sp, #8]
 8041a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041a80:	f042 0201 	orr.w	r2, r2, #1
 8041a84:	631a      	str	r2, [r3, #48]	; 0x30
 8041a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a88:	f003 0301 	and.w	r3, r3, #1
 8041a8c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a8e:	250c      	movs	r5, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041a90:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a92:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8041a94:	2203      	movs	r2, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a96:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041a9a:	eb0d 0105 	add.w	r1, sp, r5
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8041a9e:	2307      	movs	r3, #7
 8041aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041aa4:	f002 fde0 	bl	8044668 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8041aa8:	4621      	mov	r1, r4
 8041aaa:	4622      	mov	r2, r4
 8041aac:	2026      	movs	r0, #38	; 0x26
 8041aae:	f002 f9e1 	bl	8043e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8041ab2:	2026      	movs	r0, #38	; 0x26
 8041ab4:	f002 fa12 	bl	8043edc <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8041ab8:	480d      	ldr	r0, [pc, #52]	; (8041af0 <init_irradiator+0x94>)
  huart2.Init.BaudRate = 115200;
 8041aba:	490e      	ldr	r1, [pc, #56]	; (8041af4 <init_irradiator+0x98>)
 8041abc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8041ac0:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8041ac4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8041ac8:	e9c0 4504 	strd	r4, r5, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8041acc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8041ad0:	f005 fb84 	bl	80471dc <HAL_UART_Init>
 8041ad4:	b108      	cbz	r0, 8041ada <init_irradiator+0x7e>
    Error_Handler();
 8041ad6:	f00c ff31 	bl	804e93c <Error_Handler>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)bit_Data, 1);
 8041ada:	2201      	movs	r2, #1
 8041adc:	4906      	ldr	r1, [pc, #24]	; (8041af8 <init_irradiator+0x9c>)
 8041ade:	4804      	ldr	r0, [pc, #16]	; (8041af0 <init_irradiator+0x94>)
 8041ae0:	f005 fc80 	bl	80473e4 <HAL_UART_Receive_IT>
}
 8041ae4:	b009      	add	sp, #36	; 0x24
 8041ae6:	bd30      	pop	{r4, r5, pc}
 8041ae8:	40023800 	.word	0x40023800
 8041aec:	40020000 	.word	0x40020000
 8041af0:	20003e18 	.word	0x20003e18
 8041af4:	40004400 	.word	0x40004400
 8041af8:	20002480 	.word	0x20002480

08041afc <getIntMeasure>:
uint32_t getIntMeasure(void){
 8041afc:	b530      	push	{r4, r5, lr}
		for(int i=0;i<(count_byte_irradiator-1);i++){
 8041afe:	4b0f      	ldr	r3, [pc, #60]	; (8041b3c <getIntMeasure+0x40>)
 8041b00:	7f98      	ldrb	r0, [r3, #30]
 8041b02:	2200      	movs	r2, #0
uint32_t getIntMeasure(void){
 8041b04:	b085      	sub	sp, #20
		for(int i=0;i<(count_byte_irradiator-1);i++){
 8041b06:	3801      	subs	r0, #1
    uint8_t pos=0;
 8041b08:	4611      	mov	r1, r2
		for(int i=0;i<(count_byte_irradiator-1);i++){
 8041b0a:	4290      	cmp	r0, r2
 8041b0c:	dc06      	bgt.n	8041b1c <getIntMeasure+0x20>
		count_byte_irradiator = 0;
 8041b0e:	2200      	movs	r2, #0
    return atoi((const char*)&bufferInt);
 8041b10:	a801      	add	r0, sp, #4
		count_byte_irradiator = 0;
 8041b12:	779a      	strb	r2, [r3, #30]
    return atoi((const char*)&bufferInt);
 8041b14:	f00f f82e 	bl	8050b74 <atoi>
}
 8041b18:	b005      	add	sp, #20
 8041b1a:	bd30      	pop	{r4, r5, pc}
			if(bit_Data[i]==' ')
 8041b1c:	5c9c      	ldrb	r4, [r3, r2]
 8041b1e:	2c20      	cmp	r4, #32
 8041b20:	d0f5      	beq.n	8041b0e <getIntMeasure+0x12>
			if(bit_Data[i] >= ZERO && bit_Data[i] <= NOVE) {
 8041b22:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8041b26:	2d09      	cmp	r5, #9
 8041b28:	d805      	bhi.n	8041b36 <getIntMeasure+0x3a>
				bufferInt[pos] = bit_Data[i];
 8041b2a:	ad04      	add	r5, sp, #16
 8041b2c:	440d      	add	r5, r1
				pos++;
 8041b2e:	3101      	adds	r1, #1
				bufferInt[pos] = bit_Data[i];
 8041b30:	f805 4c0c 	strb.w	r4, [r5, #-12]
				pos++;
 8041b34:	b2c9      	uxtb	r1, r1
		for(int i=0;i<(count_byte_irradiator-1);i++){
 8041b36:	3201      	adds	r2, #1
 8041b38:	e7e7      	b.n	8041b0a <getIntMeasure+0xe>
 8041b3a:	bf00      	nop
 8041b3c:	20002480 	.word	0x20002480

08041b40 <mediaCalculator>:
	media = (float)(measures/number);
 8041b40:	4a07      	ldr	r2, [pc, #28]	; (8041b60 <mediaCalculator+0x20>)
 8041b42:	6a13      	ldr	r3, [r2, #32]
 8041b44:	fbb3 f0f0 	udiv	r0, r3, r0
 8041b48:	ee07 0a90 	vmov	s15, r0
 8041b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	measures = 0;
 8041b50:	2300      	movs	r3, #0
}
 8041b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	measures = 0;
 8041b56:	6213      	str	r3, [r2, #32]
}
 8041b58:	ee17 0a90 	vmov	r0, s15
 8041b5c:	4770      	bx	lr
 8041b5e:	bf00      	nop
 8041b60:	20002480 	.word	0x20002480

08041b64 <HAL_UART_RxCpltCallback>:
	if (huart->Instance != USART2) {
 8041b64:	6802      	ldr	r2, [r0, #0]
 8041b66:	4b0d      	ldr	r3, [pc, #52]	; (8041b9c <HAL_UART_RxCpltCallback+0x38>)
 8041b68:	429a      	cmp	r2, r3
 8041b6a:	d115      	bne.n	8041b98 <HAL_UART_RxCpltCallback+0x34>
		count_byte_irradiator++;
 8041b6c:	490c      	ldr	r1, [pc, #48]	; (8041ba0 <HAL_UART_RxCpltCallback+0x3c>)
 8041b6e:	7f8b      	ldrb	r3, [r1, #30]
 8041b70:	3301      	adds	r3, #1
 8041b72:	b2db      	uxtb	r3, r3
		if(count_byte_irradiator > 4) {
 8041b74:	2b04      	cmp	r3, #4
		count_byte_irradiator++;
 8041b76:	778b      	strb	r3, [r1, #30]
		if(count_byte_irradiator > 4) {
 8041b78:	d909      	bls.n	8041b8e <HAL_UART_RxCpltCallback+0x2a>
		  if(bit_Data[count_byte_irradiator-1] == '\n') {
 8041b7a:	18ca      	adds	r2, r1, r3
 8041b7c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8041b80:	2a0a      	cmp	r2, #10
			flagsStation.receive_measure_irrad = 1;
 8041b82:	bf01      	itttt	eq
 8041b84:	4807      	ldreq	r0, [pc, #28]	; (8041ba4 <HAL_UART_RxCpltCallback+0x40>)
 8041b86:	7802      	ldrbeq	r2, [r0, #0]
 8041b88:	f042 0208 	orreq.w	r2, r2, #8
 8041b8c:	7002      	strbeq	r2, [r0, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&(bit_Data[count_byte_irradiator]), 1);
 8041b8e:	2201      	movs	r2, #1
 8041b90:	4419      	add	r1, r3
 8041b92:	4805      	ldr	r0, [pc, #20]	; (8041ba8 <HAL_UART_RxCpltCallback+0x44>)
 8041b94:	f005 bc26 	b.w	80473e4 <HAL_UART_Receive_IT>
}
 8041b98:	4770      	bx	lr
 8041b9a:	bf00      	nop
 8041b9c:	40004400 	.word	0x40004400
 8041ba0:	20002480 	.word	0x20002480
 8041ba4:	20003e64 	.word	0x20003e64
 8041ba8:	20003e18 	.word	0x20003e18

08041bac <mede_mm_chuva>:
{
	memcpy(AppData->Buff,Buffer_to_send,sizeof(Estation_Parameters));
}

void mede_mm_chuva(){
	pluviometer_count++;
 8041bac:	4a04      	ldr	r2, [pc, #16]	; (8041bc0 <mede_mm_chuva+0x14>)
 8041bae:	8813      	ldrh	r3, [r2, #0]
 8041bb0:	3301      	adds	r3, #1
 8041bb2:	8013      	strh	r3, [r2, #0]
	flagsStation.pluviometer=1;
 8041bb4:	4a03      	ldr	r2, [pc, #12]	; (8041bc4 <mede_mm_chuva+0x18>)
 8041bb6:	7813      	ldrb	r3, [r2, #0]
 8041bb8:	f043 0301 	orr.w	r3, r3, #1
 8041bbc:	7013      	strb	r3, [r2, #0]
}
 8041bbe:	4770      	bx	lr
 8041bc0:	200024a8 	.word	0x200024a8
 8041bc4:	20003e64 	.word	0x20003e64

08041bc8 <mede_velocidade_vento>:

void mede_velocidade_vento(){
	aux_count_velo++;
 8041bc8:	4a02      	ldr	r2, [pc, #8]	; (8041bd4 <mede_velocidade_vento+0xc>)
 8041bca:	6853      	ldr	r3, [r2, #4]
 8041bcc:	3301      	adds	r3, #1
 8041bce:	6053      	str	r3, [r2, #4]
}
 8041bd0:	4770      	bx	lr
 8041bd2:	bf00      	nop
 8041bd4:	200024a8 	.word	0x200024a8

08041bd8 <init_station>:
{
 8041bd8:	b510      	push	{r4, lr}
	bmp280_init_default_params(&bmp280.params);
 8041bda:	481d      	ldr	r0, [pc, #116]	; (8041c50 <init_station+0x78>)
{
 8041bdc:	b086      	sub	sp, #24
	bmp280_init_default_params(&bmp280.params);
 8041bde:	f7ff fcba 	bl	8041556 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8041be2:	481c      	ldr	r0, [pc, #112]	; (8041c54 <init_station+0x7c>)
 8041be4:	2376      	movs	r3, #118	; 0x76
 8041be6:	8483      	strh	r3, [r0, #36]	; 0x24
	if (!bmp280_init(&bmp280, &bmp280.params)) {
 8041be8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	bmp280.i2c = &hi2c1;
 8041bec:	4b1a      	ldr	r3, [pc, #104]	; (8041c58 <init_station+0x80>)
 8041bee:	6283      	str	r3, [r0, #40]	; 0x28
	if (!bmp280_init(&bmp280, &bmp280.params)) {
 8041bf0:	f7ff fcba 	bl	8041568 <bmp280_init>
 8041bf4:	b920      	cbnz	r0, 8041c00 <init_station+0x28>
		flagsStation.bmp_failed=1;
 8041bf6:	4a19      	ldr	r2, [pc, #100]	; (8041c5c <init_station+0x84>)
 8041bf8:	7813      	ldrb	r3, [r2, #0]
 8041bfa:	f043 0302 	orr.w	r3, r3, #2
 8041bfe:	7013      	strb	r3, [r2, #0]
	initStruct.Pull = GPIO_PULLUP;
 8041c00:	4c17      	ldr	r4, [pc, #92]	; (8041c60 <init_station+0x88>)
	GPIO_InitTypeDef initStruct={0};
 8041c02:	2214      	movs	r2, #20
 8041c04:	2100      	movs	r1, #0
 8041c06:	a801      	add	r0, sp, #4
 8041c08:	f00e ffe7 	bl	8050bda <memset>
	initStruct.Pull = GPIO_PULLUP;
 8041c0c:	2301      	movs	r3, #1
	HW_GPIO_Init(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, &initStruct);
 8041c0e:	aa01      	add	r2, sp, #4
 8041c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041c14:	4813      	ldr	r0, [pc, #76]	; (8041c64 <init_station+0x8c>)
	initStruct.Pull = GPIO_PULLUP;
 8041c16:	e9cd 4302 	strd	r4, r3, [sp, #8]
	HW_GPIO_Init(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, &initStruct);
 8041c1a:	f00d f877 	bl	804ed0c <HW_GPIO_Init>
	HW_GPIO_SetIrq(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, 0, mede_velocidade_vento);
 8041c1e:	4b12      	ldr	r3, [pc, #72]	; (8041c68 <init_station+0x90>)
 8041c20:	4810      	ldr	r0, [pc, #64]	; (8041c64 <init_station+0x8c>)
 8041c22:	2200      	movs	r2, #0
 8041c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041c28:	f00d f8ca 	bl	804edc0 <HW_GPIO_SetIrq>
	initStruct.Pull = GPIO_PULLDOWN;
 8041c2c:	2302      	movs	r3, #2
	HW_GPIO_Init(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, &initStruct);
 8041c2e:	aa01      	add	r2, sp, #4
 8041c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8041c34:	480b      	ldr	r0, [pc, #44]	; (8041c64 <init_station+0x8c>)
	initStruct.Pull = GPIO_PULLDOWN;
 8041c36:	9303      	str	r3, [sp, #12]
	initStruct.Mode = GPIO_MODE_IT_RISING;
 8041c38:	9402      	str	r4, [sp, #8]
	HW_GPIO_Init(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, &initStruct);
 8041c3a:	f00d f867 	bl	804ed0c <HW_GPIO_Init>
	HW_GPIO_SetIrq(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, 0, mede_mm_chuva);
 8041c3e:	4b0b      	ldr	r3, [pc, #44]	; (8041c6c <init_station+0x94>)
 8041c40:	4808      	ldr	r0, [pc, #32]	; (8041c64 <init_station+0x8c>)
 8041c42:	2200      	movs	r2, #0
 8041c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8041c48:	f00d f8ba 	bl	804edc0 <HW_GPIO_SetIrq>
}
 8041c4c:	b006      	add	sp, #24
 8041c4e:	bd10      	pop	{r4, pc}
 8041c50:	20003ea0 	.word	0x20003ea0
 8041c54:	20003e74 	.word	0x20003e74
 8041c58:	20006038 	.word	0x20006038
 8041c5c:	20003e64 	.word	0x20003e64
 8041c60:	10110000 	.word	0x10110000
 8041c64:	40021000 	.word	0x40021000
 8041c68:	08041bc9 	.word	0x08041bc9
 8041c6c:	08041bad 	.word	0x08041bad

08041c70 <read_sensors>:
{
 8041c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(!flagsStation.bmp_failed){
 8041c74:	4b6e      	ldr	r3, [pc, #440]	; (8041e30 <read_sensors+0x1c0>)
{
 8041c76:	ed2d 8b02 	vpush	{d8}
	if(!flagsStation.bmp_failed){
 8041c7a:	781b      	ldrb	r3, [r3, #0]
 8041c7c:	ed9f 8a6d 	vldr	s16, [pc, #436]	; 8041e34 <read_sensors+0x1c4>
 8041c80:	f013 0f02 	tst.w	r3, #2
{
 8041c84:	b084      	sub	sp, #16
 8041c86:	4604      	mov	r4, r0
	if(!flagsStation.bmp_failed){
 8041c88:	d136      	bne.n	8041cf8 <read_sensors+0x88>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8041c8a:	4d6b      	ldr	r5, [pc, #428]	; (8041e38 <read_sensors+0x1c8>)
 8041c8c:	4e6b      	ldr	r6, [pc, #428]	; (8041e3c <read_sensors+0x1cc>)
 8041c8e:	4f6c      	ldr	r7, [pc, #432]	; (8041e40 <read_sensors+0x1d0>)
 8041c90:	486c      	ldr	r0, [pc, #432]	; (8041e44 <read_sensors+0x1d4>)
 8041c92:	462b      	mov	r3, r5
 8041c94:	4632      	mov	r2, r6
 8041c96:	4639      	mov	r1, r7
 8041c98:	f7ff feb8 	bl	8041a0c <bmp280_read_float>
 8041c9c:	b310      	cbz	r0, 8041ce4 <read_sensors+0x74>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8041c9e:	462b      	mov	r3, r5
 8041ca0:	4632      	mov	r2, r6
 8041ca2:	4639      	mov	r1, r7
 8041ca4:	4867      	ldr	r0, [pc, #412]	; (8041e44 <read_sensors+0x1d4>)
 8041ca6:	f7ff feb1 	bl	8041a0c <bmp280_read_float>
		Parameters->temperatura = (float)temperature*100;
 8041caa:	edd7 7a00 	vldr	s15, [r7]
 8041cae:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041cb6:	ee17 3a90 	vmov	r3, s15
		Parameters->pressao = (float)pressure*100;
 8041cba:	edd6 7a00 	vldr	s15, [r6]
		Parameters->temperatura = (float)temperature*100;
 8041cbe:	8023      	strh	r3, [r4, #0]
		Parameters->pressao = (float)pressure*100;
 8041cc0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041cc8:	ee17 3a90 	vmov	r3, s15
		Parameters->humidade = (float)humidity*100;
 8041ccc:	edd5 7a00 	vldr	s15, [r5]
		Parameters->pressao = (float)pressure*100;
 8041cd0:	f8c4 3002 	str.w	r3, [r4, #2]
		Parameters->humidade = (float)humidity*100;
 8041cd4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041cdc:	ee17 3a90 	vmov	r3, s15
 8041ce0:	80e3      	strh	r3, [r4, #6]
 8041ce2:	e009      	b.n	8041cf8 <read_sensors+0x88>
			Parameters->temperatura = 0xFF;
 8041ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8041ce8:	7023      	strb	r3, [r4, #0]
 8041cea:	7060      	strb	r0, [r4, #1]
			Parameters->pressao = 0xFF;
 8041cec:	70a3      	strb	r3, [r4, #2]
 8041cee:	70e0      	strb	r0, [r4, #3]
 8041cf0:	7120      	strb	r0, [r4, #4]
 8041cf2:	7160      	strb	r0, [r4, #5]
			Parameters->humidade = 0xFF;
 8041cf4:	71a3      	strb	r3, [r4, #6]
 8041cf6:	71e0      	strb	r0, [r4, #7]
	Parameters->pluviometria = ((double)(pluviometer_count/4))*1000;
 8041cf8:	4d53      	ldr	r5, [pc, #332]	; (8041e48 <read_sensors+0x1d8>)
 8041cfa:	882e      	ldrh	r6, [r5, #0]
 8041cfc:	08b0      	lsrs	r0, r6, #2
 8041cfe:	f7fe fd49 	bl	8040794 <__aeabi_i2d>
 8041d02:	2200      	movs	r2, #0
 8041d04:	4b51      	ldr	r3, [pc, #324]	; (8041e4c <read_sensors+0x1dc>)
 8041d06:	f7fe fdaf 	bl	8040868 <__aeabi_dmul>
 8041d0a:	f7ff f885 	bl	8040e18 <__aeabi_d2uiz>
	PRINTF("Pluvi %d\r\n", pluviometer_count);
 8041d0e:	4631      	mov	r1, r6
	Parameters->pluviometria = ((double)(pluviometer_count/4))*1000;
 8041d10:	8120      	strh	r0, [r4, #8]
	PRINTF("Pluvi %d\r\n", pluviometer_count);
 8041d12:	484f      	ldr	r0, [pc, #316]	; (8041e50 <read_sensors+0x1e0>)
 8041d14:	f00c fd0e 	bl	804e734 <TraceSend>
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041d18:	edd5 7a02 	vldr	s15, [r5, #8]
 8041d1c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8041e54 <read_sensors+0x1e4>
    HAL_ADC_ConfigChannel(&hadc2, &adcConf);
 8041d20:	484d      	ldr	r0, [pc, #308]	; (8041e58 <read_sensors+0x1e8>)
		HAL_ADC_Start(&hadc2);
 8041d22:	4d4d      	ldr	r5, [pc, #308]	; (8041e58 <read_sensors+0x1e8>)
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041d28:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8041d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8041d30:	2200      	movs	r2, #0
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041d32:	ee87 7a86 	vdiv.f32	s14, s15, s12
    adcConf.Rank = 1;
 8041d36:	2107      	movs	r1, #7
		raw2 = GET_RAW_VOLTAGE(raw);
 8041d38:	f20f 09ec 	addw	r9, pc, #236	; 0xec
 8041d3c:	e9d9 8900 	ldrd	r8, r9, [r9]
    HAL_ADC_ConfigChannel(&hadc2, &adcConf);
 8041d40:	f04f 0a64 	mov.w	sl, #100	; 0x64
	double tensao_de_posicao = 0;
 8041d44:	2600      	movs	r6, #0
 8041d46:	2700      	movs	r7, #0
	float Velo_mps = ((float)4*PI_NUMBER*RADIUS_ANEMOMETER_MM*RPM/60)/1000.0;	// Comprimento da circunferência em milimetros.
 8041d48:	eddf 7a44 	vldr	s15, [pc, #272]	; 8041e5c <read_sensors+0x1ec>
 8041d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8041d50:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8041e60 <read_sensors+0x1f0>
 8041d54:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8041d58:	eec6 7a07 	vdiv.f32	s15, s12, s14
	Parameters->velocidade_vento = Velo_mps*100;
 8041d5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041d64:	ee17 3a90 	vmov	r3, s15
 8041d68:	f8a4 300b 	strh.w	r3, [r4, #11]
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8041d6c:	2303      	movs	r3, #3
 8041d6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    adcConf.Rank = 1;
 8041d72:	2301      	movs	r3, #1
 8041d74:	e9cd 1300 	strd	r1, r3, [sp]
    HAL_ADC_ConfigChannel(&hadc2, &adcConf);
 8041d78:	4669      	mov	r1, sp
 8041d7a:	f001 ffd9 	bl	8043d30 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc2);
 8041d7e:	4628      	mov	r0, r5
 8041d80:	f001 feee 	bl	8043b60 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 8041d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8041d88:	4628      	mov	r0, r5
 8041d8a:	f001 ff7d 	bl	8043c88 <HAL_ADC_PollForConversion>
		raw = (double) HAL_ADC_GetValue(&hadc2);
 8041d8e:	4628      	mov	r0, r5
 8041d90:	f001 ffca 	bl	8043d28 <HAL_ADC_GetValue>
 8041d94:	f7fe fcee 	bl	8040774 <__aeabi_ui2d>
		raw2 = GET_RAW_VOLTAGE(raw);
 8041d98:	4642      	mov	r2, r8
 8041d9a:	464b      	mov	r3, r9
 8041d9c:	f7fe fd64 	bl	8040868 <__aeabi_dmul>
		tensao_de_posicao += raw2/MAX_READINGS;
 8041da0:	2200      	movs	r2, #0
 8041da2:	4b30      	ldr	r3, [pc, #192]	; (8041e64 <read_sensors+0x1f4>)
 8041da4:	f7fe fe8a 	bl	8040abc <__aeabi_ddiv>
 8041da8:	4602      	mov	r2, r0
 8041daa:	460b      	mov	r3, r1
 8041dac:	4630      	mov	r0, r6
 8041dae:	4639      	mov	r1, r7
 8041db0:	f7fe fba4 	bl	80404fc <__adddf3>
 8041db4:	4606      	mov	r6, r0
		HAL_ADC_Stop(&hadc2);
 8041db6:	4628      	mov	r0, r5
		tensao_de_posicao += raw2/MAX_READINGS;
 8041db8:	460f      	mov	r7, r1
		HAL_ADC_Stop(&hadc2);
 8041dba:	f001 ff47 	bl	8043c4c <HAL_ADC_Stop>
	for(int i = 0;i<MAX_READINGS;i++)
 8041dbe:	f1ba 0a01 	subs.w	sl, sl, #1
 8041dc2:	d1dc      	bne.n	8041d7e <read_sensors+0x10e>
 8041dc4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8041e70 <read_sensors+0x200>
	for(int i=TOTAL_WIND_POSITION-1; i>=0; i--){
 8041dc8:	2507      	movs	r5, #7
		if (tensao_de_posicao <= MAX_VAL(tensao[i])){
 8041dca:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 8041dce:	f7fe fcf3 	bl	80407b8 <__aeabi_f2d>
 8041dd2:	4602      	mov	r2, r0
 8041dd4:	460b      	mov	r3, r1
 8041dd6:	4630      	mov	r0, r6
 8041dd8:	4639      	mov	r1, r7
 8041dda:	f7fe ffc1 	bl	8040d60 <__aeabi_dcmple>
 8041dde:	b1e0      	cbz	r0, 8041e1a <read_sensors+0x1aa>
			Parameters->direcao_vento = i;
 8041de0:	72a5      	strb	r5, [r4, #10]
 8041de2:	4b21      	ldr	r3, [pc, #132]	; (8041e68 <read_sensors+0x1f8>)
 8041de4:	f103 020e 	add.w	r2, r3, #14
 8041de8:	1d99      	adds	r1, r3, #6
		char temp = Buffer_to_send[j];
 8041dea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		Buffer_to_send[j] = Buffer_to_send[i];
 8041dee:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
 8041df2:	701d      	strb	r5, [r3, #0]
	for(int k = i/2;k>0;k--)
 8041df4:	4299      	cmp	r1, r3
		Buffer_to_send[i] = temp;
 8041df6:	7010      	strb	r0, [r2, #0]
	for(int k = i/2;k>0;k--)
 8041df8:	d1f7      	bne.n	8041dea <read_sensors+0x17a>
	memcpy(Buffer_to_send,Parameters,sizeof(Estation_Parameters));
 8041dfa:	4b1c      	ldr	r3, [pc, #112]	; (8041e6c <read_sensors+0x1fc>)
 8041dfc:	f104 020c 	add.w	r2, r4, #12
 8041e00:	f854 1b04 	ldr.w	r1, [r4], #4
 8041e04:	f843 1b04 	str.w	r1, [r3], #4
 8041e08:	4294      	cmp	r4, r2
 8041e0a:	d1f9      	bne.n	8041e00 <read_sensors+0x190>
 8041e0c:	7822      	ldrb	r2, [r4, #0]
 8041e0e:	701a      	strb	r2, [r3, #0]
}
 8041e10:	b004      	add	sp, #16
 8041e12:	ecbd 8b02 	vpop	{d8}
 8041e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(int i=TOTAL_WIND_POSITION-1; i>=0; i--){
 8041e1a:	f115 35ff 	adds.w	r5, r5, #4294967295
 8041e1e:	d2d4      	bcs.n	8041dca <read_sensors+0x15a>
 8041e20:	e7df      	b.n	8041de2 <read_sensors+0x172>
 8041e22:	bf00      	nop
 8041e24:	f3af 8000 	nop.w
 8041e28:	70a3d70a 	.word	0x70a3d70a
 8041e2c:	3f4a0a3d 	.word	0x3f4a0a3d
 8041e30:	20003e64 	.word	0x20003e64
 8041e34:	42c80000 	.word	0x42c80000
 8041e38:	20003e60 	.word	0x20003e60
 8041e3c:	20003e5c 	.word	0x20003e5c
 8041e40:	20003e58 	.word	0x20003e58
 8041e44:	20003e74 	.word	0x20003e74
 8041e48:	200024a8 	.word	0x200024a8
 8041e4c:	408f4000 	.word	0x408f4000
 8041e50:	080542fa 	.word	0x080542fa
 8041e54:	42700000 	.word	0x42700000
 8041e58:	200062d0 	.word	0x200062d0
 8041e5c:	44e6e836 	.word	0x44e6e836
 8041e60:	447a0000 	.word	0x447a0000
 8041e64:	40590000 	.word	0x40590000
 8041e68:	200038f7 	.word	0x200038f7
 8041e6c:	200038f8 	.word	0x200038f8
 8041e70:	08053cd8 	.word	0x08053cd8

08041e74 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8041e74:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041e76:	4909      	ldr	r1, [pc, #36]	; (8041e9c <GetFskBandwidthRegValue+0x28>)
{
 8041e78:	2300      	movs	r3, #0
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041e7a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8041e7e:	4284      	cmp	r4, r0
 8041e80:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8041e84:	d803      	bhi.n	8041e8e <GetFskBandwidthRegValue+0x1a>
 8041e86:	440a      	add	r2, r1
 8041e88:	6894      	ldr	r4, [r2, #8]
 8041e8a:	4284      	cmp	r4, r0
 8041e8c:	d803      	bhi.n	8041e96 <GetFskBandwidthRegValue+0x22>
 8041e8e:	3301      	adds	r3, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8041e90:	2b15      	cmp	r3, #21
 8041e92:	d1f2      	bne.n	8041e7a <GetFskBandwidthRegValue+0x6>
 8041e94:	e7fe      	b.n	8041e94 <GetFskBandwidthRegValue+0x20>
        {
            return FskBandwidths[i].RegValue;
 8041e96:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8041e98:	bd10      	pop	{r4, pc}
 8041e9a:	bf00      	nop
 8041e9c:	08053cd8 	.word	0x08053cd8

08041ea0 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8041ea0:	4b04      	ldr	r3, [pc, #16]	; (8041eb4 <SX1276OnDio4Irq+0x14>)
 8041ea2:	795a      	ldrb	r2, [r3, #5]
 8041ea4:	b92a      	cbnz	r2, 8041eb2 <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8041ea6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8041eaa:	b912      	cbnz	r2, 8041eb2 <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8041eac:	2201      	movs	r2, #1
 8041eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8041eb2:	4770      	bx	lr
 8041eb4:	20003ed8 	.word	0x20003ed8

08041eb8 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8041eb8:	4b01      	ldr	r3, [pc, #4]	; (8041ec0 <SX1276BoardInit+0x8>)
 8041eba:	6018      	str	r0, [r3, #0]
}
 8041ebc:	4770      	bx	lr
 8041ebe:	bf00      	nop
 8041ec0:	200024b4 	.word	0x200024b4

08041ec4 <SX1276GetStatus>:
}
 8041ec4:	4b01      	ldr	r3, [pc, #4]	; (8041ecc <SX1276GetStatus+0x8>)
 8041ec6:	7918      	ldrb	r0, [r3, #4]
 8041ec8:	4770      	bx	lr
 8041eca:	bf00      	nop
 8041ecc:	20003ed8 	.word	0x20003ed8

08041ed0 <SX1276Reset>:
{
 8041ed0:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041ed2:	4d12      	ldr	r5, [pc, #72]	; (8041f1c <SX1276Reset+0x4c>)
{
 8041ed4:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8041ed6:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8041ed8:	2214      	movs	r2, #20
 8041eda:	2100      	movs	r1, #0
 8041edc:	a801      	add	r0, sp, #4
 8041ede:	f00e fe7c 	bl	8050bda <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8041ee2:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041ee4:	aa01      	add	r2, sp, #4
 8041ee6:	4621      	mov	r1, r4
 8041ee8:	4628      	mov	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8041eea:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8041eec:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041eee:	f00c ff0d 	bl	804ed0c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8041ef2:	4621      	mov	r1, r4
 8041ef4:	2200      	movs	r2, #0
 8041ef6:	4628      	mov	r0, r5
 8041ef8:	f00c ff8a 	bl	804ee10 <HW_GPIO_Write>
    DelayMs( 1 );
 8041efc:	4620      	mov	r0, r4
 8041efe:	f00d ff59 	bl	804fdb4 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8041f02:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041f04:	aa01      	add	r2, sp, #4
 8041f06:	4621      	mov	r1, r4
 8041f08:	4628      	mov	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8041f0a:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041f0c:	f00c fefe 	bl	804ed0c <HW_GPIO_Init>
    DelayMs( 6 );
 8041f10:	2006      	movs	r0, #6
 8041f12:	f00d ff4f 	bl	804fdb4 <HAL_Delay>
}
 8041f16:	b007      	add	sp, #28
 8041f18:	bd30      	pop	{r4, r5, pc}
 8041f1a:	bf00      	nop
 8041f1c:	40020400 	.word	0x40020400

08041f20 <SX1276WriteBuffer>:
{
 8041f20:	b570      	push	{r4, r5, r6, lr}
 8041f22:	4606      	mov	r6, r0
 8041f24:	460c      	mov	r4, r1
 8041f26:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041f28:	2102      	movs	r1, #2
 8041f2a:	2200      	movs	r2, #0
 8041f2c:	480b      	ldr	r0, [pc, #44]	; (8041f5c <SX1276WriteBuffer+0x3c>)
 8041f2e:	f00c ff6f 	bl	804ee10 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8041f32:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8041f36:	f00d fa7f 	bl	804f438 <HW_SPI_InOut>
 8041f3a:	3c01      	subs	r4, #1
 8041f3c:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 8041f3e:	42ac      	cmp	r4, r5
 8041f40:	d106      	bne.n	8041f50 <SX1276WriteBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041f42:	2201      	movs	r2, #1
 8041f44:	2102      	movs	r1, #2
 8041f46:	4805      	ldr	r0, [pc, #20]	; (8041f5c <SX1276WriteBuffer+0x3c>)
}
 8041f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041f4c:	f00c bf60 	b.w	804ee10 <HW_GPIO_Write>
        HW_SPI_InOut( buffer[i] );
 8041f50:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8041f54:	f00d fa70 	bl	804f438 <HW_SPI_InOut>
 8041f58:	e7f1      	b.n	8041f3e <SX1276WriteBuffer+0x1e>
 8041f5a:	bf00      	nop
 8041f5c:	40020400 	.word	0x40020400

08041f60 <SX1276Write>:
{
 8041f60:	b507      	push	{r0, r1, r2, lr}
 8041f62:	ab02      	add	r3, sp, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8041f64:	2201      	movs	r2, #1
{
 8041f66:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 8041f6a:	4619      	mov	r1, r3
 8041f6c:	f7ff ffd8 	bl	8041f20 <SX1276WriteBuffer>
}
 8041f70:	b003      	add	sp, #12
 8041f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041f78 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8041f78:	4b10      	ldr	r3, [pc, #64]	; (8041fbc <SX1276SetChannel+0x44>)
{
 8041f7a:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 8041f7c:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8041f7e:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041f82:	f641 6484 	movw	r4, #7812	; 0x1e84
 8041f86:	fbb0 f2f3 	udiv	r2, r0, r3
 8041f8a:	fb03 0012 	mls	r0, r3, r2, r0
 8041f8e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8041f92:	fbb4 f4f3 	udiv	r4, r4, r3
 8041f96:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8041f9a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8041f9e:	2006      	movs	r0, #6
 8041fa0:	f7ff ffde 	bl	8041f60 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8041fa4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8041fa8:	2007      	movs	r0, #7
 8041faa:	f7ff ffd9 	bl	8041f60 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8041fae:	b2e1      	uxtb	r1, r4
 8041fb0:	2008      	movs	r0, #8
}
 8041fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8041fb6:	f7ff bfd3 	b.w	8041f60 <SX1276Write>
 8041fba:	bf00      	nop
 8041fbc:	20003ed8 	.word	0x20003ed8

08041fc0 <SX1276ReadBuffer>:
{
 8041fc0:	b570      	push	{r4, r5, r6, lr}
 8041fc2:	4606      	mov	r6, r0
 8041fc4:	460c      	mov	r4, r1
 8041fc6:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041fc8:	2102      	movs	r1, #2
 8041fca:	2200      	movs	r2, #0
 8041fcc:	480b      	ldr	r0, [pc, #44]	; (8041ffc <SX1276ReadBuffer+0x3c>)
 8041fce:	f00c ff1f 	bl	804ee10 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8041fd2:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8041fd6:	f00d fa2f 	bl	804f438 <HW_SPI_InOut>
 8041fda:	3c01      	subs	r4, #1
 8041fdc:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 8041fde:	42ac      	cmp	r4, r5
 8041fe0:	d106      	bne.n	8041ff0 <SX1276ReadBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041fe2:	2201      	movs	r2, #1
 8041fe4:	2102      	movs	r1, #2
 8041fe6:	4805      	ldr	r0, [pc, #20]	; (8041ffc <SX1276ReadBuffer+0x3c>)
}
 8041fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041fec:	f00c bf10 	b.w	804ee10 <HW_GPIO_Write>
        buffer[i] = HW_SPI_InOut( 0 );
 8041ff0:	2000      	movs	r0, #0
 8041ff2:	f00d fa21 	bl	804f438 <HW_SPI_InOut>
 8041ff6:	f804 0f01 	strb.w	r0, [r4, #1]!
 8041ffa:	e7f0      	b.n	8041fde <SX1276ReadBuffer+0x1e>
 8041ffc:	40020400 	.word	0x40020400

08042000 <SX1276Read>:
{
 8042000:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8042002:	2201      	movs	r2, #1
 8042004:	f10d 0107 	add.w	r1, sp, #7
 8042008:	f7ff ffda 	bl	8041fc0 <SX1276ReadBuffer>
}
 804200c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8042010:	b003      	add	sp, #12
 8042012:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08042018 <RxChainCalibration>:
{
 8042018:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 804201a:	2009      	movs	r0, #9
 804201c:	f7ff fff0 	bl	8042000 <SX1276Read>
 8042020:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8042022:	2006      	movs	r0, #6
 8042024:	f7ff ffec 	bl	8042000 <SX1276Read>
 8042028:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 804202a:	2007      	movs	r0, #7
 804202c:	f7ff ffe8 	bl	8042000 <SX1276Read>
 8042030:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8042032:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8042036:	2008      	movs	r0, #8
 8042038:	f7ff ffe2 	bl	8042000 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 804203c:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804203e:	f643 5309 	movw	r3, #15625	; 0x3d09
 8042042:	b2c4      	uxtb	r4, r0
 8042044:	435c      	muls	r4, r3
 8042046:	0a00      	lsrs	r0, r0, #8
 8042048:	4358      	muls	r0, r3
 804204a:	3480      	adds	r4, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 804204c:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 804204e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8042052:	2009      	movs	r0, #9
 8042054:	f7ff ff84 	bl	8041f60 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8042058:	203b      	movs	r0, #59	; 0x3b
 804205a:	f7ff ffd1 	bl	8042000 <SX1276Read>
 804205e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042062:	b2c9      	uxtb	r1, r1
 8042064:	203b      	movs	r0, #59	; 0x3b
 8042066:	f7ff ff7b 	bl	8041f60 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 804206a:	203b      	movs	r0, #59	; 0x3b
 804206c:	f7ff ffc8 	bl	8042000 <SX1276Read>
 8042070:	0682      	lsls	r2, r0, #26
 8042072:	d4fa      	bmi.n	804206a <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8042074:	480c      	ldr	r0, [pc, #48]	; (80420a8 <RxChainCalibration+0x90>)
 8042076:	f7ff ff7f 	bl	8041f78 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 804207a:	203b      	movs	r0, #59	; 0x3b
 804207c:	f7ff ffc0 	bl	8042000 <SX1276Read>
 8042080:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042084:	b2c9      	uxtb	r1, r1
 8042086:	203b      	movs	r0, #59	; 0x3b
 8042088:	f7ff ff6a 	bl	8041f60 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 804208c:	203b      	movs	r0, #59	; 0x3b
 804208e:	f7ff ffb7 	bl	8042000 <SX1276Read>
 8042092:	0683      	lsls	r3, r0, #26
 8042094:	d4fa      	bmi.n	804208c <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8042096:	4629      	mov	r1, r5
 8042098:	2009      	movs	r0, #9
 804209a:	f7ff ff61 	bl	8041f60 <SX1276Write>
    SX1276SetChannel( initialFreq );
 804209e:	4620      	mov	r0, r4
}
 80420a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 80420a4:	f7ff bf68 	b.w	8041f78 <SX1276SetChannel>
 80420a8:	33bca100 	.word	0x33bca100
 80420ac:	00000000 	.word	0x00000000

080420b0 <SX1276GetTimeOnAir>:
{
 80420b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80420b4:	4688      	mov	r8, r1
    switch( modem )
 80420b6:	b118      	cbz	r0, 80420c0 <SX1276GetTimeOnAir+0x10>
 80420b8:	2801      	cmp	r0, #1
 80420ba:	d058      	beq.n	804216e <SX1276GetTimeOnAir+0xbe>
    uint32_t airTime = 0;
 80420bc:	2000      	movs	r0, #0
    return airTime;
 80420be:	e04e      	b.n	804215e <SX1276GetTimeOnAir+0xae>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80420c0:	4c75      	ldr	r4, [pc, #468]	; (8042298 <SX1276GetTimeOnAir+0x1e8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80420c2:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80420c4:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80420c6:	f7ff ff9b 	bl	8042000 <SX1276Read>
 80420ca:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80420ce:	3001      	adds	r0, #1
 80420d0:	4428      	add	r0, r5
 80420d2:	f7fe fb5f 	bl	8040794 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80420d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80420da:	2200      	movs	r2, #0
 80420dc:	2b00      	cmp	r3, #0
 80420de:	d141      	bne.n	8042164 <SX1276GetTimeOnAir+0xb4>
 80420e0:	4b6e      	ldr	r3, [pc, #440]	; (804229c <SX1276GetTimeOnAir+0x1ec>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80420e2:	f7fe fa0b 	bl	80404fc <__adddf3>
 80420e6:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80420e8:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80420ea:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80420ec:	f7ff ff88 	bl	8042000 <SX1276Read>
 80420f0:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 80420f4:	bf0c      	ite	eq
 80420f6:	2300      	moveq	r3, #0
 80420f8:	4b68      	ldrne	r3, [pc, #416]	; (804229c <SX1276GetTimeOnAir+0x1ec>)
 80420fa:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80420fc:	4630      	mov	r0, r6
 80420fe:	4639      	mov	r1, r7
 8042100:	f7fe f9fc 	bl	80404fc <__adddf3>
 8042104:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8042106:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8042108:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 804210a:	f7fe fb43 	bl	8040794 <__aeabi_i2d>
 804210e:	4602      	mov	r2, r0
 8042110:	460b      	mov	r3, r1
 8042112:	4630      	mov	r0, r6
 8042114:	4639      	mov	r1, r7
 8042116:	f7fe f9f1 	bl	80404fc <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 804211a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 804211e:	2200      	movs	r2, #0
 8042120:	bb13      	cbnz	r3, 8042168 <SX1276GetTimeOnAir+0xb8>
 8042122:	2300      	movs	r3, #0
                                     pktLen +
 8042124:	f7fe f9ea 	bl	80404fc <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8042128:	2200      	movs	r2, #0
 804212a:	4b5d      	ldr	r3, [pc, #372]	; (80422a0 <SX1276GetTimeOnAir+0x1f0>)
 804212c:	f7fe fb9c 	bl	8040868 <__aeabi_dmul>
 8042130:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8042132:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8042134:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8042136:	f7fe fb1d 	bl	8040774 <__aeabi_ui2d>
 804213a:	4602      	mov	r2, r0
 804213c:	460b      	mov	r3, r1
 804213e:	4630      	mov	r0, r6
 8042140:	4639      	mov	r1, r7
 8042142:	f7fe fcbb 	bl	8040abc <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8042146:	2200      	movs	r2, #0
 8042148:	4b56      	ldr	r3, [pc, #344]	; (80422a4 <SX1276GetTimeOnAir+0x1f4>)
 804214a:	f7fe fb8d 	bl	8040868 <__aeabi_dmul>
 804214e:	ec41 0b10 	vmov	d0, r0, r1
 8042152:	f011 fd1d 	bl	8053b90 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8042156:	ec51 0b10 	vmov	r0, r1, d0
 804215a:	f7fe fe5d 	bl	8040e18 <__aeabi_d2uiz>
}
 804215e:	b003      	add	sp, #12
 8042160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8042164:	2300      	movs	r3, #0
 8042166:	e7bc      	b.n	80420e2 <SX1276GetTimeOnAir+0x32>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8042168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804216c:	e7da      	b.n	8042124 <SX1276GetTimeOnAir+0x74>
            switch( SX1276.Settings.LoRa.Bandwidth )
 804216e:	4a4a      	ldr	r2, [pc, #296]	; (8042298 <SX1276GetTimeOnAir+0x1e8>)
 8042170:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8042172:	3b07      	subs	r3, #7
 8042174:	2b02      	cmp	r3, #2
 8042176:	4692      	mov	sl, r2
 8042178:	f200 8082 	bhi.w	8042280 <SX1276GetTimeOnAir+0x1d0>
 804217c:	4a4a      	ldr	r2, [pc, #296]	; (80422a8 <SX1276GetTimeOnAir+0x1f8>)
 804217e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8042182:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8042186:	f8da b048 	ldr.w	fp, [sl, #72]	; 0x48
 804218a:	2001      	movs	r0, #1
 804218c:	fa00 f00b 	lsl.w	r0, r0, fp
 8042190:	f7fe fb00 	bl	8040794 <__aeabi_i2d>
 8042194:	4602      	mov	r2, r0
 8042196:	460b      	mov	r3, r1
 8042198:	4620      	mov	r0, r4
 804219a:	4629      	mov	r1, r5
 804219c:	f7fe fc8e 	bl	8040abc <__aeabi_ddiv>
            double ts = 1 / rs;
 80421a0:	4602      	mov	r2, r0
 80421a2:	460b      	mov	r3, r1
 80421a4:	2000      	movs	r0, #0
 80421a6:	493d      	ldr	r1, [pc, #244]	; (804229c <SX1276GetTimeOnAir+0x1ec>)
 80421a8:	f7fe fc88 	bl	8040abc <__aeabi_ddiv>
 80421ac:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80421ae:	f8ba 004e 	ldrh.w	r0, [sl, #78]	; 0x4e
            double ts = 1 / rs;
 80421b2:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80421b4:	f7fe faee 	bl	8040794 <__aeabi_i2d>
 80421b8:	2200      	movs	r2, #0
 80421ba:	4b3c      	ldr	r3, [pc, #240]	; (80422ac <SX1276GetTimeOnAir+0x1fc>)
 80421bc:	f7fe f99e 	bl	80404fc <__adddf3>
 80421c0:	4622      	mov	r2, r4
 80421c2:	462b      	mov	r3, r5
 80421c4:	f7fe fb50 	bl	8040868 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80421c8:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80421cc:	4606      	mov	r6, r0
 80421ce:	460f      	mov	r7, r1
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80421d0:	f89a 0052 	ldrb.w	r0, [sl, #82]	; 0x52
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80421d4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80421d8:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80421dc:	2b00      	cmp	r3, #0
 80421de:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80421e2:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80421e6:	bf14      	ite	ne
 80421e8:	2014      	movne	r0, #20
 80421ea:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80421ec:	1a08      	subs	r0, r1, r0
 80421ee:	f7fe fac1 	bl	8040774 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80421f2:	f89a 304c 	ldrb.w	r3, [sl, #76]	; 0x4c
 80421f6:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80421f8:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80421fa:	bf14      	ite	ne
 80421fc:	2002      	movne	r0, #2
 80421fe:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8042200:	ebab 0000 	sub.w	r0, fp, r0
 8042204:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8042206:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8042208:	f7fe fab4 	bl	8040774 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804220c:	4602      	mov	r2, r0
 804220e:	460b      	mov	r3, r1
 8042210:	4640      	mov	r0, r8
 8042212:	4649      	mov	r1, r9
 8042214:	f7fe fc52 	bl	8040abc <__aeabi_ddiv>
 8042218:	ec41 0b10 	vmov	d0, r0, r1
 804221c:	f011 fbb4 	bl	8053988 <ceil>
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8042220:	f89a 004d 	ldrb.w	r0, [sl, #77]	; 0x4d
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8042224:	ec53 2b10 	vmov	r2, r3, d0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8042228:	3004      	adds	r0, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804222a:	e9cd 2300 	strd	r2, r3, [sp]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 804222e:	f7fe fab1 	bl	8040794 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8042232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8042236:	f7fe fb17 	bl	8040868 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 804223a:	2200      	movs	r2, #0
 804223c:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804223e:	4680      	mov	r8, r0
 8042240:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8042242:	f7fe fda1 	bl	8040d88 <__aeabi_dcmpgt>
 8042246:	b1f0      	cbz	r0, 8042286 <SX1276GetTimeOnAir+0x1d6>
 8042248:	2200      	movs	r2, #0
 804224a:	4b15      	ldr	r3, [pc, #84]	; (80422a0 <SX1276GetTimeOnAir+0x1f0>)
 804224c:	4640      	mov	r0, r8
 804224e:	4649      	mov	r1, r9
 8042250:	f7fe f954 	bl	80404fc <__adddf3>
            double tPayload = nPayload * ts;
 8042254:	4622      	mov	r2, r4
 8042256:	462b      	mov	r3, r5
 8042258:	f7fe fb06 	bl	8040868 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 804225c:	4632      	mov	r2, r6
 804225e:	463b      	mov	r3, r7
 8042260:	f7fe f94c 	bl	80404fc <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8042264:	2200      	movs	r2, #0
 8042266:	4b0f      	ldr	r3, [pc, #60]	; (80422a4 <SX1276GetTimeOnAir+0x1f4>)
 8042268:	f7fe fafe 	bl	8040868 <__aeabi_dmul>
 804226c:	a308      	add	r3, pc, #32	; (adr r3, 8042290 <SX1276GetTimeOnAir+0x1e0>)
 804226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042272:	f7fe f943 	bl	80404fc <__adddf3>
 8042276:	ec41 0b10 	vmov	d0, r0, r1
 804227a:	f011 fc05 	bl	8053a88 <floor>
 804227e:	e76a      	b.n	8042156 <SX1276GetTimeOnAir+0xa6>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8042280:	2400      	movs	r4, #0
 8042282:	2500      	movs	r5, #0
 8042284:	e77f      	b.n	8042186 <SX1276GetTimeOnAir+0xd6>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8042286:	2000      	movs	r0, #0
 8042288:	4905      	ldr	r1, [pc, #20]	; (80422a0 <SX1276GetTimeOnAir+0x1f0>)
 804228a:	e7e3      	b.n	8042254 <SX1276GetTimeOnAir+0x1a4>
 804228c:	f3af 8000 	nop.w
 8042290:	d916872b 	.word	0xd916872b
 8042294:	3feff7ce 	.word	0x3feff7ce
 8042298:	20003ed8 	.word	0x20003ed8
 804229c:	3ff00000 	.word	0x3ff00000
 80422a0:	40200000 	.word	0x40200000
 80422a4:	408f4000 	.word	0x408f4000
 80422a8:	08053cd8 	.word	0x08053cd8
 80422ac:	40110000 	.word	0x40110000

080422b0 <SX1276ReadRssi>:
{
 80422b0:	b508      	push	{r3, lr}
    switch( modem )
 80422b2:	b120      	cbz	r0, 80422be <SX1276ReadRssi+0xe>
 80422b4:	2801      	cmp	r0, #1
 80422b6:	d00a      	beq.n	80422ce <SX1276ReadRssi+0x1e>
        rssi = -1;
 80422b8:	f04f 30ff 	mov.w	r0, #4294967295
 80422bc:	e006      	b.n	80422cc <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80422be:	2011      	movs	r0, #17
 80422c0:	f7ff fe9e 	bl	8042000 <SX1276Read>
 80422c4:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80422c8:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80422ca:	b200      	sxth	r0, r0
}
 80422cc:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80422ce:	4b07      	ldr	r3, [pc, #28]	; (80422ec <SX1276ReadRssi+0x3c>)
 80422d0:	689a      	ldr	r2, [r3, #8]
 80422d2:	4b07      	ldr	r3, [pc, #28]	; (80422f0 <SX1276ReadRssi+0x40>)
 80422d4:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80422d6:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80422da:	d903      	bls.n	80422e4 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80422dc:	f7ff fe90 	bl	8042000 <SX1276Read>
 80422e0:	389d      	subs	r0, #157	; 0x9d
 80422e2:	e7f2      	b.n	80422ca <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80422e4:	f7ff fe8c 	bl	8042000 <SX1276Read>
 80422e8:	38a4      	subs	r0, #164	; 0xa4
 80422ea:	e7ee      	b.n	80422ca <SX1276ReadRssi+0x1a>
 80422ec:	20003ed8 	.word	0x20003ed8
 80422f0:	1f4add40 	.word	0x1f4add40

080422f4 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 80422f4:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80422f6:	2001      	movs	r0, #1
 80422f8:	f7ff fe82 	bl	8042000 <SX1276Read>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80422fc:	4c07      	ldr	r4, [pc, #28]	; (804231c <SX1276SetOpMode.part.2+0x28>)
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80422fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8042302:	2001      	movs	r0, #1
 8042304:	f7ff fe2c 	bl	8041f60 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8042308:	6823      	ldr	r3, [r4, #0]
 804230a:	2001      	movs	r0, #1
 804230c:	691b      	ldr	r3, [r3, #16]
 804230e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8042310:	6823      	ldr	r3, [r4, #0]
 8042312:	2000      	movs	r0, #0
 8042314:	681b      	ldr	r3, [r3, #0]
}
 8042316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 804231a:	4718      	bx	r3
 804231c:	200024b4 	.word	0x200024b4

08042320 <SX1276SetSleep>:
{
 8042320:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8042322:	480a      	ldr	r0, [pc, #40]	; (804234c <SX1276SetSleep+0x2c>)
 8042324:	f00c f97c 	bl	804e620 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8042328:	4809      	ldr	r0, [pc, #36]	; (8042350 <SX1276SetSleep+0x30>)
 804232a:	f00c f979 	bl	804e620 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 804232e:	4809      	ldr	r0, [pc, #36]	; (8042354 <SX1276SetSleep+0x34>)
 8042330:	f00c f976 	bl	804e620 <TimerStop>
 8042334:	f7ff ffde 	bl	80422f4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8042338:	4b07      	ldr	r3, [pc, #28]	; (8042358 <SX1276SetSleep+0x38>)
 804233a:	681b      	ldr	r3, [r3, #0]
 804233c:	2000      	movs	r0, #0
 804233e:	681b      	ldr	r3, [r3, #0]
 8042340:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8042342:	4b06      	ldr	r3, [pc, #24]	; (804235c <SX1276SetSleep+0x3c>)
 8042344:	2200      	movs	r2, #0
 8042346:	711a      	strb	r2, [r3, #4]
}
 8042348:	bd08      	pop	{r3, pc}
 804234a:	bf00      	nop
 804234c:	20003f40 	.word	0x20003f40
 8042350:	20003ea8 	.word	0x20003ea8
 8042354:	20003ec0 	.word	0x20003ec0
 8042358:	200024b4 	.word	0x200024b4
 804235c:	20003ed8 	.word	0x20003ed8

08042360 <SX1276SetOpMode>:
{
 8042360:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8042362:	4604      	mov	r4, r0
 8042364:	b918      	cbnz	r0, 804236e <SX1276SetOpMode+0xe>
}
 8042366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804236a:	f7ff bfc3 	b.w	80422f4 <SX1276SetOpMode.part.2>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 804236e:	4d0c      	ldr	r5, [pc, #48]	; (80423a0 <SX1276SetOpMode+0x40>)
 8042370:	682b      	ldr	r3, [r5, #0]
 8042372:	2001      	movs	r0, #1
 8042374:	681b      	ldr	r3, [r3, #0]
 8042376:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8042378:	682b      	ldr	r3, [r5, #0]
 804237a:	2000      	movs	r0, #0
 804237c:	691b      	ldr	r3, [r3, #16]
 804237e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8042380:	682b      	ldr	r3, [r5, #0]
 8042382:	4620      	mov	r0, r4
 8042384:	695b      	ldr	r3, [r3, #20]
 8042386:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8042388:	2001      	movs	r0, #1
 804238a:	f7ff fe39 	bl	8042000 <SX1276Read>
 804238e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8042392:	4321      	orrs	r1, r4
 8042394:	2001      	movs	r0, #1
}
 8042396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 804239a:	f7ff bde1 	b.w	8041f60 <SX1276Write>
 804239e:	bf00      	nop
 80423a0:	200024b4 	.word	0x200024b4

080423a4 <SX1276SetStby>:
{
 80423a4:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80423a6:	4808      	ldr	r0, [pc, #32]	; (80423c8 <SX1276SetStby+0x24>)
 80423a8:	f00c f93a 	bl	804e620 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80423ac:	4807      	ldr	r0, [pc, #28]	; (80423cc <SX1276SetStby+0x28>)
 80423ae:	f00c f937 	bl	804e620 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80423b2:	4807      	ldr	r0, [pc, #28]	; (80423d0 <SX1276SetStby+0x2c>)
 80423b4:	f00c f934 	bl	804e620 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80423b8:	2001      	movs	r0, #1
 80423ba:	f7ff ffd1 	bl	8042360 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80423be:	4b05      	ldr	r3, [pc, #20]	; (80423d4 <SX1276SetStby+0x30>)
 80423c0:	2200      	movs	r2, #0
 80423c2:	711a      	strb	r2, [r3, #4]
}
 80423c4:	bd08      	pop	{r3, pc}
 80423c6:	bf00      	nop
 80423c8:	20003f40 	.word	0x20003f40
 80423cc:	20003ea8 	.word	0x20003ea8
 80423d0:	20003ec0 	.word	0x20003ec0
 80423d4:	20003ed8 	.word	0x20003ed8

080423d8 <SX1276SetRx>:
{
 80423d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 80423da:	4c79      	ldr	r4, [pc, #484]	; (80425c0 <SX1276SetRx+0x1e8>)
{
 80423dc:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 80423de:	4879      	ldr	r0, [pc, #484]	; (80425c4 <SX1276SetRx+0x1ec>)
 80423e0:	f00c f91e 	bl	804e620 <TimerStop>
    switch( SX1276.Settings.Modem )
 80423e4:	7965      	ldrb	r5, [r4, #5]
 80423e6:	b11d      	cbz	r5, 80423f0 <SX1276SetRx+0x18>
 80423e8:	2d01      	cmp	r5, #1
 80423ea:	d044      	beq.n	8042476 <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 80423ec:	2600      	movs	r6, #0
 80423ee:	e022      	b.n	8042436 <SX1276SetRx+0x5e>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80423f0:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80423f2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80423f6:	f7ff fe03 	bl	8042000 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80423fa:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80423fe:	f041 010c 	orr.w	r1, r1, #12
 8042402:	2040      	movs	r0, #64	; 0x40
 8042404:	f7ff fdac 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8042408:	2041      	movs	r0, #65	; 0x41
 804240a:	f7ff fdf9 	bl	8042000 <SX1276Read>
 804240e:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8042412:	b2c9      	uxtb	r1, r1
 8042414:	2041      	movs	r0, #65	; 0x41
 8042416:	f7ff fda3 	bl	8041f60 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 804241a:	2035      	movs	r0, #53	; 0x35
 804241c:	f7ff fdf0 	bl	8042000 <SX1276Read>
 8042420:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8042424:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8042428:	211e      	movs	r1, #30
 804242a:	200d      	movs	r0, #13
 804242c:	f7ff fd98 	bl	8041f60 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042430:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042432:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8042434:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8042436:	f44f 7280 	mov.w	r2, #256	; 0x100
 804243a:	2100      	movs	r1, #0
 804243c:	4862      	ldr	r0, [pc, #392]	; (80425c8 <SX1276SetRx+0x1f0>)
 804243e:	f00e fbcc 	bl	8050bda <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8042442:	2301      	movs	r3, #1
 8042444:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8042446:	b137      	cbz	r7, 8042456 <SX1276SetRx+0x7e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8042448:	4860      	ldr	r0, [pc, #384]	; (80425cc <SX1276SetRx+0x1f4>)
 804244a:	4639      	mov	r1, r7
 804244c:	f00c f910 	bl	804e670 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8042450:	485e      	ldr	r0, [pc, #376]	; (80425cc <SX1276SetRx+0x1f4>)
 8042452:	f00c f873 	bl	804e53c <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8042456:	7963      	ldrb	r3, [r4, #5]
 8042458:	2b00      	cmp	r3, #0
 804245a:	f040 80a9 	bne.w	80425b0 <SX1276SetRx+0x1d8>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 804245e:	2005      	movs	r0, #5
 8042460:	f7ff ff7e 	bl	8042360 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8042464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8042466:	485a      	ldr	r0, [pc, #360]	; (80425d0 <SX1276SetRx+0x1f8>)
 8042468:	f00c f902 	bl	804e670 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 804246c:	4858      	ldr	r0, [pc, #352]	; (80425d0 <SX1276SetRx+0x1f8>)
}
 804246e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
 8042472:	f00c b863 	b.w	804e53c <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042476:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 804247a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 804247c:	b32b      	cbz	r3, 80424ca <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 804247e:	f7ff fdbf 	bl	8042000 <SX1276Read>
 8042482:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8042486:	b2c9      	uxtb	r1, r1
 8042488:	2033      	movs	r0, #51	; 0x33
 804248a:	f7ff fd69 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 804248e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042490:	203b      	movs	r0, #59	; 0x3b
 8042492:	f7ff fd65 	bl	8041f60 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8042496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042498:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 804249a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 804249e:	d876      	bhi.n	804258e <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80424a0:	f7ff fdae 	bl	8042000 <SX1276Read>
 80424a4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80424a8:	2031      	movs	r0, #49	; 0x31
 80424aa:	f7ff fd59 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80424ae:	2100      	movs	r1, #0
 80424b0:	2030      	movs	r0, #48	; 0x30
 80424b2:	f7ff fd55 	bl	8041f60 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80424b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80424b8:	2b08      	cmp	r3, #8
 80424ba:	d81b      	bhi.n	80424f4 <SX1276SetRx+0x11c>
 80424bc:	e8df f003 	tbb	[pc, r3]
 80424c0:	473e3510 	.word	0x473e3510
 80424c4:	62625950 	.word	0x62625950
 80424c8:	62          	.byte	0x62
 80424c9:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80424ca:	f7ff fd99 	bl	8042000 <SX1276Read>
 80424ce:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80424d2:	f041 0101 	orr.w	r1, r1, #1
 80424d6:	2033      	movs	r0, #51	; 0x33
 80424d8:	f7ff fd42 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80424dc:	211d      	movs	r1, #29
 80424de:	e7d7      	b.n	8042490 <SX1276SetRx+0xb8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80424e0:	202f      	movs	r0, #47	; 0x2f
 80424e2:	2148      	movs	r1, #72	; 0x48
 80424e4:	f7ff fd3c 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80424e8:	68a0      	ldr	r0, [r4, #8]
 80424ea:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 80424ee:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80424f0:	f7ff fd42 	bl	8041f78 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80424f4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80424f8:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80424fc:	2b00      	cmp	r3, #0
 80424fe:	d04d      	beq.n	804259c <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8042500:	211d      	movs	r1, #29
 8042502:	2011      	movs	r0, #17
 8042504:	f7ff fd2c 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8042508:	2040      	movs	r0, #64	; 0x40
 804250a:	f7ff fd79 	bl	8042000 <SX1276Read>
 804250e:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8042512:	2040      	movs	r0, #64	; 0x40
 8042514:	f7ff fd24 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8042518:	2100      	movs	r1, #0
 804251a:	200f      	movs	r0, #15
 804251c:	f7ff fd20 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042520:	2100      	movs	r1, #0
 8042522:	200d      	movs	r0, #13
 8042524:	f7ff fd1c 	bl	8041f60 <SX1276Write>
        break;
 8042528:	e785      	b.n	8042436 <SX1276SetRx+0x5e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804252a:	202f      	movs	r0, #47	; 0x2f
 804252c:	2144      	movs	r1, #68	; 0x44
 804252e:	f7ff fd17 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8042532:	68a0      	ldr	r0, [r4, #8]
 8042534:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8042538:	3034      	adds	r0, #52	; 0x34
 804253a:	e7d9      	b.n	80424f0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804253c:	202f      	movs	r0, #47	; 0x2f
 804253e:	2144      	movs	r1, #68	; 0x44
 8042540:	f7ff fd0e 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8042544:	68a0      	ldr	r0, [r4, #8]
 8042546:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 804254a:	3004      	adds	r0, #4
 804254c:	e7d0      	b.n	80424f0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804254e:	202f      	movs	r0, #47	; 0x2f
 8042550:	2144      	movs	r1, #68	; 0x44
 8042552:	f7ff fd05 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8042556:	68a0      	ldr	r0, [r4, #8]
 8042558:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 804255c:	305e      	adds	r0, #94	; 0x5e
 804255e:	e7c7      	b.n	80424f0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8042560:	202f      	movs	r0, #47	; 0x2f
 8042562:	2144      	movs	r1, #68	; 0x44
 8042564:	f7ff fcfc 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8042568:	68a0      	ldr	r0, [r4, #8]
 804256a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 804256e:	3012      	adds	r0, #18
 8042570:	e7be      	b.n	80424f0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8042572:	202f      	movs	r0, #47	; 0x2f
 8042574:	2144      	movs	r1, #68	; 0x44
 8042576:	f7ff fcf3 	bl	8041f60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 804257a:	68a0      	ldr	r0, [r4, #8]
 804257c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8042580:	30c6      	adds	r0, #198	; 0xc6
 8042582:	e7b5      	b.n	80424f0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8042584:	2140      	movs	r1, #64	; 0x40
 8042586:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8042588:	f7ff fcea 	bl	8041f60 <SX1276Write>
 804258c:	e7b2      	b.n	80424f4 <SX1276SetRx+0x11c>
 804258e:	f7ff fd37 	bl	8042000 <SX1276Read>
 8042592:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042596:	b2c9      	uxtb	r1, r1
 8042598:	2031      	movs	r0, #49	; 0x31
 804259a:	e7f5      	b.n	8042588 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 804259c:	211f      	movs	r1, #31
 804259e:	2011      	movs	r0, #17
 80425a0:	f7ff fcde 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80425a4:	2040      	movs	r0, #64	; 0x40
 80425a6:	f7ff fd2b 	bl	8042000 <SX1276Read>
 80425aa:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80425ae:	e7b0      	b.n	8042512 <SX1276SetRx+0x13a>
        if( rxContinuous == true )
 80425b0:	b126      	cbz	r6, 80425bc <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80425b2:	2005      	movs	r0, #5
}
 80425b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80425b8:	f7ff bed2 	b.w	8042360 <SX1276SetOpMode>
 80425bc:	2006      	movs	r0, #6
 80425be:	e7f9      	b.n	80425b4 <SX1276SetRx+0x1dc>
 80425c0:	20003ed8 	.word	0x20003ed8
 80425c4:	20003ea8 	.word	0x20003ea8
 80425c8:	200024b8 	.word	0x200024b8
 80425cc:	20003f40 	.word	0x20003f40
 80425d0:	20003ec0 	.word	0x20003ec0

080425d4 <SX1276SetTx>:
{
 80425d4:	b510      	push	{r4, lr}
 80425d6:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 80425d8:	4825      	ldr	r0, [pc, #148]	; (8042670 <SX1276SetTx+0x9c>)
 80425da:	f00c f821 	bl	804e620 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80425de:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
 80425e0:	4c24      	ldr	r4, [pc, #144]	; (8042674 <SX1276SetTx+0xa0>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 80425e2:	4825      	ldr	r0, [pc, #148]	; (8042678 <SX1276SetTx+0xa4>)
 80425e4:	f00c f844 	bl	804e670 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80425e8:	7963      	ldrb	r3, [r4, #5]
 80425ea:	b15b      	cbz	r3, 8042604 <SX1276SetTx+0x30>
 80425ec:	2b01      	cmp	r3, #1
 80425ee:	d023      	beq.n	8042638 <SX1276SetTx+0x64>
    SX1276.Settings.State = RF_TX_RUNNING;
 80425f0:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80425f2:	4821      	ldr	r0, [pc, #132]	; (8042678 <SX1276SetTx+0xa4>)
    SX1276.Settings.State = RF_TX_RUNNING;
 80425f4:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80425f6:	f00b ffa1 	bl	804e53c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80425fa:	2003      	movs	r0, #3
}
 80425fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042600:	f7ff beae 	b.w	8042360 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8042604:	2040      	movs	r0, #64	; 0x40
 8042606:	f7ff fcfb 	bl	8042000 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 804260a:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 804260e:	f041 0110 	orr.w	r1, r1, #16
 8042612:	2040      	movs	r0, #64	; 0x40
 8042614:	f7ff fca4 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8042618:	2041      	movs	r0, #65	; 0x41
 804261a:	f7ff fcf1 	bl	8042000 <SX1276Read>
 804261e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8042622:	2041      	movs	r0, #65	; 0x41
 8042624:	f7ff fc9c 	bl	8041f60 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8042628:	2035      	movs	r0, #53	; 0x35
 804262a:	f7ff fce9 	bl	8042000 <SX1276Read>
 804262e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8042632:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 8042636:	e7db      	b.n	80425f0 <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042638:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 804263c:	b173      	cbz	r3, 804265c <SX1276SetTx+0x88>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 804263e:	21f5      	movs	r1, #245	; 0xf5
 8042640:	2011      	movs	r0, #17
 8042642:	f7ff fc8d 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8042646:	2040      	movs	r0, #64	; 0x40
 8042648:	f7ff fcda 	bl	8042000 <SX1276Read>
 804264c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8042650:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8042654:	2040      	movs	r0, #64	; 0x40
 8042656:	f7ff fc83 	bl	8041f60 <SX1276Write>
 804265a:	e7c9      	b.n	80425f0 <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 804265c:	21f7      	movs	r1, #247	; 0xf7
 804265e:	2011      	movs	r0, #17
 8042660:	f7ff fc7e 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8042664:	2040      	movs	r0, #64	; 0x40
 8042666:	f7ff fccb 	bl	8042000 <SX1276Read>
 804266a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 804266e:	e7ef      	b.n	8042650 <SX1276SetTx+0x7c>
 8042670:	20003f40 	.word	0x20003f40
 8042674:	20003ed8 	.word	0x20003ed8
 8042678:	20003ea8 	.word	0x20003ea8

0804267c <SX1276StartCad>:
{
 804267c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 804267e:	4c0c      	ldr	r4, [pc, #48]	; (80426b0 <SX1276StartCad+0x34>)
 8042680:	7963      	ldrb	r3, [r4, #5]
 8042682:	2b01      	cmp	r3, #1
 8042684:	d112      	bne.n	80426ac <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8042686:	21fa      	movs	r1, #250	; 0xfa
 8042688:	2011      	movs	r0, #17
 804268a:	f7ff fc69 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 804268e:	2040      	movs	r0, #64	; 0x40
 8042690:	f7ff fcb6 	bl	8042000 <SX1276Read>
 8042694:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8042698:	2040      	movs	r0, #64	; 0x40
 804269a:	f7ff fc61 	bl	8041f60 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 804269e:	2303      	movs	r3, #3
 80426a0:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80426a2:	2007      	movs	r0, #7
}
 80426a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80426a8:	f7ff be5a 	b.w	8042360 <SX1276SetOpMode>
}
 80426ac:	bd10      	pop	{r4, pc}
 80426ae:	bf00      	nop
 80426b0:	20003ed8 	.word	0x20003ed8

080426b4 <SX1276SetModem>:
{
 80426b4:	b510      	push	{r4, lr}
 80426b6:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80426b8:	2001      	movs	r0, #1
 80426ba:	f7ff fca1 	bl	8042000 <SX1276Read>
 80426be:	4b19      	ldr	r3, [pc, #100]	; (8042724 <SX1276SetModem+0x70>)
 80426c0:	f010 0f80 	tst.w	r0, #128	; 0x80
        SX1276.Settings.Modem = MODEM_LORA;
 80426c4:	bf14      	ite	ne
 80426c6:	2201      	movne	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 80426c8:	2200      	moveq	r2, #0
 80426ca:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 80426cc:	795a      	ldrb	r2, [r3, #5]
 80426ce:	42a2      	cmp	r2, r4
 80426d0:	d027      	beq.n	8042722 <SX1276SetModem+0x6e>
    switch( SX1276.Settings.Modem )
 80426d2:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 80426d4:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80426d6:	d013      	beq.n	8042700 <SX1276SetModem+0x4c>
 80426d8:	f7ff fe0c 	bl	80422f4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80426dc:	2001      	movs	r0, #1
 80426de:	f7ff fc8f 	bl	8042000 <SX1276Read>
 80426e2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80426e6:	2001      	movs	r0, #1
 80426e8:	f7ff fc3a 	bl	8041f60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80426ec:	2100      	movs	r1, #0
 80426ee:	2040      	movs	r0, #64	; 0x40
 80426f0:	f7ff fc36 	bl	8041f60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80426f4:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80426f6:	2041      	movs	r0, #65	; 0x41
}
 80426f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80426fc:	f7ff bc30 	b.w	8041f60 <SX1276Write>
 8042700:	f7ff fdf8 	bl	80422f4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8042704:	4620      	mov	r0, r4
 8042706:	f7ff fc7b 	bl	8042000 <SX1276Read>
 804270a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 804270e:	b2c9      	uxtb	r1, r1
 8042710:	4620      	mov	r0, r4
 8042712:	f7ff fc25 	bl	8041f60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8042716:	2100      	movs	r1, #0
 8042718:	2040      	movs	r0, #64	; 0x40
 804271a:	f7ff fc21 	bl	8041f60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 804271e:	2100      	movs	r1, #0
 8042720:	e7e9      	b.n	80426f6 <SX1276SetModem+0x42>
}
 8042722:	bd10      	pop	{r4, pc}
 8042724:	20003ed8 	.word	0x20003ed8

08042728 <SX1276Init>:
{
 8042728:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 804272a:	4d1b      	ldr	r5, [pc, #108]	; (8042798 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 804272c:	491b      	ldr	r1, [pc, #108]	; (804279c <SX1276Init+0x74>)
    RadioEvents = events;
 804272e:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8042732:	481b      	ldr	r0, [pc, #108]	; (80427a0 <SX1276Init+0x78>)
 8042734:	4c1b      	ldr	r4, [pc, #108]	; (80427a4 <SX1276Init+0x7c>)
 8042736:	f00b fef7 	bl	804e528 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 804273a:	4918      	ldr	r1, [pc, #96]	; (804279c <SX1276Init+0x74>)
 804273c:	481a      	ldr	r0, [pc, #104]	; (80427a8 <SX1276Init+0x80>)
 804273e:	f00b fef3 	bl	804e528 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8042742:	4916      	ldr	r1, [pc, #88]	; (804279c <SX1276Init+0x74>)
 8042744:	4819      	ldr	r0, [pc, #100]	; (80427ac <SX1276Init+0x84>)
 8042746:	f00b feef 	bl	804e528 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 804274a:	682b      	ldr	r3, [r5, #0]
 804274c:	2001      	movs	r0, #1
 804274e:	681b      	ldr	r3, [r3, #0]
 8042750:	4798      	blx	r3
    SX1276Reset( );
 8042752:	f7ff fbbd 	bl	8041ed0 <SX1276Reset>
    RxChainCalibration( );
 8042756:	f7ff fc5f 	bl	8042018 <RxChainCalibration>
 804275a:	f7ff fdcb 	bl	80422f4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 804275e:	682b      	ldr	r3, [r5, #0]
 8042760:	4813      	ldr	r0, [pc, #76]	; (80427b0 <SX1276Init+0x88>)
 8042762:	689b      	ldr	r3, [r3, #8]
 8042764:	4798      	blx	r3
 8042766:	f104 0630 	add.w	r6, r4, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
 804276a:	7820      	ldrb	r0, [r4, #0]
 804276c:	f7ff ffa2 	bl	80426b4 <SX1276SetModem>
 8042770:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8042772:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8042776:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 804277a:	f7ff fbf1 	bl	8041f60 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 804277e:	42b4      	cmp	r4, r6
 8042780:	d1f3      	bne.n	804276a <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8042782:	2000      	movs	r0, #0
 8042784:	f7ff ff96 	bl	80426b4 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8042788:	4b0a      	ldr	r3, [pc, #40]	; (80427b4 <SX1276Init+0x8c>)
 804278a:	2200      	movs	r2, #0
 804278c:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 804278e:	682b      	ldr	r3, [r5, #0]
 8042790:	685b      	ldr	r3, [r3, #4]
 8042792:	4798      	blx	r3
}
 8042794:	3002      	adds	r0, #2
 8042796:	bd70      	pop	{r4, r5, r6, pc}
 8042798:	200024b4 	.word	0x200024b4
 804279c:	080433c1 	.word	0x080433c1
 80427a0:	20003ea8 	.word	0x20003ea8
 80427a4:	08053da0 	.word	0x08053da0
 80427a8:	20003f40 	.word	0x20003f40
 80427ac:	20003ec0 	.word	0x20003ec0
 80427b0:	20001018 	.word	0x20001018
 80427b4:	20003ed8 	.word	0x20003ed8

080427b8 <SX1276IsChannelFree>:
{
 80427b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80427ba:	461c      	mov	r4, r3
    return SX1276.Settings.State;
 80427bc:	4b13      	ldr	r3, [pc, #76]	; (804280c <SX1276IsChannelFree+0x54>)
    if( SX1276GetStatus( ) != RF_IDLE )
 80427be:	791b      	ldrb	r3, [r3, #4]
{
 80427c0:	4606      	mov	r6, r0
 80427c2:	460d      	mov	r5, r1
 80427c4:	4617      	mov	r7, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 80427c6:	b9f3      	cbnz	r3, 8042806 <SX1276IsChannelFree+0x4e>
    SX1276SetModem( modem );
 80427c8:	f7ff ff74 	bl	80426b4 <SX1276SetModem>
    SX1276SetChannel( freq );
 80427cc:	4628      	mov	r0, r5
 80427ce:	f7ff fbd3 	bl	8041f78 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80427d2:	2005      	movs	r0, #5
 80427d4:	f7ff fdc4 	bl	8042360 <SX1276SetOpMode>
    DelayMs( 1 );
 80427d8:	2001      	movs	r0, #1
 80427da:	f00d faeb 	bl	804fdb4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80427de:	f00b ff58 	bl	804e692 <TimerGetCurrentTime>
 80427e2:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80427e4:	4628      	mov	r0, r5
 80427e6:	f00b ff5b 	bl	804e6a0 <TimerGetElapsedTime>
 80427ea:	42a0      	cmp	r0, r4
 80427ec:	d304      	bcc.n	80427f8 <SX1276IsChannelFree+0x40>
    bool status = true;
 80427ee:	2401      	movs	r4, #1
    SX1276SetSleep( );
 80427f0:	f7ff fd96 	bl	8042320 <SX1276SetSleep>
}
 80427f4:	4620      	mov	r0, r4
 80427f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 80427f8:	4630      	mov	r0, r6
 80427fa:	f7ff fd59 	bl	80422b0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80427fe:	42b8      	cmp	r0, r7
 8042800:	ddf0      	ble.n	80427e4 <SX1276IsChannelFree+0x2c>
            status = false;
 8042802:	2400      	movs	r4, #0
 8042804:	e7f4      	b.n	80427f0 <SX1276IsChannelFree+0x38>
        return false;
 8042806:	2400      	movs	r4, #0
 8042808:	e7f4      	b.n	80427f4 <SX1276IsChannelFree+0x3c>
 804280a:	bf00      	nop
 804280c:	20003ed8 	.word	0x20003ed8

08042810 <SX1276Random>:
{
 8042810:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8042812:	2001      	movs	r0, #1
 8042814:	f7ff ff4e 	bl	80426b4 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8042818:	21ff      	movs	r1, #255	; 0xff
 804281a:	2011      	movs	r0, #17
 804281c:	f7ff fba0 	bl	8041f60 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8042820:	2005      	movs	r0, #5
 8042822:	f7ff fd9d 	bl	8042360 <SX1276SetOpMode>
 8042826:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8042828:	4625      	mov	r5, r4
        DelayMs( 1 );
 804282a:	2001      	movs	r0, #1
 804282c:	f00d fac2 	bl	804fdb4 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8042830:	202c      	movs	r0, #44	; 0x2c
 8042832:	f7ff fbe5 	bl	8042000 <SX1276Read>
 8042836:	f000 0001 	and.w	r0, r0, #1
 804283a:	40a0      	lsls	r0, r4
 804283c:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 804283e:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8042840:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8042844:	d1f1      	bne.n	804282a <SX1276Random+0x1a>
    SX1276SetSleep( );
 8042846:	f7ff fd6b 	bl	8042320 <SX1276SetSleep>
}
 804284a:	4628      	mov	r0, r5
 804284c:	bd38      	pop	{r3, r4, r5, pc}
	...

08042850 <SX1276SetRxConfig>:
{
 8042850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042854:	b089      	sub	sp, #36	; 0x24
 8042856:	4604      	mov	r4, r0
 8042858:	9300      	str	r3, [sp, #0]
 804285a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 804285e:	9304      	str	r3, [sp, #16]
 8042860:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8042864:	9302      	str	r3, [sp, #8]
 8042866:	468a      	mov	sl, r1
 8042868:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 804286c:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8042870:	9305      	str	r3, [sp, #20]
 8042872:	4615      	mov	r5, r2
 8042874:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8042878:	9206      	str	r2, [sp, #24]
 804287a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 804287e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8042882:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8042886:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 804288a:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 804288e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
 8042890:	f7ff ff10 	bl	80426b4 <SX1276SetModem>
    switch( modem )
 8042894:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8042898:	b134      	cbz	r4, 80428a8 <SX1276SetRxConfig+0x58>
 804289a:	2c01      	cmp	r4, #1
 804289c:	9907      	ldr	r1, [sp, #28]
 804289e:	f000 8083 	beq.w	80429a8 <SX1276SetRxConfig+0x158>
}
 80428a2:	b009      	add	sp, #36	; 0x24
 80428a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80428a8:	4ca1      	ldr	r4, [pc, #644]	; (8042b30 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80428aa:	4628      	mov	r0, r5
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80428ac:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80428b0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80428b4:	f8c4 a014 	str.w	sl, [r4, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80428b8:	e9c4 9506 	strd	r9, r5, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80428bc:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80428c0:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80428c4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80428c8:	8427      	strh	r7, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80428ca:	f7fd ff53 	bl	8040774 <__aeabi_ui2d>
 80428ce:	e9cd 0100 	strd	r0, r1, [sp]
 80428d2:	4602      	mov	r2, r0
 80428d4:	460b      	mov	r3, r1
 80428d6:	2000      	movs	r0, #0
 80428d8:	4996      	ldr	r1, [pc, #600]	; (8042b34 <SX1276SetRxConfig+0x2e4>)
 80428da:	f7fe f8ef 	bl	8040abc <__aeabi_ddiv>
 80428de:	2200      	movs	r2, #0
 80428e0:	4b95      	ldr	r3, [pc, #596]	; (8042b38 <SX1276SetRxConfig+0x2e8>)
 80428e2:	f7fd ffc1 	bl	8040868 <__aeabi_dmul>
 80428e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80428ea:	9804      	ldr	r0, [sp, #16]
 80428ec:	f7fd ff52 	bl	8040794 <__aeabi_i2d>
 80428f0:	4602      	mov	r2, r0
 80428f2:	460b      	mov	r3, r1
 80428f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80428f8:	f7fd ffb6 	bl	8040868 <__aeabi_dmul>
 80428fc:	2200      	movs	r2, #0
 80428fe:	4b8f      	ldr	r3, [pc, #572]	; (8042b3c <SX1276SetRxConfig+0x2ec>)
 8042900:	f7fd ffb2 	bl	8040868 <__aeabi_dmul>
 8042904:	f7fe fa88 	bl	8040e18 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8042908:	e9dd 2300 	ldrd	r2, r3, [sp]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 804290c:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 804290e:	a186      	add	r1, pc, #536	; (adr r1, 8042b28 <SX1276SetRxConfig+0x2d8>)
 8042910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8042914:	f7fe f8d2 	bl	8040abc <__aeabi_ddiv>
 8042918:	f7fe fa7e 	bl	8040e18 <__aeabi_d2uiz>
 804291c:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 804291e:	0a21      	lsrs	r1, r4, #8
 8042920:	2002      	movs	r0, #2
 8042922:	f7ff fb1d 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8042926:	b2e1      	uxtb	r1, r4
 8042928:	2003      	movs	r0, #3
 804292a:	f7ff fb19 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 804292e:	4650      	mov	r0, sl
 8042930:	f7ff faa0 	bl	8041e74 <GetFskBandwidthRegValue>
 8042934:	4601      	mov	r1, r0
 8042936:	2012      	movs	r0, #18
 8042938:	f7ff fb12 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 804293c:	4648      	mov	r0, r9
 804293e:	f7ff fa99 	bl	8041e74 <GetFskBandwidthRegValue>
 8042942:	4601      	mov	r1, r0
 8042944:	2013      	movs	r0, #19
 8042946:	f7ff fb0b 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 804294a:	0a39      	lsrs	r1, r7, #8
 804294c:	2025      	movs	r0, #37	; 0x25
 804294e:	f7ff fb07 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042952:	b2f9      	uxtb	r1, r7
 8042954:	2026      	movs	r0, #38	; 0x26
 8042956:	f7ff fb03 	bl	8041f60 <SX1276Write>
            if( fixLen == 1 )
 804295a:	f1b8 0f00 	cmp.w	r8, #0
 804295e:	d021      	beq.n	80429a4 <SX1276SetRxConfig+0x154>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8042960:	4659      	mov	r1, fp
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042962:	2032      	movs	r0, #50	; 0x32
 8042964:	f7ff fafc 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042968:	2030      	movs	r0, #48	; 0x30
 804296a:	f7ff fb49 	bl	8042000 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 804296e:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042972:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042976:	bf14      	ite	ne
 8042978:	2100      	movne	r1, #0
 804297a:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 804297e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8042982:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8042984:	b2c9      	uxtb	r1, r1
 8042986:	2030      	movs	r0, #48	; 0x30
 8042988:	f7ff faea 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 804298c:	2031      	movs	r0, #49	; 0x31
 804298e:	f7ff fb37 	bl	8042000 <SX1276Read>
 8042992:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042996:	b2c9      	uxtb	r1, r1
 8042998:	2031      	movs	r0, #49	; 0x31
}
 804299a:	b009      	add	sp, #36	; 0x24
 804299c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80429a0:	f7ff bade 	b.w	8041f60 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80429a4:	21ff      	movs	r1, #255	; 0xff
 80429a6:	e7dc      	b.n	8042962 <SX1276SetRxConfig+0x112>
            if( bandwidth > 2 )
 80429a8:	f1ba 0f02 	cmp.w	sl, #2
 80429ac:	d900      	bls.n	80429b0 <SX1276SetRxConfig+0x160>
 80429ae:	e7fe      	b.n	80429ae <SX1276SetRxConfig+0x15e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80429b0:	4c5f      	ldr	r4, [pc, #380]	; (8042b30 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 80429b2:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80429b4:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            bandwidth += 7;
 80429b8:	f10a 0907 	add.w	r9, sl, #7
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80429bc:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
 80429be:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
            if( datarate > 12 )
 80429c2:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 80429c4:	e9c4 9511 	strd	r9, r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80429c8:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 80429cc:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80429d0:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80429d4:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80429d8:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80429dc:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80429e0:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( datarate > 12 )
 80429e4:	f200 8098 	bhi.w	8042b18 <SX1276SetRxConfig+0x2c8>
            else if( datarate < 6 )
 80429e8:	2d05      	cmp	r5, #5
 80429ea:	f240 8081 	bls.w	8042af0 <SX1276SetRxConfig+0x2a0>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80429ee:	f1b9 0f07 	cmp.w	r9, #7
 80429f2:	d176      	bne.n	8042ae2 <SX1276SetRxConfig+0x292>
 80429f4:	f1a5 030b 	sub.w	r3, r5, #11
 80429f8:	2b01      	cmp	r3, #1
 80429fa:	d877      	bhi.n	8042aec <SX1276SetRxConfig+0x29c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80429fc:	2301      	movs	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80429fe:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042a00:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042a04:	f7ff fafc 	bl	8042000 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042a08:	9b00      	ldr	r3, [sp, #0]
 8042a0a:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
 8042a0e:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042a12:	b2c9      	uxtb	r1, r1
 8042a14:	201d      	movs	r0, #29
 8042a16:	f7ff faa3 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8042a1a:	201e      	movs	r0, #30
 8042a1c:	f7ff faf0 	bl	8042000 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8042a20:	9b04      	ldr	r3, [sp, #16]
 8042a22:	f3c3 2101 	ubfx	r1, r3, #8, #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8042a26:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 8042a2a:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 8042a2e:	4301      	orrs	r1, r0
 8042a30:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8042a34:	b2c9      	uxtb	r1, r1
 8042a36:	201e      	movs	r0, #30
 8042a38:	f7ff fa92 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042a3c:	2026      	movs	r0, #38	; 0x26
 8042a3e:	f7ff fadf 	bl	8042000 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042a42:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042a46:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042a4a:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8042a4e:	b2c9      	uxtb	r1, r1
 8042a50:	2026      	movs	r0, #38	; 0x26
 8042a52:	f7ff fa85 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8042a56:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8042a5a:	201f      	movs	r0, #31
 8042a5c:	f7ff fa80 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8042a60:	0a39      	lsrs	r1, r7, #8
 8042a62:	2020      	movs	r0, #32
 8042a64:	f7ff fa7c 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042a68:	b2f9      	uxtb	r1, r7
 8042a6a:	2021      	movs	r0, #33	; 0x21
 8042a6c:	f7ff fa78 	bl	8041f60 <SX1276Write>
            if( fixLen == 1 )
 8042a70:	f1b8 0f00 	cmp.w	r8, #0
 8042a74:	d003      	beq.n	8042a7e <SX1276SetRxConfig+0x22e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8042a76:	4659      	mov	r1, fp
 8042a78:	2022      	movs	r0, #34	; 0x22
 8042a7a:	f7ff fa71 	bl	8041f60 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042a7e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042a82:	b16b      	cbz	r3, 8042aa0 <SX1276SetRxConfig+0x250>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042a84:	2044      	movs	r0, #68	; 0x44
 8042a86:	f7ff fabb 	bl	8042000 <SX1276Read>
 8042a8a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042a8e:	b2c9      	uxtb	r1, r1
 8042a90:	2044      	movs	r0, #68	; 0x44
 8042a92:	f7ff fa65 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042a96:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8042a9a:	2024      	movs	r0, #36	; 0x24
 8042a9c:	f7ff fa60 	bl	8041f60 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042aa0:	f1b9 0f09 	cmp.w	r9, #9
 8042aa4:	d12a      	bne.n	8042afc <SX1276SetRxConfig+0x2ac>
 8042aa6:	68a2      	ldr	r2, [r4, #8]
 8042aa8:	4b25      	ldr	r3, [pc, #148]	; (8042b40 <SX1276SetRxConfig+0x2f0>)
 8042aaa:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8042aac:	f04f 0102 	mov.w	r1, #2
 8042ab0:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042ab4:	d91e      	bls.n	8042af4 <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8042ab6:	f7ff fa53 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8042aba:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8042abc:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8042abe:	f7ff fa4f 	bl	8041f60 <SX1276Write>
            if( datarate == 6 )
 8042ac2:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042ac4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 8042ac8:	d11b      	bne.n	8042b02 <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042aca:	f7ff fa99 	bl	8042000 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042ace:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042ad2:	f041 0105 	orr.w	r1, r1, #5
 8042ad6:	2031      	movs	r0, #49	; 0x31
 8042ad8:	f7ff fa42 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042adc:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042ade:	2037      	movs	r0, #55	; 0x37
 8042ae0:	e75b      	b.n	804299a <SX1276SetRxConfig+0x14a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042ae2:	f1b9 0f08 	cmp.w	r9, #8
 8042ae6:	d101      	bne.n	8042aec <SX1276SetRxConfig+0x29c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8042ae8:	2d0c      	cmp	r5, #12
 8042aea:	d087      	beq.n	80429fc <SX1276SetRxConfig+0x1ac>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042aec:	2300      	movs	r3, #0
 8042aee:	e786      	b.n	80429fe <SX1276SetRxConfig+0x1ae>
                datarate = 6;
 8042af0:	2506      	movs	r5, #6
 8042af2:	e7fb      	b.n	8042aec <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8042af4:	f7ff fa34 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8042af8:	217f      	movs	r1, #127	; 0x7f
 8042afa:	e7df      	b.n	8042abc <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8042afc:	2103      	movs	r1, #3
 8042afe:	2036      	movs	r0, #54	; 0x36
 8042b00:	e7dd      	b.n	8042abe <SX1276SetRxConfig+0x26e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042b02:	f7ff fa7d 	bl	8042000 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042b06:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042b0a:	f041 0103 	orr.w	r1, r1, #3
 8042b0e:	2031      	movs	r0, #49	; 0x31
 8042b10:	f7ff fa26 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042b14:	210a      	movs	r1, #10
 8042b16:	e7e2      	b.n	8042ade <SX1276SetRxConfig+0x28e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042b18:	f1ba 0f02 	cmp.w	sl, #2
 8042b1c:	f04f 050c 	mov.w	r5, #12
 8042b20:	d0e4      	beq.n	8042aec <SX1276SetRxConfig+0x29c>
 8042b22:	e76b      	b.n	80429fc <SX1276SetRxConfig+0x1ac>
 8042b24:	f3af 8000 	nop.w
 8042b28:	00000000 	.word	0x00000000
 8042b2c:	417e8480 	.word	0x417e8480
 8042b30:	20003ed8 	.word	0x20003ed8
 8042b34:	3ff00000 	.word	0x3ff00000
 8042b38:	40200000 	.word	0x40200000
 8042b3c:	408f4000 	.word	0x408f4000
 8042b40:	1f4add40 	.word	0x1f4add40
 8042b44:	00000000 	.word	0x00000000

08042b48 <SX1276SetTxConfig>:
{
 8042b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042b4c:	b087      	sub	sp, #28
 8042b4e:	4698      	mov	r8, r3
 8042b50:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8042b54:	9301      	str	r3, [sp, #4]
 8042b56:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8042b5a:	9303      	str	r3, [sp, #12]
 8042b5c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8042b60:	9304      	str	r3, [sp, #16]
 8042b62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8042b64:	9205      	str	r2, [sp, #20]
 8042b66:	4689      	mov	r9, r1
 8042b68:	9302      	str	r3, [sp, #8]
 8042b6a:	4683      	mov	fp, r0
 8042b6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8042b6e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8042b72:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8042b76:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8042b7a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    SX1276SetModem( modem );
 8042b7e:	f7ff fd99 	bl	80426b4 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8042b82:	4985      	ldr	r1, [pc, #532]	; (8042d98 <SX1276SetTxConfig+0x250>)
 8042b84:	6809      	ldr	r1, [r1, #0]
 8042b86:	4648      	mov	r0, r9
 8042b88:	68c9      	ldr	r1, [r1, #12]
 8042b8a:	4788      	blx	r1
    switch( modem )
 8042b8c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8042b90:	f1bb 0f00 	cmp.w	fp, #0
 8042b94:	d005      	beq.n	8042ba2 <SX1276SetTxConfig+0x5a>
 8042b96:	f1bb 0f01 	cmp.w	fp, #1
 8042b9a:	d061      	beq.n	8042c60 <SX1276SetTxConfig+0x118>
}
 8042b9c:	b007      	add	sp, #28
 8042b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8042ba2:	497e      	ldr	r1, [pc, #504]	; (8042d9c <SX1276SetTxConfig+0x254>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8042ba4:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042ba8:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.Fsk.Datarate = datarate;
 8042baa:	61cc      	str	r4, [r1, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8042bac:	e9c1 2804 	strd	r2, r8, [r1, #16]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8042bb0:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042bb4:	628b      	str	r3, [r1, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8042bb6:	4610      	mov	r0, r2
            SX1276.Settings.Fsk.Power = power;
 8042bb8:	f881 900c 	strb.w	r9, [r1, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8042bbc:	840f      	strh	r7, [r1, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8042bbe:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8042bc2:	f7fd fdd7 	bl	8040774 <__aeabi_ui2d>
 8042bc6:	a370      	add	r3, pc, #448	; (adr r3, 8042d88 <SX1276SetTxConfig+0x240>)
 8042bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042bcc:	f7fd ff76 	bl	8040abc <__aeabi_ddiv>
 8042bd0:	f7fe f922 	bl	8040e18 <__aeabi_d2uiz>
 8042bd4:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8042bd8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8042bdc:	2004      	movs	r0, #4
 8042bde:	f7ff f9bf 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8042be2:	fa5f f188 	uxtb.w	r1, r8
 8042be6:	2005      	movs	r0, #5
 8042be8:	f7ff f9ba 	bl	8041f60 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8042bec:	4620      	mov	r0, r4
 8042bee:	f7fd fdc1 	bl	8040774 <__aeabi_ui2d>
 8042bf2:	4602      	mov	r2, r0
 8042bf4:	460b      	mov	r3, r1
 8042bf6:	a166      	add	r1, pc, #408	; (adr r1, 8042d90 <SX1276SetTxConfig+0x248>)
 8042bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8042bfc:	f7fd ff5e 	bl	8040abc <__aeabi_ddiv>
 8042c00:	f7fe f90a 	bl	8040e18 <__aeabi_d2uiz>
 8042c04:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8042c06:	0a21      	lsrs	r1, r4, #8
 8042c08:	2002      	movs	r0, #2
 8042c0a:	f7ff f9a9 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8042c0e:	b2e1      	uxtb	r1, r4
 8042c10:	2003      	movs	r0, #3
 8042c12:	f7ff f9a5 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042c16:	0a39      	lsrs	r1, r7, #8
 8042c18:	2025      	movs	r0, #37	; 0x25
 8042c1a:	f7ff f9a1 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8042c1e:	b2f9      	uxtb	r1, r7
 8042c20:	2026      	movs	r0, #38	; 0x26
 8042c22:	f7ff f99d 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042c26:	2030      	movs	r0, #48	; 0x30
 8042c28:	f7ff f9ea 	bl	8042000 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042c2c:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042c2e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042c32:	bf14      	ite	ne
 8042c34:	2100      	movne	r1, #0
 8042c36:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8042c3a:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 8042c3e:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8042c40:	b2c9      	uxtb	r1, r1
 8042c42:	2030      	movs	r0, #48	; 0x30
 8042c44:	f7ff f98c 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8042c48:	2031      	movs	r0, #49	; 0x31
 8042c4a:	f7ff f9d9 	bl	8042000 <SX1276Read>
 8042c4e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042c52:	b2c9      	uxtb	r1, r1
 8042c54:	2031      	movs	r0, #49	; 0x31
}
 8042c56:	b007      	add	sp, #28
 8042c58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042c5c:	f7ff b980 	b.w	8041f60 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
 8042c60:	4a4e      	ldr	r2, [pc, #312]	; (8042d9c <SX1276SetTxConfig+0x254>)
            if( bandwidth > 2 )
 8042c62:	f1b8 0f02 	cmp.w	r8, #2
            SX1276.Settings.LoRa.Power = power;
 8042c66:	f882 9040 	strb.w	r9, [r2, #64]	; 0x40
 8042c6a:	4691      	mov	r9, r2
            if( bandwidth > 2 )
 8042c6c:	d900      	bls.n	8042c70 <SX1276SetTxConfig+0x128>
 8042c6e:	e7fe      	b.n	8042c6e <SX1276SetTxConfig+0x126>
            bandwidth += 7;
 8042c70:	f108 0b07 	add.w	fp, r8, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8042c74:	e9c2 b411 	strd	fp, r4, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8042c78:	f882 a04d 	strb.w	sl, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8042c7c:	f8a2 704e 	strh.w	r7, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8042c80:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042c84:	9a01      	ldr	r2, [sp, #4]
 8042c86:	f889 2053 	strb.w	r2, [r9, #83]	; 0x53
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8042c8a:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042c8e:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042c90:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042c92:	f889 2054 	strb.w	r2, [r9, #84]	; 0x54
            if( datarate > 12 )
 8042c96:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042c98:	f889 5052 	strb.w	r5, [r9, #82]	; 0x52
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042c9c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
            if( datarate > 12 )
 8042ca0:	d86c      	bhi.n	8042d7c <SX1276SetTxConfig+0x234>
            else if( datarate < 6 )
 8042ca2:	2c05      	cmp	r4, #5
 8042ca4:	d95d      	bls.n	8042d62 <SX1276SetTxConfig+0x21a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042ca6:	f1bb 0f07 	cmp.w	fp, #7
 8042caa:	d153      	bne.n	8042d54 <SX1276SetTxConfig+0x20c>
 8042cac:	f1a4 030b 	sub.w	r3, r4, #11
 8042cb0:	2b01      	cmp	r3, #1
 8042cb2:	d854      	bhi.n	8042d5e <SX1276SetTxConfig+0x216>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8042cb4:	2301      	movs	r3, #1
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042cb6:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042cba:	9b01      	ldr	r3, [sp, #4]
 8042cbc:	b16b      	cbz	r3, 8042cda <SX1276SetTxConfig+0x192>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042cbe:	2044      	movs	r0, #68	; 0x44
 8042cc0:	f7ff f99e 	bl	8042000 <SX1276Read>
 8042cc4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042cc8:	b2c9      	uxtb	r1, r1
 8042cca:	2044      	movs	r0, #68	; 0x44
 8042ccc:	f7ff f948 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042cd0:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
 8042cd4:	2024      	movs	r0, #36	; 0x24
 8042cd6:	f7ff f943 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042cda:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042cdc:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042ce0:	f7ff f98e 	bl	8042000 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042ce4:	ea46 110b 	orr.w	r1, r6, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042ce8:	b2c9      	uxtb	r1, r1
 8042cea:	201d      	movs	r0, #29
 8042cec:	f7ff f938 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8042cf0:	201e      	movs	r0, #30
 8042cf2:	f7ff f985 	bl	8042000 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8042cf6:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 8042cf8:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 8042cfc:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8042d00:	4305      	orrs	r5, r0
 8042d02:	b2e9      	uxtb	r1, r5
 8042d04:	201e      	movs	r0, #30
 8042d06:	f7ff f92b 	bl	8041f60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042d0a:	2026      	movs	r0, #38	; 0x26
 8042d0c:	f7ff f978 	bl	8042000 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042d10:	f899 104c 	ldrb.w	r1, [r9, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042d14:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042d18:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8042d1c:	b2c9      	uxtb	r1, r1
 8042d1e:	2026      	movs	r0, #38	; 0x26
 8042d20:	f7ff f91e 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042d24:	0a39      	lsrs	r1, r7, #8
 8042d26:	2020      	movs	r0, #32
 8042d28:	f7ff f91a 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8042d2c:	2021      	movs	r0, #33	; 0x21
 8042d2e:	b2f9      	uxtb	r1, r7
 8042d30:	f7ff f916 	bl	8041f60 <SX1276Write>
            if( datarate == 6 )
 8042d34:	2c06      	cmp	r4, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042d36:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 8042d3a:	d114      	bne.n	8042d66 <SX1276SetTxConfig+0x21e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042d3c:	f7ff f960 	bl	8042000 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042d40:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042d44:	f041 0105 	orr.w	r1, r1, #5
 8042d48:	2031      	movs	r0, #49	; 0x31
 8042d4a:	f7ff f909 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042d4e:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042d50:	2037      	movs	r0, #55	; 0x37
 8042d52:	e780      	b.n	8042c56 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042d54:	f1bb 0f08 	cmp.w	fp, #8
 8042d58:	d101      	bne.n	8042d5e <SX1276SetTxConfig+0x216>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8042d5a:	2c0c      	cmp	r4, #12
 8042d5c:	d0aa      	beq.n	8042cb4 <SX1276SetTxConfig+0x16c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042d5e:	2300      	movs	r3, #0
 8042d60:	e7a9      	b.n	8042cb6 <SX1276SetTxConfig+0x16e>
                datarate = 6;
 8042d62:	2406      	movs	r4, #6
 8042d64:	e7fb      	b.n	8042d5e <SX1276SetTxConfig+0x216>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042d66:	f7ff f94b 	bl	8042000 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042d6a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042d6e:	f041 0103 	orr.w	r1, r1, #3
 8042d72:	2031      	movs	r0, #49	; 0x31
 8042d74:	f7ff f8f4 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042d78:	210a      	movs	r1, #10
 8042d7a:	e7e9      	b.n	8042d50 <SX1276SetTxConfig+0x208>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042d7c:	f1b8 0f02 	cmp.w	r8, #2
 8042d80:	f04f 040c 	mov.w	r4, #12
 8042d84:	d0eb      	beq.n	8042d5e <SX1276SetTxConfig+0x216>
 8042d86:	e795      	b.n	8042cb4 <SX1276SetTxConfig+0x16c>
 8042d88:	00000000 	.word	0x00000000
 8042d8c:	404e8480 	.word	0x404e8480
 8042d90:	00000000 	.word	0x00000000
 8042d94:	417e8480 	.word	0x417e8480
 8042d98:	200024b4 	.word	0x200024b4
 8042d9c:	20003ed8 	.word	0x20003ed8

08042da0 <SX1276SetTxContinuousWave>:
{
 8042da0:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042da2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8042da6:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042da8:	4354      	muls	r4, r2
{
 8042daa:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
 8042dac:	f7ff f8e4 	bl	8041f78 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8042db0:	2300      	movs	r3, #0
 8042db2:	2205      	movs	r2, #5
 8042db4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8042db8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8042dbc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8042dc0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8042dc4:	9303      	str	r3, [sp, #12]
 8042dc6:	4618      	mov	r0, r3
 8042dc8:	4629      	mov	r1, r5
 8042dca:	9200      	str	r2, [sp, #0]
 8042dcc:	9408      	str	r4, [sp, #32]
 8042dce:	461a      	mov	r2, r3
 8042dd0:	f7ff feba 	bl	8042b48 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8042dd4:	2031      	movs	r0, #49	; 0x31
 8042dd6:	f7ff f913 	bl	8042000 <SX1276Read>
 8042dda:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8042dde:	2031      	movs	r0, #49	; 0x31
 8042de0:	f7ff f8be 	bl	8041f60 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042de4:	4d0c      	ldr	r5, [pc, #48]	; (8042e18 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8042de6:	21f0      	movs	r1, #240	; 0xf0
 8042de8:	2040      	movs	r0, #64	; 0x40
 8042dea:	f7ff f8b9 	bl	8041f60 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8042dee:	21a0      	movs	r1, #160	; 0xa0
 8042df0:	2041      	movs	r0, #65	; 0x41
 8042df2:	f7ff f8b5 	bl	8041f60 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042df6:	4621      	mov	r1, r4
 8042df8:	4628      	mov	r0, r5
 8042dfa:	f00b fc39 	bl	804e670 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8042dfe:	4b07      	ldr	r3, [pc, #28]	; (8042e1c <SX1276SetTxContinuousWave+0x7c>)
 8042e00:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 8042e02:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8042e04:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8042e06:	f00b fb99 	bl	804e53c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042e0a:	2003      	movs	r0, #3
}
 8042e0c:	b00b      	add	sp, #44	; 0x2c
 8042e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042e12:	f7ff baa5 	b.w	8042360 <SX1276SetOpMode>
 8042e16:	bf00      	nop
 8042e18:	20003ea8 	.word	0x20003ea8
 8042e1c:	20003ed8 	.word	0x20003ed8

08042e20 <SX1276OnDio2Irq>:
{
 8042e20:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042e22:	4c2b      	ldr	r4, [pc, #172]	; (8042ed0 <SX1276OnDio2Irq+0xb0>)
 8042e24:	7921      	ldrb	r1, [r4, #4]
 8042e26:	2901      	cmp	r1, #1
 8042e28:	d002      	beq.n	8042e30 <SX1276OnDio2Irq+0x10>
 8042e2a:	2902      	cmp	r1, #2
 8042e2c:	d048      	beq.n	8042ec0 <SX1276OnDio2Irq+0xa0>
}
 8042e2e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042e30:	7963      	ldrb	r3, [r4, #5]
 8042e32:	b1d3      	cbz	r3, 8042e6a <SX1276OnDio2Irq+0x4a>
 8042e34:	2b01      	cmp	r3, #1
 8042e36:	d1fa      	bne.n	8042e2e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042e38:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042e3c:	2b00      	cmp	r3, #0
 8042e3e:	d0f6      	beq.n	8042e2e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042e40:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042e42:	2012      	movs	r0, #18
 8042e44:	f7ff f88c 	bl	8041f60 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8042e48:	4b22      	ldr	r3, [pc, #136]	; (8042ed4 <SX1276OnDio2Irq+0xb4>)
 8042e4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042e4e:	2b00      	cmp	r3, #0
 8042e50:	d0ed      	beq.n	8042e2e <SX1276OnDio2Irq+0xe>
 8042e52:	695c      	ldr	r4, [r3, #20]
 8042e54:	2c00      	cmp	r4, #0
 8042e56:	d0ea      	beq.n	8042e2e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042e58:	201c      	movs	r0, #28
 8042e5a:	f7ff f8d1 	bl	8042000 <SX1276Read>
 8042e5e:	4623      	mov	r3, r4
 8042e60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8042e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042e68:	4718      	bx	r3
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8042e6a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8042e6e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8042e70:	2d01      	cmp	r5, #1
 8042e72:	d1dc      	bne.n	8042e2e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8042e74:	4818      	ldr	r0, [pc, #96]	; (8042ed8 <SX1276OnDio2Irq+0xb8>)
 8042e76:	f00b fbd3 	bl	804e620 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042e7a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8042e7c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042e80:	f7ff f8be 	bl	8042000 <SX1276Read>
 8042e84:	0840      	lsrs	r0, r0, #1
 8042e86:	4240      	negs	r0, r0
 8042e88:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8042e8c:	201b      	movs	r0, #27
 8042e8e:	f7ff f8b7 	bl	8042000 <SX1276Read>
 8042e92:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8042e94:	201c      	movs	r0, #28
 8042e96:	f7ff f8b3 	bl	8042000 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8042e9a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8042e9e:	b2c2      	uxtb	r2, r0
 8042ea0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8042ea4:	435a      	muls	r2, r3
 8042ea6:	0a00      	lsrs	r0, r0, #8
 8042ea8:	3280      	adds	r2, #128	; 0x80
 8042eaa:	4343      	muls	r3, r0
 8042eac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042eb0:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8042eb2:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042eb4:	f7ff f8a4 	bl	8042000 <SX1276Read>
 8042eb8:	0940      	lsrs	r0, r0, #5
 8042eba:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8042ebe:	e7b6      	b.n	8042e2e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8042ec0:	7963      	ldrb	r3, [r4, #5]
 8042ec2:	2b01      	cmp	r3, #1
 8042ec4:	d1b3      	bne.n	8042e2e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042ec6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042eca:	2b00      	cmp	r3, #0
 8042ecc:	d0af      	beq.n	8042e2e <SX1276OnDio2Irq+0xe>
 8042ece:	e7b8      	b.n	8042e42 <SX1276OnDio2Irq+0x22>
 8042ed0:	20003ed8 	.word	0x20003ed8
 8042ed4:	200024b4 	.word	0x200024b4
 8042ed8:	20003ec0 	.word	0x20003ec0

08042edc <SX1276OnDio3Irq>:
    switch( SX1276.Settings.Modem )
 8042edc:	4b12      	ldr	r3, [pc, #72]	; (8042f28 <SX1276OnDio3Irq+0x4c>)
{
 8042ede:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8042ee0:	795d      	ldrb	r5, [r3, #5]
 8042ee2:	2d01      	cmp	r5, #1
 8042ee4:	d11e      	bne.n	8042f24 <SX1276OnDio3Irq+0x48>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8042ee6:	2012      	movs	r0, #18
 8042ee8:	f7ff f88a 	bl	8042000 <SX1276Read>
 8042eec:	f010 0601 	ands.w	r6, r0, #1
 8042ef0:	4c0e      	ldr	r4, [pc, #56]	; (8042f2c <SX1276OnDio3Irq+0x50>)
 8042ef2:	d00c      	beq.n	8042f0e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8042ef4:	2105      	movs	r1, #5
 8042ef6:	2012      	movs	r0, #18
 8042ef8:	f7ff f832 	bl	8041f60 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042efc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8042f00:	b183      	cbz	r3, 8042f24 <SX1276OnDio3Irq+0x48>
 8042f02:	699b      	ldr	r3, [r3, #24]
 8042f04:	b173      	cbz	r3, 8042f24 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( true );
 8042f06:	4628      	mov	r0, r5
}
 8042f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 8042f0c:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8042f0e:	2104      	movs	r1, #4
 8042f10:	2012      	movs	r0, #18
 8042f12:	f7ff f825 	bl	8041f60 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042f16:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8042f1a:	b11b      	cbz	r3, 8042f24 <SX1276OnDio3Irq+0x48>
 8042f1c:	699b      	ldr	r3, [r3, #24]
 8042f1e:	b10b      	cbz	r3, 8042f24 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( false );
 8042f20:	4630      	mov	r0, r6
 8042f22:	e7f1      	b.n	8042f08 <SX1276OnDio3Irq+0x2c>
}
 8042f24:	bd70      	pop	{r4, r5, r6, pc}
 8042f26:	bf00      	nop
 8042f28:	20003ed8 	.word	0x20003ed8
 8042f2c:	200024b4 	.word	0x200024b4

08042f30 <SX1276WriteFifo>:
    SX1276WriteBuffer( 0, buffer, size );
 8042f30:	460a      	mov	r2, r1
 8042f32:	4601      	mov	r1, r0
 8042f34:	2000      	movs	r0, #0
 8042f36:	f7fe bff3 	b.w	8041f20 <SX1276WriteBuffer>
	...

08042f3c <SX1276Send>:
{
 8042f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8042f3e:	4c39      	ldr	r4, [pc, #228]	; (8043024 <SX1276Send+0xe8>)
{
 8042f40:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8042f44:	7963      	ldrb	r3, [r4, #5]
{
 8042f46:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 8042f48:	b11b      	cbz	r3, 8042f52 <SX1276Send+0x16>
 8042f4a:	2b01      	cmp	r3, #1
 8042f4c:	d02f      	beq.n	8042fae <SX1276Send+0x72>
    uint32_t txTimeout = 0;
 8042f4e:	2000      	movs	r0, #0
 8042f50:	e01d      	b.n	8042f8e <SX1276Send+0x52>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042f52:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( SX1276.Settings.Fsk.FixLen == false )
 8042f54:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 8042f58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042f5c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8042f5e:	b9d3      	cbnz	r3, 8042f96 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8042f60:	2101      	movs	r1, #1
 8042f62:	f10d 0007 	add.w	r0, sp, #7
 8042f66:	f7ff ffe3 	bl	8042f30 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8042f6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8042f6e:	1e53      	subs	r3, r2, #1
 8042f70:	2b3f      	cmp	r3, #63	; 0x3f
 8042f72:	d814      	bhi.n	8042f9e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8042f74:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8042f78:	4628      	mov	r0, r5
 8042f7a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8042f7e:	f7ff ffd7 	bl	8042f30 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042f82:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042f84:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8042f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042f8a:	4413      	add	r3, r2
 8042f8c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8042f8e:	f7ff fb21 	bl	80425d4 <SX1276SetTx>
}
 8042f92:	b003      	add	sp, #12
 8042f94:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8042f96:	2032      	movs	r0, #50	; 0x32
 8042f98:	f7fe ffe2 	bl	8041f60 <SX1276Write>
 8042f9c:	e7e5      	b.n	8042f6a <SX1276Send+0x2e>
                memcpy1( RxTxBuffer, buffer, size );
 8042f9e:	4629      	mov	r1, r5
 8042fa0:	4821      	ldr	r0, [pc, #132]	; (8043028 <SX1276Send+0xec>)
 8042fa2:	f00b fc2c 	bl	804e7fe <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8042fa6:	2320      	movs	r3, #32
 8042fa8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8042fac:	e7e4      	b.n	8042f78 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042fae:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042fb2:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042fb4:	b35b      	cbz	r3, 804300e <SX1276Send+0xd2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042fb6:	f7ff f823 	bl	8042000 <SX1276Read>
 8042fba:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8042fbe:	2033      	movs	r0, #51	; 0x33
 8042fc0:	f7fe ffce 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8042fc4:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042fc6:	203b      	movs	r0, #59	; 0x3b
 8042fc8:	f7fe ffca 	bl	8041f60 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8042fcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042fd0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8042fd4:	2022      	movs	r0, #34	; 0x22
 8042fd6:	f7fe ffc3 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8042fda:	2100      	movs	r1, #0
 8042fdc:	200e      	movs	r0, #14
 8042fde:	f7fe ffbf 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042fe2:	2100      	movs	r1, #0
 8042fe4:	200d      	movs	r0, #13
 8042fe6:	f7fe ffbb 	bl	8041f60 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8042fea:	2001      	movs	r0, #1
 8042fec:	f7ff f808 	bl	8042000 <SX1276Read>
 8042ff0:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8042ff4:	d104      	bne.n	8043000 <SX1276Send+0xc4>
                SX1276SetStby( );
 8042ff6:	f7ff f9d5 	bl	80423a4 <SX1276SetStby>
                DelayMs( 1 );
 8042ffa:	2001      	movs	r0, #1
 8042ffc:	f00c feda 	bl	804fdb4 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8043000:	4628      	mov	r0, r5
 8043002:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8043006:	f7ff ff93 	bl	8042f30 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 804300a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 804300c:	e7bf      	b.n	8042f8e <SX1276Send+0x52>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 804300e:	f7fe fff7 	bl	8042000 <SX1276Read>
 8043012:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8043016:	f041 0101 	orr.w	r1, r1, #1
 804301a:	2033      	movs	r0, #51	; 0x33
 804301c:	f7fe ffa0 	bl	8041f60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8043020:	211d      	movs	r1, #29
 8043022:	e7d0      	b.n	8042fc6 <SX1276Send+0x8a>
 8043024:	20003ed8 	.word	0x20003ed8
 8043028:	200024b8 	.word	0x200024b8

0804302c <SX1276ReadFifo>:
    SX1276ReadBuffer( 0, buffer, size );
 804302c:	460a      	mov	r2, r1
 804302e:	4601      	mov	r1, r0
 8043030:	2000      	movs	r0, #0
 8043032:	f7fe bfc5 	b.w	8041fc0 <SX1276ReadBuffer>
	...

08043038 <SX1276OnDio0Irq>:
{
 8043038:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 804303a:	4e89      	ldr	r6, [pc, #548]	; (8043260 <SX1276OnDio0Irq+0x228>)
    volatile uint8_t irqFlags = 0;
 804303c:	2300      	movs	r3, #0
 804303e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8043042:	7933      	ldrb	r3, [r6, #4]
 8043044:	2b01      	cmp	r3, #1
 8043046:	4634      	mov	r4, r6
 8043048:	d004      	beq.n	8043054 <SX1276OnDio0Irq+0x1c>
 804304a:	2b02      	cmp	r3, #2
 804304c:	f000 80f4 	beq.w	8043238 <SX1276OnDio0Irq+0x200>
}
 8043050:	b002      	add	sp, #8
 8043052:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8043054:	7973      	ldrb	r3, [r6, #5]
 8043056:	b33b      	cbz	r3, 80430a8 <SX1276OnDio0Irq+0x70>
 8043058:	2b01      	cmp	r3, #1
 804305a:	d1f9      	bne.n	8043050 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 804305c:	2140      	movs	r1, #64	; 0x40
 804305e:	2012      	movs	r0, #18
 8043060:	f7fe ff7e 	bl	8041f60 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8043064:	2012      	movs	r0, #18
 8043066:	f7fe ffcb 	bl	8042000 <SX1276Read>
 804306a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 804306e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8043072:	4d7c      	ldr	r5, [pc, #496]	; (8043264 <SX1276OnDio0Irq+0x22c>)
 8043074:	f013 0f20 	tst.w	r3, #32
 8043078:	f000 808d 	beq.w	8043196 <SX1276OnDio0Irq+0x15e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 804307c:	2120      	movs	r1, #32
 804307e:	2012      	movs	r0, #18
 8043080:	f7fe ff6e 	bl	8041f60 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8043084:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 8043088:	b903      	cbnz	r3, 804308c <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 804308a:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 804308c:	4876      	ldr	r0, [pc, #472]	; (8043268 <SX1276OnDio0Irq+0x230>)
 804308e:	f00b fac7 	bl	804e620 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8043092:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8043096:	2b00      	cmp	r3, #0
 8043098:	d0da      	beq.n	8043050 <SX1276OnDio0Irq+0x18>
 804309a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 804309c:	2b00      	cmp	r3, #0
 804309e:	d0d7      	beq.n	8043050 <SX1276OnDio0Irq+0x18>
}
 80430a0:	b002      	add	sp, #8
 80430a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 80430a6:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 80430a8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80430ac:	4d6d      	ldr	r5, [pc, #436]	; (8043264 <SX1276OnDio0Irq+0x22c>)
 80430ae:	b393      	cbz	r3, 8043116 <SX1276OnDio0Irq+0xde>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80430b0:	203f      	movs	r0, #63	; 0x3f
 80430b2:	f7fe ffa5 	bl	8042000 <SX1276Read>
 80430b6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80430ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80430be:	079b      	lsls	r3, r3, #30
 80430c0:	d429      	bmi.n	8043116 <SX1276OnDio0Irq+0xde>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80430c2:	210b      	movs	r1, #11
 80430c4:	203e      	movs	r0, #62	; 0x3e
 80430c6:	f7fe ff4b 	bl	8041f60 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80430ca:	2110      	movs	r1, #16
 80430cc:	203f      	movs	r0, #63	; 0x3f
 80430ce:	f7fe ff47 	bl	8041f60 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80430d2:	4865      	ldr	r0, [pc, #404]	; (8043268 <SX1276OnDio0Irq+0x230>)
 80430d4:	f00b faa4 	bl	804e620 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80430d8:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 80430dc:	b976      	cbnz	r6, 80430fc <SX1276OnDio0Irq+0xc4>
                            TimerStop( &RxTimeoutSyncWord );
 80430de:	4863      	ldr	r0, [pc, #396]	; (804326c <SX1276OnDio0Irq+0x234>)
 80430e0:	f00b fa9e 	bl	804e620 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80430e4:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80430e6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 80430ea:	b113      	cbz	r3, 80430f2 <SX1276OnDio0Irq+0xba>
 80430ec:	691b      	ldr	r3, [r3, #16]
 80430ee:	b103      	cbz	r3, 80430f2 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 80430f0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80430f2:	2300      	movs	r3, #0
 80430f4:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80430f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80430f8:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80430fa:	e7a9      	b.n	8043050 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80430fc:	200d      	movs	r0, #13
 80430fe:	f7fe ff7f 	bl	8042000 <SX1276Read>
 8043102:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8043106:	b2c9      	uxtb	r1, r1
 8043108:	200d      	movs	r0, #13
 804310a:	f7fe ff29 	bl	8041f60 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 804310e:	4857      	ldr	r0, [pc, #348]	; (804326c <SX1276OnDio0Irq+0x234>)
 8043110:	f00b fa14 	bl	804e53c <TimerStart>
 8043114:	e7e7      	b.n	80430e6 <SX1276OnDio0Irq+0xae>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8043116:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8043118:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 804311a:	4e55      	ldr	r6, [pc, #340]	; (8043270 <SX1276OnDio0Irq+0x238>)
 804311c:	b951      	cbnz	r1, 8043134 <SX1276OnDio0Irq+0xfc>
 804311e:	b948      	cbnz	r0, 8043134 <SX1276OnDio0Irq+0xfc>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8043120:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8043124:	bb2b      	cbnz	r3, 8043172 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8043126:	2101      	movs	r1, #1
 8043128:	4852      	ldr	r0, [pc, #328]	; (8043274 <SX1276OnDio0Irq+0x23c>)
 804312a:	f7ff ff7f 	bl	804302c <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804312e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8043130:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043134:	1a09      	subs	r1, r1, r0
 8043136:	b2c9      	uxtb	r1, r1
 8043138:	4430      	add	r0, r6
 804313a:	f7ff ff77 	bl	804302c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 804313e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8043140:	4849      	ldr	r0, [pc, #292]	; (8043268 <SX1276OnDio0Irq+0x230>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043142:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8043144:	f00b fa6c 	bl	804e620 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8043148:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 804314c:	b9b3      	cbnz	r3, 804317c <SX1276OnDio0Irq+0x144>
                    TimerStop( &RxTimeoutSyncWord );
 804314e:	4847      	ldr	r0, [pc, #284]	; (804326c <SX1276OnDio0Irq+0x234>)
                    SX1276.Settings.State = RF_IDLE;
 8043150:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8043152:	f00b fa65 	bl	804e620 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8043156:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 804315a:	2b00      	cmp	r3, #0
 804315c:	d0c9      	beq.n	80430f2 <SX1276OnDio0Irq+0xba>
 804315e:	689d      	ldr	r5, [r3, #8]
 8043160:	2d00      	cmp	r5, #0
 8043162:	d0c6      	beq.n	80430f2 <SX1276OnDio0Irq+0xba>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8043164:	2300      	movs	r3, #0
 8043166:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 804316a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 804316c:	4840      	ldr	r0, [pc, #256]	; (8043270 <SX1276OnDio0Irq+0x238>)
 804316e:	47a8      	blx	r5
 8043170:	e7bf      	b.n	80430f2 <SX1276OnDio0Irq+0xba>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8043172:	2032      	movs	r0, #50	; 0x32
 8043174:	f7fe ff44 	bl	8042000 <SX1276Read>
 8043178:	8760      	strh	r0, [r4, #58]	; 0x3a
 804317a:	e7d8      	b.n	804312e <SX1276OnDio0Irq+0xf6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 804317c:	200d      	movs	r0, #13
 804317e:	f7fe ff3f 	bl	8042000 <SX1276Read>
 8043182:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8043186:	b2c9      	uxtb	r1, r1
 8043188:	200d      	movs	r0, #13
 804318a:	f7fe fee9 	bl	8041f60 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 804318e:	4837      	ldr	r0, [pc, #220]	; (804326c <SX1276OnDio0Irq+0x234>)
 8043190:	f00b f9d4 	bl	804e53c <TimerStart>
 8043194:	e7df      	b.n	8043156 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8043196:	2019      	movs	r0, #25
 8043198:	f7fe ff32 	bl	8042000 <SX1276Read>
 804319c:	b240      	sxtb	r0, r0
 804319e:	3002      	adds	r0, #2
 80431a0:	1080      	asrs	r0, r0, #2
 80431a2:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80431a6:	201a      	movs	r0, #26
 80431a8:	f7fe ff2a 	bl	8042000 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80431ac:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80431b0:	4931      	ldr	r1, [pc, #196]	; (8043278 <SX1276OnDio0Irq+0x240>)
 80431b2:	f340 120b 	sbfx	r2, r0, #4, #12
 80431b6:	2b00      	cmp	r3, #0
 80431b8:	b292      	uxth	r2, r2
 80431ba:	b280      	uxth	r0, r0
 80431bc:	da36      	bge.n	804322c <SX1276OnDio0Irq+0x1f4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80431be:	68b6      	ldr	r6, [r6, #8]
 80431c0:	b29b      	uxth	r3, r3
 80431c2:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80431c4:	bf8c      	ite	hi
 80431c6:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80431c8:	3ba4      	subls	r3, #164	; 0xa4
 80431ca:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80431cc:	4410      	add	r0, r2
 80431ce:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80431d2:	2013      	movs	r0, #19
 80431d4:	f7fe ff14 	bl	8042000 <SX1276Read>
 80431d8:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80431dc:	2010      	movs	r0, #16
 80431de:	f7fe ff0f 	bl	8042000 <SX1276Read>
 80431e2:	4601      	mov	r1, r0
 80431e4:	200d      	movs	r0, #13
 80431e6:	f7fe febb 	bl	8041f60 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80431ea:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80431ee:	4820      	ldr	r0, [pc, #128]	; (8043270 <SX1276OnDio0Irq+0x238>)
 80431f0:	f7ff ff1c 	bl	804302c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80431f4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80431f8:	b903      	cbnz	r3, 80431fc <SX1276OnDio0Irq+0x1c4>
                        SX1276.Settings.State = RF_IDLE;
 80431fa:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80431fc:	481a      	ldr	r0, [pc, #104]	; (8043268 <SX1276OnDio0Irq+0x230>)
 80431fe:	f00b fa0f 	bl	804e620 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8043202:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8043206:	2b00      	cmp	r3, #0
 8043208:	f43f af22 	beq.w	8043050 <SX1276OnDio0Irq+0x18>
 804320c:	689d      	ldr	r5, [r3, #8]
 804320e:	2d00      	cmp	r5, #0
 8043210:	f43f af1e 	beq.w	8043050 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8043214:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8043218:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 804321c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8043220:	4813      	ldr	r0, [pc, #76]	; (8043270 <SX1276OnDio0Irq+0x238>)
 8043222:	46ac      	mov	ip, r5
}
 8043224:	b002      	add	sp, #8
 8043226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 804322a:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804322c:	68b3      	ldr	r3, [r6, #8]
 804322e:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8043230:	bf8c      	ite	hi
 8043232:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8043234:	38a4      	subls	r0, #164	; 0xa4
 8043236:	e7c9      	b.n	80431cc <SX1276OnDio0Irq+0x194>
            TimerStop( &TxTimeoutTimer );
 8043238:	4810      	ldr	r0, [pc, #64]	; (804327c <SX1276OnDio0Irq+0x244>)
 804323a:	f00b f9f1 	bl	804e620 <TimerStop>
            switch( SX1276.Settings.Modem )
 804323e:	7973      	ldrb	r3, [r6, #5]
 8043240:	2b01      	cmp	r3, #1
 8043242:	d103      	bne.n	804324c <SX1276OnDio0Irq+0x214>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8043244:	2108      	movs	r1, #8
 8043246:	2012      	movs	r0, #18
 8043248:	f7fe fe8a 	bl	8041f60 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 804324c:	2300      	movs	r3, #0
 804324e:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8043250:	4b04      	ldr	r3, [pc, #16]	; (8043264 <SX1276OnDio0Irq+0x22c>)
 8043252:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8043256:	2b00      	cmp	r3, #0
 8043258:	f43f aefa 	beq.w	8043050 <SX1276OnDio0Irq+0x18>
 804325c:	681b      	ldr	r3, [r3, #0]
 804325e:	e71d      	b.n	804309c <SX1276OnDio0Irq+0x64>
 8043260:	20003ed8 	.word	0x20003ed8
 8043264:	200024b4 	.word	0x200024b4
 8043268:	20003f40 	.word	0x20003f40
 804326c:	20003ec0 	.word	0x20003ec0
 8043270:	200024b8 	.word	0x200024b8
 8043274:	20003f12 	.word	0x20003f12
 8043278:	1f4add40 	.word	0x1f4add40
 804327c:	20003ea8 	.word	0x20003ea8

08043280 <SX1276OnDio1Irq>:
{
 8043280:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8043282:	4c33      	ldr	r4, [pc, #204]	; (8043350 <SX1276OnDio1Irq+0xd0>)
 8043284:	7926      	ldrb	r6, [r4, #4]
 8043286:	2e01      	cmp	r6, #1
 8043288:	4625      	mov	r5, r4
 804328a:	d002      	beq.n	8043292 <SX1276OnDio1Irq+0x12>
 804328c:	2e02      	cmp	r6, #2
 804328e:	d045      	beq.n	804331c <SX1276OnDio1Irq+0x9c>
}
 8043290:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8043292:	7963      	ldrb	r3, [r4, #5]
 8043294:	b1ab      	cbz	r3, 80432c2 <SX1276OnDio1Irq+0x42>
 8043296:	2b01      	cmp	r3, #1
 8043298:	d1fa      	bne.n	8043290 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 804329a:	482e      	ldr	r0, [pc, #184]	; (8043354 <SX1276OnDio1Irq+0xd4>)
 804329c:	f00b f9c0 	bl	804e620 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80432a0:	2180      	movs	r1, #128	; 0x80
 80432a2:	2012      	movs	r0, #18
 80432a4:	f7fe fe5c 	bl	8041f60 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80432a8:	2300      	movs	r3, #0
 80432aa:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80432ac:	4b2a      	ldr	r3, [pc, #168]	; (8043358 <SX1276OnDio1Irq+0xd8>)
 80432ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80432b2:	2b00      	cmp	r3, #0
 80432b4:	d0ec      	beq.n	8043290 <SX1276OnDio1Irq+0x10>
 80432b6:	68db      	ldr	r3, [r3, #12]
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d0e9      	beq.n	8043290 <SX1276OnDio1Irq+0x10>
}
 80432bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 80432c0:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 80432c2:	4826      	ldr	r0, [pc, #152]	; (804335c <SX1276OnDio1Irq+0xdc>)
 80432c4:	f00b f9ac 	bl	804e620 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80432c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80432ca:	b94b      	cbnz	r3, 80432e0 <SX1276OnDio1Irq+0x60>
 80432cc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80432ce:	b93b      	cbnz	r3, 80432e0 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80432d0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80432d4:	b9c3      	cbnz	r3, 8043308 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80432d6:	4631      	mov	r1, r6
 80432d8:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80432dc:	f7ff fea6 	bl	804302c <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80432e0:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 80432e2:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 80432e4:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80432e8:	481d      	ldr	r0, [pc, #116]	; (8043360 <SX1276OnDio1Irq+0xe0>)
 80432ea:	1a89      	subs	r1, r1, r2
 80432ec:	4299      	cmp	r1, r3
 80432ee:	4410      	add	r0, r2
 80432f0:	db0f      	blt.n	8043312 <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80432f2:	1e59      	subs	r1, r3, #1
 80432f4:	b2c9      	uxtb	r1, r1
 80432f6:	f7ff fe99 	bl	804302c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80432fa:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80432fc:	1e5a      	subs	r2, r3, #1
 80432fe:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8043302:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043304:	87ab      	strh	r3, [r5, #60]	; 0x3c
 8043306:	e7c3      	b.n	8043290 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8043308:	2032      	movs	r0, #50	; 0x32
 804330a:	f7fe fe79 	bl	8042000 <SX1276Read>
 804330e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8043310:	e7e6      	b.n	80432e0 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043312:	b2c9      	uxtb	r1, r1
 8043314:	f7ff fe8a 	bl	804302c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043318:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 804331a:	e7f3      	b.n	8043304 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 804331c:	7963      	ldrb	r3, [r4, #5]
 804331e:	2b00      	cmp	r3, #0
 8043320:	d1b6      	bne.n	8043290 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8043322:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8043324:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8043326:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 804332a:	480d      	ldr	r0, [pc, #52]	; (8043360 <SX1276OnDio1Irq+0xe0>)
 804332c:	1a9b      	subs	r3, r3, r2
 804332e:	428b      	cmp	r3, r1
 8043330:	4410      	add	r0, r2
 8043332:	dd07      	ble.n	8043344 <SX1276OnDio1Irq+0xc4>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8043334:	f7ff fdfc 	bl	8042f30 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8043338:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 804333c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 804333e:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8043340:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8043342:	e7a5      	b.n	8043290 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043344:	b2d9      	uxtb	r1, r3
 8043346:	f7ff fdf3 	bl	8042f30 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 804334a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 804334c:	e7f8      	b.n	8043340 <SX1276OnDio1Irq+0xc0>
 804334e:	bf00      	nop
 8043350:	20003ed8 	.word	0x20003ed8
 8043354:	20003f40 	.word	0x20003f40
 8043358:	200024b4 	.word	0x200024b4
 804335c:	20003ec0 	.word	0x20003ec0
 8043360:	200024b8 	.word	0x200024b8

08043364 <SX1276SetMaxPayloadLength>:
{
 8043364:	b538      	push	{r3, r4, r5, lr}
 8043366:	4605      	mov	r5, r0
 8043368:	460c      	mov	r4, r1
    SX1276SetModem( modem );
 804336a:	f7ff f9a3 	bl	80426b4 <SX1276SetModem>
    switch( modem )
 804336e:	b115      	cbz	r5, 8043376 <SX1276SetMaxPayloadLength+0x12>
 8043370:	2d01      	cmp	r5, #1
 8043372:	d00b      	beq.n	804338c <SX1276SetMaxPayloadLength+0x28>
}
 8043374:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8043376:	4b07      	ldr	r3, [pc, #28]	; (8043394 <SX1276SetMaxPayloadLength+0x30>)
 8043378:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 804337c:	2b00      	cmp	r3, #0
 804337e:	d1f9      	bne.n	8043374 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8043380:	4621      	mov	r1, r4
 8043382:	2032      	movs	r0, #50	; 0x32
}
 8043384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8043388:	f7fe bdea 	b.w	8041f60 <SX1276Write>
 804338c:	4621      	mov	r1, r4
 804338e:	2023      	movs	r0, #35	; 0x23
 8043390:	e7f8      	b.n	8043384 <SX1276SetMaxPayloadLength+0x20>
 8043392:	bf00      	nop
 8043394:	20003ed8 	.word	0x20003ed8

08043398 <SX1276SetPublicNetwork>:
{
 8043398:	b510      	push	{r4, lr}
 804339a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 804339c:	2001      	movs	r0, #1
 804339e:	f7ff f989 	bl	80426b4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80433a2:	4b06      	ldr	r3, [pc, #24]	; (80433bc <SX1276SetPublicNetwork+0x24>)
 80433a4:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 80433a8:	b12c      	cbz	r4, 80433b6 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80433aa:	2134      	movs	r1, #52	; 0x34
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80433ac:	2039      	movs	r0, #57	; 0x39
}
 80433ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80433b2:	f7fe bdd5 	b.w	8041f60 <SX1276Write>
 80433b6:	2112      	movs	r1, #18
 80433b8:	e7f8      	b.n	80433ac <SX1276SetPublicNetwork+0x14>
 80433ba:	bf00      	nop
 80433bc:	20003ed8 	.word	0x20003ed8

080433c0 <SX1276OnTimeoutIrq>:
{
 80433c0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80433c2:	4c2c      	ldr	r4, [pc, #176]	; (8043474 <SX1276OnTimeoutIrq+0xb4>)
 80433c4:	7923      	ldrb	r3, [r4, #4]
 80433c6:	2b01      	cmp	r3, #1
 80433c8:	4625      	mov	r5, r4
 80433ca:	d002      	beq.n	80433d2 <SX1276OnTimeoutIrq+0x12>
 80433cc:	2b02      	cmp	r3, #2
 80433ce:	d02c      	beq.n	804342a <SX1276OnTimeoutIrq+0x6a>
}
 80433d0:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80433d2:	7963      	ldrb	r3, [r4, #5]
 80433d4:	b9cb      	cbnz	r3, 804340a <SX1276OnTimeoutIrq+0x4a>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80433d6:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80433d8:	210b      	movs	r1, #11
 80433da:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80433dc:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80433de:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80433e0:	f7fe fdbe 	bl	8041f60 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80433e4:	2110      	movs	r1, #16
 80433e6:	203f      	movs	r0, #63	; 0x3f
 80433e8:	f7fe fdba 	bl	8041f60 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80433ec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80433f0:	b1b3      	cbz	r3, 8043420 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80433f2:	200d      	movs	r0, #13
 80433f4:	f7fe fe04 	bl	8042000 <SX1276Read>
 80433f8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80433fc:	b2c9      	uxtb	r1, r1
 80433fe:	200d      	movs	r0, #13
 8043400:	f7fe fdae 	bl	8041f60 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8043404:	481c      	ldr	r0, [pc, #112]	; (8043478 <SX1276OnTimeoutIrq+0xb8>)
 8043406:	f00b f899 	bl	804e53c <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804340a:	4b1c      	ldr	r3, [pc, #112]	; (804347c <SX1276OnTimeoutIrq+0xbc>)
 804340c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8043410:	2b00      	cmp	r3, #0
 8043412:	d0dd      	beq.n	80433d0 <SX1276OnTimeoutIrq+0x10>
 8043414:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8043416:	2b00      	cmp	r3, #0
 8043418:	d0da      	beq.n	80433d0 <SX1276OnTimeoutIrq+0x10>
}
 804341a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 804341e:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8043420:	4815      	ldr	r0, [pc, #84]	; (8043478 <SX1276OnTimeoutIrq+0xb8>)
                SX1276.Settings.State = RF_IDLE;
 8043422:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8043424:	f00b f8fc 	bl	804e620 <TimerStop>
 8043428:	e7ef      	b.n	804340a <SX1276OnTimeoutIrq+0x4a>
        SX1276Reset( );
 804342a:	f7fe fd51 	bl	8041ed0 <SX1276Reset>
 804342e:	4c14      	ldr	r4, [pc, #80]	; (8043480 <SX1276OnTimeoutIrq+0xc0>)
        RxChainCalibration( );
 8043430:	f7fe fdf2 	bl	8042018 <RxChainCalibration>
 8043434:	f7fe ff5e 	bl	80422f4 <SX1276SetOpMode.part.2>
 8043438:	f104 0630 	add.w	r6, r4, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
 804343c:	7820      	ldrb	r0, [r4, #0]
 804343e:	f7ff f939 	bl	80426b4 <SX1276SetModem>
 8043442:	3403      	adds	r4, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8043444:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8043448:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 804344c:	f7fe fd88 	bl	8041f60 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8043450:	42b4      	cmp	r4, r6
 8043452:	d1f3      	bne.n	804343c <SX1276OnTimeoutIrq+0x7c>
        SX1276SetModem( MODEM_FSK );
 8043454:	2000      	movs	r0, #0
 8043456:	f7ff f92d 	bl	80426b4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 804345a:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 804345e:	f7ff ff9b 	bl	8043398 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8043462:	2300      	movs	r3, #0
 8043464:	712b      	strb	r3, [r5, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8043466:	4b05      	ldr	r3, [pc, #20]	; (804347c <SX1276OnTimeoutIrq+0xbc>)
 8043468:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804346c:	2b00      	cmp	r3, #0
 804346e:	d0af      	beq.n	80433d0 <SX1276OnTimeoutIrq+0x10>
 8043470:	685b      	ldr	r3, [r3, #4]
 8043472:	e7d0      	b.n	8043416 <SX1276OnTimeoutIrq+0x56>
 8043474:	20003ed8 	.word	0x20003ed8
 8043478:	20003ec0 	.word	0x20003ec0
 804347c:	200024b4 	.word	0x200024b4
 8043480:	08053da0 	.word	0x08053da0

08043484 <SX1276GetWakeupTime>:
{
 8043484:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8043486:	4b03      	ldr	r3, [pc, #12]	; (8043494 <SX1276GetWakeupTime+0x10>)
 8043488:	681b      	ldr	r3, [r3, #0]
 804348a:	685b      	ldr	r3, [r3, #4]
 804348c:	4798      	blx	r3
}
 804348e:	3002      	adds	r0, #2
 8043490:	bd08      	pop	{r3, pc}
 8043492:	bf00      	nop
 8043494:	200024b4 	.word	0x200024b4

08043498 <HAL_TIM_PeriodElapsedCallback>:
#include "station.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2)
 8043498:	6803      	ldr	r3, [r0, #0]
 804349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804349e:	d10b      	bne.n	80434b8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		// Quando estourar o timer de 1 segundo exporta o numero de ciclos
		count_velo = aux_count_velo;
 80434a0:	4b09      	ldr	r3, [pc, #36]	; (80434c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80434a2:	4a0a      	ldr	r2, [pc, #40]	; (80434cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80434a4:	6819      	ldr	r1, [r3, #0]
 80434a6:	6011      	str	r1, [r2, #0]
		aux_count_velo = 0;
 80434a8:	2200      	movs	r2, #0
 80434aa:	601a      	str	r2, [r3, #0]
		flagsStation.pluviometer = 1;
 80434ac:	4a08      	ldr	r2, [pc, #32]	; (80434d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80434ae:	7813      	ldrb	r3, [r2, #0]
 80434b0:	f043 0301 	orr.w	r3, r3, #1
	}
	if (htim->Instance == TIM3)
	{
		//Timeouts
		flagsStation.read_sensors=1;
 80434b4:	7013      	strb	r3, [r2, #0]
	}
}
 80434b6:	4770      	bx	lr
	if (htim->Instance == TIM3)
 80434b8:	4a06      	ldr	r2, [pc, #24]	; (80434d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80434ba:	4293      	cmp	r3, r2
 80434bc:	d1fb      	bne.n	80434b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		flagsStation.read_sensors=1;
 80434be:	4a04      	ldr	r2, [pc, #16]	; (80434d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80434c0:	7813      	ldrb	r3, [r2, #0]
 80434c2:	f043 0310 	orr.w	r3, r3, #16
 80434c6:	e7f5      	b.n	80434b4 <HAL_TIM_PeriodElapsedCallback+0x1c>
 80434c8:	200024ac 	.word	0x200024ac
 80434cc:	200024b0 	.word	0x200024b0
 80434d0:	20003e64 	.word	0x20003e64
 80434d4:	40000400 	.word	0x40000400

080434d8 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80434d8:	2000      	movs	r0, #0
 80434da:	4770      	bx	lr

080434dc <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 80434dc:	4770      	bx	lr

080434de <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80434de:	2001      	movs	r0, #1
 80434e0:	4770      	bx	lr
	...

080434e4 <SX1276IoInit>:
{
 80434e4:	b510      	push	{r4, lr}
 80434e6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80434e8:	2214      	movs	r2, #20
 80434ea:	2100      	movs	r1, #0
 80434ec:	a801      	add	r0, sp, #4
 80434ee:	f00d fb74 	bl	8050bda <memset>
  SX1276BoardInit( &BoardCallbacks );
 80434f2:	4811      	ldr	r0, [pc, #68]	; (8043538 <SX1276IoInit+0x54>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80434f4:	4c11      	ldr	r4, [pc, #68]	; (804353c <SX1276IoInit+0x58>)
  SX1276BoardInit( &BoardCallbacks );
 80434f6:	f7fe fcdf 	bl	8041eb8 <SX1276BoardInit>
  initStruct.Pull = GPIO_PULLDOWN;
 80434fa:	4a11      	ldr	r2, [pc, #68]	; (8043540 <SX1276IoInit+0x5c>)
 80434fc:	2302      	movs	r3, #2
 80434fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8043502:	4620      	mov	r0, r4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8043504:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8043506:	aa01      	add	r2, sp, #4
 8043508:	f44f 7100 	mov.w	r1, #512	; 0x200
  initStruct.Speed = GPIO_SPEED_HIGH;
 804350c:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 804350e:	f00b fbfd 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8043512:	aa01      	add	r2, sp, #4
 8043514:	4620      	mov	r0, r4
 8043516:	f44f 7180 	mov.w	r1, #256	; 0x100
 804351a:	f00b fbf7 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 804351e:	aa01      	add	r2, sp, #4
 8043520:	4620      	mov	r0, r4
 8043522:	2180      	movs	r1, #128	; 0x80
 8043524:	f00b fbf2 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8043528:	aa01      	add	r2, sp, #4
 804352a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 804352e:	4620      	mov	r0, r4
 8043530:	f00b fbec 	bl	804ed0c <HW_GPIO_Init>
}
 8043534:	b006      	add	sp, #24
 8043536:	bd10      	pop	{r4, pc}
 8043538:	20001030 	.word	0x20001030
 804353c:	40021000 	.word	0x40021000
 8043540:	10110000 	.word	0x10110000

08043544 <SX1276IoDeInit>:
{
 8043544:	b510      	push	{r4, lr}
 8043546:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8043548:	2214      	movs	r2, #20
 804354a:	2100      	movs	r1, #0
 804354c:	a801      	add	r0, sp, #4
 804354e:	f00d fb44 	bl	8050bda <memset>
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8043552:	4c0f      	ldr	r4, [pc, #60]	; (8043590 <SX1276IoDeInit+0x4c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8043554:	4a0f      	ldr	r2, [pc, #60]	; (8043594 <SX1276IoDeInit+0x50>)
 8043556:	2302      	movs	r3, #2
 8043558:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 804355c:	4620      	mov	r0, r4
 804355e:	aa01      	add	r2, sp, #4
 8043560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8043564:	f00b fbd2 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8043568:	aa01      	add	r2, sp, #4
 804356a:	4620      	mov	r0, r4
 804356c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8043570:	f00b fbcc 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8043574:	aa01      	add	r2, sp, #4
 8043576:	4620      	mov	r0, r4
 8043578:	2180      	movs	r1, #128	; 0x80
 804357a:	f00b fbc7 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 804357e:	aa01      	add	r2, sp, #4
 8043580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8043584:	4620      	mov	r0, r4
 8043586:	f00b fbc1 	bl	804ed0c <HW_GPIO_Init>
}
 804358a:	b006      	add	sp, #24
 804358c:	bd10      	pop	{r4, pc}
 804358e:	bf00      	nop
 8043590:	40021000 	.word	0x40021000
 8043594:	10110000 	.word	0x10110000

08043598 <SX1276IoIrqInit>:
{
 8043598:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 804359a:	4c0f      	ldr	r4, [pc, #60]	; (80435d8 <SX1276IoIrqInit+0x40>)
 804359c:	6803      	ldr	r3, [r0, #0]
{
 804359e:	4605      	mov	r5, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80435a0:	2200      	movs	r2, #0
 80435a2:	4620      	mov	r0, r4
 80435a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80435a8:	f00b fc0a 	bl	804edc0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80435ac:	686b      	ldr	r3, [r5, #4]
 80435ae:	4620      	mov	r0, r4
 80435b0:	2200      	movs	r2, #0
 80435b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80435b6:	f00b fc03 	bl	804edc0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80435ba:	68ab      	ldr	r3, [r5, #8]
 80435bc:	4620      	mov	r0, r4
 80435be:	2200      	movs	r2, #0
 80435c0:	2180      	movs	r1, #128	; 0x80
 80435c2:	f00b fbfd 	bl	804edc0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80435c6:	68eb      	ldr	r3, [r5, #12]
 80435c8:	4620      	mov	r0, r4
 80435ca:	2200      	movs	r2, #0
 80435cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 80435d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80435d4:	f00b bbf4 	b.w	804edc0 <HW_GPIO_SetIrq>
 80435d8:	40021000 	.word	0x40021000

080435dc <SX1276SetRfTxPower>:
{
 80435dc:	b570      	push	{r4, r5, r6, lr}
 80435de:	4606      	mov	r6, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80435e0:	2009      	movs	r0, #9
 80435e2:	f7fe fd0d 	bl	8042000 <SX1276Read>
 80435e6:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 80435e8:	204d      	movs	r0, #77	; 0x4d
 80435ea:	f7fe fd09 	bl	8042000 <SX1276Read>
        if( power > 17 )
 80435ee:	2e11      	cmp	r6, #17
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80435f0:	bfcb      	itete	gt
 80435f2:	f040 0507 	orrgt.w	r5, r0, #7
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80435f6:	f000 05f8 	andle.w	r5, r0, #248	; 0xf8
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80435fa:	b2ed      	uxtbgt	r5, r5
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80435fc:	f045 0504 	orrle.w	r5, r5, #4
    paConfig |= RF_PACONFIG_PASELECT_PABOOST;
 8043600:	f064 047f 	orn	r4, r4, #127	; 0x7f
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8043604:	f005 0307 	and.w	r3, r5, #7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8043608:	b264      	sxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 804360a:	2b07      	cmp	r3, #7
 804360c:	f024 040f 	bic.w	r4, r4, #15
 8043610:	d115      	bne.n	804363e <SX1276SetRfTxPower+0x62>
            if( power < 5 )
 8043612:	2e04      	cmp	r6, #4
 8043614:	dd11      	ble.n	804363a <SX1276SetRfTxPower+0x5e>
            if( power > 20 )
 8043616:	2e14      	cmp	r6, #20
 8043618:	dd03      	ble.n	8043622 <SX1276SetRfTxPower+0x46>
            	PRINTF("Full Power 20\r\n");
 804361a:	480d      	ldr	r0, [pc, #52]	; (8043650 <SX1276SetRfTxPower+0x74>)
 804361c:	f00b f88a 	bl	804e734 <TraceSend>
                power = 20;
 8043620:	2614      	movs	r6, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8043622:	1f71      	subs	r1, r6, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8043624:	430c      	orrs	r4, r1
 8043626:	b2e1      	uxtb	r1, r4
    SX1276Write( REG_PACONFIG, paConfig );
 8043628:	2009      	movs	r0, #9
 804362a:	f7fe fc99 	bl	8041f60 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 804362e:	4629      	mov	r1, r5
 8043630:	204d      	movs	r0, #77	; 0x4d
}
 8043632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276Write( REG_PADAC, paDac );
 8043636:	f7fe bc93 	b.w	8041f60 <SX1276Write>
                power = 5;
 804363a:	2605      	movs	r6, #5
 804363c:	e7f1      	b.n	8043622 <SX1276SetRfTxPower+0x46>
 804363e:	2e11      	cmp	r6, #17
 8043640:	bfa8      	it	ge
 8043642:	2611      	movge	r6, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8043644:	2e02      	cmp	r6, #2
 8043646:	bfb8      	it	lt
 8043648:	2602      	movlt	r6, #2
 804364a:	1eb1      	subs	r1, r6, #2
 804364c:	e7ea      	b.n	8043624 <SX1276SetRfTxPower+0x48>
 804364e:	bf00      	nop
 8043650:	08054305 	.word	0x08054305

08043654 <SX1276SetAntSwLowPower>:
{
 8043654:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 8043656:	4b14      	ldr	r3, [pc, #80]	; (80436a8 <SX1276SetAntSwLowPower+0x54>)
 8043658:	781a      	ldrb	r2, [r3, #0]
 804365a:	4282      	cmp	r2, r0
{
 804365c:	b086      	sub	sp, #24
    if( RadioIsActive != status )
 804365e:	d017      	beq.n	8043690 <SX1276SetAntSwLowPower+0x3c>
        RadioIsActive = status;
 8043660:	7018      	strb	r0, [r3, #0]
  GPIO_InitTypeDef initStruct={0};
 8043662:	2214      	movs	r2, #20
        if( status == false )
 8043664:	b9b0      	cbnz	r0, 8043694 <SX1276SetAntSwLowPower+0x40>
  GPIO_InitTypeDef initStruct={0};
 8043666:	4601      	mov	r1, r0
 8043668:	a801      	add	r0, sp, #4
 804366a:	f00d fab6 	bl	8050bda <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 804366e:	2301      	movs	r3, #1
 8043670:	9302      	str	r3, [sp, #8]
  PRINTF("Antenna Init\r\n");
 8043672:	480e      	ldr	r0, [pc, #56]	; (80436ac <SX1276SetAntSwLowPower+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 8043674:	2303      	movs	r3, #3
 8043676:	9304      	str	r3, [sp, #16]
  PRINTF("Antenna Init\r\n");
 8043678:	f00b f85c 	bl	804e734 <TraceSend>
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 804367c:	aa01      	add	r2, sp, #4
 804367e:	2102      	movs	r1, #2
 8043680:	480b      	ldr	r0, [pc, #44]	; (80436b0 <SX1276SetAntSwLowPower+0x5c>)
 8043682:	f00b fb43 	bl	804ed0c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8043686:	2200      	movs	r2, #0
 8043688:	2102      	movs	r1, #2
 804368a:	4809      	ldr	r0, [pc, #36]	; (80436b0 <SX1276SetAntSwLowPower+0x5c>)
 804368c:	f00b fbc0 	bl	804ee10 <HW_GPIO_Write>
}
 8043690:	b006      	add	sp, #24
 8043692:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8043694:	2100      	movs	r1, #0
 8043696:	a801      	add	r0, sp, #4
 8043698:	f00d fa9f 	bl	8050bda <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 804369c:	2301      	movs	r3, #1
 804369e:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80436a0:	2303      	movs	r3, #3
 80436a2:	9304      	str	r3, [sp, #16]
 80436a4:	e7ea      	b.n	804367c <SX1276SetAntSwLowPower+0x28>
 80436a6:	bf00      	nop
 80436a8:	200025bc 	.word	0x200025bc
 80436ac:	08054315 	.word	0x08054315
 80436b0:	40020800 	.word	0x40020800

080436b4 <SX1276SetAntSw>:
{
 80436b4:	b510      	push	{r4, lr}
	PRINTF("opMode = %d\r\n", opMode);
 80436b6:	4601      	mov	r1, r0
{
 80436b8:	4604      	mov	r4, r0
	PRINTF("opMode = %d\r\n", opMode);
 80436ba:	4806      	ldr	r0, [pc, #24]	; (80436d4 <SX1276SetAntSw+0x20>)
 80436bc:	f00b f83a 	bl	804e734 <TraceSend>
    switch( opMode )
 80436c0:	2c03      	cmp	r4, #3
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 80436c2:	bf0c      	ite	eq
 80436c4:	2201      	moveq	r2, #1
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80436c6:	2200      	movne	r2, #0
 80436c8:	2102      	movs	r1, #2
 80436ca:	4803      	ldr	r0, [pc, #12]	; (80436d8 <SX1276SetAntSw+0x24>)
}
 80436cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80436d0:	f00b bb9e 	b.w	804ee10 <HW_GPIO_Write>
 80436d4:	08054324 	.word	0x08054324
 80436d8:	40020800 	.word	0x40020800

080436dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80436dc:	490e      	ldr	r1, [pc, #56]	; (8043718 <SystemInit+0x3c>)
 80436de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80436e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80436e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80436ea:	4b0c      	ldr	r3, [pc, #48]	; (804371c <SystemInit+0x40>)
 80436ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80436ee:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80436f0:	f042 0201 	orr.w	r2, r2, #1
 80436f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80436f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80436f8:	681a      	ldr	r2, [r3, #0]
 80436fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80436fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8043702:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8043704:	4a06      	ldr	r2, [pc, #24]	; (8043720 <SystemInit+0x44>)
 8043706:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8043708:	681a      	ldr	r2, [r3, #0]
 804370a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 804370e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8043710:	60d8      	str	r0, [r3, #12]
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  SCB->VTOR = INTVECT_START;
 8043712:	4b04      	ldr	r3, [pc, #16]	; (8043724 <SystemInit+0x48>)
 8043714:	608b      	str	r3, [r1, #8]
}
 8043716:	4770      	bx	lr
 8043718:	e000ed00 	.word	0xe000ed00
 804371c:	40023800 	.word	0x40023800
 8043720:	24003010 	.word	0x24003010
 8043724:	08040200 	.word	0x08040200

08043728 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8043728:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 804372a:	4613      	mov	r3, r2
 804372c:	460a      	mov	r2, r1
 804372e:	4601      	mov	r1, r0
 8043730:	4803      	ldr	r0, [pc, #12]	; (8043740 <BSP_SD_ReadBlocks_DMA+0x18>)
 8043732:	f002 fbb9 	bl	8045ea8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8043736:	3000      	adds	r0, #0
 8043738:	bf18      	it	ne
 804373a:	2001      	movne	r0, #1
 804373c:	bd08      	pop	{r3, pc}
 804373e:	bf00      	nop
 8043740:	2000624c 	.word	0x2000624c

08043744 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8043744:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8043746:	4613      	mov	r3, r2
 8043748:	460a      	mov	r2, r1
 804374a:	4601      	mov	r1, r0
 804374c:	4803      	ldr	r0, [pc, #12]	; (804375c <BSP_SD_WriteBlocks_DMA+0x18>)
 804374e:	f002 fc41 	bl	8045fd4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8043752:	3000      	adds	r0, #0
 8043754:	bf18      	it	ne
 8043756:	2001      	movne	r0, #1
 8043758:	bd08      	pop	{r3, pc}
 804375a:	bf00      	nop
 804375c:	2000624c 	.word	0x2000624c

08043760 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8043760:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8043762:	4803      	ldr	r0, [pc, #12]	; (8043770 <BSP_SD_GetCardState+0x10>)
 8043764:	f002 ff4c 	bl	8046600 <HAL_SD_GetCardState>
}
 8043768:	3804      	subs	r0, #4
 804376a:	bf18      	it	ne
 804376c:	2001      	movne	r0, #1
 804376e:	bd08      	pop	{r3, pc}
 8043770:	2000624c 	.word	0x2000624c

08043774 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8043774:	4601      	mov	r1, r0
 8043776:	4801      	ldr	r0, [pc, #4]	; (804377c <BSP_SD_GetCardInfo+0x8>)
 8043778:	f002 beab 	b.w	80464d2 <HAL_SD_GetCardInfo>
 804377c:	2000624c 	.word	0x2000624c

08043780 <BSP_SD_AbortCallback>:
 8043780:	4770      	bx	lr

08043782 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8043782:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8043784:	f7ff fffc 	bl	8043780 <BSP_SD_AbortCallback>
}
 8043788:	bd08      	pop	{r3, pc}

0804378a <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 804378a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 804378c:	f000 f90a 	bl	80439a4 <BSP_SD_WriteCpltCallback>
}
 8043790:	bd08      	pop	{r3, pc}

08043792 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8043792:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8043794:	f000 f90c 	bl	80439b0 <BSP_SD_ReadCpltCallback>
}
 8043798:	bd08      	pop	{r3, pc}

0804379a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 804379a:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 804379c:	2301      	movs	r3, #1
 804379e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80437a2:	f000 f82d 	bl	8043800 <BSP_PlatformIsDetected>
 80437a6:	b908      	cbnz	r0, 80437ac <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80437a8:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80437ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80437b0:	b003      	add	sp, #12
 80437b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080437b8 <BSP_SD_Init>:
{
 80437b8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80437ba:	f7ff ffee 	bl	804379a <BSP_SD_IsDetected>
 80437be:	2801      	cmp	r0, #1
 80437c0:	d10c      	bne.n	80437dc <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 80437c2:	4807      	ldr	r0, [pc, #28]	; (80437e0 <BSP_SD_Init+0x28>)
 80437c4:	f002 fe6a 	bl	804649c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80437c8:	b938      	cbnz	r0, 80437da <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80437ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80437ce:	4804      	ldr	r0, [pc, #16]	; (80437e0 <BSP_SD_Init+0x28>)
 80437d0:	f002 fe92 	bl	80464f8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 80437d4:	3000      	adds	r0, #0
 80437d6:	bf18      	it	ne
 80437d8:	2001      	movne	r0, #1
}
 80437da:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 80437dc:	2001      	movs	r0, #1
 80437de:	e7fc      	b.n	80437da <BSP_SD_Init+0x22>
 80437e0:	2000624c 	.word	0x2000624c

080437e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80437e4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80437e6:	4903      	ldr	r1, [pc, #12]	; (80437f4 <MX_FATFS_Init+0x10>)
 80437e8:	4803      	ldr	r0, [pc, #12]	; (80437f8 <MX_FATFS_Init+0x14>)
 80437ea:	f004 fe29 	bl	8048440 <FATFS_LinkDriver>
 80437ee:	4b03      	ldr	r3, [pc, #12]	; (80437fc <MX_FATFS_Init+0x18>)
 80437f0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80437f2:	bd08      	pop	{r3, pc}
 80437f4:	20003f59 	.word	0x20003f59
 80437f8:	08053e5c 	.word	0x08053e5c
 80437fc:	20003f58 	.word	0x20003f58

08043800 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8043800:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8043802:	2180      	movs	r1, #128	; 0x80
 8043804:	4803      	ldr	r0, [pc, #12]	; (8043814 <BSP_PlatformIsDetected+0x14>)
 8043806:	f001 f89d 	bl	8044944 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 804380a:	fab0 f080 	clz	r0, r0
 804380e:	0940      	lsrs	r0, r0, #5
 8043810:	bd08      	pop	{r3, pc}
 8043812:	bf00      	nop
 8043814:	40020800 	.word	0x40020800

08043818 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8043818:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 804381a:	4c06      	ldr	r4, [pc, #24]	; (8043834 <SD_CheckStatus.isra.0+0x1c>)
 804381c:	2301      	movs	r3, #1
 804381e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8043820:	f7ff ff9e 	bl	8043760 <BSP_SD_GetCardState>
 8043824:	4623      	mov	r3, r4
 8043826:	b918      	cbnz	r0, 8043830 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8043828:	7822      	ldrb	r2, [r4, #0]
 804382a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 804382e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8043830:	7818      	ldrb	r0, [r3, #0]
}
 8043832:	bd10      	pop	{r4, pc}
 8043834:	2000104c 	.word	0x2000104c

08043838 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8043838:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 804383a:	f7ff ffbd 	bl	80437b8 <BSP_SD_Init>
 804383e:	4c03      	ldr	r4, [pc, #12]	; (804384c <SD_initialize+0x14>)
 8043840:	b910      	cbnz	r0, 8043848 <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8043842:	f7ff ffe9 	bl	8043818 <SD_CheckStatus.isra.0>
 8043846:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8043848:	7820      	ldrb	r0, [r4, #0]
}
 804384a:	bd10      	pop	{r4, pc}
 804384c:	2000104c 	.word	0x2000104c

08043850 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8043850:	f7ff bfe2 	b.w	8043818 <SD_CheckStatus.isra.0>

08043854 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8043854:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8043856:	4b12      	ldr	r3, [pc, #72]	; (80438a0 <SD_ioctl+0x4c>)
 8043858:	781b      	ldrb	r3, [r3, #0]
 804385a:	07db      	lsls	r3, r3, #31
{
 804385c:	b088      	sub	sp, #32
 804385e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8043860:	d41b      	bmi.n	804389a <SD_ioctl+0x46>

  switch (cmd)
 8043862:	2903      	cmp	r1, #3
 8043864:	d803      	bhi.n	804386e <SD_ioctl+0x1a>
 8043866:	e8df f001 	tbb	[pc, r1]
 804386a:	0510      	.short	0x0510
 804386c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 804386e:	2004      	movs	r0, #4
  }

  return res;
}
 8043870:	b008      	add	sp, #32
 8043872:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8043874:	4668      	mov	r0, sp
 8043876:	f7ff ff7d 	bl	8043774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 804387a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 804387c:	6023      	str	r3, [r4, #0]
 804387e:	e004      	b.n	804388a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8043880:	4668      	mov	r0, sp
 8043882:	f7ff ff77 	bl	8043774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8043886:	9b07      	ldr	r3, [sp, #28]
 8043888:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 804388a:	2000      	movs	r0, #0
 804388c:	e7f0      	b.n	8043870 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 804388e:	4668      	mov	r0, sp
 8043890:	f7ff ff70 	bl	8043774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8043894:	9b07      	ldr	r3, [sp, #28]
 8043896:	0a5b      	lsrs	r3, r3, #9
 8043898:	e7f0      	b.n	804387c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 804389a:	2003      	movs	r0, #3
 804389c:	e7e8      	b.n	8043870 <SD_ioctl+0x1c>
 804389e:	bf00      	nop
 80438a0:	2000104c 	.word	0x2000104c

080438a4 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 80438a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 80438a6:	f000 f8af 	bl	8043a08 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 80438aa:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 80438ae:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 80438b0:	f000 f8aa 	bl	8043a08 <HAL_GetTick>
 80438b4:	1b40      	subs	r0, r0, r5
 80438b6:	42a0      	cmp	r0, r4
 80438b8:	d902      	bls.n	80438c0 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 80438ba:	f04f 30ff 	mov.w	r0, #4294967295
 80438be:	e003      	b.n	80438c8 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80438c0:	f7ff ff4e 	bl	8043760 <BSP_SD_GetCardState>
 80438c4:	2800      	cmp	r0, #0
 80438c6:	d1f3      	bne.n	80438b0 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 80438c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080438cc <SD_write>:
{
 80438cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 80438ce:	4c19      	ldr	r4, [pc, #100]	; (8043934 <SD_write+0x68>)
{
 80438d0:	461f      	mov	r7, r3
   WriteStatus = 0;
 80438d2:	2300      	movs	r3, #0
{
 80438d4:	460d      	mov	r5, r1
 80438d6:	4616      	mov	r6, r2
   WriteStatus = 0;
 80438d8:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80438da:	f7ff ffe3 	bl	80438a4 <SD_CheckStatusWithTimeout.constprop.4>
 80438de:	2800      	cmp	r0, #0
 80438e0:	da01      	bge.n	80438e6 <SD_write+0x1a>
    return res;
 80438e2:	2001      	movs	r0, #1
}
 80438e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80438e6:	463a      	mov	r2, r7
 80438e8:	4631      	mov	r1, r6
 80438ea:	4628      	mov	r0, r5
 80438ec:	f7ff ff2a 	bl	8043744 <BSP_SD_WriteBlocks_DMA>
 80438f0:	2800      	cmp	r0, #0
 80438f2:	d1f6      	bne.n	80438e2 <SD_write+0x16>
      timeout = HAL_GetTick();
 80438f4:	f000 f888 	bl	8043a08 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80438f8:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 80438fc:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80438fe:	6823      	ldr	r3, [r4, #0]
 8043900:	b923      	cbnz	r3, 804390c <SD_write+0x40>
 8043902:	f000 f881 	bl	8043a08 <HAL_GetTick>
 8043906:	1b80      	subs	r0, r0, r6
 8043908:	42a8      	cmp	r0, r5
 804390a:	d9f8      	bls.n	80438fe <SD_write+0x32>
      if (WriteStatus == 0)
 804390c:	6823      	ldr	r3, [r4, #0]
 804390e:	2b00      	cmp	r3, #0
 8043910:	d0e7      	beq.n	80438e2 <SD_write+0x16>
        WriteStatus = 0;
 8043912:	2300      	movs	r3, #0
 8043914:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8043916:	f000 f877 	bl	8043a08 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 804391a:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 804391e:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8043920:	f000 f872 	bl	8043a08 <HAL_GetTick>
 8043924:	1b40      	subs	r0, r0, r5
 8043926:	42a0      	cmp	r0, r4
 8043928:	d8db      	bhi.n	80438e2 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 804392a:	f7ff ff19 	bl	8043760 <BSP_SD_GetCardState>
 804392e:	2800      	cmp	r0, #0
 8043930:	d1f6      	bne.n	8043920 <SD_write+0x54>
 8043932:	e7d7      	b.n	80438e4 <SD_write+0x18>
 8043934:	200025c0 	.word	0x200025c0

08043938 <SD_read>:
{
 8043938:	b570      	push	{r4, r5, r6, lr}
 804393a:	460c      	mov	r4, r1
 804393c:	4615      	mov	r5, r2
 804393e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8043940:	f7ff ffb0 	bl	80438a4 <SD_CheckStatusWithTimeout.constprop.4>
 8043944:	2800      	cmp	r0, #0
 8043946:	da01      	bge.n	804394c <SD_read+0x14>
    return res;
 8043948:	2001      	movs	r0, #1
}
 804394a:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 804394c:	4632      	mov	r2, r6
 804394e:	4629      	mov	r1, r5
 8043950:	4620      	mov	r0, r4
 8043952:	f7ff fee9 	bl	8043728 <BSP_SD_ReadBlocks_DMA>
 8043956:	2800      	cmp	r0, #0
 8043958:	d1f6      	bne.n	8043948 <SD_read+0x10>
      ReadStatus = 0;
 804395a:	4c11      	ldr	r4, [pc, #68]	; (80439a0 <SD_read+0x68>)
 804395c:	6060      	str	r0, [r4, #4]
      timeout = HAL_GetTick();
 804395e:	f000 f853 	bl	8043a08 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8043962:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8043966:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8043968:	6863      	ldr	r3, [r4, #4]
 804396a:	b923      	cbnz	r3, 8043976 <SD_read+0x3e>
 804396c:	f000 f84c 	bl	8043a08 <HAL_GetTick>
 8043970:	1b80      	subs	r0, r0, r6
 8043972:	42a8      	cmp	r0, r5
 8043974:	d9f8      	bls.n	8043968 <SD_read+0x30>
      if (ReadStatus == 0)
 8043976:	6863      	ldr	r3, [r4, #4]
 8043978:	2b00      	cmp	r3, #0
 804397a:	d0e5      	beq.n	8043948 <SD_read+0x10>
        ReadStatus = 0;
 804397c:	2300      	movs	r3, #0
 804397e:	6063      	str	r3, [r4, #4]
        timeout = HAL_GetTick();
 8043980:	f000 f842 	bl	8043a08 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8043984:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8043988:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 804398a:	f000 f83d 	bl	8043a08 <HAL_GetTick>
 804398e:	1b40      	subs	r0, r0, r5
 8043990:	42a0      	cmp	r0, r4
 8043992:	d8d9      	bhi.n	8043948 <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8043994:	f7ff fee4 	bl	8043760 <BSP_SD_GetCardState>
 8043998:	2800      	cmp	r0, #0
 804399a:	d1f6      	bne.n	804398a <SD_read+0x52>
 804399c:	e7d5      	b.n	804394a <SD_read+0x12>
 804399e:	bf00      	nop
 80439a0:	200025c0 	.word	0x200025c0

080439a4 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 80439a4:	4b01      	ldr	r3, [pc, #4]	; (80439ac <BSP_SD_WriteCpltCallback+0x8>)
 80439a6:	2201      	movs	r2, #1
 80439a8:	601a      	str	r2, [r3, #0]
}
 80439aa:	4770      	bx	lr
 80439ac:	200025c0 	.word	0x200025c0

080439b0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80439b0:	4b01      	ldr	r3, [pc, #4]	; (80439b8 <BSP_SD_ReadCpltCallback+0x8>)
 80439b2:	2201      	movs	r2, #1
 80439b4:	605a      	str	r2, [r3, #4]
}
 80439b6:	4770      	bx	lr
 80439b8:	200025c0 	.word	0x200025c0

080439bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80439bc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80439be:	4b0b      	ldr	r3, [pc, #44]	; (80439ec <HAL_Init+0x30>)
 80439c0:	681a      	ldr	r2, [r3, #0]
 80439c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80439c6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80439c8:	681a      	ldr	r2, [r3, #0]
 80439ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80439ce:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80439d0:	681a      	ldr	r2, [r3, #0]
 80439d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80439d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80439d8:	2003      	movs	r0, #3
 80439da:	f000 fa39 	bl	8043e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80439de:	2000      	movs	r0, #0
 80439e0:	f00c f9e6 	bl	804fdb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80439e4:	f00c f9ec 	bl	804fdc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80439e8:	2000      	movs	r0, #0
 80439ea:	bd08      	pop	{r3, pc}
 80439ec:	40023c00 	.word	0x40023c00

080439f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80439f0:	4a03      	ldr	r2, [pc, #12]	; (8043a00 <HAL_IncTick+0x10>)
 80439f2:	4b04      	ldr	r3, [pc, #16]	; (8043a04 <HAL_IncTick+0x14>)
 80439f4:	6811      	ldr	r1, [r2, #0]
 80439f6:	781b      	ldrb	r3, [r3, #0]
 80439f8:	440b      	add	r3, r1
 80439fa:	6013      	str	r3, [r2, #0]
}
 80439fc:	4770      	bx	lr
 80439fe:	bf00      	nop
 8043a00:	20005fc8 	.word	0x20005fc8
 8043a04:	20001050 	.word	0x20001050

08043a08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8043a08:	4b01      	ldr	r3, [pc, #4]	; (8043a10 <HAL_GetTick+0x8>)
 8043a0a:	6818      	ldr	r0, [r3, #0]
}
 8043a0c:	4770      	bx	lr
 8043a0e:	bf00      	nop
 8043a10:	20005fc8 	.word	0x20005fc8

08043a14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8043a14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8043a16:	4604      	mov	r4, r0
 8043a18:	2800      	cmp	r0, #0
 8043a1a:	f000 809b 	beq.w	8043b54 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8043a1e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8043a20:	b925      	cbnz	r5, 8043a2c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8043a22:	f00c f8ef 	bl	804fc04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8043a26:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8043a28:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8043a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043a2e:	06db      	lsls	r3, r3, #27
 8043a30:	f100 808e 	bmi.w	8043b50 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8043a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043a36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8043a3a:	f023 0302 	bic.w	r3, r3, #2
 8043a3e:	f043 0302 	orr.w	r3, r3, #2
 8043a42:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8043a44:	4b44      	ldr	r3, [pc, #272]	; (8043b58 <HAL_ADC_Init+0x144>)
 8043a46:	685a      	ldr	r2, [r3, #4]
 8043a48:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8043a4c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8043a4e:	685a      	ldr	r2, [r3, #4]
 8043a50:	6861      	ldr	r1, [r4, #4]
 8043a52:	430a      	orrs	r2, r1
 8043a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8043a56:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8043a58:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8043a5a:	685a      	ldr	r2, [r3, #4]
 8043a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8043a62:	685a      	ldr	r2, [r3, #4]
 8043a64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8043a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8043a6a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8043a6c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8043a6e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8043a72:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8043a74:	685a      	ldr	r2, [r3, #4]
 8043a76:	430a      	orrs	r2, r1
 8043a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8043a7a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8043a7c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8043a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8043a84:	689a      	ldr	r2, [r3, #8]
 8043a86:	430a      	orrs	r2, r1
 8043a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8043a8a:	4934      	ldr	r1, [pc, #208]	; (8043b5c <HAL_ADC_Init+0x148>)
 8043a8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8043a8e:	428a      	cmp	r2, r1
 8043a90:	d052      	beq.n	8043b38 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8043a92:	6899      	ldr	r1, [r3, #8]
 8043a94:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8043a98:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8043a9a:	6899      	ldr	r1, [r3, #8]
 8043a9c:	430a      	orrs	r2, r1
 8043a9e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043aa0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8043aa2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8043aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8043aaa:	689a      	ldr	r2, [r3, #8]
 8043aac:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043aae:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8043ab0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8043ab2:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8043ab4:	f022 0202 	bic.w	r2, r2, #2
 8043ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8043aba:	689a      	ldr	r2, [r3, #8]
 8043abc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8043ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8043ac2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8043ac6:	2a00      	cmp	r2, #0
 8043ac8:	d03e      	beq.n	8043b48 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8043aca:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8043acc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8043ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8043ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8043ad4:	685a      	ldr	r2, [r3, #4]
 8043ad6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8043ada:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8043adc:	685a      	ldr	r2, [r3, #4]
 8043ade:	3901      	subs	r1, #1
 8043ae0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8043ae4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8043ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8043ae8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8043aea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8043aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8043af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043af2:	3901      	subs	r1, #1
 8043af4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8043af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8043afa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8043afc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8043b00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8043b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8043b06:	689a      	ldr	r2, [r3, #8]
 8043b08:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8043b0c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8043b0e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8043b10:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8043b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8043b18:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8043b1a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8043b1c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8043b20:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8043b22:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8043b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043b26:	f023 0303 	bic.w	r3, r3, #3
 8043b2a:	f043 0301 	orr.w	r3, r3, #1
 8043b2e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8043b30:	2300      	movs	r3, #0
 8043b32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8043b36:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8043b38:	689a      	ldr	r2, [r3, #8]
 8043b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8043b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043b40:	689a      	ldr	r2, [r3, #8]
 8043b42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8043b46:	e7b2      	b.n	8043aae <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8043b48:	685a      	ldr	r2, [r3, #4]
 8043b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043b4e:	e7c9      	b.n	8043ae4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8043b50:	2001      	movs	r0, #1
 8043b52:	e7ed      	b.n	8043b30 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8043b54:	2001      	movs	r0, #1
 8043b56:	e7ee      	b.n	8043b36 <HAL_ADC_Init+0x122>
 8043b58:	40012300 	.word	0x40012300
 8043b5c:	0f000001 	.word	0x0f000001

08043b60 <HAL_ADC_Start>:
{
 8043b60:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8043b62:	2300      	movs	r3, #0
 8043b64:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8043b66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8043b6a:	2b01      	cmp	r3, #1
 8043b6c:	d061      	beq.n	8043c32 <HAL_ADC_Start+0xd2>
 8043b6e:	2301      	movs	r3, #1
 8043b70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8043b74:	6803      	ldr	r3, [r0, #0]
 8043b76:	689a      	ldr	r2, [r3, #8]
 8043b78:	07d1      	lsls	r1, r2, #31
 8043b7a:	d505      	bpl.n	8043b88 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8043b7c:	689a      	ldr	r2, [r3, #8]
 8043b7e:	07d2      	lsls	r2, r2, #31
 8043b80:	d414      	bmi.n	8043bac <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8043b82:	2000      	movs	r0, #0
}
 8043b84:	b002      	add	sp, #8
 8043b86:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8043b88:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8043b8a:	492b      	ldr	r1, [pc, #172]	; (8043c38 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8043b8c:	f042 0201 	orr.w	r2, r2, #1
 8043b90:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8043b92:	4a2a      	ldr	r2, [pc, #168]	; (8043c3c <HAL_ADC_Start+0xdc>)
 8043b94:	6812      	ldr	r2, [r2, #0]
 8043b96:	fbb2 f2f1 	udiv	r2, r2, r1
 8043b9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8043b9e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8043ba0:	9a01      	ldr	r2, [sp, #4]
 8043ba2:	2a00      	cmp	r2, #0
 8043ba4:	d0ea      	beq.n	8043b7c <HAL_ADC_Start+0x1c>
      counter--;
 8043ba6:	9a01      	ldr	r2, [sp, #4]
 8043ba8:	3a01      	subs	r2, #1
 8043baa:	e7f8      	b.n	8043b9e <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8043bac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8043bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8043bb2:	f022 0201 	bic.w	r2, r2, #1
 8043bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043bba:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8043bbc:	685a      	ldr	r2, [r3, #4]
 8043bbe:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8043bc0:	bf41      	itttt	mi
 8043bc2:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8043bc4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8043bc8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8043bcc:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8043bce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8043bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8043bd4:	bf1c      	itt	ne
 8043bd6:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8043bd8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8043bdc:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8043bde:	2200      	movs	r2, #0
 8043be0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8043be4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8043be8:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8043bea:	4a15      	ldr	r2, [pc, #84]	; (8043c40 <HAL_ADC_Start+0xe0>)
 8043bec:	6851      	ldr	r1, [r2, #4]
 8043bee:	f011 0f1f 	tst.w	r1, #31
 8043bf2:	4914      	ldr	r1, [pc, #80]	; (8043c44 <HAL_ADC_Start+0xe4>)
 8043bf4:	d11a      	bne.n	8043c2c <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8043bf6:	428b      	cmp	r3, r1
 8043bf8:	d006      	beq.n	8043c08 <HAL_ADC_Start+0xa8>
 8043bfa:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8043bfe:	428b      	cmp	r3, r1
 8043c00:	d10b      	bne.n	8043c1a <HAL_ADC_Start+0xba>
 8043c02:	6852      	ldr	r2, [r2, #4]
 8043c04:	06d2      	lsls	r2, r2, #27
 8043c06:	d1bc      	bne.n	8043b82 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8043c08:	6898      	ldr	r0, [r3, #8]
 8043c0a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8043c0e:	d1b8      	bne.n	8043b82 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8043c10:	689a      	ldr	r2, [r3, #8]
 8043c12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8043c16:	609a      	str	r2, [r3, #8]
 8043c18:	e7b4      	b.n	8043b84 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8043c1a:	490b      	ldr	r1, [pc, #44]	; (8043c48 <HAL_ADC_Start+0xe8>)
 8043c1c:	428b      	cmp	r3, r1
 8043c1e:	d1b0      	bne.n	8043b82 <HAL_ADC_Start+0x22>
 8043c20:	6852      	ldr	r2, [r2, #4]
 8043c22:	f002 021f 	and.w	r2, r2, #31
 8043c26:	2a0f      	cmp	r2, #15
 8043c28:	d9ee      	bls.n	8043c08 <HAL_ADC_Start+0xa8>
 8043c2a:	e7aa      	b.n	8043b82 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8043c2c:	428b      	cmp	r3, r1
 8043c2e:	d1a8      	bne.n	8043b82 <HAL_ADC_Start+0x22>
 8043c30:	e7ea      	b.n	8043c08 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 8043c32:	2002      	movs	r0, #2
 8043c34:	e7a6      	b.n	8043b84 <HAL_ADC_Start+0x24>
 8043c36:	bf00      	nop
 8043c38:	000f4240 	.word	0x000f4240
 8043c3c:	20001048 	.word	0x20001048
 8043c40:	40012300 	.word	0x40012300
 8043c44:	40012000 	.word	0x40012000
 8043c48:	40012200 	.word	0x40012200

08043c4c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8043c4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8043c50:	2b01      	cmp	r3, #1
 8043c52:	d017      	beq.n	8043c84 <HAL_ADC_Stop+0x38>
 8043c54:	2301      	movs	r3, #1
 8043c56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8043c5a:	6803      	ldr	r3, [r0, #0]
 8043c5c:	689a      	ldr	r2, [r3, #8]
 8043c5e:	f022 0201 	bic.w	r2, r2, #1
 8043c62:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8043c64:	689b      	ldr	r3, [r3, #8]
 8043c66:	07db      	lsls	r3, r3, #31
 8043c68:	d407      	bmi.n	8043c7a <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8043c6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8043c6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8043c70:	f023 0301 	bic.w	r3, r3, #1
 8043c74:	f043 0301 	orr.w	r3, r3, #1
 8043c78:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8043c7a:	2300      	movs	r3, #0
 8043c7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8043c80:	4618      	mov	r0, r3
 8043c82:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8043c84:	2002      	movs	r0, #2
}
 8043c86:	4770      	bx	lr

08043c88 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043c88:	6803      	ldr	r3, [r0, #0]
 8043c8a:	689a      	ldr	r2, [r3, #8]
{
 8043c8c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043c8e:	0556      	lsls	r6, r2, #21
{
 8043c90:	4604      	mov	r4, r0
 8043c92:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043c94:	d50b      	bpl.n	8043cae <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8043c96:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043c98:	05d8      	lsls	r0, r3, #23
 8043c9a:	d508      	bpl.n	8043cae <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043c9e:	f043 0320 	orr.w	r3, r3, #32
 8043ca2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8043ca4:	2300      	movs	r3, #0
 8043ca6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8043caa:	2001      	movs	r0, #1
}
 8043cac:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8043cae:	f7ff feab 	bl	8043a08 <HAL_GetTick>
 8043cb2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8043cb4:	6823      	ldr	r3, [r4, #0]
 8043cb6:	681a      	ldr	r2, [r3, #0]
 8043cb8:	0792      	lsls	r2, r2, #30
 8043cba:	d50c      	bpl.n	8043cd6 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8043cbc:	f06f 0212 	mvn.w	r2, #18
 8043cc0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8043cc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8043cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043cc8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043cca:	689a      	ldr	r2, [r3, #8]
 8043ccc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8043cd0:	d013      	beq.n	8043cfa <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8043cd2:	2000      	movs	r0, #0
 8043cd4:	e7ea      	b.n	8043cac <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8043cd6:	1c69      	adds	r1, r5, #1
 8043cd8:	d0ed      	beq.n	8043cb6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043cda:	b945      	cbnz	r5, 8043cee <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8043cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043cde:	f043 0304 	orr.w	r3, r3, #4
 8043ce2:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8043ce4:	2300      	movs	r3, #0
 8043ce6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8043cea:	2003      	movs	r0, #3
 8043cec:	e7de      	b.n	8043cac <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043cee:	f7ff fe8b 	bl	8043a08 <HAL_GetTick>
 8043cf2:	1b80      	subs	r0, r0, r6
 8043cf4:	42a8      	cmp	r0, r5
 8043cf6:	d9dd      	bls.n	8043cb4 <HAL_ADC_PollForConversion+0x2c>
 8043cf8:	e7f0      	b.n	8043cdc <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043cfa:	7e22      	ldrb	r2, [r4, #24]
 8043cfc:	2a00      	cmp	r2, #0
 8043cfe:	d1e8      	bne.n	8043cd2 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8043d02:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8043d06:	d002      	beq.n	8043d0e <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8043d08:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043d0a:	055b      	lsls	r3, r3, #21
 8043d0c:	d4e1      	bmi.n	8043cd2 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8043d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8043d14:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8043d16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8043d18:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8043d1c:	d1d9      	bne.n	8043cd2 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8043d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043d20:	f043 0301 	orr.w	r3, r3, #1
 8043d24:	6423      	str	r3, [r4, #64]	; 0x40
 8043d26:	e7c1      	b.n	8043cac <HAL_ADC_PollForConversion+0x24>

08043d28 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8043d28:	6803      	ldr	r3, [r0, #0]
 8043d2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8043d2c:	4770      	bx	lr
	...

08043d30 <HAL_ADC_ConfigChannel>:
{
 8043d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8043d32:	2300      	movs	r3, #0
 8043d34:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8043d36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8043d3a:	2b01      	cmp	r3, #1
 8043d3c:	d07e      	beq.n	8043e3c <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043d3e:	680d      	ldr	r5, [r1, #0]
 8043d40:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8043d42:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043d44:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8043d46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8043d4a:	b2ac      	uxth	r4, r5
 8043d4c:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043d4e:	d929      	bls.n	8043da4 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8043d50:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8043d54:	68df      	ldr	r7, [r3, #12]
 8043d56:	3a1e      	subs	r2, #30
 8043d58:	f04f 0c07 	mov.w	ip, #7
 8043d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8043d60:	ea27 070c 	bic.w	r7, r7, ip
 8043d64:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8043d66:	68df      	ldr	r7, [r3, #12]
 8043d68:	fa06 f202 	lsl.w	r2, r6, r2
 8043d6c:	433a      	orrs	r2, r7
 8043d6e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8043d70:	6849      	ldr	r1, [r1, #4]
 8043d72:	2906      	cmp	r1, #6
 8043d74:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8043d78:	d824      	bhi.n	8043dc4 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8043d7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8043d7c:	3a05      	subs	r2, #5
 8043d7e:	261f      	movs	r6, #31
 8043d80:	4096      	lsls	r6, r2
 8043d82:	ea21 0106 	bic.w	r1, r1, r6
 8043d86:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8043d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8043d8a:	fa04 f202 	lsl.w	r2, r4, r2
 8043d8e:	430a      	orrs	r2, r1
 8043d90:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8043d92:	4a2b      	ldr	r2, [pc, #172]	; (8043e40 <HAL_ADC_ConfigChannel+0x110>)
 8043d94:	4293      	cmp	r3, r2
 8043d96:	d031      	beq.n	8043dfc <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8043d98:	2300      	movs	r3, #0
 8043d9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8043d9e:	4618      	mov	r0, r3
}
 8043da0:	b003      	add	sp, #12
 8043da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8043da4:	691f      	ldr	r7, [r3, #16]
 8043da6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8043daa:	f04f 0c07 	mov.w	ip, #7
 8043dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8043db2:	ea27 070c 	bic.w	r7, r7, ip
 8043db6:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8043db8:	691f      	ldr	r7, [r3, #16]
 8043dba:	fa06 f202 	lsl.w	r2, r6, r2
 8043dbe:	433a      	orrs	r2, r7
 8043dc0:	611a      	str	r2, [r3, #16]
 8043dc2:	e7d5      	b.n	8043d70 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8043dc4:	290c      	cmp	r1, #12
 8043dc6:	f04f 011f 	mov.w	r1, #31
 8043dca:	d80b      	bhi.n	8043de4 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8043dcc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8043dce:	3a23      	subs	r2, #35	; 0x23
 8043dd0:	4091      	lsls	r1, r2
 8043dd2:	ea26 0101 	bic.w	r1, r6, r1
 8043dd6:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8043dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043dda:	fa04 f202 	lsl.w	r2, r4, r2
 8043dde:	430a      	orrs	r2, r1
 8043de0:	631a      	str	r2, [r3, #48]	; 0x30
 8043de2:	e7d6      	b.n	8043d92 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8043de4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8043de6:	3a41      	subs	r2, #65	; 0x41
 8043de8:	4091      	lsls	r1, r2
 8043dea:	ea26 0101 	bic.w	r1, r6, r1
 8043dee:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8043df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8043df2:	fa04 f202 	lsl.w	r2, r4, r2
 8043df6:	430a      	orrs	r2, r1
 8043df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8043dfa:	e7ca      	b.n	8043d92 <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8043dfc:	2d12      	cmp	r5, #18
 8043dfe:	d104      	bne.n	8043e0a <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8043e00:	4a10      	ldr	r2, [pc, #64]	; (8043e44 <HAL_ADC_ConfigChannel+0x114>)
 8043e02:	6853      	ldr	r3, [r2, #4]
 8043e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043e08:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8043e0a:	f1a5 0310 	sub.w	r3, r5, #16
 8043e0e:	2b01      	cmp	r3, #1
 8043e10:	d8c2      	bhi.n	8043d98 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8043e12:	4a0c      	ldr	r2, [pc, #48]	; (8043e44 <HAL_ADC_ConfigChannel+0x114>)
 8043e14:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8043e16:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8043e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043e1c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8043e1e:	d1bb      	bne.n	8043d98 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8043e20:	4b09      	ldr	r3, [pc, #36]	; (8043e48 <HAL_ADC_ConfigChannel+0x118>)
 8043e22:	4a0a      	ldr	r2, [pc, #40]	; (8043e4c <HAL_ADC_ConfigChannel+0x11c>)
 8043e24:	681b      	ldr	r3, [r3, #0]
 8043e26:	fbb3 f2f2 	udiv	r2, r3, r2
 8043e2a:	230a      	movs	r3, #10
 8043e2c:	4353      	muls	r3, r2
        counter--;
 8043e2e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8043e30:	9b01      	ldr	r3, [sp, #4]
 8043e32:	2b00      	cmp	r3, #0
 8043e34:	d0b0      	beq.n	8043d98 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8043e36:	9b01      	ldr	r3, [sp, #4]
 8043e38:	3b01      	subs	r3, #1
 8043e3a:	e7f8      	b.n	8043e2e <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8043e3c:	2002      	movs	r0, #2
 8043e3e:	e7af      	b.n	8043da0 <HAL_ADC_ConfigChannel+0x70>
 8043e40:	40012000 	.word	0x40012000
 8043e44:	40012300 	.word	0x40012300
 8043e48:	20001048 	.word	0x20001048
 8043e4c:	000f4240 	.word	0x000f4240

08043e50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043e50:	4a07      	ldr	r2, [pc, #28]	; (8043e70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8043e52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8043e54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8043e58:	041b      	lsls	r3, r3, #16
 8043e5a:	0c1b      	lsrs	r3, r3, #16
 8043e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043e60:	0200      	lsls	r0, r0, #8
 8043e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043e66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8043e6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8043e6c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8043e6e:	4770      	bx	lr
 8043e70:	e000ed00 	.word	0xe000ed00

08043e74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8043e74:	4b17      	ldr	r3, [pc, #92]	; (8043ed4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8043e76:	b570      	push	{r4, r5, r6, lr}
 8043e78:	68dc      	ldr	r4, [r3, #12]
 8043e7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043e7e:	f1c4 0507 	rsb	r5, r4, #7
 8043e82:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043e84:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043e88:	bf28      	it	cs
 8043e8a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043e8c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043e90:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043e92:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043e96:	bf8c      	ite	hi
 8043e98:	3c03      	subhi	r4, #3
 8043e9a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043e9c:	ea21 0303 	bic.w	r3, r1, r3
 8043ea0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8043ea2:	fa06 f404 	lsl.w	r4, r6, r4
 8043ea6:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8043eaa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043eac:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043eb0:	bfa8      	it	ge
 8043eb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8043eb6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043eba:	bfbc      	itt	lt
 8043ebc:	f000 000f 	andlt.w	r0, r0, #15
 8043ec0:	4a05      	ldrlt	r2, [pc, #20]	; (8043ed8 <HAL_NVIC_SetPriority+0x64>)
 8043ec2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043ec4:	bfaa      	itet	ge
 8043ec6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043eca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043ecc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8043ed0:	bd70      	pop	{r4, r5, r6, pc}
 8043ed2:	bf00      	nop
 8043ed4:	e000ed00 	.word	0xe000ed00
 8043ed8:	e000ed14 	.word	0xe000ed14

08043edc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043edc:	2800      	cmp	r0, #0
 8043ede:	db08      	blt.n	8043ef2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043ee0:	0942      	lsrs	r2, r0, #5
 8043ee2:	2301      	movs	r3, #1
 8043ee4:	f000 001f 	and.w	r0, r0, #31
 8043ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8043eec:	4b01      	ldr	r3, [pc, #4]	; (8043ef4 <HAL_NVIC_EnableIRQ+0x18>)
 8043eee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8043ef2:	4770      	bx	lr
 8043ef4:	e000e100 	.word	0xe000e100

08043ef8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043ef8:	2800      	cmp	r0, #0
 8043efa:	db0d      	blt.n	8043f18 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043efc:	0943      	lsrs	r3, r0, #5
 8043efe:	2201      	movs	r2, #1
 8043f00:	f000 001f 	and.w	r0, r0, #31
 8043f04:	fa02 f000 	lsl.w	r0, r2, r0
 8043f08:	3320      	adds	r3, #32
 8043f0a:	4a04      	ldr	r2, [pc, #16]	; (8043f1c <HAL_NVIC_DisableIRQ+0x24>)
 8043f0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8043f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8043f14:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8043f18:	4770      	bx	lr
 8043f1a:	bf00      	nop
 8043f1c:	e000e100 	.word	0xe000e100

08043f20 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8043f20:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043f24:	4905      	ldr	r1, [pc, #20]	; (8043f3c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043f26:	4b06      	ldr	r3, [pc, #24]	; (8043f40 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043f28:	68ca      	ldr	r2, [r1, #12]
 8043f2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043f2e:	4313      	orrs	r3, r2
 8043f30:	60cb      	str	r3, [r1, #12]
 8043f32:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8043f36:	bf00      	nop
 8043f38:	e7fd      	b.n	8043f36 <HAL_NVIC_SystemReset+0x16>
 8043f3a:	bf00      	nop
 8043f3c:	e000ed00 	.word	0xe000ed00
 8043f40:	05fa0004 	.word	0x05fa0004

08043f44 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043f44:	2800      	cmp	r0, #0
 8043f46:	db09      	blt.n	8043f5c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043f48:	0943      	lsrs	r3, r0, #5
 8043f4a:	2201      	movs	r2, #1
 8043f4c:	f000 001f 	and.w	r0, r0, #31
 8043f50:	fa02 f000 	lsl.w	r0, r2, r0
 8043f54:	3360      	adds	r3, #96	; 0x60
 8043f56:	4a02      	ldr	r2, [pc, #8]	; (8043f60 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8043f58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8043f5c:	4770      	bx	lr
 8043f5e:	bf00      	nop
 8043f60:	e000e100 	.word	0xe000e100

08043f64 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043f64:	6803      	ldr	r3, [r0, #0]
 8043f66:	b2da      	uxtb	r2, r3
 8043f68:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043f6c:	f023 0303 	bic.w	r3, r3, #3
 8043f70:	2118      	movs	r1, #24
 8043f72:	3a10      	subs	r2, #16
 8043f74:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043f78:	4904      	ldr	r1, [pc, #16]	; (8043f8c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8043f7a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8043f7c:	bf88      	it	hi
 8043f7e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043f80:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8043f82:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043f84:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8043f86:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8043f88:	4770      	bx	lr
 8043f8a:	bf00      	nop
 8043f8c:	08053e70 	.word	0x08053e70

08043f90 <HAL_DMA_Init>:
{
 8043f90:	b570      	push	{r4, r5, r6, lr}
 8043f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8043f94:	f7ff fd38 	bl	8043a08 <HAL_GetTick>
 8043f98:	4605      	mov	r5, r0
  if(hdma == NULL)
 8043f9a:	2c00      	cmp	r4, #0
 8043f9c:	d071      	beq.n	8044082 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8043f9e:	2300      	movs	r3, #0
 8043fa0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8043fa4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8043fa6:	2302      	movs	r3, #2
 8043fa8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8043fac:	6813      	ldr	r3, [r2, #0]
 8043fae:	f023 0301 	bic.w	r3, r3, #1
 8043fb2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8043fb4:	6821      	ldr	r1, [r4, #0]
 8043fb6:	680b      	ldr	r3, [r1, #0]
 8043fb8:	07d8      	lsls	r0, r3, #31
 8043fba:	d43c      	bmi.n	8044036 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8043fbc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043fbe:	4d32      	ldr	r5, [pc, #200]	; (8044088 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043fc0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043fc2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043fc4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8043fc8:	4313      	orrs	r3, r2
 8043fca:	68e2      	ldr	r2, [r4, #12]
 8043fcc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043fce:	6922      	ldr	r2, [r4, #16]
 8043fd0:	4313      	orrs	r3, r2
 8043fd2:	6962      	ldr	r2, [r4, #20]
 8043fd4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043fd6:	69e2      	ldr	r2, [r4, #28]
 8043fd8:	4303      	orrs	r3, r0
 8043fda:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8043fdc:	6a22      	ldr	r2, [r4, #32]
 8043fde:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043fe2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043fe4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8043fe8:	bf02      	ittt	eq
 8043fea:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8043fee:	4335      	orreq	r5, r6
 8043ff0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8043ff2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8043ff4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043ff6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8043ff8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8043ffc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8044000:	d10b      	bne.n	804401a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8044002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8044004:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8044006:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8044008:	b13d      	cbz	r5, 804401a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 804400a:	b9f8      	cbnz	r0, 804404c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 804400c:	2a01      	cmp	r2, #1
 804400e:	d02d      	beq.n	804406c <HAL_DMA_Init+0xdc>
 8044010:	d301      	bcc.n	8044016 <HAL_DMA_Init+0x86>
 8044012:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8044014:	d101      	bne.n	804401a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8044016:	01ea      	lsls	r2, r5, #7
 8044018:	d42b      	bmi.n	8044072 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 804401a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804401c:	4620      	mov	r0, r4
 804401e:	f7ff ffa1 	bl	8043f64 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8044022:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8044024:	233f      	movs	r3, #63	; 0x3f
 8044026:	4093      	lsls	r3, r2
 8044028:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804402a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 804402c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804402e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8044030:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8044034:	e009      	b.n	804404a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8044036:	f7ff fce7 	bl	8043a08 <HAL_GetTick>
 804403a:	1b40      	subs	r0, r0, r5
 804403c:	2805      	cmp	r0, #5
 804403e:	d9b9      	bls.n	8043fb4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8044040:	2320      	movs	r3, #32
 8044042:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8044044:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8044046:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 804404a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 804404c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8044050:	d113      	bne.n	804407a <HAL_DMA_Init+0xea>
    switch (tmp)
 8044052:	2a03      	cmp	r2, #3
 8044054:	d8e1      	bhi.n	804401a <HAL_DMA_Init+0x8a>
 8044056:	a001      	add	r0, pc, #4	; (adr r0, 804405c <HAL_DMA_Init+0xcc>)
 8044058:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 804405c:	08044073 	.word	0x08044073
 8044060:	08044017 	.word	0x08044017
 8044064:	08044073 	.word	0x08044073
 8044068:	0804406d 	.word	0x0804406d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804406c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8044070:	d1d3      	bne.n	804401a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8044072:	2340      	movs	r3, #64	; 0x40
 8044074:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8044076:	2001      	movs	r0, #1
 8044078:	e7e5      	b.n	8044046 <HAL_DMA_Init+0xb6>
    switch (tmp)
 804407a:	2a02      	cmp	r2, #2
 804407c:	d9f9      	bls.n	8044072 <HAL_DMA_Init+0xe2>
 804407e:	2a03      	cmp	r2, #3
 8044080:	e7c8      	b.n	8044014 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8044082:	2001      	movs	r0, #1
 8044084:	e7e1      	b.n	804404a <HAL_DMA_Init+0xba>
 8044086:	bf00      	nop
 8044088:	f010803f 	.word	0xf010803f

0804408c <HAL_DMA_DeInit>:
{
 804408c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 804408e:	4605      	mov	r5, r0
 8044090:	b320      	cbz	r0, 80440dc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8044092:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8044096:	b2e4      	uxtb	r4, r4
 8044098:	2c02      	cmp	r4, #2
 804409a:	d01d      	beq.n	80440d8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 804409c:	6803      	ldr	r3, [r0, #0]
 804409e:	681a      	ldr	r2, [r3, #0]
 80440a0:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80440a4:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80440a6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80440a8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80440aa:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80440ac:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80440ae:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80440b0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80440b2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80440b4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80440b6:	f7ff ff55 	bl	8043f64 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80440ba:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80440bc:	233f      	movs	r3, #63	; 0x3f
 80440be:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80440c0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80440c4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80440c8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80440cc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80440ce:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80440d0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80440d4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 80440d8:	4620      	mov	r0, r4
 80440da:	e000      	b.n	80440de <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 80440dc:	2001      	movs	r0, #1
}
 80440de:	bd38      	pop	{r3, r4, r5, pc}

080440e0 <HAL_DMA_Start_IT>:
{
 80440e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80440e2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80440e6:	2c01      	cmp	r4, #1
 80440e8:	d032      	beq.n	8044150 <HAL_DMA_Start_IT+0x70>
 80440ea:	2401      	movs	r4, #1
 80440ec:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80440f0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80440f4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80440f6:	2c01      	cmp	r4, #1
 80440f8:	f04f 0500 	mov.w	r5, #0
 80440fc:	f04f 0402 	mov.w	r4, #2
 8044100:	d124      	bne.n	804414c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8044102:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8044106:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8044108:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 804410a:	6825      	ldr	r5, [r4, #0]
 804410c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8044110:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8044112:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8044114:	6883      	ldr	r3, [r0, #8]
 8044116:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8044118:	bf0e      	itee	eq
 804411a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 804411c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 804411e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8044120:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8044122:	bf08      	it	eq
 8044124:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8044126:	233f      	movs	r3, #63	; 0x3f
 8044128:	4093      	lsls	r3, r2
 804412a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 804412c:	6823      	ldr	r3, [r4, #0]
 804412e:	f043 0316 	orr.w	r3, r3, #22
 8044132:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8044134:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8044136:	b11b      	cbz	r3, 8044140 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8044138:	6823      	ldr	r3, [r4, #0]
 804413a:	f043 0308 	orr.w	r3, r3, #8
 804413e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8044140:	6823      	ldr	r3, [r4, #0]
 8044142:	f043 0301 	orr.w	r3, r3, #1
 8044146:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8044148:	2000      	movs	r0, #0
}
 804414a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 804414c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8044150:	2002      	movs	r0, #2
 8044152:	e7fa      	b.n	804414a <HAL_DMA_Start_IT+0x6a>

08044154 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8044154:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8044158:	2b02      	cmp	r3, #2
 804415a:	d003      	beq.n	8044164 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 804415c:	2380      	movs	r3, #128	; 0x80
 804415e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8044160:	2001      	movs	r0, #1
 8044162:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8044164:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8044166:	2305      	movs	r3, #5
 8044168:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 804416c:	6813      	ldr	r3, [r2, #0]
 804416e:	f023 0301 	bic.w	r3, r3, #1
 8044172:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8044174:	2000      	movs	r0, #0
}
 8044176:	4770      	bx	lr

08044178 <HAL_DMA_IRQHandler>:
{
 8044178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 804417a:	2300      	movs	r3, #0
 804417c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 804417e:	4b5c      	ldr	r3, [pc, #368]	; (80442f0 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8044180:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8044182:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8044184:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8044186:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8044188:	2208      	movs	r2, #8
 804418a:	409a      	lsls	r2, r3
 804418c:	4232      	tst	r2, r6
{
 804418e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8044190:	d00c      	beq.n	80441ac <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8044192:	6801      	ldr	r1, [r0, #0]
 8044194:	6808      	ldr	r0, [r1, #0]
 8044196:	0740      	lsls	r0, r0, #29
 8044198:	d508      	bpl.n	80441ac <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 804419a:	6808      	ldr	r0, [r1, #0]
 804419c:	f020 0004 	bic.w	r0, r0, #4
 80441a0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80441a2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80441a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80441a6:	f042 0201 	orr.w	r2, r2, #1
 80441aa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80441ac:	2201      	movs	r2, #1
 80441ae:	409a      	lsls	r2, r3
 80441b0:	4232      	tst	r2, r6
 80441b2:	d008      	beq.n	80441c6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80441b4:	6821      	ldr	r1, [r4, #0]
 80441b6:	6949      	ldr	r1, [r1, #20]
 80441b8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80441ba:	bf41      	itttt	mi
 80441bc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80441be:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80441c0:	f042 0202 	orrmi.w	r2, r2, #2
 80441c4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80441c6:	2204      	movs	r2, #4
 80441c8:	409a      	lsls	r2, r3
 80441ca:	4232      	tst	r2, r6
 80441cc:	d008      	beq.n	80441e0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80441ce:	6821      	ldr	r1, [r4, #0]
 80441d0:	6809      	ldr	r1, [r1, #0]
 80441d2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80441d4:	bf41      	itttt	mi
 80441d6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80441d8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80441da:	f042 0204 	orrmi.w	r2, r2, #4
 80441de:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80441e0:	2210      	movs	r2, #16
 80441e2:	409a      	lsls	r2, r3
 80441e4:	4232      	tst	r2, r6
 80441e6:	d010      	beq.n	804420a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80441e8:	6823      	ldr	r3, [r4, #0]
 80441ea:	6819      	ldr	r1, [r3, #0]
 80441ec:	0709      	lsls	r1, r1, #28
 80441ee:	d50c      	bpl.n	804420a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80441f0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80441f2:	681a      	ldr	r2, [r3, #0]
 80441f4:	0350      	lsls	r0, r2, #13
 80441f6:	d537      	bpl.n	8044268 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80441f8:	681b      	ldr	r3, [r3, #0]
 80441fa:	0319      	lsls	r1, r3, #12
 80441fc:	d401      	bmi.n	8044202 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80441fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044200:	e000      	b.n	8044204 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8044202:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8044204:	b10b      	cbz	r3, 804420a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8044206:	4620      	mov	r0, r4
 8044208:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 804420a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 804420c:	2220      	movs	r2, #32
 804420e:	408a      	lsls	r2, r1
 8044210:	4232      	tst	r2, r6
 8044212:	d03a      	beq.n	804428a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8044214:	6823      	ldr	r3, [r4, #0]
 8044216:	6818      	ldr	r0, [r3, #0]
 8044218:	06c6      	lsls	r6, r0, #27
 804421a:	d536      	bpl.n	804428a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 804421c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 804421e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8044222:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8044224:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8044226:	d127      	bne.n	8044278 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8044228:	f022 0216 	bic.w	r2, r2, #22
 804422c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 804422e:	695a      	ldr	r2, [r3, #20]
 8044230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8044234:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8044236:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8044238:	b90a      	cbnz	r2, 804423e <HAL_DMA_IRQHandler+0xc6>
 804423a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 804423c:	b11a      	cbz	r2, 8044246 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 804423e:	681a      	ldr	r2, [r3, #0]
 8044240:	f022 0208 	bic.w	r2, r2, #8
 8044244:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8044246:	233f      	movs	r3, #63	; 0x3f
 8044248:	408b      	lsls	r3, r1
 804424a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 804424c:	2300      	movs	r3, #0
 804424e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8044252:	2301      	movs	r3, #1
 8044254:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8044258:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 804425a:	2b00      	cmp	r3, #0
 804425c:	d045      	beq.n	80442ea <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 804425e:	4620      	mov	r0, r4
}
 8044260:	b003      	add	sp, #12
 8044262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8044266:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8044268:	681a      	ldr	r2, [r3, #0]
 804426a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 804426c:	bf5e      	ittt	pl
 804426e:	681a      	ldrpl	r2, [r3, #0]
 8044270:	f022 0208 	bicpl.w	r2, r2, #8
 8044274:	601a      	strpl	r2, [r3, #0]
 8044276:	e7c2      	b.n	80441fe <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8044278:	0350      	lsls	r0, r2, #13
 804427a:	d527      	bpl.n	80442cc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 804427c:	681b      	ldr	r3, [r3, #0]
 804427e:	0319      	lsls	r1, r3, #12
 8044280:	d431      	bmi.n	80442e6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8044282:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8044284:	b10b      	cbz	r3, 804428a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8044286:	4620      	mov	r0, r4
 8044288:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 804428a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804428c:	b36b      	cbz	r3, 80442ea <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 804428e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8044290:	07da      	lsls	r2, r3, #31
 8044292:	d519      	bpl.n	80442c8 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8044294:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8044296:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8044298:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 804429c:	6813      	ldr	r3, [r2, #0]
 804429e:	f023 0301 	bic.w	r3, r3, #1
 80442a2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80442a4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80442a8:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80442ac:	9b01      	ldr	r3, [sp, #4]
 80442ae:	3301      	adds	r3, #1
 80442b0:	42bb      	cmp	r3, r7
 80442b2:	9301      	str	r3, [sp, #4]
 80442b4:	d802      	bhi.n	80442bc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80442b6:	6813      	ldr	r3, [r2, #0]
 80442b8:	07db      	lsls	r3, r3, #31
 80442ba:	d4f7      	bmi.n	80442ac <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80442bc:	2300      	movs	r3, #0
 80442be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80442c2:	2301      	movs	r3, #1
 80442c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80442c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80442ca:	e7c6      	b.n	804425a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80442cc:	681a      	ldr	r2, [r3, #0]
 80442ce:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80442d2:	d108      	bne.n	80442e6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80442d4:	6819      	ldr	r1, [r3, #0]
 80442d6:	f021 0110 	bic.w	r1, r1, #16
 80442da:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80442dc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80442de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80442e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80442e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80442e8:	e7cc      	b.n	8044284 <HAL_DMA_IRQHandler+0x10c>
}
 80442ea:	b003      	add	sp, #12
 80442ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80442ee:	bf00      	nop
 80442f0:	20001048 	.word	0x20001048

080442f4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80442f4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80442f6:	4770      	bx	lr

080442f8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80442f8:	4909      	ldr	r1, [pc, #36]	; (8044320 <FLASH_Program_DoubleWord+0x28>)
{
 80442fa:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80442fc:	690c      	ldr	r4, [r1, #16]
 80442fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8044302:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8044304:	690c      	ldr	r4, [r1, #16]
 8044306:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 804430a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 804430c:	690c      	ldr	r4, [r1, #16]
 804430e:	f044 0401 	orr.w	r4, r4, #1
 8044312:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8044314:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8044316:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 804431a:	6043      	str	r3, [r0, #4]
}
 804431c:	bd10      	pop	{r4, pc}
 804431e:	bf00      	nop
 8044320:	40023c00 	.word	0x40023c00

08044324 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044324:	4b07      	ldr	r3, [pc, #28]	; (8044344 <FLASH_Program_Word+0x20>)
 8044326:	691a      	ldr	r2, [r3, #16]
 8044328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 804432c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 804432e:	691a      	ldr	r2, [r3, #16]
 8044330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044334:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044336:	691a      	ldr	r2, [r3, #16]
 8044338:	f042 0201 	orr.w	r2, r2, #1
 804433c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 804433e:	6001      	str	r1, [r0, #0]
}
 8044340:	4770      	bx	lr
 8044342:	bf00      	nop
 8044344:	40023c00 	.word	0x40023c00

08044348 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044348:	4b07      	ldr	r3, [pc, #28]	; (8044368 <FLASH_Program_HalfWord+0x20>)
 804434a:	691a      	ldr	r2, [r3, #16]
 804434c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8044350:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8044352:	691a      	ldr	r2, [r3, #16]
 8044354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8044358:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 804435a:	691a      	ldr	r2, [r3, #16]
 804435c:	f042 0201 	orr.w	r2, r2, #1
 8044360:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8044362:	8001      	strh	r1, [r0, #0]
}
 8044364:	4770      	bx	lr
 8044366:	bf00      	nop
 8044368:	40023c00 	.word	0x40023c00

0804436c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 804436c:	4b1a      	ldr	r3, [pc, #104]	; (80443d8 <FLASH_SetErrorCode+0x6c>)
 804436e:	68da      	ldr	r2, [r3, #12]
 8044370:	06d2      	lsls	r2, r2, #27
 8044372:	d506      	bpl.n	8044382 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8044374:	4919      	ldr	r1, [pc, #100]	; (80443dc <FLASH_SetErrorCode+0x70>)
 8044376:	69ca      	ldr	r2, [r1, #28]
 8044378:	f042 0210 	orr.w	r2, r2, #16
 804437c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 804437e:	2210      	movs	r2, #16
 8044380:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8044382:	68da      	ldr	r2, [r3, #12]
 8044384:	0690      	lsls	r0, r2, #26
 8044386:	d506      	bpl.n	8044396 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8044388:	4914      	ldr	r1, [pc, #80]	; (80443dc <FLASH_SetErrorCode+0x70>)
 804438a:	69ca      	ldr	r2, [r1, #28]
 804438c:	f042 0208 	orr.w	r2, r2, #8
 8044390:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8044392:	2220      	movs	r2, #32
 8044394:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8044396:	4b10      	ldr	r3, [pc, #64]	; (80443d8 <FLASH_SetErrorCode+0x6c>)
 8044398:	68da      	ldr	r2, [r3, #12]
 804439a:	0651      	lsls	r1, r2, #25
 804439c:	d506      	bpl.n	80443ac <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 804439e:	490f      	ldr	r1, [pc, #60]	; (80443dc <FLASH_SetErrorCode+0x70>)
 80443a0:	69ca      	ldr	r2, [r1, #28]
 80443a2:	f042 0204 	orr.w	r2, r2, #4
 80443a6:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80443a8:	2240      	movs	r2, #64	; 0x40
 80443aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80443ac:	68da      	ldr	r2, [r3, #12]
 80443ae:	0612      	lsls	r2, r2, #24
 80443b0:	d506      	bpl.n	80443c0 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80443b2:	490a      	ldr	r1, [pc, #40]	; (80443dc <FLASH_SetErrorCode+0x70>)
 80443b4:	69ca      	ldr	r2, [r1, #28]
 80443b6:	f042 0202 	orr.w	r2, r2, #2
 80443ba:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80443bc:	2280      	movs	r2, #128	; 0x80
 80443be:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80443c0:	4a05      	ldr	r2, [pc, #20]	; (80443d8 <FLASH_SetErrorCode+0x6c>)
 80443c2:	68d3      	ldr	r3, [r2, #12]
 80443c4:	079b      	lsls	r3, r3, #30
 80443c6:	d506      	bpl.n	80443d6 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80443c8:	4904      	ldr	r1, [pc, #16]	; (80443dc <FLASH_SetErrorCode+0x70>)
 80443ca:	69cb      	ldr	r3, [r1, #28]
 80443cc:	f043 0320 	orr.w	r3, r3, #32
 80443d0:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80443d2:	2302      	movs	r3, #2
 80443d4:	60d3      	str	r3, [r2, #12]
  }
}
 80443d6:	4770      	bx	lr
 80443d8:	40023c00 	.word	0x40023c00
 80443dc:	20005fcc 	.word	0x20005fcc

080443e0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80443e0:	4b06      	ldr	r3, [pc, #24]	; (80443fc <HAL_FLASH_Unlock+0x1c>)
 80443e2:	691a      	ldr	r2, [r3, #16]
 80443e4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80443e6:	bfbf      	itttt	lt
 80443e8:	4a05      	ldrlt	r2, [pc, #20]	; (8044400 <HAL_FLASH_Unlock+0x20>)
 80443ea:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80443ec:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80443f0:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80443f2:	bfba      	itte	lt
 80443f4:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80443f6:	0fc0      	lsrlt	r0, r0, #31
 80443f8:	2000      	movge	r0, #0
}
 80443fa:	4770      	bx	lr
 80443fc:	40023c00 	.word	0x40023c00
 8044400:	45670123 	.word	0x45670123

08044404 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8044404:	4a03      	ldr	r2, [pc, #12]	; (8044414 <HAL_FLASH_Lock+0x10>)
 8044406:	6913      	ldr	r3, [r2, #16]
 8044408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804440c:	6113      	str	r3, [r2, #16]
}
 804440e:	2000      	movs	r0, #0
 8044410:	4770      	bx	lr
 8044412:	bf00      	nop
 8044414:	40023c00 	.word	0x40023c00

08044418 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8044418:	4b01      	ldr	r3, [pc, #4]	; (8044420 <HAL_FLASH_GetError+0x8>)
 804441a:	69d8      	ldr	r0, [r3, #28]
}  
 804441c:	4770      	bx	lr
 804441e:	bf00      	nop
 8044420:	20005fcc 	.word	0x20005fcc

08044424 <FLASH_WaitForLastOperation>:
{ 
 8044424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8044426:	4b12      	ldr	r3, [pc, #72]	; (8044470 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044428:	4c12      	ldr	r4, [pc, #72]	; (8044474 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804442a:	2200      	movs	r2, #0
{ 
 804442c:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804442e:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8044430:	f7ff faea 	bl	8043a08 <HAL_GetTick>
 8044434:	4626      	mov	r6, r4
 8044436:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044438:	68e3      	ldr	r3, [r4, #12]
 804443a:	03da      	lsls	r2, r3, #15
 804443c:	d40c      	bmi.n	8044458 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 804443e:	68e3      	ldr	r3, [r4, #12]
 8044440:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8044442:	bf44      	itt	mi
 8044444:	2301      	movmi	r3, #1
 8044446:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8044448:	68f0      	ldr	r0, [r6, #12]
 804444a:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 804444e:	d007      	beq.n	8044460 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8044450:	f7ff ff8c 	bl	804436c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8044454:	2001      	movs	r0, #1
 8044456:	e003      	b.n	8044460 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8044458:	1c69      	adds	r1, r5, #1
 804445a:	d0ed      	beq.n	8044438 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 804445c:	b90d      	cbnz	r5, 8044462 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 804445e:	2003      	movs	r0, #3
}  
 8044460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8044462:	f7ff fad1 	bl	8043a08 <HAL_GetTick>
 8044466:	1bc0      	subs	r0, r0, r7
 8044468:	42a8      	cmp	r0, r5
 804446a:	d9e5      	bls.n	8044438 <FLASH_WaitForLastOperation+0x14>
 804446c:	e7f7      	b.n	804445e <FLASH_WaitForLastOperation+0x3a>
 804446e:	bf00      	nop
 8044470:	20005fcc 	.word	0x20005fcc
 8044474:	40023c00 	.word	0x40023c00

08044478 <HAL_FLASH_Program>:
{
 8044478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 804447c:	4d1f      	ldr	r5, [pc, #124]	; (80444fc <HAL_FLASH_Program+0x84>)
{
 804447e:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8044480:	7e2b      	ldrb	r3, [r5, #24]
 8044482:	2b01      	cmp	r3, #1
{
 8044484:	4607      	mov	r7, r0
 8044486:	460e      	mov	r6, r1
 8044488:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 804448a:	d035      	beq.n	80444f8 <HAL_FLASH_Program+0x80>
 804448c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804448e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8044492:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044494:	f7ff ffc6 	bl	8044424 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8044498:	b9b0      	cbnz	r0, 80444c8 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 804449a:	b9cf      	cbnz	r7, 80444d0 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804449c:	4b18      	ldr	r3, [pc, #96]	; (8044500 <HAL_FLASH_Program+0x88>)
 804449e:	691a      	ldr	r2, [r3, #16]
 80444a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80444a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80444a6:	691a      	ldr	r2, [r3, #16]
 80444a8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80444aa:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80444ac:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80444ae:	f042 0201 	orr.w	r2, r2, #1
 80444b2:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80444b4:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80444b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80444ba:	f7ff ffb3 	bl	8044424 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80444be:	4a10      	ldr	r2, [pc, #64]	; (8044500 <HAL_FLASH_Program+0x88>)
 80444c0:	6913      	ldr	r3, [r2, #16]
 80444c2:	f023 0301 	bic.w	r3, r3, #1
 80444c6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80444c8:	2300      	movs	r3, #0
 80444ca:	762b      	strb	r3, [r5, #24]
}
 80444cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80444d0:	2f01      	cmp	r7, #1
 80444d2:	d104      	bne.n	80444de <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80444d4:	b2a1      	uxth	r1, r4
 80444d6:	4630      	mov	r0, r6
 80444d8:	f7ff ff36 	bl	8044348 <FLASH_Program_HalfWord>
 80444dc:	e7eb      	b.n	80444b6 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80444de:	2f02      	cmp	r7, #2
 80444e0:	d104      	bne.n	80444ec <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80444e2:	4621      	mov	r1, r4
 80444e4:	4630      	mov	r0, r6
 80444e6:	f7ff ff1d 	bl	8044324 <FLASH_Program_Word>
 80444ea:	e7e4      	b.n	80444b6 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80444ec:	4622      	mov	r2, r4
 80444ee:	4643      	mov	r3, r8
 80444f0:	4630      	mov	r0, r6
 80444f2:	f7ff ff01 	bl	80442f8 <FLASH_Program_DoubleWord>
 80444f6:	e7de      	b.n	80444b6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80444f8:	2002      	movs	r0, #2
 80444fa:	e7e7      	b.n	80444cc <HAL_FLASH_Program+0x54>
 80444fc:	20005fcc 	.word	0x20005fcc
 8044500:	40023c00 	.word	0x40023c00

08044504 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044504:	4b07      	ldr	r3, [pc, #28]	; (8044524 <FLASH_MassErase.isra.0+0x20>)
 8044506:	691a      	ldr	r2, [r3, #16]
 8044508:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 804450c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 804450e:	691a      	ldr	r2, [r3, #16]
 8044510:	f042 0204 	orr.w	r2, r2, #4
 8044514:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8044516:	691a      	ldr	r2, [r3, #16]
 8044518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 804451c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8044520:	6118      	str	r0, [r3, #16]
}
 8044522:	4770      	bx	lr
 8044524:	40023c00 	.word	0x40023c00

08044528 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8044528:	b139      	cbz	r1, 804453a <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 804452a:	2901      	cmp	r1, #1
 804452c:	d01c      	beq.n	8044568 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 804452e:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8044530:	bf0c      	ite	eq
 8044532:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8044536:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804453a:	4b0d      	ldr	r3, [pc, #52]	; (8044570 <FLASH_Erase_Sector+0x48>)
 804453c:	691a      	ldr	r2, [r3, #16]
 804453e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8044542:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8044544:	691a      	ldr	r2, [r3, #16]
 8044546:	4311      	orrs	r1, r2
 8044548:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 804454a:	691a      	ldr	r2, [r3, #16]
 804454c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8044550:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8044552:	691a      	ldr	r2, [r3, #16]
 8044554:	f042 0202 	orr.w	r2, r2, #2
 8044558:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 804455c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 804455e:	691a      	ldr	r2, [r3, #16]
 8044560:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8044564:	611a      	str	r2, [r3, #16]
}
 8044566:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8044568:	f44f 7180 	mov.w	r1, #256	; 0x100
 804456c:	e7e5      	b.n	804453a <FLASH_Erase_Sector+0x12>
 804456e:	bf00      	nop
 8044570:	40023c00 	.word	0x40023c00

08044574 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8044574:	4b14      	ldr	r3, [pc, #80]	; (80445c8 <FLASH_FlushCaches+0x54>)
 8044576:	681a      	ldr	r2, [r3, #0]
 8044578:	0591      	lsls	r1, r2, #22
 804457a:	d50f      	bpl.n	804459c <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 804457c:	681a      	ldr	r2, [r3, #0]
 804457e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8044582:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8044584:	681a      	ldr	r2, [r3, #0]
 8044586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804458a:	601a      	str	r2, [r3, #0]
 804458c:	681a      	ldr	r2, [r3, #0]
 804458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044592:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044594:	681a      	ldr	r2, [r3, #0]
 8044596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804459a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804459c:	4b0a      	ldr	r3, [pc, #40]	; (80445c8 <FLASH_FlushCaches+0x54>)
 804459e:	681a      	ldr	r2, [r3, #0]
 80445a0:	0552      	lsls	r2, r2, #21
 80445a2:	d50f      	bpl.n	80445c4 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80445a4:	681a      	ldr	r2, [r3, #0]
 80445a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80445aa:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80445ac:	681a      	ldr	r2, [r3, #0]
 80445ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80445b2:	601a      	str	r2, [r3, #0]
 80445b4:	681a      	ldr	r2, [r3, #0]
 80445b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80445ba:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80445bc:	681a      	ldr	r2, [r3, #0]
 80445be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80445c2:	601a      	str	r2, [r3, #0]
  }
}
 80445c4:	4770      	bx	lr
 80445c6:	bf00      	nop
 80445c8:	40023c00 	.word	0x40023c00

080445cc <HAL_FLASHEx_Erase>:
{
 80445cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80445d0:	4e23      	ldr	r6, [pc, #140]	; (8044660 <HAL_FLASHEx_Erase+0x94>)
 80445d2:	7e33      	ldrb	r3, [r6, #24]
 80445d4:	2b01      	cmp	r3, #1
{
 80445d6:	4604      	mov	r4, r0
 80445d8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80445da:	d03f      	beq.n	804465c <HAL_FLASHEx_Erase+0x90>
 80445dc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80445de:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80445e2:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80445e4:	f7ff ff1e 	bl	8044424 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80445e8:	4605      	mov	r5, r0
 80445ea:	b9a8      	cbnz	r0, 8044618 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80445ec:	f04f 33ff 	mov.w	r3, #4294967295
 80445f0:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80445f4:	6823      	ldr	r3, [r4, #0]
 80445f6:	2b01      	cmp	r3, #1
 80445f8:	d113      	bne.n	8044622 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80445fa:	7c20      	ldrb	r0, [r4, #16]
 80445fc:	f7ff ff82 	bl	8044504 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044600:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044604:	f7ff ff0e 	bl	8044424 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8044608:	4a16      	ldr	r2, [pc, #88]	; (8044664 <HAL_FLASHEx_Erase+0x98>)
 804460a:	6913      	ldr	r3, [r2, #16]
 804460c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044610:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8044612:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8044614:	f7ff ffae 	bl	8044574 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8044618:	2300      	movs	r3, #0
 804461a:	7633      	strb	r3, [r6, #24]
}
 804461c:	4628      	mov	r0, r5
 804461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044622:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044624:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8044664 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044628:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 804462c:	4413      	add	r3, r2
 804462e:	42bb      	cmp	r3, r7
 8044630:	d9f0      	bls.n	8044614 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8044632:	7c21      	ldrb	r1, [r4, #16]
 8044634:	4638      	mov	r0, r7
 8044636:	f7ff ff77 	bl	8044528 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804463a:	f24c 3050 	movw	r0, #50000	; 0xc350
 804463e:	f7ff fef1 	bl	8044424 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044642:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8044646:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804464a:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 804464e:	b118      	cbz	r0, 8044658 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8044650:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044654:	4605      	mov	r5, r0
          break;
 8044656:	e7dd      	b.n	8044614 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044658:	3701      	adds	r7, #1
 804465a:	e7e5      	b.n	8044628 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 804465c:	2502      	movs	r5, #2
 804465e:	e7dd      	b.n	804461c <HAL_FLASHEx_Erase+0x50>
 8044660:	20005fcc 	.word	0x20005fcc
 8044664:	40023c00 	.word	0x40023c00

08044668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804466c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804466e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044670:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8044820 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044674:	4a68      	ldr	r2, [pc, #416]	; (8044818 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044676:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8044824 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804467a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804467c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 804467e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044680:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8044682:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044684:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8044686:	42ac      	cmp	r4, r5
 8044688:	f040 80b0 	bne.w	80447ec <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804468c:	684c      	ldr	r4, [r1, #4]
 804468e:	f024 0c10 	bic.w	ip, r4, #16
 8044692:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8044696:	2603      	movs	r6, #3
 8044698:	f10c 37ff 	add.w	r7, ip, #4294967295
 804469c:	fa06 f60e 	lsl.w	r6, r6, lr
 80446a0:	2f01      	cmp	r7, #1
 80446a2:	ea6f 0606 	mvn.w	r6, r6
 80446a6:	d811      	bhi.n	80446cc <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80446a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80446aa:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80446ae:	68cf      	ldr	r7, [r1, #12]
 80446b0:	fa07 f70e 	lsl.w	r7, r7, lr
 80446b4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80446b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80446ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80446bc:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80446c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80446c4:	409f      	lsls	r7, r3
 80446c6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80446ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80446cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80446ce:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80446d2:	688f      	ldr	r7, [r1, #8]
 80446d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80446d8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80446dc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80446e0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80446e2:	d116      	bne.n	8044712 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80446e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80446e8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80446ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80446f0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80446f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80446f8:	f04f 0c0f 	mov.w	ip, #15
 80446fc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8044700:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8044704:	690f      	ldr	r7, [r1, #16]
 8044706:	fa07 f70b 	lsl.w	r7, r7, fp
 804470a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 804470e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8044712:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8044714:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044716:	f004 0703 	and.w	r7, r4, #3
 804471a:	fa07 fe0e 	lsl.w	lr, r7, lr
 804471e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8044722:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8044724:	00e6      	lsls	r6, r4, #3
 8044726:	d561      	bpl.n	80447ec <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044728:	f04f 0b00 	mov.w	fp, #0
 804472c:	f8cd b00c 	str.w	fp, [sp, #12]
 8044730:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044734:	4e39      	ldr	r6, [pc, #228]	; (804481c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044736:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 804473a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 804473e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8044742:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8044746:	9703      	str	r7, [sp, #12]
 8044748:	9f03      	ldr	r7, [sp, #12]
 804474a:	f023 0703 	bic.w	r7, r3, #3
 804474e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8044752:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8044756:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 804475a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 804475e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8044762:	f04f 0c0f 	mov.w	ip, #15
 8044766:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804476a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 804476c:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044770:	d043      	beq.n	80447fa <HAL_GPIO_Init+0x192>
 8044772:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8044776:	42b0      	cmp	r0, r6
 8044778:	d041      	beq.n	80447fe <HAL_GPIO_Init+0x196>
 804477a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804477e:	42b0      	cmp	r0, r6
 8044780:	d03f      	beq.n	8044802 <HAL_GPIO_Init+0x19a>
 8044782:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8044786:	42b0      	cmp	r0, r6
 8044788:	d03d      	beq.n	8044806 <HAL_GPIO_Init+0x19e>
 804478a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804478e:	42b0      	cmp	r0, r6
 8044790:	d03b      	beq.n	804480a <HAL_GPIO_Init+0x1a2>
 8044792:	4548      	cmp	r0, r9
 8044794:	d03b      	beq.n	804480e <HAL_GPIO_Init+0x1a6>
 8044796:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 804479a:	42b0      	cmp	r0, r6
 804479c:	d039      	beq.n	8044812 <HAL_GPIO_Init+0x1aa>
 804479e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80447a2:	42b0      	cmp	r0, r6
 80447a4:	bf14      	ite	ne
 80447a6:	2608      	movne	r6, #8
 80447a8:	2607      	moveq	r6, #7
 80447aa:	fa06 f60e 	lsl.w	r6, r6, lr
 80447ae:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80447b2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80447b4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80447b6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80447b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80447bc:	bf0c      	ite	eq
 80447be:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80447c0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80447c2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80447c4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80447c6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80447ca:	bf0c      	ite	eq
 80447cc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80447ce:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80447d0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80447d2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80447d4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80447d8:	bf0c      	ite	eq
 80447da:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80447dc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80447de:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80447e0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80447e2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80447e4:	bf54      	ite	pl
 80447e6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80447e8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80447ea:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80447ec:	3301      	adds	r3, #1
 80447ee:	2b10      	cmp	r3, #16
 80447f0:	f47f af45 	bne.w	804467e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80447f4:	b005      	add	sp, #20
 80447f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80447fa:	465e      	mov	r6, fp
 80447fc:	e7d5      	b.n	80447aa <HAL_GPIO_Init+0x142>
 80447fe:	2601      	movs	r6, #1
 8044800:	e7d3      	b.n	80447aa <HAL_GPIO_Init+0x142>
 8044802:	2602      	movs	r6, #2
 8044804:	e7d1      	b.n	80447aa <HAL_GPIO_Init+0x142>
 8044806:	2603      	movs	r6, #3
 8044808:	e7cf      	b.n	80447aa <HAL_GPIO_Init+0x142>
 804480a:	2604      	movs	r6, #4
 804480c:	e7cd      	b.n	80447aa <HAL_GPIO_Init+0x142>
 804480e:	2605      	movs	r6, #5
 8044810:	e7cb      	b.n	80447aa <HAL_GPIO_Init+0x142>
 8044812:	2606      	movs	r6, #6
 8044814:	e7c9      	b.n	80447aa <HAL_GPIO_Init+0x142>
 8044816:	bf00      	nop
 8044818:	40013c00 	.word	0x40013c00
 804481c:	40020000 	.word	0x40020000
 8044820:	40023800 	.word	0x40023800
 8044824:	40021400 	.word	0x40021400

08044828 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8044828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 804482c:	4d40      	ldr	r5, [pc, #256]	; (8044930 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804482e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8044938 <HAL_GPIO_DeInit+0x110>
 8044832:	f8df a108 	ldr.w	sl, [pc, #264]	; 804493c <HAL_GPIO_DeInit+0x114>
 8044836:	f8df b108 	ldr.w	fp, [pc, #264]	; 8044940 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 804483a:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 804483c:	2301      	movs	r3, #1
 804483e:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8044842:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 8044846:	45a6      	cmp	lr, r4
 8044848:	d15f      	bne.n	804490a <HAL_GPIO_DeInit+0xe2>
 804484a:	f022 0603 	bic.w	r6, r2, #3
 804484e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8044852:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044856:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804485a:	4b36      	ldr	r3, [pc, #216]	; (8044934 <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 804485c:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044860:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8044864:	270f      	movs	r7, #15
 8044866:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804486a:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 804486c:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8044870:	d050      	beq.n	8044914 <HAL_GPIO_DeInit+0xec>
 8044872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8044876:	4298      	cmp	r0, r3
 8044878:	d04e      	beq.n	8044918 <HAL_GPIO_DeInit+0xf0>
 804487a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804487e:	4298      	cmp	r0, r3
 8044880:	d04c      	beq.n	804491c <HAL_GPIO_DeInit+0xf4>
 8044882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8044886:	4298      	cmp	r0, r3
 8044888:	d04a      	beq.n	8044920 <HAL_GPIO_DeInit+0xf8>
 804488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804488e:	4298      	cmp	r0, r3
 8044890:	d048      	beq.n	8044924 <HAL_GPIO_DeInit+0xfc>
 8044892:	4548      	cmp	r0, r9
 8044894:	d048      	beq.n	8044928 <HAL_GPIO_DeInit+0x100>
 8044896:	4550      	cmp	r0, sl
 8044898:	d048      	beq.n	804492c <HAL_GPIO_DeInit+0x104>
 804489a:	4558      	cmp	r0, fp
 804489c:	bf0c      	ite	eq
 804489e:	2307      	moveq	r3, #7
 80448a0:	2308      	movne	r3, #8
 80448a2:	fa03 f30c 	lsl.w	r3, r3, ip
 80448a6:	4543      	cmp	r3, r8
 80448a8:	d110      	bne.n	80448cc <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80448aa:	682b      	ldr	r3, [r5, #0]
 80448ac:	43e4      	mvns	r4, r4
 80448ae:	4023      	ands	r3, r4
 80448b0:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80448b2:	686b      	ldr	r3, [r5, #4]
 80448b4:	4023      	ands	r3, r4
 80448b6:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80448b8:	68ab      	ldr	r3, [r5, #8]
 80448ba:	4023      	ands	r3, r4
 80448bc:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80448be:	68eb      	ldr	r3, [r5, #12]
 80448c0:	401c      	ands	r4, r3
 80448c2:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80448c4:	68b3      	ldr	r3, [r6, #8]
 80448c6:	ea23 0707 	bic.w	r7, r3, r7
 80448ca:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80448cc:	0056      	lsls	r6, r2, #1
 80448ce:	2303      	movs	r3, #3
 80448d0:	6804      	ldr	r4, [r0, #0]
 80448d2:	40b3      	lsls	r3, r6
 80448d4:	43db      	mvns	r3, r3
 80448d6:	401c      	ands	r4, r3
 80448d8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80448da:	08d4      	lsrs	r4, r2, #3
 80448dc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80448e0:	f002 0c07 	and.w	ip, r2, #7
 80448e4:	6a26      	ldr	r6, [r4, #32]
 80448e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80448ea:	270f      	movs	r7, #15
 80448ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80448f0:	ea26 0707 	bic.w	r7, r6, r7
 80448f4:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80448f6:	68c4      	ldr	r4, [r0, #12]
 80448f8:	401c      	ands	r4, r3
 80448fa:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80448fc:	6844      	ldr	r4, [r0, #4]
 80448fe:	ea24 040e 	bic.w	r4, r4, lr
 8044902:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044904:	6884      	ldr	r4, [r0, #8]
 8044906:	4023      	ands	r3, r4
 8044908:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804490a:	3201      	adds	r2, #1
 804490c:	2a10      	cmp	r2, #16
 804490e:	d195      	bne.n	804483c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8044910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8044914:	2300      	movs	r3, #0
 8044916:	e7c4      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 8044918:	2301      	movs	r3, #1
 804491a:	e7c2      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 804491c:	2302      	movs	r3, #2
 804491e:	e7c0      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 8044920:	2303      	movs	r3, #3
 8044922:	e7be      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 8044924:	2304      	movs	r3, #4
 8044926:	e7bc      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 8044928:	2305      	movs	r3, #5
 804492a:	e7ba      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 804492c:	2306      	movs	r3, #6
 804492e:	e7b8      	b.n	80448a2 <HAL_GPIO_DeInit+0x7a>
 8044930:	40013c00 	.word	0x40013c00
 8044934:	40020000 	.word	0x40020000
 8044938:	40021400 	.word	0x40021400
 804493c:	40021800 	.word	0x40021800
 8044940:	40021c00 	.word	0x40021c00

08044944 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8044944:	6903      	ldr	r3, [r0, #16]
 8044946:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8044948:	bf14      	ite	ne
 804494a:	2001      	movne	r0, #1
 804494c:	2000      	moveq	r0, #0
 804494e:	4770      	bx	lr

08044950 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044950:	b10a      	cbz	r2, 8044956 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044952:	6181      	str	r1, [r0, #24]
  }
}
 8044954:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044956:	0409      	lsls	r1, r1, #16
 8044958:	e7fb      	b.n	8044952 <HAL_GPIO_WritePin+0x2>
	...

0804495c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 804495c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 804495e:	4b04      	ldr	r3, [pc, #16]	; (8044970 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8044960:	6959      	ldr	r1, [r3, #20]
 8044962:	4201      	tst	r1, r0
 8044964:	d002      	beq.n	804496c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8044966:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8044968:	f00b fa76 	bl	804fe58 <HAL_GPIO_EXTI_Callback>
  }
}
 804496c:	bd08      	pop	{r3, pc}
 804496e:	bf00      	nop
 8044970:	40013c00 	.word	0x40013c00

08044974 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8044974:	6801      	ldr	r1, [r0, #0]
 8044976:	694b      	ldr	r3, [r1, #20]
 8044978:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 804497c:	f04f 0200 	mov.w	r2, #0
 8044980:	d010      	beq.n	80449a4 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8044982:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8044986:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8044988:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 804498a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 804498c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044990:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8044994:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8044996:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 804499a:	f043 0304 	orr.w	r3, r3, #4
 804499e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80449a0:	2001      	movs	r0, #1
 80449a2:	4770      	bx	lr
  }
  return HAL_OK;
 80449a4:	4618      	mov	r0, r3
}
 80449a6:	4770      	bx	lr

080449a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80449a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80449ac:	4604      	mov	r4, r0
 80449ae:	4616      	mov	r6, r2
 80449b0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80449b2:	b28f      	uxth	r7, r1
 80449b4:	6825      	ldr	r5, [r4, #0]
 80449b6:	6968      	ldr	r0, [r5, #20]
 80449b8:	ea37 0000 	bics.w	r0, r7, r0
 80449bc:	d017      	beq.n	80449ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80449be:	696b      	ldr	r3, [r5, #20]
 80449c0:	055a      	lsls	r2, r3, #21
 80449c2:	d516      	bpl.n	80449f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80449c4:	682b      	ldr	r3, [r5, #0]
 80449c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80449ca:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80449cc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80449d0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80449d2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80449d4:	2300      	movs	r3, #0
 80449d6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80449d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80449dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80449e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80449e2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80449e6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80449e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80449ec:	2001      	movs	r0, #1
}
 80449ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80449f2:	1c73      	adds	r3, r6, #1
 80449f4:	d0df      	beq.n	80449b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80449f6:	f7ff f807 	bl	8043a08 <HAL_GetTick>
 80449fa:	eba0 0008 	sub.w	r0, r0, r8
 80449fe:	42b0      	cmp	r0, r6
 8044a00:	d801      	bhi.n	8044a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8044a02:	2e00      	cmp	r6, #0
 8044a04:	d1d6      	bne.n	80449b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8044a06:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8044a08:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8044a0a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8044a0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044a10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8044a14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8044a16:	f042 0220 	orr.w	r2, r2, #32
 8044a1a:	e7e4      	b.n	80449e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08044a1c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8044a1c:	b570      	push	{r4, r5, r6, lr}
 8044a1e:	4604      	mov	r4, r0
 8044a20:	460d      	mov	r5, r1
 8044a22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8044a24:	6823      	ldr	r3, [r4, #0]
 8044a26:	695b      	ldr	r3, [r3, #20]
 8044a28:	075b      	lsls	r3, r3, #29
 8044a2a:	d501      	bpl.n	8044a30 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8044a2c:	2000      	movs	r0, #0
}
 8044a2e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8044a30:	4620      	mov	r0, r4
 8044a32:	f7ff ff9f 	bl	8044974 <I2C_IsAcknowledgeFailed>
 8044a36:	b9a8      	cbnz	r0, 8044a64 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8044a38:	1c6a      	adds	r2, r5, #1
 8044a3a:	d0f3      	beq.n	8044a24 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044a3c:	f7fe ffe4 	bl	8043a08 <HAL_GetTick>
 8044a40:	1b80      	subs	r0, r0, r6
 8044a42:	42a8      	cmp	r0, r5
 8044a44:	d801      	bhi.n	8044a4a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8044a46:	2d00      	cmp	r5, #0
 8044a48:	d1ec      	bne.n	8044a24 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044a4a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8044a4c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044a4e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8044a50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044a54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044a58:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044a5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044a5e:	f042 0220 	orr.w	r2, r2, #32
 8044a62:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8044a64:	2001      	movs	r0, #1
 8044a66:	e7e2      	b.n	8044a2e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08044a68 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8044a68:	b570      	push	{r4, r5, r6, lr}
 8044a6a:	4604      	mov	r4, r0
 8044a6c:	460d      	mov	r5, r1
 8044a6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8044a70:	6820      	ldr	r0, [r4, #0]
 8044a72:	6943      	ldr	r3, [r0, #20]
 8044a74:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8044a78:	d001      	beq.n	8044a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8044a7a:	2000      	movs	r0, #0
 8044a7c:	e010      	b.n	8044aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8044a7e:	6942      	ldr	r2, [r0, #20]
 8044a80:	06d2      	lsls	r2, r2, #27
 8044a82:	d50e      	bpl.n	8044aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8044a84:	f06f 0210 	mvn.w	r2, #16
 8044a88:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8044a8a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8044a8c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8044a8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044a92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8044a96:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044a98:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044a9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8044a9e:	2001      	movs	r0, #1
}
 8044aa0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044aa2:	f7fe ffb1 	bl	8043a08 <HAL_GetTick>
 8044aa6:	1b80      	subs	r0, r0, r6
 8044aa8:	42a8      	cmp	r0, r5
 8044aaa:	d801      	bhi.n	8044ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8044aac:	2d00      	cmp	r5, #0
 8044aae:	d1df      	bne.n	8044a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044ab0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8044ab2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044ab4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8044ab6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044aba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044abe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8044ac0:	f042 0220 	orr.w	r2, r2, #32
 8044ac4:	e7e8      	b.n	8044a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08044ac6 <I2C_WaitOnFlagUntilTimeout>:
{
 8044ac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8044aca:	9e08      	ldr	r6, [sp, #32]
 8044acc:	4604      	mov	r4, r0
 8044ace:	4690      	mov	r8, r2
 8044ad0:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8044ad2:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8044ad6:	b28d      	uxth	r5, r1
 8044ad8:	6821      	ldr	r1, [r4, #0]
 8044ada:	f1b9 0f01 	cmp.w	r9, #1
 8044ade:	bf0c      	ite	eq
 8044ae0:	694b      	ldreq	r3, [r1, #20]
 8044ae2:	698b      	ldrne	r3, [r1, #24]
 8044ae4:	ea35 0303 	bics.w	r3, r5, r3
 8044ae8:	bf0c      	ite	eq
 8044aea:	2301      	moveq	r3, #1
 8044aec:	2300      	movne	r3, #0
 8044aee:	4598      	cmp	r8, r3
 8044af0:	d001      	beq.n	8044af6 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8044af2:	2000      	movs	r0, #0
 8044af4:	e016      	b.n	8044b24 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8044af6:	1c7b      	adds	r3, r7, #1
 8044af8:	d0ef      	beq.n	8044ada <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044afa:	f7fe ff85 	bl	8043a08 <HAL_GetTick>
 8044afe:	1b80      	subs	r0, r0, r6
 8044b00:	42b8      	cmp	r0, r7
 8044b02:	d801      	bhi.n	8044b08 <I2C_WaitOnFlagUntilTimeout+0x42>
 8044b04:	2f00      	cmp	r7, #0
 8044b06:	d1e7      	bne.n	8044ad8 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044b08:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8044b0a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044b0c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8044b0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044b12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044b18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044b1c:	f042 0220 	orr.w	r2, r2, #32
 8044b20:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044b22:	2001      	movs	r0, #1
}
 8044b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08044b28 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8044b28:	b570      	push	{r4, r5, r6, lr}
 8044b2a:	4604      	mov	r4, r0
 8044b2c:	460d      	mov	r5, r1
 8044b2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8044b30:	6823      	ldr	r3, [r4, #0]
 8044b32:	695b      	ldr	r3, [r3, #20]
 8044b34:	061b      	lsls	r3, r3, #24
 8044b36:	d501      	bpl.n	8044b3c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8044b38:	2000      	movs	r0, #0
}
 8044b3a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8044b3c:	4620      	mov	r0, r4
 8044b3e:	f7ff ff19 	bl	8044974 <I2C_IsAcknowledgeFailed>
 8044b42:	b9a8      	cbnz	r0, 8044b70 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8044b44:	1c6a      	adds	r2, r5, #1
 8044b46:	d0f3      	beq.n	8044b30 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044b48:	f7fe ff5e 	bl	8043a08 <HAL_GetTick>
 8044b4c:	1b80      	subs	r0, r0, r6
 8044b4e:	42a8      	cmp	r0, r5
 8044b50:	d801      	bhi.n	8044b56 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8044b52:	2d00      	cmp	r5, #0
 8044b54:	d1ec      	bne.n	8044b30 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044b56:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8044b58:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044b5a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8044b5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044b60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044b64:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044b66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044b6a:	f042 0220 	orr.w	r2, r2, #32
 8044b6e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8044b70:	2001      	movs	r0, #1
 8044b72:	e7e2      	b.n	8044b3a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08044b74 <I2C_RequestMemoryWrite>:
{
 8044b74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8044b78:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044b7a:	6802      	ldr	r2, [r0, #0]
{
 8044b7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8044b7e:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044b80:	6813      	ldr	r3, [r2, #0]
 8044b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044b86:	6013      	str	r3, [r2, #0]
{
 8044b88:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044b8c:	9600      	str	r6, [sp, #0]
 8044b8e:	2200      	movs	r2, #0
 8044b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8044b94:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044b96:	f7ff ff96 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8044b9a:	6823      	ldr	r3, [r4, #0]
 8044b9c:	b138      	cbz	r0, 8044bae <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8044b9e:	681b      	ldr	r3, [r3, #0]
 8044ba0:	05db      	lsls	r3, r3, #23
 8044ba2:	d502      	bpl.n	8044baa <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8044ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044ba8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8044baa:	2003      	movs	r0, #3
 8044bac:	e00a      	b.n	8044bc4 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8044bae:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8044bb2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8044bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044bb6:	4919      	ldr	r1, [pc, #100]	; (8044c1c <I2C_RequestMemoryWrite+0xa8>)
 8044bb8:	4633      	mov	r3, r6
 8044bba:	4620      	mov	r0, r4
 8044bbc:	f7ff fef4 	bl	80449a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8044bc0:	b118      	cbz	r0, 8044bca <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8044bc2:	2001      	movs	r0, #1
}
 8044bc4:	b004      	add	sp, #16
 8044bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044bca:	6823      	ldr	r3, [r4, #0]
 8044bcc:	9003      	str	r0, [sp, #12]
 8044bce:	695a      	ldr	r2, [r3, #20]
 8044bd0:	9203      	str	r2, [sp, #12]
 8044bd2:	699b      	ldr	r3, [r3, #24]
 8044bd4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044bd6:	4632      	mov	r2, r6
 8044bd8:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044bda:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044bdc:	4620      	mov	r0, r4
 8044bde:	f7ff ffa3 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044be2:	b140      	cbz	r0, 8044bf6 <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8044be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044be6:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044be8:	bf01      	itttt	eq
 8044bea:	6822      	ldreq	r2, [r4, #0]
 8044bec:	6813      	ldreq	r3, [r2, #0]
 8044bee:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8044bf2:	6013      	streq	r3, [r2, #0]
 8044bf4:	e7e5      	b.n	8044bc2 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8044bf6:	f1b8 0f01 	cmp.w	r8, #1
 8044bfa:	6823      	ldr	r3, [r4, #0]
 8044bfc:	d102      	bne.n	8044c04 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044bfe:	b2ed      	uxtb	r5, r5
 8044c00:	611d      	str	r5, [r3, #16]
 8044c02:	e7df      	b.n	8044bc4 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8044c04:	0a2a      	lsrs	r2, r5, #8
 8044c06:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044c08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044c0a:	4632      	mov	r2, r6
 8044c0c:	4620      	mov	r0, r4
 8044c0e:	f7ff ff8b 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044c12:	2800      	cmp	r0, #0
 8044c14:	d1e6      	bne.n	8044be4 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044c16:	6823      	ldr	r3, [r4, #0]
 8044c18:	e7f1      	b.n	8044bfe <I2C_RequestMemoryWrite+0x8a>
 8044c1a:	bf00      	nop
 8044c1c:	00010002 	.word	0x00010002

08044c20 <I2C_RequestMemoryRead>:
{
 8044c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8044c24:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044c26:	6803      	ldr	r3, [r0, #0]
{
 8044c28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8044c2a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044c2c:	681a      	ldr	r2, [r3, #0]
 8044c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8044c32:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044c34:	681a      	ldr	r2, [r3, #0]
 8044c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8044c3a:	601a      	str	r2, [r3, #0]
{
 8044c3c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044c40:	9500      	str	r5, [sp, #0]
 8044c42:	2200      	movs	r2, #0
 8044c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8044c48:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044c4a:	f7ff ff3c 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8044c4e:	6823      	ldr	r3, [r4, #0]
 8044c50:	b148      	cbz	r0, 8044c66 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8044c52:	681b      	ldr	r3, [r3, #0]
 8044c54:	05db      	lsls	r3, r3, #23
 8044c56:	d502      	bpl.n	8044c5e <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8044c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044c5c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8044c5e:	2003      	movs	r0, #3
}
 8044c60:	b004      	add	sp, #16
 8044c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8044c66:	b2ff      	uxtb	r7, r7
 8044c68:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8044c6c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8044c6e:	492a      	ldr	r1, [pc, #168]	; (8044d18 <I2C_RequestMemoryRead+0xf8>)
 8044c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044c72:	462b      	mov	r3, r5
 8044c74:	4620      	mov	r0, r4
 8044c76:	f7ff fe97 	bl	80449a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8044c7a:	b108      	cbz	r0, 8044c80 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8044c7c:	2001      	movs	r0, #1
 8044c7e:	e7ef      	b.n	8044c60 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044c80:	6823      	ldr	r3, [r4, #0]
 8044c82:	9003      	str	r0, [sp, #12]
 8044c84:	695a      	ldr	r2, [r3, #20]
 8044c86:	9203      	str	r2, [sp, #12]
 8044c88:	699b      	ldr	r3, [r3, #24]
 8044c8a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044c8c:	462a      	mov	r2, r5
 8044c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044c90:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044c92:	4620      	mov	r0, r4
 8044c94:	f7ff ff48 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044c98:	b140      	cbz	r0, 8044cac <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8044c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044c9c:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044c9e:	bf01      	itttt	eq
 8044ca0:	6822      	ldreq	r2, [r4, #0]
 8044ca2:	6813      	ldreq	r3, [r2, #0]
 8044ca4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8044ca8:	6013      	streq	r3, [r2, #0]
 8044caa:	e7e7      	b.n	8044c7c <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8044cac:	f1b8 0f01 	cmp.w	r8, #1
 8044cb0:	6823      	ldr	r3, [r4, #0]
 8044cb2:	d125      	bne.n	8044d00 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044cb4:	b2f6      	uxtb	r6, r6
 8044cb6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044cb8:	462a      	mov	r2, r5
 8044cba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044cbc:	4620      	mov	r0, r4
 8044cbe:	f7ff ff33 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044cc2:	4602      	mov	r2, r0
 8044cc4:	2800      	cmp	r0, #0
 8044cc6:	d1e8      	bne.n	8044c9a <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044cc8:	6821      	ldr	r1, [r4, #0]
 8044cca:	680b      	ldr	r3, [r1, #0]
 8044ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044cd0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044cd2:	4620      	mov	r0, r4
 8044cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044cd6:	9500      	str	r5, [sp, #0]
 8044cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8044cdc:	f7ff fef3 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8044ce0:	6823      	ldr	r3, [r4, #0]
 8044ce2:	2800      	cmp	r0, #0
 8044ce4:	d1b5      	bne.n	8044c52 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8044ce6:	f047 0701 	orr.w	r7, r7, #1
 8044cea:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8044cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044cee:	490a      	ldr	r1, [pc, #40]	; (8044d18 <I2C_RequestMemoryRead+0xf8>)
 8044cf0:	462b      	mov	r3, r5
 8044cf2:	4620      	mov	r0, r4
 8044cf4:	f7ff fe58 	bl	80449a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8044cf8:	3000      	adds	r0, #0
 8044cfa:	bf18      	it	ne
 8044cfc:	2001      	movne	r0, #1
 8044cfe:	e7af      	b.n	8044c60 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8044d00:	0a32      	lsrs	r2, r6, #8
 8044d02:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044d04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044d06:	462a      	mov	r2, r5
 8044d08:	4620      	mov	r0, r4
 8044d0a:	f7ff ff0d 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044d0e:	2800      	cmp	r0, #0
 8044d10:	d1c3      	bne.n	8044c9a <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044d12:	6823      	ldr	r3, [r4, #0]
 8044d14:	e7ce      	b.n	8044cb4 <I2C_RequestMemoryRead+0x94>
 8044d16:	bf00      	nop
 8044d18:	00010002 	.word	0x00010002

08044d1c <HAL_I2C_Init>:
{
 8044d1c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8044d1e:	4604      	mov	r4, r0
 8044d20:	b908      	cbnz	r0, 8044d26 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8044d22:	2001      	movs	r0, #1
}
 8044d24:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8044d26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8044d2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044d2e:	b91b      	cbnz	r3, 8044d38 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8044d30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8044d34:	f00a ffb6 	bl	804fca4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8044d38:	2324      	movs	r3, #36	; 0x24
 8044d3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8044d3e:	6823      	ldr	r3, [r4, #0]
 8044d40:	681a      	ldr	r2, [r3, #0]
 8044d42:	f022 0201 	bic.w	r2, r2, #1
 8044d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8044d48:	681a      	ldr	r2, [r3, #0]
 8044d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8044d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8044d50:	681a      	ldr	r2, [r3, #0]
 8044d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8044d56:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8044d58:	f000 fcbe 	bl	80456d8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044d5c:	6863      	ldr	r3, [r4, #4]
 8044d5e:	4a41      	ldr	r2, [pc, #260]	; (8044e64 <HAL_I2C_Init+0x148>)
 8044d60:	4293      	cmp	r3, r2
 8044d62:	d84d      	bhi.n	8044e00 <HAL_I2C_Init+0xe4>
 8044d64:	4a40      	ldr	r2, [pc, #256]	; (8044e68 <HAL_I2C_Init+0x14c>)
 8044d66:	4290      	cmp	r0, r2
 8044d68:	d9db      	bls.n	8044d22 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044d6a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8044d6c:	493f      	ldr	r1, [pc, #252]	; (8044e6c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044d6e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8044d70:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044d74:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044d78:	430d      	orrs	r5, r1
 8044d7a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044d7c:	6a15      	ldr	r5, [r2, #32]
 8044d7e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044d82:	3101      	adds	r1, #1
 8044d84:	4329      	orrs	r1, r5
 8044d86:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044d88:	69d1      	ldr	r1, [r2, #28]
 8044d8a:	4d36      	ldr	r5, [pc, #216]	; (8044e64 <HAL_I2C_Init+0x148>)
 8044d8c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8044d90:	42ab      	cmp	r3, r5
 8044d92:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044d96:	f100 30ff 	add.w	r0, r0, #4294967295
 8044d9a:	d848      	bhi.n	8044e2e <HAL_I2C_Init+0x112>
 8044d9c:	005b      	lsls	r3, r3, #1
 8044d9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8044da2:	1c43      	adds	r3, r0, #1
 8044da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044da8:	2b04      	cmp	r3, #4
 8044daa:	bf38      	it	cc
 8044dac:	2304      	movcc	r3, #4
 8044dae:	430b      	orrs	r3, r1
 8044db0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8044db2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8044db6:	6811      	ldr	r1, [r2, #0]
 8044db8:	4303      	orrs	r3, r0
 8044dba:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8044dbe:	430b      	orrs	r3, r1
 8044dc0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8044dc2:	6891      	ldr	r1, [r2, #8]
 8044dc4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8044dc8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8044dcc:	4303      	orrs	r3, r0
 8044dce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044dd2:	430b      	orrs	r3, r1
 8044dd4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8044dd6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8044dda:	68d1      	ldr	r1, [r2, #12]
 8044ddc:	4303      	orrs	r3, r0
 8044dde:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044de2:	430b      	orrs	r3, r1
 8044de4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8044de6:	6813      	ldr	r3, [r2, #0]
 8044de8:	f043 0301 	orr.w	r3, r3, #1
 8044dec:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044dee:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8044df0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044df2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8044df4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8044df8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8044dfa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8044dfe:	e791      	b.n	8044d24 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044e00:	4a1b      	ldr	r2, [pc, #108]	; (8044e70 <HAL_I2C_Init+0x154>)
 8044e02:	4290      	cmp	r0, r2
 8044e04:	d98d      	bls.n	8044d22 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044e06:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8044e08:	4e18      	ldr	r6, [pc, #96]	; (8044e6c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044e0a:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8044e0c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044e10:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044e14:	4335      	orrs	r5, r6
 8044e16:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044e18:	6a15      	ldr	r5, [r2, #32]
 8044e1a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8044e1e:	4371      	muls	r1, r6
 8044e20:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044e24:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8044e28:	fbb1 f1f6 	udiv	r1, r1, r6
 8044e2c:	e7a9      	b.n	8044d82 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044e2e:	68a5      	ldr	r5, [r4, #8]
 8044e30:	b955      	cbnz	r5, 8044e48 <HAL_I2C_Init+0x12c>
 8044e32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8044e36:	fbb0 f0f3 	udiv	r0, r0, r3
 8044e3a:	1c43      	adds	r3, r0, #1
 8044e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044e40:	b16b      	cbz	r3, 8044e5e <HAL_I2C_Init+0x142>
 8044e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8044e46:	e7b2      	b.n	8044dae <HAL_I2C_Init+0x92>
 8044e48:	2519      	movs	r5, #25
 8044e4a:	436b      	muls	r3, r5
 8044e4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8044e50:	1c43      	adds	r3, r0, #1
 8044e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044e56:	b113      	cbz	r3, 8044e5e <HAL_I2C_Init+0x142>
 8044e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8044e5c:	e7a7      	b.n	8044dae <HAL_I2C_Init+0x92>
 8044e5e:	2301      	movs	r3, #1
 8044e60:	e7a5      	b.n	8044dae <HAL_I2C_Init+0x92>
 8044e62:	bf00      	nop
 8044e64:	000186a0 	.word	0x000186a0
 8044e68:	001e847f 	.word	0x001e847f
 8044e6c:	000f4240 	.word	0x000f4240
 8044e70:	003d08ff 	.word	0x003d08ff

08044e74 <HAL_I2C_Mem_Write>:
{
 8044e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8044e78:	4604      	mov	r4, r0
 8044e7a:	4699      	mov	r9, r3
 8044e7c:	460f      	mov	r7, r1
 8044e7e:	4690      	mov	r8, r2
 8044e80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8044e82:	f7fe fdc1 	bl	8043a08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044e86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8044e8a:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8044e8c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044e8e:	d003      	beq.n	8044e98 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8044e90:	2002      	movs	r0, #2
}
 8044e92:	b003      	add	sp, #12
 8044e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8044e98:	9000      	str	r0, [sp, #0]
 8044e9a:	2319      	movs	r3, #25
 8044e9c:	2201      	movs	r2, #1
 8044e9e:	493b      	ldr	r1, [pc, #236]	; (8044f8c <HAL_I2C_Mem_Write+0x118>)
 8044ea0:	4620      	mov	r0, r4
 8044ea2:	f7ff fe10 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8044ea6:	2800      	cmp	r0, #0
 8044ea8:	d1f2      	bne.n	8044e90 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8044eaa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8044eae:	2b01      	cmp	r3, #1
 8044eb0:	d0ee      	beq.n	8044e90 <HAL_I2C_Mem_Write+0x1c>
 8044eb2:	2301      	movs	r3, #1
 8044eb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8044eb8:	6823      	ldr	r3, [r4, #0]
 8044eba:	681a      	ldr	r2, [r3, #0]
 8044ebc:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8044ebe:	bf5e      	ittt	pl
 8044ec0:	681a      	ldrpl	r2, [r3, #0]
 8044ec2:	f042 0201 	orrpl.w	r2, r2, #1
 8044ec6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8044ec8:	681a      	ldr	r2, [r3, #0]
 8044eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044ece:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8044ed0:	2321      	movs	r3, #33	; 0x21
 8044ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8044ed6:	2340      	movs	r3, #64	; 0x40
 8044ed8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044edc:	2300      	movs	r3, #0
 8044ede:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8044ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044ee2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8044ee4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8044ee8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8044eea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044eec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8044eee:	4b28      	ldr	r3, [pc, #160]	; (8044f90 <HAL_I2C_Mem_Write+0x11c>)
 8044ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8044ef2:	e9cd 6500 	strd	r6, r5, [sp]
 8044ef6:	464b      	mov	r3, r9
 8044ef8:	4642      	mov	r2, r8
 8044efa:	4639      	mov	r1, r7
 8044efc:	4620      	mov	r0, r4
 8044efe:	f7ff fe39 	bl	8044b74 <I2C_RequestMemoryWrite>
 8044f02:	2800      	cmp	r0, #0
 8044f04:	d02a      	beq.n	8044f5c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8044f06:	2001      	movs	r0, #1
 8044f08:	e7c3      	b.n	8044e92 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044f0a:	f7ff fe0d 	bl	8044b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8044f0e:	b140      	cbz	r0, 8044f22 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8044f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044f12:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044f14:	bf01      	itttt	eq
 8044f16:	6822      	ldreq	r2, [r4, #0]
 8044f18:	6813      	ldreq	r3, [r2, #0]
 8044f1a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8044f1e:	6013      	streq	r3, [r2, #0]
 8044f20:	e7f1      	b.n	8044f06 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8044f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044f24:	6827      	ldr	r7, [r4, #0]
 8044f26:	461a      	mov	r2, r3
 8044f28:	f812 1b01 	ldrb.w	r1, [r2], #1
 8044f2c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8044f2e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8044f30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8044f32:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8044f34:	3a01      	subs	r2, #1
 8044f36:	b292      	uxth	r2, r2
 8044f38:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044f3a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8044f3c:	1e48      	subs	r0, r1, #1
 8044f3e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044f40:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8044f42:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044f44:	d50a      	bpl.n	8044f5c <HAL_I2C_Mem_Write+0xe8>
 8044f46:	b148      	cbz	r0, 8044f5c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8044f48:	785a      	ldrb	r2, [r3, #1]
 8044f4a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8044f4c:	3302      	adds	r3, #2
 8044f4e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8044f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044f52:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8044f54:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8044f56:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8044f58:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8044f5a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8044f5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044f5e:	462a      	mov	r2, r5
 8044f60:	4631      	mov	r1, r6
 8044f62:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8044f64:	2b00      	cmp	r3, #0
 8044f66:	d1d0      	bne.n	8044f0a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044f68:	f7ff fd58 	bl	8044a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8044f6c:	2800      	cmp	r0, #0
 8044f6e:	d1cf      	bne.n	8044f10 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044f70:	6822      	ldr	r2, [r4, #0]
 8044f72:	6813      	ldr	r3, [r2, #0]
 8044f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044f78:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8044f7a:	2320      	movs	r3, #32
 8044f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8044f80:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8044f84:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8044f88:	e783      	b.n	8044e92 <HAL_I2C_Mem_Write+0x1e>
 8044f8a:	bf00      	nop
 8044f8c:	00100002 	.word	0x00100002
 8044f90:	ffff0000 	.word	0xffff0000

08044f94 <HAL_I2C_Mem_Read>:
{
 8044f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044f98:	4604      	mov	r4, r0
 8044f9a:	b087      	sub	sp, #28
 8044f9c:	4699      	mov	r9, r3
 8044f9e:	460d      	mov	r5, r1
 8044fa0:	4690      	mov	r8, r2
 8044fa2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8044fa4:	f7fe fd30 	bl	8043a08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044fa8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8044fac:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8044fae:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044fb0:	d004      	beq.n	8044fbc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8044fb2:	2502      	movs	r5, #2
}
 8044fb4:	4628      	mov	r0, r5
 8044fb6:	b007      	add	sp, #28
 8044fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8044fbc:	9000      	str	r0, [sp, #0]
 8044fbe:	2319      	movs	r3, #25
 8044fc0:	2201      	movs	r2, #1
 8044fc2:	4977      	ldr	r1, [pc, #476]	; (80451a0 <HAL_I2C_Mem_Read+0x20c>)
 8044fc4:	4620      	mov	r0, r4
 8044fc6:	f7ff fd7e 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8044fca:	2800      	cmp	r0, #0
 8044fcc:	d1f1      	bne.n	8044fb2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8044fce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8044fd2:	2b01      	cmp	r3, #1
 8044fd4:	d0ed      	beq.n	8044fb2 <HAL_I2C_Mem_Read+0x1e>
 8044fd6:	2301      	movs	r3, #1
 8044fd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8044fdc:	6823      	ldr	r3, [r4, #0]
 8044fde:	681a      	ldr	r2, [r3, #0]
 8044fe0:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8044fe2:	bf5e      	ittt	pl
 8044fe4:	681a      	ldrpl	r2, [r3, #0]
 8044fe6:	f042 0201 	orrpl.w	r2, r2, #1
 8044fea:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8044fec:	681a      	ldr	r2, [r3, #0]
 8044fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044ff2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8044ff4:	2322      	movs	r3, #34	; 0x22
 8044ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8044ffa:	2340      	movs	r3, #64	; 0x40
 8044ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045000:	2300      	movs	r3, #0
 8045002:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8045004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8045006:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8045008:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 804500c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 804500e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8045010:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8045012:	4b64      	ldr	r3, [pc, #400]	; (80451a4 <HAL_I2C_Mem_Read+0x210>)
 8045014:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8045016:	4629      	mov	r1, r5
 8045018:	e9cd 7600 	strd	r7, r6, [sp]
 804501c:	464b      	mov	r3, r9
 804501e:	4642      	mov	r2, r8
 8045020:	4620      	mov	r0, r4
 8045022:	f7ff fdfd 	bl	8044c20 <I2C_RequestMemoryRead>
 8045026:	4605      	mov	r5, r0
 8045028:	b108      	cbz	r0, 804502e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 804502a:	2501      	movs	r5, #1
 804502c:	e7c2      	b.n	8044fb4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 804502e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8045030:	6823      	ldr	r3, [r4, #0]
 8045032:	b992      	cbnz	r2, 804505a <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8045034:	9002      	str	r0, [sp, #8]
 8045036:	695a      	ldr	r2, [r3, #20]
 8045038:	9202      	str	r2, [sp, #8]
 804503a:	699a      	ldr	r2, [r3, #24]
 804503c:	9202      	str	r2, [sp, #8]
 804503e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045040:	681a      	ldr	r2, [r3, #0]
 8045042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045046:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8045048:	2320      	movs	r3, #32
 804504a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804504e:	2300      	movs	r3, #0
 8045050:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8045054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8045058:	e7ac      	b.n	8044fb4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 804505a:	2a01      	cmp	r2, #1
 804505c:	d12c      	bne.n	80450b8 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804505e:	681a      	ldr	r2, [r3, #0]
 8045060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8045064:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8045066:	9003      	str	r0, [sp, #12]
 8045068:	695a      	ldr	r2, [r3, #20]
 804506a:	9203      	str	r2, [sp, #12]
 804506c:	699a      	ldr	r2, [r3, #24]
 804506e:	9203      	str	r2, [sp, #12]
 8045070:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045072:	681a      	ldr	r2, [r3, #0]
 8045074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045078:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804507a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80451a8 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 804507e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8045080:	2b00      	cmp	r3, #0
 8045082:	d0e1      	beq.n	8045048 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8045084:	2b03      	cmp	r3, #3
 8045086:	d86e      	bhi.n	8045166 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8045088:	2b01      	cmp	r3, #1
 804508a:	d12d      	bne.n	80450e8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804508c:	4632      	mov	r2, r6
 804508e:	4639      	mov	r1, r7
 8045090:	4620      	mov	r0, r4
 8045092:	f7ff fce9 	bl	8044a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8045096:	2800      	cmp	r0, #0
 8045098:	d1c7      	bne.n	804502a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804509a:	6823      	ldr	r3, [r4, #0]
 804509c:	691a      	ldr	r2, [r3, #16]
 804509e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80450a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80450a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80450a4:	3301      	adds	r3, #1
 80450a6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80450a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80450aa:	3b01      	subs	r3, #1
 80450ac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80450ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80450b0:	3b01      	subs	r3, #1
 80450b2:	b29b      	uxth	r3, r3
 80450b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80450b6:	e7e2      	b.n	804507e <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80450b8:	2a02      	cmp	r2, #2
 80450ba:	d10e      	bne.n	80450da <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80450bc:	681a      	ldr	r2, [r3, #0]
 80450be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80450c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80450c4:	681a      	ldr	r2, [r3, #0]
 80450c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80450ca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80450cc:	9004      	str	r0, [sp, #16]
 80450ce:	695a      	ldr	r2, [r3, #20]
 80450d0:	9204      	str	r2, [sp, #16]
 80450d2:	699b      	ldr	r3, [r3, #24]
 80450d4:	9304      	str	r3, [sp, #16]
 80450d6:	9b04      	ldr	r3, [sp, #16]
 80450d8:	e7cf      	b.n	804507a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80450da:	9005      	str	r0, [sp, #20]
 80450dc:	695a      	ldr	r2, [r3, #20]
 80450de:	9205      	str	r2, [sp, #20]
 80450e0:	699b      	ldr	r3, [r3, #24]
 80450e2:	9305      	str	r3, [sp, #20]
 80450e4:	9b05      	ldr	r3, [sp, #20]
 80450e6:	e7c8      	b.n	804507a <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 80450e8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80450ea:	9600      	str	r6, [sp, #0]
 80450ec:	463b      	mov	r3, r7
 80450ee:	f04f 0200 	mov.w	r2, #0
 80450f2:	4641      	mov	r1, r8
 80450f4:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80450f6:	d119      	bne.n	804512c <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80450f8:	f7ff fce5 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 80450fc:	2800      	cmp	r0, #0
 80450fe:	d194      	bne.n	804502a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045100:	6823      	ldr	r3, [r4, #0]
 8045102:	681a      	ldr	r2, [r3, #0]
 8045104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045108:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804510a:	691a      	ldr	r2, [r3, #16]
 804510c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804510e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8045110:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8045112:	1c53      	adds	r3, r2, #1
 8045114:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8045116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8045118:	3b01      	subs	r3, #1
 804511a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 804511c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804511e:	3b01      	subs	r3, #1
 8045120:	b29b      	uxth	r3, r3
 8045122:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8045124:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8045126:	691b      	ldr	r3, [r3, #16]
 8045128:	7053      	strb	r3, [r2, #1]
 804512a:	e7ba      	b.n	80450a2 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804512c:	f7ff fccb 	bl	8044ac6 <I2C_WaitOnFlagUntilTimeout>
 8045130:	4602      	mov	r2, r0
 8045132:	2800      	cmp	r0, #0
 8045134:	f47f af79 	bne.w	804502a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8045138:	6823      	ldr	r3, [r4, #0]
 804513a:	6819      	ldr	r1, [r3, #0]
 804513c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8045140:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8045142:	6919      	ldr	r1, [r3, #16]
 8045144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8045146:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8045148:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804514a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 804514c:	3301      	adds	r3, #1
 804514e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8045150:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8045152:	3b01      	subs	r3, #1
 8045154:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8045156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8045158:	3b01      	subs	r3, #1
 804515a:	b29b      	uxth	r3, r3
 804515c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 804515e:	4641      	mov	r1, r8
 8045160:	463b      	mov	r3, r7
 8045162:	4620      	mov	r0, r4
 8045164:	e7c8      	b.n	80450f8 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8045166:	4632      	mov	r2, r6
 8045168:	4639      	mov	r1, r7
 804516a:	4620      	mov	r0, r4
 804516c:	f7ff fc7c 	bl	8044a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8045170:	2800      	cmp	r0, #0
 8045172:	f47f af5a 	bne.w	804502a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8045176:	6823      	ldr	r3, [r4, #0]
 8045178:	691a      	ldr	r2, [r3, #16]
 804517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804517c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 804517e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8045180:	1c53      	adds	r3, r2, #1
 8045182:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8045184:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8045186:	3b01      	subs	r3, #1
 8045188:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 804518a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804518c:	3b01      	subs	r3, #1
 804518e:	b29b      	uxth	r3, r3
 8045190:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8045192:	6823      	ldr	r3, [r4, #0]
 8045194:	6959      	ldr	r1, [r3, #20]
 8045196:	0749      	lsls	r1, r1, #29
 8045198:	f57f af71 	bpl.w	804507e <HAL_I2C_Mem_Read+0xea>
 804519c:	e7c3      	b.n	8045126 <HAL_I2C_Mem_Read+0x192>
 804519e:	bf00      	nop
 80451a0:	00100002 	.word	0x00100002
 80451a4:	ffff0000 	.word	0xffff0000
 80451a8:	00010004 	.word	0x00010004

080451ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80451ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80451ae:	4604      	mov	r4, r0
 80451b0:	b1d8      	cbz	r0, 80451ea <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80451b2:	6803      	ldr	r3, [r0, #0]
 80451b4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80451b8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80451ba:	f245 5255 	movw	r2, #21845	; 0x5555
 80451be:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80451c0:	6842      	ldr	r2, [r0, #4]
 80451c2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80451c4:	6882      	ldr	r2, [r0, #8]
 80451c6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80451c8:	f7fe fc1e 	bl	8043a08 <HAL_GetTick>
 80451cc:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80451ce:	6823      	ldr	r3, [r4, #0]
 80451d0:	68d8      	ldr	r0, [r3, #12]
 80451d2:	b918      	cbnz	r0, 80451dc <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80451d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80451d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80451da:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80451dc:	f7fe fc14 	bl	8043a08 <HAL_GetTick>
 80451e0:	1b40      	subs	r0, r0, r5
 80451e2:	2830      	cmp	r0, #48	; 0x30
 80451e4:	d9f3      	bls.n	80451ce <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 80451e6:	2003      	movs	r0, #3
 80451e8:	e7f7      	b.n	80451da <HAL_IWDG_Init+0x2e>
    return HAL_ERROR;
 80451ea:	2001      	movs	r0, #1
 80451ec:	e7f5      	b.n	80451da <HAL_IWDG_Init+0x2e>

080451ee <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80451ee:	6803      	ldr	r3, [r0, #0]
 80451f0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80451f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80451f6:	2000      	movs	r0, #0
 80451f8:	4770      	bx	lr
	...

080451fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80451fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8045200:	4604      	mov	r4, r0
 8045202:	b908      	cbnz	r0, 8045208 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8045204:	2001      	movs	r0, #1
 8045206:	e03f      	b.n	8045288 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8045208:	6803      	ldr	r3, [r0, #0]
 804520a:	07dd      	lsls	r5, r3, #31
 804520c:	d410      	bmi.n	8045230 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804520e:	6823      	ldr	r3, [r4, #0]
 8045210:	0798      	lsls	r0, r3, #30
 8045212:	d45a      	bmi.n	80452ca <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8045214:	6823      	ldr	r3, [r4, #0]
 8045216:	071a      	lsls	r2, r3, #28
 8045218:	f100 809c 	bmi.w	8045354 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804521c:	6823      	ldr	r3, [r4, #0]
 804521e:	075b      	lsls	r3, r3, #29
 8045220:	f100 80ba 	bmi.w	8045398 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8045224:	69a0      	ldr	r0, [r4, #24]
 8045226:	2800      	cmp	r0, #0
 8045228:	f040 811b 	bne.w	8045462 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 804522c:	2000      	movs	r0, #0
 804522e:	e02b      	b.n	8045288 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8045230:	4ba7      	ldr	r3, [pc, #668]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 8045232:	689a      	ldr	r2, [r3, #8]
 8045234:	f002 020c 	and.w	r2, r2, #12
 8045238:	2a04      	cmp	r2, #4
 804523a:	d007      	beq.n	804524c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804523c:	689a      	ldr	r2, [r3, #8]
 804523e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8045242:	2a08      	cmp	r2, #8
 8045244:	d10a      	bne.n	804525c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8045246:	685b      	ldr	r3, [r3, #4]
 8045248:	0259      	lsls	r1, r3, #9
 804524a:	d507      	bpl.n	804525c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804524c:	4ba0      	ldr	r3, [pc, #640]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 804524e:	681b      	ldr	r3, [r3, #0]
 8045250:	039a      	lsls	r2, r3, #14
 8045252:	d5dc      	bpl.n	804520e <HAL_RCC_OscConfig+0x12>
 8045254:	6863      	ldr	r3, [r4, #4]
 8045256:	2b00      	cmp	r3, #0
 8045258:	d1d9      	bne.n	804520e <HAL_RCC_OscConfig+0x12>
 804525a:	e7d3      	b.n	8045204 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804525c:	6863      	ldr	r3, [r4, #4]
 804525e:	4d9c      	ldr	r5, [pc, #624]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 8045260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8045264:	d113      	bne.n	804528e <HAL_RCC_OscConfig+0x92>
 8045266:	682b      	ldr	r3, [r5, #0]
 8045268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804526c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 804526e:	f7fe fbcb 	bl	8043a08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045272:	4d97      	ldr	r5, [pc, #604]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8045274:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045276:	682b      	ldr	r3, [r5, #0]
 8045278:	039b      	lsls	r3, r3, #14
 804527a:	d4c8      	bmi.n	804520e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804527c:	f7fe fbc4 	bl	8043a08 <HAL_GetTick>
 8045280:	1b80      	subs	r0, r0, r6
 8045282:	2864      	cmp	r0, #100	; 0x64
 8045284:	d9f7      	bls.n	8045276 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8045286:	2003      	movs	r0, #3
}
 8045288:	b002      	add	sp, #8
 804528a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804528e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8045292:	d104      	bne.n	804529e <HAL_RCC_OscConfig+0xa2>
 8045294:	682b      	ldr	r3, [r5, #0]
 8045296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804529a:	602b      	str	r3, [r5, #0]
 804529c:	e7e3      	b.n	8045266 <HAL_RCC_OscConfig+0x6a>
 804529e:	682a      	ldr	r2, [r5, #0]
 80452a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80452a4:	602a      	str	r2, [r5, #0]
 80452a6:	682a      	ldr	r2, [r5, #0]
 80452a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80452ac:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80452ae:	2b00      	cmp	r3, #0
 80452b0:	d1dd      	bne.n	804526e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80452b2:	f7fe fba9 	bl	8043a08 <HAL_GetTick>
 80452b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80452b8:	682b      	ldr	r3, [r5, #0]
 80452ba:	039f      	lsls	r7, r3, #14
 80452bc:	d5a7      	bpl.n	804520e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80452be:	f7fe fba3 	bl	8043a08 <HAL_GetTick>
 80452c2:	1b80      	subs	r0, r0, r6
 80452c4:	2864      	cmp	r0, #100	; 0x64
 80452c6:	d9f7      	bls.n	80452b8 <HAL_RCC_OscConfig+0xbc>
 80452c8:	e7dd      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80452ca:	4b81      	ldr	r3, [pc, #516]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 80452cc:	689a      	ldr	r2, [r3, #8]
 80452ce:	f012 0f0c 	tst.w	r2, #12
 80452d2:	d007      	beq.n	80452e4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80452d4:	689a      	ldr	r2, [r3, #8]
 80452d6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80452da:	2a08      	cmp	r2, #8
 80452dc:	d111      	bne.n	8045302 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80452de:	685b      	ldr	r3, [r3, #4]
 80452e0:	025e      	lsls	r6, r3, #9
 80452e2:	d40e      	bmi.n	8045302 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80452e4:	4b7a      	ldr	r3, [pc, #488]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 80452e6:	681a      	ldr	r2, [r3, #0]
 80452e8:	0795      	lsls	r5, r2, #30
 80452ea:	d502      	bpl.n	80452f2 <HAL_RCC_OscConfig+0xf6>
 80452ec:	68e2      	ldr	r2, [r4, #12]
 80452ee:	2a01      	cmp	r2, #1
 80452f0:	d188      	bne.n	8045204 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80452f2:	681a      	ldr	r2, [r3, #0]
 80452f4:	6921      	ldr	r1, [r4, #16]
 80452f6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80452fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80452fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8045300:	e788      	b.n	8045214 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8045302:	68e2      	ldr	r2, [r4, #12]
 8045304:	4b73      	ldr	r3, [pc, #460]	; (80454d4 <HAL_RCC_OscConfig+0x2d8>)
 8045306:	b1b2      	cbz	r2, 8045336 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8045308:	2201      	movs	r2, #1
 804530a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 804530c:	f7fe fb7c 	bl	8043a08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045310:	4d6f      	ldr	r5, [pc, #444]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8045312:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045314:	682b      	ldr	r3, [r5, #0]
 8045316:	0798      	lsls	r0, r3, #30
 8045318:	d507      	bpl.n	804532a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804531a:	682b      	ldr	r3, [r5, #0]
 804531c:	6922      	ldr	r2, [r4, #16]
 804531e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8045322:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8045326:	602b      	str	r3, [r5, #0]
 8045328:	e774      	b.n	8045214 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804532a:	f7fe fb6d 	bl	8043a08 <HAL_GetTick>
 804532e:	1b80      	subs	r0, r0, r6
 8045330:	2802      	cmp	r0, #2
 8045332:	d9ef      	bls.n	8045314 <HAL_RCC_OscConfig+0x118>
 8045334:	e7a7      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8045336:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8045338:	f7fe fb66 	bl	8043a08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804533c:	4d64      	ldr	r5, [pc, #400]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 804533e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8045340:	682b      	ldr	r3, [r5, #0]
 8045342:	0799      	lsls	r1, r3, #30
 8045344:	f57f af66 	bpl.w	8045214 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8045348:	f7fe fb5e 	bl	8043a08 <HAL_GetTick>
 804534c:	1b80      	subs	r0, r0, r6
 804534e:	2802      	cmp	r0, #2
 8045350:	d9f6      	bls.n	8045340 <HAL_RCC_OscConfig+0x144>
 8045352:	e798      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8045354:	6962      	ldr	r2, [r4, #20]
 8045356:	4b60      	ldr	r3, [pc, #384]	; (80454d8 <HAL_RCC_OscConfig+0x2dc>)
 8045358:	b17a      	cbz	r2, 804537a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 804535a:	2201      	movs	r2, #1
 804535c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804535e:	f7fe fb53 	bl	8043a08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8045362:	4d5b      	ldr	r5, [pc, #364]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8045364:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8045366:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8045368:	079f      	lsls	r7, r3, #30
 804536a:	f53f af57 	bmi.w	804521c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804536e:	f7fe fb4b 	bl	8043a08 <HAL_GetTick>
 8045372:	1b80      	subs	r0, r0, r6
 8045374:	2802      	cmp	r0, #2
 8045376:	d9f6      	bls.n	8045366 <HAL_RCC_OscConfig+0x16a>
 8045378:	e785      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 804537a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804537c:	f7fe fb44 	bl	8043a08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8045380:	4d53      	ldr	r5, [pc, #332]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8045382:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8045384:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8045386:	0798      	lsls	r0, r3, #30
 8045388:	f57f af48 	bpl.w	804521c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804538c:	f7fe fb3c 	bl	8043a08 <HAL_GetTick>
 8045390:	1b80      	subs	r0, r0, r6
 8045392:	2802      	cmp	r0, #2
 8045394:	d9f6      	bls.n	8045384 <HAL_RCC_OscConfig+0x188>
 8045396:	e776      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8045398:	4b4d      	ldr	r3, [pc, #308]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 804539a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804539c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80453a0:	d128      	bne.n	80453f4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80453a2:	9201      	str	r2, [sp, #4]
 80453a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80453a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80453aa:	641a      	str	r2, [r3, #64]	; 0x40
 80453ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80453ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80453b2:	9301      	str	r3, [sp, #4]
 80453b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80453b6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80453b8:	4d48      	ldr	r5, [pc, #288]	; (80454dc <HAL_RCC_OscConfig+0x2e0>)
 80453ba:	682b      	ldr	r3, [r5, #0]
 80453bc:	05d9      	lsls	r1, r3, #23
 80453be:	d51b      	bpl.n	80453f8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80453c0:	68a3      	ldr	r3, [r4, #8]
 80453c2:	4d43      	ldr	r5, [pc, #268]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 80453c4:	2b01      	cmp	r3, #1
 80453c6:	d127      	bne.n	8045418 <HAL_RCC_OscConfig+0x21c>
 80453c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80453ca:	f043 0301 	orr.w	r3, r3, #1
 80453ce:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80453d0:	f7fe fb1a 	bl	8043a08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80453d4:	4d3e      	ldr	r5, [pc, #248]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80453d6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80453d8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80453dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80453de:	079b      	lsls	r3, r3, #30
 80453e0:	d539      	bpl.n	8045456 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80453e2:	2e00      	cmp	r6, #0
 80453e4:	f43f af1e 	beq.w	8045224 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80453e8:	4a39      	ldr	r2, [pc, #228]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 80453ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80453ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80453f0:	6413      	str	r3, [r2, #64]	; 0x40
 80453f2:	e717      	b.n	8045224 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80453f4:	2600      	movs	r6, #0
 80453f6:	e7df      	b.n	80453b8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80453f8:	682b      	ldr	r3, [r5, #0]
 80453fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80453fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8045400:	f7fe fb02 	bl	8043a08 <HAL_GetTick>
 8045404:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8045406:	682b      	ldr	r3, [r5, #0]
 8045408:	05da      	lsls	r2, r3, #23
 804540a:	d4d9      	bmi.n	80453c0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804540c:	f7fe fafc 	bl	8043a08 <HAL_GetTick>
 8045410:	1bc0      	subs	r0, r0, r7
 8045412:	2802      	cmp	r0, #2
 8045414:	d9f7      	bls.n	8045406 <HAL_RCC_OscConfig+0x20a>
 8045416:	e736      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8045418:	2b05      	cmp	r3, #5
 804541a:	d104      	bne.n	8045426 <HAL_RCC_OscConfig+0x22a>
 804541c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 804541e:	f043 0304 	orr.w	r3, r3, #4
 8045422:	672b      	str	r3, [r5, #112]	; 0x70
 8045424:	e7d0      	b.n	80453c8 <HAL_RCC_OscConfig+0x1cc>
 8045426:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8045428:	f022 0201 	bic.w	r2, r2, #1
 804542c:	672a      	str	r2, [r5, #112]	; 0x70
 804542e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8045430:	f022 0204 	bic.w	r2, r2, #4
 8045434:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8045436:	2b00      	cmp	r3, #0
 8045438:	d1ca      	bne.n	80453d0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 804543a:	f7fe fae5 	bl	8043a08 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804543e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8045442:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8045444:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8045446:	0798      	lsls	r0, r3, #30
 8045448:	d5cb      	bpl.n	80453e2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804544a:	f7fe fadd 	bl	8043a08 <HAL_GetTick>
 804544e:	1bc0      	subs	r0, r0, r7
 8045450:	4540      	cmp	r0, r8
 8045452:	d9f7      	bls.n	8045444 <HAL_RCC_OscConfig+0x248>
 8045454:	e717      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045456:	f7fe fad7 	bl	8043a08 <HAL_GetTick>
 804545a:	1bc0      	subs	r0, r0, r7
 804545c:	4540      	cmp	r0, r8
 804545e:	d9bd      	bls.n	80453dc <HAL_RCC_OscConfig+0x1e0>
 8045460:	e711      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8045462:	4d1b      	ldr	r5, [pc, #108]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
 8045464:	68ab      	ldr	r3, [r5, #8]
 8045466:	f003 030c 	and.w	r3, r3, #12
 804546a:	2b08      	cmp	r3, #8
 804546c:	d047      	beq.n	80454fe <HAL_RCC_OscConfig+0x302>
 804546e:	4e1c      	ldr	r6, [pc, #112]	; (80454e0 <HAL_RCC_OscConfig+0x2e4>)
 8045470:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8045472:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8045474:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8045476:	d135      	bne.n	80454e4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8045478:	f7fe fac6 	bl	8043a08 <HAL_GetTick>
 804547c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804547e:	682b      	ldr	r3, [r5, #0]
 8045480:	0199      	lsls	r1, r3, #6
 8045482:	d41e      	bmi.n	80454c2 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8045484:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8045488:	4313      	orrs	r3, r2
 804548a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804548c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8045490:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8045492:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8045496:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045498:	4c0d      	ldr	r4, [pc, #52]	; (80454d0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804549a:	0852      	lsrs	r2, r2, #1
 804549c:	3a01      	subs	r2, #1
 804549e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80454a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80454a4:	2301      	movs	r3, #1
 80454a6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80454a8:	f7fe faae 	bl	8043a08 <HAL_GetTick>
 80454ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80454ae:	6823      	ldr	r3, [r4, #0]
 80454b0:	019a      	lsls	r2, r3, #6
 80454b2:	f53f aebb 	bmi.w	804522c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80454b6:	f7fe faa7 	bl	8043a08 <HAL_GetTick>
 80454ba:	1b40      	subs	r0, r0, r5
 80454bc:	2802      	cmp	r0, #2
 80454be:	d9f6      	bls.n	80454ae <HAL_RCC_OscConfig+0x2b2>
 80454c0:	e6e1      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80454c2:	f7fe faa1 	bl	8043a08 <HAL_GetTick>
 80454c6:	1bc0      	subs	r0, r0, r7
 80454c8:	2802      	cmp	r0, #2
 80454ca:	d9d8      	bls.n	804547e <HAL_RCC_OscConfig+0x282>
 80454cc:	e6db      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
 80454ce:	bf00      	nop
 80454d0:	40023800 	.word	0x40023800
 80454d4:	42470000 	.word	0x42470000
 80454d8:	42470e80 	.word	0x42470e80
 80454dc:	40007000 	.word	0x40007000
 80454e0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80454e4:	f7fe fa90 	bl	8043a08 <HAL_GetTick>
 80454e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80454ea:	682b      	ldr	r3, [r5, #0]
 80454ec:	019b      	lsls	r3, r3, #6
 80454ee:	f57f ae9d 	bpl.w	804522c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80454f2:	f7fe fa89 	bl	8043a08 <HAL_GetTick>
 80454f6:	1b00      	subs	r0, r0, r4
 80454f8:	2802      	cmp	r0, #2
 80454fa:	d9f6      	bls.n	80454ea <HAL_RCC_OscConfig+0x2ee>
 80454fc:	e6c3      	b.n	8045286 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80454fe:	2801      	cmp	r0, #1
 8045500:	f43f aec2 	beq.w	8045288 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8045504:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045506:	69e3      	ldr	r3, [r4, #28]
 8045508:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 804550c:	429a      	cmp	r2, r3
 804550e:	f47f ae79 	bne.w	8045204 <HAL_RCC_OscConfig+0x8>
 8045512:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8045514:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045518:	4293      	cmp	r3, r2
 804551a:	f47f ae73 	bne.w	8045204 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804551e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8045520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8045524:	4003      	ands	r3, r0
 8045526:	4293      	cmp	r3, r2
 8045528:	f47f ae6c 	bne.w	8045204 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 804552c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 804552e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8045532:	4293      	cmp	r3, r2
 8045534:	f47f ae66 	bne.w	8045204 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8045538:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 804553a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 804553e:	1ac0      	subs	r0, r0, r3
 8045540:	bf18      	it	ne
 8045542:	2001      	movne	r0, #1
 8045544:	e6a0      	b.n	8045288 <HAL_RCC_OscConfig+0x8c>
 8045546:	bf00      	nop

08045548 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8045548:	4913      	ldr	r1, [pc, #76]	; (8045598 <HAL_RCC_GetSysClockFreq+0x50>)
{
 804554a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804554c:	688b      	ldr	r3, [r1, #8]
 804554e:	f003 030c 	and.w	r3, r3, #12
 8045552:	2b04      	cmp	r3, #4
 8045554:	d003      	beq.n	804555e <HAL_RCC_GetSysClockFreq+0x16>
 8045556:	2b08      	cmp	r3, #8
 8045558:	d003      	beq.n	8045562 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804555a:	4810      	ldr	r0, [pc, #64]	; (804559c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 804555c:	e000      	b.n	8045560 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 804555e:	4810      	ldr	r0, [pc, #64]	; (80455a0 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8045560:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8045562:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8045564:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045566:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8045568:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804556c:	bf14      	ite	ne
 804556e:	480c      	ldrne	r0, [pc, #48]	; (80455a0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045570:	480a      	ldreq	r0, [pc, #40]	; (804559c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045572:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8045576:	bf18      	it	ne
 8045578:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804557a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804557e:	fba1 0100 	umull	r0, r1, r1, r0
 8045582:	f7fb fcb9 	bl	8040ef8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8045586:	4b04      	ldr	r3, [pc, #16]	; (8045598 <HAL_RCC_GetSysClockFreq+0x50>)
 8045588:	685b      	ldr	r3, [r3, #4]
 804558a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 804558e:	3301      	adds	r3, #1
 8045590:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8045592:	fbb0 f0f3 	udiv	r0, r0, r3
 8045596:	e7e3      	b.n	8045560 <HAL_RCC_GetSysClockFreq+0x18>
 8045598:	40023800 	.word	0x40023800
 804559c:	00f42400 	.word	0x00f42400
 80455a0:	007a1200 	.word	0x007a1200

080455a4 <HAL_RCC_ClockConfig>:
{
 80455a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80455a8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80455aa:	4604      	mov	r4, r0
 80455ac:	b910      	cbnz	r0, 80455b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80455ae:	2001      	movs	r0, #1
}
 80455b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80455b4:	4b43      	ldr	r3, [pc, #268]	; (80456c4 <HAL_RCC_ClockConfig+0x120>)
 80455b6:	681a      	ldr	r2, [r3, #0]
 80455b8:	f002 020f 	and.w	r2, r2, #15
 80455bc:	428a      	cmp	r2, r1
 80455be:	d328      	bcc.n	8045612 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80455c0:	6821      	ldr	r1, [r4, #0]
 80455c2:	078f      	lsls	r7, r1, #30
 80455c4:	d42d      	bmi.n	8045622 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80455c6:	07c8      	lsls	r0, r1, #31
 80455c8:	d440      	bmi.n	804564c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80455ca:	4b3e      	ldr	r3, [pc, #248]	; (80456c4 <HAL_RCC_ClockConfig+0x120>)
 80455cc:	681a      	ldr	r2, [r3, #0]
 80455ce:	f002 020f 	and.w	r2, r2, #15
 80455d2:	42aa      	cmp	r2, r5
 80455d4:	d865      	bhi.n	80456a2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80455d6:	6822      	ldr	r2, [r4, #0]
 80455d8:	0751      	lsls	r1, r2, #29
 80455da:	d46b      	bmi.n	80456b4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80455dc:	0713      	lsls	r3, r2, #28
 80455de:	d507      	bpl.n	80455f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80455e0:	4a39      	ldr	r2, [pc, #228]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
 80455e2:	6921      	ldr	r1, [r4, #16]
 80455e4:	6893      	ldr	r3, [r2, #8]
 80455e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80455ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80455ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80455f0:	f7ff ffaa 	bl	8045548 <HAL_RCC_GetSysClockFreq>
 80455f4:	4b34      	ldr	r3, [pc, #208]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
 80455f6:	4a35      	ldr	r2, [pc, #212]	; (80456cc <HAL_RCC_ClockConfig+0x128>)
 80455f8:	689b      	ldr	r3, [r3, #8]
 80455fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80455fe:	5cd3      	ldrb	r3, [r2, r3]
 8045600:	40d8      	lsrs	r0, r3
 8045602:	4b33      	ldr	r3, [pc, #204]	; (80456d0 <HAL_RCC_ClockConfig+0x12c>)
 8045604:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8045606:	4b33      	ldr	r3, [pc, #204]	; (80456d4 <HAL_RCC_ClockConfig+0x130>)
 8045608:	6818      	ldr	r0, [r3, #0]
 804560a:	f00a fbd1 	bl	804fdb0 <HAL_InitTick>
  return HAL_OK;
 804560e:	2000      	movs	r0, #0
 8045610:	e7ce      	b.n	80455b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8045612:	b2ca      	uxtb	r2, r1
 8045614:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8045616:	681b      	ldr	r3, [r3, #0]
 8045618:	f003 030f 	and.w	r3, r3, #15
 804561c:	428b      	cmp	r3, r1
 804561e:	d1c6      	bne.n	80455ae <HAL_RCC_ClockConfig+0xa>
 8045620:	e7ce      	b.n	80455c0 <HAL_RCC_ClockConfig+0x1c>
 8045622:	4b29      	ldr	r3, [pc, #164]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8045624:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8045628:	bf1e      	ittt	ne
 804562a:	689a      	ldrne	r2, [r3, #8]
 804562c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8045630:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8045632:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8045634:	bf42      	ittt	mi
 8045636:	689a      	ldrmi	r2, [r3, #8]
 8045638:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 804563c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804563e:	689a      	ldr	r2, [r3, #8]
 8045640:	68a0      	ldr	r0, [r4, #8]
 8045642:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8045646:	4302      	orrs	r2, r0
 8045648:	609a      	str	r2, [r3, #8]
 804564a:	e7bc      	b.n	80455c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804564c:	6862      	ldr	r2, [r4, #4]
 804564e:	4b1e      	ldr	r3, [pc, #120]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
 8045650:	2a01      	cmp	r2, #1
 8045652:	d11c      	bne.n	804568e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045654:	681b      	ldr	r3, [r3, #0]
 8045656:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804565a:	d0a8      	beq.n	80455ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804565c:	4e1a      	ldr	r6, [pc, #104]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
 804565e:	68b3      	ldr	r3, [r6, #8]
 8045660:	f023 0303 	bic.w	r3, r3, #3
 8045664:	4313      	orrs	r3, r2
 8045666:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8045668:	f7fe f9ce 	bl	8043a08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804566c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8045670:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8045672:	68b3      	ldr	r3, [r6, #8]
 8045674:	6862      	ldr	r2, [r4, #4]
 8045676:	f003 030c 	and.w	r3, r3, #12
 804567a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 804567e:	d0a4      	beq.n	80455ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8045680:	f7fe f9c2 	bl	8043a08 <HAL_GetTick>
 8045684:	1bc0      	subs	r0, r0, r7
 8045686:	4540      	cmp	r0, r8
 8045688:	d9f3      	bls.n	8045672 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 804568a:	2003      	movs	r0, #3
 804568c:	e790      	b.n	80455b0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804568e:	1e91      	subs	r1, r2, #2
 8045690:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045692:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8045694:	d802      	bhi.n	804569c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045696:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 804569a:	e7de      	b.n	804565a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804569c:	f013 0f02 	tst.w	r3, #2
 80456a0:	e7db      	b.n	804565a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80456a2:	b2ea      	uxtb	r2, r5
 80456a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80456a6:	681b      	ldr	r3, [r3, #0]
 80456a8:	f003 030f 	and.w	r3, r3, #15
 80456ac:	42ab      	cmp	r3, r5
 80456ae:	f47f af7e 	bne.w	80455ae <HAL_RCC_ClockConfig+0xa>
 80456b2:	e790      	b.n	80455d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80456b4:	4904      	ldr	r1, [pc, #16]	; (80456c8 <HAL_RCC_ClockConfig+0x124>)
 80456b6:	68e0      	ldr	r0, [r4, #12]
 80456b8:	688b      	ldr	r3, [r1, #8]
 80456ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80456be:	4303      	orrs	r3, r0
 80456c0:	608b      	str	r3, [r1, #8]
 80456c2:	e78b      	b.n	80455dc <HAL_RCC_ClockConfig+0x38>
 80456c4:	40023c00 	.word	0x40023c00
 80456c8:	40023800 	.word	0x40023800
 80456cc:	08053e44 	.word	0x08053e44
 80456d0:	20001048 	.word	0x20001048
 80456d4:	20001054 	.word	0x20001054

080456d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80456d8:	4b04      	ldr	r3, [pc, #16]	; (80456ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80456da:	4a05      	ldr	r2, [pc, #20]	; (80456f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80456dc:	689b      	ldr	r3, [r3, #8]
 80456de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80456e2:	5cd3      	ldrb	r3, [r2, r3]
 80456e4:	4a03      	ldr	r2, [pc, #12]	; (80456f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80456e6:	6810      	ldr	r0, [r2, #0]
}
 80456e8:	40d8      	lsrs	r0, r3
 80456ea:	4770      	bx	lr
 80456ec:	40023800 	.word	0x40023800
 80456f0:	08053e54 	.word	0x08053e54
 80456f4:	20001048 	.word	0x20001048

080456f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80456f8:	4b04      	ldr	r3, [pc, #16]	; (804570c <HAL_RCC_GetPCLK2Freq+0x14>)
 80456fa:	4a05      	ldr	r2, [pc, #20]	; (8045710 <HAL_RCC_GetPCLK2Freq+0x18>)
 80456fc:	689b      	ldr	r3, [r3, #8]
 80456fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8045702:	5cd3      	ldrb	r3, [r2, r3]
 8045704:	4a03      	ldr	r2, [pc, #12]	; (8045714 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8045706:	6810      	ldr	r0, [r2, #0]
}
 8045708:	40d8      	lsrs	r0, r3
 804570a:	4770      	bx	lr
 804570c:	40023800 	.word	0x40023800
 8045710:	08053e54 	.word	0x08053e54
 8045714:	20001048 	.word	0x20001048

08045718 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8045718:	6803      	ldr	r3, [r0, #0]
 804571a:	f013 0f05 	tst.w	r3, #5
{
 804571e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8045720:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8045722:	d105      	bne.n	8045730 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8045724:	6828      	ldr	r0, [r5, #0]
 8045726:	f010 0002 	ands.w	r0, r0, #2
 804572a:	d128      	bne.n	804577e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 804572c:	b003      	add	sp, #12
 804572e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8045730:	4c41      	ldr	r4, [pc, #260]	; (8045838 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8045732:	4e42      	ldr	r6, [pc, #264]	; (804583c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8045734:	2300      	movs	r3, #0
 8045736:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8045738:	f7fe f966 	bl	8043a08 <HAL_GetTick>
 804573c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804573e:	6833      	ldr	r3, [r6, #0]
 8045740:	011b      	lsls	r3, r3, #4
 8045742:	d415      	bmi.n	8045770 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8045744:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8045748:	071b      	lsls	r3, r3, #28
 804574a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 804574e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8045752:	2301      	movs	r3, #1
 8045754:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8045756:	f7fe f957 	bl	8043a08 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804575a:	4c38      	ldr	r4, [pc, #224]	; (804583c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 804575c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804575e:	6823      	ldr	r3, [r4, #0]
 8045760:	0118      	lsls	r0, r3, #4
 8045762:	d4df      	bmi.n	8045724 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8045764:	f7fe f950 	bl	8043a08 <HAL_GetTick>
 8045768:	1b80      	subs	r0, r0, r6
 804576a:	2802      	cmp	r0, #2
 804576c:	d9f7      	bls.n	804575e <HAL_RCCEx_PeriphCLKConfig+0x46>
 804576e:	e004      	b.n	804577a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8045770:	f7fe f94a 	bl	8043a08 <HAL_GetTick>
 8045774:	1bc0      	subs	r0, r0, r7
 8045776:	2802      	cmp	r0, #2
 8045778:	d9e1      	bls.n	804573e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 804577a:	2003      	movs	r0, #3
 804577c:	e7d6      	b.n	804572c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 804577e:	2300      	movs	r3, #0
 8045780:	9301      	str	r3, [sp, #4]
 8045782:	4b2e      	ldr	r3, [pc, #184]	; (804583c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8045784:	4c2e      	ldr	r4, [pc, #184]	; (8045840 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8045786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8045788:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804578c:	641a      	str	r2, [r3, #64]	; 0x40
 804578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8045794:	9301      	str	r3, [sp, #4]
 8045796:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8045798:	6823      	ldr	r3, [r4, #0]
 804579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804579e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80457a0:	f7fe f932 	bl	8043a08 <HAL_GetTick>
 80457a4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80457a6:	6823      	ldr	r3, [r4, #0]
 80457a8:	05d9      	lsls	r1, r3, #23
 80457aa:	d51b      	bpl.n	80457e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80457ac:	4c23      	ldr	r4, [pc, #140]	; (804583c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80457ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80457b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80457b4:	d11c      	bne.n	80457f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80457b6:	68eb      	ldr	r3, [r5, #12]
 80457b8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80457bc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80457c0:	4a1e      	ldr	r2, [pc, #120]	; (804583c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80457c2:	d134      	bne.n	804582e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80457c4:	6891      	ldr	r1, [r2, #8]
 80457c6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80457ca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80457ce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80457d2:	4301      	orrs	r1, r0
 80457d4:	6091      	str	r1, [r2, #8]
 80457d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80457d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80457dc:	430b      	orrs	r3, r1
 80457de:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80457e0:	2000      	movs	r0, #0
 80457e2:	e7a3      	b.n	804572c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80457e4:	f7fe f910 	bl	8043a08 <HAL_GetTick>
 80457e8:	1b80      	subs	r0, r0, r6
 80457ea:	2802      	cmp	r0, #2
 80457ec:	d9db      	bls.n	80457a6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80457ee:	e7c4      	b.n	804577a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80457f0:	68ea      	ldr	r2, [r5, #12]
 80457f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80457f6:	4293      	cmp	r3, r2
 80457f8:	d0dd      	beq.n	80457b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80457fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80457fc:	4a11      	ldr	r2, [pc, #68]	; (8045844 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80457fe:	2101      	movs	r1, #1
 8045800:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8045802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8045806:	2100      	movs	r1, #0
 8045808:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 804580a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 804580c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804580e:	07da      	lsls	r2, r3, #31
 8045810:	d5d1      	bpl.n	80457b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8045812:	f7fe f8f9 	bl	8043a08 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045816:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 804581a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804581c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804581e:	079b      	lsls	r3, r3, #30
 8045820:	d4c9      	bmi.n	80457b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045822:	f7fe f8f1 	bl	8043a08 <HAL_GetTick>
 8045826:	1b80      	subs	r0, r0, r6
 8045828:	42b8      	cmp	r0, r7
 804582a:	d9f7      	bls.n	804581c <HAL_RCCEx_PeriphCLKConfig+0x104>
 804582c:	e7a5      	b.n	804577a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804582e:	6891      	ldr	r1, [r2, #8]
 8045830:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8045834:	e7ce      	b.n	80457d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8045836:	bf00      	nop
 8045838:	42470068 	.word	0x42470068
 804583c:	40023800 	.word	0x40023800
 8045840:	40007000 	.word	0x40007000
 8045844:	42470e40 	.word	0x42470e40

08045848 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8045848:	7f03      	ldrb	r3, [r0, #28]
 804584a:	2b01      	cmp	r3, #1
{
 804584c:	b570      	push	{r4, r5, r6, lr}
 804584e:	4604      	mov	r4, r0
 8045850:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8045854:	d021      	beq.n	804589a <HAL_RTC_DeactivateAlarm+0x52>
 8045856:	2301      	movs	r3, #1
 8045858:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804585a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 804585c:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804585e:	22ca      	movs	r2, #202	; 0xca
 8045860:	625a      	str	r2, [r3, #36]	; 0x24
 8045862:	2253      	movs	r2, #83	; 0x53
 8045864:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8045866:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804586a:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 804586c:	d123      	bne.n	80458b6 <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804586e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8045872:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8045874:	689a      	ldr	r2, [r3, #8]
 8045876:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804587a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 804587c:	f7fe f8c4 	bl	8043a08 <HAL_GetTick>
 8045880:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8045882:	6823      	ldr	r3, [r4, #0]
 8045884:	68dd      	ldr	r5, [r3, #12]
 8045886:	f015 0501 	ands.w	r5, r5, #1
 804588a:	d007      	beq.n	804589c <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804588c:	6823      	ldr	r3, [r4, #0]
 804588e:	22ff      	movs	r2, #255	; 0xff
 8045890:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8045892:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8045894:	2301      	movs	r3, #1
 8045896:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8045898:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
}
 804589a:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 804589c:	f7fe f8b4 	bl	8043a08 <HAL_GetTick>
 80458a0:	1b80      	subs	r0, r0, r6
 80458a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80458a6:	d9ec      	bls.n	8045882 <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80458a8:	6823      	ldr	r3, [r4, #0]
 80458aa:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80458ac:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80458ae:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80458b0:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80458b2:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 80458b4:	e7f1      	b.n	804589a <HAL_RTC_DeactivateAlarm+0x52>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80458b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80458ba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80458bc:	689a      	ldr	r2, [r3, #8]
 80458be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80458c2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80458c4:	f7fe f8a0 	bl	8043a08 <HAL_GetTick>
 80458c8:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80458ca:	6823      	ldr	r3, [r4, #0]
 80458cc:	68dd      	ldr	r5, [r3, #12]
 80458ce:	f015 0502 	ands.w	r5, r5, #2
 80458d2:	d1db      	bne.n	804588c <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80458d4:	f7fe f898 	bl	8043a08 <HAL_GetTick>
 80458d8:	1b80      	subs	r0, r0, r6
 80458da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80458de:	d9f4      	bls.n	80458ca <HAL_RTC_DeactivateAlarm+0x82>
 80458e0:	e7e2      	b.n	80458a8 <HAL_RTC_DeactivateAlarm+0x60>

080458e2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80458e2:	6802      	ldr	r2, [r0, #0]
{
 80458e4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80458e6:	68d3      	ldr	r3, [r2, #12]
 80458e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80458ec:	60d3      	str	r3, [r2, #12]
{
 80458ee:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 80458f0:	f7fe f88a 	bl	8043a08 <HAL_GetTick>
 80458f4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80458f6:	6823      	ldr	r3, [r4, #0]
 80458f8:	68db      	ldr	r3, [r3, #12]
 80458fa:	069b      	lsls	r3, r3, #26
 80458fc:	d501      	bpl.n	8045902 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80458fe:	2000      	movs	r0, #0
}
 8045900:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8045902:	f7fe f881 	bl	8043a08 <HAL_GetTick>
 8045906:	1b40      	subs	r0, r0, r5
 8045908:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 804590c:	d9f3      	bls.n	80458f6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 804590e:	2003      	movs	r0, #3
 8045910:	e7f6      	b.n	8045900 <HAL_RTC_WaitForSynchro+0x1e>

08045912 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8045912:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8045914:	6803      	ldr	r3, [r0, #0]
 8045916:	68da      	ldr	r2, [r3, #12]
 8045918:	0652      	lsls	r2, r2, #25
{
 804591a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804591c:	d501      	bpl.n	8045922 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 804591e:	2000      	movs	r0, #0
}
 8045920:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8045922:	f04f 32ff 	mov.w	r2, #4294967295
 8045926:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8045928:	f7fe f86e 	bl	8043a08 <HAL_GetTick>
 804592c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804592e:	6823      	ldr	r3, [r4, #0]
 8045930:	68db      	ldr	r3, [r3, #12]
 8045932:	065b      	lsls	r3, r3, #25
 8045934:	d4f3      	bmi.n	804591e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8045936:	f7fe f867 	bl	8043a08 <HAL_GetTick>
 804593a:	1b40      	subs	r0, r0, r5
 804593c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8045940:	d9f5      	bls.n	804592e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8045942:	2003      	movs	r0, #3
 8045944:	e7ec      	b.n	8045920 <RTC_EnterInitMode+0xe>

08045946 <HAL_RTC_Init>:
{
 8045946:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8045948:	4604      	mov	r4, r0
 804594a:	b1b8      	cbz	r0, 804597c <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 804594c:	7f43      	ldrb	r3, [r0, #29]
 804594e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045952:	b913      	cbnz	r3, 804595a <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8045954:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8045956:	f00a fa45 	bl	804fde4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 804595a:	2302      	movs	r3, #2
 804595c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804595e:	6823      	ldr	r3, [r4, #0]
 8045960:	22ca      	movs	r2, #202	; 0xca
 8045962:	625a      	str	r2, [r3, #36]	; 0x24
 8045964:	2253      	movs	r2, #83	; 0x53
 8045966:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8045968:	4620      	mov	r0, r4
 804596a:	f7ff ffd2 	bl	8045912 <RTC_EnterInitMode>
 804596e:	6823      	ldr	r3, [r4, #0]
 8045970:	4605      	mov	r5, r0
 8045972:	b128      	cbz	r0, 8045980 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045974:	22ff      	movs	r2, #255	; 0xff
 8045976:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8045978:	2304      	movs	r3, #4
 804597a:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 804597c:	2501      	movs	r5, #1
 804597e:	e02e      	b.n	80459de <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8045980:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8045982:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8045984:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8045988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804598c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804598e:	6862      	ldr	r2, [r4, #4]
 8045990:	6899      	ldr	r1, [r3, #8]
 8045992:	4302      	orrs	r2, r0
 8045994:	6960      	ldr	r0, [r4, #20]
 8045996:	4302      	orrs	r2, r0
 8045998:	430a      	orrs	r2, r1
 804599a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 804599c:	68e2      	ldr	r2, [r4, #12]
 804599e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80459a0:	691a      	ldr	r2, [r3, #16]
 80459a2:	68a1      	ldr	r1, [r4, #8]
 80459a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80459a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80459aa:	68da      	ldr	r2, [r3, #12]
 80459ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80459b0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80459b2:	689b      	ldr	r3, [r3, #8]
 80459b4:	069b      	lsls	r3, r3, #26
 80459b6:	d405      	bmi.n	80459c4 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80459b8:	4620      	mov	r0, r4
 80459ba:	f7ff ff92 	bl	80458e2 <HAL_RTC_WaitForSynchro>
 80459be:	b108      	cbz	r0, 80459c4 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80459c0:	6823      	ldr	r3, [r4, #0]
 80459c2:	e7d7      	b.n	8045974 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80459c4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80459c6:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80459c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80459ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80459ce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80459d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80459d2:	430a      	orrs	r2, r1
 80459d4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80459d6:	22ff      	movs	r2, #255	; 0xff
 80459d8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80459da:	2301      	movs	r3, #1
 80459dc:	7763      	strb	r3, [r4, #29]
}
 80459de:	4628      	mov	r0, r5
 80459e0:	bd38      	pop	{r3, r4, r5, pc}

080459e2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80459e2:	2300      	movs	r3, #0

  while(Value >= 10U)
 80459e4:	2809      	cmp	r0, #9
 80459e6:	d803      	bhi.n	80459f0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80459e8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80459ec:	b2c0      	uxtb	r0, r0
 80459ee:	4770      	bx	lr
    Value -= 10U;
 80459f0:	380a      	subs	r0, #10
    bcdhigh++;
 80459f2:	3301      	adds	r3, #1
    Value -= 10U;
 80459f4:	b2c0      	uxtb	r0, r0
 80459f6:	e7f5      	b.n	80459e4 <RTC_ByteToBcd2+0x2>

080459f8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80459f8:	7f03      	ldrb	r3, [r0, #28]
 80459fa:	2b01      	cmp	r3, #1
{
 80459fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045a00:	4606      	mov	r6, r0
 8045a02:	460f      	mov	r7, r1
 8045a04:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8045a08:	d02e      	beq.n	8045a68 <HAL_RTC_SetTime+0x70>
 8045a0a:	2301      	movs	r3, #1
 8045a0c:	6801      	ldr	r1, [r0, #0]
 8045a0e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8045a10:	7745      	strb	r5, [r0, #29]
 8045a12:	7838      	ldrb	r0, [r7, #0]
 8045a14:	787d      	ldrb	r5, [r7, #1]
 8045a16:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045a18:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 8045a1a:	bb42      	cbnz	r2, 8045a6e <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045a1c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8045a20:	bf08      	it	eq
 8045a22:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8045a24:	f7ff ffdd 	bl	80459e2 <RTC_ByteToBcd2>
 8045a28:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8045a2a:	4628      	mov	r0, r5
 8045a2c:	f7ff ffd9 	bl	80459e2 <RTC_ByteToBcd2>
 8045a30:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8045a32:	4620      	mov	r0, r4
 8045a34:	f7ff ffd5 	bl	80459e2 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8045a38:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8045a3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8045a3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8045a42:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045a46:	23ca      	movs	r3, #202	; 0xca
 8045a48:	624b      	str	r3, [r1, #36]	; 0x24
 8045a4a:	2353      	movs	r3, #83	; 0x53
 8045a4c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8045a4e:	4630      	mov	r0, r6
 8045a50:	f7ff ff5f 	bl	8045912 <RTC_EnterInitMode>
 8045a54:	6833      	ldr	r3, [r6, #0]
 8045a56:	4605      	mov	r5, r0
 8045a58:	b1b0      	cbz	r0, 8045a88 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045a5a:	22ff      	movs	r2, #255	; 0xff
 8045a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8045a5e:	2304      	movs	r3, #4
 8045a60:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045a62:	2300      	movs	r3, #0
 8045a64:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8045a66:	2501      	movs	r5, #1
}
 8045a68:	4628      	mov	r0, r5
 8045a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045a6e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8045a72:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8045a76:	bf08      	it	eq
 8045a78:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8045a7a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8045a7e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8045a80:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8045a82:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8045a86:	e7de      	b.n	8045a46 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8045a88:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8045a8c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8045a90:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8045a92:	689a      	ldr	r2, [r3, #8]
 8045a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8045a98:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8045a9a:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 8045a9e:	6899      	ldr	r1, [r3, #8]
 8045aa0:	4302      	orrs	r2, r0
 8045aa2:	430a      	orrs	r2, r1
 8045aa4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8045aa6:	68da      	ldr	r2, [r3, #12]
 8045aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8045aac:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8045aae:	689b      	ldr	r3, [r3, #8]
 8045ab0:	069b      	lsls	r3, r3, #26
 8045ab2:	d40a      	bmi.n	8045aca <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8045ab4:	4630      	mov	r0, r6
 8045ab6:	f7ff ff14 	bl	80458e2 <HAL_RTC_WaitForSynchro>
 8045aba:	b130      	cbz	r0, 8045aca <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045abc:	6833      	ldr	r3, [r6, #0]
 8045abe:	22ff      	movs	r2, #255	; 0xff
 8045ac0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8045ac2:	2304      	movs	r3, #4
 8045ac4:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8045ac6:	7735      	strb	r5, [r6, #28]
 8045ac8:	e7cd      	b.n	8045a66 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045aca:	6833      	ldr	r3, [r6, #0]
 8045acc:	22ff      	movs	r2, #255	; 0xff
 8045ace:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8045ad0:	2301      	movs	r3, #1
 8045ad2:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8045ad4:	2300      	movs	r3, #0
 8045ad6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8045ad8:	e7c6      	b.n	8045a68 <HAL_RTC_SetTime+0x70>

08045ada <HAL_RTC_SetDate>:
{
 8045ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8045adc:	7f03      	ldrb	r3, [r0, #28]
 8045ade:	2b01      	cmp	r3, #1
{
 8045ae0:	4606      	mov	r6, r0
 8045ae2:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 8045ae6:	d030      	beq.n	8045b4a <HAL_RTC_SetDate+0x70>
 8045ae8:	2301      	movs	r3, #1
 8045aea:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8045aec:	7745      	strb	r5, [r0, #29]
 8045aee:	780d      	ldrb	r5, [r1, #0]
 8045af0:	78c8      	ldrb	r0, [r1, #3]
 8045af2:	784c      	ldrb	r4, [r1, #1]
 8045af4:	788f      	ldrb	r7, [r1, #2]
 8045af6:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8045af8:	2a00      	cmp	r2, #0
 8045afa:	d147      	bne.n	8045b8c <HAL_RTC_SetDate+0xb2>
 8045afc:	06e2      	lsls	r2, r4, #27
 8045afe:	d503      	bpl.n	8045b08 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8045b00:	f024 0410 	bic.w	r4, r4, #16
 8045b04:	340a      	adds	r4, #10
 8045b06:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8045b08:	f7ff ff6b 	bl	80459e2 <RTC_ByteToBcd2>
 8045b0c:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8045b0e:	7848      	ldrb	r0, [r1, #1]
 8045b10:	f7ff ff67 	bl	80459e2 <RTC_ByteToBcd2>
 8045b14:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8045b16:	4638      	mov	r0, r7
 8045b18:	f7ff ff63 	bl	80459e2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8045b1c:	4328      	orrs	r0, r5
 8045b1e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045b22:	6833      	ldr	r3, [r6, #0]
 8045b24:	22ca      	movs	r2, #202	; 0xca
 8045b26:	625a      	str	r2, [r3, #36]	; 0x24
 8045b28:	2253      	movs	r2, #83	; 0x53
 8045b2a:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8045b2c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8045b30:	4630      	mov	r0, r6
 8045b32:	f7ff feee 	bl	8045912 <RTC_EnterInitMode>
 8045b36:	6833      	ldr	r3, [r6, #0]
 8045b38:	4605      	mov	r5, r0
 8045b3a:	b140      	cbz	r0, 8045b4e <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045b3c:	22ff      	movs	r2, #255	; 0xff
 8045b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8045b40:	2304      	movs	r3, #4
 8045b42:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045b44:	2300      	movs	r3, #0
 8045b46:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8045b48:	2501      	movs	r5, #1
}
 8045b4a:	4628      	mov	r0, r5
 8045b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8045b4e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8045b52:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8045b56:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8045b58:	68da      	ldr	r2, [r3, #12]
 8045b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8045b5e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8045b60:	689b      	ldr	r3, [r3, #8]
 8045b62:	069b      	lsls	r3, r3, #26
 8045b64:	d40a      	bmi.n	8045b7c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8045b66:	4630      	mov	r0, r6
 8045b68:	f7ff febb 	bl	80458e2 <HAL_RTC_WaitForSynchro>
 8045b6c:	b130      	cbz	r0, 8045b7c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045b6e:	6833      	ldr	r3, [r6, #0]
 8045b70:	22ff      	movs	r2, #255	; 0xff
 8045b72:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8045b74:	2304      	movs	r3, #4
 8045b76:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8045b78:	7735      	strb	r5, [r6, #28]
 8045b7a:	e7e5      	b.n	8045b48 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045b7c:	6833      	ldr	r3, [r6, #0]
 8045b7e:	22ff      	movs	r2, #255	; 0xff
 8045b80:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8045b82:	2301      	movs	r3, #1
 8045b84:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045b86:	2300      	movs	r3, #0
 8045b88:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 8045b8a:	e7de      	b.n	8045b4a <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8045b8c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8045b90:	4338      	orrs	r0, r7
 8045b92:	e7c6      	b.n	8045b22 <HAL_RTC_SetDate+0x48>

08045b94 <HAL_RTC_SetAlarm_IT>:
{
 8045b94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8045b98:	4b53      	ldr	r3, [pc, #332]	; (8045ce8 <HAL_RTC_SetAlarm_IT+0x154>)
{
 8045b9a:	4606      	mov	r6, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8045b9c:	681b      	ldr	r3, [r3, #0]
 8045b9e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8045ba2:	fbb3 f0f0 	udiv	r0, r3, r0
 8045ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8045baa:	4343      	muls	r3, r0
 8045bac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8045bae:	7f33      	ldrb	r3, [r6, #28]
 8045bb0:	2b01      	cmp	r3, #1
 8045bb2:	f04f 0002 	mov.w	r0, #2
 8045bb6:	d04a      	beq.n	8045c4e <HAL_RTC_SetAlarm_IT+0xba>
 8045bb8:	2301      	movs	r3, #1
 8045bba:	6834      	ldr	r4, [r6, #0]
 8045bbc:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8045bbe:	7770      	strb	r0, [r6, #29]
 8045bc0:	7808      	ldrb	r0, [r1, #0]
 8045bc2:	f891 9001 	ldrb.w	r9, [r1, #1]
 8045bc6:	f891 a002 	ldrb.w	sl, [r1, #2]
 8045bca:	f891 7020 	ldrb.w	r7, [r1, #32]
 8045bce:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045bd0:	68a3      	ldr	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8045bd2:	2a00      	cmp	r2, #0
 8045bd4:	d13e      	bne.n	8045c54 <HAL_RTC_SetAlarm_IT+0xc0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045bd6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8045bda:	bf08      	it	eq
 8045bdc:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8045bde:	f7ff ff00 	bl	80459e2 <RTC_ByteToBcd2>
 8045be2:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8045be4:	4648      	mov	r0, r9
 8045be6:	f7ff fefc 	bl	80459e2 <RTC_ByteToBcd2>
 8045bea:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8045bec:	4650      	mov	r0, sl
 8045bee:	f7ff fef8 	bl	80459e2 <RTC_ByteToBcd2>
 8045bf2:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8045bf4:	4638      	mov	r0, r7
 8045bf6:	f7ff fef4 	bl	80459e2 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8045bfa:	694b      	ldr	r3, [r1, #20]
 8045bfc:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8045bfe:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8045c00:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8045c04:	ea43 0309 	orr.w	r3, r3, r9
 8045c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8045c0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8045c10:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8045c14:	698b      	ldr	r3, [r1, #24]
 8045c16:	684a      	ldr	r2, [r1, #4]
 8045c18:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045c1a:	23ca      	movs	r3, #202	; 0xca
 8045c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8045c1e:	2353      	movs	r3, #83	; 0x53
 8045c20:	6263      	str	r3, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8045c22:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8045c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8045c28:	68a3      	ldr	r3, [r4, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8045c2a:	d142      	bne.n	8045cb2 <HAL_RTC_SetAlarm_IT+0x11e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8045c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8045c30:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8045c32:	68e3      	ldr	r3, [r4, #12]
 8045c34:	b2db      	uxtb	r3, r3
 8045c36:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8045c3a:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8045c3c:	9b01      	ldr	r3, [sp, #4]
 8045c3e:	1e59      	subs	r1, r3, #1
 8045c40:	9101      	str	r1, [sp, #4]
 8045c42:	b9cb      	cbnz	r3, 8045c78 <HAL_RTC_SetAlarm_IT+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045c44:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8045c46:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045c48:	6262      	str	r2, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8045c4a:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8045c4c:	7733      	strb	r3, [r6, #28]
}
 8045c4e:	b002      	add	sp, #8
 8045c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045c54:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8045c58:	bf08      	it	eq
 8045c5a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8045c5c:	694b      	ldr	r3, [r1, #20]
 8045c5e:	431d      	orrs	r5, r3
 8045c60:	ea45 050a 	orr.w	r5, r5, sl
 8045c64:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8045c68:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8045c6a:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8045c6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8045c72:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8045c76:	e7cd      	b.n	8045c14 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8045c78:	68e3      	ldr	r3, [r4, #12]
 8045c7a:	07d9      	lsls	r1, r3, #31
 8045c7c:	d5de      	bpl.n	8045c3c <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8045c7e:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8045c80:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8045c82:	68a3      	ldr	r3, [r4, #8]
 8045c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045c88:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8045c8a:	68a3      	ldr	r3, [r4, #8]
 8045c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8045c90:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8045c92:	4b16      	ldr	r3, [pc, #88]	; (8045cec <HAL_RTC_SetAlarm_IT+0x158>)
 8045c94:	681a      	ldr	r2, [r3, #0]
 8045c96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8045c9a:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8045c9c:	689a      	ldr	r2, [r3, #8]
 8045c9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8045ca2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045ca4:	23ff      	movs	r3, #255	; 0xff
 8045ca6:	6263      	str	r3, [r4, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8045ca8:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8045caa:	2301      	movs	r3, #1
 8045cac:	7773      	strb	r3, [r6, #29]
  __HAL_UNLOCK(hrtc);
 8045cae:	7730      	strb	r0, [r6, #28]
  return HAL_OK;
 8045cb0:	e7cd      	b.n	8045c4e <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8045cb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8045cb6:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8045cb8:	68e3      	ldr	r3, [r4, #12]
 8045cba:	b2db      	uxtb	r3, r3
 8045cbc:	f463 7320 	orn	r3, r3, #640	; 0x280
 8045cc0:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8045cc2:	9b01      	ldr	r3, [sp, #4]
 8045cc4:	1e59      	subs	r1, r3, #1
 8045cc6:	9101      	str	r1, [sp, #4]
 8045cc8:	2b00      	cmp	r3, #0
 8045cca:	d0bb      	beq.n	8045c44 <HAL_RTC_SetAlarm_IT+0xb0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8045ccc:	68e3      	ldr	r3, [r4, #12]
 8045cce:	079b      	lsls	r3, r3, #30
 8045cd0:	d5f7      	bpl.n	8045cc2 <HAL_RTC_SetAlarm_IT+0x12e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8045cd2:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8045cd4:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8045cd6:	68a3      	ldr	r3, [r4, #8]
 8045cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8045cdc:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8045cde:	68a3      	ldr	r3, [r4, #8]
 8045ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8045ce4:	e7d4      	b.n	8045c90 <HAL_RTC_SetAlarm_IT+0xfc>
 8045ce6:	bf00      	nop
 8045ce8:	20001048 	.word	0x20001048
 8045cec:	40013c00 	.word	0x40013c00

08045cf0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8045cf0:	0903      	lsrs	r3, r0, #4
 8045cf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8045cf6:	f000 000f 	and.w	r0, r0, #15
 8045cfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8045cfe:	b2c0      	uxtb	r0, r0
 8045d00:	4770      	bx	lr

08045d02 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8045d02:	6803      	ldr	r3, [r0, #0]
 8045d04:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8045d06:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045d08:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8045d0a:	681b      	ldr	r3, [r3, #0]
 8045d0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8045d10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8045d14:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045d16:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045d1a:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045d1c:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8045d1e:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045d22:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8045d26:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8045d28:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045d2c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8045d2e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8045d30:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8045d32:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8045d34:	b952      	cbnz	r2, 8045d4c <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8045d36:	f7ff ffdb 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d3a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8045d3c:	4630      	mov	r0, r6
 8045d3e:	f7ff ffd7 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d42:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8045d44:	4620      	mov	r0, r4
 8045d46:	f7ff ffd3 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d4a:	7088      	strb	r0, [r1, #2]
}
 8045d4c:	2000      	movs	r0, #0
 8045d4e:	bd70      	pop	{r4, r5, r6, pc}

08045d50 <HAL_RTC_GetDate>:
{
 8045d50:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8045d52:	6803      	ldr	r3, [r0, #0]
 8045d54:	685b      	ldr	r3, [r3, #4]
 8045d56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8045d5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8045d5e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8045d60:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8045d64:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8045d66:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8045d6a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8045d6c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8045d6e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8045d70:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8045d72:	b952      	cbnz	r2, 8045d8a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8045d74:	f7ff ffbc 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d78:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8045d7a:	4628      	mov	r0, r5
 8045d7c:	f7ff ffb8 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d80:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8045d82:	4620      	mov	r0, r4
 8045d84:	f7ff ffb4 	bl	8045cf0 <RTC_Bcd2ToByte>
 8045d88:	7088      	strb	r0, [r1, #2]
}
 8045d8a:	2000      	movs	r0, #0
 8045d8c:	bd38      	pop	{r3, r4, r5, pc}

08045d8e <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8045d8e:	6803      	ldr	r3, [r0, #0]
 8045d90:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8045d92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8045d96:	4770      	bx	lr

08045d98 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8045d98:	6803      	ldr	r3, [r0, #0]
 8045d9a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8045d9c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8045da0:	4770      	bx	lr

08045da2 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8045da2:	7f03      	ldrb	r3, [r0, #28]
 8045da4:	2b01      	cmp	r3, #1
 8045da6:	f04f 0302 	mov.w	r3, #2
 8045daa:	d00f      	beq.n	8045dcc <HAL_RTCEx_EnableBypassShadow+0x2a>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8045dac:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045dae:	6803      	ldr	r3, [r0, #0]
 8045db0:	22ca      	movs	r2, #202	; 0xca
 8045db2:	625a      	str	r2, [r3, #36]	; 0x24
 8045db4:	2253      	movs	r2, #83	; 0x53
 8045db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8045db8:	689a      	ldr	r2, [r3, #8]
 8045dba:	f042 0220 	orr.w	r2, r2, #32
 8045dbe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045dc0:	22ff      	movs	r2, #255	; 0xff
 8045dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8045dc4:	2301      	movs	r3, #1
 8045dc6:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8045dc8:	2300      	movs	r3, #0
 8045dca:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8045dcc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8045dce:	4770      	bx	lr

08045dd0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8045dd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045dd2:	681a      	ldr	r2, [r3, #0]
 8045dd4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8045dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045dda:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8045ddc:	4770      	bx	lr

08045dde <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8045dde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045de2:	b089      	sub	sp, #36	; 0x24
 8045de4:	4605      	mov	r5, r0
 8045de6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8045de8:	f7fd fe0e 	bl	8043a08 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8045dec:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8045dee:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8045df0:	2108      	movs	r1, #8
 8045df2:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8045df4:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8045df8:	f001 fe67 	bl	8047aca <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045dfc:	4604      	mov	r4, r0
 8045dfe:	bb40      	cbnz	r0, 8045e52 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8045e00:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8045e02:	6828      	ldr	r0, [r5, #0]
 8045e04:	0409      	lsls	r1, r1, #16
 8045e06:	f001 ff73 	bl	8047cf0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045e0a:	4604      	mov	r4, r0
 8045e0c:	bb08      	cbnz	r0, 8045e52 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8045e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8045e12:	2308      	movs	r3, #8
 8045e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8045e18:	2130      	movs	r1, #48	; 0x30
 8045e1a:	2302      	movs	r3, #2
 8045e1c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8045e20:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8045e22:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8045e24:	a902      	add	r1, sp, #8
 8045e26:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8045e28:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8045e2a:	f001 fe3b 	bl	8047aa4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8045e2e:	6828      	ldr	r0, [r5, #0]
 8045e30:	f001 ffa7 	bl	8047d82 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045e34:	4604      	mov	r4, r0
 8045e36:	b960      	cbnz	r0, 8045e52 <SD_FindSCR+0x74>
  uint32_t index = 0U;
 8045e38:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8045e3a:	f240 482a 	movw	r8, #1066	; 0x42a
 8045e3e:	6828      	ldr	r0, [r5, #0]
 8045e40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045e42:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8045e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8045e48:	d007      	beq.n	8045e5a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8045e4a:	0719      	lsls	r1, r3, #28
 8045e4c:	d518      	bpl.n	8045e80 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8045e4e:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8045e50:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8045e52:	4620      	mov	r0, r4
 8045e54:	b009      	add	sp, #36	; 0x24
 8045e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8045e5a:	029b      	lsls	r3, r3, #10
 8045e5c:	d507      	bpl.n	8045e6e <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8045e5e:	f001 fdf7 	bl	8047a50 <SDIO_ReadFIFO>
 8045e62:	ab08      	add	r3, sp, #32
 8045e64:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8045e68:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8045e6a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8045e6e:	f7fd fdcb 	bl	8043a08 <HAL_GetTick>
 8045e72:	eba0 0009 	sub.w	r0, r0, r9
 8045e76:	3001      	adds	r0, #1
 8045e78:	d1e1      	bne.n	8045e3e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8045e7a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8045e7e:	e7e8      	b.n	8045e52 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8045e80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045e82:	079a      	lsls	r2, r3, #30
 8045e84:	d501      	bpl.n	8045e8a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8045e86:	2402      	movs	r4, #2
 8045e88:	e7e2      	b.n	8045e50 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8045e8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045e8c:	069b      	lsls	r3, r3, #26
 8045e8e:	d501      	bpl.n	8045e94 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8045e90:	2420      	movs	r4, #32
 8045e92:	e7dd      	b.n	8045e50 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045e94:	f240 533a 	movw	r3, #1338	; 0x53a
 8045e98:	6383      	str	r3, [r0, #56]	; 0x38
 8045e9a:	9b01      	ldr	r3, [sp, #4]
 8045e9c:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8045e9e:	6033      	str	r3, [r6, #0]
 8045ea0:	9b00      	ldr	r3, [sp, #0]
 8045ea2:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8045ea4:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8045ea6:	e7d4      	b.n	8045e52 <SD_FindSCR+0x74>

08045ea8 <HAL_SD_ReadBlocks_DMA>:
{
 8045ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045eac:	4604      	mov	r4, r0
 8045eae:	b087      	sub	sp, #28
 8045eb0:	4617      	mov	r7, r2
 8045eb2:	4698      	mov	r8, r3
  if(NULL == pData)
 8045eb4:	b941      	cbnz	r1, 8045ec8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8045eb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8045ebc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8045ebe:	2501      	movs	r5, #1
}
 8045ec0:	4628      	mov	r0, r5
 8045ec2:	b007      	add	sp, #28
 8045ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8045ec8:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8045ecc:	b2f6      	uxtb	r6, r6
 8045ece:	2e01      	cmp	r6, #1
 8045ed0:	d176      	bne.n	8045fc0 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8045ed2:	2200      	movs	r2, #0
 8045ed4:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8045ed6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8045ed8:	18fb      	adds	r3, r7, r3
 8045eda:	4283      	cmp	r3, r0
 8045edc:	d903      	bls.n	8045ee6 <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8045ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8045ee4:	e7ea      	b.n	8045ebc <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8045ee6:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8045ee8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 8045eea:	2303      	movs	r3, #3
 8045eec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8045ef0:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8045ef2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8045ef4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8045ef8:	f043 0302 	orr.w	r3, r3, #2
 8045efc:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8045efe:	4b31      	ldr	r3, [pc, #196]	; (8045fc4 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8045f00:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8045f02:	4b31      	ldr	r3, [pc, #196]	; (8045fc8 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045f04:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 8045f08:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045f0c:	460a      	mov	r2, r1
 8045f0e:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8045f12:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8045f16:	f7fe f8e3 	bl	80440e0 <HAL_DMA_Start_IT>
 8045f1a:	4605      	mov	r5, r0
 8045f1c:	b168      	cbz	r0, 8045f3a <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8045f1e:	6823      	ldr	r3, [r4, #0]
 8045f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8045f22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8045f26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045f28:	4a28      	ldr	r2, [pc, #160]	; (8045fcc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8045f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8045f32:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045f34:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8045f38:	e7c1      	b.n	8045ebe <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 8045f3a:	4b25      	ldr	r3, [pc, #148]	; (8045fd0 <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045f3c:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 8045f3e:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045f40:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045f42:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045f46:	2b01      	cmp	r3, #1
        add *= 512U;
 8045f48:	bf18      	it	ne
 8045f4a:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045f4c:	f001 fdbd 	bl	8047aca <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8045f50:	b148      	cbz	r0, 8045f66 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045f52:	6823      	ldr	r3, [r4, #0]
 8045f54:	4a1d      	ldr	r2, [pc, #116]	; (8045fcc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8045f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045f5a:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8045f5c:	4318      	orrs	r0, r3
 8045f5e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045f60:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8045f64:	e7ac      	b.n	8045ec0 <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8045f66:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8045f6a:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8045f6e:	2290      	movs	r2, #144	; 0x90
 8045f70:	2302      	movs	r3, #2
 8045f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8045f76:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8045f78:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045f7a:	4669      	mov	r1, sp
 8045f7c:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8045f7e:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045f80:	f001 fd90 	bl	8047aa4 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8045f84:	f1b8 0f01 	cmp.w	r8, #1
 8045f88:	d913      	bls.n	8045fb2 <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8045f8a:	2382      	movs	r3, #130	; 0x82
 8045f8c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8045f8e:	4639      	mov	r1, r7
 8045f90:	6820      	ldr	r0, [r4, #0]
 8045f92:	f001 fdca 	bl	8047b2a <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8045f96:	2800      	cmp	r0, #0
 8045f98:	d092      	beq.n	8045ec0 <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045f9a:	6823      	ldr	r3, [r4, #0]
 8045f9c:	4a0b      	ldr	r2, [pc, #44]	; (8045fcc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8045fa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045fa2:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8045fa4:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 8045fa6:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8045fa8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045faa:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8045fae:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8045fb0:	e786      	b.n	8045ec0 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8045fb2:	2381      	movs	r3, #129	; 0x81
 8045fb4:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8045fb6:	4639      	mov	r1, r7
 8045fb8:	6820      	ldr	r0, [r4, #0]
 8045fba:	f001 fd9e 	bl	8047afa <SDMMC_CmdReadSingleBlock>
 8045fbe:	e7ea      	b.n	8045f96 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 8045fc0:	2502      	movs	r5, #2
 8045fc2:	e77d      	b.n	8045ec0 <HAL_SD_ReadBlocks_DMA+0x18>
 8045fc4:	08046107 	.word	0x08046107
 8045fc8:	08046629 	.word	0x08046629
 8045fcc:	004005ff 	.word	0x004005ff
 8045fd0:	4225858c 	.word	0x4225858c

08045fd4 <HAL_SD_WriteBlocks_DMA>:
{
 8045fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045fd8:	4604      	mov	r4, r0
 8045fda:	b087      	sub	sp, #28
 8045fdc:	4616      	mov	r6, r2
 8045fde:	461f      	mov	r7, r3
  if(NULL == pData)
 8045fe0:	4689      	mov	r9, r1
 8045fe2:	b941      	cbnz	r1, 8045ff6 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8045fe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8045fea:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8045fec:	2501      	movs	r5, #1
}
 8045fee:	4628      	mov	r0, r5
 8045ff0:	b007      	add	sp, #28
 8045ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8045ff6:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8045ffa:	b2ed      	uxtb	r5, r5
 8045ffc:	2d01      	cmp	r5, #1
 8045ffe:	d177      	bne.n	80460f0 <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8046000:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8046002:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8046004:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8046006:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8046008:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 804600a:	d904      	bls.n	8046016 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 804600c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804600e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8046012:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8046014:	e7eb      	b.n	8045fee <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8046016:	2303      	movs	r3, #3
 8046018:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 804601c:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 804601e:	4935      	ldr	r1, [pc, #212]	; (80460f4 <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 8046020:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8046022:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8046024:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8046028:	f043 0302 	orr.w	r3, r3, #2
 804602c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 804602e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8046030:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8046032:	4931      	ldr	r1, [pc, #196]	; (80460f8 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8046034:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8046038:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 804603a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 804603e:	2b01      	cmp	r3, #1
      add *= 512U;
 8046040:	bf18      	it	ne
 8046042:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8046044:	f001 fd41 	bl	8047aca <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046048:	4602      	mov	r2, r0
 804604a:	6820      	ldr	r0, [r4, #0]
 804604c:	b142      	cbz	r2, 8046060 <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 804604e:	4b2b      	ldr	r3, [pc, #172]	; (80460fc <HAL_SD_WriteBlocks_DMA+0x128>)
 8046050:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8046052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8046054:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8046056:	4313      	orrs	r3, r2
 8046058:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804605a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 804605e:	e7c6      	b.n	8045fee <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8046060:	2f01      	cmp	r7, #1
 8046062:	d912      	bls.n	804608a <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8046064:	23a0      	movs	r3, #160	; 0xa0
 8046066:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8046068:	4631      	mov	r1, r6
 804606a:	f001 fd8e 	bl	8047b8a <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804606e:	4606      	mov	r6, r0
 8046070:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8046072:	b180      	cbz	r0, 8046096 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046074:	4b21      	ldr	r3, [pc, #132]	; (80460fc <HAL_SD_WriteBlocks_DMA+0x128>)
 8046076:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8046078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 804607a:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 804607c:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 804607e:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8046080:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8046082:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8046086:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8046088:	e7b1      	b.n	8045fee <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 804608a:	2390      	movs	r3, #144	; 0x90
 804608c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 804608e:	4631      	mov	r1, r6
 8046090:	f001 fd63 	bl	8047b5a <SDMMC_CmdWriteSingleBlock>
 8046094:	e7eb      	b.n	804606e <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 8046096:	4b1a      	ldr	r3, [pc, #104]	; (8046100 <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8046098:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 804609a:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 804609e:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 80460a0:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80460a4:	3280      	adds	r2, #128	; 0x80
 80460a6:	08bb      	lsrs	r3, r7, #2
 80460a8:	4649      	mov	r1, r9
 80460aa:	f7fe f819 	bl	80440e0 <HAL_DMA_Start_IT>
 80460ae:	4605      	mov	r5, r0
 80460b0:	b180      	cbz	r0, 80460d4 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80460b2:	6822      	ldr	r2, [r4, #0]
 80460b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80460b6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80460ba:	f023 0302 	bic.w	r3, r3, #2
 80460be:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80460c0:	4b0e      	ldr	r3, [pc, #56]	; (80460fc <HAL_SD_WriteBlocks_DMA+0x128>)
 80460c2:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80460c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80460c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80460ca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80460cc:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80460d0:	6326      	str	r6, [r4, #48]	; 0x30
 80460d2:	e78b      	b.n	8045fec <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80460d4:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80460d8:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80460dc:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80460de:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80460e0:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80460e2:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80460e6:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80460ea:	f001 fcdb 	bl	8047aa4 <SDIO_ConfigData>
      return HAL_OK;
 80460ee:	e77e      	b.n	8045fee <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 80460f0:	2502      	movs	r5, #2
 80460f2:	e77c      	b.n	8045fee <HAL_SD_WriteBlocks_DMA+0x1a>
 80460f4:	08045dd1 	.word	0x08045dd1
 80460f8:	08046629 	.word	0x08046629
 80460fc:	004005ff 	.word	0x004005ff
 8046100:	4225858c 	.word	0x4225858c

08046104 <HAL_SD_ErrorCallback>:
 8046104:	4770      	bx	lr

08046106 <SD_DMAReceiveCplt>:
{
 8046106:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8046108:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 804610a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804610c:	2b82      	cmp	r3, #130	; 0x82
 804610e:	d109      	bne.n	8046124 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8046110:	6820      	ldr	r0, [r4, #0]
 8046112:	f001 fd53 	bl	8047bbc <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046116:	b128      	cbz	r0, 8046124 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8046118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804611a:	4318      	orrs	r0, r3
 804611c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 804611e:	4620      	mov	r0, r4
 8046120:	f7ff fff0 	bl	8046104 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8046124:	6823      	ldr	r3, [r4, #0]
 8046126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8046128:	f022 0208 	bic.w	r2, r2, #8
 804612c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 804612e:	f240 523a 	movw	r2, #1338	; 0x53a
 8046132:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8046134:	2301      	movs	r3, #1
 8046136:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 804613a:	2300      	movs	r3, #0
 804613c:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 804613e:	4620      	mov	r0, r4
 8046140:	f7fd fb27 	bl	8043792 <HAL_SD_RxCpltCallback>
}
 8046144:	bd10      	pop	{r4, pc}
	...

08046148 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8046148:	6e43      	ldr	r3, [r0, #100]	; 0x64
 804614a:	0f9a      	lsrs	r2, r3, #30
 804614c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 804614e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8046152:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8046154:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8046158:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 804615a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 804615e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8046160:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8046164:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8046166:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8046168:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 804616a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 804616c:	0d1a      	lsrs	r2, r3, #20
 804616e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8046170:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8046174:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8046176:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 804617a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 804617c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8046180:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8046182:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8046186:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8046188:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804618c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 804618e:	2200      	movs	r2, #0
 8046190:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8046192:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8046194:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8046196:	2a00      	cmp	r2, #0
 8046198:	d16b      	bne.n	8046272 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 804619a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 804619c:	f640 74fc 	movw	r4, #4092	; 0xffc
 80461a0:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 80461a4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80461a8:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80461aa:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80461ae:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80461b0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80461b4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80461b6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80461ba:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80461bc:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80461c0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80461c4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80461c6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80461c8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80461ca:	7e0a      	ldrb	r2, [r1, #24]
 80461cc:	f002 0207 	and.w	r2, r2, #7
 80461d0:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80461d2:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80461d4:	4093      	lsls	r3, r2
 80461d6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80461d8:	7a0a      	ldrb	r2, [r1, #8]
 80461da:	f002 040f 	and.w	r4, r2, #15
 80461de:	2201      	movs	r2, #1
 80461e0:	40a2      	lsls	r2, r4
 80461e2:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80461e4:	0a52      	lsrs	r2, r2, #9
 80461e6:	4353      	muls	r3, r2
 80461e8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80461ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80461ee:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80461f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80461f2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80461f6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80461f8:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80461fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8046200:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8046202:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8046204:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8046206:	0fda      	lsrs	r2, r3, #31
 8046208:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 804620a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 804620e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8046210:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8046214:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8046216:	f3c3 5283 	ubfx	r2, r3, #22, #4
 804621a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 804621c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8046220:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8046224:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8046226:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 804622a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 804622e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8046232:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8046236:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 804623a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804623e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8046242:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8046246:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 804624a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804624e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8046252:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8046256:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 804625a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 804625e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8046262:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8046266:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 804626a:	2301      	movs	r3, #1
 804626c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8046270:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8046272:	2a01      	cmp	r2, #1
 8046274:	d10f      	bne.n	8046296 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8046276:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 804627a:	041b      	lsls	r3, r3, #16
 804627c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8046280:	4313      	orrs	r3, r2
 8046282:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8046284:	690b      	ldr	r3, [r1, #16]
 8046286:	3301      	adds	r3, #1
 8046288:	029b      	lsls	r3, r3, #10
 804628a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 804628c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 804628e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8046292:	6583      	str	r3, [r0, #88]	; 0x58
 8046294:	e7ab      	b.n	80461ee <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046296:	6803      	ldr	r3, [r0, #0]
 8046298:	4a05      	ldr	r2, [pc, #20]	; (80462b0 <HAL_SD_GetCardCSD+0x168>)
 804629a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804629c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804629e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80462a2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80462a4:	2301      	movs	r3, #1
 80462a6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80462aa:	4618      	mov	r0, r3
 80462ac:	e7e0      	b.n	8046270 <HAL_SD_GetCardCSD+0x128>
 80462ae:	bf00      	nop
 80462b0:	004005ff 	.word	0x004005ff

080462b4 <HAL_SD_InitCard>:
{
 80462b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80462b8:	2300      	movs	r3, #0
{
 80462ba:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80462bc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80462c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80462c4:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80462c6:	2376      	movs	r3, #118	; 0x76
 80462c8:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80462ca:	ab0a      	add	r3, sp, #40	; 0x28
{
 80462cc:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 80462ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80462d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80462d6:	ab07      	add	r3, sp, #28
 80462d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80462da:	6820      	ldr	r0, [r4, #0]
 80462dc:	f001 fb9c 	bl	8047a18 <SDIO_Init>
  if(status != HAL_OK)
 80462e0:	4605      	mov	r5, r0
 80462e2:	2800      	cmp	r0, #0
 80462e4:	f040 80d4 	bne.w	8046490 <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 80462e8:	4f6a      	ldr	r7, [pc, #424]	; (8046494 <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 80462ea:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80462ec:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80462ee:	6820      	ldr	r0, [r4, #0]
 80462f0:	f001 fbb6 	bl	8047a60 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80462f4:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80462f6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80462f8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80462fa:	f001 fc91 	bl	8047c20 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80462fe:	4605      	mov	r5, r0
 8046300:	b940      	cbnz	r0, 8046314 <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8046302:	6820      	ldr	r0, [r4, #0]
 8046304:	f001 fcb4 	bl	8047c70 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8046308:	b158      	cbz	r0, 8046322 <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 804630a:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 804630c:	6820      	ldr	r0, [r4, #0]
 804630e:	f001 fc87 	bl	8047c20 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046312:	b138      	cbz	r0, 8046324 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8046314:	2501      	movs	r5, #1
 8046316:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 804631a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804631c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 804631e:	63a0      	str	r0, [r4, #56]	; 0x38
 8046320:	e084      	b.n	804642c <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8046322:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8046324:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8046326:	2b01      	cmp	r3, #1
 8046328:	d134      	bne.n	8046394 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804632a:	2100      	movs	r1, #0
 804632c:	6820      	ldr	r0, [r4, #0]
 804632e:	f001 fcdf 	bl	8047cf0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046332:	b378      	cbz	r0, 8046394 <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046334:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8046338:	e7ec      	b.n	8046314 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804633a:	4631      	mov	r1, r6
 804633c:	6820      	ldr	r0, [r4, #0]
 804633e:	f001 fcd7 	bl	8047cf0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046342:	2800      	cmp	r0, #0
 8046344:	d1e6      	bne.n	8046314 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8046346:	4649      	mov	r1, r9
 8046348:	6820      	ldr	r0, [r4, #0]
 804634a:	f001 fce9 	bl	8047d20 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804634e:	2800      	cmp	r0, #0
 8046350:	d1f0      	bne.n	8046334 <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046352:	4631      	mov	r1, r6
 8046354:	6820      	ldr	r0, [r4, #0]
 8046356:	f001 fba2 	bl	8047a9e <SDIO_GetResponse>
    count++;
 804635a:	9b06      	ldr	r3, [sp, #24]
 804635c:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804635e:	4605      	mov	r5, r0
    count++;
 8046360:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8046362:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8046364:	9b06      	ldr	r3, [sp, #24]
 8046366:	42bb      	cmp	r3, r7
 8046368:	d801      	bhi.n	804636e <HAL_SD_InitCard+0xba>
 804636a:	2e00      	cmp	r6, #0
 804636c:	d0e5      	beq.n	804633a <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 804636e:	9b06      	ldr	r3, [sp, #24]
 8046370:	4543      	cmp	r3, r8
 8046372:	d816      	bhi.n	80463a2 <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8046374:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8046378:	f04f 0301 	mov.w	r3, #1
 804637c:	bf18      	it	ne
 804637e:	461d      	movne	r5, r3
 8046380:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8046382:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8046384:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8046388:	f001 fb72 	bl	8047a70 <SDIO_GetPowerState>
 804638c:	b960      	cbnz	r0, 80463a8 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 804638e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8046392:	e056      	b.n	8046442 <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8046394:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8046398:	2600      	movs	r6, #0
 804639a:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 804639c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8046498 <HAL_SD_InitCard+0x1e4>
 80463a0:	e7e0      	b.n	8046364 <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80463a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80463a6:	e7b5      	b.n	8046314 <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80463a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80463aa:	2b03      	cmp	r3, #3
 80463ac:	d019      	beq.n	80463e2 <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80463ae:	6820      	ldr	r0, [r4, #0]
 80463b0:	f001 fcff 	bl	8047db2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80463b4:	2800      	cmp	r0, #0
 80463b6:	d144      	bne.n	8046442 <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80463b8:	4601      	mov	r1, r0
 80463ba:	6820      	ldr	r0, [r4, #0]
 80463bc:	f001 fb6f 	bl	8047a9e <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80463c0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80463c2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80463c4:	6820      	ldr	r0, [r4, #0]
 80463c6:	f001 fb6a 	bl	8047a9e <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80463ca:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80463cc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80463ce:	6820      	ldr	r0, [r4, #0]
 80463d0:	f001 fb65 	bl	8047a9e <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80463d4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80463d6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80463d8:	6820      	ldr	r0, [r4, #0]
 80463da:	f001 fb60 	bl	8047a9e <SDIO_GetResponse>
 80463de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80463e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80463e4:	2b03      	cmp	r3, #3
 80463e6:	d125      	bne.n	8046434 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80463e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80463ea:	2b03      	cmp	r3, #3
 80463ec:	d12f      	bne.n	804644e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80463ee:	2104      	movs	r1, #4
 80463f0:	6820      	ldr	r0, [r4, #0]
 80463f2:	f001 fb54 	bl	8047a9e <SDIO_GetResponse>
 80463f6:	0d00      	lsrs	r0, r0, #20
 80463f8:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80463fa:	a90d      	add	r1, sp, #52	; 0x34
 80463fc:	4620      	mov	r0, r4
 80463fe:	f7ff fea3 	bl	8046148 <HAL_SD_GetCardCSD>
 8046402:	4605      	mov	r5, r0
 8046404:	2800      	cmp	r0, #0
 8046406:	d140      	bne.n	804648a <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8046408:	6d22      	ldr	r2, [r4, #80]	; 0x50
 804640a:	4603      	mov	r3, r0
 804640c:	0412      	lsls	r2, r2, #16
 804640e:	6820      	ldr	r0, [r4, #0]
 8046410:	f001 fbee 	bl	8047bf0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8046414:	b9a8      	cbnz	r0, 8046442 <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8046416:	f104 0310 	add.w	r3, r4, #16
 804641a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 804641e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8046422:	1d23      	adds	r3, r4, #4
 8046424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8046426:	6820      	ldr	r0, [r4, #0]
 8046428:	f001 faf6 	bl	8047a18 <SDIO_Init>
}
 804642c:	4628      	mov	r0, r5
 804642e:	b019      	add	sp, #100	; 0x64
 8046430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8046434:	f10d 0116 	add.w	r1, sp, #22
 8046438:	6820      	ldr	r0, [r4, #0]
 804643a:	f001 fce5 	bl	8047e08 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 804643e:	2800      	cmp	r0, #0
 8046440:	d0d2      	beq.n	80463e8 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8046442:	2501      	movs	r5, #1
 8046444:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8046448:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804644a:	4308      	orrs	r0, r1
 804644c:	e767      	b.n	804631e <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 804644e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8046452:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046454:	6820      	ldr	r0, [r4, #0]
 8046456:	0409      	lsls	r1, r1, #16
 8046458:	f001 fcc0 	bl	8047ddc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 804645c:	2800      	cmp	r0, #0
 804645e:	d1f0      	bne.n	8046442 <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046460:	4601      	mov	r1, r0
 8046462:	6820      	ldr	r0, [r4, #0]
 8046464:	f001 fb1b 	bl	8047a9e <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8046468:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804646a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 804646c:	6820      	ldr	r0, [r4, #0]
 804646e:	f001 fb16 	bl	8047a9e <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8046472:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8046474:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8046476:	6820      	ldr	r0, [r4, #0]
 8046478:	f001 fb11 	bl	8047a9e <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 804647c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 804647e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8046480:	6820      	ldr	r0, [r4, #0]
 8046482:	f001 fb0c 	bl	8047a9e <SDIO_GetResponse>
 8046486:	6720      	str	r0, [r4, #112]	; 0x70
 8046488:	e7b1      	b.n	80463ee <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804648a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 804648e:	e7d8      	b.n	8046442 <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8046490:	2501      	movs	r5, #1
 8046492:	e7cb      	b.n	804642c <HAL_SD_InitCard+0x178>
 8046494:	422580a0 	.word	0x422580a0
 8046498:	c1100000 	.word	0xc1100000

0804649c <HAL_SD_Init>:
{
 804649c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 804649e:	4604      	mov	r4, r0
 80464a0:	b908      	cbnz	r0, 80464a6 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 80464a2:	2001      	movs	r0, #1
}
 80464a4:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 80464a6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80464aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80464ae:	b913      	cbnz	r3, 80464b6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80464b0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80464b2:	f009 fac5 	bl	804fa40 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80464b6:	2303      	movs	r3, #3
 80464b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80464bc:	4620      	mov	r0, r4
 80464be:	f7ff fef9 	bl	80462b4 <HAL_SD_InitCard>
 80464c2:	2800      	cmp	r0, #0
 80464c4:	d1ed      	bne.n	80464a2 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80464c6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80464c8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80464ca:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80464cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80464d0:	e7e8      	b.n	80464a4 <HAL_SD_Init+0x8>

080464d2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80464d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80464d4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80464d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80464d8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80464da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80464dc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80464de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80464e0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80464e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80464e4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80464e6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80464e8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80464ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80464ec:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80464ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80464f0:	61cb      	str	r3, [r1, #28]
}
 80464f2:	2000      	movs	r0, #0
 80464f4:	4770      	bx	lr
	...

080464f8 <HAL_SD_ConfigWideBusOperation>:
{
 80464f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80464fa:	2303      	movs	r3, #3
 80464fc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8046500:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8046502:	2b03      	cmp	r3, #3
{
 8046504:	b08b      	sub	sp, #44	; 0x2c
 8046506:	4604      	mov	r4, r0
 8046508:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 804650a:	d002      	beq.n	8046512 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 804650c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8046510:	d103      	bne.n	804651a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046518:	e053      	b.n	80465c2 <HAL_SD_ConfigWideBusOperation+0xca>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 804651a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 804651e:	6800      	ldr	r0, [r0, #0]
 8046520:	d12a      	bne.n	8046578 <HAL_SD_ConfigWideBusOperation+0x80>
  uint32_t scr[2U] = {0U, 0U};
 8046522:	2100      	movs	r1, #0
 8046524:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8046528:	f001 fab9 	bl	8047a9e <SDIO_GetResponse>
 804652c:	0180      	lsls	r0, r0, #6
 804652e:	d41e      	bmi.n	804656e <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8046530:	a904      	add	r1, sp, #16
 8046532:	4620      	mov	r0, r4
 8046534:	f7ff fc53 	bl	8045dde <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8046538:	b960      	cbnz	r0, 8046554 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 804653a:	9b05      	ldr	r3, [sp, #20]
 804653c:	0359      	lsls	r1, r3, #13
 804653e:	d518      	bpl.n	8046572 <HAL_SD_ConfigWideBusOperation+0x7a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046540:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8046542:	6820      	ldr	r0, [r4, #0]
 8046544:	0409      	lsls	r1, r1, #16
 8046546:	f001 fbd3 	bl	8047cf0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804654a:	b918      	cbnz	r0, 8046554 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 804654c:	2102      	movs	r1, #2
 804654e:	6820      	ldr	r0, [r4, #0]
 8046550:	f001 fbff 	bl	8047d52 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8046554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046556:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8046558:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 804655a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 804655c:	6827      	ldr	r7, [r4, #0]
 804655e:	b395      	cbz	r5, 80465c6 <HAL_SD_ConfigWideBusOperation+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046560:	4b26      	ldr	r3, [pc, #152]	; (80465fc <HAL_SD_ConfigWideBusOperation+0x104>)
 8046562:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8046564:	2001      	movs	r0, #1
 8046566:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 804656a:	b00b      	add	sp, #44	; 0x2c
 804656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 804656e:	4630      	mov	r0, r6
 8046570:	e7f0      	b.n	8046554 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8046572:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8046576:	e7ed      	b.n	8046554 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8046578:	bb01      	cbnz	r1, 80465bc <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0U, 0U};
 804657a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 804657e:	f001 fa8e 	bl	8047a9e <SDIO_GetResponse>
 8046582:	0182      	lsls	r2, r0, #6
 8046584:	d414      	bmi.n	80465b0 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8046586:	a904      	add	r1, sp, #16
 8046588:	4620      	mov	r0, r4
 804658a:	f7ff fc28 	bl	8045dde <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 804658e:	b960      	cbnz	r0, 80465aa <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8046590:	9b05      	ldr	r3, [sp, #20]
 8046592:	03db      	lsls	r3, r3, #15
 8046594:	d50f      	bpl.n	80465b6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046596:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8046598:	6820      	ldr	r0, [r4, #0]
 804659a:	0409      	lsls	r1, r1, #16
 804659c:	f001 fba8 	bl	8047cf0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80465a0:	b918      	cbnz	r0, 80465aa <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80465a2:	4601      	mov	r1, r0
 80465a4:	6820      	ldr	r0, [r4, #0]
 80465a6:	f001 fbd4 	bl	8047d52 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80465aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80465ac:	4308      	orrs	r0, r1
 80465ae:	e7d3      	b.n	8046558 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80465b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80465b4:	e7f9      	b.n	80465aa <HAL_SD_ConfigWideBusOperation+0xb2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80465b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80465ba:	e7f6      	b.n	80465aa <HAL_SD_ConfigWideBusOperation+0xb2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80465bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80465be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80465c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80465c4:	e7c9      	b.n	804655a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80465c6:	6863      	ldr	r3, [r4, #4]
 80465c8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80465ca:	68a3      	ldr	r3, [r4, #8]
 80465cc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80465ce:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80465d0:	e9cd 3606 	strd	r3, r6, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80465d4:	6963      	ldr	r3, [r4, #20]
 80465d6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80465d8:	69a3      	ldr	r3, [r4, #24]
 80465da:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80465dc:	ab0a      	add	r3, sp, #40	; 0x28
 80465de:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80465e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80465e6:	ab04      	add	r3, sp, #16
 80465e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80465ea:	4638      	mov	r0, r7
 80465ec:	f001 fa14 	bl	8047a18 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80465f0:	2301      	movs	r3, #1
 80465f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80465f6:	4628      	mov	r0, r5
 80465f8:	e7b7      	b.n	804656a <HAL_SD_ConfigWideBusOperation+0x72>
 80465fa:	bf00      	nop
 80465fc:	004005ff 	.word	0x004005ff

08046600 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046600:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8046602:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046604:	0409      	lsls	r1, r1, #16
{
 8046606:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046608:	6800      	ldr	r0, [r0, #0]
 804660a:	f001 fc4d 	bl	8047ea8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 804660e:	4601      	mov	r1, r0
 8046610:	b928      	cbnz	r0, 804661e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046612:	6820      	ldr	r0, [r4, #0]
 8046614:	f001 fa43 	bl	8047a9e <SDIO_GetResponse>
}
 8046618:	f3c0 2043 	ubfx	r0, r0, #9, #4
 804661c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 804661e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046620:	4319      	orrs	r1, r3
 8046622:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8046624:	2000      	movs	r0, #0
 8046626:	e7f7      	b.n	8046618 <HAL_SD_GetCardState+0x18>

08046628 <SD_DMAError>:
{
 8046628:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804662a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 804662c:	f7fd fe62 	bl	80442f4 <HAL_DMA_GetError>
 8046630:	2802      	cmp	r0, #2
 8046632:	d026      	beq.n	8046682 <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8046634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8046636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8046638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804663a:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 804663c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804663e:	d001      	beq.n	8046644 <SD_DMAError+0x1c>
 8046640:	2b01      	cmp	r3, #1
 8046642:	d11b      	bne.n	804667c <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046644:	6823      	ldr	r3, [r4, #0]
 8046646:	4a0f      	ldr	r2, [pc, #60]	; (8046684 <SD_DMAError+0x5c>)
 8046648:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 804664a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804664c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8046650:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8046652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8046658:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 804665a:	4620      	mov	r0, r4
 804665c:	f7ff ffd0 	bl	8046600 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8046660:	3805      	subs	r0, #5
 8046662:	2801      	cmp	r0, #1
 8046664:	d805      	bhi.n	8046672 <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8046666:	6820      	ldr	r0, [r4, #0]
 8046668:	f001 faa8 	bl	8047bbc <SDMMC_CmdStopTransfer>
 804666c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804666e:	4318      	orrs	r0, r3
 8046670:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8046672:	2301      	movs	r3, #1
 8046674:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8046678:	2300      	movs	r3, #0
 804667a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 804667c:	4620      	mov	r0, r4
 804667e:	f7ff fd41 	bl	8046104 <HAL_SD_ErrorCallback>
}
 8046682:	bd10      	pop	{r4, pc}
 8046684:	004005ff 	.word	0x004005ff

08046688 <SD_DMATxAbort>:
{
 8046688:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804668a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 804668c:	6823      	ldr	r3, [r4, #0]
 804668e:	f240 523a 	movw	r2, #1338	; 0x53a
 8046692:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8046694:	4620      	mov	r0, r4
 8046696:	f7ff ffb3 	bl	8046600 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 804669a:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804669c:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 804669e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80466a2:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 80466a4:	f04f 0300 	mov.w	r3, #0
 80466a8:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80466aa:	d805      	bhi.n	80466b8 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80466ac:	6820      	ldr	r0, [r4, #0]
 80466ae:	f001 fa85 	bl	8047bbc <SDMMC_CmdStopTransfer>
 80466b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80466b4:	4318      	orrs	r0, r3
 80466b6:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80466b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 80466ba:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80466bc:	b913      	cbnz	r3, 80466c4 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80466be:	f7fd f860 	bl	8043782 <HAL_SD_AbortCallback>
}
 80466c2:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 80466c4:	f7ff fd1e 	bl	8046104 <HAL_SD_ErrorCallback>
}
 80466c8:	e7fb      	b.n	80466c2 <SD_DMATxAbort+0x3a>
	...

080466cc <HAL_SD_IRQHandler>:
{
 80466cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 80466d0:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 80466d2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80466d4:	6800      	ldr	r0, [r0, #0]
 80466d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80466d8:	041a      	lsls	r2, r3, #16
 80466da:	d51f      	bpl.n	804671c <HAL_SD_IRQHandler+0x50>
 80466dc:	072b      	lsls	r3, r5, #28
 80466de:	d51d      	bpl.n	804671c <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80466e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 80466e2:	b1c7      	cbz	r7, 8046716 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 80466e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80466e6:	1d35      	adds	r5, r6, #4
 80466e8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80466ec:	6820      	ldr	r0, [r4, #0]
 80466ee:	f001 f9af 	bl	8047a50 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80466f2:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80466f4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80466f8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80466fc:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80466fe:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8046700:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8046704:	f805 0c01 	strb.w	r0, [r5, #-1]
 8046708:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 804670a:	4545      	cmp	r5, r8
 804670c:	d1ee      	bne.n	80466ec <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 804670e:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8046710:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 8046712:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8046714:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8046716:	b002      	add	sp, #8
 8046718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 804671c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804671e:	05df      	lsls	r7, r3, #23
 8046720:	d545      	bpl.n	80467ae <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8046722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8046726:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8046728:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804672a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 804672e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8046732:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8046734:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8046736:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8046738:	f023 0301 	bic.w	r3, r3, #1
 804673c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 804673e:	d51b      	bpl.n	8046778 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8046740:	f015 0f22 	tst.w	r5, #34	; 0x22
 8046744:	d008      	beq.n	8046758 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8046746:	f001 fa39 	bl	8047bbc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804674a:	b128      	cbz	r0, 8046758 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 804674c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804674e:	4318      	orrs	r0, r3
 8046750:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8046752:	4620      	mov	r0, r4
 8046754:	f7ff fcd6 	bl	8046104 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8046758:	6823      	ldr	r3, [r4, #0]
 804675a:	f240 523a 	movw	r2, #1338	; 0x53a
 804675e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8046760:	2301      	movs	r3, #1
 8046762:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8046766:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8046768:	f04f 0300 	mov.w	r3, #0
 804676c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 804676e:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8046770:	d01a      	beq.n	80467a8 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8046772:	f7fd f80e 	bl	8043792 <HAL_SD_RxCpltCallback>
 8046776:	e7ce      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8046778:	062a      	lsls	r2, r5, #24
 804677a:	d5cc      	bpl.n	8046716 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 804677c:	06ab      	lsls	r3, r5, #26
 804677e:	d508      	bpl.n	8046792 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8046780:	f001 fa1c 	bl	8047bbc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8046784:	b128      	cbz	r0, 8046792 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8046786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046788:	4318      	orrs	r0, r3
 804678a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 804678c:	4620      	mov	r0, r4
 804678e:	f7ff fcb9 	bl	8046104 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8046792:	07af      	lsls	r7, r5, #30
 8046794:	d1bf      	bne.n	8046716 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8046796:	6822      	ldr	r2, [r4, #0]
 8046798:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 804679a:	f023 0308 	bic.w	r3, r3, #8
 804679e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80467a0:	2301      	movs	r3, #1
 80467a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80467a6:	4620      	mov	r0, r4
 80467a8:	f7fc ffef 	bl	804378a <HAL_SD_TxCpltCallback>
 80467ac:	e7b3      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80467ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80467b0:	045e      	lsls	r6, r3, #17
 80467b2:	d526      	bpl.n	8046802 <HAL_SD_IRQHandler+0x136>
 80467b4:	0729      	lsls	r1, r5, #28
 80467b6:	d524      	bpl.n	8046802 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80467b8:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80467ba:	2f00      	cmp	r7, #0
 80467bc:	d0ab      	beq.n	8046716 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80467be:	6a26      	ldr	r6, [r4, #32]
 80467c0:	1d35      	adds	r5, r6, #4
 80467c2:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80467c6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80467ca:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80467cc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80467d0:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 80467d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80467d6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80467d8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80467dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80467e0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80467e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80467e6:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80467e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80467ec:	3504      	adds	r5, #4
 80467ee:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80467f0:	f001 f931 	bl	8047a56 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80467f4:	4545      	cmp	r5, r8
 80467f6:	d1e6      	bne.n	80467c6 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 80467f8:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 80467fa:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 80467fc:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 80467fe:	6267      	str	r7, [r4, #36]	; 0x24
 8046800:	e789      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8046802:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8046804:	f240 233a 	movw	r3, #570	; 0x23a
 8046808:	421a      	tst	r2, r3
 804680a:	d084      	beq.n	8046716 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 804680c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804680e:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8046810:	bf42      	ittt	mi
 8046812:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046814:	f043 0302 	orrmi.w	r3, r3, #2
 8046818:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 804681a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804681c:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804681e:	bf42      	ittt	mi
 8046820:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046822:	f043 0308 	orrmi.w	r3, r3, #8
 8046826:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8046828:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804682a:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 804682c:	bf42      	ittt	mi
 804682e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046830:	f043 0320 	orrmi.w	r3, r3, #32
 8046834:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8046836:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046838:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 804683a:	bf42      	ittt	mi
 804683c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804683e:	f043 0310 	orrmi.w	r3, r3, #16
 8046842:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8046844:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046846:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8046848:	bf42      	ittt	mi
 804684a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804684c:	f043 0308 	orrmi.w	r3, r3, #8
 8046850:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8046852:	f240 733a 	movw	r3, #1850	; 0x73a
 8046856:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8046858:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804685a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 804685e:	f023 0302 	bic.w	r3, r3, #2
 8046862:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8046864:	f001 f9aa 	bl	8047bbc <SDMMC_CmdStopTransfer>
 8046868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 804686a:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804686c:	ea40 0003 	orr.w	r0, r0, r3
 8046870:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8046872:	d508      	bpl.n	8046886 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8046874:	2301      	movs	r3, #1
 8046876:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804687a:	2300      	movs	r3, #0
 804687c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 804687e:	4620      	mov	r0, r4
 8046880:	f7ff fc40 	bl	8046104 <HAL_SD_ErrorCallback>
 8046884:	e747      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8046886:	062b      	lsls	r3, r5, #24
 8046888:	f57f af45 	bpl.w	8046716 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 804688c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8046890:	d00b      	beq.n	80468aa <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8046892:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8046894:	4b10      	ldr	r3, [pc, #64]	; (80468d8 <HAL_SD_IRQHandler+0x20c>)
 8046896:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8046898:	f7fd fc5c 	bl	8044154 <HAL_DMA_Abort_IT>
 804689c:	2800      	cmp	r0, #0
 804689e:	f43f af3a 	beq.w	8046716 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 80468a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 80468a4:	f7ff fef0 	bl	8046688 <SD_DMATxAbort>
 80468a8:	e735      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80468aa:	f015 0503 	ands.w	r5, r5, #3
 80468ae:	d009      	beq.n	80468c4 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80468b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80468b2:	4b0a      	ldr	r3, [pc, #40]	; (80468dc <HAL_SD_IRQHandler+0x210>)
 80468b4:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80468b6:	f7fd fc4d 	bl	8044154 <HAL_DMA_Abort_IT>
 80468ba:	2800      	cmp	r0, #0
 80468bc:	f43f af2b 	beq.w	8046716 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80468c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80468c2:	e7ef      	b.n	80468a4 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 80468c4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80468c6:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80468c8:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80468ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80468ce:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80468d0:	f7fc ff57 	bl	8043782 <HAL_SD_AbortCallback>
}
 80468d4:	e71f      	b.n	8046716 <HAL_SD_IRQHandler+0x4a>
 80468d6:	bf00      	nop
 80468d8:	08046689 	.word	0x08046689
 80468dc:	080468e1 	.word	0x080468e1

080468e0 <SD_DMARxAbort>:
 80468e0:	f7ff bed2 	b.w	8046688 <SD_DMATxAbort>

080468e4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80468e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80468e6:	4604      	mov	r4, r0
 80468e8:	460e      	mov	r6, r1
 80468ea:	4615      	mov	r5, r2
 80468ec:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80468ee:	6821      	ldr	r1, [r4, #0]
 80468f0:	688a      	ldr	r2, [r1, #8]
 80468f2:	ea36 0302 	bics.w	r3, r6, r2
 80468f6:	d001      	beq.n	80468fc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80468f8:	2000      	movs	r0, #0
 80468fa:	e02d      	b.n	8046958 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80468fc:	1c6b      	adds	r3, r5, #1
 80468fe:	d0f7      	beq.n	80468f0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8046900:	f7fd f882 	bl	8043a08 <HAL_GetTick>
 8046904:	1bc0      	subs	r0, r0, r7
 8046906:	4285      	cmp	r5, r0
 8046908:	d8f1      	bhi.n	80468ee <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804690a:	6823      	ldr	r3, [r4, #0]
 804690c:	685a      	ldr	r2, [r3, #4]
 804690e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8046912:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8046914:	6862      	ldr	r2, [r4, #4]
 8046916:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804691a:	d10a      	bne.n	8046932 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 804691c:	68a2      	ldr	r2, [r4, #8]
 804691e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8046922:	d002      	beq.n	804692a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8046924:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8046928:	d103      	bne.n	8046932 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 804692a:	681a      	ldr	r2, [r3, #0]
 804692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046930:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8046932:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8046934:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8046938:	d107      	bne.n	804694a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 804693a:	681a      	ldr	r2, [r3, #0]
 804693c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8046940:	601a      	str	r2, [r3, #0]
 8046942:	681a      	ldr	r2, [r3, #0]
 8046944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8046948:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 804694a:	2301      	movs	r3, #1
 804694c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8046950:	2300      	movs	r3, #0
 8046952:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8046956:	2003      	movs	r0, #3
}
 8046958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804695c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804695c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804695e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046960:	4a12      	ldr	r2, [pc, #72]	; (80469ac <SPI_EndRxTxTransaction+0x50>)
 8046962:	4e13      	ldr	r6, [pc, #76]	; (80469b0 <SPI_EndRxTxTransaction+0x54>)
 8046964:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046966:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046968:	fbb5 f6f6 	udiv	r6, r5, r6
 804696c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8046970:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046972:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8046976:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046978:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804697a:	d10b      	bne.n	8046994 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804697c:	460a      	mov	r2, r1
 804697e:	2180      	movs	r1, #128	; 0x80
 8046980:	f7ff ffb0 	bl	80468e4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8046984:	b178      	cbz	r0, 80469a6 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8046986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8046988:	f043 0320 	orr.w	r3, r3, #32
 804698c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 804698e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8046990:	b002      	add	sp, #8
 8046992:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8046994:	9b01      	ldr	r3, [sp, #4]
 8046996:	b133      	cbz	r3, 80469a6 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8046998:	9b01      	ldr	r3, [sp, #4]
 804699a:	3b01      	subs	r3, #1
 804699c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804699e:	6823      	ldr	r3, [r4, #0]
 80469a0:	689b      	ldr	r3, [r3, #8]
 80469a2:	061b      	lsls	r3, r3, #24
 80469a4:	d4f6      	bmi.n	8046994 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80469a6:	2000      	movs	r0, #0
 80469a8:	e7f2      	b.n	8046990 <SPI_EndRxTxTransaction+0x34>
 80469aa:	bf00      	nop
 80469ac:	20001048 	.word	0x20001048
 80469b0:	016e3600 	.word	0x016e3600

080469b4 <HAL_SPI_Init>:
{
 80469b4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80469b6:	4604      	mov	r4, r0
 80469b8:	2800      	cmp	r0, #0
 80469ba:	d036      	beq.n	8046a2a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80469bc:	2300      	movs	r3, #0
 80469be:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80469c0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80469c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80469c8:	b91b      	cbnz	r3, 80469d2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80469ca:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80469ce:	f009 f9a1 	bl	804fd14 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80469d2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80469d4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80469d6:	2302      	movs	r3, #2
 80469d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80469dc:	680b      	ldr	r3, [r1, #0]
 80469de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80469e2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80469e4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80469e8:	4303      	orrs	r3, r0
 80469ea:	68e0      	ldr	r0, [r4, #12]
 80469ec:	4303      	orrs	r3, r0
 80469ee:	6920      	ldr	r0, [r4, #16]
 80469f0:	4303      	orrs	r3, r0
 80469f2:	6960      	ldr	r0, [r4, #20]
 80469f4:	4303      	orrs	r3, r0
 80469f6:	69e0      	ldr	r0, [r4, #28]
 80469f8:	4303      	orrs	r3, r0
 80469fa:	6a20      	ldr	r0, [r4, #32]
 80469fc:	4303      	orrs	r3, r0
 80469fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8046a00:	4303      	orrs	r3, r0
 8046a02:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8046a06:	4303      	orrs	r3, r0
 8046a08:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8046a0a:	0c12      	lsrs	r2, r2, #16
 8046a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8046a0e:	f002 0204 	and.w	r2, r2, #4
 8046a12:	431a      	orrs	r2, r3
 8046a14:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8046a16:	69cb      	ldr	r3, [r1, #28]
 8046a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8046a1c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8046a1e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8046a20:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8046a22:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8046a24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8046a28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8046a2a:	2001      	movs	r0, #1
 8046a2c:	e7fc      	b.n	8046a28 <HAL_SPI_Init+0x74>

08046a2e <HAL_SPI_TransmitReceive>:
{
 8046a2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8046a32:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8046a34:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8046a38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8046a3a:	2b01      	cmp	r3, #1
{
 8046a3c:	4604      	mov	r4, r0
 8046a3e:	460d      	mov	r5, r1
 8046a40:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8046a42:	f000 80e2 	beq.w	8046c0a <HAL_SPI_TransmitReceive+0x1dc>
 8046a46:	2301      	movs	r3, #1
 8046a48:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8046a4c:	f7fc ffdc 	bl	8043a08 <HAL_GetTick>
  tmp_state           = hspi->State;
 8046a50:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8046a54:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8046a56:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8046a58:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8046a5a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8046a5c:	d00a      	beq.n	8046a74 <HAL_SPI_TransmitReceive+0x46>
 8046a5e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8046a62:	f040 80d0 	bne.w	8046c06 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8046a66:	68a0      	ldr	r0, [r4, #8]
 8046a68:	2800      	cmp	r0, #0
 8046a6a:	f040 80cc 	bne.w	8046c06 <HAL_SPI_TransmitReceive+0x1d8>
 8046a6e:	2b04      	cmp	r3, #4
 8046a70:	f040 80c9 	bne.w	8046c06 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8046a74:	2d00      	cmp	r5, #0
 8046a76:	f000 80c4 	beq.w	8046c02 <HAL_SPI_TransmitReceive+0x1d4>
 8046a7a:	f1b9 0f00 	cmp.w	r9, #0
 8046a7e:	f000 80c0 	beq.w	8046c02 <HAL_SPI_TransmitReceive+0x1d4>
 8046a82:	2e00      	cmp	r6, #0
 8046a84:	f000 80bd 	beq.w	8046c02 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8046a88:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8046a8c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8046a90:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8046a92:	bf1c      	itt	ne
 8046a94:	2305      	movne	r3, #5
 8046a96:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8046a9a:	2300      	movs	r3, #0
 8046a9c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8046a9e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046aa2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8046aa4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8046aa6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046aa8:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8046aaa:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046aac:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8046aae:	bf58      	it	pl
 8046ab0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8046ab2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8046ab4:	bf58      	it	pl
 8046ab6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8046aba:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8046abc:	bf58      	it	pl
 8046abe:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8046ac0:	68e2      	ldr	r2, [r4, #12]
 8046ac2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8046ac6:	d158      	bne.n	8046b7a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8046ac8:	b109      	cbz	r1, 8046ace <HAL_SPI_TransmitReceive+0xa0>
 8046aca:	2e01      	cmp	r6, #1
 8046acc:	d107      	bne.n	8046ade <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8046ace:	f835 2b02 	ldrh.w	r2, [r5], #2
 8046ad2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8046ad4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8046ad6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8046ad8:	3b01      	subs	r3, #1
 8046ada:	b29b      	uxth	r3, r3
 8046adc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8046ade:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046ae0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046ae2:	b29b      	uxth	r3, r3
 8046ae4:	b9ab      	cbnz	r3, 8046b12 <HAL_SPI_TransmitReceive+0xe4>
 8046ae6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046ae8:	b29b      	uxth	r3, r3
 8046aea:	b993      	cbnz	r3, 8046b12 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8046aec:	4642      	mov	r2, r8
 8046aee:	4639      	mov	r1, r7
 8046af0:	4620      	mov	r0, r4
 8046af2:	f7ff ff33 	bl	804695c <SPI_EndRxTxTransaction>
 8046af6:	2800      	cmp	r0, #0
 8046af8:	f040 8081 	bne.w	8046bfe <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8046afc:	68a3      	ldr	r3, [r4, #8]
 8046afe:	2b00      	cmp	r3, #0
 8046b00:	d132      	bne.n	8046b68 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8046b02:	6823      	ldr	r3, [r4, #0]
 8046b04:	9001      	str	r0, [sp, #4]
 8046b06:	68da      	ldr	r2, [r3, #12]
 8046b08:	9201      	str	r2, [sp, #4]
 8046b0a:	689b      	ldr	r3, [r3, #8]
 8046b0c:	9301      	str	r3, [sp, #4]
 8046b0e:	9b01      	ldr	r3, [sp, #4]
 8046b10:	e02a      	b.n	8046b68 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046b12:	6822      	ldr	r2, [r4, #0]
 8046b14:	6893      	ldr	r3, [r2, #8]
 8046b16:	0799      	lsls	r1, r3, #30
 8046b18:	d50d      	bpl.n	8046b36 <HAL_SPI_TransmitReceive+0x108>
 8046b1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046b1c:	b29b      	uxth	r3, r3
 8046b1e:	b153      	cbz	r3, 8046b36 <HAL_SPI_TransmitReceive+0x108>
 8046b20:	b14d      	cbz	r5, 8046b36 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8046b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046b24:	f833 1b02 	ldrh.w	r1, [r3], #2
 8046b28:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8046b2a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8046b2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046b2e:	3b01      	subs	r3, #1
 8046b30:	b29b      	uxth	r3, r3
 8046b32:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8046b34:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8046b36:	6893      	ldr	r3, [r2, #8]
 8046b38:	07db      	lsls	r3, r3, #31
 8046b3a:	d50c      	bpl.n	8046b56 <HAL_SPI_TransmitReceive+0x128>
 8046b3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046b3e:	b29b      	uxth	r3, r3
 8046b40:	b14b      	cbz	r3, 8046b56 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8046b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046b44:	68d2      	ldr	r2, [r2, #12]
 8046b46:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8046b4a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8046b4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046b4e:	3b01      	subs	r3, #1
 8046b50:	b29b      	uxth	r3, r3
 8046b52:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8046b54:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8046b56:	f7fc ff57 	bl	8043a08 <HAL_GetTick>
 8046b5a:	eba0 0008 	sub.w	r0, r0, r8
 8046b5e:	4287      	cmp	r7, r0
 8046b60:	d8be      	bhi.n	8046ae0 <HAL_SPI_TransmitReceive+0xb2>
 8046b62:	1c7e      	adds	r6, r7, #1
 8046b64:	d0bc      	beq.n	8046ae0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8046b66:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8046b68:	2301      	movs	r3, #1
 8046b6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8046b6e:	2300      	movs	r3, #0
 8046b70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8046b74:	b003      	add	sp, #12
 8046b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8046b7a:	b109      	cbz	r1, 8046b80 <HAL_SPI_TransmitReceive+0x152>
 8046b7c:	2e01      	cmp	r6, #1
 8046b7e:	d108      	bne.n	8046b92 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8046b80:	782a      	ldrb	r2, [r5, #0]
 8046b82:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8046b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046b86:	3301      	adds	r3, #1
 8046b88:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8046b8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046b8c:	3b01      	subs	r3, #1
 8046b8e:	b29b      	uxth	r3, r3
 8046b90:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8046b92:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046b94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046b96:	b29b      	uxth	r3, r3
 8046b98:	b91b      	cbnz	r3, 8046ba2 <HAL_SPI_TransmitReceive+0x174>
 8046b9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046b9c:	b29b      	uxth	r3, r3
 8046b9e:	2b00      	cmp	r3, #0
 8046ba0:	d0a4      	beq.n	8046aec <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046ba2:	6822      	ldr	r2, [r4, #0]
 8046ba4:	6893      	ldr	r3, [r2, #8]
 8046ba6:	0798      	lsls	r0, r3, #30
 8046ba8:	d50e      	bpl.n	8046bc8 <HAL_SPI_TransmitReceive+0x19a>
 8046baa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046bac:	b29b      	uxth	r3, r3
 8046bae:	b15b      	cbz	r3, 8046bc8 <HAL_SPI_TransmitReceive+0x19a>
 8046bb0:	b155      	cbz	r5, 8046bc8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8046bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046bb4:	781b      	ldrb	r3, [r3, #0]
 8046bb6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8046bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046bba:	3301      	adds	r3, #1
 8046bbc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8046bbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046bc0:	3b01      	subs	r3, #1
 8046bc2:	b29b      	uxth	r3, r3
 8046bc4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8046bc6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8046bc8:	6822      	ldr	r2, [r4, #0]
 8046bca:	6893      	ldr	r3, [r2, #8]
 8046bcc:	07d9      	lsls	r1, r3, #31
 8046bce:	d50d      	bpl.n	8046bec <HAL_SPI_TransmitReceive+0x1be>
 8046bd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046bd2:	b29b      	uxth	r3, r3
 8046bd4:	b153      	cbz	r3, 8046bec <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8046bd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046bd8:	68d2      	ldr	r2, [r2, #12]
 8046bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8046bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046bde:	3301      	adds	r3, #1
 8046be0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8046be2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8046be4:	3b01      	subs	r3, #1
 8046be6:	b29b      	uxth	r3, r3
 8046be8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8046bea:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8046bec:	f7fc ff0c 	bl	8043a08 <HAL_GetTick>
 8046bf0:	eba0 0008 	sub.w	r0, r0, r8
 8046bf4:	4287      	cmp	r7, r0
 8046bf6:	d8cd      	bhi.n	8046b94 <HAL_SPI_TransmitReceive+0x166>
 8046bf8:	1c7b      	adds	r3, r7, #1
 8046bfa:	d0cb      	beq.n	8046b94 <HAL_SPI_TransmitReceive+0x166>
 8046bfc:	e7b3      	b.n	8046b66 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8046bfe:	2320      	movs	r3, #32
 8046c00:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8046c02:	2001      	movs	r0, #1
 8046c04:	e7b0      	b.n	8046b68 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8046c06:	2002      	movs	r0, #2
 8046c08:	e7ae      	b.n	8046b68 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8046c0a:	2002      	movs	r0, #2
 8046c0c:	e7b2      	b.n	8046b74 <HAL_SPI_TransmitReceive+0x146>

08046c0e <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046c0e:	2302      	movs	r3, #2
 8046c10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046c14:	6803      	ldr	r3, [r0, #0]
 8046c16:	689a      	ldr	r2, [r3, #8]
 8046c18:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046c1c:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8046c1e:	bf1e      	ittt	ne
 8046c20:	681a      	ldrne	r2, [r3, #0]
 8046c22:	f042 0201 	orrne.w	r2, r2, #1
 8046c26:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046c28:	2301      	movs	r3, #1
 8046c2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8046c2e:	2000      	movs	r0, #0
 8046c30:	4770      	bx	lr

08046c32 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046c32:	2302      	movs	r3, #2
 8046c34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8046c38:	6803      	ldr	r3, [r0, #0]
 8046c3a:	6a19      	ldr	r1, [r3, #32]
 8046c3c:	f241 1211 	movw	r2, #4369	; 0x1111
 8046c40:	4211      	tst	r1, r2
 8046c42:	d108      	bne.n	8046c56 <HAL_TIM_Base_Stop+0x24>
 8046c44:	6a19      	ldr	r1, [r3, #32]
 8046c46:	f240 4244 	movw	r2, #1092	; 0x444
 8046c4a:	4211      	tst	r1, r2
 8046c4c:	bf02      	ittt	eq
 8046c4e:	681a      	ldreq	r2, [r3, #0]
 8046c50:	f022 0201 	biceq.w	r2, r2, #1
 8046c54:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046c56:	2301      	movs	r3, #1
 8046c58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8046c5c:	2000      	movs	r0, #0
 8046c5e:	4770      	bx	lr

08046c60 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8046c60:	6803      	ldr	r3, [r0, #0]
 8046c62:	68da      	ldr	r2, [r3, #12]
 8046c64:	f042 0201 	orr.w	r2, r2, #1
 8046c68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046c6a:	689a      	ldr	r2, [r3, #8]
 8046c6c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046c70:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8046c72:	bf1e      	ittt	ne
 8046c74:	681a      	ldrne	r2, [r3, #0]
 8046c76:	f042 0201 	orrne.w	r2, r2, #1
 8046c7a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8046c7c:	2000      	movs	r0, #0
 8046c7e:	4770      	bx	lr

08046c80 <HAL_TIM_OC_DelayElapsedCallback>:
 8046c80:	4770      	bx	lr

08046c82 <HAL_TIM_IC_CaptureCallback>:
 8046c82:	4770      	bx	lr

08046c84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8046c84:	4770      	bx	lr

08046c86 <HAL_TIM_TriggerCallback>:
 8046c86:	4770      	bx	lr

08046c88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8046c88:	6803      	ldr	r3, [r0, #0]
 8046c8a:	691a      	ldr	r2, [r3, #16]
 8046c8c:	0791      	lsls	r1, r2, #30
{
 8046c8e:	b510      	push	{r4, lr}
 8046c90:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8046c92:	d50e      	bpl.n	8046cb2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8046c94:	68da      	ldr	r2, [r3, #12]
 8046c96:	0792      	lsls	r2, r2, #30
 8046c98:	d50b      	bpl.n	8046cb2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8046c9a:	f06f 0202 	mvn.w	r2, #2
 8046c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046ca0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8046ca2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046ca4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8046ca6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046ca8:	d077      	beq.n	8046d9a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8046caa:	f7ff ffea 	bl	8046c82 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046cae:	2300      	movs	r3, #0
 8046cb0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8046cb2:	6823      	ldr	r3, [r4, #0]
 8046cb4:	691a      	ldr	r2, [r3, #16]
 8046cb6:	0750      	lsls	r0, r2, #29
 8046cb8:	d510      	bpl.n	8046cdc <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8046cba:	68da      	ldr	r2, [r3, #12]
 8046cbc:	0751      	lsls	r1, r2, #29
 8046cbe:	d50d      	bpl.n	8046cdc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8046cc0:	f06f 0204 	mvn.w	r2, #4
 8046cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046cc6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8046cc8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046cca:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8046cce:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046cd0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046cd2:	d068      	beq.n	8046da6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8046cd4:	f7ff ffd5 	bl	8046c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046cd8:	2300      	movs	r3, #0
 8046cda:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8046cdc:	6823      	ldr	r3, [r4, #0]
 8046cde:	691a      	ldr	r2, [r3, #16]
 8046ce0:	0712      	lsls	r2, r2, #28
 8046ce2:	d50f      	bpl.n	8046d04 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8046ce4:	68da      	ldr	r2, [r3, #12]
 8046ce6:	0710      	lsls	r0, r2, #28
 8046ce8:	d50c      	bpl.n	8046d04 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8046cea:	f06f 0208 	mvn.w	r2, #8
 8046cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046cf0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8046cf2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046cf4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8046cf6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046cf8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046cfa:	d05a      	beq.n	8046db2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8046cfc:	f7ff ffc1 	bl	8046c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046d00:	2300      	movs	r3, #0
 8046d02:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8046d04:	6823      	ldr	r3, [r4, #0]
 8046d06:	691a      	ldr	r2, [r3, #16]
 8046d08:	06d2      	lsls	r2, r2, #27
 8046d0a:	d510      	bpl.n	8046d2e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8046d0c:	68da      	ldr	r2, [r3, #12]
 8046d0e:	06d0      	lsls	r0, r2, #27
 8046d10:	d50d      	bpl.n	8046d2e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8046d12:	f06f 0210 	mvn.w	r2, #16
 8046d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046d18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8046d1a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046d1c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8046d20:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046d22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046d24:	d04b      	beq.n	8046dbe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8046d26:	f7ff ffac 	bl	8046c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046d2a:	2300      	movs	r3, #0
 8046d2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8046d2e:	6823      	ldr	r3, [r4, #0]
 8046d30:	691a      	ldr	r2, [r3, #16]
 8046d32:	07d1      	lsls	r1, r2, #31
 8046d34:	d508      	bpl.n	8046d48 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8046d36:	68da      	ldr	r2, [r3, #12]
 8046d38:	07d2      	lsls	r2, r2, #31
 8046d3a:	d505      	bpl.n	8046d48 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8046d3c:	f06f 0201 	mvn.w	r2, #1
 8046d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8046d42:	4620      	mov	r0, r4
 8046d44:	f7fc fba8 	bl	8043498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8046d48:	6823      	ldr	r3, [r4, #0]
 8046d4a:	691a      	ldr	r2, [r3, #16]
 8046d4c:	0610      	lsls	r0, r2, #24
 8046d4e:	d508      	bpl.n	8046d62 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8046d50:	68da      	ldr	r2, [r3, #12]
 8046d52:	0611      	lsls	r1, r2, #24
 8046d54:	d505      	bpl.n	8046d62 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8046d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8046d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8046d5c:	4620      	mov	r0, r4
 8046d5e:	f000 f996 	bl	804708e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8046d62:	6823      	ldr	r3, [r4, #0]
 8046d64:	691a      	ldr	r2, [r3, #16]
 8046d66:	0652      	lsls	r2, r2, #25
 8046d68:	d508      	bpl.n	8046d7c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8046d6a:	68da      	ldr	r2, [r3, #12]
 8046d6c:	0650      	lsls	r0, r2, #25
 8046d6e:	d505      	bpl.n	8046d7c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8046d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8046d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8046d76:	4620      	mov	r0, r4
 8046d78:	f7ff ff85 	bl	8046c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8046d7c:	6823      	ldr	r3, [r4, #0]
 8046d7e:	691a      	ldr	r2, [r3, #16]
 8046d80:	0691      	lsls	r1, r2, #26
 8046d82:	d522      	bpl.n	8046dca <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8046d84:	68da      	ldr	r2, [r3, #12]
 8046d86:	0692      	lsls	r2, r2, #26
 8046d88:	d51f      	bpl.n	8046dca <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8046d8a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8046d8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8046d90:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8046d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8046d96:	f000 b979 	b.w	804708c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8046d9a:	f7ff ff71 	bl	8046c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046d9e:	4620      	mov	r0, r4
 8046da0:	f7ff ff70 	bl	8046c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8046da4:	e783      	b.n	8046cae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046da6:	f7ff ff6b 	bl	8046c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046daa:	4620      	mov	r0, r4
 8046dac:	f7ff ff6a 	bl	8046c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8046db0:	e792      	b.n	8046cd8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046db2:	f7ff ff65 	bl	8046c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046db6:	4620      	mov	r0, r4
 8046db8:	f7ff ff64 	bl	8046c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8046dbc:	e7a0      	b.n	8046d00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046dbe:	f7ff ff5f 	bl	8046c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046dc2:	4620      	mov	r0, r4
 8046dc4:	f7ff ff5e 	bl	8046c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8046dc8:	e7af      	b.n	8046d2a <HAL_TIM_IRQHandler+0xa2>
}
 8046dca:	bd10      	pop	{r4, pc}

08046dcc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8046dcc:	4a30      	ldr	r2, [pc, #192]	; (8046e90 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8046dce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8046dd0:	4290      	cmp	r0, r2
 8046dd2:	d012      	beq.n	8046dfa <TIM_Base_SetConfig+0x2e>
 8046dd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8046dd8:	d00f      	beq.n	8046dfa <TIM_Base_SetConfig+0x2e>
 8046dda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8046dde:	4290      	cmp	r0, r2
 8046de0:	d00b      	beq.n	8046dfa <TIM_Base_SetConfig+0x2e>
 8046de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046de6:	4290      	cmp	r0, r2
 8046de8:	d007      	beq.n	8046dfa <TIM_Base_SetConfig+0x2e>
 8046dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046dee:	4290      	cmp	r0, r2
 8046df0:	d003      	beq.n	8046dfa <TIM_Base_SetConfig+0x2e>
 8046df2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8046df6:	4290      	cmp	r0, r2
 8046df8:	d119      	bne.n	8046e2e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8046dfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8046dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8046e00:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8046e02:	4a23      	ldr	r2, [pc, #140]	; (8046e90 <TIM_Base_SetConfig+0xc4>)
 8046e04:	4290      	cmp	r0, r2
 8046e06:	d029      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8046e0c:	d026      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8046e12:	4290      	cmp	r0, r2
 8046e14:	d022      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e1a:	4290      	cmp	r0, r2
 8046e1c:	d01e      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e22:	4290      	cmp	r0, r2
 8046e24:	d01a      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8046e2a:	4290      	cmp	r0, r2
 8046e2c:	d016      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e2e:	4a19      	ldr	r2, [pc, #100]	; (8046e94 <TIM_Base_SetConfig+0xc8>)
 8046e30:	4290      	cmp	r0, r2
 8046e32:	d013      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e38:	4290      	cmp	r0, r2
 8046e3a:	d00f      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e40:	4290      	cmp	r0, r2
 8046e42:	d00b      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e44:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8046e48:	4290      	cmp	r0, r2
 8046e4a:	d007      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e50:	4290      	cmp	r0, r2
 8046e52:	d003      	beq.n	8046e5c <TIM_Base_SetConfig+0x90>
 8046e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046e58:	4290      	cmp	r0, r2
 8046e5a:	d103      	bne.n	8046e64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8046e5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8046e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8046e62:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8046e64:	694a      	ldr	r2, [r1, #20]
 8046e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8046e6a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8046e6c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8046e6e:	688b      	ldr	r3, [r1, #8]
 8046e70:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8046e72:	680b      	ldr	r3, [r1, #0]
 8046e74:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8046e76:	4b06      	ldr	r3, [pc, #24]	; (8046e90 <TIM_Base_SetConfig+0xc4>)
 8046e78:	4298      	cmp	r0, r3
 8046e7a:	d003      	beq.n	8046e84 <TIM_Base_SetConfig+0xb8>
 8046e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046e80:	4298      	cmp	r0, r3
 8046e82:	d101      	bne.n	8046e88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8046e84:	690b      	ldr	r3, [r1, #16]
 8046e86:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8046e88:	2301      	movs	r3, #1
 8046e8a:	6143      	str	r3, [r0, #20]
}
 8046e8c:	4770      	bx	lr
 8046e8e:	bf00      	nop
 8046e90:	40010000 	.word	0x40010000
 8046e94:	40014000 	.word	0x40014000

08046e98 <HAL_TIM_Base_Init>:
{
 8046e98:	b510      	push	{r4, lr}
  if (htim == NULL)
 8046e9a:	4604      	mov	r4, r0
 8046e9c:	b1a0      	cbz	r0, 8046ec8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8046e9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8046ea2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8046ea6:	b91b      	cbnz	r3, 8046eb0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8046ea8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8046eac:	f008 fb44 	bl	804f538 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8046eb0:	2302      	movs	r3, #2
 8046eb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8046eb6:	6820      	ldr	r0, [r4, #0]
 8046eb8:	1d21      	adds	r1, r4, #4
 8046eba:	f7ff ff87 	bl	8046dcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8046ebe:	2301      	movs	r3, #1
 8046ec0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8046ec4:	2000      	movs	r0, #0
}
 8046ec6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8046ec8:	2001      	movs	r0, #1
 8046eca:	e7fc      	b.n	8046ec6 <HAL_TIM_Base_Init+0x2e>

08046ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8046ecc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8046ece:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8046ed0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8046ed2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8046ed6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8046eda:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8046edc:	6083      	str	r3, [r0, #8]
}
 8046ede:	bd10      	pop	{r4, pc}

08046ee0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8046ee0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8046ee4:	2b01      	cmp	r3, #1
{
 8046ee6:	b570      	push	{r4, r5, r6, lr}
 8046ee8:	4604      	mov	r4, r0
 8046eea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8046eee:	d019      	beq.n	8046f24 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8046ef0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8046ef4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8046ef6:	2301      	movs	r3, #1
 8046ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8046efc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8046efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8046f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8046f06:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8046f08:	680b      	ldr	r3, [r1, #0]
 8046f0a:	2b40      	cmp	r3, #64	; 0x40
 8046f0c:	d065      	beq.n	8046fda <HAL_TIM_ConfigClockSource+0xfa>
 8046f0e:	d815      	bhi.n	8046f3c <HAL_TIM_ConfigClockSource+0x5c>
 8046f10:	2b10      	cmp	r3, #16
 8046f12:	d00c      	beq.n	8046f2e <HAL_TIM_ConfigClockSource+0x4e>
 8046f14:	d807      	bhi.n	8046f26 <HAL_TIM_ConfigClockSource+0x46>
 8046f16:	b153      	cbz	r3, 8046f2e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8046f18:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8046f1a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8046f1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8046f20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8046f24:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8046f26:	2b20      	cmp	r3, #32
 8046f28:	d001      	beq.n	8046f2e <HAL_TIM_ConfigClockSource+0x4e>
 8046f2a:	2b30      	cmp	r3, #48	; 0x30
 8046f2c:	d1f4      	bne.n	8046f18 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8046f2e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046f30:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8046f34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046f38:	4313      	orrs	r3, r2
 8046f3a:	e01a      	b.n	8046f72 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8046f3c:	2b60      	cmp	r3, #96	; 0x60
 8046f3e:	d034      	beq.n	8046faa <HAL_TIM_ConfigClockSource+0xca>
 8046f40:	d819      	bhi.n	8046f76 <HAL_TIM_ConfigClockSource+0x96>
 8046f42:	2b50      	cmp	r3, #80	; 0x50
 8046f44:	d1e8      	bne.n	8046f18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8046f46:	684a      	ldr	r2, [r1, #4]
 8046f48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8046f4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8046f4c:	6a05      	ldr	r5, [r0, #32]
 8046f4e:	f025 0501 	bic.w	r5, r5, #1
 8046f52:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046f54:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8046f56:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8046f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8046f5e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8046f62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8046f64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8046f66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046f68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046f6e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8046f72:	6083      	str	r3, [r0, #8]
 8046f74:	e7d0      	b.n	8046f18 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8046f76:	2b70      	cmp	r3, #112	; 0x70
 8046f78:	d00c      	beq.n	8046f94 <HAL_TIM_ConfigClockSource+0xb4>
 8046f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046f7e:	d1cb      	bne.n	8046f18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8046f80:	68cb      	ldr	r3, [r1, #12]
 8046f82:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8046f86:	f7ff ffa1 	bl	8046ecc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8046f8a:	6822      	ldr	r2, [r4, #0]
 8046f8c:	6893      	ldr	r3, [r2, #8]
 8046f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8046f92:	e008      	b.n	8046fa6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8046f94:	68cb      	ldr	r3, [r1, #12]
 8046f96:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8046f9a:	f7ff ff97 	bl	8046ecc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8046f9e:	6822      	ldr	r2, [r4, #0]
 8046fa0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8046fa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8046fa6:	6093      	str	r3, [r2, #8]
      break;
 8046fa8:	e7b6      	b.n	8046f18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8046faa:	684d      	ldr	r5, [r1, #4]
 8046fac:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8046fae:	6a01      	ldr	r1, [r0, #32]
 8046fb0:	f021 0110 	bic.w	r1, r1, #16
 8046fb4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046fb6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8046fb8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8046fba:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8046fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8046fc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8046fc6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8046fca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8046fcc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046fce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046fd4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8046fd8:	e7cb      	b.n	8046f72 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8046fda:	684a      	ldr	r2, [r1, #4]
 8046fdc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8046fde:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8046fe0:	6a05      	ldr	r5, [r0, #32]
 8046fe2:	f025 0501 	bic.w	r5, r5, #1
 8046fe6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046fe8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8046fea:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8046fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8046ff2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8046ff6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8046ff8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8046ffa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046ffc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8047002:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8047006:	e7b4      	b.n	8046f72 <HAL_TIM_ConfigClockSource+0x92>

08047008 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8047008:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 804700c:	2b01      	cmp	r3, #1
{
 804700e:	b530      	push	{r4, r5, lr}
 8047010:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8047014:	d035      	beq.n	8047082 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047016:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 804701a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804701c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 804701e:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8047020:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8047024:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8047026:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8047028:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 804702c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804702e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047030:	4c15      	ldr	r4, [pc, #84]	; (8047088 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8047032:	42a3      	cmp	r3, r4
 8047034:	d01a      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8047036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804703a:	d017      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 804703c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8047040:	42a3      	cmp	r3, r4
 8047042:	d013      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8047044:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047048:	42a3      	cmp	r3, r4
 804704a:	d00f      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 804704c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047050:	42a3      	cmp	r3, r4
 8047052:	d00b      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8047054:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8047058:	42a3      	cmp	r3, r4
 804705a:	d007      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 804705c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8047060:	42a3      	cmp	r3, r4
 8047062:	d003      	beq.n	804706c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8047064:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8047068:	42a3      	cmp	r3, r4
 804706a:	d104      	bne.n	8047076 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804706c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 804706e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8047072:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8047074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8047076:	2301      	movs	r3, #1
 8047078:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804707c:	2300      	movs	r3, #0
 804707e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8047082:	4618      	mov	r0, r3

  return HAL_OK;
}
 8047084:	bd30      	pop	{r4, r5, pc}
 8047086:	bf00      	nop
 8047088:	40010000 	.word	0x40010000

0804708c <HAL_TIMEx_CommutCallback>:
 804708c:	4770      	bx	lr

0804708e <HAL_TIMEx_BreakCallback>:
 804708e:	4770      	bx	lr

08047090 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8047090:	6803      	ldr	r3, [r0, #0]
 8047092:	68da      	ldr	r2, [r3, #12]
 8047094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8047098:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804709a:	695a      	ldr	r2, [r3, #20]
 804709c:	f022 0201 	bic.w	r2, r2, #1
 80470a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80470a2:	2320      	movs	r3, #32
 80470a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80470a8:	4770      	bx	lr
	...

080470ac <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80470ac:	6803      	ldr	r3, [r0, #0]
 80470ae:	68c1      	ldr	r1, [r0, #12]
 80470b0:	691a      	ldr	r2, [r3, #16]
{
 80470b2:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80470b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 80470b8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80470ba:	430a      	orrs	r2, r1
 80470bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80470be:	6925      	ldr	r5, [r4, #16]
 80470c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80470c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80470c4:	69c0      	ldr	r0, [r0, #28]
 80470c6:	432a      	orrs	r2, r5
 80470c8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80470ca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80470ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80470d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80470d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80470d6:	430a      	orrs	r2, r1
 80470d8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80470da:	695a      	ldr	r2, [r3, #20]
 80470dc:	69a1      	ldr	r1, [r4, #24]
 80470de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80470e2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80470e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80470e8:	615a      	str	r2, [r3, #20]
 80470ea:	4a26      	ldr	r2, [pc, #152]	; (8047184 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80470ec:	d129      	bne.n	8047142 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80470ee:	4293      	cmp	r3, r2
 80470f0:	d003      	beq.n	80470fa <UART_SetConfig+0x4e>
 80470f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80470f6:	4293      	cmp	r3, r2
 80470f8:	d120      	bne.n	804713c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80470fa:	f7fe fafd 	bl	80456f8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80470fe:	6862      	ldr	r2, [r4, #4]
 8047100:	2600      	movs	r6, #0
 8047102:	1892      	adds	r2, r2, r2
 8047104:	f04f 0119 	mov.w	r1, #25
 8047108:	eb46 0306 	adc.w	r3, r6, r6
 804710c:	fba0 0101 	umull	r0, r1, r0, r1
 8047110:	f7f9 fef2 	bl	8040ef8 <__aeabi_uldivmod>
 8047114:	2164      	movs	r1, #100	; 0x64
 8047116:	fbb0 f5f1 	udiv	r5, r0, r1
 804711a:	fb01 0315 	mls	r3, r1, r5, r0
 804711e:	00db      	lsls	r3, r3, #3
 8047120:	3332      	adds	r3, #50	; 0x32
 8047122:	fbb3 f3f1 	udiv	r3, r3, r1
 8047126:	f003 0207 	and.w	r2, r3, #7
 804712a:	005b      	lsls	r3, r3, #1
 804712c:	6821      	ldr	r1, [r4, #0]
 804712e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8047132:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8047136:	4413      	add	r3, r2
 8047138:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 804713a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 804713c:	f7fe facc 	bl	80456d8 <HAL_RCC_GetPCLK1Freq>
 8047140:	e7dd      	b.n	80470fe <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8047142:	4293      	cmp	r3, r2
 8047144:	d002      	beq.n	804714c <UART_SetConfig+0xa0>
 8047146:	4a10      	ldr	r2, [pc, #64]	; (8047188 <UART_SetConfig+0xdc>)
 8047148:	4293      	cmp	r3, r2
 804714a:	d117      	bne.n	804717c <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 804714c:	f7fe fad4 	bl	80456f8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8047150:	6863      	ldr	r3, [r4, #4]
 8047152:	2119      	movs	r1, #25
 8047154:	009a      	lsls	r2, r3, #2
 8047156:	fba0 0101 	umull	r0, r1, r0, r1
 804715a:	0f9b      	lsrs	r3, r3, #30
 804715c:	f7f9 fecc 	bl	8040ef8 <__aeabi_uldivmod>
 8047160:	2264      	movs	r2, #100	; 0x64
 8047162:	fbb0 f1f2 	udiv	r1, r0, r2
 8047166:	fb02 0311 	mls	r3, r2, r1, r0
 804716a:	6824      	ldr	r4, [r4, #0]
 804716c:	011b      	lsls	r3, r3, #4
 804716e:	3332      	adds	r3, #50	; 0x32
 8047170:	fbb3 f3f2 	udiv	r3, r3, r2
 8047174:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8047178:	60a3      	str	r3, [r4, #8]
}
 804717a:	e7de      	b.n	804713a <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 804717c:	f7fe faac 	bl	80456d8 <HAL_RCC_GetPCLK1Freq>
 8047180:	e7e6      	b.n	8047150 <UART_SetConfig+0xa4>
 8047182:	bf00      	nop
 8047184:	40011000 	.word	0x40011000
 8047188:	40011400 	.word	0x40011400

0804718c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 804718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804718e:	4604      	mov	r4, r0
 8047190:	460e      	mov	r6, r1
 8047192:	4617      	mov	r7, r2
 8047194:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8047196:	6821      	ldr	r1, [r4, #0]
 8047198:	680b      	ldr	r3, [r1, #0]
 804719a:	ea36 0303 	bics.w	r3, r6, r3
 804719e:	d101      	bne.n	80471a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80471a0:	2000      	movs	r0, #0
 80471a2:	e014      	b.n	80471ce <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80471a4:	1c6b      	adds	r3, r5, #1
 80471a6:	d0f7      	beq.n	8047198 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80471a8:	b995      	cbnz	r5, 80471d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80471aa:	6823      	ldr	r3, [r4, #0]
 80471ac:	68da      	ldr	r2, [r3, #12]
 80471ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80471b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80471b4:	695a      	ldr	r2, [r3, #20]
 80471b6:	f022 0201 	bic.w	r2, r2, #1
 80471ba:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80471bc:	2320      	movs	r3, #32
 80471be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80471c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80471c6:	2300      	movs	r3, #0
 80471c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80471cc:	2003      	movs	r0, #3
}
 80471ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80471d0:	f7fc fc1a 	bl	8043a08 <HAL_GetTick>
 80471d4:	1bc0      	subs	r0, r0, r7
 80471d6:	4285      	cmp	r5, r0
 80471d8:	d2dd      	bcs.n	8047196 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80471da:	e7e6      	b.n	80471aa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080471dc <HAL_UART_Init>:
{
 80471dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80471de:	4604      	mov	r4, r0
 80471e0:	b340      	cbz	r0, 8047234 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80471e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80471e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80471ea:	b91b      	cbnz	r3, 80471f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80471ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80471f0:	f009 f9f8 	bl	80505e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80471f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80471f6:	2324      	movs	r3, #36	; 0x24
 80471f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80471fc:	68d3      	ldr	r3, [r2, #12]
 80471fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8047202:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8047204:	4620      	mov	r0, r4
 8047206:	f7ff ff51 	bl	80470ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804720a:	6823      	ldr	r3, [r4, #0]
 804720c:	691a      	ldr	r2, [r3, #16]
 804720e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8047212:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8047214:	695a      	ldr	r2, [r3, #20]
 8047216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804721a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 804721c:	68da      	ldr	r2, [r3, #12]
 804721e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047222:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047224:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8047226:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047228:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 804722a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 804722e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8047232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8047234:	2001      	movs	r0, #1
 8047236:	e7fc      	b.n	8047232 <HAL_UART_Init+0x56>

08047238 <HAL_UART_DeInit>:
{
 8047238:	b510      	push	{r4, lr}
  if (huart == NULL)
 804723a:	4604      	mov	r4, r0
 804723c:	b190      	cbz	r0, 8047264 <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 804723e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8047240:	2324      	movs	r3, #36	; 0x24
 8047242:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8047246:	68d3      	ldr	r3, [r2, #12]
 8047248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 804724c:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 804724e:	f009 fabf 	bl	80507d0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047252:	2000      	movs	r0, #0
 8047254:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8047256:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 804725a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 804725e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 8047262:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8047264:	2001      	movs	r0, #1
 8047266:	e7fc      	b.n	8047262 <HAL_UART_DeInit+0x2a>

08047268 <HAL_UART_Transmit>:
{
 8047268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804726c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 804726e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8047272:	2b20      	cmp	r3, #32
{
 8047274:	4604      	mov	r4, r0
 8047276:	460d      	mov	r5, r1
 8047278:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 804727a:	d14f      	bne.n	804731c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 804727c:	2900      	cmp	r1, #0
 804727e:	d04b      	beq.n	8047318 <HAL_UART_Transmit+0xb0>
 8047280:	2a00      	cmp	r2, #0
 8047282:	d049      	beq.n	8047318 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8047284:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8047288:	2b01      	cmp	r3, #1
 804728a:	d047      	beq.n	804731c <HAL_UART_Transmit+0xb4>
 804728c:	2301      	movs	r3, #1
 804728e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047292:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8047296:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047298:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804729c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80472a0:	f7fc fbb2 	bl	8043a08 <HAL_GetTick>
    huart->TxXferSize = Size;
 80472a4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80472a8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80472aa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80472ae:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80472b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80472b4:	b29b      	uxth	r3, r3
 80472b6:	b953      	cbnz	r3, 80472ce <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80472b8:	463b      	mov	r3, r7
 80472ba:	4632      	mov	r2, r6
 80472bc:	2140      	movs	r1, #64	; 0x40
 80472be:	4620      	mov	r0, r4
 80472c0:	f7ff ff64 	bl	804718c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80472c4:	b998      	cbnz	r0, 80472ee <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80472c6:	2320      	movs	r3, #32
 80472c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80472cc:	e010      	b.n	80472f0 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 80472ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80472d0:	3b01      	subs	r3, #1
 80472d2:	b29b      	uxth	r3, r3
 80472d4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80472d6:	68a3      	ldr	r3, [r4, #8]
 80472d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80472dc:	4632      	mov	r2, r6
 80472de:	463b      	mov	r3, r7
 80472e0:	f04f 0180 	mov.w	r1, #128	; 0x80
 80472e4:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80472e6:	d10e      	bne.n	8047306 <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80472e8:	f7ff ff50 	bl	804718c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80472ec:	b110      	cbz	r0, 80472f4 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 80472ee:	2003      	movs	r0, #3
}
 80472f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80472f4:	882b      	ldrh	r3, [r5, #0]
 80472f6:	6822      	ldr	r2, [r4, #0]
 80472f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80472fc:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80472fe:	6923      	ldr	r3, [r4, #16]
 8047300:	b943      	cbnz	r3, 8047314 <HAL_UART_Transmit+0xac>
          pData += 2U;
 8047302:	3502      	adds	r5, #2
 8047304:	e7d5      	b.n	80472b2 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8047306:	f7ff ff41 	bl	804718c <UART_WaitOnFlagUntilTimeout.constprop.3>
 804730a:	2800      	cmp	r0, #0
 804730c:	d1ef      	bne.n	80472ee <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 804730e:	6823      	ldr	r3, [r4, #0]
 8047310:	782a      	ldrb	r2, [r5, #0]
 8047312:	605a      	str	r2, [r3, #4]
 8047314:	3501      	adds	r5, #1
 8047316:	e7cc      	b.n	80472b2 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8047318:	2001      	movs	r0, #1
 804731a:	e7e9      	b.n	80472f0 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 804731c:	2002      	movs	r0, #2
 804731e:	e7e7      	b.n	80472f0 <HAL_UART_Transmit+0x88>

08047320 <HAL_UART_Receive>:
{
 8047320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8047324:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8047326:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 804732a:	2b20      	cmp	r3, #32
{
 804732c:	4604      	mov	r4, r0
 804732e:	460d      	mov	r5, r1
 8047330:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8047332:	d155      	bne.n	80473e0 <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8047334:	2900      	cmp	r1, #0
 8047336:	d051      	beq.n	80473dc <HAL_UART_Receive+0xbc>
 8047338:	2a00      	cmp	r2, #0
 804733a:	d04f      	beq.n	80473dc <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 804733c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8047340:	2b01      	cmp	r3, #1
 8047342:	d04d      	beq.n	80473e0 <HAL_UART_Receive+0xc0>
 8047344:	2301      	movs	r3, #1
 8047346:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804734a:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 804734e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047350:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8047354:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8047358:	f7fc fb56 	bl	8043a08 <HAL_GetTick>
    huart->RxXferSize = Size;
 804735c:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8047360:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8047362:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8047366:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 804736a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804736c:	b280      	uxth	r0, r0
 804736e:	b918      	cbnz	r0, 8047378 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8047370:	2320      	movs	r3, #32
 8047372:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8047376:	e010      	b.n	804739a <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8047378:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 804737a:	3b01      	subs	r3, #1
 804737c:	b29b      	uxth	r3, r3
 804737e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047380:	68a3      	ldr	r3, [r4, #8]
 8047382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8047386:	4632      	mov	r2, r6
 8047388:	463b      	mov	r3, r7
 804738a:	f04f 0120 	mov.w	r1, #32
 804738e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047390:	d116      	bne.n	80473c0 <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8047392:	f7ff fefb 	bl	804718c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8047396:	b110      	cbz	r0, 804739e <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8047398:	2003      	movs	r0, #3
}
 804739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 804739e:	6922      	ldr	r2, [r4, #16]
 80473a0:	6823      	ldr	r3, [r4, #0]
 80473a2:	b93a      	cbnz	r2, 80473b4 <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80473a4:	685a      	ldr	r2, [r3, #4]
 80473a6:	462b      	mov	r3, r5
 80473a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80473ac:	f823 2b02 	strh.w	r2, [r3], #2
{
 80473b0:	461d      	mov	r5, r3
 80473b2:	e7da      	b.n	804736a <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80473b4:	685a      	ldr	r2, [r3, #4]
 80473b6:	462b      	mov	r3, r5
 80473b8:	b2d2      	uxtb	r2, r2
 80473ba:	f823 2b01 	strh.w	r2, [r3], #1
 80473be:	e7f7      	b.n	80473b0 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80473c0:	f7ff fee4 	bl	804718c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80473c4:	2800      	cmp	r0, #0
 80473c6:	d1e7      	bne.n	8047398 <HAL_UART_Receive+0x78>
 80473c8:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80473ca:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80473cc:	6852      	ldr	r2, [r2, #4]
 80473ce:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80473d0:	b909      	cbnz	r1, 80473d6 <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80473d2:	702a      	strb	r2, [r5, #0]
 80473d4:	e7ec      	b.n	80473b0 <HAL_UART_Receive+0x90>
 80473d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80473da:	e7fa      	b.n	80473d2 <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 80473dc:	2001      	movs	r0, #1
 80473de:	e7dc      	b.n	804739a <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 80473e0:	2002      	movs	r0, #2
 80473e2:	e7da      	b.n	804739a <HAL_UART_Receive+0x7a>

080473e4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80473e4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80473e8:	2b20      	cmp	r3, #32
 80473ea:	d120      	bne.n	804742e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80473ec:	b1e9      	cbz	r1, 804742a <HAL_UART_Receive_IT+0x46>
 80473ee:	b1e2      	cbz	r2, 804742a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80473f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80473f4:	2b01      	cmp	r3, #1
 80473f6:	d01a      	beq.n	804742e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80473f8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80473fa:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80473fc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80473fe:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047400:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8047402:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8047406:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8047408:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 804740a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 804740c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8047410:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8047414:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8047416:	6951      	ldr	r1, [r2, #20]
 8047418:	f041 0101 	orr.w	r1, r1, #1
 804741c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 804741e:	68d1      	ldr	r1, [r2, #12]
 8047420:	f041 0120 	orr.w	r1, r1, #32
 8047424:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8047426:	4618      	mov	r0, r3
 8047428:	4770      	bx	lr
      return HAL_ERROR;
 804742a:	2001      	movs	r0, #1
 804742c:	4770      	bx	lr
    return HAL_BUSY;
 804742e:	2002      	movs	r0, #2
}
 8047430:	4770      	bx	lr
	...

08047434 <HAL_UART_Transmit_DMA>:
{
 8047434:	b538      	push	{r3, r4, r5, lr}
 8047436:	4604      	mov	r4, r0
 8047438:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 804743a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804743e:	2a20      	cmp	r2, #32
 8047440:	d12a      	bne.n	8047498 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8047442:	b339      	cbz	r1, 8047494 <HAL_UART_Transmit_DMA+0x60>
 8047444:	b333      	cbz	r3, 8047494 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8047446:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 804744a:	2a01      	cmp	r2, #1
 804744c:	d024      	beq.n	8047498 <HAL_UART_Transmit_DMA+0x64>
 804744e:	2201      	movs	r2, #1
 8047450:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047454:	2500      	movs	r5, #0
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047456:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8047458:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804745a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804745c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804745e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047462:	4a0e      	ldr	r2, [pc, #56]	; (804749c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8047464:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8047466:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047468:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 804746a:	4a0d      	ldr	r2, [pc, #52]	; (80474a0 <HAL_UART_Transmit_DMA+0x6c>)
 804746c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 804746e:	4a0d      	ldr	r2, [pc, #52]	; (80474a4 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8047470:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8047474:	6822      	ldr	r2, [r4, #0]
 8047476:	3204      	adds	r2, #4
 8047478:	f7fc fe32 	bl	80440e0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 804747c:	6823      	ldr	r3, [r4, #0]
 804747e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8047482:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8047484:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8047486:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804748a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804748e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8047490:	4628      	mov	r0, r5
}
 8047492:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8047494:	2001      	movs	r0, #1
 8047496:	e7fc      	b.n	8047492 <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8047498:	2002      	movs	r0, #2
 804749a:	e7fa      	b.n	8047492 <HAL_UART_Transmit_DMA+0x5e>
 804749c:	080474a9 	.word	0x080474a9
 80474a0:	080474d7 	.word	0x080474d7
 80474a4:	08047559 	.word	0x08047559

080474a8 <UART_DMATransmitCplt>:
{
 80474a8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80474aa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80474ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80474ae:	681b      	ldr	r3, [r3, #0]
 80474b0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80474b4:	d10a      	bne.n	80474cc <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 80474b6:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80474b8:	6813      	ldr	r3, [r2, #0]
 80474ba:	695a      	ldr	r2, [r3, #20]
 80474bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80474c0:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80474c2:	68da      	ldr	r2, [r3, #12]
 80474c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80474c8:	60da      	str	r2, [r3, #12]
}
 80474ca:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80474cc:	4610      	mov	r0, r2
 80474ce:	f009 f841 	bl	8050554 <HAL_UART_TxCpltCallback>
}
 80474d2:	e7fa      	b.n	80474ca <UART_DMATransmitCplt+0x22>

080474d4 <HAL_UART_TxHalfCpltCallback>:
 80474d4:	4770      	bx	lr

080474d6 <UART_DMATxHalfCplt>:
{
 80474d6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80474d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80474da:	f7ff fffb 	bl	80474d4 <HAL_UART_TxHalfCpltCallback>
}
 80474de:	bd08      	pop	{r3, pc}

080474e0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80474e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80474e4:	2b22      	cmp	r3, #34	; 0x22
{
 80474e6:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80474e8:	d133      	bne.n	8047552 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80474ea:	6881      	ldr	r1, [r0, #8]
 80474ec:	6904      	ldr	r4, [r0, #16]
 80474ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80474f0:	6802      	ldr	r2, [r0, #0]
 80474f2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80474f6:	d123      	bne.n	8047540 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80474f8:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80474fa:	b9ec      	cbnz	r4, 8047538 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80474fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8047500:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8047504:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8047506:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8047508:	3c01      	subs	r4, #1
 804750a:	b2a4      	uxth	r4, r4
 804750c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 804750e:	b98c      	cbnz	r4, 8047534 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8047510:	6803      	ldr	r3, [r0, #0]
 8047512:	68da      	ldr	r2, [r3, #12]
 8047514:	f022 0220 	bic.w	r2, r2, #32
 8047518:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 804751a:	68da      	ldr	r2, [r3, #12]
 804751c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8047520:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8047522:	695a      	ldr	r2, [r3, #20]
 8047524:	f022 0201 	bic.w	r2, r2, #1
 8047528:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 804752a:	2320      	movs	r3, #32
 804752c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8047530:	f7fa fb18 	bl	8041b64 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8047534:	2000      	movs	r0, #0
 8047536:	e00d      	b.n	8047554 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8047538:	b2d2      	uxtb	r2, r2
 804753a:	f823 2b01 	strh.w	r2, [r3], #1
 804753e:	e7e1      	b.n	8047504 <UART_Receive_IT+0x24>
 8047540:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8047542:	6852      	ldr	r2, [r2, #4]
 8047544:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8047546:	b90c      	cbnz	r4, 804754c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8047548:	701a      	strb	r2, [r3, #0]
 804754a:	e7dc      	b.n	8047506 <UART_Receive_IT+0x26>
 804754c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8047550:	e7fa      	b.n	8047548 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8047552:	2002      	movs	r0, #2
}
 8047554:	bd10      	pop	{r4, pc}

08047556 <HAL_UART_ErrorCallback>:
 8047556:	4770      	bx	lr

08047558 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8047558:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 804755a:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 804755c:	680b      	ldr	r3, [r1, #0]
 804755e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8047560:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8047564:	2821      	cmp	r0, #33	; 0x21
 8047566:	d10a      	bne.n	804757e <UART_DMAError+0x26>
 8047568:	0612      	lsls	r2, r2, #24
 804756a:	d508      	bpl.n	804757e <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 804756c:	2200      	movs	r2, #0
 804756e:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8047570:	68da      	ldr	r2, [r3, #12]
 8047572:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8047576:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8047578:	2220      	movs	r2, #32
 804757a:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 804757e:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8047580:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8047584:	2a22      	cmp	r2, #34	; 0x22
 8047586:	d106      	bne.n	8047596 <UART_DMAError+0x3e>
 8047588:	065b      	lsls	r3, r3, #25
 804758a:	d504      	bpl.n	8047596 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 804758c:	2300      	movs	r3, #0
 804758e:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8047590:	4608      	mov	r0, r1
 8047592:	f7ff fd7d 	bl	8047090 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8047596:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8047598:	f043 0310 	orr.w	r3, r3, #16
 804759c:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 804759e:	4608      	mov	r0, r1
 80475a0:	f7ff ffd9 	bl	8047556 <HAL_UART_ErrorCallback>
}
 80475a4:	bd08      	pop	{r3, pc}
	...

080475a8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80475a8:	6803      	ldr	r3, [r0, #0]
 80475aa:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80475ac:	68d9      	ldr	r1, [r3, #12]
{
 80475ae:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80475b0:	0716      	lsls	r6, r2, #28
{
 80475b2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80475b4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80475b6:	d107      	bne.n	80475c8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80475b8:	0696      	lsls	r6, r2, #26
 80475ba:	d55a      	bpl.n	8047672 <HAL_UART_IRQHandler+0xca>
 80475bc:	068d      	lsls	r5, r1, #26
 80475be:	d558      	bpl.n	8047672 <HAL_UART_IRQHandler+0xca>
}
 80475c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80475c4:	f7ff bf8c 	b.w	80474e0 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80475c8:	f015 0501 	ands.w	r5, r5, #1
 80475cc:	d102      	bne.n	80475d4 <HAL_UART_IRQHandler+0x2c>
 80475ce:	f411 7f90 	tst.w	r1, #288	; 0x120
 80475d2:	d04e      	beq.n	8047672 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80475d4:	07d0      	lsls	r0, r2, #31
 80475d6:	d505      	bpl.n	80475e4 <HAL_UART_IRQHandler+0x3c>
 80475d8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80475da:	bf42      	ittt	mi
 80475dc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80475de:	f043 0301 	orrmi.w	r3, r3, #1
 80475e2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80475e4:	0756      	lsls	r6, r2, #29
 80475e6:	d504      	bpl.n	80475f2 <HAL_UART_IRQHandler+0x4a>
 80475e8:	b11d      	cbz	r5, 80475f2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80475ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80475ec:	f043 0302 	orr.w	r3, r3, #2
 80475f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80475f2:	0790      	lsls	r0, r2, #30
 80475f4:	d504      	bpl.n	8047600 <HAL_UART_IRQHandler+0x58>
 80475f6:	b11d      	cbz	r5, 8047600 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80475f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80475fa:	f043 0304 	orr.w	r3, r3, #4
 80475fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8047600:	0713      	lsls	r3, r2, #28
 8047602:	d506      	bpl.n	8047612 <HAL_UART_IRQHandler+0x6a>
 8047604:	068e      	lsls	r6, r1, #26
 8047606:	d400      	bmi.n	804760a <HAL_UART_IRQHandler+0x62>
 8047608:	b11d      	cbz	r5, 8047612 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 804760a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804760c:	f043 0308 	orr.w	r3, r3, #8
 8047610:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8047612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8047614:	b343      	cbz	r3, 8047668 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8047616:	0695      	lsls	r5, r2, #26
 8047618:	d504      	bpl.n	8047624 <HAL_UART_IRQHandler+0x7c>
 804761a:	0688      	lsls	r0, r1, #26
 804761c:	d502      	bpl.n	8047624 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 804761e:	4620      	mov	r0, r4
 8047620:	f7ff ff5e 	bl	80474e0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8047624:	6823      	ldr	r3, [r4, #0]
 8047626:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8047628:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 804762a:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 804762c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 804762e:	d402      	bmi.n	8047636 <HAL_UART_IRQHandler+0x8e>
 8047630:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8047634:	d019      	beq.n	804766a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8047636:	f7ff fd2b 	bl	8047090 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804763a:	6823      	ldr	r3, [r4, #0]
 804763c:	695a      	ldr	r2, [r3, #20]
 804763e:	0652      	lsls	r2, r2, #25
 8047640:	d50f      	bpl.n	8047662 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047642:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8047644:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804764a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 804764c:	b148      	cbz	r0, 8047662 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804764e:	4b26      	ldr	r3, [pc, #152]	; (80476e8 <HAL_UART_IRQHandler+0x140>)
 8047650:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8047652:	f7fc fd7f 	bl	8044154 <HAL_DMA_Abort_IT>
 8047656:	b138      	cbz	r0, 8047668 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8047658:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 804765a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804765e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8047660:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8047662:	4620      	mov	r0, r4
 8047664:	f7ff ff77 	bl	8047556 <HAL_UART_ErrorCallback>
}
 8047668:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 804766a:	f7ff ff74 	bl	8047556 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804766e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8047670:	e7fa      	b.n	8047668 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8047672:	0616      	lsls	r6, r2, #24
 8047674:	d528      	bpl.n	80476c8 <HAL_UART_IRQHandler+0x120>
 8047676:	060d      	lsls	r5, r1, #24
 8047678:	d526      	bpl.n	80476c8 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804767a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804767e:	2a21      	cmp	r2, #33	; 0x21
 8047680:	d1f2      	bne.n	8047668 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047682:	68a1      	ldr	r1, [r4, #8]
 8047684:	6a22      	ldr	r2, [r4, #32]
 8047686:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 804768a:	d118      	bne.n	80476be <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 804768c:	8811      	ldrh	r1, [r2, #0]
 804768e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8047692:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8047694:	6921      	ldr	r1, [r4, #16]
 8047696:	b981      	cbnz	r1, 80476ba <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8047698:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 804769a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 804769c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 804769e:	3a01      	subs	r2, #1
 80476a0:	b292      	uxth	r2, r2
 80476a2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80476a4:	2a00      	cmp	r2, #0
 80476a6:	d1df      	bne.n	8047668 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80476a8:	68da      	ldr	r2, [r3, #12]
 80476aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80476ae:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80476b0:	68da      	ldr	r2, [r3, #12]
 80476b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80476b6:	60da      	str	r2, [r3, #12]
 80476b8:	e7d6      	b.n	8047668 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 80476ba:	3201      	adds	r2, #1
 80476bc:	e7ed      	b.n	804769a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80476be:	1c51      	adds	r1, r2, #1
 80476c0:	6221      	str	r1, [r4, #32]
 80476c2:	7812      	ldrb	r2, [r2, #0]
 80476c4:	605a      	str	r2, [r3, #4]
 80476c6:	e7e9      	b.n	804769c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80476c8:	0650      	lsls	r0, r2, #25
 80476ca:	d5cd      	bpl.n	8047668 <HAL_UART_IRQHandler+0xc0>
 80476cc:	064a      	lsls	r2, r1, #25
 80476ce:	d5cb      	bpl.n	8047668 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80476d0:	68da      	ldr	r2, [r3, #12]
 80476d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80476d6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80476d8:	2320      	movs	r3, #32
 80476da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80476de:	4620      	mov	r0, r4
 80476e0:	f008 ff38 	bl	8050554 <HAL_UART_TxCpltCallback>
 80476e4:	e7c0      	b.n	8047668 <HAL_UART_IRQHandler+0xc0>
 80476e6:	bf00      	nop
 80476e8:	080476ed 	.word	0x080476ed

080476ec <UART_DMAAbortOnError>:
{
 80476ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80476ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80476f0:	2300      	movs	r3, #0
 80476f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80476f4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80476f6:	f7ff ff2e 	bl	8047556 <HAL_UART_ErrorCallback>
}
 80476fa:	bd08      	pop	{r3, pc}

080476fc <HAL_UART_AbortCpltCallback>:
 80476fc:	4770      	bx	lr
	...

08047700 <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8047700:	6803      	ldr	r3, [r0, #0]
 8047702:	68da      	ldr	r2, [r3, #12]
 8047704:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 8047708:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 804770a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804770c:	695a      	ldr	r2, [r3, #20]
{
 804770e:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 8047710:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8047712:	f022 0201 	bic.w	r2, r2, #1
 8047716:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 8047718:	b128      	cbz	r0, 8047726 <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 804771a:	695a      	ldr	r2, [r3, #20]
 804771c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8047720:	bf18      	it	ne
 8047722:	4a1f      	ldrne	r2, [pc, #124]	; (80477a0 <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8047724:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8047726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8047728:	b129      	cbz	r1, 8047736 <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804772a:	695a      	ldr	r2, [r3, #20]
 804772c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8047730:	bf18      	it	ne
 8047732:	4a1c      	ldrne	r2, [pc, #112]	; (80477a4 <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8047734:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8047736:	695a      	ldr	r2, [r3, #20]
 8047738:	0612      	lsls	r2, r2, #24
 804773a:	d41d      	bmi.n	8047778 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 804773c:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804773e:	6822      	ldr	r2, [r4, #0]
 8047740:	6951      	ldr	r1, [r2, #20]
 8047742:	0649      	lsls	r1, r1, #25
 8047744:	d527      	bpl.n	8047796 <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047746:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8047748:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804774a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 804774e:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8047750:	b308      	cbz	r0, 8047796 <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8047752:	f7fc fcff 	bl	8044154 <HAL_DMA_Abort_IT>
 8047756:	b300      	cbz	r0, 804779a <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 8047758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804775a:	2200      	movs	r2, #0
 804775c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 804775e:	2300      	movs	r3, #0
 8047760:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8047762:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047764:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8047766:	2320      	movs	r3, #32
 8047768:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 804776c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 804776e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 8047772:	f7ff ffc3 	bl	80476fc <HAL_UART_AbortCpltCallback>
 8047776:	e010      	b.n	804779a <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8047778:	695a      	ldr	r2, [r3, #20]
 804777a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804777e:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8047780:	2800      	cmp	r0, #0
 8047782:	d0db      	beq.n	804773c <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8047784:	f7fc fce6 	bl	8044154 <HAL_DMA_Abort_IT>
 8047788:	b118      	cbz	r0, 8047792 <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 804778a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804778c:	2200      	movs	r2, #0
 804778e:	651a      	str	r2, [r3, #80]	; 0x50
 8047790:	e7d4      	b.n	804773c <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 8047792:	4603      	mov	r3, r0
 8047794:	e7d3      	b.n	804773e <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 8047796:	2b00      	cmp	r3, #0
 8047798:	d1e1      	bne.n	804775e <HAL_UART_Abort_IT+0x5e>
}
 804779a:	2000      	movs	r0, #0
 804779c:	bd10      	pop	{r4, pc}
 804779e:	bf00      	nop
 80477a0:	080477d1 	.word	0x080477d1
 80477a4:	080477a9 	.word	0x080477a9

080477a8 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80477a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 80477aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 80477ac:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 80477ae:	2300      	movs	r3, #0
 80477b0:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 80477b2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80477b4:	b10a      	cbz	r2, 80477ba <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80477b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80477b8:	b94a      	cbnz	r2, 80477ce <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80477ba:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80477bc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80477be:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80477c0:	2320      	movs	r3, #32
 80477c2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80477c6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80477ca:	f7ff ff97 	bl	80476fc <HAL_UART_AbortCpltCallback>
}
 80477ce:	bd08      	pop	{r3, pc}

080477d0 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80477d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80477d2:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 80477d4:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80477d6:	2300      	movs	r3, #0
 80477d8:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80477da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80477dc:	b10a      	cbz	r2, 80477e2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80477de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80477e0:	b94a      	cbnz	r2, 80477f6 <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80477e2:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80477e4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80477e6:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80477e8:	2320      	movs	r3, #32
 80477ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80477ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80477f2:	f7ff ff83 	bl	80476fc <HAL_UART_AbortCpltCallback>
}
 80477f6:	bd08      	pop	{r3, pc}

080477f8 <HAL_UART_AbortReceiveCpltCallback>:
 80477f8:	4770      	bx	lr
	...

080477fc <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80477fc:	6803      	ldr	r3, [r0, #0]
 80477fe:	68da      	ldr	r2, [r3, #12]
 8047800:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 8047804:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8047806:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8047808:	695a      	ldr	r2, [r3, #20]
 804780a:	f022 0201 	bic.w	r2, r2, #1
 804780e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8047810:	695a      	ldr	r2, [r3, #20]
 8047812:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 8047816:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8047818:	d017      	beq.n	804784a <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804781a:	695a      	ldr	r2, [r3, #20]
 804781c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047820:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8047822:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047824:	b153      	cbz	r3, 804783c <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8047826:	4a0a      	ldr	r2, [pc, #40]	; (8047850 <HAL_UART_AbortReceive_IT+0x54>)
 8047828:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804782a:	4618      	mov	r0, r3
 804782c:	f7fc fc92 	bl	8044154 <HAL_DMA_Abort_IT>
 8047830:	b110      	cbz	r0, 8047838 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8047832:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8047834:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8047836:	4798      	blx	r3
}
 8047838:	2000      	movs	r0, #0
 804783a:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 804783c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 804783e:	2320      	movs	r3, #32
 8047840:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8047844:	f7ff ffd8 	bl	80477f8 <HAL_UART_AbortReceiveCpltCallback>
 8047848:	e7f6      	b.n	8047838 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 804784a:	85c2      	strh	r2, [r0, #46]	; 0x2e
 804784c:	e7f7      	b.n	804783e <HAL_UART_AbortReceive_IT+0x42>
 804784e:	bf00      	nop
 8047850:	08047855 	.word	0x08047855

08047854 <UART_DMARxOnlyAbortCallback>:
{
 8047854:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8047856:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8047858:	2300      	movs	r3, #0
 804785a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 804785c:	2320      	movs	r3, #32
 804785e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8047862:	f7ff ffc9 	bl	80477f8 <HAL_UART_AbortReceiveCpltCallback>
}
 8047866:	bd08      	pop	{r3, pc}

08047868 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047868:	4b12      	ldr	r3, [pc, #72]	; (80478b4 <SDMMC_GetCmdResp2+0x4c>)
 804786a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804786e:	681b      	ldr	r3, [r3, #0]
 8047870:	fbb3 f2f2 	udiv	r2, r3, r2
 8047874:	f241 3388 	movw	r3, #5000	; 0x1388
 8047878:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 804787a:	f113 33ff 	adds.w	r3, r3, #4294967295
 804787e:	d315      	bcc.n	80478ac <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8047880:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047882:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047886:	d0f8      	beq.n	804787a <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047888:	0512      	lsls	r2, r2, #20
 804788a:	d4f6      	bmi.n	804787a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 804788c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804788e:	075b      	lsls	r3, r3, #29
 8047890:	d503      	bpl.n	804789a <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047892:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047894:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8047896:	4618      	mov	r0, r3
 8047898:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 804789a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804789c:	f013 0301 	ands.w	r3, r3, #1
 80478a0:	d001      	beq.n	80478a6 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80478a2:	2301      	movs	r3, #1
 80478a4:	e7f6      	b.n	8047894 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80478a6:	22c5      	movs	r2, #197	; 0xc5
 80478a8:	6382      	str	r2, [r0, #56]	; 0x38
 80478aa:	e7f4      	b.n	8047896 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80478ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80478b0:	e7f1      	b.n	8047896 <SDMMC_GetCmdResp2+0x2e>
 80478b2:	bf00      	nop
 80478b4:	20001048 	.word	0x20001048

080478b8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80478b8:	4b0f      	ldr	r3, [pc, #60]	; (80478f8 <SDMMC_GetCmdResp3+0x40>)
 80478ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80478be:	681b      	ldr	r3, [r3, #0]
 80478c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80478c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80478c8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80478ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80478ce:	d30f      	bcc.n	80478f0 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80478d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80478d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80478d6:	d0f8      	beq.n	80478ca <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80478d8:	0512      	lsls	r2, r2, #20
 80478da:	d4f6      	bmi.n	80478ca <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80478dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80478de:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80478e2:	bf15      	itete	ne
 80478e4:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80478e6:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80478e8:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80478ea:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80478ec:	4618      	mov	r0, r3
 80478ee:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80478f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80478f4:	4770      	bx	lr
 80478f6:	bf00      	nop
 80478f8:	20001048 	.word	0x20001048

080478fc <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80478fc:	4b44      	ldr	r3, [pc, #272]	; (8047a10 <SDMMC_GetCmdResp1+0x114>)
{
 80478fe:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8047900:	681b      	ldr	r3, [r3, #0]
 8047902:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8047906:	fbb3 f3f4 	udiv	r3, r3, r4
 804790a:	435a      	muls	r2, r3
    if (count-- == 0U)
 804790c:	2a00      	cmp	r2, #0
 804790e:	d04a      	beq.n	80479a6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8047910:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047912:	f013 0f45 	tst.w	r3, #69	; 0x45
 8047916:	d008      	beq.n	804792a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047918:	051c      	lsls	r4, r3, #20
 804791a:	d406      	bmi.n	804792a <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 804791c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804791e:	075b      	lsls	r3, r3, #29
 8047920:	d505      	bpl.n	804792e <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047922:	2304      	movs	r3, #4
 8047924:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8047926:	4618      	mov	r0, r3
}
 8047928:	bd10      	pop	{r4, pc}
 804792a:	3a01      	subs	r2, #1
 804792c:	e7ee      	b.n	804790c <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 804792e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047930:	07dc      	lsls	r4, r3, #31
 8047932:	d503      	bpl.n	804793c <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047934:	2301      	movs	r3, #1
 8047936:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8047938:	2001      	movs	r0, #1
 804793a:	e7f5      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 804793c:	23c5      	movs	r3, #197	; 0xc5
 804793e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8047940:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8047942:	b2db      	uxtb	r3, r3
 8047944:	4299      	cmp	r1, r3
 8047946:	d1f7      	bne.n	8047938 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8047948:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 804794a:	4832      	ldr	r0, [pc, #200]	; (8047a14 <SDMMC_GetCmdResp1+0x118>)
 804794c:	4018      	ands	r0, r3
 804794e:	2800      	cmp	r0, #0
 8047950:	d0ea      	beq.n	8047928 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8047952:	2b00      	cmp	r3, #0
 8047954:	db2a      	blt.n	80479ac <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8047956:	005a      	lsls	r2, r3, #1
 8047958:	d42b      	bmi.n	80479b2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 804795a:	009c      	lsls	r4, r3, #2
 804795c:	d42b      	bmi.n	80479b6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 804795e:	00d9      	lsls	r1, r3, #3
 8047960:	d42b      	bmi.n	80479ba <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8047962:	011a      	lsls	r2, r3, #4
 8047964:	d42c      	bmi.n	80479c0 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8047966:	015c      	lsls	r4, r3, #5
 8047968:	d42d      	bmi.n	80479c6 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 804796a:	01d9      	lsls	r1, r3, #7
 804796c:	d42e      	bmi.n	80479cc <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 804796e:	021a      	lsls	r2, r3, #8
 8047970:	d42f      	bmi.n	80479d2 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8047972:	025c      	lsls	r4, r3, #9
 8047974:	d430      	bmi.n	80479d8 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8047976:	0299      	lsls	r1, r3, #10
 8047978:	d431      	bmi.n	80479de <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 804797a:	02da      	lsls	r2, r3, #11
 804797c:	d432      	bmi.n	80479e4 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 804797e:	035c      	lsls	r4, r3, #13
 8047980:	d433      	bmi.n	80479ea <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8047982:	0399      	lsls	r1, r3, #14
 8047984:	d434      	bmi.n	80479f0 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8047986:	03da      	lsls	r2, r3, #15
 8047988:	d435      	bmi.n	80479f6 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 804798a:	041c      	lsls	r4, r3, #16
 804798c:	d436      	bmi.n	80479fc <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 804798e:	0459      	lsls	r1, r3, #17
 8047990:	d437      	bmi.n	8047a02 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8047992:	049a      	lsls	r2, r3, #18
 8047994:	d438      	bmi.n	8047a08 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8047996:	f013 0f08 	tst.w	r3, #8
 804799a:	bf0c      	ite	eq
 804799c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80479a0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80479a4:	e7c0      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80479a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80479aa:	e7bd      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80479ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80479b0:	e7ba      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80479b2:	2040      	movs	r0, #64	; 0x40
 80479b4:	e7b8      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80479b6:	2080      	movs	r0, #128	; 0x80
 80479b8:	e7b6      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80479ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80479be:	e7b3      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80479c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80479c4:	e7b0      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80479c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80479ca:	e7ad      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80479cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80479d0:	e7aa      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80479d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80479d6:	e7a7      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80479d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80479dc:	e7a4      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80479de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80479e2:	e7a1      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80479e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80479e8:	e79e      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80479ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80479ee:	e79b      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80479f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80479f4:	e798      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80479f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80479fa:	e795      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80479fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8047a00:	e792      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8047a02:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8047a06:	e78f      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8047a08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8047a0c:	e78c      	b.n	8047928 <SDMMC_GetCmdResp1+0x2c>
 8047a0e:	bf00      	nop
 8047a10:	20001048 	.word	0x20001048
 8047a14:	fdffe008 	.word	0xfdffe008

08047a18 <SDIO_Init>:
{
 8047a18:	b084      	sub	sp, #16
 8047a1a:	b510      	push	{r4, lr}
 8047a1c:	ac03      	add	r4, sp, #12
 8047a1e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8047a22:	460b      	mov	r3, r1
 8047a24:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8047a26:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8047a28:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8047a2a:	9905      	ldr	r1, [sp, #20]
 8047a2c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8047a2e:	9906      	ldr	r1, [sp, #24]
 8047a30:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8047a32:	9907      	ldr	r1, [sp, #28]
 8047a34:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8047a36:	9908      	ldr	r1, [sp, #32]
}
 8047a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8047a3c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8047a40:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8047a42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8047a46:	4313      	orrs	r3, r2
 8047a48:	6043      	str	r3, [r0, #4]
}
 8047a4a:	b004      	add	sp, #16
 8047a4c:	2000      	movs	r0, #0
 8047a4e:	4770      	bx	lr

08047a50 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8047a50:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8047a54:	4770      	bx	lr

08047a56 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8047a56:	680b      	ldr	r3, [r1, #0]
 8047a58:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8047a5c:	2000      	movs	r0, #0
 8047a5e:	4770      	bx	lr

08047a60 <SDIO_PowerState_ON>:
{  
 8047a60:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8047a62:	2303      	movs	r3, #3
 8047a64:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8047a66:	2002      	movs	r0, #2
 8047a68:	f008 f9a4 	bl	804fdb4 <HAL_Delay>
}
 8047a6c:	2000      	movs	r0, #0
 8047a6e:	bd08      	pop	{r3, pc}

08047a70 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8047a70:	6800      	ldr	r0, [r0, #0]
}
 8047a72:	f000 0003 	and.w	r0, r0, #3
 8047a76:	4770      	bx	lr

08047a78 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8047a78:	680b      	ldr	r3, [r1, #0]
{
 8047a7a:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8047a7c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8047a7e:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8047a82:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8047a84:	4323      	orrs	r3, r4
                       Command->Response         |\
 8047a86:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8047a88:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8047a8a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8047a8c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8047a90:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8047a92:	f022 020f 	bic.w	r2, r2, #15
 8047a96:	4313      	orrs	r3, r2
 8047a98:	60c3      	str	r3, [r0, #12]
}
 8047a9a:	2000      	movs	r0, #0
 8047a9c:	bd10      	pop	{r4, pc}

08047a9e <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8047a9e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8047aa0:	5840      	ldr	r0, [r0, r1]
}  
 8047aa2:	4770      	bx	lr

08047aa4 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8047aa4:	680b      	ldr	r3, [r1, #0]
{
 8047aa6:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8047aa8:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8047aaa:	684b      	ldr	r3, [r1, #4]
 8047aac:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8047aae:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8047ab2:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8047ab4:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8047ab6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8047ab8:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8047aba:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8047abc:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8047abe:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8047ac2:	4313      	orrs	r3, r2
 8047ac4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8047ac6:	2000      	movs	r0, #0
 8047ac8:	bd10      	pop	{r4, pc}

08047aca <SDMMC_CmdBlockLength>:
{
 8047aca:	b530      	push	{r4, r5, lr}
 8047acc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047ace:	2410      	movs	r4, #16
 8047ad0:	2340      	movs	r3, #64	; 0x40
{
 8047ad2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8047ad4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047ad6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047ada:	2200      	movs	r2, #0
 8047adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ae0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047ae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ae6:	f7ff ffc7 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8047aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8047aee:	4621      	mov	r1, r4
 8047af0:	4628      	mov	r0, r5
 8047af2:	f7ff ff03 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047af6:	b007      	add	sp, #28
 8047af8:	bd30      	pop	{r4, r5, pc}

08047afa <SDMMC_CmdReadSingleBlock>:
{
 8047afa:	b530      	push	{r4, r5, lr}
 8047afc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047afe:	2411      	movs	r4, #17
 8047b00:	2340      	movs	r3, #64	; 0x40
{
 8047b02:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8047b04:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b06:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b0a:	2200      	movs	r2, #0
 8047b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b10:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b16:	f7ff ffaf 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8047b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b1e:	4621      	mov	r1, r4
 8047b20:	4628      	mov	r0, r5
 8047b22:	f7ff feeb 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047b26:	b007      	add	sp, #28
 8047b28:	bd30      	pop	{r4, r5, pc}

08047b2a <SDMMC_CmdReadMultiBlock>:
{
 8047b2a:	b530      	push	{r4, r5, lr}
 8047b2c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b2e:	2412      	movs	r4, #18
 8047b30:	2340      	movs	r3, #64	; 0x40
{
 8047b32:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8047b34:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b36:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b3a:	2200      	movs	r2, #0
 8047b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b40:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b46:	f7ff ff97 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8047b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b4e:	4621      	mov	r1, r4
 8047b50:	4628      	mov	r0, r5
 8047b52:	f7ff fed3 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047b56:	b007      	add	sp, #28
 8047b58:	bd30      	pop	{r4, r5, pc}

08047b5a <SDMMC_CmdWriteSingleBlock>:
{
 8047b5a:	b530      	push	{r4, r5, lr}
 8047b5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b5e:	2418      	movs	r4, #24
 8047b60:	2340      	movs	r3, #64	; 0x40
{
 8047b62:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8047b64:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b66:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b6a:	2200      	movs	r2, #0
 8047b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b70:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b76:	f7ff ff7f 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8047b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b7e:	4621      	mov	r1, r4
 8047b80:	4628      	mov	r0, r5
 8047b82:	f7ff febb 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047b86:	b007      	add	sp, #28
 8047b88:	bd30      	pop	{r4, r5, pc}

08047b8a <SDMMC_CmdWriteMultiBlock>:
{
 8047b8a:	b530      	push	{r4, r5, lr}
 8047b8c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b8e:	2419      	movs	r4, #25
 8047b90:	2340      	movs	r3, #64	; 0x40
{
 8047b92:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8047b94:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b96:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b9a:	2200      	movs	r2, #0
 8047b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ba0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ba6:	f7ff ff67 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8047baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8047bae:	4621      	mov	r1, r4
 8047bb0:	4628      	mov	r0, r5
 8047bb2:	f7ff fea3 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047bb6:	b007      	add	sp, #28
 8047bb8:	bd30      	pop	{r4, r5, pc}
	...

08047bbc <SDMMC_CmdStopTransfer>:
{
 8047bbc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8047bbe:	2300      	movs	r3, #0
{
 8047bc0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8047bc2:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047bc4:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047bc6:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047bca:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8047bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047bd0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047bd6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047bd8:	f7ff ff4e 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8047bdc:	4a03      	ldr	r2, [pc, #12]	; (8047bec <SDMMC_CmdStopTransfer+0x30>)
 8047bde:	4621      	mov	r1, r4
 8047be0:	4628      	mov	r0, r5
 8047be2:	f7ff fe8b 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047be6:	b007      	add	sp, #28
 8047be8:	bd30      	pop	{r4, r5, pc}
 8047bea:	bf00      	nop
 8047bec:	05f5e100 	.word	0x05f5e100

08047bf0 <SDMMC_CmdSelDesel>:
{
 8047bf0:	b530      	push	{r4, r5, lr}
 8047bf2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047bf4:	2407      	movs	r4, #7
 8047bf6:	2340      	movs	r3, #64	; 0x40
{
 8047bf8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8047bfa:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047bfc:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c00:	2200      	movs	r2, #0
 8047c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c08:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c0c:	f7ff ff34 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8047c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8047c14:	4621      	mov	r1, r4
 8047c16:	4628      	mov	r0, r5
 8047c18:	f7ff fe70 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047c1c:	b007      	add	sp, #28
 8047c1e:	bd30      	pop	{r4, r5, pc}

08047c20 <SDMMC_CmdGoIdleState>:
{
 8047c20:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8047c22:	2300      	movs	r3, #0
{
 8047c24:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8047c26:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047c2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c2e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047c34:	9305      	str	r3, [sp, #20]
{
 8047c36:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c38:	f7ff ff1e 	bl	8047a78 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047c3c:	4b0b      	ldr	r3, [pc, #44]	; (8047c6c <SDMMC_CmdGoIdleState+0x4c>)
 8047c3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047c42:	681b      	ldr	r3, [r3, #0]
 8047c44:	fbb3 f2f2 	udiv	r2, r3, r2
 8047c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8047c4c:	4353      	muls	r3, r2
    if (count-- == 0U)
 8047c4e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047c52:	d307      	bcc.n	8047c64 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8047c54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8047c56:	0612      	lsls	r2, r2, #24
 8047c58:	d5f9      	bpl.n	8047c4e <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8047c5a:	23c5      	movs	r3, #197	; 0xc5
 8047c5c:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8047c5e:	2000      	movs	r0, #0
}
 8047c60:	b006      	add	sp, #24
 8047c62:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8047c64:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8047c68:	e7fa      	b.n	8047c60 <SDMMC_CmdGoIdleState+0x40>
 8047c6a:	bf00      	nop
 8047c6c:	20001048 	.word	0x20001048

08047c70 <SDMMC_CmdOperCond>:
{
 8047c70:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8047c72:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 8047c76:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8047c78:	2308      	movs	r3, #8
 8047c7a:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047c7e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8047c82:	2300      	movs	r3, #0
 8047c84:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c88:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047c8e:	9305      	str	r3, [sp, #20]
{
 8047c90:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c92:	f7ff fef1 	bl	8047a78 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047c96:	4b15      	ldr	r3, [pc, #84]	; (8047cec <SDMMC_CmdOperCond+0x7c>)
 8047c98:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047c9c:	681b      	ldr	r3, [r3, #0]
 8047c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8047ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8047ca6:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8047ca8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047cac:	d31a      	bcc.n	8047ce4 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8047cae:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047cb0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047cb4:	d0f8      	beq.n	8047ca8 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047cb6:	0512      	lsls	r2, r2, #20
 8047cb8:	d4f6      	bmi.n	8047ca8 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8047cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047cbc:	075b      	lsls	r3, r3, #29
 8047cbe:	d503      	bpl.n	8047cc8 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047cc0:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047cc2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8047cc4:	b006      	add	sp, #24
 8047cc6:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8047cc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8047cca:	f012 0201 	ands.w	r2, r2, #1
 8047cce:	d001      	beq.n	8047cd4 <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047cd0:	2001      	movs	r0, #1
 8047cd2:	e7f6      	b.n	8047cc2 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8047cd4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8047cd6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8047cda:	d0f3      	beq.n	8047cc4 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8047cdc:	2340      	movs	r3, #64	; 0x40
 8047cde:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8047ce0:	4610      	mov	r0, r2
 8047ce2:	e7ef      	b.n	8047cc4 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 8047ce4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8047ce8:	e7ec      	b.n	8047cc4 <SDMMC_CmdOperCond+0x54>
 8047cea:	bf00      	nop
 8047cec:	20001048 	.word	0x20001048

08047cf0 <SDMMC_CmdAppCommand>:
{
 8047cf0:	b530      	push	{r4, r5, lr}
 8047cf2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047cf4:	2437      	movs	r4, #55	; 0x37
 8047cf6:	2340      	movs	r3, #64	; 0x40
{
 8047cf8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8047cfa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047cfc:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d00:	2200      	movs	r2, #0
 8047d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d08:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d0c:	f7ff feb4 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8047d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8047d14:	4621      	mov	r1, r4
 8047d16:	4628      	mov	r0, r5
 8047d18:	f7ff fdf0 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047d1c:	b007      	add	sp, #28
 8047d1e:	bd30      	pop	{r4, r5, pc}

08047d20 <SDMMC_CmdAppOperCommand>:
{
 8047d20:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047d22:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8047d26:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047d28:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047d2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047d2e:	2340      	movs	r3, #64	; 0x40
 8047d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047d34:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047d3a:	2100      	movs	r1, #0
 8047d3c:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8047d40:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d42:	a901      	add	r1, sp, #4
 8047d44:	f7ff fe98 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8047d48:	4620      	mov	r0, r4
 8047d4a:	f7ff fdb5 	bl	80478b8 <SDMMC_GetCmdResp3>
}
 8047d4e:	b006      	add	sp, #24
 8047d50:	bd10      	pop	{r4, pc}

08047d52 <SDMMC_CmdBusWidth>:
{
 8047d52:	b530      	push	{r4, r5, lr}
 8047d54:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047d56:	2406      	movs	r4, #6
 8047d58:	2340      	movs	r3, #64	; 0x40
{
 8047d5a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8047d5c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047d5e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d62:	2200      	movs	r2, #0
 8047d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d68:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d6e:	f7ff fe83 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8047d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8047d76:	4621      	mov	r1, r4
 8047d78:	4628      	mov	r0, r5
 8047d7a:	f7ff fdbf 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047d7e:	b007      	add	sp, #28
 8047d80:	bd30      	pop	{r4, r5, pc}

08047d82 <SDMMC_CmdSendSCR>:
{
 8047d82:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047d84:	2300      	movs	r3, #0
{
 8047d86:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047d88:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047d8a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047d8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047d90:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047d92:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047d9c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047d9e:	f7ff fe6b 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8047da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8047da6:	4621      	mov	r1, r4
 8047da8:	4628      	mov	r0, r5
 8047daa:	f7ff fda7 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047dae:	b007      	add	sp, #28
 8047db0:	bd30      	pop	{r4, r5, pc}

08047db2 <SDMMC_CmdSendCID>:
{
 8047db2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8047db4:	2300      	movs	r3, #0
{
 8047db6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8047db8:	2202      	movs	r2, #2
 8047dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8047dbe:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047dc0:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047dc4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047dca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047dcc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047dce:	f7ff fe53 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8047dd2:	4620      	mov	r0, r4
 8047dd4:	f7ff fd48 	bl	8047868 <SDMMC_GetCmdResp2>
}
 8047dd8:	b006      	add	sp, #24
 8047dda:	bd10      	pop	{r4, pc}

08047ddc <SDMMC_CmdSendCSD>:
{
 8047ddc:	b510      	push	{r4, lr}
 8047dde:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8047de0:	2209      	movs	r2, #9
 8047de2:	23c0      	movs	r3, #192	; 0xc0
 8047de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8047de8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047dee:	2100      	movs	r1, #0
 8047df0:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8047df4:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047df6:	a901      	add	r1, sp, #4
 8047df8:	f7ff fe3e 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8047dfc:	4620      	mov	r0, r4
 8047dfe:	f7ff fd33 	bl	8047868 <SDMMC_GetCmdResp2>
}
 8047e02:	b006      	add	sp, #24
 8047e04:	bd10      	pop	{r4, pc}
	...

08047e08 <SDMMC_CmdSetRelAdd>:
{
 8047e08:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8047e0a:	2300      	movs	r3, #0
{
 8047e0c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8047e0e:	2203      	movs	r2, #3
 8047e10:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047e14:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047e16:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047e1a:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047e20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047e22:	9305      	str	r3, [sp, #20]
{
 8047e24:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047e26:	f7ff fe27 	bl	8047a78 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047e2a:	4b1e      	ldr	r3, [pc, #120]	; (8047ea4 <SDMMC_CmdSetRelAdd+0x9c>)
 8047e2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047e30:	681b      	ldr	r3, [r3, #0]
 8047e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8047e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8047e3a:	4353      	muls	r3, r2
    if (count-- == 0U)
 8047e3c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047e40:	d328      	bcc.n	8047e94 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8047e42:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047e44:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047e48:	d0f8      	beq.n	8047e3c <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047e4a:	0512      	lsls	r2, r2, #20
 8047e4c:	d4f6      	bmi.n	8047e3c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8047e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047e50:	0758      	lsls	r0, r3, #29
 8047e52:	d503      	bpl.n	8047e5c <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047e54:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047e56:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8047e58:	b007      	add	sp, #28
 8047e5a:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8047e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047e5e:	07d9      	lsls	r1, r3, #31
 8047e60:	d501      	bpl.n	8047e66 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047e62:	2001      	movs	r0, #1
 8047e64:	e7f7      	b.n	8047e56 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8047e66:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8047e68:	b2db      	uxtb	r3, r3
 8047e6a:	2b03      	cmp	r3, #3
 8047e6c:	d115      	bne.n	8047e9a <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8047e6e:	23c5      	movs	r3, #197	; 0xc5
 8047e70:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8047e72:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8047e74:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8047e78:	d102      	bne.n	8047e80 <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8047e7a:	0c1b      	lsrs	r3, r3, #16
 8047e7c:	802b      	strh	r3, [r5, #0]
 8047e7e:	e7eb      	b.n	8047e58 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8047e80:	045a      	lsls	r2, r3, #17
 8047e82:	d40c      	bmi.n	8047e9e <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8047e84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8047e88:	bf0c      	ite	eq
 8047e8a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8047e8e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8047e92:	e7e1      	b.n	8047e58 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8047e94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8047e98:	e7de      	b.n	8047e58 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8047e9a:	2001      	movs	r0, #1
 8047e9c:	e7dc      	b.n	8047e58 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8047e9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8047ea2:	e7d9      	b.n	8047e58 <SDMMC_CmdSetRelAdd+0x50>
 8047ea4:	20001048 	.word	0x20001048

08047ea8 <SDMMC_CmdSendStatus>:
{
 8047ea8:	b530      	push	{r4, r5, lr}
 8047eaa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047eac:	240d      	movs	r4, #13
 8047eae:	2340      	movs	r3, #64	; 0x40
{
 8047eb0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8047eb2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047eb4:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047eb8:	2200      	movs	r2, #0
 8047eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ebe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047ec4:	f7ff fdd8 	bl	8047a78 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8047ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8047ecc:	4621      	mov	r1, r4
 8047ece:	4628      	mov	r0, r5
 8047ed0:	f7ff fd14 	bl	80478fc <SDMMC_GetCmdResp1>
}
 8047ed4:	b007      	add	sp, #28
 8047ed6:	bd30      	pop	{r4, r5, pc}

08047ed8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8047ed8:	4b03      	ldr	r3, [pc, #12]	; (8047ee8 <disk_status+0x10>)
 8047eda:	181a      	adds	r2, r3, r0
 8047edc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047ee0:	7a10      	ldrb	r0, [r2, #8]
 8047ee2:	685b      	ldr	r3, [r3, #4]
 8047ee4:	685b      	ldr	r3, [r3, #4]
 8047ee6:	4718      	bx	r3
 8047ee8:	200025f0 	.word	0x200025f0

08047eec <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8047eec:	4b06      	ldr	r3, [pc, #24]	; (8047f08 <disk_initialize+0x1c>)
 8047eee:	5c1a      	ldrb	r2, [r3, r0]
 8047ef0:	b942      	cbnz	r2, 8047f04 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8047ef2:	2201      	movs	r2, #1
 8047ef4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8047ef6:	181a      	adds	r2, r3, r0
 8047ef8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047efc:	7a10      	ldrb	r0, [r2, #8]
 8047efe:	685b      	ldr	r3, [r3, #4]
 8047f00:	681b      	ldr	r3, [r3, #0]
 8047f02:	4718      	bx	r3
  }
  return stat;
}
 8047f04:	2000      	movs	r0, #0
 8047f06:	4770      	bx	lr
 8047f08:	200025f0 	.word	0x200025f0

08047f0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8047f0c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8047f0e:	4c05      	ldr	r4, [pc, #20]	; (8047f24 <disk_read+0x18>)
 8047f10:	1825      	adds	r5, r4, r0
 8047f12:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8047f16:	6860      	ldr	r0, [r4, #4]
 8047f18:	6884      	ldr	r4, [r0, #8]
 8047f1a:	7a28      	ldrb	r0, [r5, #8]
 8047f1c:	46a4      	mov	ip, r4
  return res;
}
 8047f1e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8047f20:	4760      	bx	ip
 8047f22:	bf00      	nop
 8047f24:	200025f0 	.word	0x200025f0

08047f28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8047f28:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8047f2a:	4c05      	ldr	r4, [pc, #20]	; (8047f40 <disk_write+0x18>)
 8047f2c:	1825      	adds	r5, r4, r0
 8047f2e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8047f32:	6860      	ldr	r0, [r4, #4]
 8047f34:	68c4      	ldr	r4, [r0, #12]
 8047f36:	7a28      	ldrb	r0, [r5, #8]
 8047f38:	46a4      	mov	ip, r4
  return res;
}
 8047f3a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8047f3c:	4760      	bx	ip
 8047f3e:	bf00      	nop
 8047f40:	200025f0 	.word	0x200025f0

08047f44 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047f44:	4b05      	ldr	r3, [pc, #20]	; (8047f5c <disk_ioctl+0x18>)
{
 8047f46:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047f48:	181c      	adds	r4, r3, r0
 8047f4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047f4e:	7a20      	ldrb	r0, [r4, #8]
 8047f50:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8047f52:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047f56:	691b      	ldr	r3, [r3, #16]
 8047f58:	4718      	bx	r3
 8047f5a:	bf00      	nop
 8047f5c:	200025f0 	.word	0x200025f0

08047f60 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8047f60:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8047f62:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8047f64:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8047f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8047f6a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8047f6e:	4770      	bx	lr

08047f70 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8047f70:	6802      	ldr	r2, [r0, #0]
{
 8047f72:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8047f74:	b152      	cbz	r2, 8047f8c <get_ldnumber+0x1c>
 8047f76:	4611      	mov	r1, r2
 8047f78:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8047f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8047f7e:	2c20      	cmp	r4, #32
 8047f80:	d90c      	bls.n	8047f9c <get_ldnumber+0x2c>
 8047f82:	2c3a      	cmp	r4, #58	; 0x3a
 8047f84:	d1f8      	bne.n	8047f78 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8047f86:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8047f88:	428b      	cmp	r3, r1
 8047f8a:	d002      	beq.n	8047f92 <get_ldnumber+0x22>
	int vol = -1;
 8047f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8047f90:	e005      	b.n	8047f9e <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8047f92:	7812      	ldrb	r2, [r2, #0]
 8047f94:	2a30      	cmp	r2, #48	; 0x30
 8047f96:	d1f9      	bne.n	8047f8c <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8047f98:	3301      	adds	r3, #1
 8047f9a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8047f9c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8047f9e:	bd10      	pop	{r4, pc}

08047fa0 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8047fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8047fa2:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8047fa4:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8047fa8:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8047faa:	2301      	movs	r3, #1
 8047fac:	462a      	mov	r2, r5
 8047fae:	4639      	mov	r1, r7
 8047fb0:	7840      	ldrb	r0, [r0, #1]
 8047fb2:	f7ff ffb9 	bl	8047f28 <disk_write>
 8047fb6:	b9a0      	cbnz	r0, 8047fe2 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8047fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8047fba:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8047fbc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8047fbe:	1aeb      	subs	r3, r5, r3
 8047fc0:	4293      	cmp	r3, r2
 8047fc2:	d301      	bcc.n	8047fc8 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8047fc4:	2000      	movs	r0, #0
}
 8047fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8047fc8:	78a6      	ldrb	r6, [r4, #2]
 8047fca:	2e01      	cmp	r6, #1
 8047fcc:	d9fa      	bls.n	8047fc4 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8047fce:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8047fd0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8047fd2:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8047fd4:	462a      	mov	r2, r5
 8047fd6:	2301      	movs	r3, #1
 8047fd8:	4639      	mov	r1, r7
 8047fda:	f7ff ffa5 	bl	8047f28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8047fde:	3e01      	subs	r6, #1
 8047fe0:	e7f3      	b.n	8047fca <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8047fe2:	2001      	movs	r0, #1
 8047fe4:	e7ef      	b.n	8047fc6 <sync_window.part.4+0x26>

08047fe6 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8047fe6:	78c3      	ldrb	r3, [r0, #3]
 8047fe8:	b10b      	cbz	r3, 8047fee <sync_window+0x8>
 8047fea:	f7ff bfd9 	b.w	8047fa0 <sync_window.part.4>
}
 8047fee:	4618      	mov	r0, r3
 8047ff0:	4770      	bx	lr

08047ff2 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8047ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047ff4:	428b      	cmp	r3, r1
{
 8047ff6:	b570      	push	{r4, r5, r6, lr}
 8047ff8:	4606      	mov	r6, r0
 8047ffa:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8047ffc:	d012      	beq.n	8048024 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8047ffe:	f7ff fff2 	bl	8047fe6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8048002:	4604      	mov	r4, r0
 8048004:	b960      	cbnz	r0, 8048020 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8048006:	462a      	mov	r2, r5
 8048008:	2301      	movs	r3, #1
 804800a:	f106 0138 	add.w	r1, r6, #56	; 0x38
 804800e:	7870      	ldrb	r0, [r6, #1]
 8048010:	f7ff ff7c 	bl	8047f0c <disk_read>
 8048014:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8048016:	bf1c      	itt	ne
 8048018:	f04f 35ff 	movne.w	r5, #4294967295
 804801c:	2401      	movne	r4, #1
			fs->winsect = sector;
 804801e:	6375      	str	r5, [r6, #52]	; 0x34
}
 8048020:	4620      	mov	r0, r4
 8048022:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8048024:	2400      	movs	r4, #0
 8048026:	e7fb      	b.n	8048020 <move_window+0x2e>

08048028 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8048028:	2300      	movs	r3, #0
{
 804802a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 804802c:	70c3      	strb	r3, [r0, #3]
 804802e:	f04f 33ff 	mov.w	r3, #4294967295
 8048032:	6343      	str	r3, [r0, #52]	; 0x34
{
 8048034:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8048036:	f7ff ffdc 	bl	8047ff2 <move_window>
 804803a:	bb30      	cbnz	r0, 804808a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 804803c:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8048040:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8048044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8048048:	f64a 2255 	movw	r2, #43605	; 0xaa55
 804804c:	4293      	cmp	r3, r2
 804804e:	d11e      	bne.n	804808e <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8048050:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8048054:	2be9      	cmp	r3, #233	; 0xe9
 8048056:	d005      	beq.n	8048064 <check_fs+0x3c>
 8048058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804805a:	4a10      	ldr	r2, [pc, #64]	; (804809c <check_fs+0x74>)
 804805c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8048060:	4293      	cmp	r3, r2
 8048062:	d116      	bne.n	8048092 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8048064:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8048068:	f7ff ff7a 	bl	8047f60 <ld_dword>
 804806c:	4b0c      	ldr	r3, [pc, #48]	; (80480a0 <check_fs+0x78>)
 804806e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8048072:	4298      	cmp	r0, r3
 8048074:	d00f      	beq.n	8048096 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8048076:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 804807a:	f7ff ff71 	bl	8047f60 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 804807e:	4b09      	ldr	r3, [pc, #36]	; (80480a4 <check_fs+0x7c>)
 8048080:	4298      	cmp	r0, r3
 8048082:	bf14      	ite	ne
 8048084:	2002      	movne	r0, #2
 8048086:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8048088:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 804808a:	2004      	movs	r0, #4
 804808c:	e7fc      	b.n	8048088 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 804808e:	2003      	movs	r0, #3
 8048090:	e7fa      	b.n	8048088 <check_fs+0x60>
	return 2;
 8048092:	2002      	movs	r0, #2
 8048094:	e7f8      	b.n	8048088 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8048096:	2000      	movs	r0, #0
 8048098:	e7f6      	b.n	8048088 <check_fs+0x60>
 804809a:	bf00      	nop
 804809c:	009000eb 	.word	0x009000eb
 80480a0:	00544146 	.word	0x00544146
 80480a4:	33544146 	.word	0x33544146

080480a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80480a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80480ac:	2300      	movs	r3, #0
{
 80480ae:	b085      	sub	sp, #20
	*rfs = 0;
 80480b0:	600b      	str	r3, [r1, #0]
{
 80480b2:	4688      	mov	r8, r1
 80480b4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80480b6:	f7ff ff5b 	bl	8047f70 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80480ba:	1e07      	subs	r7, r0, #0
 80480bc:	f2c0 815e 	blt.w	804837c <find_volume+0x2d4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80480c0:	4eb2      	ldr	r6, [pc, #712]	; (804838c <find_volume+0x2e4>)
 80480c2:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 80480c6:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80480c8:	2c00      	cmp	r4, #0
 80480ca:	f000 8159 	beq.w	8048380 <find_volume+0x2d8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80480ce:	f8c8 4000 	str.w	r4, [r8]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 80480d2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80480d4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80480d8:	b173      	cbz	r3, 80480f8 <find_volume+0x50>
		stat = disk_status(fs->drv);
 80480da:	7860      	ldrb	r0, [r4, #1]
 80480dc:	f7ff fefc 	bl	8047ed8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80480e0:	07c1      	lsls	r1, r0, #31
 80480e2:	d409      	bmi.n	80480f8 <find_volume+0x50>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80480e4:	2d00      	cmp	r5, #0
 80480e6:	f000 814d 	beq.w	8048384 <find_volume+0x2dc>
 80480ea:	f010 0004 	ands.w	r0, r0, #4
 80480ee:	d000      	beq.n	80480f2 <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 80480f0:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80480f2:	b005      	add	sp, #20
 80480f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80480f8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80480fa:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 80480fc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80480fe:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8048100:	f7ff fef4 	bl	8047eec <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8048104:	07c2      	lsls	r2, r0, #31
 8048106:	f100 813f 	bmi.w	8048388 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 804810a:	b10d      	cbz	r5, 8048110 <find_volume+0x68>
 804810c:	0743      	lsls	r3, r0, #29
 804810e:	d4ef      	bmi.n	80480f0 <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8048110:	f104 020c 	add.w	r2, r4, #12
 8048114:	2102      	movs	r1, #2
 8048116:	7860      	ldrb	r0, [r4, #1]
 8048118:	f7ff ff14 	bl	8047f44 <disk_ioctl>
 804811c:	b108      	cbz	r0, 8048122 <find_volume+0x7a>
 804811e:	2001      	movs	r0, #1
 8048120:	e7e7      	b.n	80480f2 <find_volume+0x4a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8048122:	89a5      	ldrh	r5, [r4, #12]
 8048124:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8048128:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 804812c:	d8f7      	bhi.n	804811e <find_volume+0x76>
 804812e:	1e69      	subs	r1, r5, #1
 8048130:	400d      	ands	r5, r1
 8048132:	d1f4      	bne.n	804811e <find_volume+0x76>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8048134:	4629      	mov	r1, r5
 8048136:	4620      	mov	r0, r4
 8048138:	f7ff ff76 	bl	8048028 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 804813c:	2802      	cmp	r0, #2
 804813e:	f040 8101 	bne.w	8048344 <find_volume+0x29c>
 8048142:	f504 77ff 	add.w	r7, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8048146:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 804814a:	b110      	cbz	r0, 8048152 <find_volume+0xaa>
 804814c:	4638      	mov	r0, r7
 804814e:	f7ff ff07 	bl	8047f60 <ld_dword>
 8048152:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8048156:	3501      	adds	r5, #1
 8048158:	2d04      	cmp	r5, #4
 804815a:	f107 0710 	add.w	r7, r7, #16
 804815e:	d1f2      	bne.n	8048146 <find_volume+0x9e>
 8048160:	2500      	movs	r5, #0
			bsect = br[i];
 8048162:	f85d 7025 	ldr.w	r7, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8048166:	2f00      	cmp	r7, #0
 8048168:	f000 80e4 	beq.w	8048334 <find_volume+0x28c>
 804816c:	4639      	mov	r1, r7
 804816e:	4620      	mov	r0, r4
 8048170:	f7ff ff5a 	bl	8048028 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8048174:	2801      	cmp	r0, #1
 8048176:	f200 80de 	bhi.w	8048336 <find_volume+0x28e>
	rv = rv << 8 | ptr[0];
 804817a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 804817e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8048182:	89a1      	ldrh	r1, [r4, #12]
 8048184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8048188:	4299      	cmp	r1, r3
 804818a:	f040 80e0 	bne.w	804834e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 804818e:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8048192:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8048196:	ea59 2903 	orrs.w	r9, r9, r3, lsl #8
 804819a:	d104      	bne.n	80481a6 <find_volume+0xfe>
 804819c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80481a0:	f7ff fede 	bl	8047f60 <ld_dword>
 80481a4:	4681      	mov	r9, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80481a6:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		fs->fsize = fasize;
 80481aa:	f8c4 9020 	str.w	r9, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80481ae:	1e6b      	subs	r3, r5, #1
 80481b0:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80481b2:	70a5      	strb	r5, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80481b4:	f200 80cb 	bhi.w	804834e <find_volume+0x2a6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80481b8:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 80481bc:	fa1f f388 	uxth.w	r3, r8
 80481c0:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80481c2:	2b00      	cmp	r3, #0
 80481c4:	f000 80c3 	beq.w	804834e <find_volume+0x2a6>
 80481c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80481cc:	ea13 0f08 	tst.w	r3, r8
 80481d0:	f040 80bd 	bne.w	804834e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 80481d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80481d8:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 80481dc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80481e0:	094b      	lsrs	r3, r1, #5
 80481e2:	fbba fbf3 	udiv	fp, sl, r3
 80481e6:	fb03 a31b 	mls	r3, r3, fp, sl
 80481ea:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80481ec:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80481f0:	2b00      	cmp	r3, #0
 80481f2:	f040 80ac 	bne.w	804834e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 80481f6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80481fa:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80481fe:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8048202:	d103      	bne.n	804820c <find_volume+0x164>
 8048204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8048208:	f7ff feaa 	bl	8047f60 <ld_dword>
	rv = rv << 8 | ptr[0];
 804820c:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8048210:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8048214:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8048218:	f000 8099 	beq.w	804834e <find_volume+0x2a6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 804821c:	fb09 fc05 	mul.w	ip, r9, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8048220:	eb0b 0203 	add.w	r2, fp, r3
 8048224:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8048226:	4290      	cmp	r0, r2
 8048228:	f0c0 8091 	bcc.w	804834e <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 804822c:	1a80      	subs	r0, r0, r2
 804822e:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8048232:	2800      	cmp	r0, #0
 8048234:	f000 808b 	beq.w	804834e <find_volume+0x2a6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8048238:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 804823c:	4540      	cmp	r0, r8
 804823e:	bf8c      	ite	hi
 8048240:	f04f 0803 	movhi.w	r8, #3
 8048244:	f04f 0802 	movls.w	r8, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8048248:	f640 75f5 	movw	r5, #4085	; 0xff5
 804824c:	42a8      	cmp	r0, r5
 804824e:	bf98      	it	ls
 8048250:	f04f 0801 	movls.w	r8, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8048254:	443b      	add	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8048256:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8048258:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 804825a:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 804825e:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8048260:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8048262:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8048264:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8048266:	d176      	bne.n	8048356 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8048268:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 804826c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8048270:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8048274:	d16b      	bne.n	804834e <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8048276:	f1ba 0f00 	cmp.w	sl, #0
 804827a:	d168      	bne.n	804834e <find_volume+0x2a6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 804827c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8048280:	f7ff fe6e 	bl	8047f60 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8048284:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8048286:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8048288:	1e4b      	subs	r3, r1, #1
 804828a:	441d      	add	r5, r3
 804828c:	fbb5 f1f1 	udiv	r1, r5, r1
 8048290:	4549      	cmp	r1, r9
 8048292:	d85c      	bhi.n	804834e <find_volume+0x2a6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8048294:	f04f 33ff 	mov.w	r3, #4294967295
 8048298:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 804829c:	f1b8 0f03 	cmp.w	r8, #3
		fs->fsi_flag = 0x80;
 80482a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80482a4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80482a6:	d12f      	bne.n	8048308 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 80482a8:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80482ac:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80482b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80482b4:	2b01      	cmp	r3, #1
 80482b6:	d127      	bne.n	8048308 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 80482b8:	1c79      	adds	r1, r7, #1
 80482ba:	4620      	mov	r0, r4
 80482bc:	f7ff fe99 	bl	8047ff2 <move_window>
 80482c0:	bb10      	cbnz	r0, 8048308 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 80482c2:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80482c6:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 80482ca:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80482cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80482d0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80482d4:	4293      	cmp	r3, r2
 80482d6:	d117      	bne.n	8048308 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80482d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80482dc:	f7ff fe40 	bl	8047f60 <ld_dword>
 80482e0:	4b2b      	ldr	r3, [pc, #172]	; (8048390 <find_volume+0x2e8>)
 80482e2:	4298      	cmp	r0, r3
 80482e4:	d110      	bne.n	8048308 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80482e6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80482ea:	f7ff fe39 	bl	8047f60 <ld_dword>
 80482ee:	4b29      	ldr	r3, [pc, #164]	; (8048394 <find_volume+0x2ec>)
 80482f0:	4298      	cmp	r0, r3
 80482f2:	d109      	bne.n	8048308 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80482f4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80482f8:	f7ff fe32 	bl	8047f60 <ld_dword>
 80482fc:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80482fe:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8048302:	f7ff fe2d 	bl	8047f60 <ld_dword>
 8048306:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8048308:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 804830a:	6832      	ldr	r2, [r6, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 804830c:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8048310:	3301      	adds	r3, #1
 8048312:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8048314:	4294      	cmp	r4, r2
	fs->id = ++Fsid;		/* File system mount ID */
 8048316:	84b3      	strh	r3, [r6, #36]	; 0x24
 8048318:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;			/* Initialize current directory */
 804831a:	f04f 0300 	mov.w	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 804831e:	bf08      	it	eq
 8048320:	6033      	streq	r3, [r6, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8048322:	61a3      	str	r3, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8048324:	6933      	ldr	r3, [r6, #16]
 8048326:	429c      	cmp	r4, r3
 8048328:	f04f 0000 	mov.w	r0, #0
 804832c:	f47f aee1 	bne.w	80480f2 <find_volume+0x4a>
 8048330:	6130      	str	r0, [r6, #16]
 8048332:	e6de      	b.n	80480f2 <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8048334:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8048336:	3501      	adds	r5, #1
 8048338:	2d04      	cmp	r5, #4
 804833a:	f47f af12 	bne.w	8048162 <find_volume+0xba>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 804833e:	2804      	cmp	r0, #4
 8048340:	d105      	bne.n	804834e <find_volume+0x2a6>
 8048342:	e6ec      	b.n	804811e <find_volume+0x76>
 8048344:	2804      	cmp	r0, #4
 8048346:	f43f aeea 	beq.w	804811e <find_volume+0x76>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 804834a:	2801      	cmp	r0, #1
 804834c:	d901      	bls.n	8048352 <find_volume+0x2aa>
 804834e:	200d      	movs	r0, #13
 8048350:	e6cf      	b.n	80480f2 <find_volume+0x4a>
	bsect = 0;
 8048352:	462f      	mov	r7, r5
 8048354:	e711      	b.n	804817a <find_volume+0xd2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8048356:	f1ba 0f00 	cmp.w	sl, #0
 804835a:	d0f8      	beq.n	804834e <find_volume+0x2a6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804835c:	f1b8 0f02 	cmp.w	r8, #2
 8048360:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8048364:	bf18      	it	ne
 8048366:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8048368:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804836a:	bf18      	it	ne
 804836c:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8048370:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8048372:	bf0c      	ite	eq
 8048374:	4605      	moveq	r5, r0
 8048376:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 804837a:	e785      	b.n	8048288 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 804837c:	200b      	movs	r0, #11
 804837e:	e6b8      	b.n	80480f2 <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8048380:	200c      	movs	r0, #12
 8048382:	e6b6      	b.n	80480f2 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8048384:	4628      	mov	r0, r5
 8048386:	e6b4      	b.n	80480f2 <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8048388:	2003      	movs	r0, #3
 804838a:	e6b2      	b.n	80480f2 <find_volume+0x4a>
 804838c:	200025c8 	.word	0x200025c8
 8048390:	41615252 	.word	0x41615252
 8048394:	61417272 	.word	0x61417272

08048398 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8048398:	b530      	push	{r4, r5, lr}
 804839a:	b085      	sub	sp, #20
 804839c:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80483a0:	a804      	add	r0, sp, #16
{
 80483a2:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 80483a4:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80483a8:	f7ff fde2 	bl	8047f70 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80483ac:	2800      	cmp	r0, #0
 80483ae:	db1f      	blt.n	80483f0 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80483b0:	4b11      	ldr	r3, [pc, #68]	; (80483f8 <f_mount+0x60>)
 80483b2:	0081      	lsls	r1, r0, #2
 80483b4:	185a      	adds	r2, r3, r1
 80483b6:	6a10      	ldr	r0, [r2, #32]

	if (cfs) {
 80483b8:	b150      	cbz	r0, 80483d0 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80483ba:	681a      	ldr	r2, [r3, #0]
 80483bc:	4290      	cmp	r0, r2
 80483be:	bf04      	itt	eq
 80483c0:	2200      	moveq	r2, #0
 80483c2:	601a      	streq	r2, [r3, #0]
 80483c4:	691a      	ldr	r2, [r3, #16]
 80483c6:	2400      	movs	r4, #0
 80483c8:	4290      	cmp	r0, r2
 80483ca:	bf08      	it	eq
 80483cc:	611c      	streq	r4, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80483ce:	7004      	strb	r4, [r0, #0]
	}

	if (fs) {
 80483d0:	9801      	ldr	r0, [sp, #4]
 80483d2:	b108      	cbz	r0, 80483d8 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 80483d4:	2200      	movs	r2, #0
 80483d6:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80483d8:	440b      	add	r3, r1
 80483da:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80483dc:	b130      	cbz	r0, 80483ec <f_mount+0x54>
 80483de:	2d01      	cmp	r5, #1
 80483e0:	d108      	bne.n	80483f4 <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80483e2:	2200      	movs	r2, #0
 80483e4:	a901      	add	r1, sp, #4
 80483e6:	4668      	mov	r0, sp
 80483e8:	f7ff fe5e 	bl	80480a8 <find_volume>
	LEAVE_FF(fs, res);
}
 80483ec:	b005      	add	sp, #20
 80483ee:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80483f0:	200b      	movs	r0, #11
 80483f2:	e7fb      	b.n	80483ec <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80483f4:	2000      	movs	r0, #0
 80483f6:	e7f9      	b.n	80483ec <f_mount+0x54>
 80483f8:	200025c8 	.word	0x200025c8

080483fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80483fc:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80483fe:	4b0f      	ldr	r3, [pc, #60]	; (804843c <FATFS_LinkDriverEx+0x40>)
 8048400:	7a5d      	ldrb	r5, [r3, #9]
 8048402:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8048406:	b9b5      	cbnz	r5, 8048436 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8048408:	7a5d      	ldrb	r5, [r3, #9]
 804840a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 804840c:	7a5d      	ldrb	r5, [r3, #9]
 804840e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8048412:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8048414:	7a58      	ldrb	r0, [r3, #9]
 8048416:	4418      	add	r0, r3
 8048418:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 804841a:	7a5a      	ldrb	r2, [r3, #9]
 804841c:	b2d2      	uxtb	r2, r2
 804841e:	1c50      	adds	r0, r2, #1
 8048420:	b2c0      	uxtb	r0, r0
 8048422:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8048424:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8048426:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8048428:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 804842a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 804842c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 804842e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8048430:	70cc      	strb	r4, [r1, #3]
 8048432:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8048434:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8048436:	2001      	movs	r0, #1
 8048438:	e7fc      	b.n	8048434 <FATFS_LinkDriverEx+0x38>
 804843a:	bf00      	nop
 804843c:	200025f0 	.word	0x200025f0

08048440 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8048440:	2200      	movs	r2, #0
 8048442:	f7ff bfdb 	b.w	80483fc <FATFS_LinkDriverEx>

08048446 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8048446:	780a      	ldrb	r2, [r1, #0]
 8048448:	7803      	ldrb	r3, [r0, #0]
 804844a:	4053      	eors	r3, r2
 804844c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 804844e:	784a      	ldrb	r2, [r1, #1]
 8048450:	7843      	ldrb	r3, [r0, #1]
 8048452:	4053      	eors	r3, r2
 8048454:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8048456:	788a      	ldrb	r2, [r1, #2]
 8048458:	7883      	ldrb	r3, [r0, #2]
 804845a:	4053      	eors	r3, r2
 804845c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 804845e:	78ca      	ldrb	r2, [r1, #3]
 8048460:	78c3      	ldrb	r3, [r0, #3]
 8048462:	4053      	eors	r3, r2
 8048464:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8048466:	790a      	ldrb	r2, [r1, #4]
 8048468:	7903      	ldrb	r3, [r0, #4]
 804846a:	4053      	eors	r3, r2
 804846c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 804846e:	794a      	ldrb	r2, [r1, #5]
 8048470:	7943      	ldrb	r3, [r0, #5]
 8048472:	4053      	eors	r3, r2
 8048474:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8048476:	798a      	ldrb	r2, [r1, #6]
 8048478:	7983      	ldrb	r3, [r0, #6]
 804847a:	4053      	eors	r3, r2
 804847c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 804847e:	79ca      	ldrb	r2, [r1, #7]
 8048480:	79c3      	ldrb	r3, [r0, #7]
 8048482:	4053      	eors	r3, r2
 8048484:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8048486:	7a0a      	ldrb	r2, [r1, #8]
 8048488:	7a03      	ldrb	r3, [r0, #8]
 804848a:	4053      	eors	r3, r2
 804848c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 804848e:	7a4a      	ldrb	r2, [r1, #9]
 8048490:	7a43      	ldrb	r3, [r0, #9]
 8048492:	4053      	eors	r3, r2
 8048494:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8048496:	7a8a      	ldrb	r2, [r1, #10]
 8048498:	7a83      	ldrb	r3, [r0, #10]
 804849a:	4053      	eors	r3, r2
 804849c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 804849e:	7aca      	ldrb	r2, [r1, #11]
 80484a0:	7ac3      	ldrb	r3, [r0, #11]
 80484a2:	4053      	eors	r3, r2
 80484a4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80484a6:	7b0a      	ldrb	r2, [r1, #12]
 80484a8:	7b03      	ldrb	r3, [r0, #12]
 80484aa:	4053      	eors	r3, r2
 80484ac:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80484ae:	7b4a      	ldrb	r2, [r1, #13]
 80484b0:	7b43      	ldrb	r3, [r0, #13]
 80484b2:	4053      	eors	r3, r2
 80484b4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80484b6:	7b8a      	ldrb	r2, [r1, #14]
 80484b8:	7b83      	ldrb	r3, [r0, #14]
 80484ba:	4053      	eors	r3, r2
 80484bc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80484be:	7bca      	ldrb	r2, [r1, #15]
 80484c0:	7bc3      	ldrb	r3, [r0, #15]
 80484c2:	4053      	eors	r3, r2
 80484c4:	73c3      	strb	r3, [r0, #15]
#endif
}
 80484c6:	4770      	bx	lr

080484c8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80484c8:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80484ca:	780b      	ldrb	r3, [r1, #0]
 80484cc:	7814      	ldrb	r4, [r2, #0]
 80484ce:	4063      	eors	r3, r4
 80484d0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80484d2:	7854      	ldrb	r4, [r2, #1]
 80484d4:	784b      	ldrb	r3, [r1, #1]
 80484d6:	4063      	eors	r3, r4
 80484d8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80484da:	7894      	ldrb	r4, [r2, #2]
 80484dc:	788b      	ldrb	r3, [r1, #2]
 80484de:	4063      	eors	r3, r4
 80484e0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80484e2:	78d4      	ldrb	r4, [r2, #3]
 80484e4:	78cb      	ldrb	r3, [r1, #3]
 80484e6:	4063      	eors	r3, r4
 80484e8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80484ea:	7914      	ldrb	r4, [r2, #4]
 80484ec:	790b      	ldrb	r3, [r1, #4]
 80484ee:	4063      	eors	r3, r4
 80484f0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80484f2:	7954      	ldrb	r4, [r2, #5]
 80484f4:	794b      	ldrb	r3, [r1, #5]
 80484f6:	4063      	eors	r3, r4
 80484f8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80484fa:	7994      	ldrb	r4, [r2, #6]
 80484fc:	798b      	ldrb	r3, [r1, #6]
 80484fe:	4063      	eors	r3, r4
 8048500:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8048502:	79d4      	ldrb	r4, [r2, #7]
 8048504:	79cb      	ldrb	r3, [r1, #7]
 8048506:	4063      	eors	r3, r4
 8048508:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 804850a:	7a14      	ldrb	r4, [r2, #8]
 804850c:	7a0b      	ldrb	r3, [r1, #8]
 804850e:	4063      	eors	r3, r4
 8048510:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8048512:	7a54      	ldrb	r4, [r2, #9]
 8048514:	7a4b      	ldrb	r3, [r1, #9]
 8048516:	4063      	eors	r3, r4
 8048518:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 804851a:	7a8b      	ldrb	r3, [r1, #10]
 804851c:	7a94      	ldrb	r4, [r2, #10]
 804851e:	4063      	eors	r3, r4
 8048520:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8048522:	7ad4      	ldrb	r4, [r2, #11]
 8048524:	7acb      	ldrb	r3, [r1, #11]
 8048526:	4063      	eors	r3, r4
 8048528:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 804852a:	7b14      	ldrb	r4, [r2, #12]
 804852c:	7b0b      	ldrb	r3, [r1, #12]
 804852e:	4063      	eors	r3, r4
 8048530:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8048532:	7b54      	ldrb	r4, [r2, #13]
 8048534:	7b4b      	ldrb	r3, [r1, #13]
 8048536:	4063      	eors	r3, r4
 8048538:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 804853a:	7b94      	ldrb	r4, [r2, #14]
 804853c:	7b8b      	ldrb	r3, [r1, #14]
 804853e:	4063      	eors	r3, r4
 8048540:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8048542:	7bcb      	ldrb	r3, [r1, #15]
 8048544:	7bd2      	ldrb	r2, [r2, #15]
 8048546:	4053      	eors	r3, r2
 8048548:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 804854a:	bd10      	pop	{r4, pc}

0804854c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 804854c:	f1a1 0310 	sub.w	r3, r1, #16
 8048550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8048554:	b2dc      	uxtb	r4, r3
 8048556:	2c10      	cmp	r4, #16
 8048558:	d806      	bhi.n	8048568 <aes_set_key+0x1c>
 804855a:	2301      	movs	r3, #1
 804855c:	40a3      	lsls	r3, r4
 804855e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8048562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8048566:	b92b      	cbnz	r3, 8048574 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8048568:	2300      	movs	r3, #0
 804856a:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 804856e:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8048570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048574:	1e53      	subs	r3, r2, #1
 8048576:	1844      	adds	r4, r0, r1
    while( nn-- )
 8048578:	42a0      	cmp	r0, r4
 804857a:	d150      	bne.n	804861e <aes_set_key+0xd2>
    hi = (keylen + 28) << 2;
 804857c:	f101 0e1c 	add.w	lr, r1, #28
 8048580:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8048584:	fa5f fe8e 	uxtb.w	lr, lr
    ctx->rnd = (hi >> 4) - 1;
 8048588:	ea4f 131e 	mov.w	r3, lr, lsr #4
 804858c:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 804858e:	4c2c      	ldr	r4, [pc, #176]	; (8048640 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8048590:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048594:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 8048598:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 804859a:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 804859c:	fbb3 f0f1 	udiv	r0, r3, r1
 80485a0:	fb01 3010 	mls	r0, r1, r0, r3
 80485a4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 80485a8:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 80485ac:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 80485b0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 80485b4:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 80485b8:	d136      	bne.n	8048628 <aes_set_key+0xdc>
            rc = f2(rc);
 80485ba:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 80485be:	f814 800c 	ldrb.w	r8, [r4, ip]
            t1 = s_box(t2);
 80485c2:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 80485c6:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 80485c8:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 80485cc:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80485d0:	4450      	add	r0, sl
 80485d2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 80485d6:	ea89 0808 	eor.w	r8, r9, r8
            rc = f2(rc);
 80485da:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 80485de:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 80485e2:	46c2      	mov	sl, r8
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80485e4:	1a58      	subs	r0, r3, r1
 80485e6:	b2c0      	uxtb	r0, r0
 80485e8:	f812 8000 	ldrb.w	r8, [r2, r0]
 80485ec:	ea8a 0a08 	eor.w	sl, sl, r8
 80485f0:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80485f4:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80485f6:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80485f8:	f890 8001 	ldrb.w	r8, [r0, #1]
 80485fc:	ea8c 0c08 	eor.w	ip, ip, r8
 8048600:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8048604:	f890 c002 	ldrb.w	ip, [r0, #2]
 8048608:	ea87 070c 	eor.w	r7, r7, ip
 804860c:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 804860e:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048610:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8048612:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048614:	459e      	cmp	lr, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8048616:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048618:	d8bf      	bhi.n	804859a <aes_set_key+0x4e>
    return 0;
 804861a:	2000      	movs	r0, #0
 804861c:	e7a8      	b.n	8048570 <aes_set_key+0x24>
        *d++ = *s++;
 804861e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8048622:	f803 5f01 	strb.w	r5, [r3, #1]!
 8048626:	e7a7      	b.n	8048578 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8048628:	2918      	cmp	r1, #24
 804862a:	d9db      	bls.n	80485e4 <aes_set_key+0x98>
 804862c:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 804862e:	bf01      	itttt	eq
 8048630:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8048634:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 8048638:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 804863a:	5da6      	ldrbeq	r6, [r4, r6]
 804863c:	e7d2      	b.n	80485e4 <aes_set_key+0x98>
 804863e:	bf00      	nop
 8048640:	08053e78 	.word	0x08053e78

08048644 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8048644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048648:	b09f      	sub	sp, #124	; 0x7c
    if( ctx->rnd )
 804864a:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 804864e:	9118      	str	r1, [sp, #96]	; 0x60
 8048650:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8048652:	2b00      	cmp	r3, #0
 8048654:	f000 8168 	beq.w	8048928 <aes_encrypt+0x2e4>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8048658:	ad1a      	add	r5, sp, #104	; 0x68
 804865a:	4601      	mov	r1, r0
 804865c:	4cb3      	ldr	r4, [pc, #716]	; (804892c <aes_encrypt+0x2e8>)
 804865e:	4628      	mov	r0, r5
 8048660:	f7ff ff32 	bl	80484c8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8048664:	f04f 0b01 	mov.w	fp, #1
    xor_block(d, k);
 8048668:	9519      	str	r5, [sp, #100]	; 0x64
 804866a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804866c:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
 8048670:	f89d 706d 	ldrb.w	r7, [sp, #109]	; 0x6d
 8048674:	f89d 8072 	ldrb.w	r8, [sp, #114]	; 0x72
 8048678:	f89d e077 	ldrb.w	lr, [sp, #119]	; 0x77
 804867c:	f814 5008 	ldrb.w	r5, [r4, r8]
 8048680:	f814 100e 	ldrb.w	r1, [r4, lr]
 8048684:	f814 200c 	ldrb.w	r2, [r4, ip]
 8048688:	f814 a007 	ldrb.w	sl, [r4, r7]
 804868c:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8048690:	930b      	str	r3, [sp, #44]	; 0x2c
 8048692:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8048696:	930c      	str	r3, [sp, #48]	; 0x30
 8048698:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 804869c:	930d      	str	r3, [sp, #52]	; 0x34
 804869e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80486a0:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80486a4:	5da6      	ldrb	r6, [r4, r6]
 80486a6:	930e      	str	r3, [sp, #56]	; 0x38
 80486a8:	5ce3      	ldrb	r3, [r4, r3]
 80486aa:	9300      	str	r3, [sp, #0]
 80486ac:	9601      	str	r6, [sp, #4]
 80486ae:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80486b2:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 80486b6:	9610      	str	r6, [sp, #64]	; 0x40
 80486b8:	f89d 6075 	ldrb.w	r6, [sp, #117]	; 0x75
 80486bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80486be:	5ce0      	ldrb	r0, [r4, r3]
 80486c0:	9611      	str	r6, [sp, #68]	; 0x44
 80486c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80486c4:	f89d 606a 	ldrb.w	r6, [sp, #106]	; 0x6a
 80486c8:	5ce3      	ldrb	r3, [r4, r3]
 80486ca:	9612      	str	r6, [sp, #72]	; 0x48
 80486cc:	5da6      	ldrb	r6, [r4, r6]
 80486ce:	9602      	str	r6, [sp, #8]
 80486d0:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 80486d4:	9613      	str	r6, [sp, #76]	; 0x4c
 80486d6:	5da6      	ldrb	r6, [r4, r6]
 80486d8:	9603      	str	r6, [sp, #12]
 80486da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80486dc:	5da6      	ldrb	r6, [r4, r6]
 80486de:	9604      	str	r6, [sp, #16]
 80486e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80486e2:	5da6      	ldrb	r6, [r4, r6]
 80486e4:	9605      	str	r6, [sp, #20]
 80486e6:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 80486ea:	9614      	str	r6, [sp, #80]	; 0x50
 80486ec:	f89d 6069 	ldrb.w	r6, [sp, #105]	; 0x69
 80486f0:	9615      	str	r6, [sp, #84]	; 0x54
 80486f2:	f89d 606e 	ldrb.w	r6, [sp, #110]	; 0x6e
 80486f6:	9616      	str	r6, [sp, #88]	; 0x58
 80486f8:	5da6      	ldrb	r6, [r4, r6]
 80486fa:	9606      	str	r6, [sp, #24]
 80486fc:	f89d 6073 	ldrb.w	r6, [sp, #115]	; 0x73
 8048700:	9617      	str	r6, [sp, #92]	; 0x5c
 8048702:	5da6      	ldrb	r6, [r4, r6]
 8048704:	9607      	str	r6, [sp, #28]
 8048706:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8048708:	5da6      	ldrb	r6, [r4, r6]
 804870a:	9608      	str	r6, [sp, #32]
 804870c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 804870e:	5da6      	ldrb	r6, [r4, r6]
 8048710:	9609      	str	r6, [sp, #36]	; 0x24
        for( r = 1 ; r < ctx->rnd ; ++r )
 8048712:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8048714:	f896 90f0 	ldrb.w	r9, [r6, #240]	; 0xf0
 8048718:	45d9      	cmp	r9, fp
 804871a:	d832      	bhi.n	8048782 <aes_encrypt+0x13e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 804871c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8048720:	9b04      	ldr	r3, [sp, #16]
 8048722:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8048726:	9b08      	ldr	r3, [sp, #32]
 8048728:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 804872c:	9b01      	ldr	r3, [sp, #4]
 804872e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8048732:	9b05      	ldr	r3, [sp, #20]
 8048734:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 8048738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804873a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804873e:	9b02      	ldr	r3, [sp, #8]
 8048740:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8048744:	9b00      	ldr	r3, [sp, #0]
 8048746:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 804874a:	9b06      	ldr	r3, [sp, #24]
 804874c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048750:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8048752:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048756:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 804875a:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 804875e:	9b03      	ldr	r3, [sp, #12]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8048760:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8048764:	9818      	ldr	r0, [sp, #96]	; 0x60
 8048766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8048768:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 804876c:	a91a      	add	r1, sp, #104	; 0x68
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804876e:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048772:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8048776:	f7ff fea7 	bl	80484c8 <copy_and_key>
 804877a:	2000      	movs	r0, #0
    }
    else
        return ( uint8_t )-1;
    return 0;
}
 804877c:	b01f      	add	sp, #124	; 0x7c
 804877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8048782:	44a4      	add	ip, r4
 8048784:	4427      	add	r7, r4
 8048786:	f89c 6100 	ldrb.w	r6, [ip, #256]	; 0x100
 804878a:	ea85 0901 	eor.w	r9, r5, r1
 804878e:	ea86 0909 	eor.w	r9, r6, r9
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8048792:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8048794:	f897 6200 	ldrb.w	r6, [r7, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8048798:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 804879c:	4051      	eors	r1, r2
 804879e:	4079      	eors	r1, r7
 80487a0:	f898 7200 	ldrb.w	r7, [r8, #512]	; 0x200
 80487a4:	4079      	eors	r1, r7
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80487a6:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80487a8:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80487ac:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
 80487b0:	ea82 020a 	eor.w	r2, r2, sl
 80487b4:	404a      	eors	r2, r1
 80487b6:	f89e 1200 	ldrb.w	r1, [lr, #512]	; 0x200
 80487ba:	404a      	eors	r2, r1
 80487bc:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80487c2:	4422      	add	r2, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80487c4:	ea89 0906 	eor.w	r9, r9, r6
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487c8:	4616      	mov	r6, r2
 80487ca:	9a00      	ldr	r2, [sp, #0]
 80487cc:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80487d0:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80487d4:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487d8:	4042      	eors	r2, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80487da:	f89c a200 	ldrb.w	sl, [ip, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487de:	404a      	eors	r2, r1
 80487e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80487e2:	ea8a 0505 	eor.w	r5, sl, r5
 80487e6:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487ea:	4421      	add	r1, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80487ec:	ea85 050a 	eor.w	r5, r5, sl
 80487f0:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80487f4:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 80487f8:	406a      	eors	r2, r5
 80487fa:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80487fe:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8048802:	4058      	eors	r0, r3
 8048804:	4050      	eors	r0, r2
 8048806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8048808:	4422      	add	r2, r4
 804880a:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 804880e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8048812:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8048814:	9901      	ldr	r1, [sp, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8048816:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 804881a:	404b      	eors	r3, r1
 804881c:	4053      	eors	r3, r2
 804881e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8048820:	4422      	add	r2, r4
 8048822:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8048826:	404b      	eors	r3, r1
 8048828:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 804882c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8048830:	404b      	eors	r3, r1
 8048832:	f896 1200 	ldrb.w	r1, [r6, #512]	; 0x200
 8048836:	404b      	eors	r3, r1
 8048838:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 804883c:	404b      	eors	r3, r1
 804883e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8048844:	4423      	add	r3, r4
 8048846:	461a      	mov	r2, r3
 8048848:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 804884c:	404b      	eors	r3, r1
 804884e:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8048852:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048856:	404b      	eors	r3, r1
 8048858:	9911      	ldr	r1, [sp, #68]	; 0x44
 804885a:	4421      	add	r1, r4
 804885c:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8048860:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048864:	4043      	eors	r3, r0
 8048866:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804886a:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 804886e:	4043      	eors	r3, r0
 8048870:	404b      	eors	r3, r1
 8048872:	9912      	ldr	r1, [sp, #72]	; 0x48
 8048874:	4421      	add	r1, r4
 8048876:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 804887a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804887e:	4043      	eors	r3, r0
 8048880:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8048884:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8048888:	4043      	eors	r3, r0
 804888a:	404b      	eors	r3, r1
 804888c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 804888e:	4421      	add	r1, r4
 8048890:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8048894:	4043      	eors	r3, r0
 8048896:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 804889a:	9805      	ldr	r0, [sp, #20]
 804889c:	9b02      	ldr	r3, [sp, #8]
 804889e:	4043      	eors	r3, r0
 80488a0:	4053      	eors	r3, r2
 80488a2:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 80488a6:	4053      	eors	r3, r2
 80488a8:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80488ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80488ae:	4423      	add	r3, r4
 80488b0:	461a      	mov	r2, r3
 80488b2:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 80488b6:	404b      	eors	r3, r1
 80488b8:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 80488bc:	404b      	eors	r3, r1
 80488be:	9915      	ldr	r1, [sp, #84]	; 0x54
 80488c0:	4421      	add	r1, r4
 80488c2:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80488c6:	4043      	eors	r3, r0
 80488c8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80488cc:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 80488d0:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80488d4:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80488d8:	4043      	eors	r3, r0
 80488da:	404b      	eors	r3, r1
 80488dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80488de:	4421      	add	r1, r4
 80488e0:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80488e4:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80488e8:	4043      	eors	r3, r0
 80488ea:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80488ee:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80488f2:	4043      	eors	r3, r0
 80488f4:	404b      	eors	r3, r1
 80488f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80488f8:	4421      	add	r1, r4
 80488fa:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80488fe:	4043      	eors	r3, r0
 8048900:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8048904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8048906:	9b06      	ldr	r3, [sp, #24]
 8048908:	4043      	eors	r3, r0
 804890a:	4053      	eors	r3, r2
 804890c:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
    xor_block(d, k);
 8048910:	9819      	ldr	r0, [sp, #100]	; 0x64
 8048912:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8048914:	4053      	eors	r3, r2
 8048916:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    xor_block(d, k);
 804891a:	f7ff fd94 	bl	8048446 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 804891e:	f10b 0301 	add.w	r3, fp, #1
 8048922:	fa5f fb83 	uxtb.w	fp, r3
 8048926:	e6a0      	b.n	804866a <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8048928:	20ff      	movs	r0, #255	; 0xff
 804892a:	e727      	b.n	804877c <aes_encrypt+0x138>
 804892c:	08053e78 	.word	0x08053e78

08048930 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8048930:	b510      	push	{r4, lr}
            memset1(ctx->X, 0, sizeof ctx->X);
 8048932:	2210      	movs	r2, #16
{
 8048934:	4604      	mov	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8048936:	2100      	movs	r1, #0
 8048938:	30f1      	adds	r0, #241	; 0xf1
 804893a:	f005 ff74 	bl	804e826 <memset1>
            ctx->M_n = 0;
 804893e:	2100      	movs	r1, #0
 8048940:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 8048944:	4620      	mov	r0, r4
 8048946:	22f0      	movs	r2, #240	; 0xf0
}
 8048948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset1(ctx->rijndael.ksch, '\0', 240);
 804894c:	f005 bf6b 	b.w	804e826 <memset1>

08048950 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8048950:	460b      	mov	r3, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8048952:	4602      	mov	r2, r0
 8048954:	2110      	movs	r1, #16
 8048956:	4618      	mov	r0, r3
 8048958:	f7ff bdf8 	b.w	804854c <aes_set_key>

0804895c <AES_CMAC_Update>:
}
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 804895c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8048960:	4604      	mov	r4, r0
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8048962:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8048966:	b085      	sub	sp, #20
 8048968:	460e      	mov	r6, r1
 804896a:	4615      	mov	r5, r2
 804896c:	f204 1801 	addw	r8, r4, #257	; 0x101
            if (ctx->M_n > 0) {
 8048970:	b310      	cbz	r0, 80489b8 <AES_CMAC_Update+0x5c>
                  mlen = MIN(16 - ctx->M_n, len);
 8048972:	f1c0 0910 	rsb	r9, r0, #16
 8048976:	4591      	cmp	r9, r2
 8048978:	464f      	mov	r7, r9
 804897a:	bf28      	it	cs
 804897c:	4617      	movcs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 804897e:	b2ba      	uxth	r2, r7
 8048980:	4440      	add	r0, r8
 8048982:	f005 ff3c 	bl	804e7fe <memcpy1>
                    ctx->M_n += mlen;
 8048986:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 804898a:	443b      	add	r3, r7
                    if (ctx->M_n < 16 || len == mlen)
 804898c:	2b0f      	cmp	r3, #15
                    ctx->M_n += mlen;
 804898e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 8048992:	d91c      	bls.n	80489ce <AES_CMAC_Update+0x72>
 8048994:	45a9      	cmp	r9, r5
 8048996:	d21a      	bcs.n	80489ce <AES_CMAC_Update+0x72>
 8048998:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 804899c:	4619      	mov	r1, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 804899e:	781a      	ldrb	r2, [r3, #0]
 80489a0:	7c18      	ldrb	r0, [r3, #16]
 80489a2:	4042      	eors	r2, r0
 80489a4:	f803 2b01 	strb.w	r2, [r3], #1
 80489a8:	4543      	cmp	r3, r8
 80489aa:	d1f8      	bne.n	804899e <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 80489ac:	4622      	mov	r2, r4
 80489ae:	4608      	mov	r0, r1
 80489b0:	f7ff fe48 	bl	8048644 <aes_encrypt>
                    data += mlen;
 80489b4:	443e      	add	r6, r7
                    len -= mlen;
 80489b6:	1bed      	subs	r5, r5, r7
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80489b8:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
            while (len > 16) {      /* not last block */
 80489bc:	2d10      	cmp	r5, #16
 80489be:	d809      	bhi.n	80489d4 <AES_CMAC_Update+0x78>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80489c0:	b2aa      	uxth	r2, r5
 80489c2:	4631      	mov	r1, r6
 80489c4:	4640      	mov	r0, r8
 80489c6:	f005 ff1a 	bl	804e7fe <memcpy1>
            ctx->M_n = len;
 80489ca:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 80489ce:	b005      	add	sp, #20
 80489d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80489d4:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
 80489d8:	1e73      	subs	r3, r6, #1
 80489da:	f106 000f 	add.w	r0, r6, #15
                    XOR(data, ctx->X);
 80489de:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80489e2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80489e6:	4283      	cmp	r3, r0
 80489e8:	ea81 010c 	eor.w	r1, r1, ip
 80489ec:	7011      	strb	r1, [r2, #0]
 80489ee:	d1f6      	bne.n	80489de <AES_CMAC_Update+0x82>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80489f0:	2210      	movs	r2, #16
 80489f2:	4639      	mov	r1, r7
 80489f4:	4668      	mov	r0, sp
 80489f6:	f005 ff02 	bl	804e7fe <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 80489fa:	4622      	mov	r2, r4
 80489fc:	4669      	mov	r1, sp
 80489fe:	4668      	mov	r0, sp
 8048a00:	f7ff fe20 	bl	8048644 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8048a04:	2210      	movs	r2, #16
 8048a06:	4669      	mov	r1, sp
 8048a08:	4638      	mov	r0, r7
 8048a0a:	f005 fef8 	bl	804e7fe <memcpy1>
                    data += 16;
 8048a0e:	3610      	adds	r6, #16
                    len -= 16;
 8048a10:	3d10      	subs	r5, #16
 8048a12:	e7d3      	b.n	80489bc <AES_CMAC_Update+0x60>

08048a14 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8048a14:	b570      	push	{r4, r5, r6, lr}
 8048a16:	b088      	sub	sp, #32
 8048a18:	460c      	mov	r4, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8048a1a:	2210      	movs	r2, #16
 8048a1c:	2100      	movs	r1, #0
{
 8048a1e:	4605      	mov	r5, r0
            memset1(K, '\0', 16);
 8048a20:	4668      	mov	r0, sp
 8048a22:	f005 ff00 	bl	804e826 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8048a26:	4622      	mov	r2, r4
 8048a28:	4669      	mov	r1, sp
 8048a2a:	4668      	mov	r0, sp
 8048a2c:	f7ff fe0a 	bl	8048644 <aes_encrypt>

            if (K[0] & 0x80) {
 8048a30:	f99d 3000 	ldrsb.w	r3, [sp]
 8048a34:	2b00      	cmp	r3, #0
 8048a36:	466a      	mov	r2, sp
 8048a38:	f10d 010f 	add.w	r1, sp, #15
 8048a3c:	da3e      	bge.n	8048abc <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8048a3e:	7813      	ldrb	r3, [r2, #0]
 8048a40:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8048a44:	005b      	lsls	r3, r3, #1
 8048a46:	b25b      	sxtb	r3, r3
 8048a48:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8048a4c:	4291      	cmp	r1, r2
 8048a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8048a52:	d1f4      	bne.n	8048a3e <AES_CMAC_Final+0x2a>
 8048a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8048a58:	005b      	lsls	r3, r3, #1
                   K[15] ^= 0x87;
 8048a5a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
            } else
                    LSHIFT(K, K);
 8048a5e:	f88d 300f 	strb.w	r3, [sp, #15]


            if (ctx->M_n == 16) {
 8048a62:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8048a66:	2b10      	cmp	r3, #16
 8048a68:	d137      	bne.n	8048ada <AES_CMAC_Final+0xc6>
 8048a6a:	f204 1201 	addw	r2, r4, #257	; 0x101
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8048a6e:	2300      	movs	r3, #0
 8048a70:	7811      	ldrb	r1, [r2, #0]
 8048a72:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8048a76:	3301      	adds	r3, #1
 8048a78:	4041      	eors	r1, r0
 8048a7a:	2b10      	cmp	r3, #16
 8048a7c:	f802 1b01 	strb.w	r1, [r2], #1
 8048a80:	d1f6      	bne.n	8048a70 <AES_CMAC_Final+0x5c>
 8048a82:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8048a86:	f204 1001 	addw	r0, r4, #257	; 0x101
 8048a8a:	4619      	mov	r1, r3
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8048a8c:	781a      	ldrb	r2, [r3, #0]
 8048a8e:	7c1e      	ldrb	r6, [r3, #16]
 8048a90:	4072      	eors	r2, r6
 8048a92:	f803 2b01 	strb.w	r2, [r3], #1
 8048a96:	4298      	cmp	r0, r3
 8048a98:	d1f8      	bne.n	8048a8c <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8048a9a:	2210      	movs	r2, #16
 8048a9c:	eb0d 0002 	add.w	r0, sp, r2
 8048aa0:	f005 fead 	bl	804e7fe <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8048aa4:	4622      	mov	r2, r4
 8048aa6:	4629      	mov	r1, r5
 8048aa8:	a804      	add	r0, sp, #16
 8048aaa:	f7ff fdcb 	bl	8048644 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8048aae:	2210      	movs	r2, #16
 8048ab0:	2100      	movs	r1, #0
 8048ab2:	4668      	mov	r0, sp
 8048ab4:	f005 feb7 	bl	804e826 <memset1>

}
 8048ab8:	b008      	add	sp, #32
 8048aba:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 8048abc:	7813      	ldrb	r3, [r2, #0]
 8048abe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8048ac2:	005b      	lsls	r3, r3, #1
 8048ac4:	b25b      	sxtb	r3, r3
 8048ac6:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8048aca:	428a      	cmp	r2, r1
 8048acc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8048ad0:	d1f4      	bne.n	8048abc <AES_CMAC_Final+0xa8>
 8048ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8048ad6:	005b      	lsls	r3, r3, #1
 8048ad8:	e7c1      	b.n	8048a5e <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 8048ada:	f99d 2000 	ldrsb.w	r2, [sp]
 8048ade:	2a00      	cmp	r2, #0
 8048ae0:	4668      	mov	r0, sp
 8048ae2:	da28      	bge.n	8048b36 <AES_CMAC_Final+0x122>
                          LSHIFT(K, K);
 8048ae4:	7802      	ldrb	r2, [r0, #0]
 8048ae6:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8048aea:	0052      	lsls	r2, r2, #1
 8048aec:	b252      	sxtb	r2, r2
 8048aee:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8048af2:	4281      	cmp	r1, r0
 8048af4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8048af8:	d1f4      	bne.n	8048ae4 <AES_CMAC_Final+0xd0>
 8048afa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8048afe:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 8048b00:	f082 0287 	eor.w	r2, r2, #135	; 0x87
                           LSHIFT(K, K);
 8048b04:	f88d 200f 	strb.w	r2, [sp, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8048b08:	18e2      	adds	r2, r4, r3
 8048b0a:	2180      	movs	r1, #128	; 0x80
 8048b0c:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8048b10:	2200      	movs	r2, #0
                   while (++ctx->M_n < 16)
 8048b12:	3301      	adds	r3, #1
 8048b14:	2b0f      	cmp	r3, #15
 8048b16:	d91d      	bls.n	8048b54 <AES_CMAC_Final+0x140>
 8048b18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8048b1c:	f204 1201 	addw	r2, r4, #257	; 0x101
                  XOR(K, ctx->M_last);
 8048b20:	2300      	movs	r3, #0
 8048b22:	7811      	ldrb	r1, [r2, #0]
 8048b24:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8048b28:	3301      	adds	r3, #1
 8048b2a:	4041      	eors	r1, r0
 8048b2c:	2b10      	cmp	r3, #16
 8048b2e:	f802 1b01 	strb.w	r1, [r2], #1
 8048b32:	d1f6      	bne.n	8048b22 <AES_CMAC_Final+0x10e>
 8048b34:	e7a5      	b.n	8048a82 <AES_CMAC_Final+0x6e>
                           LSHIFT(K, K);
 8048b36:	7802      	ldrb	r2, [r0, #0]
 8048b38:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8048b3c:	0052      	lsls	r2, r2, #1
 8048b3e:	b252      	sxtb	r2, r2
 8048b40:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8048b44:	4281      	cmp	r1, r0
 8048b46:	f800 2c01 	strb.w	r2, [r0, #-1]
 8048b4a:	d1f4      	bne.n	8048b36 <AES_CMAC_Final+0x122>
 8048b4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8048b50:	0052      	lsls	r2, r2, #1
 8048b52:	e7d7      	b.n	8048b04 <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 8048b54:	18e1      	adds	r1, r4, r3
 8048b56:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8048b5a:	e7da      	b.n	8048b12 <AES_CMAC_Final+0xfe>

08048b5c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8048b5c:	4770      	bx	lr
	...

08048b60 <GetKeyByID>:
{
 8048b60:	b530      	push	{r4, r5, lr}
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048b62:	4a0a      	ldr	r2, [pc, #40]	; (8048b8c <GetKeyByID+0x2c>)
{
 8048b64:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048b66:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8048b6a:	1915      	adds	r5, r2, r4
 8048b6c:	f895 522c 	ldrb.w	r5, [r5, #556]	; 0x22c
 8048b70:	4285      	cmp	r5, r0
 8048b72:	d105      	bne.n	8048b80 <GetKeyByID+0x20>
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8048b74:	f504 740b 	add.w	r4, r4, #556	; 0x22c
 8048b78:	4422      	add	r2, r4
 8048b7a:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8048b7c:	2000      	movs	r0, #0
}
 8048b7e:	bd30      	pop	{r4, r5, pc}
 8048b80:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8048b82:	2b18      	cmp	r3, #24
 8048b84:	d1ef      	bne.n	8048b66 <GetKeyByID+0x6>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048b86:	2003      	movs	r0, #3
 8048b88:	e7f9      	b.n	8048b7e <GetKeyByID+0x1e>
 8048b8a:	bf00      	nop
 8048b8c:	200025fc 	.word	0x200025fc

08048b90 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8048b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048b92:	461c      	mov	r4, r3
 8048b94:	b087      	sub	sp, #28
 8048b96:	4605      	mov	r5, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8048b98:	4812      	ldr	r0, [pc, #72]	; (8048be4 <ComputeCmac.part.0+0x54>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8048b9a:	460e      	mov	r6, r1
 8048b9c:	4617      	mov	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8048b9e:	f7ff fec7 	bl	8048930 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8048ba2:	4620      	mov	r0, r4
 8048ba4:	a901      	add	r1, sp, #4
 8048ba6:	f7ff ffdb 	bl	8048b60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8048baa:	4604      	mov	r4, r0
 8048bac:	b9b0      	cbnz	r0, 8048bdc <ComputeCmac.part.0+0x4c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8048bae:	9901      	ldr	r1, [sp, #4]
 8048bb0:	480c      	ldr	r0, [pc, #48]	; (8048be4 <ComputeCmac.part.0+0x54>)
 8048bb2:	3101      	adds	r1, #1
 8048bb4:	f7ff fecc 	bl	8048950 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8048bb8:	b125      	cbz	r5, 8048bc4 <ComputeCmac.part.0+0x34>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8048bba:	2210      	movs	r2, #16
 8048bbc:	4629      	mov	r1, r5
 8048bbe:	4809      	ldr	r0, [pc, #36]	; (8048be4 <ComputeCmac.part.0+0x54>)
 8048bc0:	f7ff fecc 	bl	804895c <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8048bc4:	463a      	mov	r2, r7
 8048bc6:	4631      	mov	r1, r6
 8048bc8:	4806      	ldr	r0, [pc, #24]	; (8048be4 <ComputeCmac.part.0+0x54>)
 8048bca:	f7ff fec7 	bl	804895c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8048bce:	4905      	ldr	r1, [pc, #20]	; (8048be4 <ComputeCmac.part.0+0x54>)
 8048bd0:	a802      	add	r0, sp, #8
 8048bd2:	f7ff ff1f 	bl	8048a14 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8048bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8048bd8:	9a02      	ldr	r2, [sp, #8]
 8048bda:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 8048bdc:	4620      	mov	r0, r4
 8048bde:	b007      	add	sp, #28
 8048be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8048be2:	bf00      	nop
 8048be4:	20002710 	.word	0x20002710

08048be8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8048be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8048bea:	4c34      	ldr	r4, [pc, #208]	; (8048cbc <SecureElementInit+0xd4>)
{
 8048bec:	4606      	mov	r6, r0
    uint8_t zeroKey[16] = { 0 };
 8048bee:	2210      	movs	r2, #16
 8048bf0:	2100      	movs	r1, #0
 8048bf2:	4668      	mov	r0, sp
 8048bf4:	f007 fff1 	bl	8050bda <memset>
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8048bf8:	2301      	movs	r3, #1
 8048bfa:	f884 323d 	strb.w	r3, [r4, #573]	; 0x23d
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8048bfe:	2302      	movs	r3, #2
 8048c00:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8048c04:	2303      	movs	r3, #3
 8048c06:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8048c0a:	2304      	movs	r3, #4
 8048c0c:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8048c10:	2305      	movs	r3, #5
 8048c12:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8048c16:	2306      	movs	r3, #6
 8048c18:	f884 3292 	strb.w	r3, [r4, #658]	; 0x292
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8048c1c:	2307      	movs	r3, #7
 8048c1e:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8048c22:	2308      	movs	r3, #8
 8048c24:	f884 32b4 	strb.w	r3, [r4, #692]	; 0x2b4
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8048c28:	2309      	movs	r3, #9
 8048c2a:	f884 32c5 	strb.w	r3, [r4, #709]	; 0x2c5
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8048c2e:	237f      	movs	r3, #127	; 0x7f
 8048c30:	f884 32d6 	strb.w	r3, [r4, #726]	; 0x2d6
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8048c34:	2380      	movs	r3, #128	; 0x80
 8048c36:	f884 32e7 	strb.w	r3, [r4, #743]	; 0x2e7
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8048c3a:	2381      	movs	r3, #129	; 0x81
 8048c3c:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8048c40:	2382      	movs	r3, #130	; 0x82
 8048c42:	f884 3309 	strb.w	r3, [r4, #777]	; 0x309
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8048c46:	2383      	movs	r3, #131	; 0x83
 8048c48:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8048c4c:	2384      	movs	r3, #132	; 0x84
 8048c4e:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8048c52:	2385      	movs	r3, #133	; 0x85
 8048c54:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8048c58:	2386      	movs	r3, #134	; 0x86
 8048c5a:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8048c5e:	2387      	movs	r3, #135	; 0x87
 8048c60:	f884 335e 	strb.w	r3, [r4, #862]	; 0x35e
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8048c64:	2388      	movs	r3, #136	; 0x88
 8048c66:	f884 336f 	strb.w	r3, [r4, #879]	; 0x36f
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8048c6a:	2389      	movs	r3, #137	; 0x89
 8048c6c:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8048c70:	238a      	movs	r3, #138	; 0x8a
 8048c72:	f884 3391 	strb.w	r3, [r4, #913]	; 0x391
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8048c76:	238b      	movs	r3, #139	; 0x8b
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8048c78:	2500      	movs	r5, #0
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8048c7a:	f884 33a2 	strb.w	r3, [r4, #930]	; 0x3a2
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048c7e:	2210      	movs	r2, #16
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8048c80:	238c      	movs	r3, #140	; 0x8c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048c82:	4669      	mov	r1, sp
 8048c84:	f504 706d 	add.w	r0, r4, #948	; 0x3b4
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8048c88:	f884 33b3 	strb.w	r3, [r4, #947]	; 0x3b3
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8048c8c:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048c90:	f005 fdb5 	bl	804e7fe <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8048c94:	2210      	movs	r2, #16
 8048c96:	4629      	mov	r1, r5
 8048c98:	4620      	mov	r0, r4
 8048c9a:	f005 fdc4 	bl	804e826 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8048c9e:	2210      	movs	r2, #16
 8048ca0:	4629      	mov	r1, r5
 8048ca2:	18a0      	adds	r0, r4, r2
 8048ca4:	f005 fdbf 	bl	804e826 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8048ca8:	b126      	cbz	r6, 8048cb4 <SecureElementInit+0xcc>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8048caa:	f8c4 63c4 	str.w	r6, [r4, #964]	; 0x3c4
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8048cae:	2000      	movs	r0, #0
 8048cb0:	b004      	add	sp, #16
 8048cb2:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 8048cb4:	4b02      	ldr	r3, [pc, #8]	; (8048cc0 <SecureElementInit+0xd8>)
 8048cb6:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
 8048cba:	e7f8      	b.n	8048cae <SecureElementInit+0xc6>
 8048cbc:	200025fc 	.word	0x200025fc
 8048cc0:	08048b5d 	.word	0x08048b5d

08048cc4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8048cc4:	b508      	push	{r3, lr}
    // Restore nvm context
    if( seNvmCtx != 0 )
 8048cc6:	4601      	mov	r1, r0
 8048cc8:	b130      	cbz	r0, 8048cd8 <SecureElementRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8048cca:	4804      	ldr	r0, [pc, #16]	; (8048cdc <SecureElementRestoreNvmCtx+0x18>)
 8048ccc:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8048cd0:	f005 fd95 	bl	804e7fe <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8048cd4:	2000      	movs	r0, #0
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
}
 8048cd6:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048cd8:	2002      	movs	r0, #2
 8048cda:	e7fc      	b.n	8048cd6 <SecureElementRestoreNvmCtx+0x12>
 8048cdc:	200025fc 	.word	0x200025fc

08048ce0 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8048ce0:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8048ce4:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8048ce6:	4801      	ldr	r0, [pc, #4]	; (8048cec <SecureElementGetNvmCtx+0xc>)
 8048ce8:	4770      	bx	lr
 8048cea:	bf00      	nop
 8048cec:	200025fc 	.word	0x200025fc

08048cf0 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8048cf0:	b430      	push	{r4, r5}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048cf2:	2b7e      	cmp	r3, #126	; 0x7e
{
 8048cf4:	9c02      	ldr	r4, [sp, #8]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048cf6:	d804      	bhi.n	8048d02 <SecureElementComputeAesCmac+0x12>
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8048cf8:	b131      	cbz	r1, 8048d08 <SecureElementComputeAesCmac+0x18>
 8048cfa:	b12c      	cbz	r4, 8048d08 <SecureElementComputeAesCmac+0x18>
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 8048cfc:	bc30      	pop	{r4, r5}
 8048cfe:	f7ff bf47 	b.w	8048b90 <ComputeCmac.part.0>
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048d02:	2003      	movs	r0, #3
}
 8048d04:	bc30      	pop	{r4, r5}
 8048d06:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8048d08:	2002      	movs	r0, #2
 8048d0a:	e7fb      	b.n	8048d04 <SecureElementComputeAesCmac+0x14>

08048d0c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8048d0c:	b530      	push	{r4, r5, lr}
 8048d0e:	460d      	mov	r5, r1
 8048d10:	b085      	sub	sp, #20
 8048d12:	4614      	mov	r4, r2
    if( buffer == NULL )
 8048d14:	4601      	mov	r1, r0
 8048d16:	b170      	cbz	r0, 8048d36 <SecureElementVerifyAesCmac+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8048d18:	aa04      	add	r2, sp, #16
 8048d1a:	2000      	movs	r0, #0
 8048d1c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8048d20:	9200      	str	r2, [sp, #0]
 8048d22:	462a      	mov	r2, r5
 8048d24:	f7ff ff34 	bl	8048b90 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8048d28:	b918      	cbnz	r0, 8048d32 <SecureElementVerifyAesCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8048d2a:	9803      	ldr	r0, [sp, #12]
 8048d2c:	1b00      	subs	r0, r0, r4
 8048d2e:	bf18      	it	ne
 8048d30:	2001      	movne	r0, #1
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8048d32:	b005      	add	sp, #20
 8048d34:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048d36:	2002      	movs	r0, #2
 8048d38:	e7fb      	b.n	8048d32 <SecureElementVerifyAesCmac+0x26>
	...

08048d3c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8048d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8048d40:	460e      	mov	r6, r1
 8048d42:	4614      	mov	r4, r2
 8048d44:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 8048d46:	4607      	mov	r7, r0
 8048d48:	b330      	cbz	r0, 8048d98 <SecureElementAesEncrypt+0x5c>
 8048d4a:	b32b      	cbz	r3, 8048d98 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8048d4c:	f011 010f 	ands.w	r1, r1, #15
 8048d50:	d124      	bne.n	8048d9c <SecureElementAesEncrypt+0x60>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8048d52:	22f0      	movs	r2, #240	; 0xf0
 8048d54:	4812      	ldr	r0, [pc, #72]	; (8048da0 <SecureElementAesEncrypt+0x64>)
 8048d56:	f005 fd66 	bl	804e826 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8048d5a:	a901      	add	r1, sp, #4
 8048d5c:	4620      	mov	r0, r4
 8048d5e:	f7ff feff 	bl	8048b60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8048d62:	4605      	mov	r5, r0
 8048d64:	b958      	cbnz	r0, 8048d7e <SecureElementAesEncrypt+0x42>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8048d66:	9801      	ldr	r0, [sp, #4]
 8048d68:	4a0d      	ldr	r2, [pc, #52]	; (8048da0 <SecureElementAesEncrypt+0x64>)

        uint8_t block = 0;

        while( size != 0 )
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048d6a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8048da0 <SecureElementAesEncrypt+0x64>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8048d6e:	2110      	movs	r1, #16
 8048d70:	3001      	adds	r0, #1
 8048d72:	f7ff fbeb 	bl	804854c <aes_set_key>
 8048d76:	4634      	mov	r4, r6
 8048d78:	1b30      	subs	r0, r6, r4
 8048d7a:	b2c0      	uxtb	r0, r0
        while( size != 0 )
 8048d7c:	b91c      	cbnz	r4, 8048d86 <SecureElementAesEncrypt+0x4a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8048d7e:	4628      	mov	r0, r5
 8048d80:	b003      	add	sp, #12
 8048d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048d86:	eb08 0100 	add.w	r1, r8, r0
 8048d8a:	464a      	mov	r2, r9
 8048d8c:	4438      	add	r0, r7
            size = size - 16;
 8048d8e:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048d90:	f7ff fc58 	bl	8048644 <aes_encrypt>
            size = size - 16;
 8048d94:	b2a4      	uxth	r4, r4
 8048d96:	e7ef      	b.n	8048d78 <SecureElementAesEncrypt+0x3c>
        return SECURE_ELEMENT_ERROR_NPE;
 8048d98:	2502      	movs	r5, #2
 8048d9a:	e7f0      	b.n	8048d7e <SecureElementAesEncrypt+0x42>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8048d9c:	2505      	movs	r5, #5
 8048d9e:	e7ee      	b.n	8048d7e <SecureElementAesEncrypt+0x42>
 8048da0:	2000261c 	.word	0x2000261c

08048da4 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8048da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8048da6:	460e      	mov	r6, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048da8:	491f      	ldr	r1, [pc, #124]	; (8048e28 <SecureElementSetKey.part.2+0x84>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8048daa:	2300      	movs	r3, #0
 8048dac:	460d      	mov	r5, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048dae:	011c      	lsls	r4, r3, #4
 8048db0:	18e2      	adds	r2, r4, r3
 8048db2:	440a      	add	r2, r1
 8048db4:	f892 222c 	ldrb.w	r2, [r2, #556]	; 0x22c
 8048db8:	4282      	cmp	r2, r0
 8048dba:	d12f      	bne.n	8048e1c <SecureElementSetKey.part.2+0x78>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8048dbc:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8048dc0:	2809      	cmp	r0, #9
 8048dc2:	bf9e      	ittt	ls
 8048dc4:	f240 2149 	movwls	r1, #585	; 0x249
 8048dc8:	40c1      	lsrls	r1, r0
 8048dca:	43c9      	mvnls	r1, r1
 8048dcc:	441c      	add	r4, r3
 8048dce:	f204 242d 	addw	r4, r4, #557	; 0x22d
 8048dd2:	bf94      	ite	ls
 8048dd4:	f001 0101 	andls.w	r1, r1, #1
 8048dd8:	2101      	movhi	r1, #1
 8048dda:	442c      	add	r4, r5
                uint8_t decryptedKey[16] = { 0 };
 8048ddc:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8048dde:	b9a1      	cbnz	r1, 8048e0a <SecureElementSetKey.part.2+0x66>
                uint8_t decryptedKey[16] = { 0 };
 8048de0:	4668      	mov	r0, sp
 8048de2:	f007 fefa 	bl	8050bda <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048de6:	466b      	mov	r3, sp
 8048de8:	227f      	movs	r2, #127	; 0x7f
 8048dea:	2110      	movs	r1, #16
 8048dec:	4630      	mov	r0, r6
 8048dee:	f7ff ffa5 	bl	8048d3c <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048df2:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048df4:	4606      	mov	r6, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048df6:	4669      	mov	r1, sp
 8048df8:	4620      	mov	r0, r4
 8048dfa:	f005 fd00 	bl	804e7fe <memcpy1>
                SeNvmCtxChanged( );
 8048dfe:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048e02:	4798      	blx	r3
}
 8048e04:	4630      	mov	r0, r6
 8048e06:	b004      	add	sp, #16
 8048e08:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8048e0a:	4631      	mov	r1, r6
 8048e0c:	4620      	mov	r0, r4
 8048e0e:	f005 fcf6 	bl	804e7fe <memcpy1>
                SeNvmCtxChanged( );
 8048e12:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048e16:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8048e18:	2600      	movs	r6, #0
 8048e1a:	e7f3      	b.n	8048e04 <SecureElementSetKey.part.2+0x60>
 8048e1c:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8048e1e:	2b18      	cmp	r3, #24
 8048e20:	d1c5      	bne.n	8048dae <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048e22:	2603      	movs	r6, #3
 8048e24:	e7ee      	b.n	8048e04 <SecureElementSetKey.part.2+0x60>
 8048e26:	bf00      	nop
 8048e28:	200025fc 	.word	0x200025fc

08048e2c <SecureElementSetKey>:
    if( key == NULL )
 8048e2c:	b109      	cbz	r1, 8048e32 <SecureElementSetKey+0x6>
 8048e2e:	f7ff bfb9 	b.w	8048da4 <SecureElementSetKey.part.2>
}
 8048e32:	2002      	movs	r0, #2
 8048e34:	4770      	bx	lr

08048e36 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8048e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048e38:	4607      	mov	r7, r0
 8048e3a:	b085      	sub	sp, #20
 8048e3c:	4614      	mov	r4, r2
 8048e3e:	461d      	mov	r5, r3
    if( input == NULL )
 8048e40:	460e      	mov	r6, r1
 8048e42:	b1d9      	cbz	r1, 8048e7c <SecureElementDeriveAndStoreKey+0x46>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8048e44:	2210      	movs	r2, #16
 8048e46:	2100      	movs	r1, #0
 8048e48:	4668      	mov	r0, sp
 8048e4a:	f007 fec6 	bl	8050bda <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8048e4e:	2d7f      	cmp	r5, #127	; 0x7f
 8048e50:	d107      	bne.n	8048e62 <SecureElementDeriveAndStoreKey+0x2c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8048e52:	b924      	cbnz	r4, 8048e5e <SecureElementDeriveAndStoreKey+0x28>
 8048e54:	f417 0f7f 	tst.w	r7, #16711680	; 0xff0000
 8048e58:	d103      	bne.n	8048e62 <SecureElementDeriveAndStoreKey+0x2c>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048e5a:	2003      	movs	r0, #3
 8048e5c:	e00c      	b.n	8048e78 <SecureElementDeriveAndStoreKey+0x42>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8048e5e:	2c02      	cmp	r4, #2
 8048e60:	d0fb      	beq.n	8048e5a <SecureElementDeriveAndStoreKey+0x24>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8048e62:	466b      	mov	r3, sp
 8048e64:	4622      	mov	r2, r4
 8048e66:	2110      	movs	r1, #16
 8048e68:	4630      	mov	r0, r6
 8048e6a:	f7ff ff67 	bl	8048d3c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8048e6e:	b918      	cbnz	r0, 8048e78 <SecureElementDeriveAndStoreKey+0x42>
 8048e70:	4669      	mov	r1, sp
 8048e72:	4628      	mov	r0, r5
 8048e74:	f7ff ff96 	bl	8048da4 <SecureElementSetKey.part.2>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8048e78:	b005      	add	sp, #20
 8048e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048e7c:	2002      	movs	r0, #2
 8048e7e:	e7fb      	b.n	8048e78 <SecureElementDeriveAndStoreKey+0x42>

08048e80 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8048e80:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 8048e82:	4604      	mov	r4, r0
 8048e84:	b128      	cbz	r0, 8048e92 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 8048e86:	4b04      	ldr	r3, [pc, #16]	; (8048e98 <SecureElementRandomNumber+0x18>)
 8048e88:	69db      	ldr	r3, [r3, #28]
 8048e8a:	4798      	blx	r3
 8048e8c:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8048e8e:	2000      	movs	r0, #0
}
 8048e90:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048e92:	2002      	movs	r0, #2
 8048e94:	e7fc      	b.n	8048e90 <SecureElementRandomNumber+0x10>
 8048e96:	bf00      	nop
 8048e98:	08053dd0 	.word	0x08053dd0

08048e9c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8048e9c:	b510      	push	{r4, lr}
    if( devEui == NULL )
 8048e9e:	4601      	mov	r1, r0
 8048ea0:	b148      	cbz	r0, 8048eb6 <SecureElementSetDevEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8048ea2:	4c06      	ldr	r4, [pc, #24]	; (8048ebc <SecureElementSetDevEui+0x20>)
 8048ea4:	2210      	movs	r2, #16
 8048ea6:	4620      	mov	r0, r4
 8048ea8:	f005 fca9 	bl	804e7fe <memcpy1>
    SeNvmCtxChanged( );
 8048eac:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8048eb0:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8048eb2:	2000      	movs	r0, #0
}
 8048eb4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048eb6:	2002      	movs	r0, #2
 8048eb8:	e7fc      	b.n	8048eb4 <SecureElementSetDevEui+0x18>
 8048eba:	bf00      	nop
 8048ebc:	200025fc 	.word	0x200025fc

08048ec0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8048ec0:	4800      	ldr	r0, [pc, #0]	; (8048ec4 <SecureElementGetDevEui+0x4>)
 8048ec2:	4770      	bx	lr
 8048ec4:	200025fc 	.word	0x200025fc

08048ec8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8048ec8:	b510      	push	{r4, lr}
    if( joinEui == NULL )
 8048eca:	4601      	mov	r1, r0
 8048ecc:	b148      	cbz	r0, 8048ee2 <SecureElementSetJoinEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 8048ece:	4c06      	ldr	r4, [pc, #24]	; (8048ee8 <SecureElementSetJoinEui+0x20>)
 8048ed0:	2210      	movs	r2, #16
 8048ed2:	18a0      	adds	r0, r4, r2
 8048ed4:	f005 fc93 	bl	804e7fe <memcpy1>
    SeNvmCtxChanged( );
 8048ed8:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8048edc:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8048ede:	2000      	movs	r0, #0
}
 8048ee0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048ee2:	2002      	movs	r0, #2
 8048ee4:	e7fc      	b.n	8048ee0 <SecureElementSetJoinEui+0x18>
 8048ee6:	bf00      	nop
 8048ee8:	200025fc 	.word	0x200025fc

08048eec <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8048eec:	4800      	ldr	r0, [pc, #0]	; (8048ef0 <SecureElementGetJoinEui+0x4>)
 8048eee:	4770      	bx	lr
 8048ef0:	2000260c 	.word	0x2000260c

08048ef4 <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8048ef4:	4b05      	ldr	r3, [pc, #20]	; (8048f0c <OnRadioRxError+0x18>)
 8048ef6:	781a      	ldrb	r2, [r3, #0]
 8048ef8:	f042 0202 	orr.w	r2, r2, #2
 8048efc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8048efe:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048f02:	b113      	cbz	r3, 8048f0a <OnRadioRxError+0x16>
 8048f04:	68db      	ldr	r3, [r3, #12]
 8048f06:	b103      	cbz	r3, 8048f0a <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048f08:	4718      	bx	r3
    }
}
 8048f0a:	4770      	bx	lr
 8048f0c:	200029c4 	.word	0x200029c4

08048f10 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048f10:	4b05      	ldr	r3, [pc, #20]	; (8048f28 <UpdateRxSlotIdleState+0x18>)
 8048f12:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048f16:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8048f1a:	2a02      	cmp	r2, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8048f1c:	bf18      	it	ne
 8048f1e:	2206      	movne	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8048f20:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8048f24:	4770      	bx	lr
 8048f26:	bf00      	nop
 8048f28:	200029c4 	.word	0x200029c4

08048f2c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8048f2c:	4b10      	ldr	r3, [pc, #64]	; (8048f70 <StopRetransmission+0x44>)
 8048f2e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8048f32:	0792      	lsls	r2, r2, #30
 8048f34:	d503      	bpl.n	8048f3e <StopRetransmission+0x12>
 8048f36:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 8048f3a:	2a01      	cmp	r2, #1
 8048f3c:	d909      	bls.n	8048f52 <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8048f3e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048f42:	f892 10f2 	ldrb.w	r1, [r2, #242]	; 0xf2
 8048f46:	b121      	cbz	r1, 8048f52 <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8048f48:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8048f4c:	3101      	adds	r1, #1
 8048f4e:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8048f52:	2200      	movs	r2, #0
 8048f54:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 8048f58:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 8048f5c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048f60:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8048f64:	f022 0202 	bic.w	r2, r2, #2
 8048f68:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 8048f6c:	2001      	movs	r0, #1
 8048f6e:	4770      	bx	lr
 8048f70:	200029c4 	.word	0x200029c4

08048f74 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8048f74:	4b03      	ldr	r3, [pc, #12]	; (8048f84 <CallNvmCtxCallback+0x10>)
 8048f76:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048f7a:	b113      	cbz	r3, 8048f82 <CallNvmCtxCallback+0xe>
 8048f7c:	689b      	ldr	r3, [r3, #8]
 8048f7e:	b103      	cbz	r3, 8048f82 <CallNvmCtxCallback+0xe>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8048f80:	4718      	bx	r3
    }
}
 8048f82:	4770      	bx	lr
 8048f84:	200029c4 	.word	0x200029c4

08048f88 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8048f88:	2000      	movs	r0, #0
 8048f8a:	f7ff bff3 	b.w	8048f74 <CallNvmCtxCallback>

08048f8e <EventRegionNvmCtxChanged>:
}

static void EventRegionNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8048f8e:	2001      	movs	r0, #1
 8048f90:	f7ff bff0 	b.w	8048f74 <CallNvmCtxCallback>

08048f94 <EventCryptoNvmCtxChanged>:
}

static void EventCryptoNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8048f94:	2002      	movs	r0, #2
 8048f96:	f7ff bfed 	b.w	8048f74 <CallNvmCtxCallback>

08048f9a <EventSecureElementNvmCtxChanged>:
}

static void EventSecureElementNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8048f9a:	2003      	movs	r0, #3
 8048f9c:	f7ff bfea 	b.w	8048f74 <CallNvmCtxCallback>

08048fa0 <EventCommandsNvmCtxChanged>:
}

static void EventCommandsNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8048fa0:	2004      	movs	r0, #4
 8048fa2:	f7ff bfe7 	b.w	8048f74 <CallNvmCtxCallback>

08048fa6 <EventClassBNvmCtxChanged>:
}

static void EventClassBNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8048fa6:	2005      	movs	r0, #5
 8048fa8:	f7ff bfe4 	b.w	8048f74 <CallNvmCtxCallback>

08048fac <EventConfirmQueueNvmCtxChanged>:
}

static void EventConfirmQueueNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8048fac:	2006      	movs	r0, #6
 8048fae:	f7ff bfe1 	b.w	8048f74 <CallNvmCtxCallback>
	...

08048fb4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8048fb4:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048fb6:	4b0d      	ldr	r3, [pc, #52]	; (8048fec <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 8048fb8:	f88d 0001 	strb.w	r0, [sp, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048fbc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048fc0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8048fc4:	f88d 2002 	strb.w	r2, [sp, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8048fc8:	220d      	movs	r2, #13
 8048fca:	f88d 2000 	strb.w	r2, [sp]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8048fce:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8048fd2:	b112      	cbz	r2, 8048fda <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8048fd4:	220e      	movs	r2, #14
 8048fd6:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048fda:	4669      	mov	r1, sp
 8048fdc:	7818      	ldrb	r0, [r3, #0]
 8048fde:	f003 fd26 	bl	804ca2e <RegionGetPhyParam>
}
 8048fe2:	b2c0      	uxtb	r0, r0
 8048fe4:	b003      	add	sp, #12
 8048fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8048fea:	bf00      	nop
 8048fec:	200029c4 	.word	0x200029c4

08048ff0 <OnAckTimeoutTimerEvent>:
{
 8048ff0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8048ff2:	4c10      	ldr	r4, [pc, #64]	; (8049034 <OnAckTimeoutTimerEvent+0x44>)
 8048ff4:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 8048ff8:	f005 fb12 	bl	804e620 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8048ffc:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8049000:	4623      	mov	r3, r4
 8049002:	b112      	cbz	r2, 804900a <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 8049004:	2201      	movs	r2, #1
 8049006:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804900a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 804900e:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8049012:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8049014:	bf02      	ittt	eq
 8049016:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 804901a:	f042 0220 	orreq.w	r2, r2, #32
 804901e:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8049022:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8049026:	b123      	cbz	r3, 8049032 <OnAckTimeoutTimerEvent+0x42>
 8049028:	68db      	ldr	r3, [r3, #12]
 804902a:	b113      	cbz	r3, 8049032 <OnAckTimeoutTimerEvent+0x42>
}
 804902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8049030:	4718      	bx	r3
}
 8049032:	bd10      	pop	{r4, pc}
 8049034:	200029c4 	.word	0x200029c4

08049038 <PrepareRxDoneAbort>:
{
 8049038:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 804903a:	4c0d      	ldr	r4, [pc, #52]	; (8049070 <PrepareRxDoneAbort+0x38>)
	PRINTF("AbortRX\r\n");
 804903c:	480d      	ldr	r0, [pc, #52]	; (8049074 <PrepareRxDoneAbort+0x3c>)
 804903e:	f005 fb79 	bl	804e734 <TraceSend>
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8049042:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8049046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804904a:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 804904e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8049052:	b112      	cbz	r2, 804905a <PrepareRxDoneAbort+0x22>
        OnAckTimeoutTimerEvent( NULL );
 8049054:	2000      	movs	r0, #0
 8049056:	f7ff ffcb 	bl	8048ff0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 804905a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 804905e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8049062:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 8049066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 804906a:	f7ff bf51 	b.w	8048f10 <UpdateRxSlotIdleState>
 804906e:	bf00      	nop
 8049070:	200029c4 	.word	0x200029c4
 8049074:	08054332 	.word	0x08054332

08049078 <HandleRadioRxErrorTimeout>:
{
 8049078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804907c:	4c2a      	ldr	r4, [pc, #168]	; (8049128 <HandleRadioRxErrorTimeout+0xb0>)
 804907e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049082:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049086:	2b02      	cmp	r3, #2
{
 8049088:	4607      	mov	r7, r0
 804908a:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804908c:	d002      	beq.n	8049094 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 804908e:	4b27      	ldr	r3, [pc, #156]	; (804912c <HandleRadioRxErrorTimeout+0xb4>)
 8049090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049092:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8049094:	f002 fd3e 	bl	804bb14 <LoRaMacClassBIsBeaconExpected>
 8049098:	4605      	mov	r5, r0
 804909a:	b128      	cbz	r0, 80490a8 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 804909c:	2002      	movs	r0, #2
 804909e:	f002 fd2f 	bl	804bb00 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80490a2:	2000      	movs	r0, #0
 80490a4:	f002 fd31 	bl	804bb0a <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80490a8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80490ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80490b0:	2b01      	cmp	r3, #1
 80490b2:	d117      	bne.n	80490e4 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80490b4:	f002 fd30 	bl	804bb18 <LoRaMacClassBIsPingExpected>
 80490b8:	4680      	mov	r8, r0
 80490ba:	b130      	cbz	r0, 80490ca <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80490bc:	2000      	movs	r0, #0
 80490be:	f002 fd20 	bl	804bb02 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80490c2:	2000      	movs	r0, #0
 80490c4:	f002 fd22 	bl	804bb0c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80490c8:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80490ca:	f002 fd27 	bl	804bb1c <LoRaMacClassBIsMulticastExpected>
 80490ce:	b148      	cbz	r0, 80490e4 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80490d0:	2000      	movs	r0, #0
 80490d2:	f002 fd17 	bl	804bb04 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80490d6:	2000      	movs	r0, #0
 80490d8:	f002 fd19 	bl	804bb0e <LoRaMacClassBMulticastSlotTimerEvent>
}
 80490dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 80490e0:	f7ff bf16 	b.w	8048f10 <UpdateRxSlotIdleState>
    if( classBRx == false )
 80490e4:	2d00      	cmp	r5, #0
 80490e6:	d1f9      	bne.n	80490dc <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80490e8:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 80490ec:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80490f0:	b932      	cbnz	r2, 8049100 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 80490f2:	b10b      	cbz	r3, 80490f8 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80490f4:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80490f8:	4638      	mov	r0, r7
 80490fa:	f002 fecf 	bl	804be9c <LoRaMacConfirmQueueSetStatusCmn>
 80490fe:	e7ed      	b.n	80490dc <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8049100:	b10b      	cbz	r3, 8049106 <HandleRadioRxErrorTimeout+0x8e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8049102:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8049106:	4630      	mov	r0, r6
 8049108:	f002 fec8 	bl	804be9c <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804910c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049110:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049114:	2b02      	cmp	r3, #2
                MacCtx.MacFlags.Bits.MacDone = 1;
 8049116:	bf1e      	ittt	ne
 8049118:	f894 3485 	ldrbne.w	r3, [r4, #1157]	; 0x485
 804911c:	f043 0320 	orrne.w	r3, r3, #32
 8049120:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
 8049124:	e7da      	b.n	80490dc <HandleRadioRxErrorTimeout+0x64>
 8049126:	bf00      	nop
 8049128:	200029c4 	.word	0x200029c4
 804912c:	08053dd0 	.word	0x08053dd0

08049130 <ResetMacParameters>:
{
 8049130:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8049132:	4c30      	ldr	r4, [pc, #192]	; (80491f4 <ResetMacParameters+0xc4>)
 8049134:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049138:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 804913a:	2601      	movs	r6, #1
    MacCtx.ChannelsNbTransCounter = 0;
 804913c:	f44f 7280 	mov.w	r2, #256	; 0x100
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8049140:	f883 51d4 	strb.w	r5, [r3, #468]	; 0x1d4
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8049144:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
    MacCtx.ChannelsNbTransCounter = 0;
 8049148:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    MacCtx.AckTimeoutRetries = 1;
 804914c:	f884 6416 	strb.w	r6, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetry = false;
 8049150:	f884 5417 	strb.w	r5, [r4, #1047]	; 0x417
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8049154:	791a      	ldrb	r2, [r3, #4]
 8049156:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804915a:	795a      	ldrb	r2, [r3, #5]
 804915c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8049160:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    MacCtx.NvmCtx->MaxDCycle = 0;
 8049164:	f883 513c 	strb.w	r5, [r3, #316]	; 0x13c
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8049168:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804916c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8049170:	c903      	ldmia	r1, {r0, r1}
 8049172:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8049176:	f8a3 61c2 	strh.w	r6, [r3, #450]	; 0x1c2
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804917a:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804917e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8049182:	c903      	ldmia	r1, {r0, r1}
 8049184:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8049188:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 804918c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8049190:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8049194:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8049198:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
    params.NvmCtx = NULL;
 804919c:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 804919e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80491a0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80491a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80491a6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    MacCtx.NodeAckRequested = false;
 80491aa:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    MacCtx.NvmCtx->SrvAckRequested = false;
 80491ae:	f883 51c0 	strb.w	r5, [r3, #448]	; 0x1c0
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80491b2:	7818      	ldrb	r0, [r3, #0]
    params.NvmCtx = NULL;
 80491b4:	f841 5d08 	str.w	r5, [r1, #-8]!
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80491b8:	f88d 6004 	strb.w	r6, [sp, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80491bc:	f003 fc47 	bl	804ca4e <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80491c0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.Channel = 0;
 80491c4:	f884 5419 	strb.w	r5, [r4, #1049]	; 0x419
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80491c8:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80491cc:	f884 53d0 	strb.w	r5, [r4, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80491d0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80491d4:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80491d8:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80491dc:	f884 23e0 	strb.w	r2, [r4, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80491e0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80491e4:	f884 33e1 	strb.w	r3, [r4, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80491e8:	f884 53e2 	strb.w	r5, [r4, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80491ec:	f884 63e3 	strb.w	r6, [r4, #995]	; 0x3e3
}
 80491f0:	b002      	add	sp, #8
 80491f2:	bd70      	pop	{r4, r5, r6, pc}
 80491f4:	200029c4 	.word	0x200029c4

080491f8 <OpenContinuousRxCWindow>:
{
 80491f8:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80491fa:	4c0d      	ldr	r4, [pc, #52]	; (8049230 <OpenContinuousRxCWindow+0x38>)
 80491fc:	2302      	movs	r3, #2
 80491fe:	f884 33f7 	strb.w	r3, [r4, #1015]	; 0x3f7
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8049202:	2301      	movs	r3, #1
 8049204:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8049208:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804920c:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8049210:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8049214:	7818      	ldrb	r0, [r3, #0]
 8049216:	f003 fc4c 	bl	804cab2 <RegionRxConfig>
 804921a:	b138      	cbz	r0, 804922c <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 804921c:	4b05      	ldr	r3, [pc, #20]	; (8049234 <OpenContinuousRxCWindow+0x3c>)
 804921e:	2000      	movs	r0, #0
 8049220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049222:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8049224:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 8049228:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 804922c:	bd10      	pop	{r4, pc}
 804922e:	bf00      	nop
 8049230:	200029c4 	.word	0x200029c4
 8049234:	08053dd0 	.word	0x08053dd0

08049238 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8049238:	4b0d      	ldr	r3, [pc, #52]	; (8049270 <OnRadioRxTimeout+0x38>)
{
 804923a:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 804923c:	781a      	ldrb	r2, [r3, #0]
 804923e:	f042 0201 	orr.w	r2, r2, #1
 8049242:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8049244:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8049248:	b113      	cbz	r3, 8049250 <OnRadioRxTimeout+0x18>
 804924a:	68db      	ldr	r3, [r3, #12]
 804924c:	b103      	cbz	r3, 8049250 <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804924e:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8049250:	4668      	mov	r0, sp
 8049252:	f005 f934 	bl	804e4be <SysTimeGetMcuTime>
 8049256:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804925a:	9900      	ldr	r1, [sp, #0]
 804925c:	4805      	ldr	r0, [pc, #20]	; (8049274 <OnRadioRxTimeout+0x3c>)
 804925e:	f005 fa69 	bl	804e734 <TraceSend>
 8049262:	4805      	ldr	r0, [pc, #20]	; (8049278 <OnRadioRxTimeout+0x40>)
}
 8049264:	b003      	add	sp, #12
 8049266:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 804926a:	f005 ba63 	b.w	804e734 <TraceSend>
 804926e:	bf00      	nop
 8049270:	200029c4 	.word	0x200029c4
 8049274:	0805433c 	.word	0x0805433c
 8049278:	08054347 	.word	0x08054347

0804927c <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 804927c:	4b0d      	ldr	r3, [pc, #52]	; (80492b4 <OnRadioTxTimeout+0x38>)
{
 804927e:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8049280:	781a      	ldrb	r2, [r3, #0]
 8049282:	f042 0204 	orr.w	r2, r2, #4
 8049286:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8049288:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 804928c:	b113      	cbz	r3, 8049294 <OnRadioTxTimeout+0x18>
 804928e:	68db      	ldr	r3, [r3, #12]
 8049290:	b103      	cbz	r3, 8049294 <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8049292:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 8049294:	4668      	mov	r0, sp
 8049296:	f005 f912 	bl	804e4be <SysTimeGetMcuTime>
 804929a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804929e:	9900      	ldr	r1, [sp, #0]
 80492a0:	4805      	ldr	r0, [pc, #20]	; (80492b8 <OnRadioTxTimeout+0x3c>)
 80492a2:	f005 fa47 	bl	804e734 <TraceSend>
 80492a6:	4805      	ldr	r0, [pc, #20]	; (80492bc <OnRadioTxTimeout+0x40>)
}
 80492a8:	b003      	add	sp, #12
 80492aa:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80492ae:	f005 ba41 	b.w	804e734 <TraceSend>
 80492b2:	bf00      	nop
 80492b4:	200029c4 	.word	0x200029c4
 80492b8:	0805433c 	.word	0x0805433c
 80492bc:	08054357 	.word	0x08054357

080492c0 <OnRadioRxDone>:
{
 80492c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80492c4:	4616      	mov	r6, r2
 80492c6:	461d      	mov	r5, r3
 80492c8:	4680      	mov	r8, r0
 80492ca:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80492cc:	f005 f9e1 	bl	804e692 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 80492d0:	4b0f      	ldr	r3, [pc, #60]	; (8049310 <OnRadioRxDone+0x50>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80492d2:	4c10      	ldr	r4, [pc, #64]	; (8049314 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80492d4:	781a      	ldrb	r2, [r3, #0]
    RxDoneParams.Size = size;
 80492d6:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80492d8:	f042 0208 	orr.w	r2, r2, #8
 80492dc:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80492de:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
    RxDoneParams.Rssi = rssi;
 80492e2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Payload = payload;
 80492e4:	e9c4 0800 	strd	r0, r8, [r4]
    RxDoneParams.Snr = snr;
 80492e8:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80492ea:	b113      	cbz	r3, 80492f2 <OnRadioRxDone+0x32>
 80492ec:	68db      	ldr	r3, [r3, #12]
 80492ee:	b103      	cbz	r3, 80492f2 <OnRadioRxDone+0x32>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80492f0:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 80492f2:	4668      	mov	r0, sp
 80492f4:	f005 f8e3 	bl	804e4be <SysTimeGetMcuTime>
 80492f8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80492fc:	9900      	ldr	r1, [sp, #0]
 80492fe:	4806      	ldr	r0, [pc, #24]	; (8049318 <OnRadioRxDone+0x58>)
 8049300:	f005 fa18 	bl	804e734 <TraceSend>
 8049304:	4805      	ldr	r0, [pc, #20]	; (804931c <OnRadioRxDone+0x5c>)
}
 8049306:	b002      	add	sp, #8
 8049308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 804930c:	f005 ba12 	b.w	804e734 <TraceSend>
 8049310:	200029c4 	.word	0x200029c4
 8049314:	20005ff0 	.word	0x20005ff0
 8049318:	0805433c 	.word	0x0805433c
 804931c:	08054367 	.word	0x08054367

08049320 <OnRadioTxDone>:
{
 8049320:	b530      	push	{r4, r5, lr}
 8049322:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8049324:	f005 f9b5 	bl	804e692 <TimerGetCurrentTime>
 8049328:	4b12      	ldr	r3, [pc, #72]	; (8049374 <OnRadioTxDone+0x54>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 804932a:	4c13      	ldr	r4, [pc, #76]	; (8049378 <OnRadioTxDone+0x58>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 804932c:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 804932e:	466d      	mov	r5, sp
 8049330:	4628      	mov	r0, r5
 8049332:	f005 f8a0 	bl	804e476 <SysTimeGet>
 8049336:	e895 0003 	ldmia.w	r5, {r0, r1}
 804933a:	f504 734f 	add.w	r3, r4, #828	; 0x33c
 804933e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8049342:	7823      	ldrb	r3, [r4, #0]
 8049344:	f043 0310 	orr.w	r3, r3, #16
 8049348:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804934a:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
 804934e:	b113      	cbz	r3, 8049356 <OnRadioTxDone+0x36>
 8049350:	68db      	ldr	r3, [r3, #12]
 8049352:	b103      	cbz	r3, 8049356 <OnRadioTxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8049354:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8049356:	a802      	add	r0, sp, #8
 8049358:	f005 f8b1 	bl	804e4be <SysTimeGetMcuTime>
 804935c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8049360:	9902      	ldr	r1, [sp, #8]
 8049362:	4806      	ldr	r0, [pc, #24]	; (804937c <OnRadioTxDone+0x5c>)
 8049364:	f005 f9e6 	bl	804e734 <TraceSend>
 8049368:	4805      	ldr	r0, [pc, #20]	; (8049380 <OnRadioTxDone+0x60>)
}
 804936a:	b005      	add	sp, #20
 804936c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8049370:	f005 b9e0 	b.w	804e734 <TraceSend>
 8049374:	20005fec 	.word	0x20005fec
 8049378:	200029c4 	.word	0x200029c4
 804937c:	0805433c 	.word	0x0805433c
 8049380:	08054374 	.word	0x08054374

08049384 <SwitchClass>:
{
 8049384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8049386:	4e3d      	ldr	r6, [pc, #244]	; (804947c <SwitchClass+0xf8>)
 8049388:	f8d6 4488 	ldr.w	r4, [r6, #1160]	; 0x488
 804938c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 8049390:	2b01      	cmp	r3, #1
{
 8049392:	4607      	mov	r7, r0
 8049394:	4635      	mov	r5, r6
    switch( MacCtx.NvmCtx->DeviceClass )
 8049396:	d010      	beq.n	80493ba <SwitchClass+0x36>
 8049398:	d303      	bcc.n	80493a2 <SwitchClass+0x1e>
 804939a:	2b02      	cmp	r3, #2
 804939c:	d064      	beq.n	8049468 <SwitchClass+0xe4>
 804939e:	2003      	movs	r0, #3
 80493a0:	e05c      	b.n	804945c <SwitchClass+0xd8>
            if( deviceClass == CLASS_A )
 80493a2:	b940      	cbnz	r0, 80493b6 <SwitchClass+0x32>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80493a4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80493a8:	f504 748e 	add.w	r4, r4, #284	; 0x11c
 80493ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80493b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80493b4:	e7f3      	b.n	804939e <SwitchClass+0x1a>
            if( deviceClass == CLASS_B )
 80493b6:	2801      	cmp	r0, #1
 80493b8:	d108      	bne.n	80493cc <SwitchClass+0x48>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80493ba:	f002 fbb6 	bl	804bb2a <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80493be:	2800      	cmp	r0, #0
 80493c0:	d14c      	bne.n	804945c <SwitchClass+0xd8>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80493c2:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80493c6:	f883 70f0 	strb.w	r7, [r3, #240]	; 0xf0
 80493ca:	e047      	b.n	804945c <SwitchClass+0xd8>
            if( deviceClass == CLASS_C )
 80493cc:	2802      	cmp	r0, #2
 80493ce:	d1e6      	bne.n	804939e <SwitchClass+0x1a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80493d0:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80493d4:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80493d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80493dc:	f506 7679 	add.w	r6, r6, #996	; 0x3e4
 80493e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80493e2:	f8dc 3000 	ldr.w	r3, [ip]
 80493e6:	f846 3910 	str.w	r3, [r6], #-16
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80493ea:	2128      	movs	r1, #40	; 0x28
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80493ec:	f885 73f7 	strb.w	r7, [r5, #1015]	; 0x3f7
 80493f0:	2300      	movs	r3, #0
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80493f2:	fb01 4203 	mla	r2, r1, r3, r4
 80493f6:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 80493fa:	b388      	cbz	r0, 8049460 <SwitchClass+0xdc>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80493fc:	6e53      	ldr	r3, [r2, #100]	; 0x64
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80493fe:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8049402:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8049406:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 804940a:	f895 2419 	ldrb.w	r2, [r5, #1049]	; 0x419
 804940e:	f885 23e4 	strb.w	r2, [r5, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8049412:	f8c5 33e8 	str.w	r3, [r5, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049416:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 804941a:	f885 33f4 	strb.w	r3, [r5, #1012]	; 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 804941e:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8049422:	f885 33f5 	strb.w	r3, [r5, #1013]	; 0x3f5
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8049426:	2303      	movs	r3, #3
 8049428:	f885 33f7 	strb.w	r3, [r5, #1015]	; 0x3f7
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 804942c:	2301      	movs	r3, #1
 804942e:	f885 33f6 	strb.w	r3, [r5, #1014]	; 0x3f6
                Radio.Sleep( );
 8049432:	4b13      	ldr	r3, [pc, #76]	; (8049480 <SwitchClass+0xfc>)
                MacCtx.NodeAckRequested = false;
 8049434:	2400      	movs	r4, #0
                Radio.Sleep( );
 8049436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                MacCtx.NodeAckRequested = false;
 8049438:	f885 4418 	strb.w	r4, [r5, #1048]	; 0x418
                Radio.Sleep( );
 804943c:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804943e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049442:	7818      	ldrb	r0, [r3, #0]
 8049444:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049448:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 804944c:	9600      	str	r6, [sp, #0]
 804944e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049452:	f003 fb1f 	bl	804ca94 <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8049456:	f7ff fecf 	bl	80491f8 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 804945a:	4620      	mov	r0, r4
}
 804945c:	b003      	add	sp, #12
 804945e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8049460:	3301      	adds	r3, #1
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8049462:	2b04      	cmp	r3, #4
 8049464:	d1c5      	bne.n	80493f2 <SwitchClass+0x6e>
 8049466:	e7e4      	b.n	8049432 <SwitchClass+0xae>
            if( deviceClass == CLASS_A )
 8049468:	2800      	cmp	r0, #0
 804946a:	d198      	bne.n	804939e <SwitchClass+0x1a>
                Radio.Sleep( );
 804946c:	4b04      	ldr	r3, [pc, #16]	; (8049480 <SwitchClass+0xfc>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 804946e:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                Radio.Sleep( );
 8049472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049474:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8049476:	4638      	mov	r0, r7
 8049478:	e7f0      	b.n	804945c <SwitchClass+0xd8>
 804947a:	bf00      	nop
 804947c:	200029c4 	.word	0x200029c4
 8049480:	08053dd0 	.word	0x08053dd0

08049484 <RxWindowSetup.constprop.6>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8049484:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 8049486:	4e0d      	ldr	r6, [pc, #52]	; (80494bc <RxWindowSetup.constprop.6+0x38>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8049488:	4c0d      	ldr	r4, [pc, #52]	; (80494c0 <RxWindowSetup.constprop.6+0x3c>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 804948a:	460d      	mov	r5, r1
    TimerStop( rxTimer );
 804948c:	f005 f8c8 	bl	804e620 <TimerStop>
    Radio.Standby( );
 8049490:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8049492:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8049494:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049498:	f204 4224 	addw	r2, r4, #1060	; 0x424
 804949c:	4629      	mov	r1, r5
 804949e:	7818      	ldrb	r0, [r3, #0]
 80494a0:	f003 fb07 	bl	804cab2 <RegionRxConfig>
 80494a4:	b140      	cbz	r0, 80494b8 <RxWindowSetup.constprop.6+0x34>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80494a6:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 80494aa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80494ac:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 80494b0:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80494b2:	7ceb      	ldrb	r3, [r5, #19]
 80494b4:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 80494b8:	bd70      	pop	{r4, r5, r6, pc}
 80494ba:	bf00      	nop
 80494bc:	08053dd0 	.word	0x08053dd0
 80494c0:	200029c4 	.word	0x200029c4

080494c4 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80494c4:	480e      	ldr	r0, [pc, #56]	; (8049500 <OnRxWindow1TimerEvent+0x3c>)
 80494c6:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 80494ca:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80494ce:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 80494d2:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80494d6:	f880 23bf 	strb.w	r2, [r0, #959]	; 0x3bf
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80494da:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80494de:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80494e2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80494e6:	f880 33cd 	strb.w	r3, [r0, #973]	; 0x3cd
    MacCtx.RxWindow1Config.RxContinuous = false;
 80494ea:	2300      	movs	r3, #0
 80494ec:	f880 33ce 	strb.w	r3, [r0, #974]	; 0x3ce
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80494f0:	f880 33cf 	strb.w	r3, [r0, #975]	; 0x3cf
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80494f4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80494f8:	f500 7061 	add.w	r0, r0, #900	; 0x384
 80494fc:	f7ff bfc2 	b.w	8049484 <RxWindowSetup.constprop.6>
 8049500:	200029c4 	.word	0x200029c4

08049504 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8049504:	4811      	ldr	r0, [pc, #68]	; (804954c <OnRxWindow2TimerEvent+0x48>)
 8049506:	f890 3484 	ldrb.w	r3, [r0, #1156]	; 0x484
 804950a:	b1eb      	cbz	r3, 8049548 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 804950c:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8049510:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8049514:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8049518:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 804951c:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049520:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8049524:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8049528:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 804952c:	f880 33e1 	strb.w	r3, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8049530:	2300      	movs	r3, #0
 8049532:	f880 33e2 	strb.w	r3, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8049536:	2301      	movs	r3, #1
 8049538:	f880 33e3 	strb.w	r3, [r0, #995]	; 0x3e3
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 804953c:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8049540:	f500 7067 	add.w	r0, r0, #924	; 0x39c
 8049544:	f7ff bf9e 	b.w	8049484 <RxWindowSetup.constprop.6>
}
 8049548:	4770      	bx	lr
 804954a:	bf00      	nop
 804954c:	200029c4 	.word	0x200029c4

08049550 <ProcessMacCommands.isra.1.constprop.7>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8049550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049554:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8049556:	2700      	movs	r7, #0
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8049558:	4ec4      	ldr	r6, [pc, #784]	; (804986c <ProcessMacCommands.isra.1.constprop.7+0x31c>)
    uint8_t status = 0;
 804955a:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 804955e:	4605      	mov	r5, r0
 8049560:	468a      	mov	sl, r1
 8049562:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8049564:	f8ad 7018 	strh.w	r7, [sp, #24]
 8049568:	46b8      	mov	r8, r7
    while( macIndex < commandsSize )
 804956a:	45d0      	cmp	r8, sl
 804956c:	d302      	bcc.n	8049574 <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 804956e:	b011      	add	sp, #68	; 0x44
 8049570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch( payload[macIndex++] )
 8049574:	f815 3008 	ldrb.w	r3, [r5, r8]
 8049578:	f108 0401 	add.w	r4, r8, #1
 804957c:	3b02      	subs	r3, #2
 804957e:	b2e4      	uxtb	r4, r4
 8049580:	2b11      	cmp	r3, #17
 8049582:	d8f4      	bhi.n	804956e <ProcessMacCommands.isra.1.constprop.7+0x1e>
 8049584:	a201      	add	r2, pc, #4	; (adr r2, 804958c <ProcessMacCommands.isra.1.constprop.7+0x3c>)
 8049586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804958a:	bf00      	nop
 804958c:	080495d5 	.word	0x080495d5
 8049590:	08049605 	.word	0x08049605
 8049594:	080496cb 	.word	0x080496cb
 8049598:	080496f7 	.word	0x080496f7
 804959c:	08049795 	.word	0x08049795
 80495a0:	080497bd 	.word	0x080497bd
 80495a4:	08049829 	.word	0x08049829
 80495a8:	08049871 	.word	0x08049871
 80495ac:	08049909 	.word	0x08049909
 80495b0:	0804956f 	.word	0x0804956f
 80495b4:	0804956f 	.word	0x0804956f
 80495b8:	08049961 	.word	0x08049961
 80495bc:	0804956f 	.word	0x0804956f
 80495c0:	0804956f 	.word	0x0804956f
 80495c4:	08049a03 	.word	0x08049a03
 80495c8:	08049a15 	.word	0x08049a15
 80495cc:	08049a59 	.word	0x08049a59
 80495d0:	08049a83 	.word	0x08049a83
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80495d4:	2003      	movs	r0, #3
 80495d6:	f002 fc79 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 80495da:	b188      	cbz	r0, 8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80495dc:	2103      	movs	r1, #3
 80495de:	2000      	movs	r0, #0
 80495e0:	f002 fc28 	bl	804be34 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80495e4:	5d2b      	ldrb	r3, [r5, r4]
 80495e6:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80495ea:	f108 0403 	add.w	r4, r8, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80495ee:	f108 0802 	add.w	r8, r8, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80495f2:	fa5f f888 	uxtb.w	r8, r8
 80495f6:	b2e4      	uxtb	r4, r4
 80495f8:	f815 3008 	ldrb.w	r3, [r5, r8]
 80495fc:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 8049600:	46a0      	mov	r8, r4
 8049602:	e7b2      	b.n	804956a <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 8049604:	2300      	movs	r3, #0
 8049606:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 804960a:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 804960e:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8049612:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8049616:	2f00      	cmp	r7, #0
 8049618:	d14e      	bne.n	80496b8 <ProcessMacCommands.isra.1.constprop.7+0x168>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 804961a:	1e63      	subs	r3, r4, #1
 804961c:	442b      	add	r3, r5
 804961e:	930d      	str	r3, [sp, #52]	; 0x34
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8049620:	f10a 0301 	add.w	r3, sl, #1
 8049624:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8049626:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 804962a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804962e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8049632:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049636:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804963a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804963e:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8049642:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8049646:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 804964a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804964e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8049652:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8049656:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804965a:	7818      	ldrb	r0, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 804965c:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804965e:	ab08      	add	r3, sp, #32
 8049660:	9301      	str	r3, [sp, #4]
 8049662:	ab07      	add	r3, sp, #28
 8049664:	9300      	str	r3, [sp, #0]
 8049666:	f10d 0216 	add.w	r2, sp, #22
 804966a:	f10d 0317 	add.w	r3, sp, #23
 804966e:	a90c      	add	r1, sp, #48	; 0x30
 8049670:	f003 fa37 	bl	804cae2 <RegionLinkAdrReq>
 8049674:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 8049678:	f000 0007 	and.w	r0, r0, #7
 804967c:	2807      	cmp	r0, #7
 804967e:	d10d      	bne.n	804969c <ProcessMacCommands.isra.1.constprop.7+0x14c>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8049680:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049684:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8049688:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 804968c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8049690:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8049694:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8049698:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 804969c:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 804969e:	f04f 0905 	mov.w	r9, #5
 80496a2:	b2fb      	uxtb	r3, r7
 80496a4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80496a8:	fbb4 f2f9 	udiv	r2, r4, r9
 80496ac:	4293      	cmp	r3, r2
 80496ae:	f107 0701 	add.w	r7, r7, #1
 80496b2:	d303      	bcc.n	80496bc <ProcessMacCommands.isra.1.constprop.7+0x16c>
                    macIndex += linkAdrNbBytesParsed - 1;
 80496b4:	4444      	add	r4, r8
 80496b6:	b2e4      	uxtb	r4, r4
 80496b8:	2701      	movs	r7, #1
 80496ba:	e7a1      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80496bc:	2201      	movs	r2, #1
 80496be:	f10d 0115 	add.w	r1, sp, #21
 80496c2:	2003      	movs	r0, #3
 80496c4:	f002 fa6e 	bl	804bba4 <LoRaMacCommandsAddCmd>
 80496c8:	e7eb      	b.n	80496a2 <ProcessMacCommands.isra.1.constprop.7+0x152>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80496ca:	5d2b      	ldrb	r3, [r5, r4]
 80496cc:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 80496d0:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80496d4:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80496d6:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
 80496da:	f108 0802 	add.w	r8, r8, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80496de:	fa02 f303 	lsl.w	r3, r2, r3
 80496e2:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80496e6:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80496ea:	2200      	movs	r2, #0
 80496ec:	a906      	add	r1, sp, #24
 80496ee:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80496f0:	f002 fa58 	bl	804bba4 <LoRaMacCommandsAddCmd>
 80496f4:	e0b7      	b.n	8049866 <ProcessMacCommands.isra.1.constprop.7+0x316>
                status = 0x07;
 80496f6:	2307      	movs	r3, #7
 80496f8:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80496fc:	5d2b      	ldrb	r3, [r5, r4]
 80496fe:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8049702:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8049706:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 804970a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804970e:	f108 0204 	add.w	r2, r8, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8049712:	f108 0303 	add.w	r3, r8, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049716:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049718:	b2d2      	uxtb	r2, r2
 804971a:	f108 0405 	add.w	r4, r8, #5
                macIndex++;
 804971e:	f108 0802 	add.w	r8, r8, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049722:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049724:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8049726:	fa5f f888 	uxtb.w	r8, r8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804972a:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 804972c:	f815 2008 	ldrb.w	r2, [r5, r8]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049730:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8049734:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8049736:	2264      	movs	r2, #100	; 0x64
 8049738:	4353      	muls	r3, r2
 804973a:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 804973c:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049740:	a90c      	add	r1, sp, #48	; 0x30
 8049742:	7818      	ldrb	r0, [r3, #0]
 8049744:	f003 f9dd 	bl	804cb02 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8049748:	f000 0307 	and.w	r3, r0, #7
 804974c:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804974e:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8049750:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8049754:	d110      	bne.n	8049778 <ProcessMacCommands.isra.1.constprop.7+0x228>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8049756:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 804975a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 804975e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8049762:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8049766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8049768:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 804976c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8049770:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8049774:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                macCmdPayload[0] = status;
 8049778:	a910      	add	r1, sp, #64	; 0x40
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 804977a:	2201      	movs	r2, #1
                macCmdPayload[0] = status;
 804977c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8049780:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8049782:	f002 fa0f 	bl	804bba4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049786:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 804978a:	f043 0310 	orr.w	r3, r3, #16
 804978e:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
 8049792:	e735      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8049794:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 8049798:	b173      	cbz	r3, 80497b8 <ProcessMacCommands.isra.1.constprop.7+0x268>
 804979a:	681b      	ldr	r3, [r3, #0]
 804979c:	b163      	cbz	r3, 80497b8 <ProcessMacCommands.isra.1.constprop.7+0x268>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 804979e:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80497a0:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 80497a4:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80497a8:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80497ac:	2202      	movs	r2, #2
 80497ae:	a906      	add	r1, sp, #24
 80497b0:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80497b2:	f002 f9f7 	bl	804bba4 <LoRaMacCommandsAddCmd>
 80497b6:	e723      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80497b8:	20ff      	movs	r0, #255	; 0xff
 80497ba:	e7f1      	b.n	80497a0 <ProcessMacCommands.isra.1.constprop.7+0x250>
                status = 0x03;
 80497bc:	2303      	movs	r3, #3
 80497be:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 80497c2:	5d2b      	ldrb	r3, [r5, r4]
 80497c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 80497c8:	ab0c      	add	r3, sp, #48	; 0x30
 80497ca:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80497cc:	f108 0204 	add.w	r2, r8, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80497d0:	f108 0303 	add.w	r3, r8, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80497d4:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80497d6:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80497d8:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80497da:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 80497dc:	f108 0202 	add.w	r2, r8, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80497e0:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80497e2:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80497e4:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80497e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80497ea:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80497ec:	f108 0406 	add.w	r4, r8, #6
                chParam.Frequency *= 100;
 80497f0:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80497f2:	f108 0805 	add.w	r8, r8, #5
                chParam.Frequency *= 100;
 80497f6:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80497f8:	fa5f f888 	uxtb.w	r8, r8
                chParam.Frequency *= 100;
 80497fc:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 80497fe:	2300      	movs	r3, #0
 8049800:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 8049802:	f815 3008 	ldrb.w	r3, [r5, r8]
 8049806:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 804980a:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 804980e:	a908      	add	r1, sp, #32
 8049810:	7818      	ldrb	r0, [r3, #0]
 8049812:	f003 f97d 	bl	804cb10 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8049816:	a910      	add	r1, sp, #64	; 0x40
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8049818:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 804981c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                chParam.DrRange.Value = payload[macIndex++];
 8049820:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8049822:	2201      	movs	r2, #1
 8049824:	2007      	movs	r0, #7
 8049826:	e7c4      	b.n	80497b2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049828:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 804982a:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                    delay++;
 804982e:	f013 020f 	ands.w	r2, r3, #15
 8049832:	bf08      	it	eq
 8049834:	2201      	moveq	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8049836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804983a:	4353      	muls	r3, r2
 804983c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8049840:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8049844:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8049848:	2200      	movs	r2, #0
 804984a:	a906      	add	r1, sp, #24
 804984c:	2008      	movs	r0, #8
 804984e:	f002 f9a9 	bl	804bba4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049852:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049856:	f108 0802 	add.w	r8, r8, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804985a:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 804985e:	fa5f f888 	uxtb.w	r8, r8
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049862:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049866:	4644      	mov	r4, r8
 8049868:	e6ca      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
 804986a:	bf00      	nop
 804986c:	200029c4 	.word	0x200029c4
                uint8_t eirpDwellTime = payload[macIndex++];
 8049870:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8049872:	2200      	movs	r2, #0
 8049874:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8049878:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 804987c:	bf18      	it	ne
 804987e:	2201      	movne	r2, #1
 8049880:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8049884:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8049886:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 804988a:	bf48      	it	mi
 804988c:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 804988e:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8049892:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 8049896:	bf48      	it	mi
 8049898:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 804989c:	a907      	add	r1, sp, #28
 804989e:	7818      	ldrb	r0, [r3, #0]
 80498a0:	f003 f93d 	bl	804cb1e <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 80498a4:	f108 0802 	add.w	r8, r8, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80498a8:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 80498aa:	fa5f f888 	uxtb.w	r8, r8
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80498ae:	d0da      	beq.n	8049866 <ProcessMacCommands.isra.1.constprop.7+0x316>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80498b0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80498b4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80498b8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80498bc:	f89d 101d 	ldrb.w	r1, [sp, #29]
 80498c0:	f883 112d 	strb.w	r1, [r3, #301]	; 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80498c4:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80498c8:	487e      	ldr	r0, [pc, #504]	; (8049ac4 <ProcessMacCommands.isra.1.constprop.7+0x574>)
 80498ca:	5c41      	ldrb	r1, [r0, r1]
 80498cc:	ee07 1a90 	vmov	s15, r1
 80498d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80498d4:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80498d6:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80498da:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80498de:	f88d 1020 	strb.w	r1, [sp, #32]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80498e2:	7818      	ldrb	r0, [r3, #0]
 80498e4:	a908      	add	r1, sp, #32
 80498e6:	f003 f8a2 	bl	804ca2e <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80498ea:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80498ee:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80498f0:	f993 20f9 	ldrsb.w	r2, [r3, #249]	; 0xf9
 80498f4:	b240      	sxtb	r0, r0
 80498f6:	4290      	cmp	r0, r2
 80498f8:	bfb8      	it	lt
 80498fa:	4610      	movlt	r0, r2
 80498fc:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8049900:	2200      	movs	r2, #0
 8049902:	a906      	add	r1, sp, #24
 8049904:	2009      	movs	r0, #9
 8049906:	e6f3      	b.n	80496f0 <ProcessMacCommands.isra.1.constprop.7+0x1a0>
                status = 0x03;
 8049908:	2303      	movs	r3, #3
 804990a:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 804990e:	5d2b      	ldrb	r3, [r5, r4]
 8049910:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049914:	f108 0204 	add.w	r2, r8, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8049918:	f108 0303 	add.w	r3, r8, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804991c:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804991e:	b2d2      	uxtb	r2, r2
 8049920:	f108 0405 	add.w	r4, r8, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8049924:	f108 0802 	add.w	r8, r8, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049928:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804992a:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 804992c:	fa5f f888 	uxtb.w	r8, r8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049930:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8049932:	f815 2008 	ldrb.w	r2, [r5, r8]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049936:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804993a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 804993c:	2264      	movs	r2, #100	; 0x64
 804993e:	4353      	muls	r3, r2
 8049940:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8049942:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049946:	a90c      	add	r1, sp, #48	; 0x30
 8049948:	7818      	ldrb	r0, [r3, #0]
 804994a:	f003 f8ef 	bl	804cb2c <RegionDlChannelReq>
                macCmdPayload[0] = status;
 804994e:	a910      	add	r1, sp, #64	; 0x40
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8049950:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8049954:	f801 0d28 	strb.w	r0, [r1, #-40]!
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049958:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 804995a:	2201      	movs	r2, #1
 804995c:	200a      	movs	r0, #10
 804995e:	e710      	b.n	8049782 <ProcessMacCommands.isra.1.constprop.7+0x232>
                SysTime_t sysTime = { 0 };
 8049960:	2300      	movs	r3, #0
 8049962:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8049966:	f108 0203 	add.w	r2, r8, #3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 804996a:	f108 0302 	add.w	r3, r8, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 804996e:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049970:	b2d2      	uxtb	r2, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8049972:	5ce9      	ldrb	r1, [r5, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049974:	5cab      	ldrb	r3, [r5, r2]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8049976:	5d2a      	ldrb	r2, [r5, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049978:	041b      	lsls	r3, r3, #16
 804997a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804997e:	4313      	orrs	r3, r2
 8049980:	f108 0204 	add.w	r2, r8, #4
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8049984:	f108 0406 	add.w	r4, r8, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049988:	b2d2      	uxtb	r2, r2
 804998a:	f108 0805 	add.w	r8, r8, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 804998e:	fa5f f888 	uxtb.w	r8, r8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049992:	5caa      	ldrb	r2, [r5, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8049994:	f815 1008 	ldrb.w	r1, [r5, r8]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049998:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 804999c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80499a0:	434a      	muls	r2, r1
                sysTimeCurrent = SysTimeGet( );
 80499a2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80499a6:	1212      	asrs	r2, r2, #8
                sysTimeCurrent = SysTimeGet( );
 80499a8:	4648      	mov	r0, r9
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80499aa:	9303      	str	r3, [sp, #12]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80499ac:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                sysTimeCurrent = SysTimeGet( );
 80499b0:	f004 fd61 	bl	804e476 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80499b4:	9b03      	ldr	r3, [sp, #12]
 80499b6:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 80499ba:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 80499be:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80499c2:	9308      	str	r3, [sp, #32]
 80499c4:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 80499c8:	9300      	str	r3, [sp, #0]
 80499ca:	f10d 0820 	add.w	r8, sp, #32
 80499ce:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 80499d2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80499d6:	a80a      	add	r0, sp, #40	; 0x28
 80499d8:	f004 fd10 	bl	804e3fc <SysTimeSub>
 80499dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80499de:	9300      	str	r3, [sp, #0]
 80499e0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80499e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80499e6:	4640      	mov	r0, r8
 80499e8:	f004 fcec 	bl	804e3c4 <SysTimeAdd>
                SysTimeSet( sysTime );
 80499ec:	e898 0003 	ldmia.w	r8, {r0, r1}
 80499f0:	f004 fd20 	bl	804e434 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 80499f4:	f002 f8a3 	bl	804bb3e <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80499f8:	2301      	movs	r3, #1
                gpsEpochTime.SubSeconds = payload[macIndex++];
 80499fa:	b2e4      	uxtb	r4, r4
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80499fc:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8049a00:	e5fe      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8049a02:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 8049a06:	3b04      	subs	r3, #4
 8049a08:	2b01      	cmp	r3, #1
 8049a0a:	f67f adf9 	bls.w	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacClassBPingSlotInfoAns( );
 8049a0e:	f002 f892 	bl	804bb36 <LoRaMacClassBPingSlotInfoAns>
 8049a12:	e5f5      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                frequency = ( uint32_t )payload[macIndex++];
 8049a14:	f108 0202 	add.w	r2, r8, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049a18:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 8049a1a:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049a1c:	5ca8      	ldrb	r0, [r5, r2]
 8049a1e:	f108 0203 	add.w	r2, r8, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a22:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8049a24:	f108 0405 	add.w	r4, r8, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a28:	5cab      	ldrb	r3, [r5, r2]
 8049a2a:	f108 0804 	add.w	r8, r8, #4
                datarate = payload[macIndex++] & 0x0F;
 8049a2e:	fa5f f888 	uxtb.w	r8, r8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a32:	041b      	lsls	r3, r3, #16
 8049a34:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8049a38:	f815 0008 	ldrb.w	r0, [r5, r8]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a3c:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8049a3e:	2164      	movs	r1, #100	; 0x64
 8049a40:	4359      	muls	r1, r3
 8049a42:	f000 000f 	and.w	r0, r0, #15
 8049a46:	f002 f877 	bl	804bb38 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8049a4a:	a910      	add	r1, sp, #64	; 0x40
                datarate = payload[macIndex++] & 0x0F;
 8049a4c:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8049a4e:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8049a52:	2201      	movs	r2, #1
 8049a54:	2011      	movs	r0, #17
 8049a56:	e6ac      	b.n	80497b2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8049a58:	f108 0302 	add.w	r3, r8, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8049a5c:	b2db      	uxtb	r3, r3
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049a5e:	4a1a      	ldr	r2, [pc, #104]	; (8049ac8 <ProcessMacCommands.isra.1.constprop.7+0x578>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8049a60:	5ce8      	ldrb	r0, [r5, r3]
 8049a62:	5d2b      	ldrb	r3, [r5, r4]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049a64:	6812      	ldr	r2, [r2, #0]
                beaconTimingChannel = payload[macIndex++];
 8049a66:	f108 0404 	add.w	r4, r8, #4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8049a6a:	f108 0803 	add.w	r8, r8, #3
                beaconTimingChannel = payload[macIndex++];
 8049a6e:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049a72:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8049a76:	f815 1008 	ldrb.w	r1, [r5, r8]
                beaconTimingChannel = payload[macIndex++];
 8049a7a:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049a7c:	f002 f85e 	bl	804bb3c <LoRaMacClassBBeaconTimingAns>
 8049a80:	e5be      	b.n	8049600 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    frequency = ( uint32_t )payload[macIndex++];
 8049a82:	5d28      	ldrb	r0, [r5, r4]
 8049a84:	f108 0302 	add.w	r3, r8, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a88:	f108 0404 	add.w	r4, r8, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049a8c:	f108 0803 	add.w	r8, r8, #3
 8049a90:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a92:	fa5f f888 	uxtb.w	r8, r8
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049a96:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049a98:	f815 3008 	ldrb.w	r3, [r5, r8]
 8049a9c:	041b      	lsls	r3, r3, #16
 8049a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8049aa2:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8049aa4:	2064      	movs	r0, #100	; 0x64
 8049aa6:	4358      	muls	r0, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049aa8:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8049aaa:	f002 f849 	bl	804bb40 <LoRaMacClassBBeaconFreqReq>
 8049aae:	b130      	cbz	r0, 8049abe <ProcessMacCommands.isra.1.constprop.7+0x56e>
                        macCmdPayload[0] = 1;
 8049ab0:	2301      	movs	r3, #1
 8049ab2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8049ab6:	2201      	movs	r2, #1
 8049ab8:	a906      	add	r1, sp, #24
 8049aba:	2013      	movs	r0, #19
 8049abc:	e679      	b.n	80497b2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                        macCmdPayload[0] = 0;
 8049abe:	f88d 0018 	strb.w	r0, [sp, #24]
 8049ac2:	e7f8      	b.n	8049ab6 <ProcessMacCommands.isra.1.constprop.7+0x566>
 8049ac4:	08054178 	.word	0x08054178
 8049ac8:	20005ff0 	.word	0x20005ff0

08049acc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8049acc:	4b06      	ldr	r3, [pc, #24]	; (8049ae8 <LoRaMacIsBusy+0x1c>)
 8049ace:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8049ad2:	b932      	cbnz	r2, 8049ae2 <LoRaMacIsBusy+0x16>
 8049ad4:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 8049ad8:	f110 30ff 	adds.w	r0, r0, #4294967295
 8049adc:	bf18      	it	ne
 8049ade:	2001      	movne	r0, #1
 8049ae0:	4770      	bx	lr
    return true;
 8049ae2:	2001      	movs	r0, #1
}
 8049ae4:	4770      	bx	lr
 8049ae6:	bf00      	nop
 8049ae8:	200029c4 	.word	0x200029c4

08049aec <PrepareFrame>:
{
 8049aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049af0:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    MacCtx.PktBufferLen = 0;
 8049af4:	4e58      	ldr	r6, [pc, #352]	; (8049c58 <PrepareFrame+0x16c>)
 8049af6:	2500      	movs	r5, #0
        fBufferSize = 0;
 8049af8:	42ab      	cmp	r3, r5
 8049afa:	bf08      	it	eq
 8049afc:	46ab      	moveq	fp, r5
 8049afe:	469a      	mov	sl, r3
{
 8049b00:	4680      	mov	r8, r0
    PRINTF("PREPARE FRAME\r\n");
 8049b02:	4856      	ldr	r0, [pc, #344]	; (8049c5c <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 8049b04:	80b5      	strh	r5, [r6, #4]
{
 8049b06:	460f      	mov	r7, r1
 8049b08:	4691      	mov	r9, r2
    MacCtx.NodeAckRequested = false;
 8049b0a:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    size_t macCmdsSize = 0;
 8049b0e:	e9cd 5500 	strd	r5, r5, [sp]
    PRINTF("PREPARE FRAME\r\n");
 8049b12:	f004 fe0f 	bl	804e734 <TraceSend>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8049b16:	465a      	mov	r2, fp
 8049b18:	4651      	mov	r1, sl
 8049b1a:	f506 709e 	add.w	r0, r6, #316	; 0x13c
 8049b1e:	f004 fe6e 	bl	804e7fe <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8049b22:	fa5f f28b 	uxtb.w	r2, fp
 8049b26:	f886 223b 	strb.w	r2, [r6, #571]	; 0x23b
    MacCtx.PktBuffer[0] = macHdr->Value;
 8049b2a:	f898 3000 	ldrb.w	r3, [r8]
 8049b2e:	71b3      	strb	r3, [r6, #6]
    switch( macHdr->Bits.MType )
 8049b30:	f898 1000 	ldrb.w	r1, [r8]
 8049b34:	0949      	lsrs	r1, r1, #5
 8049b36:	2904      	cmp	r1, #4
 8049b38:	4634      	mov	r4, r6
 8049b3a:	d037      	beq.n	8049bac <PrepareFrame+0xc0>
 8049b3c:	2907      	cmp	r1, #7
 8049b3e:	d079      	beq.n	8049c34 <PrepareFrame+0x148>
 8049b40:	2902      	cmp	r1, #2
 8049b42:	f040 8085 	bne.w	8049c50 <PrepareFrame+0x164>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8049b46:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049b48:	4d45      	ldr	r5, [pc, #276]	; (8049c60 <PrepareFrame+0x174>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8049b4a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049b4e:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049b50:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049b54:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8049b58:	f898 3000 	ldrb.w	r3, [r8]
 8049b5c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049b60:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8049b64:	f884 912c 	strb.w	r9, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8049b6a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8049b6e:	783b      	ldrb	r3, [r7, #0]
 8049b70:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049b74:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8049b76:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8049b7a:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8049b7e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049b82:	f002 fb8f 	bl	804c2a4 <LoRaMacCryptoGetFCntUp>
 8049b86:	2800      	cmp	r0, #0
 8049b88:	d164      	bne.n	8049c54 <PrepareFrame+0x168>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8049b8a:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.NbRetries = 0;
 8049b8c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 8049b90:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8049b94:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8049b96:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8049b9a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8049b9e:	f002 f8af 	bl	804bd00 <LoRaMacCommandsGetSizeSerializedCmds>
 8049ba2:	b138      	cbz	r0, 8049bb4 <PrepareFrame+0xc8>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049ba4:	2013      	movs	r0, #19
}
 8049ba6:	b003      	add	sp, #12
 8049ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.NodeAckRequested = true;
 8049bac:	2301      	movs	r3, #1
 8049bae:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
 8049bb2:	e7c8      	b.n	8049b46 <PrepareFrame+0x5a>
            if( macCmdsSize > 0 )
 8049bb4:	9b01      	ldr	r3, [sp, #4]
 8049bb6:	b90b      	cbnz	r3, 8049bbc <PrepareFrame+0xd0>
    return LORAMAC_STATUS_OK;
 8049bb8:	2000      	movs	r0, #0
 8049bba:	e7f4      	b.n	8049ba6 <PrepareFrame+0xba>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8049bbc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049bc0:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
 8049bc4:	f7ff f9f6 	bl	8048fb4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8049bc8:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 8049bcc:	b1eb      	cbz	r3, 8049c0a <PrepareFrame+0x11e>
 8049bce:	9b01      	ldr	r3, [sp, #4]
 8049bd0:	2b0f      	cmp	r3, #15
 8049bd2:	d80f      	bhi.n	8049bf4 <PrepareFrame+0x108>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8049bd4:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8049bd8:	a901      	add	r1, sp, #4
 8049bda:	200f      	movs	r0, #15
 8049bdc:	f002 f89c 	bl	804bd18 <LoRaMacCommandsSerializeCmds>
 8049be0:	2800      	cmp	r0, #0
 8049be2:	d1df      	bne.n	8049ba4 <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8049be4:	783b      	ldrb	r3, [r7, #0]
 8049be6:	9a01      	ldr	r2, [sp, #4]
 8049be8:	f362 0303 	bfi	r3, r2, #0, #4
 8049bec:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8049bee:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8049bf2:	e7d8      	b.n	8049ba6 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8049bf4:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049bf8:	a901      	add	r1, sp, #4
 8049bfa:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8049bfe:	f002 f88b 	bl	804bd18 <LoRaMacCommandsSerializeCmds>
 8049c02:	2800      	cmp	r0, #0
 8049c04:	d1ce      	bne.n	8049ba4 <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8049c06:	200a      	movs	r0, #10
 8049c08:	e7cd      	b.n	8049ba6 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8049c0a:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049c0e:	a901      	add	r1, sp, #4
 8049c10:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8049c14:	f002 f880 	bl	804bd18 <LoRaMacCommandsSerializeCmds>
 8049c18:	2800      	cmp	r0, #0
 8049c1a:	d1c3      	bne.n	8049ba4 <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8049c1c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8049c20:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8049c24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8049c28:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8049c2c:	9b01      	ldr	r3, [sp, #4]
 8049c2e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8049c32:	e7b8      	b.n	8049ba6 <PrepareFrame+0xba>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8049c34:	f1ba 0f00 	cmp.w	sl, #0
 8049c38:	d0be      	beq.n	8049bb8 <PrepareFrame+0xcc>
 8049c3a:	2a00      	cmp	r2, #0
 8049c3c:	d0bc      	beq.n	8049bb8 <PrepareFrame+0xcc>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8049c3e:	4651      	mov	r1, sl
 8049c40:	1df0      	adds	r0, r6, #7
 8049c42:	f004 fddc 	bl	804e7fe <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8049c46:	f896 323b 	ldrb.w	r3, [r6, #571]	; 0x23b
 8049c4a:	3301      	adds	r3, #1
 8049c4c:	80b3      	strh	r3, [r6, #4]
 8049c4e:	e7b3      	b.n	8049bb8 <PrepareFrame+0xcc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8049c50:	2002      	movs	r0, #2
 8049c52:	e7a8      	b.n	8049ba6 <PrepareFrame+0xba>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8049c54:	2012      	movs	r0, #18
 8049c56:	e7a6      	b.n	8049ba6 <PrepareFrame+0xba>
 8049c58:	200029c4 	.word	0x200029c4
 8049c5c:	08054381 	.word	0x08054381
 8049c60:	200029ca 	.word	0x200029ca

08049c64 <SendFrameOnChannel>:
{
 8049c64:	b530      	push	{r4, r5, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049c66:	4c38      	ldr	r4, [pc, #224]	; (8049d48 <SendFrameOnChannel+0xe4>)
{
 8049c68:	b087      	sub	sp, #28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049c6a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    txConfig.Channel = channel;
 8049c6e:	f88d 0008 	strb.w	r0, [sp, #8]
    int8_t txPower = 0;
 8049c72:	2200      	movs	r2, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049c74:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
    int8_t txPower = 0;
 8049c78:	f88d 2007 	strb.w	r2, [sp, #7]
    txConfig.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8049c7c:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8049c80:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8049c84:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8049c88:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8049c8a:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049c8c:	f88d 1009 	strb.w	r1, [sp, #9]
{
 8049c90:	4605      	mov	r5, r0
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8049c92:	9203      	str	r2, [sp, #12]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8049c94:	f8ad 3014 	strh.w	r3, [sp, #20]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8049c98:	f001 ff3c 	bl	804bb14 <LoRaMacClassBIsBeaconExpected>
 8049c9c:	2800      	cmp	r0, #0
 8049c9e:	d151      	bne.n	8049d44 <SendFrameOnChannel+0xe0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049ca0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049ca4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049ca8:	2b01      	cmp	r3, #1
 8049caa:	d10b      	bne.n	8049cc4 <SendFrameOnChannel+0x60>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8049cac:	f001 ff34 	bl	804bb18 <LoRaMacClassBIsPingExpected>
 8049cb0:	b110      	cbz	r0, 8049cb8 <SendFrameOnChannel+0x54>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8049cb2:	200f      	movs	r0, #15
}
 8049cb4:	b007      	add	sp, #28
 8049cb6:	bd30      	pop	{r4, r5, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8049cb8:	f001 ff30 	bl	804bb1c <LoRaMacClassBIsMulticastExpected>
 8049cbc:	2800      	cmp	r0, #0
 8049cbe:	d1f8      	bne.n	8049cb2 <SendFrameOnChannel+0x4e>
            LoRaMacClassBStopRxSlots( );
 8049cc0:	f001 ff42 	bl	804bb48 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8049cc4:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8049cc8:	4b20      	ldr	r3, [pc, #128]	; (8049d4c <SendFrameOnChannel+0xe8>)
 8049cca:	7800      	ldrb	r0, [r0, #0]
 8049ccc:	f10d 0207 	add.w	r2, sp, #7
 8049cd0:	a902      	add	r1, sp, #8
 8049cd2:	f002 fef7 	bl	804cac4 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8049cd6:	2301      	movs	r3, #1
 8049cd8:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049cdc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049ce0:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8049ce4:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8049ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8049cec:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049cf0:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8049cf4:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049cf8:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049cfc:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8049d00:	f001 ff0e 	bl	804bb20 <LoRaMacClassBIsBeaconModeActive>
 8049d04:	b9b0      	cbnz	r0, 8049d34 <SendFrameOnChannel+0xd0>
    LoRaMacClassBHaltBeaconing( );
 8049d06:	f001 ff0e 	bl	804bb26 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8049d0a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8049d0e:	f043 0302 	orr.w	r3, r3, #2
 8049d12:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8049d16:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8049d1a:	b923      	cbnz	r3, 8049d26 <SendFrameOnChannel+0xc2>
        MacCtx.ChannelsNbTransCounter++;
 8049d1c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8049d20:	3301      	adds	r3, #1
 8049d22:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8049d26:	4b0a      	ldr	r3, [pc, #40]	; (8049d50 <SendFrameOnChannel+0xec>)
 8049d28:	480a      	ldr	r0, [pc, #40]	; (8049d54 <SendFrameOnChannel+0xf0>)
 8049d2a:	7921      	ldrb	r1, [r4, #4]
 8049d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8049d2e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8049d30:	2000      	movs	r0, #0
 8049d32:	e7bf      	b.n	8049cb4 <SendFrameOnChannel+0x50>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8049d34:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8049d38:	f001 ff04 	bl	804bb44 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8049d3c:	2800      	cmp	r0, #0
 8049d3e:	d0e2      	beq.n	8049d06 <SendFrameOnChannel+0xa2>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8049d40:	2010      	movs	r0, #16
 8049d42:	e7b7      	b.n	8049cb4 <SendFrameOnChannel+0x50>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8049d44:	200e      	movs	r0, #14
 8049d46:	e7b5      	b.n	8049cb4 <SendFrameOnChannel+0x50>
 8049d48:	200029c4 	.word	0x200029c4
 8049d4c:	20002de0 	.word	0x20002de0
 8049d50:	08053dd0 	.word	0x08053dd0
 8049d54:	200029ca 	.word	0x200029ca

08049d58 <ScheduleTx>:
{
 8049d58:	b570      	push	{r4, r5, r6, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049d5a:	4c80      	ldr	r4, [pc, #512]	; (8049f5c <ScheduleTx+0x204>)
    TimerTime_t dutyCycleTimeOff = 0;
 8049d5c:	2300      	movs	r3, #0
{
 8049d5e:	b088      	sub	sp, #32
 8049d60:	4605      	mov	r5, r0
    PRINTF("ScheduleTx\r\n");
 8049d62:	487f      	ldr	r0, [pc, #508]	; (8049f60 <ScheduleTx+0x208>)
    size_t macCmdsSize = 0;
 8049d64:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PRINTF("ScheduleTx\r\n");
 8049d68:	f004 fce4 	bl	804e734 <TraceSend>
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049d6c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049d70:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049d74:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049d78:	2a00      	cmp	r2, #0
 8049d7a:	d15c      	bne.n	8049e36 <ScheduleTx+0xde>
        calcBackOff.Joined = true;
 8049d7c:	f88d 2014 	strb.w	r2, [sp, #20]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049d80:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
    calcBackOff.Channel = channel;
 8049d84:	f88d 1017 	strb.w	r1, [sp, #23]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049d88:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049d8c:	f88d 2016 	strb.w	r2, [sp, #22]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049d90:	f004 fc86 	bl	804e6a0 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049d94:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8049d98:	9307      	str	r3, [sp, #28]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049d9a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049d9e:	9006      	str	r0, [sp, #24]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049da0:	075b      	lsls	r3, r3, #29
    calcBackOff.LastTxIsJoinRequest = false;
 8049da2:	f04f 0000 	mov.w	r0, #0
 8049da6:	f88d 0015 	strb.w	r0, [sp, #21]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049daa:	d505      	bpl.n	8049db8 <ScheduleTx+0x60>
 8049dac:	f002 f88e 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 8049db0:	b110      	cbz	r0, 8049db8 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 8049db2:	2301      	movs	r3, #1
 8049db4:	f88d 3015 	strb.w	r3, [sp, #21]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8049db8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049dbc:	a905      	add	r1, sp, #20
 8049dbe:	7818      	ldrb	r0, [r3, #0]
 8049dc0:	f002 fec4 	bl	804cb4c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8049dc4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049dc8:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
 8049dcc:	1e51      	subs	r1, r2, #1
 8049dce:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8049dd2:	434a      	muls	r2, r1
 8049dd4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8049dd8:	9205      	str	r2, [sp, #20]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049dda:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8049dde:	f88d 201c 	strb.w	r2, [sp, #28]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049de2:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8049de6:	f88d 201e 	strb.w	r2, [sp, #30]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049dea:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8049dee:	bb22      	cbnz	r2, 8049e3a <ScheduleTx+0xe2>
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049df0:	7818      	ldrb	r0, [r3, #0]
        nextChan.Joined = true;
 8049df2:	f88d 201d 	strb.w	r2, [sp, #29]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049df6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8049dfa:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8049dfe:	9206      	str	r2, [sp, #24]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049e00:	9300      	str	r3, [sp, #0]
 8049e02:	4a58      	ldr	r2, [pc, #352]	; (8049f64 <ScheduleTx+0x20c>)
 8049e04:	ab02      	add	r3, sp, #8
 8049e06:	a905      	add	r1, sp, #20
 8049e08:	f002 fea6 	bl	804cb58 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8049e0c:	b1b8      	cbz	r0, 8049e3e <ScheduleTx+0xe6>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8049e0e:	280b      	cmp	r0, #11
 8049e10:	d10f      	bne.n	8049e32 <ScheduleTx+0xda>
 8049e12:	b175      	cbz	r5, 8049e32 <ScheduleTx+0xda>
            if( dutyCycleTimeOff != 0 )
 8049e14:	9902      	ldr	r1, [sp, #8]
 8049e16:	b159      	cbz	r1, 8049e30 <ScheduleTx+0xd8>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8049e18:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8049e1c:	4852      	ldr	r0, [pc, #328]	; (8049f68 <ScheduleTx+0x210>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8049e1e:	f043 0320 	orr.w	r3, r3, #32
 8049e22:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8049e26:	f004 fc23 	bl	804e670 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8049e2a:	484f      	ldr	r0, [pc, #316]	; (8049f68 <ScheduleTx+0x210>)
 8049e2c:	f004 fb86 	bl	804e53c <TimerStart>
            return LORAMAC_STATUS_OK;
 8049e30:	2000      	movs	r0, #0
}
 8049e32:	b008      	add	sp, #32
 8049e34:	bd70      	pop	{r4, r5, r6, pc}
        calcBackOff.Joined = true;
 8049e36:	2201      	movs	r2, #1
 8049e38:	e7a0      	b.n	8049d7c <ScheduleTx+0x24>
        nextChan.Joined = true;
 8049e3a:	2201      	movs	r2, #1
 8049e3c:	e7d8      	b.n	8049df0 <ScheduleTx+0x98>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049e3e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8049e42:	4d4a      	ldr	r5, [pc, #296]	; (8049f6c <ScheduleTx+0x214>)
 8049e44:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8049e46:	f991 3119 	ldrsb.w	r3, [r1, #281]	; 0x119
 8049e4a:	f991 20f9 	ldrsb.w	r2, [r1, #249]	; 0xf9
 8049e4e:	f891 112d 	ldrb.w	r1, [r1, #301]	; 0x12d
 8049e52:	4630      	mov	r0, r6
 8049e54:	f002 fe96 	bl	804cb84 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8049e58:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049e5c:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049e60:	9500      	str	r5, [sp, #0]
 8049e62:	b241      	sxtb	r1, r0
 8049e64:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049e68:	4630      	mov	r0, r6
 8049e6a:	f002 fe13 	bl	804ca94 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049e6e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049e72:	3514      	adds	r5, #20
 8049e74:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049e78:	f993 1120 	ldrsb.w	r1, [r3, #288]	; 0x120
 8049e7c:	7818      	ldrb	r0, [r3, #0]
 8049e7e:	9500      	str	r5, [sp, #0]
 8049e80:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049e84:	f002 fe06 	bl	804ca94 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049e88:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049e8c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8049e90:	b9e2      	cbnz	r2, 8049ecc <ScheduleTx+0x174>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049e92:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8049e96:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049e9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049e9e:	440a      	add	r2, r1
 8049ea0:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049ea4:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8049ea8:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049eac:	4413      	add	r3, r2
 8049eae:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8049eb2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049eb6:	f993 50f9 	ldrsb.w	r5, [r3, #249]	; 0xf9
    uint32_t fCntUp = 0;
 8049eba:	2300      	movs	r3, #0
 8049ebc:	9304      	str	r3, [sp, #16]
    switch( MacCtx.TxMsg.Type )
 8049ebe:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8049ec2:	b313      	cbz	r3, 8049f0a <ScheduleTx+0x1b2>
 8049ec4:	2b04      	cmp	r3, #4
 8049ec6:	d02b      	beq.n	8049f20 <ScheduleTx+0x1c8>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8049ec8:	2003      	movs	r0, #3
 8049eca:	e7b2      	b.n	8049e32 <ScheduleTx+0xda>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8049ecc:	a803      	add	r0, sp, #12
 8049ece:	f001 ff17 	bl	804bd00 <LoRaMacCommandsGetSizeSerializedCmds>
 8049ed2:	2800      	cmp	r0, #0
 8049ed4:	d13d      	bne.n	8049f52 <ScheduleTx+0x1fa>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049ed6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049eda:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8049ede:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049ee2:	f89d 600c 	ldrb.w	r6, [sp, #12]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8049ee6:	f7ff f865 	bl	8048fb4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8049eea:	4435      	add	r5, r6
 8049eec:	b280      	uxth	r0, r0
 8049eee:	42a8      	cmp	r0, r5
 8049ef0:	d331      	bcc.n	8049f56 <ScheduleTx+0x1fe>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049ef2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049ef6:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8049efa:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8049efe:	440b      	add	r3, r1
 8049f00:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049f04:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8049f08:	e7cc      	b.n	8049ea4 <ScheduleTx+0x14c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8049f0a:	4819      	ldr	r0, [pc, #100]	; (8049f70 <ScheduleTx+0x218>)
 8049f0c:	f002 fa22 	bl	804c354 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8049f10:	b9d8      	cbnz	r0, 8049f4a <ScheduleTx+0x1f2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8049f12:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8049f16:	80a3      	strh	r3, [r4, #4]
    return SendFrameOnChannel( 0/*MacCtx.Channel  JP*/);
 8049f18:	2000      	movs	r0, #0
 8049f1a:	f7ff fea3 	bl	8049c64 <SendFrameOnChannel>
 8049f1e:	e788      	b.n	8049e32 <ScheduleTx+0xda>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049f20:	a804      	add	r0, sp, #16
 8049f22:	f002 f9bf 	bl	804c2a4 <LoRaMacCryptoGetFCntUp>
 8049f26:	b990      	cbnz	r0, 8049f4e <ScheduleTx+0x1f6>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8049f28:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8049f2c:	b91b      	cbnz	r3, 8049f36 <ScheduleTx+0x1de>
 8049f2e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8049f32:	2b01      	cmp	r3, #1
 8049f34:	d902      	bls.n	8049f3c <ScheduleTx+0x1e4>
                fCntUp -= 1;
 8049f36:	9b04      	ldr	r3, [sp, #16]
 8049f38:	3b01      	subs	r3, #1
 8049f3a:	9304      	str	r3, [sp, #16]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8049f3c:	4b0c      	ldr	r3, [pc, #48]	; (8049f70 <ScheduleTx+0x218>)
 8049f3e:	9804      	ldr	r0, [sp, #16]
 8049f40:	4632      	mov	r2, r6
 8049f42:	b2e9      	uxtb	r1, r5
 8049f44:	f002 fa36 	bl	804c3b4 <LoRaMacCryptoSecureMessage>
 8049f48:	e7e2      	b.n	8049f10 <ScheduleTx+0x1b8>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8049f4a:	2011      	movs	r0, #17
 8049f4c:	e771      	b.n	8049e32 <ScheduleTx+0xda>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8049f4e:	2012      	movs	r0, #18
 8049f50:	e76f      	b.n	8049e32 <ScheduleTx+0xda>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049f52:	2013      	movs	r0, #19
 8049f54:	e76d      	b.n	8049e32 <ScheduleTx+0xda>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8049f56:	2008      	movs	r0, #8
 8049f58:	e76b      	b.n	8049e32 <ScheduleTx+0xda>
 8049f5a:	bf00      	nop
 8049f5c:	200029c4 	.word	0x200029c4
 8049f60:	08054391 	.word	0x08054391
 8049f64:	20002ddd 	.word	0x20002ddd
 8049f68:	20002d30 	.word	0x20002d30
 8049f6c:	20002d80 	.word	0x20002d80
 8049f70:	20002ad0 	.word	0x20002ad0

08049f74 <OnTxDelayedTimerEvent>:
{
 8049f74:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8049f76:	4c12      	ldr	r4, [pc, #72]	; (8049fc0 <OnTxDelayedTimerEvent+0x4c>)
 8049f78:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8049f7c:	f004 fb50 	bl	804e620 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8049f80:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8049f84:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8049f86:	f023 0320 	bic.w	r3, r3, #32
 8049f8a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8049f8e:	f7ff fee3 	bl	8049d58 <ScheduleTx>
 8049f92:	b1a0      	cbz	r0, 8049fbe <OnTxDelayedTimerEvent+0x4a>
 8049f94:	280b      	cmp	r0, #11
 8049f96:	d012      	beq.n	8049fbe <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049f98:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049f9c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8049fa0:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8049fa4:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8049fa6:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8049faa:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8049fae:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8049fb2:	f001 ff73 	bl	804be9c <LoRaMacConfirmQueueSetStatusCmn>
}
 8049fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8049fba:	f7fe bfb7 	b.w	8048f2c <StopRetransmission>
}
 8049fbe:	bd10      	pop	{r4, pc}
 8049fc0:	200029c4 	.word	0x200029c4

08049fc4 <Send>:
{
 8049fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049fc8:	4d47      	ldr	r5, [pc, #284]	; (804a0e8 <Send+0x124>)
{
 8049fca:	4699      	mov	r9, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049fcc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
{
 8049fd0:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049fd2:	f993 60f9 	ldrsb.w	r6, [r3, #249]	; 0xf9
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8049fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8049fda:	9304      	str	r3, [sp, #16]
{
 8049fdc:	4604      	mov	r4, r0
    PRINTF("Send\r\n");
 8049fde:	4843      	ldr	r0, [pc, #268]	; (804a0ec <Send+0x128>)
{
 8049fe0:	460f      	mov	r7, r1
 8049fe2:	4690      	mov	r8, r2
    PRINTF("Send\r\n");
 8049fe4:	f004 fba6 	bl	804e734 <TraceSend>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049fe8:	f8d5 1488 	ldr.w	r1, [r5, #1160]	; 0x488
 8049fec:	f891 31d4 	ldrb.w	r3, [r1, #468]	; 0x1d4
 8049ff0:	b93b      	cbnz	r3, 804a002 <Send+0x3e>
    	PRINTF("NO NETWORK\r\n");
 8049ff2:	483f      	ldr	r0, [pc, #252]	; (804a0f0 <Send+0x12c>)
 8049ff4:	f004 fb9e 	bl	804e734 <TraceSend>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8049ff8:	2407      	movs	r4, #7
}
 8049ffa:	4620      	mov	r0, r4
 8049ffc:	b00b      	add	sp, #44	; 0x2c
 8049ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 804a002:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
 804a006:	b90b      	cbnz	r3, 804a00c <Send+0x48>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 804a008:	f8c1 31c8 	str.w	r3, [r1, #456]	; 0x1c8
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 804a00c:	f891 20f2 	ldrb.w	r2, [r1, #242]	; 0xf2
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 804a010:	f891 00f0 	ldrb.w	r0, [r1, #240]	; 0xf0
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 804a014:	f04f 0300 	mov.w	r3, #0
 804a018:	f362 13c7 	bfi	r3, r2, #7, #1
 804a01c:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 804a020:	2801      	cmp	r0, #1
 804a022:	b2db      	uxtb	r3, r3
        fCtrl.Bits.FPending      = 1;
 804a024:	bf08      	it	eq
 804a026:	f043 0310 	orreq.w	r3, r3, #16
        fCtrl.Bits.FPending      = 0;
 804a02a:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 804a02e:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
 804a032:	b12b      	cbz	r3, 804a040 <Send+0x7c>
        fCtrl.Bits.Ack = 1;
 804a034:	f89d 300c 	ldrb.w	r3, [sp, #12]
 804a038:	f043 0320 	orr.w	r3, r3, #32
 804a03c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.Version = MacCtx.NvmCtx->Version;
 804a040:	f8d1 31d0 	ldr.w	r3, [r1, #464]	; 0x1d0
 804a044:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 804a046:	2301      	movs	r3, #1
 804a048:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804a04c:	f8d1 30f4 	ldr.w	r3, [r1, #244]	; 0xf4
 804a050:	9307      	str	r3, [sp, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 804a052:	f8b5 33f8 	ldrh.w	r3, [r5, #1016]	; 0x3f8
 804a056:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804a05a:	f8b5 33fa 	ldrh.w	r3, [r5, #1018]	; 0x3fa
 804a05e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a062:	f891 30f9 	ldrb.w	r3, [r1, #249]	; 0xf9
 804a066:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.TxPower = TX_POWER_0 /*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804a06a:	2300      	movs	r3, #0
 804a06c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 804a070:	f88d 2019 	strb.w	r2, [sp, #25]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804a074:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
 804a078:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 804a07c:	460a      	mov	r2, r1
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 804a07e:	a805      	add	r0, sp, #20
    adrNext.Region = MacCtx.NvmCtx->Region;
 804a080:	f812 3bf8 	ldrb.w	r3, [r2], #248
 804a084:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 804a088:	31f9      	adds	r1, #249	; 0xf9
 804a08a:	ab04      	add	r3, sp, #16
 804a08c:	f001 fcca 	bl	804ba24 <LoRaMacAdrCalcNext>
 804a090:	f89d 300c 	ldrb.w	r3, [sp, #12]
 804a094:	a90a      	add	r1, sp, #40	; 0x28
 804a096:	f360 1386 	bfi	r3, r0, #6, #1
 804a09a:	f801 3d1c 	strb.w	r3, [r1, #-28]!
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 804a09e:	4620      	mov	r0, r4
 804a0a0:	f8cd 9000 	str.w	r9, [sp]
 804a0a4:	4643      	mov	r3, r8
 804a0a6:	463a      	mov	r2, r7
 804a0a8:	f7ff fd20 	bl	8049aec <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 804a0ac:	4604      	mov	r4, r0
 804a0ae:	b108      	cbz	r0, 804a0b4 <Send+0xf0>
 804a0b0:	280a      	cmp	r0, #10
 804a0b2:	d104      	bne.n	804a0be <Send+0xfa>
        status = ScheduleTx( false );
 804a0b4:	2000      	movs	r0, #0
 804a0b6:	f7ff fe4f 	bl	8049d58 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 804a0ba:	4604      	mov	r4, r0
 804a0bc:	b138      	cbz	r0, 804a0ce <Send+0x10a>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 804a0be:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 804a0c2:	2200      	movs	r2, #0
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 804a0c4:	f883 60f9 	strb.w	r6, [r3, #249]	; 0xf9
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 804a0c8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 804a0cc:	e795      	b.n	8049ffa <Send+0x36>
        MacCtx.NvmCtx->SrvAckRequested = false;
 804a0ce:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 804a0d2:	9a04      	ldr	r2, [sp, #16]
        MacCtx.NvmCtx->SrvAckRequested = false;
 804a0d4:	f883 01c0 	strb.w	r0, [r3, #448]	; 0x1c0
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 804a0d8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 804a0dc:	f001 fde4 	bl	804bca8 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804a0e0:	2800      	cmp	r0, #0
 804a0e2:	bf18      	it	ne
 804a0e4:	2413      	movne	r4, #19
 804a0e6:	e788      	b.n	8049ffa <Send+0x36>
 804a0e8:	200029c4 	.word	0x200029c4
 804a0ec:	0805439e 	.word	0x0805439e
 804a0f0:	080543a5 	.word	0x080543a5

0804a0f4 <SendReJoinReq>:
{
 804a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( joinReqType )
 804a0f6:	28ff      	cmp	r0, #255	; 0xff
    macHdr.Value = 0;
 804a0f8:	f04f 0400 	mov.w	r4, #0
{
 804a0fc:	4607      	mov	r7, r0
    macHdr.Value = 0;
 804a0fe:	4626      	mov	r6, r4
    switch( joinReqType )
 804a100:	d123      	bne.n	804a14a <SendReJoinReq+0x56>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 804a102:	4d13      	ldr	r5, [pc, #76]	; (804a150 <SendReJoinReq+0x5c>)
            SwitchClass( CLASS_A );
 804a104:	4620      	mov	r0, r4
 804a106:	f7ff f93d 	bl	8049384 <SwitchClass>
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 804a10a:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 804a10e:	1dab      	adds	r3, r5, #6
 804a110:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 804a114:	f885 4108 	strb.w	r4, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804a118:	f885 7110 	strb.w	r7, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 804a11c:	f885 6111 	strb.w	r6, [r5, #273]	; 0x111
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 804a120:	f7fe fee4 	bl	8048eec <SecureElementGetJoinEui>
 804a124:	2208      	movs	r2, #8
 804a126:	4601      	mov	r1, r0
 804a128:	f505 7089 	add.w	r0, r5, #274	; 0x112
 804a12c:	f004 fb67 	bl	804e7fe <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 804a130:	f7fe fec6 	bl	8048ec0 <SecureElementGetDevEui>
 804a134:	2208      	movs	r2, #8
 804a136:	4601      	mov	r1, r0
 804a138:	f505 708d 	add.w	r0, r5, #282	; 0x11a
 804a13c:	f004 fb5f 	bl	804e7fe <memcpy1>
            allowDelayedTx = false;
 804a140:	4620      	mov	r0, r4
}
 804a142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = ScheduleTx( allowDelayedTx );
 804a146:	f7ff be07 	b.w	8049d58 <ScheduleTx>
    bool allowDelayedTx = true;
 804a14a:	2001      	movs	r0, #1
 804a14c:	e7f9      	b.n	804a142 <SendReJoinReq+0x4e>
 804a14e:	bf00      	nop
 804a150:	200029c4 	.word	0x200029c4

0804a154 <SetTxContinuousWave>:
{
 804a154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 804a156:	4c12      	ldr	r4, [pc, #72]	; (804a1a0 <SetTxContinuousWave+0x4c>)
    continuousWave.Timeout = timeout;
 804a158:	f8ad 000c 	strh.w	r0, [sp, #12]
    continuousWave.Channel = MacCtx.Channel;
 804a15c:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 804a160:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a164:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a168:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 804a16c:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 804a170:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 804a174:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 804a178:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 804a17c:	9201      	str	r2, [sp, #4]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 804a17e:	7818      	ldrb	r0, [r3, #0]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 804a180:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 804a184:	9202      	str	r2, [sp, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 804a186:	4669      	mov	r1, sp
 804a188:	f002 fcf6 	bl	804cb78 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 804a18c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
}
 804a190:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 804a192:	f043 0302 	orr.w	r3, r3, #2
 804a196:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
}
 804a19a:	b004      	add	sp, #16
 804a19c:	bd10      	pop	{r4, pc}
 804a19e:	bf00      	nop
 804a1a0:	200029c4 	.word	0x200029c4

0804a1a4 <SetTxContinuousWave1>:
    Radio.SetTxContinuousWave( frequency, power, timeout );
 804a1a4:	4b08      	ldr	r3, [pc, #32]	; (804a1c8 <SetTxContinuousWave1+0x24>)
{
 804a1a6:	b510      	push	{r4, lr}
 804a1a8:	460c      	mov	r4, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 804a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a1ac:	b251      	sxtb	r1, r2
 804a1ae:	4602      	mov	r2, r0
 804a1b0:	4620      	mov	r0, r4
 804a1b2:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 804a1b4:	4a05      	ldr	r2, [pc, #20]	; (804a1cc <SetTxContinuousWave1+0x28>)
 804a1b6:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
 804a1ba:	f043 0302 	orr.w	r3, r3, #2
 804a1be:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
 804a1c2:	2000      	movs	r0, #0
 804a1c4:	bd10      	pop	{r4, pc}
 804a1c6:	bf00      	nop
 804a1c8:	08053dd0 	.word	0x08053dd0
 804a1cc:	200029c4 	.word	0x200029c4

0804a1d0 <GetCtxs>:
{
 804a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 804a1d2:	4d18      	ldr	r5, [pc, #96]	; (804a234 <GetCtxs+0x64>)
 804a1d4:	4c18      	ldr	r4, [pc, #96]	; (804a238 <GetCtxs+0x68>)
 804a1d6:	f205 438c 	addw	r3, r5, #1164	; 0x48c
 804a1da:	6023      	str	r3, [r4, #0]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 804a1dc:	f104 0014 	add.w	r0, r4, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 804a1e0:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 804a1e4:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 804a1e6:	f002 f857 	bl	804c298 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 804a1ea:	a902      	add	r1, sp, #8
 804a1ec:	2300      	movs	r3, #0
 804a1ee:	f841 3d04 	str.w	r3, [r1, #-4]!
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 804a1f2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 804a1f6:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 804a1f8:	7818      	ldrb	r0, [r3, #0]
 804a1fa:	f002 fc2e 	bl	804ca5a <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 804a1fe:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 804a200:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 804a202:	f104 001c 	add.w	r0, r4, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 804a206:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 804a208:	f7fe fd6a 	bl	8048ce0 <SecureElementGetNvmCtx>
 804a20c:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 804a20e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 804a212:	f001 fcc1 	bl	804bb98 <LoRaMacCommandsGetNvmCtx>
 804a216:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 804a218:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 804a21c:	f001 fc6c 	bl	804baf8 <LoRaMacClassBGetNvmCtx>
 804a220:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 804a222:	f104 0034 	add.w	r0, r4, #52	; 0x34
 804a226:	f001 fdcf 	bl	804bdc8 <LoRaMacConfirmQueueGetNvmCtx>
 804a22a:	6320      	str	r0, [r4, #48]	; 0x30
}
 804a22c:	4620      	mov	r0, r4
 804a22e:	b003      	add	sp, #12
 804a230:	bd30      	pop	{r4, r5, pc}
 804a232:	bf00      	nop
 804a234:	200029c4 	.word	0x200029c4
 804a238:	20006000 	.word	0x20006000

0804a23c <RestoreCtxs>:
{
 804a23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( contexts == NULL )
 804a23e:	4604      	mov	r4, r0
 804a240:	2800      	cmp	r0, #0
 804a242:	d033      	beq.n	804a2ac <RestoreCtxs+0x70>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 804a244:	4d1d      	ldr	r5, [pc, #116]	; (804a2bc <RestoreCtxs+0x80>)
 804a246:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804a24a:	2b01      	cmp	r3, #1
 804a24c:	d130      	bne.n	804a2b0 <RestoreCtxs+0x74>
    if( contexts->MacNvmCtx != NULL )
 804a24e:	6801      	ldr	r1, [r0, #0]
 804a250:	b121      	cbz	r1, 804a25c <RestoreCtxs+0x20>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 804a252:	8882      	ldrh	r2, [r0, #4]
 804a254:	f205 408c 	addw	r0, r5, #1164	; 0x48c
 804a258:	f004 fad1 	bl	804e7fe <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 804a25c:	2302      	movs	r3, #2
    params.NvmCtx = contexts->RegionNvmCtx;
 804a25e:	a902      	add	r1, sp, #8
    params.Type = INIT_TYPE_RESTORE_CTX;
 804a260:	f88d 3004 	strb.w	r3, [sp, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 804a264:	68a3      	ldr	r3, [r4, #8]
 804a266:	f841 3d08 	str.w	r3, [r1, #-8]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a26a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804a26e:	7818      	ldrb	r0, [r3, #0]
 804a270:	f002 fbed 	bl	804ca4e <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 804a274:	69a0      	ldr	r0, [r4, #24]
 804a276:	f7fe fd25 	bl	8048cc4 <SecureElementRestoreNvmCtx>
 804a27a:	b110      	cbz	r0, 804a282 <RestoreCtxs+0x46>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 804a27c:	2011      	movs	r0, #17
}
 804a27e:	b003      	add	sp, #12
 804a280:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 804a282:	6920      	ldr	r0, [r4, #16]
 804a284:	f001 fffa 	bl	804c27c <LoRaMacCryptoRestoreNvmCtx>
 804a288:	2800      	cmp	r0, #0
 804a28a:	d1f7      	bne.n	804a27c <RestoreCtxs+0x40>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 804a28c:	6a20      	ldr	r0, [r4, #32]
 804a28e:	f001 fc75 	bl	804bb7c <LoRaMacCommandsRestoreNvmCtx>
 804a292:	b978      	cbnz	r0, 804a2b4 <RestoreCtxs+0x78>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 804a294:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 804a296:	f001 fc2d 	bl	804baf4 <LoRaMacClassBRestoreNvmCtx>
 804a29a:	b168      	cbz	r0, 804a2b8 <RestoreCtxs+0x7c>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 804a29c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 804a29e:	f001 fd87 	bl	804bdb0 <LoRaMacConfirmQueueRestoreNvmCtx>
    return LORAMAC_STATUS_OK;
 804a2a2:	2800      	cmp	r0, #0
 804a2a4:	bf0c      	ite	eq
 804a2a6:	2015      	moveq	r0, #21
 804a2a8:	2000      	movne	r0, #0
 804a2aa:	e7e8      	b.n	804a27e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a2ac:	2003      	movs	r0, #3
 804a2ae:	e7e6      	b.n	804a27e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_BUSY;
 804a2b0:	2001      	movs	r0, #1
 804a2b2:	e7e4      	b.n	804a27e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804a2b4:	2013      	movs	r0, #19
 804a2b6:	e7e2      	b.n	804a27e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 804a2b8:	2014      	movs	r0, #20
 804a2ba:	e7e0      	b.n	804a27e <RestoreCtxs+0x42>
 804a2bc:	200029c4 	.word	0x200029c4

0804a2c0 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 804a2c0:	4602      	mov	r2, r0
 804a2c2:	b1d0      	cbz	r0, 804a2fa <DetermineFrameType+0x3a>
 804a2c4:	b1c9      	cbz	r1, 804a2fa <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 804a2c6:	7b03      	ldrb	r3, [r0, #12]
 804a2c8:	f013 000f 	ands.w	r0, r3, #15
 804a2cc:	d005      	beq.n	804a2da <DetermineFrameType+0x1a>
 804a2ce:	f892 3020 	ldrb.w	r3, [r2, #32]
 804a2d2:	b113      	cbz	r3, 804a2da <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 804a2d4:	2000      	movs	r0, #0
 804a2d6:	7008      	strb	r0, [r1, #0]
 804a2d8:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 804a2da:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 804a2de:	b91b      	cbnz	r3, 804a2e8 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_B;
 804a2e0:	2201      	movs	r2, #1
 804a2e2:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 804a2e4:	4618      	mov	r0, r3
 804a2e6:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 804a2e8:	b948      	cbnz	r0, 804a2fe <DetermineFrameType+0x3e>
 804a2ea:	f892 3020 	ldrb.w	r3, [r2, #32]
 804a2ee:	b913      	cbnz	r3, 804a2f6 <DetermineFrameType+0x36>
        *fType = FRAME_TYPE_C;
 804a2f0:	2302      	movs	r3, #2
        *fType = FRAME_TYPE_D;
 804a2f2:	700b      	strb	r3, [r1, #0]
 804a2f4:	4770      	bx	lr
 804a2f6:	2303      	movs	r3, #3
 804a2f8:	e7fb      	b.n	804a2f2 <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a2fa:	2003      	movs	r0, #3
 804a2fc:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 804a2fe:	2017      	movs	r0, #23
}
 804a300:	4770      	bx	lr
	...

0804a304 <LoRaMacProcess>:
{
 804a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a308:	b0a1      	sub	sp, #132	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a30a:	f3ef 8310 	mrs	r3, PRIMASK
    events = LoRaMacRadioEvents;
 804a30e:	4cbd      	ldr	r4, [pc, #756]	; (804a604 <LoRaMacProcess+0x300>)
    LoRaMacRadioEvents.Value = 0;
 804a310:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 804a312:	6825      	ldr	r5, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 804a314:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a316:	f383 8810 	msr	PRIMASK, r3
    if( events.Value != 0 )
 804a31a:	2d00      	cmp	r5, #0
 804a31c:	f000 80c3 	beq.w	804a4a6 <LoRaMacProcess+0x1a2>
 804a320:	b2ed      	uxtb	r5, r5
        if( events.Events.TxDone == 1 )
 804a322:	06e9      	lsls	r1, r5, #27
 804a324:	d552      	bpl.n	804a3cc <LoRaMacProcess+0xc8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804a326:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a32a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a32e:	2b02      	cmp	r3, #2
 804a330:	d002      	beq.n	804a338 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 804a332:	4bb5      	ldr	r3, [pc, #724]	; (804a608 <LoRaMacProcess+0x304>)
 804a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804a336:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 804a338:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 804a33c:	48b3      	ldr	r0, [pc, #716]	; (804a60c <LoRaMacProcess+0x308>)
 804a33e:	f004 f997 	bl	804e670 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 804a342:	48b2      	ldr	r0, [pc, #712]	; (804a60c <LoRaMacProcess+0x308>)
 804a344:	f004 f8fa 	bl	804e53c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 804a348:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 804a34c:	48b0      	ldr	r0, [pc, #704]	; (804a610 <LoRaMacProcess+0x30c>)
 804a34e:	f004 f98f 	bl	804e670 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 804a352:	48af      	ldr	r0, [pc, #700]	; (804a610 <LoRaMacProcess+0x30c>)
 804a354:	f004 f8f2 	bl	804e53c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 804a358:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a35c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804a360:	2a02      	cmp	r2, #2
 804a362:	d002      	beq.n	804a36a <LoRaMacProcess+0x66>
 804a364:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 804a368:	b182      	cbz	r2, 804a38c <LoRaMacProcess+0x88>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 804a36a:	a920      	add	r1, sp, #128	; 0x80
 804a36c:	2216      	movs	r2, #22
 804a36e:	f801 2d60 	strb.w	r2, [r1, #-96]!
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a372:	7818      	ldrb	r0, [r3, #0]
 804a374:	f002 fb5b 	bl	804ca2e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804a378:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a37c:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804a37e:	4401      	add	r1, r0
 804a380:	48a4      	ldr	r0, [pc, #656]	; (804a614 <LoRaMacProcess+0x310>)
 804a382:	f004 f975 	bl	804e670 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 804a386:	48a3      	ldr	r0, [pc, #652]	; (804a614 <LoRaMacProcess+0x310>)
 804a388:	f004 f8d8 	bl	804e53c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 804a38c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a390:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 804a394:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    txDone.Channel = MacCtx.Channel;
 804a398:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 804a39c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 804a3a0:	2a00      	cmp	r2, #0
 804a3a2:	f040 812c 	bne.w	804a5fe <LoRaMacProcess+0x2fa>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804a3a6:	4e9c      	ldr	r6, [pc, #624]	; (804a618 <LoRaMacProcess+0x314>)
        txDone.Joined  = true;
 804a3a8:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804a3ac:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804a3ae:	6832      	ldr	r2, [r6, #0]
 804a3b0:	9215      	str	r2, [sp, #84]	; 0x54
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804a3b2:	a914      	add	r1, sp, #80	; 0x50
 804a3b4:	f002 fb45 	bl	804ca42 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 804a3b8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a3bc:	6832      	ldr	r2, [r6, #0]
 804a3be:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    if( MacCtx.NodeAckRequested == false )
 804a3c2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a3c6:	b90b      	cbnz	r3, 804a3cc <LoRaMacProcess+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a3c8:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 804a3cc:	072a      	lsls	r2, r5, #28
 804a3ce:	d540      	bpl.n	804a452 <LoRaMacProcess+0x14e>
    uint8_t *payload = RxDoneParams.Payload;
 804a3d0:	4b92      	ldr	r3, [pc, #584]	; (804a61c <LoRaMacProcess+0x318>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a3d2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 804a3d6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 804a3da:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 804a3de:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 804a3e2:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a3e6:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 804a3e8:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 804a3ec:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint32_t downLinkCounter = 0;
 804a3f0:	2300      	movs	r3, #0
 804a3f2:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 804a3f4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 804a3f8:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 804a3fc:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 804a400:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 804a404:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 804a408:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 804a40c:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 804a410:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 804a414:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 804a418:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 804a41c:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 804a420:	4b79      	ldr	r3, [pc, #484]	; (804a608 <LoRaMacProcess+0x304>)
    MacCtx.McpsIndication.Rssi = rssi;
 804a422:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
 804a426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 804a428:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    Radio.Sleep( );
 804a42c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 804a42e:	4878      	ldr	r0, [pc, #480]	; (804a610 <LoRaMacProcess+0x30c>)
 804a430:	f004 f8f6 	bl	804e620 <TimerStop>
    PRINTF("RxDone\r\n");
 804a434:	487a      	ldr	r0, [pc, #488]	; (804a620 <LoRaMacProcess+0x31c>)
 804a436:	f004 f97d 	bl	804e734 <TraceSend>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 804a43a:	4641      	mov	r1, r8
 804a43c:	4648      	mov	r0, r9
 804a43e:	f001 fb67 	bl	804bb10 <LoRaMacClassBRxBeacon>
 804a442:	4683      	mov	fp, r0
 804a444:	2800      	cmp	r0, #0
 804a446:	f000 80f7 	beq.w	804a638 <LoRaMacProcess+0x334>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 804a44a:	f8a4 a47a 	strh.w	sl, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 804a44e:	f884 747c 	strb.w	r7, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 804a452:	076f      	lsls	r7, r5, #29
 804a454:	d51b      	bpl.n	804a48e <LoRaMacProcess+0x18a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804a456:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a45a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a45e:	2b02      	cmp	r3, #2
 804a460:	d002      	beq.n	804a468 <LoRaMacProcess+0x164>
        Radio.Sleep( );
 804a462:	4b69      	ldr	r3, [pc, #420]	; (804a608 <LoRaMacProcess+0x304>)
 804a464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804a466:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 804a468:	f7fe fd52 	bl	8048f10 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 804a46c:	2002      	movs	r0, #2
 804a46e:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 804a472:	f001 fd13 	bl	804be9c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 804a476:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a47a:	b113      	cbz	r3, 804a482 <LoRaMacProcess+0x17e>
        MacCtx.AckTimeoutRetry = true;
 804a47c:	2301      	movs	r3, #1
 804a47e:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 804a482:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a486:	f043 0320 	orr.w	r3, r3, #32
 804a48a:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 804a48e:	07ae      	lsls	r6, r5, #30
 804a490:	d503      	bpl.n	804a49a <LoRaMacProcess+0x196>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 804a492:	2106      	movs	r1, #6
 804a494:	2005      	movs	r0, #5
 804a496:	f7fe fdef 	bl	8049078 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 804a49a:	07ed      	lsls	r5, r5, #31
 804a49c:	d503      	bpl.n	804a4a6 <LoRaMacProcess+0x1a2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 804a49e:	2104      	movs	r1, #4
 804a4a0:	2003      	movs	r0, #3
 804a4a2:	f7fe fde9 	bl	8049078 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 804a4a6:	f001 fb50 	bl	804bb4a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 804a4aa:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 804a4ae:	0690      	lsls	r0, r2, #26
 804a4b0:	d56a      	bpl.n	804a588 <LoRaMacProcess+0x284>
    MacCtx.AllowRequests = requestState;
 804a4b2:	2300      	movs	r3, #0
 804a4b4:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 804a4b8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a4bc:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a4be:	bf44      	itt	mi
 804a4c0:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 804a4c4:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 804a4c8:	f012 0f05 	tst.w	r2, #5
 804a4cc:	f000 82e0 	beq.w	804aa90 <LoRaMacProcess+0x78c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804a4d0:	200b      	movs	r0, #11
 804a4d2:	f001 fcfb 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 804a4d6:	2800      	cmp	r0, #0
 804a4d8:	f000 82da 	beq.w	804aa90 <LoRaMacProcess+0x78c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 804a4dc:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804a4e0:	07df      	lsls	r7, r3, #31
 804a4e2:	f100 82d5 	bmi.w	804aa90 <LoRaMacProcess+0x78c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a4e6:	075e      	lsls	r6, r3, #29
 804a4e8:	f140 82d2 	bpl.w	804aa90 <LoRaMacProcess+0x78c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a4ec:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a4f0:	f023 0302 	bic.w	r3, r3, #2
 804a4f4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 804a4f8:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 804a4fc:	bb82      	cbnz	r2, 804a560 <LoRaMacProcess+0x25c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804a4fe:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
 804a502:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 804a506:	bf1e      	ittt	ne
 804a508:	462b      	movne	r3, r5
 804a50a:	f362 0300 	bfine	r3, r2, #0, #1
 804a50e:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a512:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a516:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804a518:	bf44      	itt	mi
 804a51a:	f36f 0382 	bfcmi	r3, #2, #1
 804a51e:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 804a522:	2301      	movs	r3, #1
 804a524:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 804a528:	b121      	cbz	r1, 804a534 <LoRaMacProcess+0x230>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 804a52a:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a52e:	483d      	ldr	r0, [pc, #244]	; (804a624 <LoRaMacProcess+0x320>)
 804a530:	681b      	ldr	r3, [r3, #0]
 804a532:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 804a534:	076d      	lsls	r5, r5, #29
 804a536:	d50b      	bpl.n	804a550 <LoRaMacProcess+0x24c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 804a538:	483b      	ldr	r0, [pc, #236]	; (804a628 <LoRaMacProcess+0x324>)
 804a53a:	f001 fcdf 	bl	804befc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 804a53e:	f001 fd09 	bl	804bf54 <LoRaMacConfirmQueueGetCnt>
 804a542:	b128      	cbz	r0, 804a550 <LoRaMacProcess+0x24c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 804a544:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a548:	f043 0304 	orr.w	r3, r3, #4
 804a54c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 804a550:	f001 faea 	bl	804bb28 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 804a554:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a558:	f36f 1345 	bfc	r3, #5, #1
 804a55c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 804a560:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a564:	b96b      	cbnz	r3, 804a582 <LoRaMacProcess+0x27e>
        bool isStickyMacCommandPending = false;
 804a566:	a820      	add	r0, sp, #128	; 0x80
 804a568:	f800 3d30 	strb.w	r3, [r0, #-48]!
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 804a56c:	f001 fbf6 	bl	804bd5c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 804a570:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 804a574:	b12b      	cbz	r3, 804a582 <LoRaMacProcess+0x27e>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804a576:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a57a:	f043 0310 	orr.w	r3, r3, #16
 804a57e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 804a582:	2301      	movs	r3, #1
 804a584:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 804a588:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a58c:	0718      	lsls	r0, r3, #28
 804a58e:	d508      	bpl.n	804a5a2 <LoRaMacProcess+0x29e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 804a590:	f36f 03c3 	bfc	r3, #3, #1
 804a594:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 804a598:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a59c:	4823      	ldr	r0, [pc, #140]	; (804a62c <LoRaMacProcess+0x328>)
 804a59e:	68db      	ldr	r3, [r3, #12]
 804a5a0:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 804a5a2:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a5a6:	06d9      	lsls	r1, r3, #27
 804a5a8:	d510      	bpl.n	804a5cc <LoRaMacProcess+0x2c8>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 804a5aa:	2306      	movs	r3, #6
 804a5ac:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a5b0:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a5b4:	2500      	movs	r5, #0
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a5b6:	68db      	ldr	r3, [r3, #12]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a5b8:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a5bc:	a814      	add	r0, sp, #80	; 0x50
 804a5be:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 804a5c0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a5c4:	f365 1304 	bfi	r3, r5, #4, #1
 804a5c8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a5cc:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a5d0:	079a      	lsls	r2, r3, #30
 804a5d2:	d508      	bpl.n	804a5e6 <LoRaMacProcess+0x2e2>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 804a5d4:	f36f 0341 	bfc	r3, #1, #1
 804a5d8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 804a5dc:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a5e0:	4813      	ldr	r0, [pc, #76]	; (804a630 <LoRaMacProcess+0x32c>)
 804a5e2:	685b      	ldr	r3, [r3, #4]
 804a5e4:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 804a5e6:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 804a5ea:	2b02      	cmp	r3, #2
 804a5ec:	d104      	bne.n	804a5f8 <LoRaMacProcess+0x2f4>
    	PRINTF("Recebe em Classe C\r\n");
 804a5ee:	4811      	ldr	r0, [pc, #68]	; (804a634 <LoRaMacProcess+0x330>)
 804a5f0:	f004 f8a0 	bl	804e734 <TraceSend>
        OpenContinuousRxCWindow( );
 804a5f4:	f7fe fe00 	bl	80491f8 <OpenContinuousRxCWindow>
}
 804a5f8:	b021      	add	sp, #132	; 0x84
 804a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txDone.Joined  = true;
 804a5fe:	2201      	movs	r2, #1
 804a600:	e6d1      	b.n	804a3a6 <LoRaMacProcess+0xa2>
 804a602:	bf00      	nop
 804a604:	200029c4 	.word	0x200029c4
 804a608:	08053dd0 	.word	0x08053dd0
 804a60c:	20002d48 	.word	0x20002d48
 804a610:	20002d60 	.word	0x20002d60
 804a614:	20002dc0 	.word	0x20002dc0
 804a618:	20005fec 	.word	0x20005fec
 804a61c:	20005ff0 	.word	0x20005ff0
 804a620:	080543b2 	.word	0x080543b2
 804a624:	20002e04 	.word	0x20002e04
 804a628:	20002e18 	.word	0x20002e18
 804a62c:	20002e2c 	.word	0x20002e2c
 804a630:	20002de4 	.word	0x20002de4
 804a634:	080543cc 	.word	0x080543cc
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 804a638:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a63c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a640:	2b01      	cmp	r3, #1
 804a642:	d10c      	bne.n	804a65e <LoRaMacProcess+0x35a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 804a644:	f001 fa68 	bl	804bb18 <LoRaMacClassBIsPingExpected>
 804a648:	4682      	mov	sl, r0
 804a64a:	b1c8      	cbz	r0, 804a680 <LoRaMacProcess+0x37c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804a64c:	4658      	mov	r0, fp
 804a64e:	f001 fa58 	bl	804bb02 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 804a652:	4658      	mov	r0, fp
 804a654:	f001 fa5a 	bl	804bb0c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 804a658:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 804a65a:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 804a65e:	f899 a000 	ldrb.w	sl, [r9]
    switch( macHdr.Bits.MType )
 804a662:	ea4f 135a 	mov.w	r3, sl, lsr #5
 804a666:	3b01      	subs	r3, #1
 804a668:	2b06      	cmp	r3, #6
 804a66a:	f200 81fe 	bhi.w	804aa6a <LoRaMacProcess+0x766>
 804a66e:	e8df f013 	tbh	[pc, r3, lsl #1]
 804a672:	0013      	.short	0x0013
 804a674:	009401fc 	.word	0x009401fc
 804a678:	009101fc 	.word	0x009101fc
 804a67c:	01e701fc 	.word	0x01e701fc
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 804a680:	f001 fa4c 	bl	804bb1c <LoRaMacClassBIsMulticastExpected>
 804a684:	2800      	cmp	r0, #0
 804a686:	d0ea      	beq.n	804a65e <LoRaMacProcess+0x35a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804a688:	4650      	mov	r0, sl
 804a68a:	f001 fa3b 	bl	804bb04 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 804a68e:	4650      	mov	r0, sl
 804a690:	f001 fa3d 	bl	804bb0e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 804a694:	2305      	movs	r3, #5
 804a696:	e7e0      	b.n	804a65a <LoRaMacProcess+0x356>
            macMsgJoinAccept.BufSize = size;
 804a698:	fa5f f888 	uxtb.w	r8, r8
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a69c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.BufSize = size;
 804a6a0:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a6a4:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
            macMsgJoinAccept.Buffer = payload;
 804a6a8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a6ac:	b11e      	cbz	r6, 804a6b6 <LoRaMacProcess+0x3b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a6ae:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 804a6b0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 804a6b4:	e10e      	b.n	804a8d4 <LoRaMacProcess+0x5d0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 804a6b6:	f7fe fc19 	bl	8048eec <SecureElementGetJoinEui>
 804a6ba:	aa0a      	add	r2, sp, #40	; 0x28
 804a6bc:	4601      	mov	r1, r0
 804a6be:	20ff      	movs	r0, #255	; 0xff
 804a6c0:	f001 ffa8 	bl	804c614 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 804a6c4:	2800      	cmp	r0, #0
 804a6c6:	d15d      	bne.n	804a784 <LoRaMacProcess+0x480>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a6c8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 804a6cc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 804a6d0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a6d4:	0412      	lsls	r2, r2, #16
 804a6d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 804a6da:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a6de:	430a      	orrs	r2, r1
 804a6e0:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 804a6e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a6e4:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 804a6e6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 804a6ea:	f3c2 1202 	ubfx	r2, r2, #4, #3
 804a6ee:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804a6f2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 804a6f6:	f3c2 0203 	ubfx	r2, r2, #0, #4
 804a6fa:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804a6fe:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 804a702:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 804a706:	b3da      	cbz	r2, 804a780 <LoRaMacProcess+0x47c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 804a708:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 804a70c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 804a710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804a714:	434a      	muls	r2, r1
 804a716:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 804a71a:	2600      	movs	r6, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 804a71c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
                applyCFList.Size = size - 17;
 804a720:	f1a8 0811 	sub.w	r8, r8, #17
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 804a724:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 804a728:	f883 61d2 	strb.w	r6, [r3, #466]	; 0x1d2
                applyCFList.Size = size - 17;
 804a72c:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
                applyCFList.Payload = macMsgJoinAccept.CFList;
 804a730:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 804a734:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 804a736:	9208      	str	r2, [sp, #32]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 804a738:	a908      	add	r1, sp, #32
 804a73a:	f002 f99e 	bl	804ca7a <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 804a73e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a742:	2202      	movs	r2, #2
 804a744:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804a748:	4630      	mov	r0, r6
 804a74a:	f001 fbbf 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 804a74e:	b118      	cbz	r0, 804a758 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 804a750:	4631      	mov	r1, r6
 804a752:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 804a754:	f001 fb6e 	bl	804be34 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 804a758:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a75c:	2b00      	cmp	r3, #0
 804a75e:	f000 818a 	beq.w	804aa76 <LoRaMacProcess+0x772>
        if( MacCtx.McpsConfirm.AckReceived == true )
 804a762:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 804a766:	b113      	cbz	r3, 804a76e <LoRaMacProcess+0x46a>
            OnAckTimeoutTimerEvent( NULL );
 804a768:	2000      	movs	r0, #0
 804a76a:	f7fe fc41 	bl	8048ff0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 804a76e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a772:	f043 0320 	orr.w	r3, r3, #32
 804a776:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 804a77a:	f7fe fbc9 	bl	8048f10 <UpdateRxSlotIdleState>
 804a77e:	e668      	b.n	804a452 <LoRaMacProcess+0x14e>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 804a780:	2201      	movs	r2, #1
 804a782:	e7c1      	b.n	804a708 <LoRaMacProcess+0x404>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804a784:	4630      	mov	r0, r6
 804a786:	f001 fba1 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 804a78a:	2800      	cmp	r0, #0
 804a78c:	d0e4      	beq.n	804a758 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 804a78e:	4631      	mov	r1, r6
 804a790:	2007      	movs	r0, #7
 804a792:	e7df      	b.n	804a754 <LoRaMacProcess+0x450>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 804a794:	2301      	movs	r3, #1
 804a796:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804a79a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a79e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804a7a2:	f88d 2016 	strb.w	r2, [sp, #22]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 804a7a6:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 804a7aa:	f88d 2015 	strb.w	r2, [sp, #21]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 804a7ae:	220d      	movs	r2, #13
 804a7b0:	f88d 2014 	strb.w	r2, [sp, #20]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 804a7b4:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 804a7b8:	b112      	cbz	r2, 804a7c0 <LoRaMacProcess+0x4bc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 804a7ba:	220e      	movs	r2, #14
 804a7bc:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a7c0:	7818      	ldrb	r0, [r3, #0]
 804a7c2:	a905      	add	r1, sp, #20
 804a7c4:	f002 f933 	bl	804ca2e <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 804a7c8:	f1a8 030d 	sub.w	r3, r8, #13
 804a7cc:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a7ce:	9006      	str	r0, [sp, #24]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 804a7d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 804a7d4:	b200      	sxth	r0, r0
 804a7d6:	4283      	cmp	r3, r0
 804a7d8:	f73f af69 	bgt.w	804a6ae <LoRaMacProcess+0x3aa>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 804a7dc:	4baa      	ldr	r3, [pc, #680]	; (804aa88 <LoRaMacProcess+0x784>)
 804a7de:	931d      	str	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a7e0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804a7e4:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a7e6:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 804a7e8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
            macMsgData.BufSize = size;
 804a7ec:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804a7f0:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a7f4:	f002 f81c 	bl	804c830 <LoRaMacParserData>
 804a7f8:	2800      	cmp	r0, #0
 804a7fa:	f47f af58 	bne.w	804a6ae <LoRaMacProcess+0x3aa>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 804a7fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 804a800:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 804a804:	a908      	add	r1, sp, #32
 804a806:	4658      	mov	r0, fp
 804a808:	f7ff fd5a 	bl	804a2c0 <DetermineFrameType>
 804a80c:	2800      	cmp	r0, #0
 804a80e:	f47f af4e 	bne.w	804a6ae <LoRaMacProcess+0x3aa>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 804a812:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a816:	9916      	ldr	r1, [sp, #88]	; 0x58
            downLinkCounter = 0;
 804a818:	9007      	str	r0, [sp, #28]
 804a81a:	461a      	mov	r2, r3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 804a81c:	4681      	mov	r9, r0
 804a81e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 804a820:	9003      	str	r0, [sp, #12]
 804a822:	4288      	cmp	r0, r1
 804a824:	d114      	bne.n	804a850 <LoRaMacProcess+0x54c>
 804a826:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 804a82a:	b188      	cbz	r0, 804a850 <LoRaMacProcess+0x54c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 804a82c:	2028      	movs	r0, #40	; 0x28
 804a82e:	fb00 3009 	mla	r0, r0, r9, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 804a832:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 804a834:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 804a838:	6812      	ldr	r2, [r2, #0]
 804a83a:	9207      	str	r2, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804a83c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804a840:	2a02      	cmp	r2, #2
 804a842:	d102      	bne.n	804a84a <LoRaMacProcess+0x546>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 804a844:	2203      	movs	r2, #3
 804a846:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
                    multicast = 1;
 804a84a:	f04f 0801 	mov.w	r8, #1
 804a84e:	e009      	b.n	804a864 <LoRaMacProcess+0x560>
 804a850:	f109 0901 	add.w	r9, r9, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 804a854:	f1b9 0f04 	cmp.w	r9, #4
 804a858:	f102 0228 	add.w	r2, r2, #40	; 0x28
 804a85c:	d1df      	bne.n	804a81e <LoRaMacProcess+0x51a>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a85e:	9603      	str	r6, [sp, #12]
            multicast = 0;
 804a860:	f04f 0800 	mov.w	r8, #0
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 804a864:	2215      	movs	r2, #21
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a866:	a905      	add	r1, sp, #20
 804a868:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 804a86a:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a86e:	f002 f8de 	bl	804ca2e <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 804a872:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a876:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 804a878:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804a87c:	f892 21d2 	ldrb.w	r2, [r2, #466]	; 0x1d2
 804a880:	b281      	uxth	r1, r0
    switch( addrID )
 804a882:	f1b9 0f04 	cmp.w	r9, #4
 804a886:	d840      	bhi.n	804a90a <LoRaMacProcess+0x606>
 804a888:	e8df f009 	tbb	[pc, r9]
 804a88c:	312f3303 	.word	0x312f3303
 804a890:	27          	.byte	0x27
 804a891:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_0;
 804a892:	2604      	movs	r6, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 804a894:	ab07      	add	r3, sp, #28
 804a896:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 804a89a:	4630      	mov	r0, r6
 804a89c:	f001 fd0e 	bl	804c2bc <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804a8a0:	b3a8      	cbz	r0, 804a90e <LoRaMacProcess+0x60a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 804a8a2:	2807      	cmp	r0, #7
 804a8a4:	d12b      	bne.n	804a8fe <LoRaMacProcess+0x5fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 804a8a6:	2308      	movs	r3, #8
 804a8a8:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 804a8ac:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a8b0:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 804a8b4:	b95a      	cbnz	r2, 804a8ce <LoRaMacProcess+0x5ca>
 804a8b6:	f00a 02e0 	and.w	r2, sl, #224	; 0xe0
 804a8ba:	2aa0      	cmp	r2, #160	; 0xa0
 804a8bc:	d107      	bne.n	804a8ce <LoRaMacProcess+0x5ca>
 804a8be:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 804a8c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 804a8c4:	4291      	cmp	r1, r2
 804a8c6:	d102      	bne.n	804a8ce <LoRaMacProcess+0x5ca>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 804a8c8:	2201      	movs	r2, #1
 804a8ca:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a8ce:	9b07      	ldr	r3, [sp, #28]
 804a8d0:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 804a8d4:	f7fe fbb0 	bl	8049038 <PrepareRxDoneAbort>
 804a8d8:	e5bb      	b.n	804a452 <LoRaMacProcess+0x14e>
            if( lrWanVersion.Fields.Minor == 1 )
 804a8da:	2a01      	cmp	r2, #1
 804a8dc:	d10b      	bne.n	804a8f6 <LoRaMacProcess+0x5f2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 804a8de:	b163      	cbz	r3, 804a8fa <LoRaMacProcess+0x5f6>
                    *fCntID = A_FCNT_DOWN;
 804a8e0:	2b03      	cmp	r3, #3
 804a8e2:	bf14      	ite	ne
 804a8e4:	2601      	movne	r6, #1
 804a8e6:	2602      	moveq	r6, #2
 804a8e8:	e7d4      	b.n	804a894 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_2;
 804a8ea:	2606      	movs	r6, #6
 804a8ec:	e7d2      	b.n	804a894 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_3;
 804a8ee:	2607      	movs	r6, #7
 804a8f0:	e7d0      	b.n	804a894 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_1;
 804a8f2:	2605      	movs	r6, #5
 804a8f4:	e7ce      	b.n	804a894 <LoRaMacProcess+0x590>
                *fCntID = FCNT_DOWN;
 804a8f6:	2603      	movs	r6, #3
 804a8f8:	e7cc      	b.n	804a894 <LoRaMacProcess+0x590>
                    *fCntID = A_FCNT_DOWN;
 804a8fa:	2602      	movs	r6, #2
 804a8fc:	e7ca      	b.n	804a894 <LoRaMacProcess+0x590>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 804a8fe:	2808      	cmp	r0, #8
 804a900:	d103      	bne.n	804a90a <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 804a902:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a904:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 804a908:	e7e1      	b.n	804a8ce <LoRaMacProcess+0x5ca>
 804a90a:	2301      	movs	r3, #1
 804a90c:	e7fa      	b.n	804a904 <LoRaMacProcess+0x600>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 804a90e:	f8cd b000 	str.w	fp, [sp]
 804a912:	9b07      	ldr	r3, [sp, #28]
 804a914:	9903      	ldr	r1, [sp, #12]
 804a916:	4632      	mov	r2, r6
 804a918:	4648      	mov	r0, r9
 804a91a:	f001 fdb3 	bl	804c484 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804a91e:	b120      	cbz	r0, 804a92a <LoRaMacProcess+0x626>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 804a920:	2802      	cmp	r0, #2
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 804a922:	bf0c      	ite	eq
 804a924:	230b      	moveq	r3, #11
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 804a926:	230c      	movne	r3, #12
 804a928:	e6c2      	b.n	804a6b0 <LoRaMacProcess+0x3ac>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a92a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 804a92e:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a932:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a936:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 804a93a:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 804a93c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 804a940:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 804a944:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 804a948:	bf98      	it	ls
 804a94a:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a94e:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a952:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 804a954:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 804a958:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 804a95c:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a960:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a964:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 804a968:	bf98      	it	ls
 804a96a:	f8c3 00f4 	strls.w	r0, [r3, #244]	; 0xf4
            if( multicast == 1 )
 804a96e:	f1b8 0f00 	cmp.w	r8, #0
 804a972:	d01b      	beq.n	804a9ac <LoRaMacProcess+0x6a8>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 804a974:	2302      	movs	r3, #2
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804a976:	2901      	cmp	r1, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 804a978:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 804a97c:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 804a980:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804a984:	d805      	bhi.n	804a992 <LoRaMacProcess+0x68e>
        if( request == MCPS_CONFIRMED )
 804a986:	2a01      	cmp	r2, #1
 804a988:	d101      	bne.n	804a98e <LoRaMacProcess+0x68a>
            if( fCtrl.Bits.Ack == 1 )
 804a98a:	069b      	lsls	r3, r3, #26
 804a98c:	d501      	bpl.n	804a992 <LoRaMacProcess+0x68e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 804a98e:	f001 f99d 	bl	804bccc <LoRaMacCommandsRemoveStickyAnsCmds>
            PRINTF("FRame type: %d\r\n", fType);
 804a992:	f89d 1020 	ldrb.w	r1, [sp, #32]
 804a996:	483d      	ldr	r0, [pc, #244]	; (804aa8c <LoRaMacProcess+0x788>)
 804a998:	f003 fecc 	bl	804e734 <TraceSend>
            switch( fType )
 804a99c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804a9a0:	2b03      	cmp	r3, #3
 804a9a2:	d847      	bhi.n	804aa34 <LoRaMacProcess+0x730>
 804a9a4:	e8df f003 	tbb	[pc, r3]
 804a9a8:	1f412e17 	.word	0x1f412e17
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 804a9ac:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 804a9b0:	2ba0      	cmp	r3, #160	; 0xa0
 804a9b2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804a9b6:	d10a      	bne.n	804a9ce <LoRaMacProcess+0x6ca>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a9b8:	f892 01d2 	ldrb.w	r0, [r2, #466]	; 0x1d2
                    MacCtx.NvmCtx->SrvAckRequested = true;
 804a9bc:	2301      	movs	r3, #1
 804a9be:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a9c2:	2800      	cmp	r0, #0
 804a9c4:	d1d7      	bne.n	804a976 <LoRaMacProcess+0x672>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 804a9c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 804a9c8:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
 804a9cc:	e7d3      	b.n	804a976 <LoRaMacProcess+0x672>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 804a9ce:	2300      	movs	r3, #0
 804a9d0:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 804a9d4:	e7cf      	b.n	804a976 <LoRaMacProcess+0x672>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804a9d6:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804a9da:	463a      	mov	r2, r7
 804a9dc:	f001 010f 	and.w	r1, r1, #15
 804a9e0:	a818      	add	r0, sp, #96	; 0x60
 804a9e2:	f7fe fdb5 	bl	8049550 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804a9e6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804a9ea:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 804a9ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804a9f0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 804a9f4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 804a9f8:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 804a9fc:	2301      	movs	r3, #1
 804a9fe:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
 804aa02:	e00b      	b.n	804aa1c <LoRaMacProcess+0x718>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804aa04:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804aa08:	463a      	mov	r2, r7
 804aa0a:	f001 010f 	and.w	r1, r1, #15
 804aa0e:	a818      	add	r0, sp, #96	; 0x60
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804aa10:	f7fe fd9e 	bl	8049550 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804aa14:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804aa18:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 804aa1c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804aa20:	f043 0302 	orr.w	r3, r3, #2
 804aa24:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 804aa28:	e696      	b.n	804a758 <LoRaMacProcess+0x454>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804aa2a:	463a      	mov	r2, r7
 804aa2c:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 804aa30:	981d      	ldr	r0, [sp, #116]	; 0x74
 804aa32:	e7ed      	b.n	804aa10 <LoRaMacProcess+0x70c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804aa34:	2301      	movs	r3, #1
 804aa36:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 804aa3a:	f7fe fafd 	bl	8049038 <PrepareRxDoneAbort>
 804aa3e:	e7ed      	b.n	804aa1c <LoRaMacProcess+0x718>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 804aa40:	4e11      	ldr	r6, [pc, #68]	; (804aa88 <LoRaMacProcess+0x784>)
 804aa42:	f108 38ff 	add.w	r8, r8, #4294967295
 804aa46:	fa1f f288 	uxth.w	r2, r8
 804aa4a:	f109 0101 	add.w	r1, r9, #1
 804aa4e:	4630      	mov	r0, r6
 804aa50:	f003 fed5 	bl	804e7fe <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 804aa54:	2303      	movs	r3, #3
 804aa56:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804aa5a:	2300      	movs	r3, #0
 804aa5c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 804aa60:	f8c4 6428 	str.w	r6, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 804aa64:	f884 842c 	strb.w	r8, [r4, #1068]	; 0x42c
 804aa68:	e7d8      	b.n	804aa1c <LoRaMacProcess+0x718>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804aa6a:	2301      	movs	r3, #1
 804aa6c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 804aa70:	f7fe fae2 	bl	8049038 <PrepareRxDoneAbort>
 804aa74:	e670      	b.n	804a758 <LoRaMacProcess+0x454>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804aa76:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804aa7a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804aa7e:	2b02      	cmp	r3, #2
 804aa80:	f47f ae75 	bne.w	804a76e <LoRaMacProcess+0x46a>
 804aa84:	e670      	b.n	804a768 <LoRaMacProcess+0x464>
 804aa86:	bf00      	nop
 804aa88:	20002c00 	.word	0x20002c00
 804aa8c:	080543bb 	.word	0x080543bb
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804aa90:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804aa94:	075d      	lsls	r5, r3, #29
 804aa96:	d50f      	bpl.n	804aab8 <LoRaMacProcess+0x7b4>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 804aa98:	2000      	movs	r0, #0
 804aa9a:	f001 fa17 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 804aa9e:	b390      	cbz	r0, 804ab06 <LoRaMacProcess+0x802>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 804aaa0:	2000      	movs	r0, #0
 804aaa2:	f001 f9e1 	bl	804be68 <LoRaMacConfirmQueueGetStatus>
 804aaa6:	b908      	cbnz	r0, 804aaac <LoRaMacProcess+0x7a8>
                MacCtx.ChannelsNbTransCounter = 0;
 804aaa8:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804aaac:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804aab0:	f023 0302 	bic.w	r3, r3, #2
 804aab4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804aab8:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 804aabc:	07c8      	lsls	r0, r1, #31
 804aabe:	f57f ad1b 	bpl.w	804a4f8 <LoRaMacProcess+0x1f4>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 804aac2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 804aac6:	b10b      	cbz	r3, 804aacc <LoRaMacProcess+0x7c8>
 804aac8:	2b03      	cmp	r3, #3
 804aaca:	d127      	bne.n	804ab1c <LoRaMacProcess+0x818>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 804aacc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 804aad0:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 804aad4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 804aad8:	4290      	cmp	r0, r2
 804aada:	d208      	bcs.n	804aaee <LoRaMacProcess+0x7ea>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804aadc:	078a      	lsls	r2, r1, #30
 804aade:	d552      	bpl.n	804ab86 <LoRaMacProcess+0x882>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804aae0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804aae4:	b11b      	cbz	r3, 804aaee <LoRaMacProcess+0x7ea>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 804aae6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 804aaea:	2b00      	cmp	r3, #0
 804aaec:	d14b      	bne.n	804ab86 <LoRaMacProcess+0x882>
            TimerStop( &MacCtx.TxDelayedTimer );
 804aaee:	4839      	ldr	r0, [pc, #228]	; (804abd4 <LoRaMacProcess+0x8d0>)
 804aaf0:	f003 fd96 	bl	804e620 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804aaf4:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804aaf8:	f023 0320 	bic.w	r3, r3, #32
 804aafc:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 804ab00:	f7fe fa14 	bl	8048f2c <StopRetransmission>
 804ab04:	e4f8      	b.n	804a4f8 <LoRaMacProcess+0x1f4>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804ab06:	2004      	movs	r0, #4
 804ab08:	f001 f9e0 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
 804ab0c:	2800      	cmp	r0, #0
 804ab0e:	d1cd      	bne.n	804aaac <LoRaMacProcess+0x7a8>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 804ab10:	2005      	movs	r0, #5
 804ab12:	f001 f9db 	bl	804becc <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804ab16:	2800      	cmp	r0, #0
 804ab18:	d1c8      	bne.n	804aaac <LoRaMacProcess+0x7a8>
 804ab1a:	e7cd      	b.n	804aab8 <LoRaMacProcess+0x7b4>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 804ab1c:	2b01      	cmp	r3, #1
 804ab1e:	d132      	bne.n	804ab86 <LoRaMacProcess+0x882>
            if( MacCtx.AckTimeoutRetry == true )
 804ab20:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 804ab24:	2a00      	cmp	r2, #0
 804ab26:	f43f ace7 	beq.w	804a4f8 <LoRaMacProcess+0x1f4>
    if( MacCtx.AckTimeoutRetriesCounter >=
 804ab2a:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 804ab2e:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 804ab32:	42ab      	cmp	r3, r5
 804ab34:	d204      	bcs.n	804ab40 <LoRaMacProcess+0x83c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804ab36:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 804ab3a:	bf18      	it	ne
 804ab3c:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804ab40:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804ab44:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
 804ab48:	2900      	cmp	r1, #0
 804ab4a:	d13f      	bne.n	804abcc <LoRaMacProcess+0x8c8>
                    if( stopRetransmission == false )
 804ab4c:	bb3a      	cbnz	r2, 804ab9e <LoRaMacProcess+0x89a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 804ab4e:	42ab      	cmp	r3, r5
 804ab50:	d219      	bcs.n	804ab86 <LoRaMacProcess+0x882>
        MacCtx.AckTimeoutRetriesCounter++;
 804ab52:	3301      	adds	r3, #1
 804ab54:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804ab56:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 804ab58:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804ab5c:	d513      	bpl.n	804ab86 <LoRaMacProcess+0x882>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804ab5e:	2322      	movs	r3, #34	; 0x22
 804ab60:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804ab64:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 804ab68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804ab6c:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 804ab70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab74:	a90a      	add	r1, sp, #40	; 0x28
 804ab76:	7800      	ldrb	r0, [r0, #0]
 804ab78:	f001 ff59 	bl	804ca2e <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804ab7c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab80:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804ab82:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
            MacCtx.MacFlags.Bits.MacDone = 0;
 804ab86:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804ab8a:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 804ab8c:	f36f 1345 	bfc	r3, #5, #1
 804ab90:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804ab94:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 804ab98:	f7ff f9ec 	bl	8049f74 <OnTxDelayedTimerEvent>
 804ab9c:	e4ac      	b.n	804a4f8 <LoRaMacProcess+0x1f4>
    if( MacCtx.McpsConfirm.AckReceived == false )
 804ab9e:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 804aba2:	b975      	cbnz	r5, 804abc2 <LoRaMacProcess+0x8be>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804aba4:	2301      	movs	r3, #1
 804aba6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        params.NvmCtx = Contexts.RegionNvmCtx;
 804abaa:	4b0b      	ldr	r3, [pc, #44]	; (804abd8 <LoRaMacProcess+0x8d4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804abac:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 804abae:	689b      	ldr	r3, [r3, #8]
 804abb0:	a920      	add	r1, sp, #128	; 0x80
 804abb2:	f841 3d30 	str.w	r3, [r1, #-48]!
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804abb6:	f001 ff4a 	bl	804ca4e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 804abba:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 804abbe:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 804abc2:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 804abc6:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 804abca:	e790      	b.n	804aaee <LoRaMacProcess+0x7ea>
        if( stopRetransmission == true )
 804abcc:	2a00      	cmp	r2, #0
 804abce:	d0da      	beq.n	804ab86 <LoRaMacProcess+0x882>
 804abd0:	e78d      	b.n	804aaee <LoRaMacProcess+0x7ea>
 804abd2:	bf00      	nop
 804abd4:	20002d30 	.word	0x20002d30
 804abd8:	20006000 	.word	0x20006000

0804abdc <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 804abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804abe0:	4688      	mov	r8, r1
 804abe2:	b08f      	sub	sp, #60	; 0x3c
 804abe4:	4692      	mov	sl, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 804abe6:	4607      	mov	r7, r0
 804abe8:	2800      	cmp	r0, #0
 804abea:	f000 81da 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
 804abee:	2900      	cmp	r1, #0
 804abf0:	f000 81d7 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 804abf4:	6803      	ldr	r3, [r0, #0]
 804abf6:	2b00      	cmp	r3, #0
 804abf8:	f000 81d3 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
 804abfc:	6843      	ldr	r3, [r0, #4]
 804abfe:	2b00      	cmp	r3, #0
 804ac00:	f000 81cf 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMcpsIndication == NULL ) ||
 804ac04:	6883      	ldr	r3, [r0, #8]
 804ac06:	2b00      	cmp	r3, #0
 804ac08:	f000 81cb 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeConfirm == NULL ) ||
 804ac0c:	68c3      	ldr	r3, [r0, #12]
 804ac0e:	2b00      	cmp	r3, #0
 804ac10:	f000 81c7 	beq.w	804afa2 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 804ac14:	4610      	mov	r0, r2
 804ac16:	f001 ff06 	bl	804ca26 <RegionIsActive>
 804ac1a:	2800      	cmp	r0, #0
 804ac1c:	f000 81c3 	beq.w	804afa6 <LoRaMacInitialization+0x3ca>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804ac20:	4cb0      	ldr	r4, [pc, #704]	; (804aee4 <LoRaMacInitialization+0x308>)
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804ac22:	49b1      	ldr	r1, [pc, #708]	; (804aee8 <LoRaMacInitialization+0x30c>)
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804ac24:	f204 458c 	addw	r5, r4, #1164	; 0x48c
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804ac28:	4638      	mov	r0, r7
 804ac2a:	f001 f8a9 	bl	804bd80 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804ac2e:	4628      	mov	r0, r5
 804ac30:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 804ac34:	2100      	movs	r1, #0
 804ac36:	f003 fdf6 	bl	804e826 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 804ac3a:	f44f 6291 	mov.w	r2, #1160	; 0x488
 804ac3e:	2100      	movs	r1, #0
 804ac40:	1d20      	adds	r0, r4, #4
 804ac42:	f003 fdf0 	bl	804e826 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 804ac46:	f8c4 5488 	str.w	r5, [r4, #1160]	; 0x488
    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;
 804ac4a:	4ba8      	ldr	r3, [pc, #672]	; (804aeec <LoRaMacInitialization+0x310>)
 804ac4c:	f8c4 365c 	str.w	r3, [r4, #1628]	; 0x65c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 804ac50:	ad0e      	add	r5, sp, #56	; 0x38
 804ac52:	230f      	movs	r3, #15
 804ac54:	f805 3d38 	strb.w	r3, [r5, #-56]!
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804ac58:	2600      	movs	r6, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 804ac5a:	f04f 0901 	mov.w	r9, #1
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac5e:	4629      	mov	r1, r5
 804ac60:	4650      	mov	r0, sl
    MacCtx.NvmCtx->Region = region;
 804ac62:	f884 a48c 	strb.w	sl, [r4, #1164]	; 0x48c
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804ac66:	f884 657c 	strb.w	r6, [r4, #1404]	; 0x57c
    MacCtx.NvmCtx->RepeaterSupport = false;
 804ac6a:	f884 65cb 	strb.w	r6, [r4, #1483]	; 0x5cb
    MacCtx.AckTimeoutRetriesCounter = 1;
 804ac6e:	f884 9416 	strb.w	r9, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetries = 1;
 804ac72:	f884 9415 	strb.w	r9, [r4, #1045]	; 0x415
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac76:	f001 feda 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804ac7a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac7e:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804ac80:	1b80      	subs	r0, r0, r6
 804ac82:	bf18      	it	ne
 804ac84:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 804ac86:	220a      	movs	r2, #10
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804ac88:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac8c:	4629      	mov	r1, r5
 804ac8e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 804ac90:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac94:	f001 fecb 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804ac98:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac9c:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804ac9e:	7118      	strb	r0, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 804aca0:	f04f 0a06 	mov.w	sl, #6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aca4:	4629      	mov	r1, r5
 804aca6:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_DR;
 804aca8:	f88d a000 	strb.w	sl, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acac:	f001 febf 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804acb0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acb4:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804acb6:	7158      	strb	r0, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804acb8:	2210      	movs	r2, #16
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acba:	4629      	mov	r1, r5
 804acbc:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804acbe:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acc2:	f001 feb4 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804acc6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acca:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804accc:	6118      	str	r0, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804acce:	2211      	movs	r2, #17
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acd0:	4629      	mov	r1, r5
 804acd2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804acd4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acd8:	f001 fea9 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804acdc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ace0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804ace2:	6158      	str	r0, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804ace4:	2212      	movs	r2, #18
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ace6:	4629      	mov	r1, r5
 804ace8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804acea:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acee:	f001 fe9e 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804acf2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acf6:	9001      	str	r0, [sp, #4]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804acf8:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804acfa:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804acfc:	4629      	mov	r1, r5
 804acfe:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804ad00:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad04:	f001 fe93 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804ad08:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad0c:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804ad0e:	61d8      	str	r0, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804ad10:	f04f 0b14 	mov.w	fp, #20
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad14:	4629      	mov	r1, r5
 804ad16:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804ad18:	f88d b000 	strb.w	fp, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad1c:	f001 fe87 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804ad20:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad24:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804ad26:	6218      	str	r0, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804ad28:	2217      	movs	r2, #23
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad2a:	4629      	mov	r1, r5
 804ad2c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804ad2e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad32:	f001 fe7c 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804ad36:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad3a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804ad3c:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804ad40:	2218      	movs	r2, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad42:	4629      	mov	r1, r5
 804ad44:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804ad46:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad4a:	f001 fe70 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804ad4e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad52:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804ad54:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 804ad56:	6318      	str	r0, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 804ad58:	2219      	movs	r2, #25
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad5a:	4629      	mov	r1, r5
 804ad5c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 804ad5e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad62:	f001 fe64 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804ad66:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad6a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804ad6c:	b2c0      	uxtb	r0, r0
 804ad6e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 804ad72:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804ad76:	221e      	movs	r2, #30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad78:	4629      	mov	r1, r5
 804ad7a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804ad7c:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad80:	f001 fe55 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804ad84:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad88:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804ad8a:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804ad8e:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad90:	4629      	mov	r1, r5
 804ad92:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804ad94:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ad98:	f001 fe49 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804ad9c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ada0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804ada2:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804ada6:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ada8:	4629      	mov	r1, r5
 804adaa:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804adac:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adb0:	f001 fe3d 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804adb4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adb8:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804adba:	9a01      	ldr	r2, [sp, #4]
 804adbc:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adbe:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804adc0:	2221      	movs	r2, #33	; 0x21
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adc2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804adc4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adc8:	f001 fe31 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804adcc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804add0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804add2:	9a01      	ldr	r2, [sp, #4]
 804add4:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804add6:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804add8:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adda:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804addc:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ade0:	f001 fe25 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 804ade4:	230c      	movs	r3, #12
 804ade6:	f88d 3000 	strb.w	r3, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adea:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adee:	9001      	str	r0, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adf0:	4629      	mov	r1, r5
    MacCtx.AdrAckLimit = phyParam.Value;
 804adf2:	f8a4 03f8 	strh.w	r0, [r4, #1016]	; 0x3f8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804adf6:	7818      	ldrb	r0, [r3, #0]
 804adf8:	f001 fe19 	bl	804ca2e <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804adfc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.AdrAckDelay = phyParam.Value;
 804ae00:	f8a4 03fa 	strh.w	r0, [r4, #1018]	; 0x3fa
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 804ae04:	691a      	ldr	r2, [r3, #16]
 804ae06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 804ae0a:	695a      	ldr	r2, [r3, #20]
 804ae0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 804ae10:	699a      	ldr	r2, [r3, #24]
 804ae12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 804ae16:	69da      	ldr	r2, [r3, #28]
 804ae18:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 804ae1c:	6a1a      	ldr	r2, [r3, #32]
 804ae1e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804ae22:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 804ae26:	f8c3 b008 	str.w	fp, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 804ae2a:	f883 a00c 	strb.w	sl, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 804ae2e:	f8c3 b0fc 	str.w	fp, [r3, #252]	; 0xfc
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 804ae32:	f883 a100 	strb.w	sl, [r3, #256]	; 0x100
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 804ae36:	f883 9118 	strb.w	r9, [r3, #280]	; 0x118
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ae3a:	9001      	str	r0, [sp, #4]

    ResetMacParameters( );
 804ae3c:	f7fe f978 	bl	8049130 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 804ae40:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ae44:	492a      	ldr	r1, [pc, #168]	; (804aef0 <LoRaMacInitialization+0x314>)
    MacCtx.NvmCtx->PublicNetwork = true;
 804ae46:	f883 90f1 	strb.w	r9, [r3, #241]	; 0xf1
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ae4a:	f504 705b 	add.w	r0, r4, #876	; 0x36c
    MacCtx.MacFlags.Value = 0;
 804ae4e:	f884 6485 	strb.w	r6, [r4, #1157]	; 0x485
    MacCtx.MacPrimitives = primitives;
 804ae52:	f8c4 7348 	str.w	r7, [r4, #840]	; 0x348
    MacCtx.MacCallbacks = callbacks;
 804ae56:	f8c4 834c 	str.w	r8, [r4, #844]	; 0x34c
    MacCtx.MacState = LORAMAC_STOPPED;
 804ae5a:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 804ae5e:	f8c3 61c4 	str.w	r6, [r3, #452]	; 0x1c4
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 804ae62:	f8c3 61c8 	str.w	r6, [r3, #456]	; 0x1c8
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ae66:	f003 fb5f 	bl	804e528 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 804ae6a:	4922      	ldr	r1, [pc, #136]	; (804aef4 <LoRaMacInitialization+0x318>)
 804ae6c:	f504 7061 	add.w	r0, r4, #900	; 0x384
 804ae70:	f003 fb5a 	bl	804e528 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 804ae74:	4920      	ldr	r1, [pc, #128]	; (804aef8 <LoRaMacInitialization+0x31c>)
 804ae76:	f504 7067 	add.w	r0, r4, #924	; 0x39c
 804ae7a:	f003 fb55 	bl	804e528 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 804ae7e:	491f      	ldr	r1, [pc, #124]	; (804aefc <LoRaMacInitialization+0x320>)
 804ae80:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 804ae84:	f003 fb50 	bl	804e528 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804ae88:	f8d4 5488 	ldr.w	r5, [r4, #1160]	; 0x488
 804ae8c:	f003 fc01 	bl	804e692 <TimerGetCurrentTime>

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804ae90:	4b1b      	ldr	r3, [pc, #108]	; (804af00 <LoRaMacInitialization+0x324>)
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804ae92:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804ae96:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 804ae9a:	4b1a      	ldr	r3, [pc, #104]	; (804af04 <LoRaMacInitialization+0x328>)
 804ae9c:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 804aea0:	4b19      	ldr	r3, [pc, #100]	; (804af08 <LoRaMacInitialization+0x32c>)
 804aea2:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 804aea6:	4d19      	ldr	r5, [pc, #100]	; (804af0c <LoRaMacInitialization+0x330>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 804aea8:	4b19      	ldr	r3, [pc, #100]	; (804af10 <LoRaMacInitialization+0x334>)
 804aeaa:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 804aeae:	4b19      	ldr	r3, [pc, #100]	; (804af14 <LoRaMacInitialization+0x338>)
 804aeb0:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 804aeb4:	f504 7054 	add.w	r0, r4, #848	; 0x350
 804aeb8:	68ab      	ldr	r3, [r5, #8]
 804aeba:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    params.NvmCtx = NULL;
 804aebc:	a90e      	add	r1, sp, #56	; 0x38
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804aebe:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    params.NvmCtx = NULL;
 804aec2:	f841 6d28 	str.w	r6, [r1, #-40]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804aec6:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_INIT;
 804aec8:	f88d 6014 	strb.w	r6, [sp, #20]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804aecc:	f001 fdbf 	bl	804ca4e <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 804aed0:	4811      	ldr	r0, [pc, #68]	; (804af18 <LoRaMacInitialization+0x33c>)
 804aed2:	f7fd fe89 	bl	8048be8 <SecureElementInit>
 804aed6:	462e      	mov	r6, r5
 804aed8:	b300      	cbz	r0, 804af1c <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 804aeda:	2011      	movs	r0, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 804aedc:	b00f      	add	sp, #60	; 0x3c
 804aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804aee2:	bf00      	nop
 804aee4:	200029c4 	.word	0x200029c4
 804aee8:	08048fad 	.word	0x08048fad
 804aeec:	01000300 	.word	0x01000300
 804aef0:	08049f75 	.word	0x08049f75
 804aef4:	080494c5 	.word	0x080494c5
 804aef8:	08049505 	.word	0x08049505
 804aefc:	08048ff1 	.word	0x08048ff1
 804af00:	08049321 	.word	0x08049321
 804af04:	080492c1 	.word	0x080492c1
 804af08:	08048ef5 	.word	0x08048ef5
 804af0c:	08053dd0 	.word	0x08053dd0
 804af10:	0804927d 	.word	0x0804927d
 804af14:	08049239 	.word	0x08049239
 804af18:	08048f9b 	.word	0x08048f9b
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 804af1c:	4824      	ldr	r0, [pc, #144]	; (804afb0 <LoRaMacInitialization+0x3d4>)
 804af1e:	f001 f979 	bl	804c214 <LoRaMacCryptoInit>
 804af22:	2800      	cmp	r0, #0
 804af24:	d1d9      	bne.n	804aeda <LoRaMacInitialization+0x2fe>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 804af26:	4823      	ldr	r0, [pc, #140]	; (804afb4 <LoRaMacInitialization+0x3d8>)
 804af28:	f000 fe18 	bl	804bb5c <LoRaMacCommandsInit>
 804af2c:	2800      	cmp	r0, #0
 804af2e:	d13c      	bne.n	804afaa <LoRaMacInitialization+0x3ce>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 804af30:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804af34:	3050      	adds	r0, #80	; 0x50
 804af36:	f001 f9f7 	bl	804c328 <LoRaMacCryptoSetMulticastReference>
 804af3a:	4605      	mov	r5, r0
 804af3c:	2800      	cmp	r0, #0
 804af3e:	d1cc      	bne.n	804aeda <LoRaMacInitialization+0x2fe>
    srand1( Radio.Random( ) );
 804af40:	69f3      	ldr	r3, [r6, #28]
 804af42:	4798      	blx	r3
 804af44:	f003 fc48 	bl	804e7d8 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804af48:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804af4c:	6e33      	ldr	r3, [r6, #96]	; 0x60
 804af4e:	f892 00f1 	ldrb.w	r0, [r2, #241]	; 0xf1
 804af52:	4798      	blx	r3
    Radio.Sleep( );
 804af54:	6b73      	ldr	r3, [r6, #52]	; 0x34
 804af56:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 804af58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804af5c:	9302      	str	r3, [sp, #8]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 804af5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804af62:	9303      	str	r3, [sp, #12]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 804af64:	4b14      	ldr	r3, [pc, #80]	; (804afb8 <LoRaMacInitialization+0x3dc>)
 804af66:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 804af68:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 804af6c:	9207      	str	r2, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804af6e:	f1a3 0214 	sub.w	r2, r3, #20
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 804af72:	331d      	adds	r3, #29
 804af74:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804af76:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804af7a:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804af7c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 804af80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 804af84:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 804af88:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804af8a:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804af8c:	a806      	add	r0, sp, #24
 804af8e:	4a0b      	ldr	r2, [pc, #44]	; (804afbc <LoRaMacInitialization+0x3e0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804af90:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804af92:	a902      	add	r1, sp, #8
 804af94:	f000 fdad 	bl	804baf2 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 804af98:	2301      	movs	r3, #1
 804af9a:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    return LORAMAC_STATUS_OK;
 804af9e:	4628      	mov	r0, r5
 804afa0:	e79c      	b.n	804aedc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804afa2:	2003      	movs	r0, #3
 804afa4:	e79a      	b.n	804aedc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 804afa6:	2009      	movs	r0, #9
 804afa8:	e798      	b.n	804aedc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804afaa:	2013      	movs	r0, #19
 804afac:	e796      	b.n	804aedc <LoRaMacInitialization+0x300>
 804afae:	bf00      	nop
 804afb0:	08048f95 	.word	0x08048f95
 804afb4:	08048fa1 	.word	0x08048fa1
 804afb8:	20002e2c 	.word	0x20002e2c
 804afbc:	08048fa7 	.word	0x08048fa7

0804afc0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 804afc0:	4b02      	ldr	r3, [pc, #8]	; (804afcc <LoRaMacStart+0xc>)
 804afc2:	2000      	movs	r0, #0
 804afc4:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    return LORAMAC_STATUS_OK;
}
 804afc8:	4770      	bx	lr
 804afca:	bf00      	nop
 804afcc:	200029c4 	.word	0x200029c4

0804afd0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 804afd0:	b570      	push	{r4, r5, r6, lr}
 804afd2:	4605      	mov	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804afd4:	482c      	ldr	r0, [pc, #176]	; (804b088 <LoRaMacQueryTxPossible+0xb8>)
 804afd6:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
{
 804afda:	b088      	sub	sp, #32
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804afdc:	795a      	ldrb	r2, [r3, #5]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804afde:	f8d3 60f4 	ldr.w	r6, [r3, #244]	; 0xf4
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804afe2:	f88d 2002 	strb.w	r2, [sp, #2]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804afe6:	2200      	movs	r2, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804afe8:	9601      	str	r6, [sp, #4]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804afea:	f88d 2003 	strb.w	r2, [sp, #3]
    size_t macCmdsSize = 0;
 804afee:	9202      	str	r2, [sp, #8]

    if( txInfo == NULL )
 804aff0:	460c      	mov	r4, r1
 804aff2:	b929      	cbnz	r1, 804b000 <LoRaMacQueryTxPossible+0x30>
    {
    	PRINTF("Invalid");
 804aff4:	4825      	ldr	r0, [pc, #148]	; (804b08c <LoRaMacQueryTxPossible+0xbc>)
 804aff6:	f003 fb9d 	bl	804e734 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804affa:	2003      	movs	r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 804affc:	b008      	add	sp, #32
 804affe:	bd70      	pop	{r4, r5, r6, pc}
    adrNext.Version = MacCtx.NvmCtx->Version;
 804b000:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 804b004:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804b006:	f893 10f2 	ldrb.w	r1, [r3, #242]	; 0xf2
 804b00a:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 804b00e:	f8b0 13f8 	ldrh.w	r1, [r0, #1016]	; 0x3f8
 804b012:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804b016:	f8b0 13fa 	ldrh.w	r1, [r0, #1018]	; 0x3fa
    adrNext.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804b01a:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UpdateChanMask = false;
 804b01e:	f88d 2010 	strb.w	r2, [sp, #16]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804b022:	f8ad 101a 	strh.w	r1, [sp, #26]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b026:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804b02a:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
 804b02e:	f88d 101c 	strb.w	r1, [sp, #28]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b032:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = MacCtx.NvmCtx->Region;
 804b036:	781b      	ldrb	r3, [r3, #0]
 804b038:	f88d 301f 	strb.w	r3, [sp, #31]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804b03c:	f10d 0203 	add.w	r2, sp, #3
 804b040:	ab01      	add	r3, sp, #4
 804b042:	f10d 0102 	add.w	r1, sp, #2
 804b046:	a803      	add	r0, sp, #12
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804b048:	9605      	str	r6, [sp, #20]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804b04a:	f000 fceb 	bl	804ba24 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804b04e:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 804b052:	f7fd ffaf 	bl	8048fb4 <GetMaxAppPayloadWithoutFOptsLength>
 804b056:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804b058:	a802      	add	r0, sp, #8
 804b05a:	f000 fe51 	bl	804bd00 <LoRaMacCommandsGetSizeSerializedCmds>
 804b05e:	b988      	cbnz	r0, 804b084 <LoRaMacQueryTxPossible+0xb4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 804b060:	9b02      	ldr	r3, [sp, #8]
 804b062:	2b0f      	cmp	r3, #15
 804b064:	d80a      	bhi.n	804b07c <LoRaMacQueryTxPossible+0xac>
 804b066:	7860      	ldrb	r0, [r4, #1]
 804b068:	4283      	cmp	r3, r0
 804b06a:	d807      	bhi.n	804b07c <LoRaMacQueryTxPossible+0xac>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804b06c:	1ac2      	subs	r2, r0, r3
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 804b06e:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804b070:	7022      	strb	r2, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 804b072:	4298      	cmp	r0, r3
 804b074:	bf34      	ite	cc
 804b076:	2008      	movcc	r0, #8
 804b078:	2000      	movcs	r0, #0
 804b07a:	e7bf      	b.n	804affc <LoRaMacQueryTxPossible+0x2c>
        txInfo->MaxPossibleApplicationDataSize = 0;
 804b07c:	2300      	movs	r3, #0
 804b07e:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 804b080:	2008      	movs	r0, #8
 804b082:	e7bb      	b.n	804affc <LoRaMacQueryTxPossible+0x2c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804b084:	2013      	movs	r0, #19
 804b086:	e7b9      	b.n	804affc <LoRaMacQueryTxPossible+0x2c>
 804b088:	200029c4 	.word	0x200029c4
 804b08c:	080543e1 	.word	0x080543e1

0804b090 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 804b090:	b513      	push	{r0, r1, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 804b092:	4604      	mov	r4, r0
 804b094:	2800      	cmp	r0, #0
 804b096:	f000 80d3 	beq.w	804b240 <LoRaMacMibGetRequestConfirm+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 804b09a:	7803      	ldrb	r3, [r0, #0]
 804b09c:	2b34      	cmp	r3, #52	; 0x34
 804b09e:	f200 80cc 	bhi.w	804b23a <LoRaMacMibGetRequestConfirm+0x1aa>
 804b0a2:	e8df f003 	tbb	[pc, r3]
 804b0a6:	231b      	.short	0x231b
 804b0a8:	36302d29 	.word	0x36302d29
 804b0ac:	cacaca3c 	.word	0xcacaca3c
 804b0b0:	cacacaca 	.word	0xcacacaca
 804b0b4:	cacacaca 	.word	0xcacacaca
 804b0b8:	cacacaca 	.word	0xcacacaca
 804b0bc:	cacacaca 	.word	0xcacacaca
 804b0c0:	41cacaca 	.word	0x41cacaca
 804b0c4:	63584d47 	.word	0x63584d47
 804b0c8:	76797069 	.word	0x76797069
 804b0cc:	8e88827c 	.word	0x8e88827c
 804b0d0:	a5a09a94 	.word	0xa5a09a94
 804b0d4:	b5afabab 	.word	0xb5afabab
 804b0d8:	c5bb      	.short	0xc5bb
 804b0da:	c2          	.byte	0xc2
 804b0db:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 804b0dc:	4b59      	ldr	r3, [pc, #356]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b0de:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b0e2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
            break;
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804b0e6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804b0e8:	2000      	movs	r0, #0
            break;
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
            break;
 804b0ea:	e089      	b.n	804b200 <LoRaMacMibGetRequestConfirm+0x170>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804b0ec:	4b55      	ldr	r3, [pc, #340]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b0ee:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b0f2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804b0f6:	e7f6      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 804b0f8:	f7fd fee2 	bl	8048ec0 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 804b0fc:	6060      	str	r0, [r4, #4]
 804b0fe:	e7f3      	b.n	804b0e8 <LoRaMacMibGetRequestConfirm+0x58>
 804b100:	f7fd fef4 	bl	8048eec <SecureElementGetJoinEui>
 804b104:	e7fa      	b.n	804b0fc <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 804b106:	4b4f      	ldr	r3, [pc, #316]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b108:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b10c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 804b110:	e7e9      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 804b112:	4b4c      	ldr	r3, [pc, #304]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b114:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804b11a:	6063      	str	r3, [r4, #4]
 804b11c:	e7e4      	b.n	804b0e8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 804b11e:	4b49      	ldr	r3, [pc, #292]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b120:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804b126:	e7f8      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 804b128:	4b46      	ldr	r3, [pc, #280]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b12a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b12e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 804b132:	e7d8      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 804b134:	4b43      	ldr	r3, [pc, #268]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b136:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b13a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 804b13e:	e7d2      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            getPhy.Attribute = PHY_CHANNELS;
 804b140:	a902      	add	r1, sp, #8
 804b142:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804b144:	f801 3d08 	strb.w	r3, [r1, #-8]!
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804b148:	4b3e      	ldr	r3, [pc, #248]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b14a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b14e:	7818      	ldrb	r0, [r3, #0]
 804b150:	f001 fc6d 	bl	804ca2e <RegionGetPhyParam>
 804b154:	e7d2      	b.n	804b0fc <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 804b156:	4b3b      	ldr	r3, [pc, #236]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b158:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b15c:	3404      	adds	r4, #4
 804b15e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804b162:	e893 0003 	ldmia.w	r3, {r0, r1}
 804b166:	e884 0003 	stmia.w	r4, {r0, r1}
 804b16a:	e7bd      	b.n	804b0e8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804b16c:	4b35      	ldr	r3, [pc, #212]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b16e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b172:	3404      	adds	r4, #4
 804b174:	3328      	adds	r3, #40	; 0x28
 804b176:	e7f4      	b.n	804b162 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 804b178:	4b32      	ldr	r3, [pc, #200]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b17a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b17e:	3404      	adds	r4, #4
 804b180:	f503 7392 	add.w	r3, r3, #292	; 0x124
 804b184:	e7ed      	b.n	804b162 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804b186:	4b2f      	ldr	r3, [pc, #188]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b188:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b18c:	3404      	adds	r4, #4
 804b18e:	3330      	adds	r3, #48	; 0x30
 804b190:	e7e7      	b.n	804b162 <LoRaMacMibGetRequestConfirm+0xd2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 804b192:	a902      	add	r1, sp, #8
 804b194:	231b      	movs	r3, #27
 804b196:	e7d5      	b.n	804b144 <LoRaMacMibGetRequestConfirm+0xb4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804b198:	a902      	add	r1, sp, #8
 804b19a:	231a      	movs	r3, #26
 804b19c:	e7d2      	b.n	804b144 <LoRaMacMibGetRequestConfirm+0xb4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804b19e:	4b29      	ldr	r3, [pc, #164]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1a0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1a4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 804b1a8:	e79d      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 804b1aa:	4b26      	ldr	r3, [pc, #152]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1ac:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804b1b4:	e7b1      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 804b1b6:	4b23      	ldr	r3, [pc, #140]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1b8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 804b1c0:	e7ab      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 804b1c2:	4b20      	ldr	r3, [pc, #128]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1c4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 804b1cc:	e7a5      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 804b1ce:	4b1d      	ldr	r3, [pc, #116]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1d0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 804b1d8:	e79f      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 804b1da:	4b1a      	ldr	r3, [pc, #104]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1dc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 804b1e4:	e799      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804b1e6:	4b17      	ldr	r3, [pc, #92]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1e8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1ec:	795b      	ldrb	r3, [r3, #5]
 804b1ee:	e77a      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804b1f0:	4b14      	ldr	r3, [pc, #80]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b1f2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b1f6:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 804b1fa:	e774      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsTxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804b1fc:	2000      	movs	r0, #0
 804b1fe:	7120      	strb	r0, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 804b200:	b002      	add	sp, #8
 804b202:	bd10      	pop	{r4, pc}
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804b204:	4b0f      	ldr	r3, [pc, #60]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b206:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b20a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804b20e:	e784      	b.n	804b11a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 804b210:	4b0c      	ldr	r3, [pc, #48]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b212:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b216:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 804b21a:	e764      	b.n	804b0e6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 804b21c:	4b09      	ldr	r3, [pc, #36]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b21e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b222:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804b226:	6063      	str	r3, [r4, #4]
 804b228:	e75e      	b.n	804b0e8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Contexts = GetCtxs( );
 804b22a:	f7fe ffd1 	bl	804a1d0 <GetCtxs>
 804b22e:	e765      	b.n	804b0fc <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804b230:	4b04      	ldr	r3, [pc, #16]	; (804b244 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b232:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804b238:	e7f5      	b.n	804b226 <LoRaMacMibGetRequestConfirm+0x196>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 804b23a:	f000 fc78 	bl	804bb2e <LoRaMacClassBMibGetRequestConfirm>
            break;
 804b23e:	e7df      	b.n	804b200 <LoRaMacMibGetRequestConfirm+0x170>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b240:	2003      	movs	r0, #3
 804b242:	e7dd      	b.n	804b200 <LoRaMacMibGetRequestConfirm+0x170>
 804b244:	200029c4 	.word	0x200029c4

0804b248 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 804b248:	b530      	push	{r4, r5, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 804b24a:	4604      	mov	r4, r0
{
 804b24c:	b087      	sub	sp, #28
    if( mibSet == NULL )
 804b24e:	b930      	cbnz	r0, 804b25e <LoRaMacMibSetRequestConfirm+0x16>
    {
    	PRINTF("LORAMAC_STATUS_PARAMETER_INVALID\r\n");
 804b250:	4897      	ldr	r0, [pc, #604]	; (804b4b0 <LoRaMacMibSetRequestConfirm+0x268>)
 804b252:	f003 fa6f 	bl	804e734 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b256:	2403      	movs	r4, #3
        }
    }
    EventRegionNvmCtxChanged( );
    EventMacNvmCtxChanged( );
    return status;
}
 804b258:	4620      	mov	r0, r4
 804b25a:	b007      	add	sp, #28
 804b25c:	bd30      	pop	{r4, r5, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 804b25e:	4d95      	ldr	r5, [pc, #596]	; (804b4b4 <LoRaMacMibSetRequestConfirm+0x26c>)
 804b260:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804b264:	079b      	lsls	r3, r3, #30
 804b266:	d504      	bpl.n	804b272 <LoRaMacMibSetRequestConfirm+0x2a>
    	PRINTF("LORAMAC_STATUS_BUSY");
 804b268:	4893      	ldr	r0, [pc, #588]	; (804b4b8 <LoRaMacMibSetRequestConfirm+0x270>)
 804b26a:	f003 fa63 	bl	804e734 <TraceSend>
        return LORAMAC_STATUS_BUSY;
 804b26e:	2401      	movs	r4, #1
 804b270:	e7f2      	b.n	804b258 <LoRaMacMibSetRequestConfirm+0x10>
    switch( mibSet->Type )
 804b272:	7803      	ldrb	r3, [r0, #0]
 804b274:	2b35      	cmp	r3, #53	; 0x35
 804b276:	f200 8233 	bhi.w	804b6e0 <LoRaMacMibSetRequestConfirm+0x498>
 804b27a:	e8df f013 	tbh	[pc, r3, lsl #1]
 804b27e:	0036      	.short	0x0036
 804b280:	0044003b 	.word	0x0044003b
 804b284:	0053004f 	.word	0x0053004f
 804b288:	005e0059 	.word	0x005e0059
 804b28c:	006d0063 	.word	0x006d0063
 804b290:	00770072 	.word	0x00770072
 804b294:	0081007c 	.word	0x0081007c
 804b298:	008b0086 	.word	0x008b0086
 804b29c:	00950090 	.word	0x00950090
 804b2a0:	009f009a 	.word	0x009f009a
 804b2a4:	00a900a4 	.word	0x00a900a4
 804b2a8:	00b300ae 	.word	0x00b300ae
 804b2ac:	00bd00b8 	.word	0x00bd00b8
 804b2b0:	00c700c2 	.word	0x00c700c2
 804b2b4:	00d300cd 	.word	0x00d300cd
 804b2b8:	00e200d9 	.word	0x00e200d9
 804b2bc:	00e80231 	.word	0x00e80231
 804b2c0:	01210103 	.word	0x01210103
 804b2c4:	017c0158 	.word	0x017c0158
 804b2c8:	0180016d 	.word	0x0180016d
 804b2cc:	0190018a 	.word	0x0190018a
 804b2d0:	019c0196 	.word	0x019c0196
 804b2d4:	01a801a2 	.word	0x01a801a2
 804b2d8:	01eb01bb 	.word	0x01eb01bb
 804b2dc:	020401d3 	.word	0x020401d3
 804b2e0:	0212020b 	.word	0x0212020b
 804b2e4:	021d0218 	.word	0x021d0218
 804b2e8:	0224      	.short	0x0224
            status = SwitchClass( mibSet->Param.Class );
 804b2ea:	7900      	ldrb	r0, [r0, #4]
 804b2ec:	f7fe f84a 	bl	8049384 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804b2f0:	4604      	mov	r4, r0
            break;
 804b2f2:	e00e      	b.n	804b312 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 804b2f4:	7903      	ldrb	r3, [r0, #4]
 804b2f6:	2b02      	cmp	r3, #2
 804b2f8:	d00a      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 804b2fa:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804b2fe:	f882 31d4 	strb.w	r3, [r2, #468]	; 0x1d4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804b302:	2400      	movs	r4, #0
 804b304:	e005      	b.n	804b312 <LoRaMacMibSetRequestConfirm+0xca>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 804b306:	6840      	ldr	r0, [r0, #4]
 804b308:	f7fd fdc8 	bl	8048e9c <SecureElementSetDevEui>
 804b30c:	2800      	cmp	r0, #0
 804b30e:	d0f8      	beq.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 804b310:	2403      	movs	r4, #3
    EventRegionNvmCtxChanged( );
 804b312:	f7fd fe3c 	bl	8048f8e <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 804b316:	f7fd fe37 	bl	8048f88 <EventMacNvmCtxChanged>
    return status;
 804b31a:	e79d      	b.n	804b258 <LoRaMacMibSetRequestConfirm+0x10>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 804b31c:	6840      	ldr	r0, [r0, #4]
 804b31e:	f7fd fdd3 	bl	8048ec8 <SecureElementSetJoinEui>
 804b322:	e7f3      	b.n	804b30c <LoRaMacMibSetRequestConfirm+0xc4>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 804b324:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b328:	7902      	ldrb	r2, [r0, #4]
 804b32a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 804b32e:	e7e8      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 804b330:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b334:	6842      	ldr	r2, [r0, #4]
 804b336:	649a      	str	r2, [r3, #72]	; 0x48
 804b338:	e7e3      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 804b33a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b33e:	6842      	ldr	r2, [r0, #4]
 804b340:	64da      	str	r2, [r3, #76]	; 0x4c
 804b342:	e7de      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.GenAppKey != NULL )
 804b344:	6841      	ldr	r1, [r0, #4]
 804b346:	2900      	cmp	r1, #0
 804b348:	d0e2      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 804b34a:	2001      	movs	r0, #1
 804b34c:	f001 f94e 	bl	804c5ec <LoRaMacCryptoSetKey>
 804b350:	2800      	cmp	r0, #0
 804b352:	d0d6      	beq.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 804b354:	2411      	movs	r4, #17
 804b356:	e77f      	b.n	804b258 <LoRaMacMibSetRequestConfirm+0x10>
            if( mibSet->Param.AppKey != NULL )
 804b358:	6841      	ldr	r1, [r0, #4]
 804b35a:	2900      	cmp	r1, #0
 804b35c:	d0d8      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 804b35e:	2000      	movs	r0, #0
 804b360:	e7f4      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkKey != NULL )
 804b362:	6841      	ldr	r1, [r0, #4]
 804b364:	2900      	cmp	r1, #0
 804b366:	d0d3      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 804b368:	2002      	movs	r0, #2
 804b36a:	e7ef      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSIntKey != NULL )
 804b36c:	6841      	ldr	r1, [r0, #4]
 804b36e:	2900      	cmp	r1, #0
 804b370:	d0ce      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 804b372:	2003      	movs	r0, #3
 804b374:	e7ea      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSEncKey != NULL )
 804b376:	6841      	ldr	r1, [r0, #4]
 804b378:	2900      	cmp	r1, #0
 804b37a:	d0c9      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 804b37c:	2004      	movs	r0, #4
 804b37e:	e7e5      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.FNwkSIntKey != NULL )
 804b380:	6841      	ldr	r1, [r0, #4]
 804b382:	2900      	cmp	r1, #0
 804b384:	d0c4      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 804b386:	2005      	movs	r0, #5
 804b388:	e7e0      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.SNwkSIntKey != NULL )
 804b38a:	6841      	ldr	r1, [r0, #4]
 804b38c:	2900      	cmp	r1, #0
 804b38e:	d0bf      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 804b390:	2006      	movs	r0, #6
 804b392:	e7db      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkSEncKey != NULL )
 804b394:	6841      	ldr	r1, [r0, #4]
 804b396:	2900      	cmp	r1, #0
 804b398:	d0ba      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 804b39a:	2007      	movs	r0, #7
 804b39c:	e7d6      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.AppSKey != NULL )
 804b39e:	6841      	ldr	r1, [r0, #4]
 804b3a0:	2900      	cmp	r1, #0
 804b3a2:	d0b5      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 804b3a4:	2008      	movs	r0, #8
 804b3a6:	e7d1      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKEKey != NULL )
 804b3a8:	6841      	ldr	r1, [r0, #4]
 804b3aa:	2900      	cmp	r1, #0
 804b3ac:	d0b0      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 804b3ae:	207f      	movs	r0, #127	; 0x7f
 804b3b0:	e7cc      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey0 != NULL )
 804b3b2:	6841      	ldr	r1, [r0, #4]
 804b3b4:	2900      	cmp	r1, #0
 804b3b6:	d0ab      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 804b3b8:	2080      	movs	r0, #128	; 0x80
 804b3ba:	e7c7      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey0 != NULL )
 804b3bc:	6841      	ldr	r1, [r0, #4]
 804b3be:	2900      	cmp	r1, #0
 804b3c0:	d0a6      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 804b3c2:	2081      	movs	r0, #129	; 0x81
 804b3c4:	e7c2      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey0 != NULL )
 804b3c6:	6841      	ldr	r1, [r0, #4]
 804b3c8:	2900      	cmp	r1, #0
 804b3ca:	d0a1      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 804b3cc:	2082      	movs	r0, #130	; 0x82
 804b3ce:	e7bd      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey1 != NULL )
 804b3d0:	6841      	ldr	r1, [r0, #4]
 804b3d2:	2900      	cmp	r1, #0
 804b3d4:	d09c      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 804b3d6:	2083      	movs	r0, #131	; 0x83
 804b3d8:	e7b8      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey1 != NULL )
 804b3da:	6841      	ldr	r1, [r0, #4]
 804b3dc:	2900      	cmp	r1, #0
 804b3de:	d097      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 804b3e0:	2084      	movs	r0, #132	; 0x84
 804b3e2:	e7b3      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey1 != NULL )
 804b3e4:	6841      	ldr	r1, [r0, #4]
 804b3e6:	2900      	cmp	r1, #0
 804b3e8:	d092      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 804b3ea:	2085      	movs	r0, #133	; 0x85
 804b3ec:	e7ae      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey2 != NULL )
 804b3ee:	6841      	ldr	r1, [r0, #4]
 804b3f0:	2900      	cmp	r1, #0
 804b3f2:	d08d      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 804b3f4:	2086      	movs	r0, #134	; 0x86
 804b3f6:	e7a9      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey2 != NULL )
 804b3f8:	6841      	ldr	r1, [r0, #4]
 804b3fa:	2900      	cmp	r1, #0
 804b3fc:	d088      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 804b3fe:	2087      	movs	r0, #135	; 0x87
 804b400:	e7a4      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey2 != NULL )
 804b402:	6841      	ldr	r1, [r0, #4]
 804b404:	2900      	cmp	r1, #0
 804b406:	d083      	beq.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 804b408:	2088      	movs	r0, #136	; 0x88
 804b40a:	e79f      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey3 != NULL )
 804b40c:	6841      	ldr	r1, [r0, #4]
 804b40e:	2900      	cmp	r1, #0
 804b410:	f43f af7e 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 804b414:	2089      	movs	r0, #137	; 0x89
 804b416:	e799      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey3 != NULL )
 804b418:	6841      	ldr	r1, [r0, #4]
 804b41a:	2900      	cmp	r1, #0
 804b41c:	f43f af78 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 804b420:	208a      	movs	r0, #138	; 0x8a
 804b422:	e793      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey3 != NULL )
 804b424:	6841      	ldr	r1, [r0, #4]
 804b426:	2900      	cmp	r1, #0
 804b428:	f43f af72 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 804b42c:	208b      	movs	r0, #139	; 0x8b
 804b42e:	e78d      	b.n	804b34c <LoRaMacMibSetRequestConfirm+0x104>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 804b430:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b434:	7900      	ldrb	r0, [r0, #4]
 804b436:	f883 00f1 	strb.w	r0, [r3, #241]	; 0xf1
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804b43a:	4b20      	ldr	r3, [pc, #128]	; (804b4bc <LoRaMacMibSetRequestConfirm+0x274>)
 804b43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804b43e:	4798      	blx	r3
 804b440:	e75f      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 804b442:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b446:	7902      	ldrb	r2, [r0, #4]
 804b448:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 804b44c:	e759      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804b44e:	7a03      	ldrb	r3, [r0, #8]
 804b450:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b454:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b458:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b45c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b460:	a903      	add	r1, sp, #12
 804b462:	2207      	movs	r2, #7
 804b464:	7818      	ldrb	r0, [r3, #0]
 804b466:	f001 faff 	bl	804ca68 <RegionVerify>
 804b46a:	2800      	cmp	r0, #0
 804b46c:	f43f af50 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 804b470:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b474:	f503 738e 	add.w	r3, r3, #284	; 0x11c
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804b478:	3404      	adds	r4, #4
 804b47a:	e894 0003 	ldmia.w	r4, {r0, r1}
 804b47e:	e883 0003 	stmia.w	r3, {r0, r1}
 804b482:	e73e      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804b484:	7a03      	ldrb	r3, [r0, #8]
 804b486:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b48a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b48e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b492:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b496:	a903      	add	r1, sp, #12
 804b498:	2207      	movs	r2, #7
 804b49a:	7818      	ldrb	r0, [r3, #0]
 804b49c:	f001 fae4 	bl	804ca68 <RegionVerify>
 804b4a0:	2800      	cmp	r0, #0
 804b4a2:	f43f af35 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804b4a6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b4aa:	3328      	adds	r3, #40	; 0x28
 804b4ac:	e7e4      	b.n	804b478 <LoRaMacMibSetRequestConfirm+0x230>
 804b4ae:	bf00      	nop
 804b4b0:	080543e9 	.word	0x080543e9
 804b4b4:	200029c4 	.word	0x200029c4
 804b4b8:	0805440c 	.word	0x0805440c
 804b4bc:	08053dd0 	.word	0x08053dd0
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804b4c0:	7a03      	ldrb	r3, [r0, #8]
 804b4c2:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b4c6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b4ca:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b4ce:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b4d2:	a903      	add	r1, sp, #12
 804b4d4:	2207      	movs	r2, #7
 804b4d6:	7818      	ldrb	r0, [r3, #0]
 804b4d8:	f001 fac6 	bl	804ca68 <RegionVerify>
 804b4dc:	2800      	cmp	r0, #0
 804b4de:	f43f af17 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 804b4e2:	3404      	adds	r4, #4
 804b4e4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b4e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 804b4ec:	f503 7292 	add.w	r2, r3, #292	; 0x124
 804b4f0:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 804b4f4:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804b4f8:	2a02      	cmp	r2, #2
 804b4fa:	f47f af02 	bne.w	804b302 <LoRaMacMibSetRequestConfirm+0xba>
 804b4fe:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804b502:	2b00      	cmp	r3, #0
 804b504:	f43f aefd 	beq.w	804b302 <LoRaMacMibSetRequestConfirm+0xba>
                    Radio.Sleep( );
 804b508:	4b77      	ldr	r3, [pc, #476]	; (804b6e8 <LoRaMacMibSetRequestConfirm+0x4a0>)
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804b50a:	4c78      	ldr	r4, [pc, #480]	; (804b6ec <LoRaMacMibSetRequestConfirm+0x4a4>)
                    Radio.Sleep( );
 804b50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804b50e:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804b510:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b514:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 804b518:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 804b51c:	7818      	ldrb	r0, [r3, #0]
 804b51e:	9400      	str	r4, [sp, #0]
 804b520:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804b524:	f001 fab6 	bl	804ca94 <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 804b528:	f7fd fe66 	bl	80491f8 <OpenContinuousRxCWindow>
 804b52c:	e6e9      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804b52e:	7a03      	ldrb	r3, [r0, #8]
 804b530:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b534:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b538:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b53c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b540:	a903      	add	r1, sp, #12
 804b542:	2207      	movs	r2, #7
 804b544:	7818      	ldrb	r0, [r3, #0]
 804b546:	f001 fa8f 	bl	804ca68 <RegionVerify>
 804b54a:	2800      	cmp	r0, #0
 804b54c:	f43f aee0 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 804b550:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b554:	3330      	adds	r3, #48	; 0x30
 804b556:	e78f      	b.n	804b478 <LoRaMacMibSetRequestConfirm+0x230>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 804b558:	6843      	ldr	r3, [r0, #4]
 804b55a:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 804b55c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804b55e:	f88d 3014 	strb.w	r3, [sp, #20]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 804b562:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b566:	a904      	add	r1, sp, #16
 804b568:	7818      	ldrb	r0, [r3, #0]
 804b56a:	f001 fa8c 	bl	804ca86 <RegionChanMaskSet>
 804b56e:	2800      	cmp	r0, #0
 804b570:	f47f aec7 	bne.w	804b302 <LoRaMacMibSetRequestConfirm+0xba>
 804b574:	e6cc      	b.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 804b576:	6843      	ldr	r3, [r0, #4]
 804b578:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804b57a:	2300      	movs	r3, #0
 804b57c:	e7ef      	b.n	804b55e <LoRaMacMibSetRequestConfirm+0x316>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 804b57e:	7903      	ldrb	r3, [r0, #4]
 804b580:	1e5a      	subs	r2, r3, #1
 804b582:	2a0e      	cmp	r2, #14
 804b584:	f63f aec4 	bhi.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 804b588:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804b58c:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
 804b590:	e6b7      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 804b592:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b596:	6842      	ldr	r2, [r0, #4]
 804b598:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 804b59c:	e6b1      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 804b59e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5a2:	6842      	ldr	r2, [r0, #4]
 804b5a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 804b5a8:	e6ab      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 804b5aa:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5ae:	6842      	ldr	r2, [r0, #4]
 804b5b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 804b5b4:	e6a5      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 804b5b6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5ba:	6842      	ldr	r2, [r0, #4]
 804b5bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 804b5c0:	e69f      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 804b5c2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5c6:	6842      	ldr	r2, [r0, #4]
 804b5c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 804b5cc:	e699      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 804b5ce:	a906      	add	r1, sp, #24
 804b5d0:	7903      	ldrb	r3, [r0, #4]
 804b5d2:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 804b5d6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5da:	2206      	movs	r2, #6
 804b5dc:	7818      	ldrb	r0, [r3, #0]
 804b5de:	f001 fa43 	bl	804ca68 <RegionVerify>
 804b5e2:	2800      	cmp	r0, #0
 804b5e4:	f43f ae94 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b5e8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5ec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b5f0:	715a      	strb	r2, [r3, #5]
 804b5f2:	e686      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 804b5f4:	7903      	ldrb	r3, [r0, #4]
 804b5f6:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b5fa:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b5fe:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804b602:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804b606:	a903      	add	r1, sp, #12
 804b608:	2205      	movs	r2, #5
 804b60a:	7818      	ldrb	r0, [r3, #0]
 804b60c:	f001 fa2c 	bl	804ca68 <RegionVerify>
 804b610:	2800      	cmp	r0, #0
 804b612:	f43f ae7d 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b616:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b61a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b61e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 804b622:	e66e      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 804b624:	a906      	add	r1, sp, #24
 804b626:	7903      	ldrb	r3, [r0, #4]
 804b628:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 804b62c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b630:	220a      	movs	r2, #10
 804b632:	7818      	ldrb	r0, [r3, #0]
 804b634:	f001 fa18 	bl	804ca68 <RegionVerify>
 804b638:	b930      	cbnz	r0, 804b648 <LoRaMacMibSetRequestConfirm+0x400>
            	PPRINTF("erro");
 804b63a:	4c2d      	ldr	r4, [pc, #180]	; (804b6f0 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804b63c:	4620      	mov	r0, r4
 804b63e:	f003 f879 	bl	804e734 <TraceSend>
 804b642:	2800      	cmp	r0, #0
 804b644:	d1fa      	bne.n	804b63c <LoRaMacMibSetRequestConfirm+0x3f4>
 804b646:	e663      	b.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 804b648:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b64c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b650:	711a      	strb	r2, [r3, #4]
 804b652:	e656      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804b654:	a906      	add	r1, sp, #24
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804b656:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804b65a:	2400      	movs	r4, #0
 804b65c:	f801 4d0c 	strb.w	r4, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804b660:	2209      	movs	r2, #9
 804b662:	7818      	ldrb	r0, [r3, #0]
 804b664:	f001 fa00 	bl	804ca68 <RegionVerify>
 804b668:	b930      	cbnz	r0, 804b678 <LoRaMacMibSetRequestConfirm+0x430>
            	PPRINTF("erro");
 804b66a:	4c21      	ldr	r4, [pc, #132]	; (804b6f0 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804b66c:	4620      	mov	r0, r4
 804b66e:	f003 f861 	bl	804e734 <TraceSend>
 804b672:	2800      	cmp	r0, #0
 804b674:	d1fa      	bne.n	804b66c <LoRaMacMibSetRequestConfirm+0x424>
 804b676:	e64b      	b.n	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 804b678:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b67c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b680:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 804b684:	e645      	b.n	804b312 <LoRaMacMibSetRequestConfirm+0xca>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 804b686:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b68a:	6842      	ldr	r2, [r0, #4]
 804b68c:	609a      	str	r2, [r3, #8]
 804b68e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 804b692:	e636      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 804b694:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b698:	7902      	ldrb	r2, [r0, #4]
 804b69a:	731a      	strb	r2, [r3, #12]
 804b69c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 804b6a0:	e62f      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 804b6a2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b6a6:	6842      	ldr	r2, [r0, #4]
 804b6a8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 804b6ac:	e629      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 804b6ae:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b6b2:	6842      	ldr	r2, [r0, #4]
 804b6b4:	641a      	str	r2, [r3, #64]	; 0x40
 804b6b6:	e624      	b.n	804b302 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.Contexts != 0 )
 804b6b8:	6840      	ldr	r0, [r0, #4]
 804b6ba:	2800      	cmp	r0, #0
 804b6bc:	f43f ae28 	beq.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                status = RestoreCtxs( mibSet->Param.Contexts );
 804b6c0:	f7fe fdbc 	bl	804a23c <RestoreCtxs>
 804b6c4:	e614      	b.n	804b2f0 <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 804b6c6:	7983      	ldrb	r3, [r0, #6]
 804b6c8:	2b01      	cmp	r3, #1
 804b6ca:	f63f ae21 	bhi.w	804b310 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 804b6ce:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b6d2:	6842      	ldr	r2, [r0, #4]
 804b6d4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 804b6d8:	6840      	ldr	r0, [r0, #4]
 804b6da:	f000 fdc7 	bl	804c26c <LoRaMacCryptoSetLrWanVersion>
 804b6de:	e637      	b.n	804b350 <LoRaMacMibSetRequestConfirm+0x108>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804b6e0:	f000 fa27 	bl	804bb32 <LoRaMacMibClassBSetRequestConfirm>
 804b6e4:	e604      	b.n	804b2f0 <LoRaMacMibSetRequestConfirm+0xa8>
 804b6e6:	bf00      	nop
 804b6e8:	08053dd0 	.word	0x08053dd0
 804b6ec:	20002da8 	.word	0x20002da8
 804b6f0:	08054420 	.word	0x08054420

0804b6f4 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 804b6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 804b6f6:	2300      	movs	r3, #0
 804b6f8:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 804b6fc:	4606      	mov	r6, r0
 804b6fe:	b930      	cbnz	r0, 804b70e <LoRaMacMlmeRequest+0x1a>
    {
    	PRINTF("INVALID\n\r");
 804b700:	4862      	ldr	r0, [pc, #392]	; (804b88c <LoRaMacMlmeRequest+0x198>)
 804b702:	f003 f817 	bl	804e734 <TraceSend>
    	return LORAMAC_STATUS_PARAMETER_INVALID;
 804b706:	2403      	movs	r4, #3
    	PRINTF("LORA_MAC_OK\n\r");
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 804b708:	4620      	mov	r0, r4
 804b70a:	b003      	add	sp, #12
 804b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 804b70e:	f7fe f9dd 	bl	8049acc <LoRaMacIsBusy>
 804b712:	b120      	cbz	r0, 804b71e <LoRaMacMlmeRequest+0x2a>
    	PRINTF("BUSY1\n\r");
 804b714:	485e      	ldr	r0, [pc, #376]	; (804b890 <LoRaMacMlmeRequest+0x19c>)
    	PRINTF("BUSY2\n\r");
 804b716:	f003 f80d 	bl	804e734 <TraceSend>
                return LORAMAC_STATUS_BUSY;
 804b71a:	2401      	movs	r4, #1
 804b71c:	e7f4      	b.n	804b708 <LoRaMacMlmeRequest+0x14>
    if( LoRaMacConfirmQueueIsFull( ) == true )
 804b71e:	f000 fc1f 	bl	804bf60 <LoRaMacConfirmQueueIsFull>
 804b722:	b108      	cbz	r0, 804b728 <LoRaMacMlmeRequest+0x34>
    	PRINTF("BUSY2\n\r");
 804b724:	485b      	ldr	r0, [pc, #364]	; (804b894 <LoRaMacMlmeRequest+0x1a0>)
 804b726:	e7f6      	b.n	804b716 <LoRaMacMlmeRequest+0x22>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804b728:	f000 fc14 	bl	804bf54 <LoRaMacConfirmQueueGetCnt>
 804b72c:	4604      	mov	r4, r0
 804b72e:	b938      	cbnz	r0, 804b740 <LoRaMacMlmeRequest+0x4c>
    	PRINTF("gETcnT\n\r");
 804b730:	4859      	ldr	r0, [pc, #356]	; (804b898 <LoRaMacMlmeRequest+0x1a4>)
 804b732:	f002 ffff 	bl	804e734 <TraceSend>
    	memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 804b736:	2214      	movs	r2, #20
 804b738:	4621      	mov	r1, r4
 804b73a:	4858      	ldr	r0, [pc, #352]	; (804b89c <LoRaMacMlmeRequest+0x1a8>)
 804b73c:	f003 f873 	bl	804e826 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b740:	4d57      	ldr	r5, [pc, #348]	; (804b8a0 <LoRaMacMlmeRequest+0x1ac>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 804b742:	f895 2485 	ldrb.w	r2, [r5, #1157]	; 0x485
 804b746:	f042 0204 	orr.w	r2, r2, #4
 804b74a:	f885 2485 	strb.w	r2, [r5, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 804b74e:	7832      	ldrb	r2, [r6, #0]
 804b750:	f88d 2004 	strb.w	r2, [sp, #4]
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b754:	2301      	movs	r3, #1
    queueElement.RestrictCommonReadyToHandle = false;
 804b756:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b758:	f885 3455 	strb.w	r3, [r5, #1109]	; 0x455
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b75c:	f88d 3005 	strb.w	r3, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 804b760:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( mlmeRequest->Type )
 804b764:	2a0d      	cmp	r2, #13
 804b766:	f200 808d 	bhi.w	804b884 <LoRaMacMlmeRequest+0x190>
 804b76a:	e8df f002 	tbb	[pc, r2]
 804b76e:	8b07      	.short	0x8b07
 804b770:	5b483d8b 	.word	0x5b483d8b
 804b774:	648b8b8b 	.word	0x648b8b8b
 804b778:	7b6b7f8b 	.word	0x7b6b7f8b
        	PRINTF("JOIN\n\r");
 804b77c:	4849      	ldr	r0, [pc, #292]	; (804b8a4 <LoRaMacMlmeRequest+0x1b0>)
 804b77e:	f002 ffd9 	bl	804e734 <TraceSend>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 804b782:	f8d5 2344 	ldr.w	r2, [r5, #836]	; 0x344
 804b786:	f012 0420 	ands.w	r4, r2, #32
 804b78a:	d1c6      	bne.n	804b71a <LoRaMacMlmeRequest+0x26>
            ResetMacParameters( );
 804b78c:	f7fd fcd0 	bl	8049130 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804b790:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804b794:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804b798:	7838      	ldrb	r0, [r7, #0]
 804b79a:	4622      	mov	r2, r4
 804b79c:	f001 f9cd 	bl	804cb3a <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804b7a0:	2307      	movs	r3, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804b7a2:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
            status = SendReJoinReq( JOIN_REQ );
 804b7a6:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804b7a8:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 804b7ac:	f7fe fca2 	bl	804a0f4 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 804b7b0:	4604      	mov	r4, r0
 804b7b2:	b368      	cbz	r0, 804b810 <LoRaMacMlmeRequest+0x11c>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 804b7b4:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804b7b8:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804b7bc:	7838      	ldrb	r0, [r7, #0]
 804b7be:	2201      	movs	r2, #1
 804b7c0:	f001 f9bb 	bl	804cb3a <RegionAlternateDr>
 804b7c4:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
    	PRINTF("LORA_MAC_NOT_OK\n\r");
 804b7c8:	4837      	ldr	r0, [pc, #220]	; (804b8a8 <LoRaMacMlmeRequest+0x1b4>)
 804b7ca:	f002 ffb3 	bl	804e734 <TraceSend>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804b7ce:	f000 fbc1 	bl	804bf54 <LoRaMacConfirmQueueGetCnt>
 804b7d2:	2800      	cmp	r0, #0
 804b7d4:	d198      	bne.n	804b708 <LoRaMacMlmeRequest+0x14>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804b7d6:	f895 3485 	ldrb.w	r3, [r5, #1157]	; 0x485
            MacCtx.NodeAckRequested = false;
 804b7da:	f885 0418 	strb.w	r0, [r5, #1048]	; 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804b7de:	f360 0382 	bfi	r3, r0, #2, #1
 804b7e2:	f885 3485 	strb.w	r3, [r5, #1157]	; 0x485
 804b7e6:	e78f      	b.n	804b708 <LoRaMacMlmeRequest+0x14>
        	PRINTF("LINK CHECK");
 804b7e8:	4830      	ldr	r0, [pc, #192]	; (804b8ac <LoRaMacMlmeRequest+0x1b8>)
 804b7ea:	f002 ffa3 	bl	804e734 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b7ee:	2200      	movs	r2, #0
 804b7f0:	4669      	mov	r1, sp
 804b7f2:	2002      	movs	r0, #2
 804b7f4:	f000 f9d6 	bl	804bba4 <LoRaMacCommandsAddCmd>
 804b7f8:	b150      	cbz	r0, 804b810 <LoRaMacMlmeRequest+0x11c>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804b7fa:	2413      	movs	r4, #19
 804b7fc:	e7e4      	b.n	804b7c8 <LoRaMacMlmeRequest+0xd4>
        	PRINTF("TXCW\n\r");
 804b7fe:	482c      	ldr	r0, [pc, #176]	; (804b8b0 <LoRaMacMlmeRequest+0x1bc>)
 804b800:	f002 ff98 	bl	804e734 <TraceSend>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 804b804:	88b0      	ldrh	r0, [r6, #4]
 804b806:	f7fe fca5 	bl	804a154 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804b80a:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 804b80c:	2800      	cmp	r0, #0
 804b80e:	d1db      	bne.n	804b7c8 <LoRaMacMlmeRequest+0xd4>
    	PRINTF("LORA_MAC_OK\n\r");
 804b810:	4828      	ldr	r0, [pc, #160]	; (804b8b4 <LoRaMacMlmeRequest+0x1c0>)
 804b812:	f002 ff8f 	bl	804e734 <TraceSend>
        LoRaMacConfirmQueueAdd( &queueElement );
 804b816:	a801      	add	r0, sp, #4
 804b818:	f000 fadc 	bl	804bdd4 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 804b81c:	2400      	movs	r4, #0
 804b81e:	f7fd fbb3 	bl	8048f88 <EventMacNvmCtxChanged>
 804b822:	e771      	b.n	804b708 <LoRaMacMlmeRequest+0x14>
        	PRINTF("TXCW_1\n\r");
 804b824:	4824      	ldr	r0, [pc, #144]	; (804b8b8 <LoRaMacMlmeRequest+0x1c4>)
 804b826:	f002 ff85 	bl	804e734 <TraceSend>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804b82a:	7b32      	ldrb	r2, [r6, #12]
 804b82c:	68b1      	ldr	r1, [r6, #8]
 804b82e:	88b0      	ldrh	r0, [r6, #4]
 804b830:	f7fe fcb8 	bl	804a1a4 <SetTxContinuousWave1>
 804b834:	e7e9      	b.n	804b80a <LoRaMacMlmeRequest+0x116>
        	PRINTF("Device Time\n\r");
 804b836:	4821      	ldr	r0, [pc, #132]	; (804b8bc <LoRaMacMlmeRequest+0x1c8>)
 804b838:	f002 ff7c 	bl	804e734 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b83c:	2200      	movs	r2, #0
 804b83e:	4669      	mov	r1, sp
 804b840:	200d      	movs	r0, #13
 804b842:	e7d7      	b.n	804b7f4 <LoRaMacMlmeRequest+0x100>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804b844:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b848:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804b84c:	b9d3      	cbnz	r3, 804b884 <LoRaMacMlmeRequest+0x190>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 804b84e:	7934      	ldrb	r4, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 804b850:	f004 0007 	and.w	r0, r4, #7
 804b854:	f000 f966 	bl	804bb24 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 804b858:	a902      	add	r1, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804b85a:	2201      	movs	r2, #1
                macCmdPayload[0] = value;
 804b85c:	f801 4d08 	strb.w	r4, [r1, #-8]!
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804b860:	2010      	movs	r0, #16
 804b862:	e7c7      	b.n	804b7f4 <LoRaMacMlmeRequest+0x100>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b864:	2200      	movs	r2, #0
 804b866:	4669      	mov	r1, sp
 804b868:	2012      	movs	r0, #18
 804b86a:	e7c3      	b.n	804b7f4 <LoRaMacMlmeRequest+0x100>
            queueElement.RestrictCommonReadyToHandle = true;
 804b86c:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 804b870:	f000 f949 	bl	804bb06 <LoRaMacClassBIsAcquisitionInProgress>
 804b874:	4604      	mov	r4, r0
 804b876:	b938      	cbnz	r0, 804b888 <LoRaMacMlmeRequest+0x194>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 804b878:	f000 f942 	bl	804bb00 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 804b87c:	4620      	mov	r0, r4
 804b87e:	f000 f944 	bl	804bb0a <LoRaMacClassBBeaconTimerEvent>
 804b882:	e7c5      	b.n	804b810 <LoRaMacMlmeRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 804b884:	2402      	movs	r4, #2
 804b886:	e79f      	b.n	804b7c8 <LoRaMacMlmeRequest+0xd4>
                status = LORAMAC_STATUS_BUSY;
 804b888:	2401      	movs	r4, #1
 804b88a:	e79d      	b.n	804b7c8 <LoRaMacMlmeRequest+0xd4>
 804b88c:	08054425 	.word	0x08054425
 804b890:	0805442f 	.word	0x0805442f
 804b894:	08054437 	.word	0x08054437
 804b898:	0805443f 	.word	0x0805443f
 804b89c:	20002e18 	.word	0x20002e18
 804b8a0:	200029c4 	.word	0x200029c4
 804b8a4:	08054448 	.word	0x08054448
 804b8a8:	08054478 	.word	0x08054478
 804b8ac:	0805444f 	.word	0x0805444f
 804b8b0:	0805445a 	.word	0x0805445a
 804b8b4:	0805448a 	.word	0x0805448a
 804b8b8:	08054461 	.word	0x08054461
 804b8bc:	0805446a 	.word	0x0805446a

0804b8c0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 804b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 804b8c4:	4605      	mov	r5, r0
{
 804b8c6:	b085      	sub	sp, #20
    if( mcpsRequest == NULL )
 804b8c8:	2800      	cmp	r0, #0
 804b8ca:	f000 809e 	beq.w	804ba0a <LoRaMacMcpsRequest+0x14a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 804b8ce:	f7fe f8fd 	bl	8049acc <LoRaMacIsBusy>
 804b8d2:	4607      	mov	r7, r0
 804b8d4:	2800      	cmp	r0, #0
 804b8d6:	f040 809e 	bne.w	804ba16 <LoRaMacMcpsRequest+0x156>
    {
        return LORAMAC_STATUS_BUSY;
    }

    macHdr.Value = 0;
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804b8da:	4c50      	ldr	r4, [pc, #320]	; (804ba1c <LoRaMacMcpsRequest+0x15c>)
    macHdr.Value = 0;
 804b8dc:	f88d 0000 	strb.w	r0, [sp]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804b8e0:	2214      	movs	r2, #20
 804b8e2:	4601      	mov	r1, r0
 804b8e4:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 804b8e8:	f002 ff9d 	bl	804e826 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b8ec:	2301      	movs	r3, #1

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 804b8ee:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416

    switch( mcpsRequest->Type )
 804b8f2:	782a      	ldrb	r2, [r5, #0]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b8f4:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    switch( mcpsRequest->Type )
 804b8f8:	429a      	cmp	r2, r3
 804b8fa:	d05a      	beq.n	804b9b2 <LoRaMacMcpsRequest+0xf2>
 804b8fc:	d304      	bcc.n	804b908 <LoRaMacMcpsRequest+0x48>
 804b8fe:	2a03      	cmp	r2, #3
 804b900:	d06e      	beq.n	804b9e0 <LoRaMacMcpsRequest+0x120>
    int8_t datarate = DR_0;
 804b902:	46bb      	mov	fp, r7
    uint8_t fPort = 0;
 804b904:	46b8      	mov	r8, r7
 804b906:	e011      	b.n	804b92c <LoRaMacMcpsRequest+0x6c>
        case MCPS_UNCONFIRMED:
        {
            readyToSend = true;
            MacCtx.AckTimeoutRetries = 1;

            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b908:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804b90c:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b910:	2102      	movs	r1, #2
 804b912:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 804b916:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 804b91a:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 804b91e:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 804b922:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b926:	f88d 2000 	strb.w	r2, [sp]
            readyToSend = true;
 804b92a:	461f      	mov	r7, r3
            break;
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b92c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b930:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804b934:	f88d 2006 	strb.w	r2, [sp, #6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804b938:	2602      	movs	r6, #2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804b93a:	a901      	add	r1, sp, #4
 804b93c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804b93e:	f88d 6004 	strb.w	r6, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804b942:	f001 f874 	bl	804ca2e <RegionGetPhyParam>
 804b946:	9002      	str	r0, [sp, #8]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );

    if( readyToSend == true )
 804b948:	b36f      	cbz	r7, 804b9a6 <LoRaMacMcpsRequest+0xe6>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 804b94a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b94e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 804b952:	b9b2      	cbnz	r2, 804b982 <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 804b954:	b240      	sxtb	r0, r0
 804b956:	4558      	cmp	r0, fp
 804b958:	bfb8      	it	lt
 804b95a:	4658      	movlt	r0, fp
        {
            verify.DatarateParams.Datarate = datarate;
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b95c:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
            verify.DatarateParams.Datarate = datarate;
 804b960:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b964:	f88d 200e 	strb.w	r2, [sp, #14]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804b968:	a903      	add	r1, sp, #12
 804b96a:	2205      	movs	r2, #5
 804b96c:	7818      	ldrb	r0, [r3, #0]
 804b96e:	f001 f87b 	bl	804ca68 <RegionVerify>
 804b972:	2800      	cmp	r0, #0
 804b974:	d046      	beq.n	804ba04 <LoRaMacMcpsRequest+0x144>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b976:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b97a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b97e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            	PRINTF("Invalid data rate\r\n");
                return LORAMAC_STATUS_PARAMETER_INVALID;
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 804b982:	4653      	mov	r3, sl
 804b984:	464a      	mov	r2, r9
 804b986:	4641      	mov	r1, r8
 804b988:	4668      	mov	r0, sp
 804b98a:	f7fe fb1b 	bl	8049fc4 <Send>
        if( status == LORAMAC_STATUS_OK )
 804b98e:	4606      	mov	r6, r0
 804b990:	2800      	cmp	r0, #0
 804b992:	d13c      	bne.n	804ba0e <LoRaMacMcpsRequest+0x14e>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 804b994:	782b      	ldrb	r3, [r5, #0]
 804b996:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 804b99a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804b99e:	f043 0301 	orr.w	r3, r3, #1
 804b9a2:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        {
            MacCtx.NodeAckRequested = false;
        }
    }

    EventMacNvmCtxChanged( );
 804b9a6:	f7fd faef 	bl	8048f88 <EventMacNvmCtxChanged>
    return status;
}
 804b9aa:	4630      	mov	r0, r6
 804b9ac:	b005      	add	sp, #20
 804b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 804b9b2:	7beb      	ldrb	r3, [r5, #15]
 804b9b4:	2b08      	cmp	r3, #8
 804b9b6:	bf28      	it	cs
 804b9b8:	2308      	movcs	r3, #8
 804b9ba:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804b9be:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 804b9c2:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 804b9c6:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 804b9ca:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 804b9ce:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804b9d2:	2104      	movs	r1, #4
 804b9d4:	f361 1347 	bfi	r3, r1, #5, #3
 804b9d8:	f88d 3000 	strb.w	r3, [sp]
            readyToSend = true;
 804b9dc:	4617      	mov	r7, r2
            break;
 804b9de:	e7a5      	b.n	804b92c <LoRaMacMcpsRequest+0x6c>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b9e0:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804b9e4:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b9e8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 804b9ec:	f88d 2000 	strb.w	r2, [sp]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 804b9f0:	f8d5 9004 	ldr.w	r9, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 804b9f4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 804b9f8:	f995 b00a 	ldrsb.w	fp, [r5, #10]
            readyToSend = true;
 804b9fc:	461f      	mov	r7, r3
    uint8_t fPort = 0;
 804b9fe:	f04f 0800 	mov.w	r8, #0
            break;
 804ba02:	e793      	b.n	804b92c <LoRaMacMcpsRequest+0x6c>
            	PRINTF("Invalid data rate\r\n");
 804ba04:	4806      	ldr	r0, [pc, #24]	; (804ba20 <LoRaMacMcpsRequest+0x160>)
 804ba06:	f002 fe95 	bl	804e734 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804ba0a:	2603      	movs	r6, #3
 804ba0c:	e7cd      	b.n	804b9aa <LoRaMacMcpsRequest+0xea>
            MacCtx.NodeAckRequested = false;
 804ba0e:	2300      	movs	r3, #0
 804ba10:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 804ba14:	e7c7      	b.n	804b9a6 <LoRaMacMcpsRequest+0xe6>
        return LORAMAC_STATUS_BUSY;
 804ba16:	2601      	movs	r6, #1
 804ba18:	e7c7      	b.n	804b9aa <LoRaMacMcpsRequest+0xea>
 804ba1a:	bf00      	nop
 804ba1c:	200029c4 	.word	0x200029c4
 804ba20:	08054498 	.word	0x08054498

0804ba24 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 804ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 804ba28:	7887      	ldrb	r7, [r0, #2]
{
 804ba2a:	b087      	sub	sp, #28
 804ba2c:	4604      	mov	r4, r0
 804ba2e:	468a      	mov	sl, r1
 804ba30:	4691      	mov	r9, r2
    if( adrNext->Version.Fields.Minor == 0 )
 804ba32:	2f00      	cmp	r7, #0
 804ba34:	d15b      	bne.n	804baee <LoRaMacAdrCalcNext+0xca>
    if( adrNext->AdrEnabled == true )
 804ba36:	7945      	ldrb	r5, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 804ba38:	6882      	ldr	r2, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 804ba3a:	f990 8010 	ldrsb.w	r8, [r0, #16]
    *adrAckCounter = adrNext->AdrAckCounter;
 804ba3e:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 804ba40:	2d00      	cmp	r5, #0
 804ba42:	d052      	beq.n	804baea <LoRaMacAdrCalcNext+0xc6>
        getPhy.Attribute = PHY_MIN_TX_DR;
 804ba44:	2202      	movs	r2, #2
 804ba46:	f88d 2008 	strb.w	r2, [sp, #8]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804ba4a:	a902      	add	r1, sp, #8
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804ba4c:	7c82      	ldrb	r2, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804ba4e:	7cc0      	ldrb	r0, [r0, #19]
 804ba50:	9301      	str	r3, [sp, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804ba52:	f88d 200a 	strb.w	r2, [sp, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804ba56:	f000 ffea 	bl	804ca2e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 804ba5a:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 804ba5e:	45d8      	cmp	r8, fp
 804ba60:	4646      	mov	r6, r8
 804ba62:	bfb8      	it	lt
 804ba64:	465e      	movlt	r6, fp
        if( datarate == minTxDatarate )
 804ba66:	45d8      	cmp	r8, fp
 804ba68:	dc0b      	bgt.n	804ba82 <LoRaMacAdrCalcNext+0x5e>
            *adrAckCounter = 0;
 804ba6a:	9b01      	ldr	r3, [sp, #4]
 804ba6c:	601f      	str	r7, [r3, #0]
                        adrAckReq = false;
 804ba6e:	463d      	mov	r5, r7
    *txPowOut = txPower;
 804ba70:	2300      	movs	r3, #0
    *drOut = datarate;
 804ba72:	f88a 6000 	strb.w	r6, [sl]
    *txPowOut = txPower;
 804ba76:	f889 3000 	strb.w	r3, [r9]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 804ba7a:	4628      	mov	r0, r5
 804ba7c:	b007      	add	sp, #28
 804ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804ba82:	68a2      	ldr	r2, [r4, #8]
 804ba84:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804ba86:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804ba88:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804ba8a:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804ba8c:	bf34      	ite	cc
 804ba8e:	2500      	movcc	r5, #0
 804ba90:	2501      	movcs	r5, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804ba92:	429a      	cmp	r2, r3
 804ba94:	d3ec      	bcc.n	804ba70 <LoRaMacAdrCalcNext+0x4c>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804ba96:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804ba98:	eb0d 0103 	add.w	r1, sp, r3
 804ba9c:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804ba9e:	f88d 3008 	strb.w	r3, [sp, #8]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804baa2:	f000 ffc4 	bl	804ca2e <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 804baa6:	89e3      	ldrh	r3, [r4, #14]
 804baa8:	68a2      	ldr	r2, [r4, #8]
 804baaa:	fbb2 f8f3 	udiv	r8, r2, r3
 804baae:	fb03 2818 	mls	r8, r3, r8, r2
 804bab2:	f1b8 0f01 	cmp.w	r8, #1
 804bab6:	d1db      	bne.n	804ba70 <LoRaMacAdrCalcNext+0x4c>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804bab8:	2322      	movs	r3, #34	; 0x22
 804baba:	f88d 3008 	strb.w	r3, [sp, #8]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804babe:	a902      	add	r1, sp, #8
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804bac0:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804bac2:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.Datarate = datarate;
 804bac4:	f88d 6009 	strb.w	r6, [sp, #9]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804bac8:	f88d 300a 	strb.w	r3, [sp, #10]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804bacc:	f000 ffaf 	bl	804ca2e <RegionGetPhyParam>
                    datarate = phyParam.Value;
 804bad0:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
 804bad2:	45b3      	cmp	fp, r6
 804bad4:	d1cc      	bne.n	804ba70 <LoRaMacAdrCalcNext+0x4c>
                        if( adrNext->UpdateChanMask == true )
 804bad6:	7925      	ldrb	r5, [r4, #4]
 804bad8:	2d00      	cmp	r5, #0
 804bada:	d0c9      	beq.n	804ba70 <LoRaMacAdrCalcNext+0x4c>
                            RegionInitDefaults( adrNext->Region, &params );
 804badc:	a904      	add	r1, sp, #16
 804bade:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804bae0:	f88d 8014 	strb.w	r8, [sp, #20]
                            RegionInitDefaults( adrNext->Region, &params );
 804bae4:	f000 ffb3 	bl	804ca4e <RegionInitDefaults>
 804bae8:	e7c1      	b.n	804ba6e <LoRaMacAdrCalcNext+0x4a>
    int8_t datarate = adrNext->Datarate;
 804baea:	4646      	mov	r6, r8
 804baec:	e7c0      	b.n	804ba70 <LoRaMacAdrCalcNext+0x4c>
    return false;
 804baee:	2500      	movs	r5, #0
 804baf0:	e7c3      	b.n	804ba7a <LoRaMacAdrCalcNext+0x56>

0804baf2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 804baf2:	4770      	bx	lr

0804baf4 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 804baf4:	2001      	movs	r0, #1
 804baf6:	4770      	bx	lr

0804baf8 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 804baf8:	2300      	movs	r3, #0
 804bafa:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bafc:	4618      	mov	r0, r3
 804bafe:	4770      	bx	lr

0804bb00 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb00:	4770      	bx	lr

0804bb02 <LoRaMacClassBSetPingSlotState>:
 804bb02:	4770      	bx	lr

0804bb04 <LoRaMacClassBSetMulticastSlotState>:
 804bb04:	4770      	bx	lr

0804bb06 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb06:	2000      	movs	r0, #0
 804bb08:	4770      	bx	lr

0804bb0a <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb0a:	4770      	bx	lr

0804bb0c <LoRaMacClassBPingSlotTimerEvent>:
 804bb0c:	4770      	bx	lr

0804bb0e <LoRaMacClassBMulticastSlotTimerEvent>:
 804bb0e:	4770      	bx	lr

0804bb10 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb10:	2000      	movs	r0, #0
 804bb12:	4770      	bx	lr

0804bb14 <LoRaMacClassBIsBeaconExpected>:
 804bb14:	2000      	movs	r0, #0
 804bb16:	4770      	bx	lr

0804bb18 <LoRaMacClassBIsPingExpected>:
 804bb18:	2000      	movs	r0, #0
 804bb1a:	4770      	bx	lr

0804bb1c <LoRaMacClassBIsMulticastExpected>:
 804bb1c:	2000      	movs	r0, #0
 804bb1e:	4770      	bx	lr

0804bb20 <LoRaMacClassBIsBeaconModeActive>:
 804bb20:	2000      	movs	r0, #0
 804bb22:	4770      	bx	lr

0804bb24 <LoRaMacClassBSetPingSlotInfo>:
 804bb24:	4770      	bx	lr

0804bb26 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb26:	4770      	bx	lr

0804bb28 <LoRaMacClassBResumeBeaconing>:
 804bb28:	4770      	bx	lr

0804bb2a <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb2a:	2002      	movs	r0, #2
 804bb2c:	4770      	bx	lr

0804bb2e <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb2e:	2002      	movs	r0, #2
 804bb30:	4770      	bx	lr

0804bb32 <LoRaMacMibClassBSetRequestConfirm>:
 804bb32:	2002      	movs	r0, #2
 804bb34:	4770      	bx	lr

0804bb36 <LoRaMacClassBPingSlotInfoAns>:
 804bb36:	4770      	bx	lr

0804bb38 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb38:	2000      	movs	r0, #0
 804bb3a:	4770      	bx	lr

0804bb3c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb3c:	4770      	bx	lr

0804bb3e <LoRaMacClassBDeviceTimeAns>:
 804bb3e:	4770      	bx	lr

0804bb40 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb40:	2000      	movs	r0, #0
 804bb42:	4770      	bx	lr

0804bb44 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804bb44:	2000      	movs	r0, #0
 804bb46:	4770      	bx	lr

0804bb48 <LoRaMacClassBStopRxSlots>:
 804bb48:	4770      	bx	lr

0804bb4a <LoRaMacClassBProcess>:
 804bb4a:	4770      	bx	lr

0804bb4c <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 804bb4c:	4b02      	ldr	r3, [pc, #8]	; (804bb58 <NvmCtxCallback+0xc>)
 804bb4e:	681b      	ldr	r3, [r3, #0]
 804bb50:	b103      	cbz	r3, 804bb54 <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 804bb52:	4718      	bx	r3
    }
}
 804bb54:	4770      	bx	lr
 804bb56:	bf00      	nop
 804bb58:	2000302c 	.word	0x2000302c

0804bb5c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 804bb5c:	b538      	push	{r3, r4, r5, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804bb5e:	4c06      	ldr	r4, [pc, #24]	; (804bb78 <LoRaMacCommandsInit+0x1c>)
{
 804bb60:	4605      	mov	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804bb62:	22fc      	movs	r2, #252	; 0xfc
 804bb64:	1d20      	adds	r0, r4, #4
 804bb66:	2100      	movs	r1, #0
 804bb68:	f002 fe5d 	bl	804e826 <memset1>
    list->First = 0;
 804bb6c:	2000      	movs	r0, #0
    list->Last = 0;
 804bb6e:	e9c4 0001 	strd	r0, r0, [r4, #4]

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 804bb72:	6025      	str	r5, [r4, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bb74:	bd38      	pop	{r3, r4, r5, pc}
 804bb76:	bf00      	nop
 804bb78:	2000302c 	.word	0x2000302c

0804bb7c <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 804bb7c:	b508      	push	{r3, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
 804bb7e:	4601      	mov	r1, r0
 804bb80:	b128      	cbz	r0, 804bb8e <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 804bb82:	4804      	ldr	r0, [pc, #16]	; (804bb94 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 804bb84:	22fc      	movs	r2, #252	; 0xfc
 804bb86:	f002 fe3a 	bl	804e7fe <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 804bb8a:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 804bb8c:	bd08      	pop	{r3, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bb8e:	2001      	movs	r0, #1
 804bb90:	e7fc      	b.n	804bb8c <LoRaMacCommandsRestoreNvmCtx+0x10>
 804bb92:	bf00      	nop
 804bb94:	20003030 	.word	0x20003030

0804bb98 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 804bb98:	23fc      	movs	r3, #252	; 0xfc
 804bb9a:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804bb9c:	4800      	ldr	r0, [pc, #0]	; (804bba0 <LoRaMacCommandsGetNvmCtx+0x8>)
 804bb9e:	4770      	bx	lr
 804bba0:	20003030 	.word	0x20003030

0804bba4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 804bba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804bba8:	4680      	mov	r8, r0
 804bbaa:	4617      	mov	r7, r2
    if( payload == 0 )
 804bbac:	2900      	cmp	r1, #0
 804bbae:	d03f      	beq.n	804bc30 <LoRaMacCommandsAddCmd+0x8c>
 804bbb0:	4824      	ldr	r0, [pc, #144]	; (804bc44 <LoRaMacCommandsAddCmd+0xa0>)
 804bbb2:	2300      	movs	r3, #0
 804bbb4:	461a      	mov	r2, r3
 804bbb6:	1e46      	subs	r6, r0, #1
 804bbb8:	f100 0c0f 	add.w	ip, r0, #15
 804bbbc:	18c5      	adds	r5, r0, r3
 804bbbe:	18f4      	adds	r4, r6, r3
 804bbc0:	eb0c 0e03 	add.w	lr, ip, r3
        if( mem[size] != 0x00 )
 804bbc4:	f814 9f01 	ldrb.w	r9, [r4, #1]!
 804bbc8:	f1b9 0f00 	cmp.w	r9, #0
 804bbcc:	d132      	bne.n	804bc34 <LoRaMacCommandsAddCmd+0x90>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 804bbce:	4574      	cmp	r4, lr
 804bbd0:	d1f8      	bne.n	804bbc4 <LoRaMacCommandsAddCmd+0x20>
    if( list->First == 0 )
 804bbd2:	4c1d      	ldr	r4, [pc, #116]	; (804bc48 <LoRaMacCommandsAddCmd+0xa4>)
 804bbd4:	6860      	ldr	r0, [r4, #4]
 804bbd6:	b900      	cbnz	r0, 804bbda <LoRaMacCommandsAddCmd+0x36>
        list->First = element;
 804bbd8:	6065      	str	r5, [r4, #4]
    if( list->Last )
 804bbda:	68a0      	ldr	r0, [r4, #8]
 804bbdc:	b100      	cbz	r0, 804bbe0 <LoRaMacCommandsAddCmd+0x3c>
        list->Last->Next = element;
 804bbde:	6005      	str	r5, [r0, #0]
    element->Next = 0;
 804bbe0:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    list->Last = element;
 804bbe4:	60a5      	str	r5, [r4, #8]
    element->Next = 0;
 804bbe6:	2600      	movs	r6, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 804bbe8:	1c55      	adds	r5, r2, #1
    element->Next = 0;
 804bbea:	60c6      	str	r6, [r0, #12]
    newCmd->CID = cid;
 804bbec:	f880 8010 	strb.w	r8, [r0, #16]
    newCmd->PayloadSize = payloadSize;
 804bbf0:	eb04 1205 	add.w	r2, r4, r5, lsl #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804bbf4:	4815      	ldr	r0, [pc, #84]	; (804bc4c <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->PayloadSize = payloadSize;
 804bbf6:	6057      	str	r7, [r2, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804bbf8:	4418      	add	r0, r3
 804bbfa:	b2ba      	uxth	r2, r7
 804bbfc:	f002 fdff 	bl	804e7fe <memcpy1>
 804bc00:	f1b8 0f0a 	cmp.w	r8, #10
 804bc04:	d806      	bhi.n	804bc14 <LoRaMacCommandsAddCmd+0x70>
 804bc06:	2301      	movs	r3, #1
 804bc08:	fa03 f808 	lsl.w	r8, r3, r8
 804bc0c:	f418 6fa4 	tst.w	r8, #1312	; 0x520
 804bc10:	bf18      	it	ne
 804bc12:	461e      	movne	r6, r3
    newCmd->IsSticky = IsSticky( cid );
 804bc14:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 804bc18:	7216      	strb	r6, [r2, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 804bc1a:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 804bc1e:	3201      	adds	r2, #1
 804bc20:	443a      	add	r2, r7
 804bc22:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 804bc26:	f7ff ff91 	bl	804bb4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 804bc2a:	2000      	movs	r0, #0
}
 804bc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bc30:	2001      	movs	r0, #1
 804bc32:	e7fb      	b.n	804bc2c <LoRaMacCommandsAddCmd+0x88>
 804bc34:	3201      	adds	r2, #1
        if( itr == NUM_OF_MAC_COMMANDS )
 804bc36:	2a0f      	cmp	r2, #15
 804bc38:	f103 0310 	add.w	r3, r3, #16
 804bc3c:	d1be      	bne.n	804bbbc <LoRaMacCommandsAddCmd+0x18>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 804bc3e:	2002      	movs	r0, #2
 804bc40:	e7f4      	b.n	804bc2c <LoRaMacCommandsAddCmd+0x88>
 804bc42:	bf00      	nop
 804bc44:	20003038 	.word	0x20003038
 804bc48:	2000302c 	.word	0x2000302c
 804bc4c:	2000303d 	.word	0x2000303d

0804bc50 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 804bc50:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 804bc52:	b320      	cbz	r0, 804bc9e <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 804bc54:	4a13      	ldr	r2, [pc, #76]	; (804bca4 <LoRaMacCommandsRemoveCmd+0x54>)
 804bc56:	6853      	ldr	r3, [r2, #4]
    if( element != curElement )
 804bc58:	4298      	cmp	r0, r3
 804bc5a:	d104      	bne.n	804bc66 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 804bc5c:	6803      	ldr	r3, [r0, #0]
 804bc5e:	6053      	str	r3, [r2, #4]
        curElement = NULL;
 804bc60:	2300      	movs	r3, #0
 804bc62:	e004      	b.n	804bc6e <LoRaMacCommandsRemoveCmd+0x1e>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 804bc64:	460b      	mov	r3, r1
 804bc66:	b113      	cbz	r3, 804bc6e <LoRaMacCommandsRemoveCmd+0x1e>
 804bc68:	6819      	ldr	r1, [r3, #0]
 804bc6a:	4288      	cmp	r0, r1
 804bc6c:	d1fa      	bne.n	804bc64 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 804bc6e:	6891      	ldr	r1, [r2, #8]
 804bc70:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 804bc72:	bf08      	it	eq
 804bc74:	6093      	streq	r3, [r2, #8]
    if( PrevElement != NULL )
 804bc76:	b10b      	cbz	r3, 804bc7c <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 804bc78:	6801      	ldr	r1, [r0, #0]
 804bc7a:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804bc7c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 804bc80:	6881      	ldr	r1, [r0, #8]
 804bc82:	3b01      	subs	r3, #1
 804bc84:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 804bc86:	2400      	movs	r4, #0
 804bc88:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804bc8a:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804bc8c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804bc90:	2210      	movs	r2, #16
 804bc92:	f002 fdc8 	bl	804e826 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 804bc96:	f7ff ff59 	bl	804bb4c <NvmCtxCallback>
 804bc9a:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bc9c:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bc9e:	2001      	movs	r0, #1
 804bca0:	e7fc      	b.n	804bc9c <LoRaMacCommandsRemoveCmd+0x4c>
 804bca2:	bf00      	nop
 804bca4:	2000302c 	.word	0x2000302c

0804bca8 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 804bca8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804bcaa:	4b07      	ldr	r3, [pc, #28]	; (804bcc8 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>)
 804bcac:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 804bcae:	b91c      	cbnz	r4, 804bcb8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 804bcb0:	f7ff ff4c 	bl	804bb4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bcb4:	4620      	mov	r0, r4
 804bcb6:	bd38      	pop	{r3, r4, r5, pc}
        if( curElement->IsSticky == false )
 804bcb8:	7b23      	ldrb	r3, [r4, #12]
 804bcba:	6825      	ldr	r5, [r4, #0]
 804bcbc:	b913      	cbnz	r3, 804bcc4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 804bcbe:	4620      	mov	r0, r4
 804bcc0:	f7ff ffc6 	bl	804bc50 <LoRaMacCommandsRemoveCmd>
{
 804bcc4:	462c      	mov	r4, r5
 804bcc6:	e7f2      	b.n	804bcae <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 804bcc8:	2000302c 	.word	0x2000302c

0804bccc <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804bccc:	4b0b      	ldr	r3, [pc, #44]	; (804bcfc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
{
 804bcce:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 804bcd0:	685c      	ldr	r4, [r3, #4]
 804bcd2:	2501      	movs	r5, #1

    // Loop through all elements
    while( curElement != NULL )
 804bcd4:	b91c      	cbnz	r4, 804bcde <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 804bcd6:	f7ff ff39 	bl	804bb4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bcda:	4620      	mov	r0, r4
 804bcdc:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 804bcde:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 804bce0:	6826      	ldr	r6, [r4, #0]
 804bce2:	2b0a      	cmp	r3, #10
 804bce4:	d807      	bhi.n	804bcf6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
 804bce6:	fa05 f303 	lsl.w	r3, r5, r3
 804bcea:	f413 6fa4 	tst.w	r3, #1312	; 0x520
 804bcee:	d002      	beq.n	804bcf6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
            LoRaMacCommandsRemoveCmd( curElement );
 804bcf0:	4620      	mov	r0, r4
 804bcf2:	f7ff ffad 	bl	804bc50 <LoRaMacCommandsRemoveCmd>
{
 804bcf6:	4634      	mov	r4, r6
 804bcf8:	e7ec      	b.n	804bcd4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 804bcfa:	bf00      	nop
 804bcfc:	2000302c 	.word	0x2000302c

0804bd00 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 804bd00:	b128      	cbz	r0, 804bd0e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 804bd02:	4b04      	ldr	r3, [pc, #16]	; (804bd14 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 804bd04:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804bd08:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 804bd0a:	2000      	movs	r0, #0
 804bd0c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bd0e:	2001      	movs	r0, #1
}
 804bd10:	4770      	bx	lr
 804bd12:	bf00      	nop
 804bd14:	2000302c 	.word	0x2000302c

0804bd18 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 804bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bd1a:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 804bd1c:	4616      	mov	r6, r2
 804bd1e:	b1ca      	cbz	r2, 804bd54 <LoRaMacCommandsSerializeCmds+0x3c>
 804bd20:	b1c1      	cbz	r1, 804bd54 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804bd22:	4b0d      	ldr	r3, [pc, #52]	; (804bd58 <LoRaMacCommandsSerializeCmds+0x40>)
 804bd24:	685c      	ldr	r4, [r3, #4]
    uint8_t itr = 0;
 804bd26:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 804bd28:	b90c      	cbnz	r4, 804bd2e <LoRaMacCommandsSerializeCmds+0x16>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 804bd2a:	2000      	movs	r0, #0
 804bd2c:	e013      	b.n	804bd56 <LoRaMacCommandsSerializeCmds+0x3e>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 804bd2e:	68a2      	ldr	r2, [r4, #8]
 804bd30:	1af9      	subs	r1, r7, r3
 804bd32:	3201      	adds	r2, #1
 804bd34:	4291      	cmp	r1, r2
 804bd36:	d3f8      	bcc.n	804bd2a <LoRaMacCommandsSerializeCmds+0x12>
            buffer[itr++] = curElement->CID;
 804bd38:	7922      	ldrb	r2, [r4, #4]
 804bd3a:	54f2      	strb	r2, [r6, r3]
 804bd3c:	1c5d      	adds	r5, r3, #1
 804bd3e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 804bd40:	8922      	ldrh	r2, [r4, #8]
 804bd42:	1d61      	adds	r1, r4, #5
 804bd44:	1970      	adds	r0, r6, r5
 804bd46:	f002 fd5a 	bl	804e7fe <memcpy1>
            itr = itr + curElement->PayloadSize;
 804bd4a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 804bd4c:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 804bd4e:	441d      	add	r5, r3
 804bd50:	b2eb      	uxtb	r3, r5
 804bd52:	e7e9      	b.n	804bd28 <LoRaMacCommandsSerializeCmds+0x10>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bd54:	2001      	movs	r0, #1
}
 804bd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bd58:	2000302c 	.word	0x2000302c

0804bd5c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 804bd5c:	b160      	cbz	r0, 804bd78 <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804bd5e:	4b07      	ldr	r3, [pc, #28]	; (804bd7c <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 804bd60:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 804bd62:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 804bd64:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 804bd66:	b11b      	cbz	r3, 804bd70 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 804bd68:	7b1a      	ldrb	r2, [r3, #12]
 804bd6a:	b11a      	cbz	r2, 804bd74 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 804bd6c:	2301      	movs	r3, #1
 804bd6e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 804bd70:	2000      	movs	r0, #0
 804bd72:	4770      	bx	lr
        }
        curElement = curElement->Next;
 804bd74:	681b      	ldr	r3, [r3, #0]
 804bd76:	e7f6      	b.n	804bd66 <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bd78:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bd7a:	4770      	bx	lr
 804bd7c:	2000302c 	.word	0x2000302c

0804bd80 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 804bd80:	b538      	push	{r3, r4, r5, lr}
    ConfirmQueueCtx.Primitives = primitives;
 804bd82:	4c0a      	ldr	r4, [pc, #40]	; (804bdac <LoRaMacConfirmQueueInit+0x2c>)
 804bd84:	4623      	mov	r3, r4

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804bd86:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 804bd88:	f843 0b14 	str.w	r0, [r3], #20
{
 804bd8c:	460d      	mov	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804bd8e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804bd92:	4618      	mov	r0, r3
 804bd94:	2214      	movs	r2, #20
 804bd96:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 804bd98:	6123      	str	r3, [r4, #16]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bd9a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804bd9e:	f002 fd42 	bl	804e826 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804bda2:	6923      	ldr	r3, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 804bda4:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804bda6:	2201      	movs	r2, #1
 804bda8:	755a      	strb	r2, [r3, #21]
}
 804bdaa:	bd38      	pop	{r3, r4, r5, pc}
 804bdac:	2000312c 	.word	0x2000312c

0804bdb0 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 804bdb0:	b508      	push	{r3, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 804bdb2:	b128      	cbz	r0, 804bdc0 <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 804bdb4:	4601      	mov	r1, r0
 804bdb6:	2216      	movs	r2, #22
 804bdb8:	4802      	ldr	r0, [pc, #8]	; (804bdc4 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 804bdba:	f002 fd20 	bl	804e7fe <memcpy1>
        return true;
 804bdbe:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 804bdc0:	bd08      	pop	{r3, pc}
 804bdc2:	bf00      	nop
 804bdc4:	20003140 	.word	0x20003140

0804bdc8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 804bdc8:	2316      	movs	r3, #22
 804bdca:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 804bdcc:	4800      	ldr	r0, [pc, #0]	; (804bdd0 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 804bdce:	4770      	bx	lr
 804bdd0:	20003140 	.word	0x20003140

0804bdd4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 804bdd4:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804bdd6:	490d      	ldr	r1, [pc, #52]	; (804be0c <LoRaMacConfirmQueueAdd+0x38>)
 804bdd8:	690b      	ldr	r3, [r1, #16]
 804bdda:	7d1a      	ldrb	r2, [r3, #20]
 804bddc:	2a04      	cmp	r2, #4
 804bdde:	d813      	bhi.n	804be08 <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 804bde0:	688a      	ldr	r2, [r1, #8]
 804bde2:	7804      	ldrb	r4, [r0, #0]
 804bde4:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804bde6:	7844      	ldrb	r4, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 804bde8:	78c0      	ldrb	r0, [r0, #3]
 804bdea:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804bdec:	2000      	movs	r0, #0
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804bdee:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804bdf0:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 804bdf2:	7d18      	ldrb	r0, [r3, #20]
 804bdf4:	3001      	adds	r0, #1
 804bdf6:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bdf8:	f103 0010 	add.w	r0, r3, #16
 804bdfc:	4282      	cmp	r2, r0
        bufferPointer++;
 804bdfe:	bf18      	it	ne
 804be00:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 804be02:	608b      	str	r3, [r1, #8]

    return true;
 804be04:	2001      	movs	r0, #1
}
 804be06:	bd10      	pop	{r4, pc}
        return false;
 804be08:	2000      	movs	r0, #0
 804be0a:	e7fc      	b.n	804be06 <LoRaMacConfirmQueueAdd+0x32>
 804be0c:	2000312c 	.word	0x2000312c

0804be10 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 804be10:	4a07      	ldr	r2, [pc, #28]	; (804be30 <LoRaMacConfirmQueueRemoveFirst+0x20>)
 804be12:	6913      	ldr	r3, [r2, #16]
 804be14:	7d18      	ldrb	r0, [r3, #20]
 804be16:	b148      	cbz	r0, 804be2c <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804be18:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 804be1a:	3801      	subs	r0, #1
 804be1c:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804be1e:	f103 0010 	add.w	r0, r3, #16
 804be22:	4281      	cmp	r1, r0
        bufferPointer++;
 804be24:	bf18      	it	ne
 804be26:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804be28:	6053      	str	r3, [r2, #4]

    return true;
 804be2a:	2001      	movs	r0, #1
}
 804be2c:	4770      	bx	lr
 804be2e:	bf00      	nop
 804be30:	2000312c 	.word	0x2000312c

0804be34 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 804be34:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804be36:	4c0b      	ldr	r4, [pc, #44]	; (804be64 <LoRaMacConfirmQueueSetStatus+0x30>)
 804be38:	6922      	ldr	r2, [r4, #16]
 804be3a:	7d13      	ldrb	r3, [r2, #20]
 804be3c:	b12b      	cbz	r3, 804be4a <LoRaMacConfirmQueueSetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804be3e:	e9d4 3401 	ldrd	r3, r4, [r4, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804be42:	f102 0510 	add.w	r5, r2, #16
    while( element != bufferEnd )
 804be46:	429c      	cmp	r4, r3
 804be48:	d100      	bne.n	804be4c <LoRaMacConfirmQueueSetStatus+0x18>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 804be4a:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 804be4c:	781e      	ldrb	r6, [r3, #0]
 804be4e:	428e      	cmp	r6, r1
 804be50:	d004      	beq.n	804be5c <LoRaMacConfirmQueueSetStatus+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804be52:	42ab      	cmp	r3, r5
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804be54:	bf0c      	ite	eq
 804be56:	4613      	moveq	r3, r2
        bufferPointer++;
 804be58:	3304      	addne	r3, #4
 804be5a:	e7f4      	b.n	804be46 <LoRaMacConfirmQueueSetStatus+0x12>
            element->ReadyToHandle = true;
 804be5c:	2201      	movs	r2, #1
            element->Status = status;
 804be5e:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 804be60:	709a      	strb	r2, [r3, #2]
 804be62:	e7f2      	b.n	804be4a <LoRaMacConfirmQueueSetStatus+0x16>
 804be64:	2000312c 	.word	0x2000312c

0804be68 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 804be68:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804be6a:	490b      	ldr	r1, [pc, #44]	; (804be98 <LoRaMacConfirmQueueGetStatus+0x30>)
 804be6c:	690a      	ldr	r2, [r1, #16]
 804be6e:	7d13      	ldrb	r3, [r2, #20]
 804be70:	b12b      	cbz	r3, 804be7e <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804be72:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804be76:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804be7a:	4299      	cmp	r1, r3
 804be7c:	d101      	bne.n	804be82 <LoRaMacConfirmQueueGetStatus+0x1a>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 804be7e:	2001      	movs	r0, #1
}
 804be80:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804be82:	781d      	ldrb	r5, [r3, #0]
 804be84:	4285      	cmp	r5, r0
 804be86:	d004      	beq.n	804be92 <LoRaMacConfirmQueueGetStatus+0x2a>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804be88:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804be8a:	bf0c      	ite	eq
 804be8c:	4613      	moveq	r3, r2
        bufferPointer++;
 804be8e:	3304      	addne	r3, #4
 804be90:	e7f3      	b.n	804be7a <LoRaMacConfirmQueueGetStatus+0x12>
            return element->Status;
 804be92:	7858      	ldrb	r0, [r3, #1]
 804be94:	e7f4      	b.n	804be80 <LoRaMacConfirmQueueGetStatus+0x18>
 804be96:	bf00      	nop
 804be98:	2000312c 	.word	0x2000312c

0804be9c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 804be9c:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804be9e:	490a      	ldr	r1, [pc, #40]	; (804bec8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804bea0:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804bea2:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bea4:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804bea6:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bea8:	b16c      	cbz	r4, 804bec6 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 804beaa:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 804beac:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804beae:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 804beb2:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 804beb4:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 804beb6:	b906      	cbnz	r6, 804beba <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 804beb8:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804beba:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bebc:	bf0c      	ite	eq
 804bebe:	4613      	moveq	r3, r2
        bufferPointer++;
 804bec0:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 804bec2:	4299      	cmp	r1, r3
 804bec4:	d1f5      	bne.n	804beb2 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 804bec6:	bd70      	pop	{r4, r5, r6, pc}
 804bec8:	2000312c 	.word	0x2000312c

0804becc <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 804becc:	4a0a      	ldr	r2, [pc, #40]	; (804bef8 <LoRaMacConfirmQueueIsCmdActive+0x2c>)
 804bece:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bed2:	6912      	ldr	r2, [r2, #16]
{
 804bed4:	b530      	push	{r4, r5, lr}
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bed6:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804beda:	4299      	cmp	r1, r3
 804bedc:	d101      	bne.n	804bee2 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 804bede:	2000      	movs	r0, #0
}
 804bee0:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804bee2:	781d      	ldrb	r5, [r3, #0]
 804bee4:	4285      	cmp	r5, r0
 804bee6:	d004      	beq.n	804bef2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bee8:	42a3      	cmp	r3, r4
        bufferPointer++;
 804beea:	bf14      	ite	ne
 804beec:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804beee:	4613      	moveq	r3, r2
 804bef0:	e7f3      	b.n	804beda <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 804bef2:	2001      	movs	r0, #1
 804bef4:	e7f4      	b.n	804bee0 <LoRaMacConfirmQueueIsCmdActive+0x14>
 804bef6:	bf00      	nop
 804bef8:	2000312c 	.word	0x2000312c

0804befc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 804befc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804bf00:	4c13      	ldr	r4, [pc, #76]	; (804bf50 <LoRaMacConfirmQueueHandleCb+0x54>)
 804bf02:	6923      	ldr	r3, [r4, #16]
 804bf04:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 804bf08:	4606      	mov	r6, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 804bf0a:	2500      	movs	r5, #0
 804bf0c:	b2eb      	uxtb	r3, r5
 804bf0e:	4598      	cmp	r8, r3
 804bf10:	d802      	bhi.n	804bf18 <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 804bf12:	b002      	add	sp, #8
 804bf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bf18:	6863      	ldr	r3, [r4, #4]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 804bf1a:	789f      	ldrb	r7, [r3, #2]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bf1c:	7819      	ldrb	r1, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804bf1e:	785a      	ldrb	r2, [r3, #1]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bf20:	7031      	strb	r1, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804bf22:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
 804bf24:	b15f      	cbz	r7, 804bf3e <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 804bf26:	6823      	ldr	r3, [r4, #0]
 804bf28:	4630      	mov	r0, r6
 804bf2a:	689b      	ldr	r3, [r3, #8]
 804bf2c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 804bf2e:	f7ff ff6f 	bl	804be10 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 804bf32:	b917      	cbnz	r7, 804bf3a <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 804bf34:	a801      	add	r0, sp, #4
 804bf36:	f7ff ff4d 	bl	804bdd4 <LoRaMacConfirmQueueAdd>
 804bf3a:	3501      	adds	r5, #1
 804bf3c:	e7e6      	b.n	804bf0c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804bf3e:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 804bf40:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 804bf44:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804bf48:	f88d 3007 	strb.w	r3, [sp, #7]
 804bf4c:	e7ef      	b.n	804bf2e <LoRaMacConfirmQueueHandleCb+0x32>
 804bf4e:	bf00      	nop
 804bf50:	2000312c 	.word	0x2000312c

0804bf54 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804bf54:	4b01      	ldr	r3, [pc, #4]	; (804bf5c <LoRaMacConfirmQueueGetCnt+0x8>)
 804bf56:	691b      	ldr	r3, [r3, #16]
}
 804bf58:	7d18      	ldrb	r0, [r3, #20]
 804bf5a:	4770      	bx	lr
 804bf5c:	2000312c 	.word	0x2000312c

0804bf60 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804bf60:	4b03      	ldr	r3, [pc, #12]	; (804bf70 <LoRaMacConfirmQueueIsFull+0x10>)
 804bf62:	691b      	ldr	r3, [r3, #16]
 804bf64:	7d18      	ldrb	r0, [r3, #20]
    }
    else
    {
        return false;
    }
}
 804bf66:	2804      	cmp	r0, #4
 804bf68:	bf94      	ite	ls
 804bf6a:	2000      	movls	r0, #0
 804bf6c:	2001      	movhi	r0, #1
 804bf6e:	4770      	bx	lr
 804bf70:	2000312c 	.word	0x2000312c

0804bf74 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 804bf74:	3801      	subs	r0, #1
 804bf76:	2806      	cmp	r0, #6
 804bf78:	d82b      	bhi.n	804bfd2 <GetLastFcntDown+0x5e>
 804bf7a:	e8df f000 	tbb	[pc, r0]
 804bf7e:	0d04      	.short	0x0d04
 804bf80:	221e1913 	.word	0x221e1913
 804bf84:	26          	.byte	0x26
 804bf85:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 804bf86:	4b14      	ldr	r3, [pc, #80]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bf88:	685a      	ldr	r2, [r3, #4]
 804bf8a:	4613      	mov	r3, r2
 804bf8c:	f853 0f10 	ldr.w	r0, [r3, #16]!
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bf90:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bf92:	6313      	str	r3, [r2, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 804bf94:	2000      	movs	r0, #0
            break;
 804bf96:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bf98:	4b0f      	ldr	r3, [pc, #60]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bf9a:	685a      	ldr	r2, [r3, #4]
 804bf9c:	4613      	mov	r3, r2
 804bf9e:	f853 0f14 	ldr.w	r0, [r3, #20]!
 804bfa2:	e7f5      	b.n	804bf90 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 804bfa4:	4b0c      	ldr	r3, [pc, #48]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bfa6:	685a      	ldr	r2, [r3, #4]
 804bfa8:	4613      	mov	r3, r2
 804bfaa:	f853 0f18 	ldr.w	r0, [r3, #24]!
 804bfae:	e7ef      	b.n	804bf90 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804bfb0:	4b09      	ldr	r3, [pc, #36]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bfb2:	685b      	ldr	r3, [r3, #4]
 804bfb4:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804bfb6:	600b      	str	r3, [r1, #0]
 804bfb8:	e7ec      	b.n	804bf94 <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804bfba:	4b07      	ldr	r3, [pc, #28]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bfbc:	685b      	ldr	r3, [r3, #4]
 804bfbe:	6a1b      	ldr	r3, [r3, #32]
 804bfc0:	e7f9      	b.n	804bfb6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804bfc2:	4b05      	ldr	r3, [pc, #20]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bfc4:	685b      	ldr	r3, [r3, #4]
 804bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804bfc8:	e7f5      	b.n	804bfb6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804bfca:	4b03      	ldr	r3, [pc, #12]	; (804bfd8 <GetLastFcntDown+0x64>)
 804bfcc:	685b      	ldr	r3, [r3, #4]
 804bfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804bfd0:	e7f1      	b.n	804bfb6 <GetLastFcntDown+0x42>
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 804bfd2:	2005      	movs	r0, #5
}
 804bfd4:	4770      	bx	lr
 804bfd6:	bf00      	nop
 804bfd8:	20003158 	.word	0x20003158

0804bfdc <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 804bfdc:	4770      	bx	lr

0804bfde <PayloadEncrypt>:
{
 804bfde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804bfe2:	b089      	sub	sp, #36	; 0x24
 804bfe4:	460f      	mov	r7, r1
 804bfe6:	4690      	mov	r8, r2
 804bfe8:	4699      	mov	r9, r3
 804bfea:	9d11      	ldr	r5, [sp, #68]	; 0x44
    if( buffer == 0 )
 804bfec:	4606      	mov	r6, r0
 804bfee:	2800      	cmp	r0, #0
 804bff0:	d058      	beq.n	804c0a4 <PayloadEncrypt+0xc6>
    uint8_t sBlock[16] = { 0 };
 804bff2:	2210      	movs	r2, #16
 804bff4:	2100      	movs	r1, #0
 804bff6:	4668      	mov	r0, sp
 804bff8:	f004 fdef 	bl	8050bda <memset>
    uint8_t aBlock[16] = { 0 };
 804bffc:	2210      	movs	r2, #16
 804bffe:	2100      	movs	r1, #0
 804c000:	eb0d 0002 	add.w	r0, sp, r2
 804c004:	f004 fde9 	bl	8050bda <memset>
    aBlock[5] = dir;
 804c008:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 804c00c:	f88d 3015 	strb.w	r3, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 804c010:	ea4f 2319 	mov.w	r3, r9, lsr #8
 804c014:	f88d 3017 	strb.w	r3, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 804c018:	ea4f 4319 	mov.w	r3, r9, lsr #16
 804c01c:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804c020:	0a2b      	lsrs	r3, r5, #8
    aBlock[0] = 0x01;
 804c022:	2401      	movs	r4, #1
    aBlock[6] = address & 0xFF;
 804c024:	f88d 9016 	strb.w	r9, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 804c028:	f88d 501a 	strb.w	r5, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804c02c:	ea4f 6919 	mov.w	r9, r9, lsr #24
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804c030:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804c034:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 804c036:	0e2d      	lsrs	r5, r5, #24
 804c038:	f88d 501d 	strb.w	r5, [sp, #29]
    aBlock[0] = 0x01;
 804c03c:	f88d 4010 	strb.w	r4, [sp, #16]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804c040:	f88d 9019 	strb.w	r9, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804c044:	f88d 301c 	strb.w	r3, [sp, #28]
    while( size > 0 )
 804c048:	463d      	mov	r5, r7
 804c04a:	eba7 0905 	sub.w	r9, r7, r5
 804c04e:	2d00      	cmp	r5, #0
 804c050:	fa5f f989 	uxtb.w	r9, r9
 804c054:	dc03      	bgt.n	804c05e <PayloadEncrypt+0x80>
    return LORAMAC_CRYPTO_SUCCESS;
 804c056:	2000      	movs	r0, #0
}
 804c058:	b009      	add	sp, #36	; 0x24
 804c05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804c05e:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 804c060:	f88d 401f 	strb.w	r4, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804c064:	466b      	mov	r3, sp
        ctr++;
 804c066:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804c068:	4642      	mov	r2, r8
 804c06a:	eb0d 0001 	add.w	r0, sp, r1
        ctr++;
 804c06e:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804c070:	f7fc fe64 	bl	8048d3c <SecureElementAesEncrypt>
 804c074:	b9c0      	cbnz	r0, 804c0a8 <PayloadEncrypt+0xca>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 804c076:	2d10      	cmp	r5, #16
 804c078:	46ac      	mov	ip, r5
 804c07a:	bfa8      	it	ge
 804c07c:	f04f 0c10 	movge.w	ip, #16
 804c080:	b2c3      	uxtb	r3, r0
 804c082:	4563      	cmp	r3, ip
 804c084:	f100 0001 	add.w	r0, r0, #1
 804c088:	db02      	blt.n	804c090 <PayloadEncrypt+0xb2>
 804c08a:	3d10      	subs	r5, #16
 804c08c:	b22d      	sxth	r5, r5
 804c08e:	e7dc      	b.n	804c04a <PayloadEncrypt+0x6c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 804c090:	aa08      	add	r2, sp, #32
 804c092:	eb09 0103 	add.w	r1, r9, r3
 804c096:	4413      	add	r3, r2
 804c098:	5c72      	ldrb	r2, [r6, r1]
 804c09a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 804c09e:	4053      	eors	r3, r2
 804c0a0:	5473      	strb	r3, [r6, r1]
 804c0a2:	e7ed      	b.n	804c080 <PayloadEncrypt+0xa2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c0a4:	200a      	movs	r0, #10
 804c0a6:	e7d7      	b.n	804c058 <PayloadEncrypt+0x7a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c0a8:	200f      	movs	r0, #15
 804c0aa:	e7d5      	b.n	804c058 <PayloadEncrypt+0x7a>

0804c0ac <DeriveSessionKey10x>:
{
 804c0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c0ae:	4604      	mov	r4, r0
 804c0b0:	b085      	sub	sp, #20
 804c0b2:	460f      	mov	r7, r1
 804c0b4:	4616      	mov	r6, r2
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 804c0b6:	461d      	mov	r5, r3
 804c0b8:	b34b      	cbz	r3, 804c10e <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 804c0ba:	2210      	movs	r2, #16
 804c0bc:	2100      	movs	r1, #0
 804c0be:	4668      	mov	r0, sp
 804c0c0:	f004 fd8b 	bl	8050bda <memset>
    switch( keyID )
 804c0c4:	2c08      	cmp	r4, #8
            compBase[0] = 0x01;
 804c0c6:	bf14      	ite	ne
 804c0c8:	2301      	movne	r3, #1
            compBase[0] = 0x02;
 804c0ca:	2302      	moveq	r3, #2
    memcpy1( compBase + 1, joinNonce, 3 );
 804c0cc:	2203      	movs	r2, #3
 804c0ce:	4639      	mov	r1, r7
 804c0d0:	f10d 0001 	add.w	r0, sp, #1
            compBase[0] = 0x02;
 804c0d4:	f88d 3000 	strb.w	r3, [sp]
    memcpy1( compBase + 1, joinNonce, 3 );
 804c0d8:	f002 fb91 	bl	804e7fe <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 804c0dc:	2203      	movs	r2, #3
 804c0de:	4631      	mov	r1, r6
 804c0e0:	a801      	add	r0, sp, #4
 804c0e2:	f002 fb8c 	bl	804e7fe <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 804c0e6:	2202      	movs	r2, #2
 804c0e8:	4629      	mov	r1, r5
 804c0ea:	f10d 0007 	add.w	r0, sp, #7
 804c0ee:	f002 fb86 	bl	804e7fe <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 804c0f2:	4b08      	ldr	r3, [pc, #32]	; (804c114 <DeriveSessionKey10x+0x68>)
 804c0f4:	6858      	ldr	r0, [r3, #4]
 804c0f6:	2202      	movs	r2, #2
 804c0f8:	4623      	mov	r3, r4
 804c0fa:	4669      	mov	r1, sp
 804c0fc:	6800      	ldr	r0, [r0, #0]
 804c0fe:	f7fc fe9a 	bl	8048e36 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 804c102:	2800      	cmp	r0, #0
 804c104:	bf14      	ite	ne
 804c106:	200f      	movne	r0, #15
 804c108:	2000      	moveq	r0, #0
}
 804c10a:	b005      	add	sp, #20
 804c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c10e:	200a      	movs	r0, #10
 804c110:	e7fb      	b.n	804c10a <DeriveSessionKey10x+0x5e>
 804c112:	bf00      	nop
 804c114:	20003158 	.word	0x20003158

0804c118 <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 804c118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 804c11a:	2210      	movs	r2, #16
 804c11c:	2100      	movs	r1, #0
 804c11e:	4668      	mov	r0, sp
 804c120:	f004 fd5b 	bl	8050bda <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 804c124:	4b07      	ldr	r3, [pc, #28]	; (804c144 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 804c126:	6858      	ldr	r0, [r3, #4]
 804c128:	2209      	movs	r2, #9
 804c12a:	237f      	movs	r3, #127	; 0x7f
 804c12c:	4669      	mov	r1, sp
 804c12e:	6800      	ldr	r0, [r0, #0]
 804c130:	f7fc fe81 	bl	8048e36 <SecureElementDeriveAndStoreKey>
 804c134:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 804c136:	bf14      	ite	ne
 804c138:	200f      	movne	r0, #15
 804c13a:	2000      	moveq	r0, #0
 804c13c:	b005      	add	sp, #20
 804c13e:	f85d fb04 	ldr.w	pc, [sp], #4
 804c142:	bf00      	nop
 804c144:	20003158 	.word	0x20003158

0804c148 <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 804c148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804c14c:	b0c5      	sub	sp, #276	; 0x114
 804c14e:	460c      	mov	r4, r1
 804c150:	4617      	mov	r7, r2
 804c152:	4699      	mov	r9, r3
 804c154:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 804c156:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    if( msg == 0 )
 804c158:	4680      	mov	r8, r0
 804c15a:	2800      	cmp	r0, #0
 804c15c:	d053      	beq.n	804c206 <VerifyCmacB0.constprop.3+0xbe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804c15e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 804c162:	d852      	bhi.n	804c20a <VerifyCmacB0.constprop.3+0xc2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 804c164:	f44f 7288 	mov.w	r2, #272	; 0x110
 804c168:	2100      	movs	r1, #0
 804c16a:	4668      	mov	r0, sp
 804c16c:	f002 fb5b 	bl	804e826 <memset1>
    b0[0] = 0x49;
 804c170:	2349      	movs	r3, #73	; 0x49
 804c172:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 804c176:	f1b9 0f00 	cmp.w	r9, #0
 804c17a:	d03f      	beq.n	804c1fc <VerifyCmacB0.constprop.3+0xb4>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 804c17c:	4b24      	ldr	r3, [pc, #144]	; (804c210 <VerifyCmacB0.constprop.3+0xc8>)
 804c17e:	685b      	ldr	r3, [r3, #4]
 804c180:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 804c182:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 804c186:	f3c3 2307 	ubfx	r3, r3, #8, #8
 804c18a:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 804c18e:	2201      	movs	r2, #1
 804c190:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804c194:	0a32      	lsrs	r2, r6, #8
 804c196:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804c19a:	0c32      	lsrs	r2, r6, #16
 804c19c:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804c1a0:	0a2a      	lsrs	r2, r5, #8
 804c1a2:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804c1a6:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 804c1a8:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 804c1aa:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 804c1ae:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804c1b2:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804c1b6:	4641      	mov	r1, r8
 804c1b8:	4622      	mov	r2, r4
 804c1ba:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804c1bc:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c1be:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 804c1c0:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 804c1c4:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 804c1c8:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804c1cc:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c1d0:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 804c1d4:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804c1d8:	f002 fb11 	bl	804e7fe <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 804c1dc:	f104 0110 	add.w	r1, r4, #16
 804c1e0:	463b      	mov	r3, r7
 804c1e2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 804c1e4:	b289      	uxth	r1, r1
 804c1e6:	4668      	mov	r0, sp
 804c1e8:	f7fc fd90 	bl	8048d0c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 804c1ec:	b118      	cbz	r0, 804c1f6 <VerifyCmacB0.constprop.3+0xae>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c1ee:	2801      	cmp	r0, #1
 804c1f0:	bf0c      	ite	eq
 804c1f2:	2001      	moveq	r0, #1
 804c1f4:	200f      	movne	r0, #15
}
 804c1f6:	b045      	add	sp, #276	; 0x114
 804c1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 804c1fc:	f88d 9001 	strb.w	r9, [sp, #1]
        b0[2] = 0x00;
 804c200:	f88d 9002 	strb.w	r9, [sp, #2]
 804c204:	e7c3      	b.n	804c18e <VerifyCmacB0.constprop.3+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c206:	200a      	movs	r0, #10
 804c208:	e7f5      	b.n	804c1f6 <VerifyCmacB0.constprop.3+0xae>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804c20a:	200e      	movs	r0, #14
 804c20c:	e7f3      	b.n	804c1f6 <VerifyCmacB0.constprop.3+0xae>
 804c20e:	bf00      	nop
 804c210:	20003158 	.word	0x20003158

0804c214 <LoRaMacCryptoInit>:
{
 804c214:	b538      	push	{r3, r4, r5, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 804c216:	4c11      	ldr	r4, [pc, #68]	; (804c25c <LoRaMacCryptoInit+0x48>)
 804c218:	f104 030c 	add.w	r3, r4, #12
 804c21c:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 804c21e:	b1d0      	cbz	r0, 804c256 <LoRaMacCryptoInit+0x42>
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 804c220:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 804c222:	480f      	ldr	r0, [pc, #60]	; (804c260 <LoRaMacCryptoInit+0x4c>)
 804c224:	2234      	movs	r2, #52	; 0x34
 804c226:	2100      	movs	r1, #0
 804c228:	f002 fafd 	bl	804e826 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 804c22c:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 804c22e:	4a0d      	ldr	r2, [pc, #52]	; (804c264 <LoRaMacCryptoInit+0x50>)
 804c230:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c232:	4619      	mov	r1, r3
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c234:	f04f 32ff 	mov.w	r2, #4294967295
 804c238:	2500      	movs	r5, #0
 804c23a:	e9c3 5203 	strd	r5, r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c23e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c240:	f841 2f18 	str.w	r2, [r1, #24]!
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 804c244:	e9c3 2207 	strd	r2, r2, [r3, #28]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 804c248:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 804c24a:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c24e:	68a3      	ldr	r3, [r4, #8]
 804c250:	4798      	blx	r3
}
 804c252:	4628      	mov	r0, r5
 804c254:	bd38      	pop	{r3, r4, r5, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 804c256:	4b04      	ldr	r3, [pc, #16]	; (804c268 <LoRaMacCryptoInit+0x54>)
 804c258:	60a3      	str	r3, [r4, #8]
 804c25a:	e7e2      	b.n	804c222 <LoRaMacCryptoInit+0xe>
 804c25c:	20003158 	.word	0x20003158
 804c260:	20003164 	.word	0x20003164
 804c264:	01010100 	.word	0x01010100
 804c268:	0804bfdd 	.word	0x0804bfdd

0804c26c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 804c26c:	4b02      	ldr	r3, [pc, #8]	; (804c278 <LoRaMacCryptoSetLrWanVersion+0xc>)
 804c26e:	685b      	ldr	r3, [r3, #4]
 804c270:	6018      	str	r0, [r3, #0]
}
 804c272:	2000      	movs	r0, #0
 804c274:	4770      	bx	lr
 804c276:	bf00      	nop
 804c278:	20003158 	.word	0x20003158

0804c27c <LoRaMacCryptoRestoreNvmCtx>:
{
 804c27c:	b508      	push	{r3, lr}
    if( cryptoNvmCtx != 0 )
 804c27e:	4601      	mov	r1, r0
 804c280:	b128      	cbz	r0, 804c28e <LoRaMacCryptoRestoreNvmCtx+0x12>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 804c282:	4804      	ldr	r0, [pc, #16]	; (804c294 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 804c284:	2234      	movs	r2, #52	; 0x34
 804c286:	f002 faba 	bl	804e7fe <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 804c28a:	2000      	movs	r0, #0
}
 804c28c:	bd08      	pop	{r3, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c28e:	200a      	movs	r0, #10
 804c290:	e7fc      	b.n	804c28c <LoRaMacCryptoRestoreNvmCtx+0x10>
 804c292:	bf00      	nop
 804c294:	20003164 	.word	0x20003164

0804c298 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 804c298:	2334      	movs	r3, #52	; 0x34
 804c29a:	6003      	str	r3, [r0, #0]
}
 804c29c:	4800      	ldr	r0, [pc, #0]	; (804c2a0 <LoRaMacCryptoGetNvmCtx+0x8>)
 804c29e:	4770      	bx	lr
 804c2a0:	20003164 	.word	0x20003164

0804c2a4 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 804c2a4:	b130      	cbz	r0, 804c2b4 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 804c2a6:	4b04      	ldr	r3, [pc, #16]	; (804c2b8 <LoRaMacCryptoGetFCntUp+0x14>)
 804c2a8:	685b      	ldr	r3, [r3, #4]
 804c2aa:	68db      	ldr	r3, [r3, #12]
 804c2ac:	3301      	adds	r3, #1
 804c2ae:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 804c2b0:	2000      	movs	r0, #0
 804c2b2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c2b4:	200a      	movs	r0, #10
}
 804c2b6:	4770      	bx	lr
 804c2b8:	20003158 	.word	0x20003158

0804c2bc <LoRaMacCryptoGetFCntDown>:
{
 804c2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804c2be:	4617      	mov	r7, r2
    uint32_t lastDown = 0;
 804c2c0:	2200      	movs	r2, #0
{
 804c2c2:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 804c2c4:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 804c2c6:	461d      	mov	r5, r3
 804c2c8:	b353      	cbz	r3, 804c320 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 804c2ca:	a901      	add	r1, sp, #4
 804c2cc:	f7ff fe52 	bl	804bf74 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804c2d0:	b9e8      	cbnz	r0, 804c30e <LoRaMacCryptoGetFCntDown+0x52>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 804c2d2:	9c01      	ldr	r4, [sp, #4]
 804c2d4:	1c63      	adds	r3, r4, #1
 804c2d6:	d110      	bne.n	804c2fa <LoRaMacCryptoGetFCntDown+0x3e>
         *currentDown = frameFcnt;
 804c2d8:	602f      	str	r7, [r5, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c2da:	4b12      	ldr	r3, [pc, #72]	; (804c324 <LoRaMacCryptoGetFCntDown+0x68>)
 804c2dc:	685b      	ldr	r3, [r3, #4]
 804c2de:	789b      	ldrb	r3, [r3, #2]
 804c2e0:	b9ab      	cbnz	r3, 804c30e <LoRaMacCryptoGetFCntDown+0x52>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 804c2e2:	682b      	ldr	r3, [r5, #0]
 804c2e4:	b2b6      	uxth	r6, r6
 804c2e6:	1b1c      	subs	r4, r3, r4
 804c2e8:	eb63 0503 	sbc.w	r5, r3, r3
 804c2ec:	2700      	movs	r7, #0
 804c2ee:	42b4      	cmp	r4, r6
 804c2f0:	eb75 0307 	sbcs.w	r3, r5, r7
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 804c2f4:	bfa8      	it	ge
 804c2f6:	2008      	movge	r0, #8
 804c2f8:	e009      	b.n	804c30e <LoRaMacCryptoGetFCntDown+0x52>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 804c2fa:	b2a3      	uxth	r3, r4
 804c2fc:	1afb      	subs	r3, r7, r3
        if( fCntDiff > 0 )
 804c2fe:	2b00      	cmp	r3, #0
 804c300:	dd02      	ble.n	804c308 <LoRaMacCryptoGetFCntDown+0x4c>
            *currentDown = lastDown + fCntDiff;
 804c302:	4423      	add	r3, r4
 804c304:	602b      	str	r3, [r5, #0]
 804c306:	e7e8      	b.n	804c2da <LoRaMacCryptoGetFCntDown+0x1e>
        else if( fCntDiff == 0 )
 804c308:	d103      	bne.n	804c312 <LoRaMacCryptoGetFCntDown+0x56>
            *currentDown = lastDown;
 804c30a:	602c      	str	r4, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 804c30c:	2007      	movs	r0, #7
}
 804c30e:	b003      	add	sp, #12
 804c310:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 804c312:	0c21      	lsrs	r1, r4, #16
 804c314:	0409      	lsls	r1, r1, #16
 804c316:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 804c31a:	4439      	add	r1, r7
 804c31c:	6029      	str	r1, [r5, #0]
 804c31e:	e7dc      	b.n	804c2da <LoRaMacCryptoGetFCntDown+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c320:	200a      	movs	r0, #10
 804c322:	e7f4      	b.n	804c30e <LoRaMacCryptoGetFCntDown+0x52>
 804c324:	20003158 	.word	0x20003158

0804c328 <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 804c328:	b178      	cbz	r0, 804c34a <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804c32a:	4b09      	ldr	r3, [pc, #36]	; (804c350 <LoRaMacCryptoSetMulticastReference+0x28>)
 804c32c:	685b      	ldr	r3, [r3, #4]
 804c32e:	f103 021c 	add.w	r2, r3, #28
 804c332:	61c2      	str	r2, [r0, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804c334:	f103 0220 	add.w	r2, r3, #32
 804c338:	6442      	str	r2, [r0, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804c33a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804c33e:	3328      	adds	r3, #40	; 0x28
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804c340:	66c2      	str	r2, [r0, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804c342:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    return LORAMAC_CRYPTO_SUCCESS;
 804c346:	2000      	movs	r0, #0
 804c348:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c34a:	200a      	movs	r0, #10
}
 804c34c:	4770      	bx	lr
 804c34e:	bf00      	nop
 804c350:	20003158 	.word	0x20003158

0804c354 <LoRaMacCryptoPrepareJoinRequest>:
{
 804c354:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 804c356:	4604      	mov	r4, r0
{
 804c358:	b085      	sub	sp, #20
    if( macMsg == 0 )
 804c35a:	b320      	cbz	r0, 804c3a6 <LoRaMacCryptoPrepareJoinRequest+0x52>
    uint32_t devNonce = 0;
 804c35c:	a804      	add	r0, sp, #16
 804c35e:	2300      	movs	r3, #0
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804c360:	4d13      	ldr	r5, [pc, #76]	; (804c3b0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
    uint32_t devNonce = 0;
 804c362:	f840 3d04 	str.w	r3, [r0, #-4]!
    SecureElementRandomNumber( &devNonce );
 804c366:	f7fc fd8b 	bl	8048e80 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804c36a:	686b      	ldr	r3, [r5, #4]
 804c36c:	9a03      	ldr	r2, [sp, #12]
 804c36e:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c370:	68ab      	ldr	r3, [r5, #8]
 804c372:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 804c374:	686b      	ldr	r3, [r5, #4]
 804c376:	889b      	ldrh	r3, [r3, #4]
 804c378:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c37a:	4620      	mov	r0, r4
 804c37c:	f000 fab3 	bl	804c8e6 <LoRaMacSerializerJoinRequest>
 804c380:	b110      	cbz	r0, 804c388 <LoRaMacCryptoPrepareJoinRequest+0x34>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804c382:	2011      	movs	r0, #17
}
 804c384:	b005      	add	sp, #20
 804c386:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 804c388:	f104 0318 	add.w	r3, r4, #24
 804c38c:	9300      	str	r3, [sp, #0]
 804c38e:	2213      	movs	r2, #19
 804c390:	2302      	movs	r3, #2
 804c392:	6821      	ldr	r1, [r4, #0]
 804c394:	f7fc fcac 	bl	8048cf0 <SecureElementComputeAesCmac>
 804c398:	b938      	cbnz	r0, 804c3aa <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c39a:	4620      	mov	r0, r4
 804c39c:	f000 faa3 	bl	804c8e6 <LoRaMacSerializerJoinRequest>
 804c3a0:	2800      	cmp	r0, #0
 804c3a2:	d0ef      	beq.n	804c384 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804c3a4:	e7ed      	b.n	804c382 <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c3a6:	200a      	movs	r0, #10
 804c3a8:	e7ec      	b.n	804c384 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c3aa:	200f      	movs	r0, #15
 804c3ac:	e7ea      	b.n	804c384 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804c3ae:	bf00      	nop
 804c3b0:	20003158 	.word	0x20003158

0804c3b4 <LoRaMacCryptoSecureMessage>:
{
 804c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c3b6:	4605      	mov	r5, r0
 804c3b8:	b087      	sub	sp, #28
    if( macMsg == NULL )
 804c3ba:	461c      	mov	r4, r3
 804c3bc:	b32b      	cbz	r3, 804c40a <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 804c3be:	4e30      	ldr	r6, [pc, #192]	; (804c480 <LoRaMacCryptoSecureMessage+0xcc>)
 804c3c0:	6873      	ldr	r3, [r6, #4]
 804c3c2:	68db      	ldr	r3, [r3, #12]
 804c3c4:	4283      	cmp	r3, r0
 804c3c6:	d859      	bhi.n	804c47c <LoRaMacCryptoSecureMessage+0xc8>
    if( macMsg->FPort == 0 )
 804c3c8:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804c3cc:	2a00      	cmp	r2, #0
 804c3ce:	bf14      	ite	ne
 804c3d0:	2208      	movne	r2, #8
 804c3d2:	2207      	moveq	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 804c3d4:	4283      	cmp	r3, r0
 804c3d6:	d309      	bcc.n	804c3ec <LoRaMacCryptoSecureMessage+0x38>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 804c3d8:	6873      	ldr	r3, [r6, #4]
 804c3da:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c3dc:	68b3      	ldr	r3, [r6, #8]
 804c3de:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c3e0:	4620      	mov	r0, r4
 804c3e2:	f000 fab4 	bl	804c94e <LoRaMacSerializerData>
 804c3e6:	b170      	cbz	r0, 804c406 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804c3e8:	2011      	movs	r0, #17
 804c3ea:	e00a      	b.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 804c3ec:	2300      	movs	r3, #0
 804c3ee:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 804c3f2:	9001      	str	r0, [sp, #4]
 804c3f4:	9300      	str	r3, [sp, #0]
 804c3f6:	68a3      	ldr	r3, [r4, #8]
 804c3f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804c3fa:	f7ff fdf0 	bl	804bfde <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c3fe:	2800      	cmp	r0, #0
 804c400:	d0ea      	beq.n	804c3d8 <LoRaMacCryptoSecureMessage+0x24>
}
 804c402:	b007      	add	sp, #28
 804c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c406:	6821      	ldr	r1, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 804c408:	b909      	cbnz	r1, 804c40e <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c40a:	200a      	movs	r0, #10
 804c40c:	e7f9      	b.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c40e:	7926      	ldrb	r6, [r4, #4]
 804c410:	3e04      	subs	r6, #4
 804c412:	b2b2      	uxth	r2, r6
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804c414:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 804c418:	d82e      	bhi.n	804c478 <LoRaMacCryptoSecureMessage+0xc4>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c41a:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 804c41c:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 804c420:	2749      	movs	r7, #73	; 0x49
 804c422:	9702      	str	r7, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804c424:	0a1f      	lsrs	r7, r3, #8
 804c426:	f88d 700f 	strb.w	r7, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804c42a:	0c1f      	lsrs	r7, r3, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804c42c:	0e1b      	lsrs	r3, r3, #24
 804c42e:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804c432:	0a2b      	lsrs	r3, r5, #8
 804c434:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804c438:	0c2b      	lsrs	r3, r5, #16
 804c43a:	f88d 3014 	strb.w	r3, [sp, #20]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c43e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    b0[3] = 0x00;
 804c442:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[10] = fCnt & 0xFF;
 804c446:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[14] = 0x00;
 804c44a:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c44e:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804c450:	9300      	str	r3, [sp, #0]
 804c452:	a802      	add	r0, sp, #8
 804c454:	2307      	movs	r3, #7
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804c456:	f88d 7010 	strb.w	r7, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c45a:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
 804c45e:	f88d 6017 	strb.w	r6, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804c462:	f7fc fc45 	bl	8048cf0 <SecureElementComputeAesCmac>
 804c466:	b928      	cbnz	r0, 804c474 <LoRaMacCryptoSecureMessage+0xc0>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c468:	4620      	mov	r0, r4
 804c46a:	f000 fa70 	bl	804c94e <LoRaMacSerializerData>
 804c46e:	2800      	cmp	r0, #0
 804c470:	d0c7      	beq.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
 804c472:	e7b9      	b.n	804c3e8 <LoRaMacCryptoSecureMessage+0x34>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c474:	200f      	movs	r0, #15
 804c476:	e7c4      	b.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804c478:	200e      	movs	r0, #14
 804c47a:	e7c2      	b.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804c47c:	2006      	movs	r0, #6
 804c47e:	e7c0      	b.n	804c402 <LoRaMacCryptoSecureMessage+0x4e>
 804c480:	20003158 	.word	0x20003158

0804c484 <LoRaMacCryptoUnsecureMessage>:
{
 804c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c488:	b086      	sub	sp, #24
 804c48a:	4604      	mov	r4, r0
 804c48c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 804c48e:	4689      	mov	r9, r1
 804c490:	4690      	mov	r8, r2
 804c492:	461d      	mov	r5, r3
    if( macMsg == 0 )
 804c494:	2e00      	cmp	r6, #0
 804c496:	d07a      	beq.n	804c58e <LoRaMacCryptoUnsecureMessage+0x10a>
    uint32_t lastDown = 0;
 804c498:	a906      	add	r1, sp, #24
 804c49a:	2300      	movs	r3, #0
 804c49c:	f841 3d04 	str.w	r3, [r1, #-4]!
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 804c4a0:	4610      	mov	r0, r2
 804c4a2:	f7ff fd67 	bl	804bf74 <GetLastFcntDown>
 804c4a6:	b120      	cbz	r0, 804c4b2 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804c4a8:	2706      	movs	r7, #6
}
 804c4aa:	4638      	mov	r0, r7
 804c4ac:	b006      	add	sp, #24
 804c4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 804c4b2:	9b05      	ldr	r3, [sp, #20]
 804c4b4:	429d      	cmp	r5, r3
 804c4b6:	d801      	bhi.n	804c4bc <LoRaMacCryptoUnsecureMessage+0x38>
 804c4b8:	3301      	adds	r3, #1
 804c4ba:	d1f5      	bne.n	804c4a8 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804c4bc:	4630      	mov	r0, r6
 804c4be:	f000 f9b7 	bl	804c830 <LoRaMacParserData>
 804c4c2:	2800      	cmp	r0, #0
 804c4c4:	d165      	bne.n	804c592 <LoRaMacCryptoUnsecureMessage+0x10e>
        if( KeyAddrList[i].AddrID == addrID )
 804c4c6:	4b34      	ldr	r3, [pc, #208]	; (804c598 <LoRaMacCryptoUnsecureMessage+0x114>)
 804c4c8:	461a      	mov	r2, r3
 804c4ca:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 804c4ce:	42a1      	cmp	r1, r4
 804c4d0:	ea4f 0780 	mov.w	r7, r0, lsl #2
 804c4d4:	d104      	bne.n	804c4e0 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
 804c4d6:	68b3      	ldr	r3, [r6, #8]
 804c4d8:	454b      	cmp	r3, r9
 804c4da:	d006      	beq.n	804c4ea <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 804c4dc:	2702      	movs	r7, #2
 804c4de:	e7e4      	b.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
 804c4e0:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 804c4e2:	2805      	cmp	r0, #5
 804c4e4:	d1f1      	bne.n	804c4ca <LoRaMacCryptoUnsecureMessage+0x46>
 804c4e6:	270c      	movs	r7, #12
 804c4e8:	e7df      	b.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c4ea:	4c2c      	ldr	r4, [pc, #176]	; (804c59c <LoRaMacCryptoUnsecureMessage+0x118>)
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c4ec:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c4ee:	6861      	ldr	r1, [r4, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804c4f0:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c4f2:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 804c4f4:	443a      	add	r2, r7
        isAck = false;
 804c4f6:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 804c4f8:	f892 a001 	ldrb.w	sl, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c4fc:	7931      	ldrb	r1, [r6, #4]
 804c4fe:	7892      	ldrb	r2, [r2, #2]
 804c500:	f8cd 9000 	str.w	r9, [sp]
 804c504:	e9cd 5001 	strd	r5, r0, [sp, #4]
 804c508:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804c50c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c510:	b289      	uxth	r1, r1
 804c512:	bf08      	it	eq
 804c514:	2300      	moveq	r3, #0
 804c516:	6830      	ldr	r0, [r6, #0]
 804c518:	f7ff fe16 	bl	804c148 <VerifyCmacB0.constprop.3>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c51c:	4607      	mov	r7, r0
 804c51e:	2800      	cmp	r0, #0
 804c520:	d1c3      	bne.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 804c522:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804c526:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 804c52a:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804c52c:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804c52e:	f04f 0301 	mov.w	r3, #1
 804c532:	9300      	str	r3, [sp, #0]
 804c534:	bf18      	it	ne
 804c536:	4652      	movne	r2, sl
 804c538:	464b      	mov	r3, r9
 804c53a:	bf08      	it	eq
 804c53c:	2207      	moveq	r2, #7
 804c53e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 804c540:	f7ff fd4d 	bl	804bfde <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c544:	4607      	mov	r7, r0
 804c546:	2800      	cmp	r0, #0
 804c548:	d1af      	bne.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 804c54a:	f108 38ff 	add.w	r8, r8, #4294967295
 804c54e:	f1b8 0f06 	cmp.w	r8, #6
 804c552:	d807      	bhi.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
 804c554:	e8df f008 	tbb	[pc, r8]
 804c558:	0f0c0904 	.word	0x0f0c0904
 804c55c:	1512      	.short	0x1512
 804c55e:	18          	.byte	0x18
 804c55f:	00          	.byte	0x00
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 804c560:	6863      	ldr	r3, [r4, #4]
 804c562:	611d      	str	r5, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c564:	68a3      	ldr	r3, [r4, #8]
 804c566:	4798      	blx	r3
 804c568:	e79f      	b.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 804c56a:	6863      	ldr	r3, [r4, #4]
 804c56c:	615d      	str	r5, [r3, #20]
 804c56e:	e7f9      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 804c570:	6863      	ldr	r3, [r4, #4]
 804c572:	619d      	str	r5, [r3, #24]
 804c574:	e7f6      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 804c576:	6863      	ldr	r3, [r4, #4]
 804c578:	61dd      	str	r5, [r3, #28]
 804c57a:	e7f3      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 804c57c:	6863      	ldr	r3, [r4, #4]
 804c57e:	621d      	str	r5, [r3, #32]
 804c580:	e7f0      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 804c582:	6863      	ldr	r3, [r4, #4]
 804c584:	625d      	str	r5, [r3, #36]	; 0x24
 804c586:	e7ed      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 804c588:	6863      	ldr	r3, [r4, #4]
 804c58a:	629d      	str	r5, [r3, #40]	; 0x28
 804c58c:	e7ea      	b.n	804c564 <LoRaMacCryptoUnsecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c58e:	270a      	movs	r7, #10
 804c590:	e78b      	b.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804c592:	2710      	movs	r7, #16
 804c594:	e789      	b.n	804c4aa <LoRaMacCryptoUnsecureMessage+0x26>
 804c596:	bf00      	nop
 804c598:	20001058 	.word	0x20001058
 804c59c:	20003158 	.word	0x20003158

0804c5a0 <LoRaMacCryptoDeriveMcRootKey>:
{
 804c5a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 804c5a2:	4b11      	ldr	r3, [pc, #68]	; (804c5e8 <LoRaMacCryptoDeriveMcRootKey+0x48>)
 804c5a4:	685e      	ldr	r6, [r3, #4]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804c5a6:	4604      	mov	r4, r0
 804c5a8:	78b5      	ldrb	r5, [r6, #2]
 804c5aa:	b910      	cbnz	r0, 804c5b2 <LoRaMacCryptoDeriveMcRootKey+0x12>
 804c5ac:	b92d      	cbnz	r5, 804c5ba <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 804c5ae:	200b      	movs	r0, #11
 804c5b0:	e017      	b.n	804c5e2 <LoRaMacCryptoDeriveMcRootKey+0x42>
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804c5b2:	2801      	cmp	r0, #1
 804c5b4:	d101      	bne.n	804c5ba <LoRaMacCryptoDeriveMcRootKey+0x1a>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 804c5b6:	2d01      	cmp	r5, #1
 804c5b8:	d0f9      	beq.n	804c5ae <LoRaMacCryptoDeriveMcRootKey+0xe>
    uint8_t compBase[16] = { 0 };
 804c5ba:	2210      	movs	r2, #16
 804c5bc:	2100      	movs	r1, #0
 804c5be:	4668      	mov	r0, sp
 804c5c0:	f004 fb0b 	bl	8050bda <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 804c5c4:	2d01      	cmp	r5, #1
        compBase[0] = 0x20;
 804c5c6:	bf04      	itt	eq
 804c5c8:	2320      	moveq	r3, #32
 804c5ca:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 804c5ce:	4622      	mov	r2, r4
 804c5d0:	2309      	movs	r3, #9
 804c5d2:	4669      	mov	r1, sp
 804c5d4:	6830      	ldr	r0, [r6, #0]
 804c5d6:	f7fc fc2e 	bl	8048e36 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c5da:	2800      	cmp	r0, #0
 804c5dc:	bf0c      	ite	eq
 804c5de:	2000      	moveq	r0, #0
 804c5e0:	200f      	movne	r0, #15
}
 804c5e2:	b004      	add	sp, #16
 804c5e4:	bd70      	pop	{r4, r5, r6, pc}
 804c5e6:	bf00      	nop
 804c5e8:	20003158 	.word	0x20003158

0804c5ec <LoRaMacCryptoSetKey>:
{
 804c5ec:	b510      	push	{r4, lr}
 804c5ee:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 804c5f0:	f7fc fc1c 	bl	8048e2c <SecureElementSetKey>
 804c5f4:	b108      	cbz	r0, 804c5fa <LoRaMacCryptoSetKey+0xe>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c5f6:	200f      	movs	r0, #15
}
 804c5f8:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 804c5fa:	2c01      	cmp	r4, #1
 804c5fc:	d808      	bhi.n	804c610 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 804c5fe:	4620      	mov	r0, r4
 804c600:	f7ff ffce 	bl	804c5a0 <LoRaMacCryptoDeriveMcRootKey>
 804c604:	2800      	cmp	r0, #0
 804c606:	d1f6      	bne.n	804c5f6 <LoRaMacCryptoSetKey+0xa>
 804c608:	f7ff fd86 	bl	804c118 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 804c60c:	2800      	cmp	r0, #0
 804c60e:	d1f2      	bne.n	804c5f6 <LoRaMacCryptoSetKey+0xa>
    return LORAMAC_CRYPTO_SUCCESS;
 804c610:	2000      	movs	r0, #0
 804c612:	e7f1      	b.n	804c5f8 <LoRaMacCryptoSetKey+0xc>

0804c614 <LoRaMacCryptoHandleJoinAccept>:
{
 804c614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804c618:	4681      	mov	r9, r0
 804c61a:	b0c7      	sub	sp, #284	; 0x11c
 804c61c:	4688      	mov	r8, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 804c61e:	4614      	mov	r4, r2
 804c620:	2a00      	cmp	r2, #0
 804c622:	f000 80af 	beq.w	804c784 <LoRaMacCryptoHandleJoinAccept+0x170>
 804c626:	2900      	cmp	r1, #0
 804c628:	f000 80ac 	beq.w	804c784 <LoRaMacCryptoHandleJoinAccept+0x170>
    uint8_t micComputationOffset = 0;
 804c62c:	28ff      	cmp	r0, #255	; 0xff
 804c62e:	bf0c      	ite	eq
 804c630:	250c      	moveq	r5, #12
 804c632:	2500      	movne	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 804c634:	7912      	ldrb	r2, [r2, #4]
 804c636:	b2ae      	uxth	r6, r5
 804c638:	4432      	add	r2, r6
 804c63a:	2100      	movs	r1, #0
 804c63c:	a803      	add	r0, sp, #12
 804c63e:	f002 f8f2 	bl	804e826 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 804c642:	7921      	ldrb	r1, [r4, #4]
 804c644:	6820      	ldr	r0, [r4, #0]
 804c646:	ab03      	add	r3, sp, #12
 804c648:	441d      	add	r5, r3
 804c64a:	3901      	subs	r1, #1
 804c64c:	462b      	mov	r3, r5
 804c64e:	2202      	movs	r2, #2
 804c650:	b289      	uxth	r1, r1
 804c652:	3001      	adds	r0, #1
 804c654:	f7fc fb72 	bl	8048d3c <SecureElementAesEncrypt>
 804c658:	b118      	cbz	r0, 804c662 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c65a:	200f      	movs	r0, #15
}
 804c65c:	b047      	add	sp, #284	; 0x11c
 804c65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 804c662:	7922      	ldrb	r2, [r4, #4]
 804c664:	6820      	ldr	r0, [r4, #0]
 804c666:	3a01      	subs	r2, #1
 804c668:	3001      	adds	r0, #1
 804c66a:	b292      	uxth	r2, r2
 804c66c:	4629      	mov	r1, r5
 804c66e:	f002 f8c6 	bl	804e7fe <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804c672:	4620      	mov	r0, r4
 804c674:	f000 f88e 	bl	804c794 <LoRaMacParserJoinAccept>
 804c678:	2800      	cmp	r0, #0
 804c67a:	f040 8085 	bne.w	804c788 <LoRaMacCryptoHandleJoinAccept+0x174>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 804c67e:	f994 2010 	ldrsb.w	r2, [r4, #16]
 804c682:	4d43      	ldr	r5, [pc, #268]	; (804c790 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 804c684:	2a00      	cmp	r2, #0
 804c686:	686b      	ldr	r3, [r5, #4]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 804c688:	bfba      	itte	lt
 804c68a:	2201      	movlt	r2, #1
 804c68c:	709a      	strblt	r2, [r3, #2]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 804c68e:	7098      	strbge	r0, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c690:	789b      	ldrb	r3, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 804c692:	bfb4      	ite	lt
 804c694:	2703      	movlt	r7, #3
        micComputationKeyID = NWK_KEY;
 804c696:	2702      	movge	r7, #2
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c698:	2b00      	cmp	r3, #0
 804c69a:	d145      	bne.n	804c728 <LoRaMacCryptoHandleJoinAccept+0x114>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c69c:	7921      	ldrb	r1, [r4, #4]
 804c69e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804c6a0:	6820      	ldr	r0, [r4, #0]
 804c6a2:	3904      	subs	r1, #4
 804c6a4:	463b      	mov	r3, r7
 804c6a6:	b289      	uxth	r1, r1
 804c6a8:	f7fc fb30 	bl	8048d0c <SecureElementVerifyAesCmac>
 804c6ac:	2800      	cmp	r0, #0
 804c6ae:	d1d4      	bne.n	804c65a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 804c6b0:	2001      	movs	r0, #1
 804c6b2:	f7ff ff75 	bl	804c5a0 <LoRaMacCryptoDeriveMcRootKey>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c6b6:	2800      	cmp	r0, #0
 804c6b8:	d1d0      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
 804c6ba:	f7ff fd2d 	bl	804c118 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c6be:	2800      	cmp	r0, #0
 804c6c0:	d1cc      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c6c2:	686b      	ldr	r3, [r5, #4]
 804c6c4:	1da6      	adds	r6, r4, #6
 804c6c6:	3409      	adds	r4, #9
 804c6c8:	3304      	adds	r3, #4
 804c6ca:	4622      	mov	r2, r4
 804c6cc:	4631      	mov	r1, r6
 804c6ce:	2008      	movs	r0, #8
 804c6d0:	f7ff fcec 	bl	804c0ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c6d4:	2800      	cmp	r0, #0
 804c6d6:	d1c1      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c6d8:	686b      	ldr	r3, [r5, #4]
 804c6da:	4622      	mov	r2, r4
 804c6dc:	3304      	adds	r3, #4
 804c6de:	4631      	mov	r1, r6
 804c6e0:	2007      	movs	r0, #7
 804c6e2:	f7ff fce3 	bl	804c0ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c6e6:	2800      	cmp	r0, #0
 804c6e8:	d1b8      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c6ea:	686b      	ldr	r3, [r5, #4]
 804c6ec:	4622      	mov	r2, r4
 804c6ee:	3304      	adds	r3, #4
 804c6f0:	4631      	mov	r1, r6
 804c6f2:	2005      	movs	r0, #5
 804c6f4:	f7ff fcda 	bl	804c0ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c6f8:	2800      	cmp	r0, #0
 804c6fa:	d1af      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c6fc:	686b      	ldr	r3, [r5, #4]
 804c6fe:	4622      	mov	r2, r4
 804c700:	3304      	adds	r3, #4
 804c702:	4631      	mov	r1, r6
 804c704:	2006      	movs	r0, #6
 804c706:	f7ff fcd1 	bl	804c0ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c70a:	2800      	cmp	r0, #0
 804c70c:	d1a6      	bne.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c70e:	686b      	ldr	r3, [r5, #4]
    CryptoCtx.RJcount0 = 0;
 804c710:	8028      	strh	r0, [r5, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c712:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c716:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c718:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c71a:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c71e:	68ab      	ldr	r3, [r5, #8]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c720:	9001      	str	r0, [sp, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c722:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 804c724:	9801      	ldr	r0, [sp, #4]
 804c726:	e799      	b.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c728:	2208      	movs	r2, #8
 804c72a:	4641      	mov	r1, r8
 804c72c:	f10d 000d 	add.w	r0, sp, #13
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 804c730:	f88d 900c 	strb.w	r9, [sp, #12]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c734:	f002 f86d 	bl	804e812 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804c738:	686b      	ldr	r3, [r5, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c73a:	7921      	ldrb	r1, [r4, #4]
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804c73c:	889a      	ldrh	r2, [r3, #4]
 804c73e:	f88d 2015 	strb.w	r2, [sp, #21]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c742:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c744:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c746:	0a1b      	lsrs	r3, r3, #8
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c748:	3905      	subs	r1, #5
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c74a:	f88d 3016 	strb.w	r3, [sp, #22]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c74e:	4431      	add	r1, r6
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 804c750:	7963      	ldrb	r3, [r4, #5]
 804c752:	f88d 3017 	strb.w	r3, [sp, #23]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c756:	b289      	uxth	r1, r1
 804c758:	463b      	mov	r3, r7
 804c75a:	a803      	add	r0, sp, #12
 804c75c:	f7fc fad6 	bl	8048d0c <SecureElementVerifyAesCmac>
 804c760:	2800      	cmp	r0, #0
 804c762:	f47f af7a 	bne.w	804c65a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804c766:	7a23      	ldrb	r3, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 804c768:	79e1      	ldrb	r1, [r4, #7]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 804c76a:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804c76c:	041b      	lsls	r3, r3, #16
 804c76e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804c772:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 804c774:	686a      	ldr	r2, [r5, #4]
 804c776:	6891      	ldr	r1, [r2, #8]
 804c778:	4299      	cmp	r1, r3
 804c77a:	d207      	bcs.n	804c78c <LoRaMacCryptoHandleJoinAccept+0x178>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 804c77c:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 804c77e:	68ab      	ldr	r3, [r5, #8]
 804c780:	4798      	blx	r3
 804c782:	e795      	b.n	804c6b0 <LoRaMacCryptoHandleJoinAccept+0x9c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c784:	200a      	movs	r0, #10
 804c786:	e769      	b.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804c788:	2010      	movs	r0, #16
 804c78a:	e767      	b.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 804c78c:	2003      	movs	r0, #3
 804c78e:	e765      	b.n	804c65c <LoRaMacCryptoHandleJoinAccept+0x48>
 804c790:	20003158 	.word	0x20003158

0804c794 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 804c794:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c796:	4604      	mov	r4, r0
 804c798:	2800      	cmp	r0, #0
 804c79a:	d045      	beq.n	804c828 <LoRaMacParserJoinAccept+0x94>
 804c79c:	6801      	ldr	r1, [r0, #0]
 804c79e:	2900      	cmp	r1, #0
 804c7a0:	d042      	beq.n	804c828 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804c7a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c7a6:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 804c7a8:	2203      	movs	r2, #3
 804c7aa:	3006      	adds	r0, #6
 804c7ac:	f002 f827 	bl	804e7fe <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 804c7b0:	4620      	mov	r0, r4
 804c7b2:	2203      	movs	r2, #3
 804c7b4:	f850 1b09 	ldr.w	r1, [r0], #9
 804c7b8:	3104      	adds	r1, #4
 804c7ba:	f002 f820 	bl	804e7fe <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c7be:	6821      	ldr	r1, [r4, #0]
 804c7c0:	79cb      	ldrb	r3, [r1, #7]
 804c7c2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c7c4:	7a0a      	ldrb	r2, [r1, #8]
 804c7c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804c7ca:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c7cc:	7a4a      	ldrb	r2, [r1, #9]
 804c7ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804c7d2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c7d4:	7a8a      	ldrb	r2, [r1, #10]
 804c7d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c7da:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 804c7dc:	7acb      	ldrb	r3, [r1, #11]
 804c7de:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804c7e0:	7b0b      	ldrb	r3, [r1, #12]
 804c7e2:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 804c7e4:	7923      	ldrb	r3, [r4, #4]
 804c7e6:	2b21      	cmp	r3, #33	; 0x21
 804c7e8:	d11a      	bne.n	804c820 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 804c7ea:	2210      	movs	r2, #16
 804c7ec:	310d      	adds	r1, #13
 804c7ee:	f104 0012 	add.w	r0, r4, #18
 804c7f2:	f002 f804 	bl	804e7fe <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 804c7f6:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c7f8:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c7fa:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c7fc:	5c8b      	ldrb	r3, [r1, r2]
 804c7fe:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c800:	5c08      	ldrb	r0, [r1, r0]
 804c802:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c806:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c808:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c80a:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c80c:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c80e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804c812:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c814:	5c8a      	ldrb	r2, [r1, r2]
 804c816:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c81a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 804c81c:	2000      	movs	r0, #0
}
 804c81e:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 804c820:	2b11      	cmp	r3, #17
 804c822:	dc03      	bgt.n	804c82c <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804c824:	220d      	movs	r2, #13
 804c826:	e7e7      	b.n	804c7f8 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 804c828:	2002      	movs	r0, #2
 804c82a:	e7f8      	b.n	804c81e <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 804c82c:	2001      	movs	r0, #1
 804c82e:	e7f6      	b.n	804c81e <LoRaMacParserJoinAccept+0x8a>

0804c830 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 804c830:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c832:	4604      	mov	r4, r0
 804c834:	2800      	cmp	r0, #0
 804c836:	d054      	beq.n	804c8e2 <LoRaMacParserData+0xb2>
 804c838:	6801      	ldr	r1, [r0, #0]
 804c83a:	2900      	cmp	r1, #0
 804c83c:	d051      	beq.n	804c8e2 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804c83e:	780b      	ldrb	r3, [r1, #0]
 804c840:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 804c842:	784b      	ldrb	r3, [r1, #1]
 804c844:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c846:	788a      	ldrb	r2, [r1, #2]
 804c848:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804c84c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c84e:	78ca      	ldrb	r2, [r1, #3]
 804c850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804c854:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c856:	790a      	ldrb	r2, [r1, #4]
 804c858:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c85c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 804c85e:	794b      	ldrb	r3, [r1, #5]
 804c860:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 804c862:	798b      	ldrb	r3, [r1, #6]
 804c864:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804c866:	79ca      	ldrb	r2, [r1, #7]
 804c868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c86c:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804c86e:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c870:	f002 020f 	and.w	r2, r2, #15
 804c874:	3108      	adds	r1, #8
 804c876:	3010      	adds	r0, #16
 804c878:	f001 ffc1 	bl	804e7fe <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c87c:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 804c87e:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c880:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 804c884:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 804c888:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804c88c:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c88e:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804c892:	1a11      	subs	r1, r2, r0
 804c894:	2904      	cmp	r1, #4
 804c896:	dd0d      	ble.n	804c8b4 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804c898:	6821      	ldr	r1, [r4, #0]
 804c89a:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804c89c:	3a04      	subs	r2, #4
 804c89e:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804c8a0:	5c08      	ldrb	r0, [r1, r0]
 804c8a2:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804c8a6:	b2d2      	uxtb	r2, r2
 804c8a8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 804c8ac:	4419      	add	r1, r3
 804c8ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804c8b0:	f001 ffa5 	bl	804e7fe <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804c8b4:	7923      	ldrb	r3, [r4, #4]
 804c8b6:	6822      	ldr	r2, [r4, #0]
 804c8b8:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 804c8ba:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804c8bc:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 804c8c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 804c8c2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 804c8c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804c8ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 804c8cc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 804c8d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804c8d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 804c8d6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 804c8da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c8de:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 804c8e0:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 804c8e2:	2002      	movs	r0, #2
 804c8e4:	e7fc      	b.n	804c8e0 <LoRaMacParserData+0xb0>

0804c8e6 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 804c8e6:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c8e8:	4604      	mov	r4, r0
 804c8ea:	b360      	cbz	r0, 804c946 <LoRaMacSerializerJoinRequest+0x60>
 804c8ec:	6803      	ldr	r3, [r0, #0]
 804c8ee:	b353      	cbz	r3, 804c946 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 804c8f0:	7902      	ldrb	r2, [r0, #4]
 804c8f2:	2a16      	cmp	r2, #22
 804c8f4:	d929      	bls.n	804c94a <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804c8f6:	7942      	ldrb	r2, [r0, #5]
 804c8f8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c8fa:	4605      	mov	r5, r0
 804c8fc:	2208      	movs	r2, #8
 804c8fe:	f855 0b0e 	ldr.w	r0, [r5], #14
 804c902:	1da1      	adds	r1, r4, #6
 804c904:	3001      	adds	r0, #1
 804c906:	f001 ff84 	bl	804e812 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 804c90a:	6820      	ldr	r0, [r4, #0]
 804c90c:	2208      	movs	r2, #8
 804c90e:	3009      	adds	r0, #9
 804c910:	4629      	mov	r1, r5
 804c912:	f001 ff7e 	bl	804e812 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 804c916:	6823      	ldr	r3, [r4, #0]
 804c918:	8ae2      	ldrh	r2, [r4, #22]
 804c91a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 804c91c:	8ae3      	ldrh	r3, [r4, #22]
 804c91e:	6822      	ldr	r2, [r4, #0]
 804c920:	0a1b      	lsrs	r3, r3, #8
 804c922:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c924:	6823      	ldr	r3, [r4, #0]
 804c926:	69a2      	ldr	r2, [r4, #24]
 804c928:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804c92a:	69a3      	ldr	r3, [r4, #24]
 804c92c:	6822      	ldr	r2, [r4, #0]
 804c92e:	0a1b      	lsrs	r3, r3, #8
 804c930:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804c932:	6823      	ldr	r3, [r4, #0]
 804c934:	8b62      	ldrh	r2, [r4, #26]
 804c936:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804c938:	6823      	ldr	r3, [r4, #0]
 804c93a:	7ee2      	ldrb	r2, [r4, #27]
 804c93c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 804c93e:	2317      	movs	r3, #23
 804c940:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804c942:	2000      	movs	r0, #0
}
 804c944:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804c946:	2001      	movs	r0, #1
 804c948:	e7fc      	b.n	804c944 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804c94a:	2002      	movs	r0, #2
 804c94c:	e7fa      	b.n	804c944 <LoRaMacSerializerJoinRequest+0x5e>

0804c94e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 804c94e:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c950:	4604      	mov	r4, r0
 804c952:	2800      	cmp	r0, #0
 804c954:	d063      	beq.n	804ca1e <LoRaMacSerializerData+0xd0>
 804c956:	6801      	ldr	r1, [r0, #0]
 804c958:	2900      	cmp	r1, #0
 804c95a:	d060      	beq.n	804ca1e <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c95c:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804c95e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c962:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 804c966:	2a00      	cmp	r2, #0
 804c968:	d157      	bne.n	804ca1a <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c96a:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 804c96c:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 804c96e:	7920      	ldrb	r0, [r4, #4]
 804c970:	4413      	add	r3, r2
 804c972:	4298      	cmp	r0, r3
 804c974:	d355      	bcc.n	804ca22 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804c976:	7963      	ldrb	r3, [r4, #5]
 804c978:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 804c97a:	6823      	ldr	r3, [r4, #0]
 804c97c:	68a2      	ldr	r2, [r4, #8]
 804c97e:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 804c980:	68a3      	ldr	r3, [r4, #8]
 804c982:	6822      	ldr	r2, [r4, #0]
 804c984:	0a1b      	lsrs	r3, r3, #8
 804c986:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 804c988:	6823      	ldr	r3, [r4, #0]
 804c98a:	8962      	ldrh	r2, [r4, #10]
 804c98c:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 804c98e:	6823      	ldr	r3, [r4, #0]
 804c990:	7ae2      	ldrb	r2, [r4, #11]
 804c992:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 804c994:	6823      	ldr	r3, [r4, #0]
 804c996:	7b22      	ldrb	r2, [r4, #12]
 804c998:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 804c99a:	6823      	ldr	r3, [r4, #0]
 804c99c:	89e2      	ldrh	r2, [r4, #14]
 804c99e:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 804c9a0:	89e3      	ldrh	r3, [r4, #14]
 804c9a2:	6822      	ldr	r2, [r4, #0]
 804c9a4:	0a1b      	lsrs	r3, r3, #8
 804c9a6:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c9a8:	7b22      	ldrb	r2, [r4, #12]
 804c9aa:	6820      	ldr	r0, [r4, #0]
 804c9ac:	f002 020f 	and.w	r2, r2, #15
 804c9b0:	f104 0110 	add.w	r1, r4, #16
 804c9b4:	3008      	adds	r0, #8
 804c9b6:	f001 ff22 	bl	804e7fe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c9ba:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804c9bc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c9c0:	f003 030f 	and.w	r3, r3, #15
 804c9c4:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 804c9c8:	b12a      	cbz	r2, 804c9d6 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 804c9ca:	6822      	ldr	r2, [r4, #0]
 804c9cc:	f894 1020 	ldrb.w	r1, [r4, #32]
 804c9d0:	5551      	strb	r1, [r2, r5]
 804c9d2:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 804c9d6:	6820      	ldr	r0, [r4, #0]
 804c9d8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 804c9dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804c9de:	4428      	add	r0, r5
 804c9e0:	f001 ff0d 	bl	804e7fe <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c9e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c9e8:	6822      	ldr	r2, [r4, #0]
 804c9ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c9ec:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c9ee:	54d1      	strb	r1, [r2, r3]
 804c9f0:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804c9f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804c9f4:	6820      	ldr	r0, [r4, #0]
 804c9f6:	b292      	uxth	r2, r2
 804c9f8:	0a09      	lsrs	r1, r1, #8
 804c9fa:	5481      	strb	r1, [r0, r2]
 804c9fc:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804c9fe:	6821      	ldr	r1, [r4, #0]
 804ca00:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804ca02:	b292      	uxth	r2, r2
 804ca04:	5488      	strb	r0, [r1, r2]
 804ca06:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804ca08:	b292      	uxth	r2, r2
 804ca0a:	6821      	ldr	r1, [r4, #0]
 804ca0c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 804ca10:	5488      	strb	r0, [r1, r2]
 804ca12:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 804ca14:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804ca16:	2000      	movs	r0, #0
}
 804ca18:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 804ca1a:	3309      	adds	r3, #9
 804ca1c:	e7a6      	b.n	804c96c <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804ca1e:	2001      	movs	r0, #1
 804ca20:	e7fa      	b.n	804ca18 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804ca22:	2002      	movs	r0, #2
 804ca24:	e7f8      	b.n	804ca18 <LoRaMacSerializerData+0xca>

0804ca26 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 804ca26:	1e43      	subs	r3, r0, #1
 804ca28:	4258      	negs	r0, r3
 804ca2a:	4158      	adcs	r0, r3
 804ca2c:	4770      	bx	lr

0804ca2e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 804ca2e:	2801      	cmp	r0, #1
{
 804ca30:	b082      	sub	sp, #8
    switch( region )
 804ca32:	d103      	bne.n	804ca3c <RegionGetPhyParam+0xe>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 804ca34:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 804ca36:	b002      	add	sp, #8
        AU915_GET_PHY_PARAM( );
 804ca38:	f000 b8d2 	b.w	804cbe0 <RegionAU915GetPhyParam>
}
 804ca3c:	2000      	movs	r0, #0
 804ca3e:	b002      	add	sp, #8
 804ca40:	4770      	bx	lr

0804ca42 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 804ca42:	2801      	cmp	r0, #1
 804ca44:	d102      	bne.n	804ca4c <RegionSetBandTxDone+0xa>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 804ca46:	4608      	mov	r0, r1
 804ca48:	f000 b974 	b.w	804cd34 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 804ca4c:	4770      	bx	lr

0804ca4e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 804ca4e:	2801      	cmp	r0, #1
 804ca50:	d102      	bne.n	804ca58 <RegionInitDefaults+0xa>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 804ca52:	4608      	mov	r0, r1
 804ca54:	f000 b97e 	b.w	804cd54 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 804ca58:	4770      	bx	lr

0804ca5a <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    switch( region )
 804ca5a:	2801      	cmp	r0, #1
 804ca5c:	d102      	bne.n	804ca64 <RegionGetNvmCtx+0xa>
    {
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
 804ca5e:	4608      	mov	r0, r1
 804ca60:	f000 b9f4 	b.w	804ce4c <RegionAU915GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 804ca64:	2000      	movs	r0, #0
 804ca66:	4770      	bx	lr

0804ca68 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 804ca68:	2801      	cmp	r0, #1
{
 804ca6a:	460b      	mov	r3, r1
    switch( region )
 804ca6c:	d103      	bne.n	804ca76 <RegionVerify+0xe>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
 804ca6e:	4611      	mov	r1, r2
 804ca70:	4618      	mov	r0, r3
 804ca72:	f000 b9f3 	b.w	804ce5c <RegionAU915Verify>
        default:
        {
            return false;
        }
    }
}
 804ca76:	2000      	movs	r0, #0
 804ca78:	4770      	bx	lr

0804ca7a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 804ca7a:	2801      	cmp	r0, #1
 804ca7c:	d102      	bne.n	804ca84 <RegionApplyCFList+0xa>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 804ca7e:	4608      	mov	r0, r1
 804ca80:	f000 ba18 	b.w	804ceb4 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 804ca84:	4770      	bx	lr

0804ca86 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 804ca86:	2801      	cmp	r0, #1
 804ca88:	d102      	bne.n	804ca90 <RegionChanMaskSet+0xa>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
 804ca8a:	4608      	mov	r0, r1
 804ca8c:	f000 ba38 	b.w	804cf00 <RegionAU915ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 804ca90:	2000      	movs	r0, #0
 804ca92:	4770      	bx	lr

0804ca94 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804ca94:	b410      	push	{r4}
    switch( region )
 804ca96:	2801      	cmp	r0, #1
{
 804ca98:	460c      	mov	r4, r1
 804ca9a:	4611      	mov	r1, r2
 804ca9c:	461a      	mov	r2, r3
 804ca9e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804caa0:	d104      	bne.n	804caac <RegionComputeRxWindowParameters+0x18>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804caa2:	4620      	mov	r0, r4
        default:
        {
            break;
        }
    }
}
 804caa4:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804caa8:	f000 ba56 	b.w	804cf58 <RegionAU915ComputeRxWindowParameters>
}
 804caac:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cab0:	4770      	bx	lr

0804cab2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 804cab2:	2801      	cmp	r0, #1
{
 804cab4:	460b      	mov	r3, r1
    switch( region )
 804cab6:	d103      	bne.n	804cac0 <RegionRxConfig+0xe>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 804cab8:	4611      	mov	r1, r2
 804caba:	4618      	mov	r0, r3
 804cabc:	f000 ba8e 	b.w	804cfdc <RegionAU915RxConfig>
        default:
        {
            return false;
        }
    }
}
 804cac0:	2000      	movs	r0, #0
 804cac2:	4770      	bx	lr

0804cac4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 804cac4:	2801      	cmp	r0, #1
{
 804cac6:	b410      	push	{r4}
 804cac8:	460c      	mov	r4, r1
 804caca:	4611      	mov	r1, r2
    switch( region )
 804cacc:	d105      	bne.n	804cada <RegionTxConfig+0x16>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 804cace:	4620      	mov	r0, r4
 804cad0:	461a      	mov	r2, r3
        default:
        {
            return false;
        }
    }
}
 804cad2:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_TX_CONFIG( );
 804cad6:	f000 badb 	b.w	804d090 <RegionAU915TxConfig>
}
 804cada:	2000      	movs	r0, #0
 804cadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cae0:	4770      	bx	lr

0804cae2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804cae2:	b430      	push	{r4, r5}
    switch( region )
 804cae4:	2801      	cmp	r0, #1
{
 804cae6:	460c      	mov	r4, r1
 804cae8:	4611      	mov	r1, r2
 804caea:	461a      	mov	r2, r3
 804caec:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 804caf0:	d104      	bne.n	804cafc <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 804caf2:	9502      	str	r5, [sp, #8]
 804caf4:	4620      	mov	r0, r4
        default:
        {
            return 0;
        }
    }
}
 804caf6:	bc30      	pop	{r4, r5}
        AU915_LINK_ADR_REQ( );
 804caf8:	f000 bb46 	b.w	804d188 <RegionAU915LinkAdrReq>
}
 804cafc:	2000      	movs	r0, #0
 804cafe:	bc30      	pop	{r4, r5}
 804cb00:	4770      	bx	lr

0804cb02 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 804cb02:	2801      	cmp	r0, #1
 804cb04:	d102      	bne.n	804cb0c <RegionRxParamSetupReq+0xa>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 804cb06:	4608      	mov	r0, r1
 804cb08:	f000 bc4a 	b.w	804d3a0 <RegionAU915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804cb0c:	2000      	movs	r0, #0
 804cb0e:	4770      	bx	lr

0804cb10 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 804cb10:	2801      	cmp	r0, #1
 804cb12:	d102      	bne.n	804cb1a <RegionNewChannelReq+0xa>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 804cb14:	4608      	mov	r0, r1
 804cb16:	f000 bc69 	b.w	804d3ec <RegionAU915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804cb1a:	2000      	movs	r0, #0
 804cb1c:	4770      	bx	lr

0804cb1e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 804cb1e:	2801      	cmp	r0, #1
 804cb20:	d102      	bne.n	804cb28 <RegionTxParamSetupReq+0xa>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 804cb22:	4608      	mov	r0, r1
 804cb24:	f000 bc64 	b.w	804d3f0 <RegionAU915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804cb28:	2000      	movs	r0, #0
 804cb2a:	4770      	bx	lr

0804cb2c <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 804cb2c:	2801      	cmp	r0, #1
 804cb2e:	d102      	bne.n	804cb36 <RegionDlChannelReq+0xa>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 804cb30:	4608      	mov	r0, r1
 804cb32:	f000 bc5f 	b.w	804d3f4 <RegionAU915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804cb36:	2000      	movs	r0, #0
 804cb38:	4770      	bx	lr

0804cb3a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 804cb3a:	2801      	cmp	r0, #1
{
 804cb3c:	460b      	mov	r3, r1
    switch( region )
 804cb3e:	d103      	bne.n	804cb48 <RegionAlternateDr+0xe>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
 804cb40:	4611      	mov	r1, r2
 804cb42:	4618      	mov	r0, r3
 804cb44:	f000 bc58 	b.w	804d3f8 <RegionAU915AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 804cb48:	2000      	movs	r0, #0
 804cb4a:	4770      	bx	lr

0804cb4c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    switch( region )
 804cb4c:	2801      	cmp	r0, #1
 804cb4e:	d102      	bne.n	804cb56 <RegionCalcBackOff+0xa>
    {
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
 804cb50:	4608      	mov	r0, r1
 804cb52:	f000 bc63 	b.w	804d41c <RegionAU915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 804cb56:	4770      	bx	lr

0804cb58 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804cb58:	b410      	push	{r4}
    switch( region )
 804cb5a:	2801      	cmp	r0, #1
{
 804cb5c:	460c      	mov	r4, r1
 804cb5e:	4611      	mov	r1, r2
 804cb60:	461a      	mov	r2, r3
 804cb62:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804cb64:	d104      	bne.n	804cb70 <RegionNextChannel+0x18>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 804cb66:	4620      	mov	r0, r4
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 804cb68:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_NEXT_CHANNEL( );
 804cb6c:	f000 bc74 	b.w	804d458 <RegionAU915NextChannel>
}
 804cb70:	2009      	movs	r0, #9
 804cb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cb76:	4770      	bx	lr

0804cb78 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 804cb78:	2801      	cmp	r0, #1
 804cb7a:	d102      	bne.n	804cb82 <RegionSetContinuousWave+0xa>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 804cb7c:	4608      	mov	r0, r1
 804cb7e:	f000 bd0d 	b.w	804d59c <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 804cb82:	4770      	bx	lr

0804cb84 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 804cb84:	2801      	cmp	r0, #1
{
 804cb86:	b410      	push	{r4}
 804cb88:	460c      	mov	r4, r1
 804cb8a:	4611      	mov	r1, r2
    switch( region )
 804cb8c:	d105      	bne.n	804cb9a <RegionApplyDrOffset+0x16>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 804cb8e:	4620      	mov	r0, r4
 804cb90:	461a      	mov	r2, r3
        default:
        {
            return dr;
        }
    }
}
 804cb92:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_APPLY_DR_OFFSET( );
 804cb96:	f000 bd25 	b.w	804d5e4 <RegionAU915ApplyDrOffset>
}
 804cb9a:	b2d0      	uxtb	r0, r2
 804cb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cba0:	4770      	bx	lr
	...

0804cba4 <VerifyRfFreq>:
}

static bool VerifyRfFreq( uint32_t freq )
{
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 804cba4:	4b0a      	ldr	r3, [pc, #40]	; (804cbd0 <VerifyRfFreq+0x2c>)
{
 804cba6:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 804cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 804cbaa:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 804cbac:	4798      	blx	r3
 804cbae:	b170      	cbz	r0, 804cbce <VerifyRfFreq+0x2a>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 804cbb0:	4b08      	ldr	r3, [pc, #32]	; (804cbd4 <VerifyRfFreq+0x30>)
 804cbb2:	4a09      	ldr	r2, [pc, #36]	; (804cbd8 <VerifyRfFreq+0x34>)
 804cbb4:	4423      	add	r3, r4
 804cbb6:	4293      	cmp	r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 804cbb8:	bf9f      	itttt	ls
 804cbba:	4a08      	ldrls	r2, [pc, #32]	; (804cbdc <VerifyRfFreq+0x38>)
 804cbbc:	fbb3 f0f2 	udivls	r0, r3, r2
 804cbc0:	fb02 3010 	mlsls	r0, r2, r0, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 804cbc4:	fab0 f080 	clzls	r0, r0
 804cbc8:	bf94      	ite	ls
 804cbca:	0940      	lsrls	r0, r0, #5
        return false;
 804cbcc:	2000      	movhi	r0, #0
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
    {
        return false;
    }
    return true;
}
 804cbce:	bd10      	pop	{r4, pc}
 804cbd0:	08053dd0 	.word	0x08053dd0
 804cbd4:	c8f78f60 	.word	0xc8f78f60
 804cbd8:	00401640 	.word	0x00401640
 804cbdc:	000927c0 	.word	0x000927c0

0804cbe0 <RegionAU915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 804cbe0:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 804cbe2:	2300      	movs	r3, #0
 804cbe4:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 804cbe6:	7803      	ldrb	r3, [r0, #0]
 804cbe8:	3b01      	subs	r3, #1
 804cbea:	2b34      	cmp	r3, #52	; 0x34
 804cbec:	d832      	bhi.n	804cc54 <RegionAU915GetPhyParam+0x74>
 804cbee:	e8df f003 	tbb	[pc, r3]
 804cbf2:	1f1b      	.short	0x1f1b
 804cbf4:	21313131 	.word	0x21313131
 804cbf8:	31313131 	.word	0x31313131
 804cbfc:	4d43413f 	.word	0x4d43413f
 804cc00:	5e5b5831 	.word	0x5e5b5831
 804cc04:	6a676461 	.word	0x6a676461
 804cc08:	751d7331 	.word	0x751d7331
 804cc0c:	7d7b7977 	.word	0x7d7b7977
 804cc10:	24827f31 	.word	0x24827f31
 804cc14:	31313131 	.word	0x31313131
 804cc18:	31313131 	.word	0x31313131
 804cc1c:	31313131 	.word	0x31313131
 804cc20:	1d843131 	.word	0x1d843131
 804cc24:	1d8c      	.short	0x1d8c
 804cc26:	1d          	.byte	0x1d
 804cc27:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 804cc28:	78c3      	ldrb	r3, [r0, #3]
 804cc2a:	b91b      	cbnz	r3, 804cc34 <RegionAU915GetPhyParam+0x54>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 804cc2c:	2308      	movs	r3, #8
 804cc2e:	e002      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0)
 804cc30:	7883      	ldrb	r3, [r0, #2]
 804cc32:	b17b      	cbz	r3, 804cc54 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_DEFAULT_DATARATE;
 804cc34:	2302      	movs	r3, #2
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
            break;
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804cc36:	9300      	str	r3, [sp, #0]
            break;
 804cc38:	e00c      	b.n	804cc54 <RegionAU915GetPhyParam+0x74>
            if( getPhy->UplinkDwellTime == 0)
 804cc3a:	7882      	ldrb	r2, [r0, #2]
 804cc3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 804cc40:	b962      	cbnz	r2, 804cc5c <RegionAU915GetPhyParam+0x7c>
    if( dr == minDr )
 804cc42:	b12b      	cbz	r3, 804cc50 <RegionAU915GetPhyParam+0x70>
    else if( dr == DR_8 )
 804cc44:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804cc46:	bf1a      	itte	ne
 804cc48:	f103 33ff 	addne.w	r3, r3, #4294967295
 804cc4c:	b2da      	uxtbne	r2, r3
        nextLowerDr = DR_6;
 804cc4e:	2206      	moveq	r2, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 804cc50:	b252      	sxtb	r2, r2
 804cc52:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 804cc54:	9800      	ldr	r0, [sp, #0]
 804cc56:	b003      	add	sp, #12
 804cc58:	f85d fb04 	ldr.w	pc, [sp], #4
    if( dr == minDr )
 804cc5c:	2b02      	cmp	r3, #2
 804cc5e:	d005      	beq.n	804cc6c <RegionAU915GetPhyParam+0x8c>
    else if( dr == DR_8 )
 804cc60:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804cc62:	bf1a      	itte	ne
 804cc64:	f103 33ff 	addne.w	r3, r3, #4294967295
 804cc68:	b2db      	uxtbne	r3, r3
        nextLowerDr = DR_6;
 804cc6a:	2306      	moveq	r3, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 804cc6c:	b25b      	sxtb	r3, r3
 804cc6e:	e7e2      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 804cc70:	2340      	movs	r3, #64	; 0x40
 804cc72:	e7e0      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 804cc74:	2320      	movs	r3, #32
 804cc76:	e7de      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 804cc78:	7881      	ldrb	r1, [r0, #2]
 804cc7a:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804cc7e:	4b24      	ldr	r3, [pc, #144]	; (804cd10 <RegionAU915GetPhyParam+0x130>)
 804cc80:	b909      	cbnz	r1, 804cc86 <RegionAU915GetPhyParam+0xa6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 804cc82:	5c9b      	ldrb	r3, [r3, r2]
 804cc84:	e7d7      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 804cc86:	4413      	add	r3, r2
 804cc88:	7b9b      	ldrb	r3, [r3, #14]
 804cc8a:	e7d4      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
 804cc8c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804cc90:	4b1f      	ldr	r3, [pc, #124]	; (804cd10 <RegionAU915GetPhyParam+0x130>)
            if( getPhy->UplinkDwellTime == 0)
 804cc92:	7881      	ldrb	r1, [r0, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804cc94:	4413      	add	r3, r2
            if( getPhy->UplinkDwellTime == 0)
 804cc96:	b909      	cbnz	r1, 804cc9c <RegionAU915GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804cc98:	7f1b      	ldrb	r3, [r3, #28]
 804cc9a:	e7cc      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 804cc9c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 804cca0:	e7c9      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 804cca2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804cca6:	e7c6      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 804cca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804ccac:	e7c3      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 804ccae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 804ccb2:	e7c0      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 804ccb4:	f241 3388 	movw	r3, #5000	; 0x1388
 804ccb8:	e7bd      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 804ccba:	f241 7370 	movw	r3, #6000	; 0x1770
 804ccbe:	e7ba      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 804ccc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804ccc4:	e7b7      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 804ccc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804ccca:	4812      	ldr	r0, [pc, #72]	; (804cd14 <RegionAU915GetPhyParam+0x134>)
 804cccc:	f001 fd8a 	bl	804e7e4 <randr>
 804ccd0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 804ccd4:	9000      	str	r0, [sp, #0]
            break;
 804ccd6:	e7bd      	b.n	804cc54 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 804ccd8:	4b0f      	ldr	r3, [pc, #60]	; (804cd18 <RegionAU915GetPhyParam+0x138>)
 804ccda:	e7ac      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 804ccdc:	4b0f      	ldr	r3, [pc, #60]	; (804cd1c <RegionAU915GetPhyParam+0x13c>)
 804ccde:	e7aa      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 804cce0:	4b0f      	ldr	r3, [pc, #60]	; (804cd20 <RegionAU915GetPhyParam+0x140>)
 804cce2:	e7a8      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 804cce4:	2348      	movs	r3, #72	; 0x48
 804cce6:	e7a6      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 804cce8:	4b0e      	ldr	r3, [pc, #56]	; (804cd24 <RegionAU915GetPhyParam+0x144>)
 804ccea:	e7a4      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 804ccec:	2301      	movs	r3, #1
 804ccee:	e7a2      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 804ccf0:	4b0d      	ldr	r3, [pc, #52]	; (804cd28 <RegionAU915GetPhyParam+0x148>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804ccf2:	9300      	str	r3, [sp, #0]
            break;
 804ccf4:	e7ae      	b.n	804cc54 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804ccf6:	4b0d      	ldr	r3, [pc, #52]	; (804cd2c <RegionAU915GetPhyParam+0x14c>)
 804ccf8:	e7fb      	b.n	804ccf2 <RegionAU915GetPhyParam+0x112>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 804ccfa:	f240 3313 	movw	r3, #787	; 0x313
 804ccfe:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 804cd02:	2301      	movs	r3, #1
 804cd04:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 804cd08:	e7a4      	b.n	804cc54 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804cd0a:	4b09      	ldr	r3, [pc, #36]	; (804cd30 <RegionAU915GetPhyParam+0x150>)
 804cd0c:	e793      	b.n	804cc36 <RegionAU915GetPhyParam+0x56>
 804cd0e:	bf00      	nop
 804cd10:	08054188 	.word	0x08054188
 804cd14:	fffffc18 	.word	0xfffffc18
 804cd18:	370870a0 	.word	0x370870a0
 804cd1c:	20003508 	.word	0x20003508
 804cd20:	20003520 	.word	0x20003520
 804cd24:	20003198 	.word	0x20003198
 804cd28:	41f00000 	.word	0x41f00000
 804cd2c:	3e19999a 	.word	0x3e19999a
 804cd30:	000927c0 	.word	0x000927c0

0804cd34 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 804cd34:	4906      	ldr	r1, [pc, #24]	; (804cd50 <RegionAU915SetBandTxDone+0x1c>)
 804cd36:	7803      	ldrb	r3, [r0, #0]
 804cd38:	220c      	movs	r2, #12
 804cd3a:	fb02 1303 	mla	r3, r2, r3, r1
 804cd3e:	6842      	ldr	r2, [r0, #4]
 804cd40:	7a5b      	ldrb	r3, [r3, #9]
 804cd42:	7840      	ldrb	r0, [r0, #1]
 804cd44:	3336      	adds	r3, #54	; 0x36
 804cd46:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 804cd4a:	f000 bcf1 	b.w	804d730 <RegionCommonSetBandTxDone>
 804cd4e:	bf00      	nop
 804cd50:	20003198 	.word	0x20003198

0804cd54 <RegionAU915InitDefaults>:
}

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 804cd54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cd56:	2301      	movs	r3, #1
 804cd58:	f8ad 3000 	strh.w	r3, [sp]
    {
        AU915_BAND0
    };

    switch( params->Type )
 804cd5c:	7903      	ldrb	r3, [r0, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cd5e:	2400      	movs	r4, #0
    switch( params->Type )
 804cd60:	2b01      	cmp	r3, #1
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cd62:	f88d 4002 	strb.w	r4, [sp, #2]
 804cd66:	e9cd 4401 	strd	r4, r4, [sp, #4]
 804cd6a:	9403      	str	r4, [sp, #12]
    switch( params->Type )
 804cd6c:	d049      	beq.n	804ce02 <RegionAU915InitDefaults+0xae>
 804cd6e:	d303      	bcc.n	804cd78 <RegionAU915InitDefaults+0x24>
 804cd70:	2b02      	cmp	r3, #2
 804cd72:	d03d      	beq.n	804cdf0 <RegionAU915InitDefaults+0x9c>
        default:
        {
            break;
        }
    }
}
 804cd74:	b004      	add	sp, #16
 804cd76:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804cd78:	2210      	movs	r2, #16
 804cd7a:	4669      	mov	r1, sp
 804cd7c:	482a      	ldr	r0, [pc, #168]	; (804ce28 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cd7e:	4d2b      	ldr	r5, [pc, #172]	; (804ce2c <RegionAU915InitDefaults+0xd8>)
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804cd80:	f001 fd3d 	bl	804e7fe <memcpy1>
 804cd84:	4b2a      	ldr	r3, [pc, #168]	; (804ce30 <RegionAU915InitDefaults+0xdc>)
 804cd86:	4a2b      	ldr	r2, [pc, #172]	; (804ce34 <RegionAU915InitDefaults+0xe0>)
 804cd88:	4619      	mov	r1, r3
 804cd8a:	4618      	mov	r0, r3
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804cd8c:	2650      	movs	r6, #80	; 0x50
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 804cd8e:	600a      	str	r2, [r1, #0]
 804cd90:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 804cd94:	f502 72a0 	add.w	r2, r2, #320	; 0x140
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cd98:	42aa      	cmp	r2, r5
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804cd9a:	720e      	strb	r6, [r1, #8]
                NvmCtx.Channels[i].Band = 0;
 804cd9c:	724c      	strb	r4, [r1, #9]
 804cd9e:	f101 010c 	add.w	r1, r1, #12
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cda2:	d1f4      	bne.n	804cd8e <RegionAU915InitDefaults+0x3a>
 804cda4:	4a24      	ldr	r2, [pc, #144]	; (804ce38 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cda6:	4c25      	ldr	r4, [pc, #148]	; (804ce3c <RegionAU915InitDefaults+0xe8>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804cda8:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 804cdaa:	2100      	movs	r1, #0
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 804cdac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 804cdb0:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804cdb4:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cdb8:	42a2      	cmp	r2, r4
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804cdba:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
                NvmCtx.Channels[i].Band = 0;
 804cdbe:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
 804cdc2:	f103 030c 	add.w	r3, r3, #12
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cdc6:	d1f1      	bne.n	804cdac <RegionAU915InitDefaults+0x58>
            NvmCtx.ChannelsDefaultMask[1] = 0x0000;
 804cdc8:	f8c0 138c 	str.w	r1, [r0, #908]	; 0x38c
            NvmCtx.ChannelsDefaultMask[3] = 0x0000;
 804cdcc:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804cdd0:	491b      	ldr	r1, [pc, #108]	; (804ce40 <RegionAU915InitDefaults+0xec>)
            NvmCtx.ChannelsDefaultMask[0] = 0x0001;
 804cdd2:	2301      	movs	r3, #1
 804cdd4:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804cdd8:	2206      	movs	r2, #6
 804cdda:	f1a1 0018 	sub.w	r0, r1, #24
 804cdde:	f000 fc98 	bl	804d712 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 804cde2:	4918      	ldr	r1, [pc, #96]	; (804ce44 <RegionAU915InitDefaults+0xf0>)
 804cde4:	2206      	movs	r2, #6
 804cde6:	f101 000c 	add.w	r0, r1, #12
 804cdea:	f000 fc92 	bl	804d712 <RegionCommonChanMaskCopy>
            break;
 804cdee:	e7c1      	b.n	804cd74 <RegionAU915InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 804cdf0:	6801      	ldr	r1, [r0, #0]
 804cdf2:	2900      	cmp	r1, #0
 804cdf4:	d0be      	beq.n	804cd74 <RegionAU915InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 804cdf6:	f44f 7265 	mov.w	r2, #916	; 0x394
 804cdfa:	480d      	ldr	r0, [pc, #52]	; (804ce30 <RegionAU915InitDefaults+0xdc>)
 804cdfc:	f001 fcff 	bl	804e7fe <memcpy1>
 804ce00:	e7b8      	b.n	804cd74 <RegionAU915InitDefaults+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804ce02:	490f      	ldr	r1, [pc, #60]	; (804ce40 <RegionAU915InitDefaults+0xec>)
 804ce04:	2206      	movs	r2, #6
 804ce06:	f1a1 0018 	sub.w	r0, r1, #24
 804ce0a:	f000 fc82 	bl	804d712 <RegionCommonChanMaskCopy>
 804ce0e:	4b0e      	ldr	r3, [pc, #56]	; (804ce48 <RegionAU915InitDefaults+0xf4>)
 804ce10:	f103 010c 	add.w	r1, r3, #12
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804ce14:	881a      	ldrh	r2, [r3, #0]
 804ce16:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 804ce1a:	4002      	ands	r2, r0
 804ce1c:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804ce20:	428b      	cmp	r3, r1
 804ce22:	d1f7      	bne.n	804ce14 <RegionAU915InitDefaults+0xc0>
 804ce24:	e7a6      	b.n	804cd74 <RegionAU915InitDefaults+0x20>
 804ce26:	bf00      	nop
 804ce28:	200034f8 	.word	0x200034f8
 804ce2c:	37502800 	.word	0x37502800
 804ce30:	20003198 	.word	0x20003198
 804ce34:	368cd800 	.word	0x368cd800
 804ce38:	36978660 	.word	0x36978660
 804ce3c:	375ad660 	.word	0x375ad660
 804ce40:	20003520 	.word	0x20003520
 804ce44:	20003508 	.word	0x20003508
 804ce48:	20003514 	.word	0x20003514

0804ce4c <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 804ce4c:	f44f 7365 	mov.w	r3, #916	; 0x394
 804ce50:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804ce52:	4801      	ldr	r0, [pc, #4]	; (804ce58 <RegionAU915GetNvmCtx+0xc>)
 804ce54:	4770      	bx	lr
 804ce56:	bf00      	nop
 804ce58:	20003198 	.word	0x20003198

0804ce5c <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 804ce5c:	b508      	push	{r3, lr}
 804ce5e:	4603      	mov	r3, r0
    switch( phyAttribute )
 804ce60:	290a      	cmp	r1, #10
 804ce62:	d825      	bhi.n	804ceb0 <RegionAU915Verify+0x54>
 804ce64:	e8df f001 	tbb	[pc, r1]
 804ce68:	24242406 	.word	0x24242406
 804ce6c:	160b0b24 	.word	0x160b0b24
 804ce70:	1f24      	.short	0x1f24
 804ce72:	1f          	.byte	0x1f
 804ce73:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 804ce74:	6800      	ldr	r0, [r0, #0]
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 804ce76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 804ce7a:	f7ff be93 	b.w	804cba4 <VerifyRfFreq>
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804ce7e:	7899      	ldrb	r1, [r3, #2]
 804ce80:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 804ce84:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804ce86:	b961      	cbnz	r1, 804cea2 <RegionAU915Verify+0x46>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804ce88:	f000 fc03 	bl	804d692 <RegionCommonValueInRange>
 804ce8c:	3000      	adds	r0, #0
 804ce8e:	bf18      	it	ne
 804ce90:	2001      	movne	r0, #1
}
 804ce92:	bd08      	pop	{r3, pc}
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804ce94:	789b      	ldrb	r3, [r3, #2]
 804ce96:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804ce9a:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804ce9c:	b90b      	cbnz	r3, 804cea2 <RegionAU915Verify+0x46>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804ce9e:	2108      	movs	r1, #8
 804cea0:	e7f2      	b.n	804ce88 <RegionAU915Verify+0x2c>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 804cea2:	2102      	movs	r1, #2
 804cea4:	e7f0      	b.n	804ce88 <RegionAU915Verify+0x2c>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804cea6:	220e      	movs	r2, #14
 804cea8:	2100      	movs	r1, #0
 804ceaa:	f990 0000 	ldrsb.w	r0, [r0]
 804ceae:	e7eb      	b.n	804ce88 <RegionAU915Verify+0x2c>
            return AU915_DUTY_CYCLE_ENABLED;
 804ceb0:	2000      	movs	r0, #0
 804ceb2:	e7ee      	b.n	804ce92 <RegionAU915Verify+0x36>

0804ceb4 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 804ceb4:	b530      	push	{r4, r5, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 804ceb6:	7903      	ldrb	r3, [r0, #4]
 804ceb8:	2b10      	cmp	r3, #16
 804ceba:	d11d      	bne.n	804cef8 <RegionAU915ApplyCFList+0x44>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 804cebc:	6800      	ldr	r0, [r0, #0]
 804cebe:	7bc3      	ldrb	r3, [r0, #15]
 804cec0:	2b01      	cmp	r3, #1
 804cec2:	d119      	bne.n	804cef8 <RegionAU915ApplyCFList+0x44>
 804cec4:	4b0d      	ldr	r3, [pc, #52]	; (804cefc <RegionAU915ApplyCFList+0x48>)
 804cec6:	2100      	movs	r1, #0
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804cec8:	f2a3 356e 	subw	r5, r3, #878	; 0x36e
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 804cecc:	f810 2011 	ldrb.w	r2, [r0, r1, lsl #1]
 804ced0:	805a      	strh	r2, [r3, #2]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804ced2:	eb00 0441 	add.w	r4, r0, r1, lsl #1
        if( chMaskItr == 4 )
 804ced6:	2904      	cmp	r1, #4
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804ced8:	7864      	ldrb	r4, [r4, #1]
 804ceda:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 804cede:	f823 2f02 	strh.w	r2, [r3, #2]!
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804cee2:	bf04      	itt	eq
 804cee4:	b2d2      	uxtbeq	r2, r2
 804cee6:	f8a5 2378 	strheq.w	r2, [r5, #888]	; 0x378
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804ceea:	899a      	ldrh	r2, [r3, #12]
 804ceec:	881c      	ldrh	r4, [r3, #0]
 804ceee:	3101      	adds	r1, #1
 804cef0:	4022      	ands	r2, r4
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804cef2:	2905      	cmp	r1, #5
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804cef4:	819a      	strh	r2, [r3, #12]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804cef6:	d1e9      	bne.n	804cecc <RegionAU915ApplyCFList+0x18>
    }
}
 804cef8:	bd30      	pop	{r4, r5, pc}
 804cefa:	bf00      	nop
 804cefc:	20003506 	.word	0x20003506

0804cf00 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 804cf00:	b538      	push	{r3, r4, r5, lr}
    switch( chanMaskSet->ChannelsMaskType )
 804cf02:	7904      	ldrb	r4, [r0, #4]
 804cf04:	b11c      	cbz	r4, 804cf0e <RegionAU915ChanMaskSet+0xe>
 804cf06:	2c01      	cmp	r4, #1
 804cf08:	d01c      	beq.n	804cf44 <RegionAU915ChanMaskSet+0x44>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
            break;
        }
        default:
            return false;
 804cf0a:	2000      	movs	r0, #0
 804cf0c:	e019      	b.n	804cf42 <RegionAU915ChanMaskSet+0x42>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 804cf0e:	4d10      	ldr	r5, [pc, #64]	; (804cf50 <RegionAU915ChanMaskSet+0x50>)
 804cf10:	6801      	ldr	r1, [r0, #0]
 804cf12:	2206      	movs	r2, #6
 804cf14:	f505 705c 	add.w	r0, r5, #880	; 0x370
 804cf18:	f000 fbfb 	bl	804d712 <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 804cf1c:	f895 3390 	ldrb.w	r3, [r5, #912]	; 0x390
 804cf20:	f8a5 3390 	strh.w	r3, [r5, #912]	; 0x390
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 804cf24:	f8a5 4392 	strh.w	r4, [r5, #914]	; 0x392
 804cf28:	f505 735f 	add.w	r3, r5, #892	; 0x37c
 804cf2c:	f505 7562 	add.w	r5, r5, #904	; 0x388
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804cf30:	881a      	ldrh	r2, [r3, #0]
 804cf32:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 804cf36:	400a      	ands	r2, r1
 804cf38:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804cf3c:	42ab      	cmp	r3, r5
 804cf3e:	d1f7      	bne.n	804cf30 <RegionAU915ChanMaskSet+0x30>
    }
    return true;
 804cf40:	2001      	movs	r0, #1
}
 804cf42:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 804cf44:	6801      	ldr	r1, [r0, #0]
 804cf46:	4803      	ldr	r0, [pc, #12]	; (804cf54 <RegionAU915ChanMaskSet+0x54>)
 804cf48:	2206      	movs	r2, #6
 804cf4a:	f000 fbe2 	bl	804d712 <RegionCommonChanMaskCopy>
 804cf4e:	e7f7      	b.n	804cf40 <RegionAU915ChanMaskSet+0x40>
 804cf50:	20003198 	.word	0x20003198
 804cf54:	20003520 	.word	0x20003520

0804cf58 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804cf5a:	280d      	cmp	r0, #13
 804cf5c:	bfa8      	it	ge
 804cf5e:	200d      	movge	r0, #13
{
 804cf60:	4616      	mov	r6, r2
    switch( BandwidthsAU915[drIndex] )
 804cf62:	4a1a      	ldr	r2, [pc, #104]	; (804cfcc <RegionAU915ComputeRxWindowParameters+0x74>)
 804cf64:	4f1a      	ldr	r7, [pc, #104]	; (804cfd0 <RegionAU915ComputeRxWindowParameters+0x78>)
{
 804cf66:	ed2d 8b02 	vpush	{d8}
 804cf6a:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804cf6c:	7058      	strb	r0, [r3, #1]
    switch( BandwidthsAU915[drIndex] )
 804cf6e:	0083      	lsls	r3, r0, #2
{
 804cf70:	460d      	mov	r5, r1
    switch( BandwidthsAU915[drIndex] )
 804cf72:	18d1      	adds	r1, r2, r3
{
 804cf74:	b083      	sub	sp, #12
    switch( BandwidthsAU915[drIndex] )
 804cf76:	6b89      	ldr	r1, [r1, #56]	; 0x38
 804cf78:	42b9      	cmp	r1, r7
 804cf7a:	d025      	beq.n	804cfc8 <RegionAU915ComputeRxWindowParameters+0x70>
            return 0;
 804cf7c:	4f15      	ldr	r7, [pc, #84]	; (804cfd4 <RegionAU915ComputeRxWindowParameters+0x7c>)
 804cf7e:	42b9      	cmp	r1, r7
 804cf80:	bf0c      	ite	eq
 804cf82:	2102      	moveq	r1, #2
 804cf84:	2100      	movne	r1, #0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cf86:	4413      	add	r3, r2
 804cf88:	4402      	add	r2, r0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 804cf8a:	70a1      	strb	r1, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cf8c:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
 804cf90:	6b99      	ldr	r1, [r3, #56]	; 0x38
 804cf92:	f000 fc63 	bl	804d85c <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804cf96:	4b10      	ldr	r3, [pc, #64]	; (804cfd8 <RegionAU915ComputeRxWindowParameters+0x80>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cf98:	eeb0 8a40 	vmov.f32	s16, s0
 804cf9c:	eef0 8a60 	vmov.f32	s17, s1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804cfa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804cfa2:	4798      	blx	r3
 804cfa4:	eeb0 0a48 	vmov.f32	s0, s16
 804cfa8:	eef0 0a68 	vmov.f32	s1, s17
 804cfac:	f104 030c 	add.w	r3, r4, #12
 804cfb0:	9300      	str	r3, [sp, #0]
 804cfb2:	4602      	mov	r2, r0
 804cfb4:	f104 0308 	add.w	r3, r4, #8
 804cfb8:	4631      	mov	r1, r6
 804cfba:	4628      	mov	r0, r5
 804cfbc:	f000 fc6a 	bl	804d894 <RegionCommonComputeRxWindowParameters>
}
 804cfc0:	b003      	add	sp, #12
 804cfc2:	ecbd 8b02 	vpop	{d8}
 804cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
 804cfc8:	2101      	movs	r1, #1
 804cfca:	e7dc      	b.n	804cf86 <RegionAU915ComputeRxWindowParameters+0x2e>
 804cfcc:	08054188 	.word	0x08054188
 804cfd0:	0003d090 	.word	0x0003d090
 804cfd4:	0007a120 	.word	0x0007a120
 804cfd8:	08053dd0 	.word	0x08053dd0

0804cfdc <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 804cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 804cfe0:	4e26      	ldr	r6, [pc, #152]	; (804d07c <RegionAU915RxConfig+0xa0>)
    int8_t dr = rxConfig->Datarate;
 804cfe2:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 804cfe6:	68f3      	ldr	r3, [r6, #12]
    uint32_t frequency = rxConfig->Frequency;
 804cfe8:	6845      	ldr	r5, [r0, #4]
{
 804cfea:	b08d      	sub	sp, #52	; 0x34
 804cfec:	4604      	mov	r4, r0
 804cfee:	468b      	mov	fp, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 804cff0:	4798      	blx	r3
 804cff2:	2800      	cmp	r0, #0
 804cff4:	d140      	bne.n	804d078 <RegionAU915RxConfig+0x9c>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 804cff6:	7ce3      	ldrb	r3, [r4, #19]
 804cff8:	b933      	cbnz	r3, 804d008 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 804cffa:	7825      	ldrb	r5, [r4, #0]
 804cffc:	4a20      	ldr	r2, [pc, #128]	; (804d080 <RegionAU915RxConfig+0xa4>)
 804cffe:	4b21      	ldr	r3, [pc, #132]	; (804d084 <RegionAU915RxConfig+0xa8>)
 804d000:	f005 0507 	and.w	r5, r5, #7
 804d004:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 804d008:	f8df 9080 	ldr.w	r9, [pc, #128]	; 804d08c <RegionAU915RxConfig+0xb0>

    Radio.SetChannel( frequency );
 804d00c:	6973      	ldr	r3, [r6, #20]
    phyDr = DataratesAU915[dr];
 804d00e:	eb09 0a08 	add.w	sl, r9, r8
    Radio.SetChannel( frequency );
 804d012:	4628      	mov	r0, r5
    phyDr = DataratesAU915[dr];
 804d014:	f99a 2078 	ldrsb.w	r2, [sl, #120]	; 0x78
 804d018:	920b      	str	r2, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 804d01a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 804d01c:	7ca3      	ldrb	r3, [r4, #18]
 804d01e:	8927      	ldrh	r7, [r4, #8]
 804d020:	9309      	str	r3, [sp, #36]	; 0x24
 804d022:	2000      	movs	r0, #0
 804d024:	2301      	movs	r3, #1
 804d026:	9702      	str	r7, [sp, #8]
 804d028:	2708      	movs	r7, #8
 804d02a:	e9cd 0307 	strd	r0, r3, [sp, #28]
 804d02e:	e9cd 0700 	strd	r0, r7, [sp]
 804d032:	e9cd 0005 	strd	r0, r0, [sp, #20]
 804d036:	e9cd 0003 	strd	r0, r0, [sp, #12]
 804d03a:	78a1      	ldrb	r1, [r4, #2]
 804d03c:	6a37      	ldr	r7, [r6, #32]
 804d03e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804d040:	4618      	mov	r0, r3
 804d042:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 804d044:	7c63      	ldrb	r3, [r4, #17]
 804d046:	b1a3      	cbz	r3, 804d072 <RegionAU915RxConfig+0x96>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 804d048:	f89a 101c 	ldrb.w	r1, [sl, #28]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 804d04c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 804d04e:	310d      	adds	r1, #13
 804d050:	b2c9      	uxtb	r1, r1
 804d052:	2001      	movs	r0, #1
 804d054:	4798      	blx	r3
    //TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d band %d channel %d \n\r", frequency, dr, rxConfig->Bandwidth, rxConfig->Channel );
 804d056:	7822      	ldrb	r2, [r4, #0]
 804d058:	9200      	str	r2, [sp, #0]
 804d05a:	78a3      	ldrb	r3, [r4, #2]
 804d05c:	480a      	ldr	r0, [pc, #40]	; (804d088 <RegionAU915RxConfig+0xac>)
 804d05e:	4642      	mov	r2, r8
 804d060:	4629      	mov	r1, r5
 804d062:	f001 fb67 	bl	804e734 <TraceSend>
    *datarate = (uint8_t) dr;
 804d066:	f88b 8000 	strb.w	r8, [fp]
    return true;
 804d06a:	2001      	movs	r0, #1
}
 804d06c:	b00d      	add	sp, #52	; 0x34
 804d06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 804d072:	f819 1008 	ldrb.w	r1, [r9, r8]
 804d076:	e7e9      	b.n	804d04c <RegionAU915RxConfig+0x70>
        return false;
 804d078:	2000      	movs	r0, #0
 804d07a:	e7f7      	b.n	804d06c <RegionAU915RxConfig+0x90>
 804d07c:	08053dd0 	.word	0x08053dd0
 804d080:	000927c0 	.word	0x000927c0
 804d084:	370870a0 	.word	0x370870a0
 804d088:	080544ac 	.word	0x080544ac
 804d08c:	08054188 	.word	0x08054188

0804d090 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 804d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d094:	b08f      	sub	sp, #60	; 0x3c
 804d096:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804d09a:	4b35      	ldr	r3, [pc, #212]	; (804d170 <RegionAU915TxConfig+0xe0>)
 804d09c:	f990 1001 	ldrsb.w	r1, [r0, #1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804d0a0:	4e34      	ldr	r6, [pc, #208]	; (804d174 <RegionAU915TxConfig+0xe4>)
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804d0a2:	185a      	adds	r2, r3, r1
{
 804d0a4:	4604      	mov	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804d0a6:	f992 7078 	ldrsb.w	r7, [r2, #120]	; 0x78
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804d0aa:	7802      	ldrb	r2, [r0, #0]
 804d0ac:	200c      	movs	r0, #12
 804d0ae:	fb00 6202 	mla	r2, r0, r2, r6
    switch( BandwidthsAU915[drIndex] )
 804d0b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804d0b6:	7a52      	ldrb	r2, [r2, #9]
    switch( BandwidthsAU915[drIndex] )
 804d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804d0ba:	eb06 1202 	add.w	r2, r6, r2, lsl #4
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804d0be:	f992 9362 	ldrsb.w	r9, [r2, #866]	; 0x362
 804d0c2:	f994 2002 	ldrsb.w	r2, [r4, #2]
 804d0c6:	4591      	cmp	r9, r2
 804d0c8:	bfb8      	it	lt
 804d0ca:	4691      	movlt	r9, r2
    switch( BandwidthsAU915[drIndex] )
 804d0cc:	4a2a      	ldr	r2, [pc, #168]	; (804d178 <RegionAU915TxConfig+0xe8>)
 804d0ce:	4293      	cmp	r3, r2
 804d0d0:	d04b      	beq.n	804d16a <RegionAU915TxConfig+0xda>
            return 0;
 804d0d2:	4a2a      	ldr	r2, [pc, #168]	; (804d17c <RegionAU915TxConfig+0xec>)
 804d0d4:	4293      	cmp	r3, r2
 804d0d6:	bf0c      	ite	eq
 804d0d8:	f04f 0802 	moveq.w	r8, #2
 804d0dc:	f04f 0800 	movne.w	r8, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804d0e0:	edd4 0a02 	vldr	s1, [r4, #8]
 804d0e4:	ed94 0a01 	vldr	s0, [r4, #4]
    //PRINTF( "TX power %d, txPowerLimited %d, txConfig->MaxEirp %d, txConfig->AntennaGain %d \n\r", phyTxPower, txPowerLimited, (int8_t)(txConfig->MaxEirp*100), (int8_t)(txConfig->AntennaGain*100));
    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804d0e8:	f8df a098 	ldr.w	sl, [pc, #152]	; 804d184 <RegionAU915TxConfig+0xf4>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804d0ec:	4648      	mov	r0, r9
 804d0ee:	f000 fc33 	bl	804d958 <RegionCommonComputeTxPower>
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804d0f2:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804d0f4:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804d0f6:	f04f 0b0c 	mov.w	fp, #12
 804d0fa:	fb0b f202 	mul.w	r2, fp, r2
 804d0fe:	f8da 3014 	ldr.w	r3, [sl, #20]
 804d102:	58b0      	ldr	r0, [r6, r2]
 804d104:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 804d106:	2200      	movs	r2, #0
 804d108:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 804d10c:	2501      	movs	r5, #1
 804d10e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 804d112:	2308      	movs	r3, #8
 804d114:	e9cd 2205 	strd	r2, r2, [sp, #20]
 804d118:	e9cd 2503 	strd	r2, r5, [sp, #12]
 804d11c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 804d120:	9700      	str	r7, [sp, #0]
 804d122:	4643      	mov	r3, r8
 804d124:	990d      	ldr	r1, [sp, #52]	; 0x34
 804d126:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24
 804d12a:	4628      	mov	r0, r5
 804d12c:	47b8      	blx	r7
    PRINTF( "TX on freq %d Hz at DR %d BW %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate, bandwidth );
 804d12e:	7823      	ldrb	r3, [r4, #0]
 804d130:	f994 2001 	ldrsb.w	r2, [r4, #1]
 804d134:	4812      	ldr	r0, [pc, #72]	; (804d180 <RegionAU915TxConfig+0xf0>)
 804d136:	fb0b fb03 	mul.w	fp, fp, r3
 804d13a:	4643      	mov	r3, r8
 804d13c:	f856 100b 	ldr.w	r1, [r6, fp]
 804d140:	f001 faf8 	bl	804e734 <TraceSend>
    //TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 804d144:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 804d148:	7b21      	ldrb	r1, [r4, #12]
 804d14a:	4628      	mov	r0, r5
 804d14c:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 804d14e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 804d152:	7b21      	ldrb	r1, [r4, #12]
 804d154:	4628      	mov	r0, r5
 804d156:	4798      	blx	r3
 804d158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804d15a:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;
 804d15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return true;
}
 804d15e:	4628      	mov	r0, r5
    *txPower = txPowerLimited;
 804d160:	f883 9000 	strb.w	r9, [r3]
}
 804d164:	b00f      	add	sp, #60	; 0x3c
 804d166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 1;
 804d16a:	f04f 0801 	mov.w	r8, #1
 804d16e:	e7b7      	b.n	804d0e0 <RegionAU915TxConfig+0x50>
 804d170:	08054188 	.word	0x08054188
 804d174:	20003198 	.word	0x20003198
 804d178:	0003d090 	.word	0x0003d090
 804d17c:	0007a120 	.word	0x0007a120
 804d180:	080544dc 	.word	0x080544dc
 804d184:	08053dd0 	.word	0x08053dd0

0804d188 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d18c:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804d18e:	ae07      	add	r6, sp, #28
 804d190:	2400      	movs	r4, #0
{
 804d192:	4605      	mov	r5, r0
 804d194:	4689      	mov	r9, r1
 804d196:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804d198:	497f      	ldr	r1, [pc, #508]	; (804d398 <RegionAU915LinkAdrReq+0x210>)
{
 804d19a:	9301      	str	r3, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804d19c:	2206      	movs	r2, #6
 804d19e:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804d1a0:	9407      	str	r4, [sp, #28]
 804d1a2:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804d1a6:	f000 fab4 	bl	804d712 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 804d1aa:	46a2      	mov	sl, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 804d1ac:	7a2b      	ldrb	r3, [r5, #8]
 804d1ae:	42a3      	cmp	r3, r4
 804d1b0:	d905      	bls.n	804d1be <RegionAU915LinkAdrReq+0x36>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 804d1b2:	6868      	ldr	r0, [r5, #4]
 804d1b4:	a905      	add	r1, sp, #20
 804d1b6:	4420      	add	r0, r4
 804d1b8:	f000 faf5 	bl	804d7a6 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 804d1bc:	b968      	cbnz	r0, 804d1da <RegionAU915LinkAdrReq+0x52>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 804d1be:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 804d1c2:	2b05      	cmp	r3, #5
 804d1c4:	dc69      	bgt.n	804d29a <RegionAU915LinkAdrReq+0x112>
 804d1c6:	2204      	movs	r2, #4
 804d1c8:	2100      	movs	r1, #0
 804d1ca:	4630      	mov	r0, r6
 804d1cc:	f000 fa81 	bl	804d6d2 <RegionCommonCountChannels>
 804d1d0:	2801      	cmp	r0, #1
 804d1d2:	d862      	bhi.n	804d29a <RegionAU915LinkAdrReq+0x112>
    {
        status &= 0xFE; // Channel mask KO
 804d1d4:	f04f 0a06 	mov.w	sl, #6
 804d1d8:	e061      	b.n	804d29e <RegionAU915LinkAdrReq+0x116>
        if( linkAdrParams.ChMaskCtrl == 6 )
 804d1da:	f89d 2017 	ldrb.w	r2, [sp, #23]
 804d1de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        bytesProcessed += nextIndex;
 804d1e2:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 804d1e4:	2a06      	cmp	r2, #6
        bytesProcessed += nextIndex;
 804d1e6:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 804d1e8:	d107      	bne.n	804d1fa <RegionAU915LinkAdrReq+0x72>
            channelsMask[0] = 0xFFFF;
 804d1ea:	f04f 32ff 	mov.w	r2, #4294967295
            channelsMask[1] = 0xFFFF;
 804d1ee:	e9cd 2207 	strd	r2, r2, [sp, #28]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 804d1f2:	b2db      	uxtb	r3, r3
 804d1f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 804d1f8:	e7d8      	b.n	804d1ac <RegionAU915LinkAdrReq+0x24>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 804d1fa:	2a07      	cmp	r2, #7
 804d1fc:	d102      	bne.n	804d204 <RegionAU915LinkAdrReq+0x7c>
            channelsMask[1] = 0x0000;
 804d1fe:	e9cd aa07 	strd	sl, sl, [sp, #28]
 804d202:	e7f6      	b.n	804d1f2 <RegionAU915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 804d204:	2a05      	cmp	r2, #5
 804d206:	d142      	bne.n	804d28e <RegionAU915LinkAdrReq+0x106>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804d208:	b2db      	uxtb	r3, r3
 804d20a:	2000      	movs	r0, #0
 804d20c:	9300      	str	r3, [sp, #0]
            uint8_t cntChannelMask = 0;
 804d20e:	4602      	mov	r2, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804d210:	2301      	movs	r3, #1
 804d212:	fa03 fe00 	lsl.w	lr, r3, r0
 804d216:	ea00 0b03 	and.w	fp, r0, r3
 804d21a:	9f00      	ldr	r7, [sp, #0]
 804d21c:	ab12      	add	r3, sp, #72	; 0x48
 804d21e:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 804d222:	ea17 0f0e 	tst.w	r7, lr
 804d226:	fa0f f18e 	sxth.w	r1, lr
 804d22a:	f83c 3c2c 	ldrh.w	r3, [ip, #-44]
 804d22e:	d01b      	beq.n	804d268 <RegionAU915LinkAdrReq+0xe0>
                    if( ( i % 2 ) == 0 )
 804d230:	f1bb 0f00 	cmp.w	fp, #0
 804d234:	d10c      	bne.n	804d250 <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 804d236:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 804d23a:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804d23e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d242:	4319      	orrs	r1, r3
                        channelsMask[4] &= ~( bitMask << i );
 804d244:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 804d248:	3001      	adds	r0, #1
            for( uint8_t i = 0; i <= 7; i++ )
 804d24a:	2808      	cmp	r0, #8
 804d24c:	d1e0      	bne.n	804d210 <RegionAU915LinkAdrReq+0x88>
 804d24e:	e7ad      	b.n	804d1ac <RegionAU915LinkAdrReq+0x24>
                        channelsMask[cntChannelMask] |= 0xFF00;
 804d250:	f063 03ff 	orn	r3, r3, #255	; 0xff
 804d254:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804d258:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d25c:	4319      	orrs	r1, r3
                        cntChannelMask++;
 804d25e:	3201      	adds	r2, #1
                        channelsMask[4] &= ~( bitMask << i );
 804d260:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                        cntChannelMask++;
 804d264:	b2d2      	uxtb	r2, r2
 804d266:	e7ef      	b.n	804d248 <RegionAU915LinkAdrReq+0xc0>
 804d268:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 804d26a:	f1bb 0f00 	cmp.w	fp, #0
 804d26e:	d107      	bne.n	804d280 <RegionAU915LinkAdrReq+0xf8>
                        channelsMask[cntChannelMask] &= 0xFF00;
 804d270:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804d274:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804d278:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d27c:	4019      	ands	r1, r3
 804d27e:	e7e1      	b.n	804d244 <RegionAU915LinkAdrReq+0xbc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 804d280:	b2db      	uxtb	r3, r3
 804d282:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804d286:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d28a:	4019      	ands	r1, r3
 804d28c:	e7e7      	b.n	804d25e <RegionAU915LinkAdrReq+0xd6>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 804d28e:	a912      	add	r1, sp, #72	; 0x48
 804d290:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 804d294:	f822 3c2c 	strh.w	r3, [r2, #-44]
 804d298:	e788      	b.n	804d1ac <RegionAU915LinkAdrReq+0x24>
    uint8_t bytesProcessed = 0;
 804d29a:	f04f 0a07 	mov.w	sl, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 804d29e:	2302      	movs	r3, #2
 804d2a0:	f88d 300c 	strb.w	r3, [sp, #12]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804d2a4:	a803      	add	r0, sp, #12
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 804d2a6:	7a6b      	ldrb	r3, [r5, #9]
 804d2a8:	f88d 300e 	strb.w	r3, [sp, #14]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804d2ac:	f7ff fc98 	bl	804cbe0 <RegionAU915GetPhyParam>

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 804d2b0:	7aab      	ldrb	r3, [r5, #10]
 804d2b2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 804d2b6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804d2ba:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 804d2be:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804d2c2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 804d2c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d2ca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 804d2ce:	7aeb      	ldrb	r3, [r5, #11]
 804d2d0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 804d2d4:	7b2b      	ldrb	r3, [r5, #12]
 804d2d6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 804d2da:	7b6b      	ldrb	r3, [r5, #13]
 804d2dc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 804d2e0:	2348      	movs	r3, #72	; 0x48
 804d2e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 804d2e6:	230d      	movs	r3, #13
 804d2e8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 804d2ec:	230e      	movs	r3, #14
 804d2ee:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804d2f2:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 804d2f4:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 804d2f8:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804d2fc:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804d2fe:	f8df a09c 	ldr.w	sl, [pc, #156]	; 804d39c <RegionAU915LinkAdrReq+0x214>
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 804d302:	960e      	str	r6, [sp, #56]	; 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d304:	ab05      	add	r3, sp, #20
 804d306:	f10d 0216 	add.w	r2, sp, #22
 804d30a:	f10d 0115 	add.w	r1, sp, #21
 804d30e:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804d310:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d314:	f000 fa61 	bl	804d7da <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 804d318:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d31a:	4605      	mov	r5, r0
    if( status == 0x07 )
 804d31c:	d129      	bne.n	804d372 <RegionAU915LinkAdrReq+0x1ea>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 804d31e:	2206      	movs	r2, #6
 804d320:	4631      	mov	r1, r6
 804d322:	f50a 705c 	add.w	r0, sl, #880	; 0x370
 804d326:	f000 f9f4 	bl	804d712 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 804d32a:	f8ba 337c 	ldrh.w	r3, [sl, #892]	; 0x37c
 804d32e:	f8ba 2370 	ldrh.w	r2, [sl, #880]	; 0x370
 804d332:	4013      	ands	r3, r2
 804d334:	f8aa 337c 	strh.w	r3, [sl, #892]	; 0x37c
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 804d338:	f8ba 2372 	ldrh.w	r2, [sl, #882]	; 0x372
 804d33c:	f8ba 337e 	ldrh.w	r3, [sl, #894]	; 0x37e
 804d340:	4013      	ands	r3, r2
 804d342:	f8aa 337e 	strh.w	r3, [sl, #894]	; 0x37e
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 804d346:	f8ba 2374 	ldrh.w	r2, [sl, #884]	; 0x374
 804d34a:	f8ba 3380 	ldrh.w	r3, [sl, #896]	; 0x380
 804d34e:	4013      	ands	r3, r2
 804d350:	f8aa 3380 	strh.w	r3, [sl, #896]	; 0x380
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 804d354:	f8ba 2376 	ldrh.w	r2, [sl, #886]	; 0x376
 804d358:	f8ba 3382 	ldrh.w	r3, [sl, #898]	; 0x382
 804d35c:	4013      	ands	r3, r2
 804d35e:	f8aa 3382 	strh.w	r3, [sl, #898]	; 0x382
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804d362:	f8ba 3378 	ldrh.w	r3, [sl, #888]	; 0x378
 804d366:	f8aa 3384 	strh.w	r3, [sl, #900]	; 0x384
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 804d36a:	f8ba 337a 	ldrh.w	r3, [sl, #890]	; 0x37a
 804d36e:	f8aa 3386 	strh.w	r3, [sl, #902]	; 0x386
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 804d372:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804d376:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
 804d37a:	9a01      	ldr	r2, [sp, #4]
    *txPowOut = linkAdrParams.TxPower;
 804d37c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804d380:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 804d384:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d388:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 804d38a:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 804d38c:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 804d38e:	701c      	strb	r4, [r3, #0]
}
 804d390:	b013      	add	sp, #76	; 0x4c
 804d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d396:	bf00      	nop
 804d398:	20003508 	.word	0x20003508
 804d39c:	20003198 	.word	0x20003198

0804d3a0 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 804d3a0:	b538      	push	{r3, r4, r5, lr}
 804d3a2:	4605      	mov	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 804d3a4:	6840      	ldr	r0, [r0, #4]
 804d3a6:	f7ff fbfd 	bl	804cba4 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d3aa:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 804d3ac:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d3ae:	f04f 0108 	mov.w	r1, #8
 804d3b2:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 804d3b6:	bf14      	ite	ne
 804d3b8:	2407      	movne	r4, #7
 804d3ba:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d3bc:	f000 f969 	bl	804d692 <RegionCommonValueInRange>
 804d3c0:	b908      	cbnz	r0, 804d3c6 <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 804d3c2:	f004 0405 	and.w	r4, r4, #5
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 804d3c6:	f995 3000 	ldrsb.w	r3, [r5]
 804d3ca:	2b07      	cmp	r3, #7
 804d3cc:	d001      	beq.n	804d3d2 <RegionAU915RxParamSetupReq+0x32>
 804d3ce:	2b0d      	cmp	r3, #13
 804d3d0:	dd01      	ble.n	804d3d6 <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 804d3d2:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 804d3d6:	2206      	movs	r2, #6
 804d3d8:	2100      	movs	r1, #0
 804d3da:	f995 0001 	ldrsb.w	r0, [r5, #1]
 804d3de:	f000 f958 	bl	804d692 <RegionCommonValueInRange>
 804d3e2:	b908      	cbnz	r0, 804d3e8 <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 804d3e4:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 804d3e8:	4620      	mov	r0, r4
 804d3ea:	bd38      	pop	{r3, r4, r5, pc}

0804d3ec <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 804d3ec:	2000      	movs	r0, #0
 804d3ee:	4770      	bx	lr

0804d3f0 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 804d3f0:	2000      	movs	r0, #0
 804d3f2:	4770      	bx	lr

0804d3f4 <RegionAU915DlChannelReq>:
 804d3f4:	2000      	movs	r0, #0
 804d3f6:	4770      	bx	lr

0804d3f8 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 804d3f8:	4a07      	ldr	r2, [pc, #28]	; (804d418 <RegionAU915AlternateDr+0x20>)
 804d3fa:	23ff      	movs	r3, #255	; 0xff
 804d3fc:	f8a2 3378 	strh.w	r3, [r2, #888]	; 0x378

    if( ( trialsCount & 0x01 ) == 0x01 )
 804d400:	f892 3394 	ldrb.w	r3, [r2, #916]	; 0x394
 804d404:	f013 0f01 	tst.w	r3, #1
    }
    else
    {
        currentDr = DR_2;
    }
    trialsCount++;
 804d408:	f103 0301 	add.w	r3, r3, #1
 804d40c:	f882 3394 	strb.w	r3, [r2, #916]	; 0x394
    return currentDr;
}
 804d410:	bf14      	ite	ne
 804d412:	2006      	movne	r0, #6
 804d414:	2002      	moveq	r0, #2
 804d416:	4770      	bx	lr
 804d418:	20003198 	.word	0x20003198

0804d41c <RegionAU915CalcBackOff>:

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 804d41c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 804d41e:	4b0d      	ldr	r3, [pc, #52]	; (804d454 <RegionAU915CalcBackOff+0x38>)
 804d420:	9301      	str	r3, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 804d422:	f503 7358 	add.w	r3, r3, #864	; 0x360
 804d426:	9302      	str	r3, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 804d428:	7843      	ldrb	r3, [r0, #1]
 804d42a:	f88d 300c 	strb.w	r3, [sp, #12]
    calcBackOffParams.Joined = calcBackOff->Joined;
 804d42e:	7803      	ldrb	r3, [r0, #0]
 804d430:	f88d 300d 	strb.w	r3, [sp, #13]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 804d434:	7883      	ldrb	r3, [r0, #2]
 804d436:	f88d 300e 	strb.w	r3, [sp, #14]
    calcBackOffParams.Channel = calcBackOff->Channel;
 804d43a:	78c3      	ldrb	r3, [r0, #3]
 804d43c:	f88d 300f 	strb.w	r3, [sp, #15]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 804d440:	6843      	ldr	r3, [r0, #4]
 804d442:	9304      	str	r3, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 804d444:	6883      	ldr	r3, [r0, #8]
 804d446:	9305      	str	r3, [sp, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
 804d448:	a801      	add	r0, sp, #4
 804d44a:	f000 fa9d 	bl	804d988 <RegionCommonCalcBackOff>
}
 804d44e:	b007      	add	sp, #28
 804d450:	f85d fb04 	ldr.w	pc, [sp], #4
 804d454:	20003198 	.word	0x20003198

0804d458 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d45c:	b099      	sub	sp, #100	; 0x64
 804d45e:	4605      	mov	r5, r0
 804d460:	9104      	str	r1, [sp, #16]
 804d462:	4693      	mov	fp, r2
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804d464:	2100      	movs	r1, #0
 804d466:	2248      	movs	r2, #72	; 0x48
 804d468:	a806      	add	r0, sp, #24
{
 804d46a:	461e      	mov	r6, r3
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804d46c:	f003 fbb5 	bl	8050bda <memset>
    TimerTime_t nextTxDelay = 0;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 804d470:	2204      	movs	r2, #4
 804d472:	2100      	movs	r1, #0
 804d474:	4846      	ldr	r0, [pc, #280]	; (804d590 <RegionAU915NextChannel+0x138>)
 804d476:	f8df 9120 	ldr.w	r9, [pc, #288]	; 804d598 <RegionAU915NextChannel+0x140>
 804d47a:	f000 f92a 	bl	804d6d2 <RegionCommonCountChannels>
 804d47e:	b930      	cbnz	r0, 804d48e <RegionAU915NextChannel+0x36>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 804d480:	f509 715c 	add.w	r1, r9, #880	; 0x370
 804d484:	2204      	movs	r2, #4
 804d486:	f101 000c 	add.w	r0, r1, #12
 804d48a:	f000 f942 	bl	804d712 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 804d48e:	f995 3008 	ldrsb.w	r3, [r5, #8]
 804d492:	2b05      	cmp	r3, #5
 804d494:	dd06      	ble.n	804d4a4 <RegionAU915NextChannel+0x4c>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 804d496:	f899 3384 	ldrb.w	r3, [r9, #900]	; 0x384
 804d49a:	b91b      	cbnz	r3, 804d4a4 <RegionAU915NextChannel+0x4c>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804d49c:	f8b9 3378 	ldrh.w	r3, [r9, #888]	; 0x378
 804d4a0:	f8a9 3384 	strh.w	r3, [r9, #900]	; 0x384
        }
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 804d4a4:	6868      	ldr	r0, [r5, #4]
 804d4a6:	f001 f8fb 	bl	804e6a0 <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 804d4aa:	686b      	ldr	r3, [r5, #4]
 804d4ac:	b113      	cbz	r3, 804d4b4 <RegionAU915NextChannel+0x5c>
 804d4ae:	682b      	ldr	r3, [r5, #0]
 804d4b0:	4283      	cmp	r3, r0
 804d4b2:	d860      	bhi.n	804d576 <RegionAU915NextChannel+0x11e>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 804d4b4:	2400      	movs	r4, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d4b6:	2301      	movs	r3, #1
 804d4b8:	7aa9      	ldrb	r1, [r5, #10]
 804d4ba:	7a68      	ldrb	r0, [r5, #9]
        *aggregatedTimeOff = 0;
 804d4bc:	6034      	str	r4, [r6, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d4be:	4a35      	ldr	r2, [pc, #212]	; (804d594 <RegionAU915NextChannel+0x13c>)
 804d4c0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 804d590 <RegionAU915NextChannel+0x138>
 804d4c4:	f000 f939 	bl	804d73a <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804d4c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d4cc:	9001      	str	r0, [sp, #4]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804d4ce:	9302      	str	r3, [sp, #8]
 804d4d0:	f5aa 785f 	sub.w	r8, sl, #892	; 0x37c
    uint8_t delayTransmission = 0;
 804d4d4:	4627      	mov	r7, r4
    uint8_t nbEnabledChannels = 0;
 804d4d6:	4625      	mov	r5, r4
 804d4d8:	b2e3      	uxtb	r3, r4
 804d4da:	9303      	str	r3, [sp, #12]
{
 804d4dc:	2600      	movs	r6, #0
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 804d4de:	f8ba 3000 	ldrh.w	r3, [sl]
 804d4e2:	4133      	asrs	r3, r6
 804d4e4:	07db      	lsls	r3, r3, #31
 804d4e6:	d51e      	bpl.n	804d526 <RegionAU915NextChannel+0xce>
 804d4e8:	230c      	movs	r3, #12
 804d4ea:	19a2      	adds	r2, r4, r6
 804d4ec:	fb03 9202 	mla	r2, r3, r2, r9
 804d4f0:	4373      	muls	r3, r6
                if( channels[i + j].Frequency == 0 )
 804d4f2:	9305      	str	r3, [sp, #20]
 804d4f4:	f858 1003 	ldr.w	r1, [r8, r3]
 804d4f8:	b1a9      	cbz	r1, 804d526 <RegionAU915NextChannel+0xce>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804d4fa:	7a11      	ldrb	r1, [r2, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804d4fc:	9802      	ldr	r0, [sp, #8]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804d4fe:	f341 1203 	sbfx	r2, r1, #4, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804d502:	f341 0103 	sbfx	r1, r1, #0, #4
 804d506:	b252      	sxtb	r2, r2
 804d508:	b249      	sxtb	r1, r1
 804d50a:	f000 f8c2 	bl	804d692 <RegionCommonValueInRange>
 804d50e:	b150      	cbz	r0, 804d526 <RegionAU915NextChannel+0xce>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 804d510:	9b05      	ldr	r3, [sp, #20]
 804d512:	4a21      	ldr	r2, [pc, #132]	; (804d598 <RegionAU915NextChannel+0x140>)
 804d514:	4443      	add	r3, r8
 804d516:	7a5b      	ldrb	r3, [r3, #9]
 804d518:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 804d51c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 804d520:	b303      	cbz	r3, 804d564 <RegionAU915NextChannel+0x10c>
                    delayTransmission++;
 804d522:	3701      	adds	r7, #1
 804d524:	b2ff      	uxtb	r7, r7
 804d526:	3601      	adds	r6, #1
        for( uint8_t j = 0; j < 16; j++ )
 804d528:	2e10      	cmp	r6, #16
 804d52a:	d1d8      	bne.n	804d4de <RegionAU915NextChannel+0x86>
 804d52c:	3410      	adds	r4, #16
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 804d52e:	2c50      	cmp	r4, #80	; 0x50
 804d530:	f10a 0a02 	add.w	sl, sl, #2
 804d534:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 804d538:	d1ce      	bne.n	804d4d8 <RegionAU915NextChannel+0x80>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 804d53a:	b31d      	cbz	r5, 804d584 <RegionAU915NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 804d53c:	1e69      	subs	r1, r5, #1
 804d53e:	2000      	movs	r0, #0
 804d540:	f001 f950 	bl	804e7e4 <randr>
 804d544:	ab18      	add	r3, sp, #96	; 0x60
 804d546:	4418      	add	r0, r3
 804d548:	9b04      	ldr	r3, [sp, #16]
 804d54a:	f810 1c48 	ldrb.w	r1, [r0, #-72]
 804d54e:	7019      	strb	r1, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 804d550:	2240      	movs	r2, #64	; 0x40
 804d552:	480f      	ldr	r0, [pc, #60]	; (804d590 <RegionAU915NextChannel+0x138>)
 804d554:	f000 f8a6 	bl	804d6a4 <RegionCommonChanDisable>

        *time = 0;
 804d558:	2000      	movs	r0, #0
 804d55a:	f8cb 0000 	str.w	r0, [fp]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 804d55e:	b019      	add	sp, #100	; 0x64
 804d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 804d564:	aa18      	add	r2, sp, #96	; 0x60
 804d566:	1c6b      	adds	r3, r5, #1
 804d568:	4415      	add	r5, r2
 804d56a:	9a03      	ldr	r2, [sp, #12]
 804d56c:	4432      	add	r2, r6
 804d56e:	f805 2c48 	strb.w	r2, [r5, #-72]
 804d572:	b2dd      	uxtb	r5, r3
 804d574:	e7d7      	b.n	804d526 <RegionAU915NextChannel+0xce>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 804d576:	1a1b      	subs	r3, r3, r0
 804d578:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 804d57a:	9b01      	ldr	r3, [sp, #4]
 804d57c:	f8cb 3000 	str.w	r3, [fp]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 804d580:	200b      	movs	r0, #11
 804d582:	e7ec      	b.n	804d55e <RegionAU915NextChannel+0x106>
        if( delayTx > 0 )
 804d584:	2f00      	cmp	r7, #0
 804d586:	d1f8      	bne.n	804d57a <RegionAU915NextChannel+0x122>
        *time = 0;
 804d588:	f8cb 7000 	str.w	r7, [fp]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 804d58c:	200c      	movs	r0, #12
 804d58e:	e7e6      	b.n	804d55e <RegionAU915NextChannel+0x106>
 804d590:	20003514 	.word	0x20003514
 804d594:	200034f8 	.word	0x200034f8
 804d598:	20003198 	.word	0x20003198

0804d59c <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 804d59c:	b570      	push	{r4, r5, r6, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d59e:	7801      	ldrb	r1, [r0, #0]
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 804d5a0:	4b0e      	ldr	r3, [pc, #56]	; (804d5dc <RegionAU915SetContinuousWave+0x40>)
 804d5a2:	220c      	movs	r2, #12
 804d5a4:	434a      	muls	r2, r1
 804d5a6:	1899      	adds	r1, r3, r2
 804d5a8:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d5aa:	7a4a      	ldrb	r2, [r1, #9]
{
 804d5ac:	4604      	mov	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d5ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804d5b2:	edd4 0a02 	vldr	s1, [r4, #8]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804d5b6:	f993 0362 	ldrsb.w	r0, [r3, #866]	; 0x362
 804d5ba:	f994 3002 	ldrsb.w	r3, [r4, #2]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804d5be:	ed94 0a01 	vldr	s0, [r4, #4]
 804d5c2:	4298      	cmp	r0, r3
 804d5c4:	bfb8      	it	lt
 804d5c6:	4618      	movlt	r0, r3
 804d5c8:	f000 f9c6 	bl	804d958 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804d5cc:	4b04      	ldr	r3, [pc, #16]	; (804d5e0 <RegionAU915SetContinuousWave+0x44>)
 804d5ce:	89a2      	ldrh	r2, [r4, #12]
 804d5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804d5d2:	4601      	mov	r1, r0
 804d5d4:	4628      	mov	r0, r5
}
 804d5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804d5da:	4718      	bx	r3
 804d5dc:	20003198 	.word	0x20003198
 804d5e0:	08053dd0 	.word	0x08053dd0

0804d5e4 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 804d5e4:	b510      	push	{r4, lr}
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 804d5e6:	4c07      	ldr	r4, [pc, #28]	; (804d604 <RegionAU915ApplyDrOffset+0x20>)
 804d5e8:	2306      	movs	r3, #6
 804d5ea:	fb03 4101 	mla	r1, r3, r1, r4
 804d5ee:	4411      	add	r1, r2
 804d5f0:	f991 3088 	ldrsb.w	r3, [r1, #136]	; 0x88

    if( datarate < 0 )
 804d5f4:	2b00      	cmp	r3, #0
 804d5f6:	da03      	bge.n	804d600 <RegionAU915ApplyDrOffset+0x1c>
    {
        if( downlinkDwellTime == 0 )
 804d5f8:	2800      	cmp	r0, #0
        {
            datarate = AU915_TX_MIN_DATARATE;
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 804d5fa:	bf0c      	ite	eq
 804d5fc:	2300      	moveq	r3, #0
 804d5fe:	2302      	movne	r3, #2
        }
    }
    return datarate;
}
 804d600:	b2d8      	uxtb	r0, r3
 804d602:	bd10      	pop	{r4, pc}
 804d604:	08054188 	.word	0x08054188

0804d608 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 804d608:	4b06      	ldr	r3, [pc, #24]	; (804d624 <RegionCommonGetJoinDc+0x1c>)
 804d60a:	4298      	cmp	r0, r3
 804d60c:	d908      	bls.n	804d620 <RegionCommonGetJoinDc+0x18>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 804d60e:	4a06      	ldr	r2, [pc, #24]	; (804d628 <RegionCommonGetJoinDc+0x20>)
 804d610:	f242 7310 	movw	r3, #10000	; 0x2710
 804d614:	4290      	cmp	r0, r2
 804d616:	bf8c      	ite	hi
 804d618:	4618      	movhi	r0, r3
 804d61a:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
 804d61e:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 804d620:	2064      	movs	r0, #100	; 0x64
    }
    return dutyCycle;
}
 804d622:	4770      	bx	lr
 804d624:	0036ee7f 	.word	0x0036ee7f
 804d628:	025c3f7f 	.word	0x025c3f7f

0804d62c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 804d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 804d630:	429a      	cmp	r2, r3
{
 804d632:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 804d634:	db03      	blt.n	804d63e <RegionCommonChanVerifyDr+0x12>
 804d636:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 804d63a:	429a      	cmp	r2, r3
 804d63c:	dd23      	ble.n	804d686 <RegionCommonChanVerifyDr+0x5a>
        return false;
 804d63e:	2000      	movs	r0, #0
}
 804d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 804d644:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 804d648:	2400      	movs	r4, #0
 804d64a:	fa48 f504 	asr.w	r5, r8, r4
 804d64e:	07ed      	lsls	r5, r5, #31
 804d650:	d50f      	bpl.n	804d672 <RegionCommonChanVerifyDr+0x46>
 804d652:	1935      	adds	r5, r6, r4
 804d654:	fb0e 7505 	mla	r5, lr, r5, r7
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804d658:	f895 c008 	ldrb.w	ip, [r5, #8]
 804d65c:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 804d660:	f00c 0c0f 	and.w	ip, ip, #15
 804d664:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804d666:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 804d668:	db03      	blt.n	804d672 <RegionCommonChanVerifyDr+0x46>
 804d66a:	f005 050f 	and.w	r5, r5, #15
 804d66e:	42aa      	cmp	r2, r5
 804d670:	dd0d      	ble.n	804d68e <RegionCommonChanVerifyDr+0x62>
 804d672:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 804d674:	2c10      	cmp	r4, #16
 804d676:	d1e8      	bne.n	804d64a <RegionCommonChanVerifyDr+0x1e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 804d678:	3301      	adds	r3, #1
 804d67a:	b2db      	uxtb	r3, r3
 804d67c:	011e      	lsls	r6, r3, #4
 804d67e:	b2f6      	uxtb	r6, r6
 804d680:	42b0      	cmp	r0, r6
 804d682:	d8df      	bhi.n	804d644 <RegionCommonChanVerifyDr+0x18>
 804d684:	e7db      	b.n	804d63e <RegionCommonChanVerifyDr+0x12>
 804d686:	2300      	movs	r3, #0
 804d688:	f04f 0e0c 	mov.w	lr, #12
 804d68c:	e7f6      	b.n	804d67c <RegionCommonChanVerifyDr+0x50>
                    return true;
 804d68e:	2001      	movs	r0, #1
 804d690:	e7d6      	b.n	804d640 <RegionCommonChanVerifyDr+0x14>

0804d692 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 804d692:	4288      	cmp	r0, r1
 804d694:	db04      	blt.n	804d6a0 <RegionCommonValueInRange+0xe>
    {
        return 1;
 804d696:	4290      	cmp	r0, r2
 804d698:	bfcc      	ite	gt
 804d69a:	2000      	movgt	r0, #0
 804d69c:	2001      	movle	r0, #1
 804d69e:	4770      	bx	lr
    }
    return 0;
 804d6a0:	2000      	movs	r0, #0
}
 804d6a2:	4770      	bx	lr

0804d6a4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 804d6a4:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804d6a6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
{
 804d6aa:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804d6ac:	d80f      	bhi.n	804d6ce <RegionCommonChanDisable+0x2a>
 804d6ae:	4291      	cmp	r1, r2
 804d6b0:	d20d      	bcs.n	804d6ce <RegionCommonChanDisable+0x2a>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 804d6b2:	b21a      	sxth	r2, r3
 804d6b4:	f001 010f 	and.w	r1, r1, #15
 804d6b8:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 804d6bc:	2301      	movs	r3, #1
 804d6be:	fa03 f101 	lsl.w	r1, r3, r1
 804d6c2:	ea24 0101 	bic.w	r1, r4, r1
 804d6c6:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 804d6ca:	4618      	mov	r0, r3
}
 804d6cc:	bd10      	pop	{r4, pc}
        return false;
 804d6ce:	2000      	movs	r0, #0
 804d6d0:	e7fc      	b.n	804d6cc <RegionCommonChanDisable+0x28>

0804d6d2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 804d6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 804d6d4:	b140      	cbz	r0, 804d6e8 <RegionCommonCountChannels+0x16>
 804d6d6:	2300      	movs	r3, #0
 804d6d8:	eb00 0641 	add.w	r6, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804d6dc:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 804d6de:	4618      	mov	r0, r3
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 804d6e0:	18cc      	adds	r4, r1, r3
 804d6e2:	b2e4      	uxtb	r4, r4
 804d6e4:	42a2      	cmp	r2, r4
 804d6e6:	d800      	bhi.n	804d6ea <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 804d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 804d6ea:	2500      	movs	r5, #0
 804d6ec:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    uint8_t nbActiveBits = 0;
 804d6f0:	462c      	mov	r4, r5
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804d6f2:	fa07 fe05 	lsl.w	lr, r7, r5
 804d6f6:	ea3e 0e0c 	bics.w	lr, lr, ip
            nbActiveBits++;
 804d6fa:	bf08      	it	eq
 804d6fc:	3401      	addeq	r4, #1
 804d6fe:	f105 0501 	add.w	r5, r5, #1
 804d702:	bf08      	it	eq
 804d704:	b2e4      	uxtbeq	r4, r4
    for( uint8_t j = 0; j < nbBits; j++ )
 804d706:	2d10      	cmp	r5, #16
 804d708:	d1f3      	bne.n	804d6f2 <RegionCommonCountChannels+0x20>
        nbChannels += CountChannels( channelsMask[i], 16 );
 804d70a:	4420      	add	r0, r4
 804d70c:	b2c0      	uxtb	r0, r0
 804d70e:	3301      	adds	r3, #1
 804d710:	e7e6      	b.n	804d6e0 <RegionCommonCountChannels+0xe>

0804d712 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 804d712:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 804d714:	b100      	cbz	r0, 804d718 <RegionCommonChanMaskCopy+0x6>
 804d716:	b949      	cbnz	r1, 804d72c <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 804d718:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 804d71a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 804d71e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 804d722:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < len; i++ )
 804d724:	b2dc      	uxtb	r4, r3
 804d726:	42a2      	cmp	r2, r4
 804d728:	d8f7      	bhi.n	804d71a <RegionCommonChanMaskCopy+0x8>
 804d72a:	e7f5      	b.n	804d718 <RegionCommonChanMaskCopy+0x6>
 804d72c:	2300      	movs	r3, #0
 804d72e:	e7f9      	b.n	804d724 <RegionCommonChanMaskCopy+0x12>

0804d730 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 804d730:	608a      	str	r2, [r1, #8]
    if( joined == true )
 804d732:	b100      	cbz	r0, 804d736 <RegionCommonSetBandTxDone+0x6>
 804d734:	4770      	bx	lr
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
 804d736:	604a      	str	r2, [r1, #4]
    }
}
 804d738:	4770      	bx	lr

0804d73a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 804d73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d73e:	4681      	mov	r9, r0
 804d740:	460e      	mov	r6, r1
 804d742:	4614      	mov	r4, r2
 804d744:	eb02 1803 	add.w	r8, r2, r3, lsl #4
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 804d748:	f04f 35ff 	mov.w	r5, #4294967295
            if( dutyCycle == true )
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
                if( bands[i].TimeOff <= elapsed )
                {
                    bands[i].TimeOff = 0;
 804d74c:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < nbBands; i++ )
 804d74e:	45a0      	cmp	r8, r4
 804d750:	d105      	bne.n	804d75e <RegionCommonUpdateBandTimeOff+0x24>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 804d752:	1c6b      	adds	r3, r5, #1
}
 804d754:	bf14      	ite	ne
 804d756:	4628      	movne	r0, r5
 804d758:	2000      	moveq	r0, #0
 804d75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( joined == false )
 804d75e:	f1b9 0f00 	cmp.w	r9, #0
 804d762:	d118      	bne.n	804d796 <RegionCommonUpdateBandTimeOff+0x5c>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 804d764:	6860      	ldr	r0, [r4, #4]
 804d766:	f000 ff9b 	bl	804e6a0 <TimerGetElapsedTime>
 804d76a:	4682      	mov	sl, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804d76c:	68a0      	ldr	r0, [r4, #8]
 804d76e:	f000 ff97 	bl	804e6a0 <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 804d772:	2e00      	cmp	r6, #0
 804d774:	bf08      	it	eq
 804d776:	2000      	moveq	r0, #0
 804d778:	4550      	cmp	r0, sl
 804d77a:	bf38      	it	cc
 804d77c:	4650      	movcc	r0, sl
                if( bands[i].TimeOff <= elapsed )
 804d77e:	68e3      	ldr	r3, [r4, #12]
 804d780:	4283      	cmp	r3, r0
                    bands[i].TimeOff = 0;
 804d782:	bf98      	it	ls
 804d784:	60e7      	strls	r7, [r4, #12]
                if( bands[i].TimeOff != 0 )
 804d786:	68e3      	ldr	r3, [r4, #12]
 804d788:	b11b      	cbz	r3, 804d792 <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 804d78a:	1a1b      	subs	r3, r3, r0
 804d78c:	429d      	cmp	r5, r3
 804d78e:	bf28      	it	cs
 804d790:	461d      	movcs	r5, r3
 804d792:	3410      	adds	r4, #16
 804d794:	e7db      	b.n	804d74e <RegionCommonUpdateBandTimeOff+0x14>
            if( dutyCycle == true )
 804d796:	b11e      	cbz	r6, 804d7a0 <RegionCommonUpdateBandTimeOff+0x66>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804d798:	68a0      	ldr	r0, [r4, #8]
 804d79a:	f000 ff81 	bl	804e6a0 <TimerGetElapsedTime>
 804d79e:	e7ee      	b.n	804d77e <RegionCommonUpdateBandTimeOff+0x44>
                bands[i].TimeOff = 0;
 804d7a0:	60e6      	str	r6, [r4, #12]
                nextTxDelay = 0;
 804d7a2:	4635      	mov	r5, r6
 804d7a4:	e7f5      	b.n	804d792 <RegionCommonUpdateBandTimeOff+0x58>

0804d7a6 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 804d7a6:	7803      	ldrb	r3, [r0, #0]
 804d7a8:	2b03      	cmp	r3, #3
 804d7aa:	d114      	bne.n	804d7d6 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 804d7ac:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804d7ae:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804d7b2:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804d7b4:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804d7b6:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 804d7b8:	7883      	ldrb	r3, [r0, #2]
 804d7ba:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 804d7bc:	78c2      	ldrb	r2, [r0, #3]
 804d7be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804d7c2:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 804d7c4:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804d7c6:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 804d7ca:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804d7ce:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 804d7d0:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 804d7d2:	2005      	movs	r0, #5
 804d7d4:	4770      	bx	lr
    uint8_t retIndex = 0;
 804d7d6:	2000      	movs	r0, #0
    }
    return retIndex;
}
 804d7d8:	4770      	bx	lr

0804d7da <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 804d7da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d7de:	4699      	mov	r9, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 804d7e0:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 804d7e2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 804d7e4:	f990 8006 	ldrsb.w	r8, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 804d7e8:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 804d7ec:	7a06      	ldrb	r6, [r0, #8]
{
 804d7ee:	4604      	mov	r4, r0
 804d7f0:	468b      	mov	fp, r1
 804d7f2:	4692      	mov	sl, r2
    if( verifyParams->AdrEnabled == false )
 804d7f4:	b34b      	cbz	r3, 804d84a <RegionCommonLinkAdrReqVerifyParams+0x70>
    int8_t nbRepetitions = verifyParams->NbRep;
 804d7f6:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 804d7f8:	b1ed      	cbz	r5, 804d836 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 804d7fa:	69a2      	ldr	r2, [r4, #24]
 804d7fc:	9201      	str	r2, [sp, #4]
 804d7fe:	f994 2015 	ldrsb.w	r2, [r4, #21]
 804d802:	9200      	str	r2, [sp, #0]
 804d804:	f994 3014 	ldrsb.w	r3, [r4, #20]
 804d808:	7b20      	ldrb	r0, [r4, #12]
 804d80a:	6921      	ldr	r1, [r4, #16]
 804d80c:	4642      	mov	r2, r8
 804d80e:	f7ff ff0d 	bl	804d62c <RegionCommonChanVerifyDr>
 804d812:	b908      	cbnz	r0, 804d818 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 804d814:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 804d818:	f994 301d 	ldrsb.w	r3, [r4, #29]
 804d81c:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 804d820:	42bb      	cmp	r3, r7
 804d822:	dc19      	bgt.n	804d858 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 804d824:	42ba      	cmp	r2, r7
 804d826:	da01      	bge.n	804d82c <RegionCommonLinkAdrReqVerifyParams+0x52>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 804d828:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 804d82c:	2d07      	cmp	r5, #7
 804d82e:	d102      	bne.n	804d836 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        if( nbRepetitions == 0 )
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 804d830:	2e00      	cmp	r6, #0
 804d832:	bf08      	it	eq
 804d834:	2601      	moveq	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 804d836:	4628      	mov	r0, r5
    *dr = datarate;
 804d838:	f88b 8000 	strb.w	r8, [fp]
    *txPow = txPower;
 804d83c:	f88a 7000 	strb.w	r7, [sl]
    *nbRep = nbRepetitions;
 804d840:	f889 6000 	strb.w	r6, [r9]
}
 804d844:	b003      	add	sp, #12
 804d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 804d84a:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 804d84e:	f990 8009 	ldrsb.w	r8, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 804d852:	f990 700a 	ldrsb.w	r7, [r0, #10]
 804d856:	e7cf      	b.n	804d7f8 <RegionCommonLinkAdrReqVerifyParams+0x1e>
    if( ( value >= min ) && ( value <= max ) )
 804d858:	461f      	mov	r7, r3
 804d85a:	e7e7      	b.n	804d82c <RegionCommonLinkAdrReqVerifyParams+0x52>

0804d85c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d85c:	2301      	movs	r3, #1
{
 804d85e:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d860:	fa03 f000 	lsl.w	r0, r3, r0
{
 804d864:	460e      	mov	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d866:	f7f2 ff95 	bl	8040794 <__aeabi_i2d>
 804d86a:	4604      	mov	r4, r0
 804d86c:	4630      	mov	r0, r6
 804d86e:	460d      	mov	r5, r1
 804d870:	f7f2 ff80 	bl	8040774 <__aeabi_ui2d>
 804d874:	4602      	mov	r2, r0
 804d876:	460b      	mov	r3, r1
 804d878:	4620      	mov	r0, r4
 804d87a:	4629      	mov	r1, r5
 804d87c:	f7f3 f91e 	bl	8040abc <__aeabi_ddiv>
 804d880:	2200      	movs	r2, #0
 804d882:	4b03      	ldr	r3, [pc, #12]	; (804d890 <RegionCommonComputeSymbolTimeLoRa+0x34>)
 804d884:	f7f2 fff0 	bl	8040868 <__aeabi_dmul>
}
 804d888:	ec41 0b10 	vmov	d0, r0, r1
 804d88c:	bd70      	pop	{r4, r5, r6, pc}
 804d88e:	bf00      	nop
 804d890:	408f4000 	.word	0x408f4000

0804d894 <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 804d894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d898:	ec57 6b10 	vmov	r6, r7, d0
 804d89c:	4604      	mov	r4, r0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d89e:	3804      	subs	r0, #4
 804d8a0:	0040      	lsls	r0, r0, #1
{
 804d8a2:	4615      	mov	r5, r2
 804d8a4:	469a      	mov	sl, r3
 804d8a6:	468b      	mov	fp, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d8a8:	f7f2 ff74 	bl	8040794 <__aeabi_i2d>
 804d8ac:	4632      	mov	r2, r6
 804d8ae:	463b      	mov	r3, r7
 804d8b0:	f7f2 ffda 	bl	8040868 <__aeabi_dmul>
 804d8b4:	4680      	mov	r8, r0
 804d8b6:	ea4f 004b 	mov.w	r0, fp, lsl #1
 804d8ba:	4689      	mov	r9, r1
 804d8bc:	f7f2 ff5a 	bl	8040774 <__aeabi_ui2d>
 804d8c0:	4602      	mov	r2, r0
 804d8c2:	460b      	mov	r3, r1
 804d8c4:	4640      	mov	r0, r8
 804d8c6:	4649      	mov	r1, r9
 804d8c8:	f7f2 fe18 	bl	80404fc <__adddf3>
 804d8cc:	4632      	mov	r2, r6
 804d8ce:	463b      	mov	r3, r7
 804d8d0:	f7f3 f8f4 	bl	8040abc <__aeabi_ddiv>
 804d8d4:	ec41 0b10 	vmov	d0, r0, r1
 804d8d8:	f006 f856 	bl	8053988 <ceil>
 804d8dc:	ec51 0b10 	vmov	r0, r1, d0
 804d8e0:	f7f3 fa9a 	bl	8040e18 <__aeabi_d2uiz>
 804d8e4:	4284      	cmp	r4, r0
 804d8e6:	bf38      	it	cc
 804d8e8:	4604      	movcc	r4, r0
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804d8ea:	2200      	movs	r2, #0
 804d8ec:	4b18      	ldr	r3, [pc, #96]	; (804d950 <RegionCommonComputeRxWindowParameters+0xbc>)
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d8ee:	f8ca 4000 	str.w	r4, [sl]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804d8f2:	4630      	mov	r0, r6
 804d8f4:	4639      	mov	r1, r7
 804d8f6:	f7f2 ffb7 	bl	8040868 <__aeabi_dmul>
 804d8fa:	4680      	mov	r8, r0
 804d8fc:	4620      	mov	r0, r4
 804d8fe:	4689      	mov	r9, r1
 804d900:	f7f2 ff38 	bl	8040774 <__aeabi_ui2d>
 804d904:	4632      	mov	r2, r6
 804d906:	463b      	mov	r3, r7
 804d908:	f7f2 ffae 	bl	8040868 <__aeabi_dmul>
 804d90c:	2200      	movs	r2, #0
 804d90e:	4b11      	ldr	r3, [pc, #68]	; (804d954 <RegionCommonComputeRxWindowParameters+0xc0>)
 804d910:	f7f2 ffaa 	bl	8040868 <__aeabi_dmul>
 804d914:	4602      	mov	r2, r0
 804d916:	460b      	mov	r3, r1
 804d918:	4640      	mov	r0, r8
 804d91a:	4649      	mov	r1, r9
 804d91c:	f7f2 fdec 	bl	80404f8 <__aeabi_dsub>
 804d920:	4606      	mov	r6, r0
 804d922:	4628      	mov	r0, r5
 804d924:	460f      	mov	r7, r1
 804d926:	f7f2 ff25 	bl	8040774 <__aeabi_ui2d>
 804d92a:	460b      	mov	r3, r1
 804d92c:	4602      	mov	r2, r0
 804d92e:	4639      	mov	r1, r7
 804d930:	4630      	mov	r0, r6
 804d932:	f7f2 fde1 	bl	80404f8 <__aeabi_dsub>
 804d936:	ec41 0b10 	vmov	d0, r0, r1
 804d93a:	f006 f825 	bl	8053988 <ceil>
 804d93e:	ec51 0b10 	vmov	r0, r1, d0
 804d942:	f7f3 fa41 	bl	8040dc8 <__aeabi_d2iz>
 804d946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804d948:	6018      	str	r0, [r3, #0]
}
 804d94a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d94e:	bf00      	nop
 804d950:	40100000 	.word	0x40100000
 804d954:	3fe00000 	.word	0x3fe00000

0804d958 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804d958:	0040      	lsls	r0, r0, #1
 804d95a:	ee07 0a90 	vmov	s15, r0
 804d95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 804d962:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804d964:	ee30 0a67 	vsub.f32	s0, s0, s15
 804d968:	ee70 7a60 	vsub.f32	s15, s0, s1
 804d96c:	ee17 0a90 	vmov	r0, s15
 804d970:	f7f2 ff22 	bl	80407b8 <__aeabi_f2d>
 804d974:	ec41 0b10 	vmov	d0, r0, r1
 804d978:	f006 f886 	bl	8053a88 <floor>
 804d97c:	ec51 0b10 	vmov	r0, r1, d0
 804d980:	f7f3 fa22 	bl	8040dc8 <__aeabi_d2iz>

    return phyTxPower;
}
 804d984:	b240      	sxtb	r0, r0
 804d986:	bd08      	pop	{r3, pc}

0804d988 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 804d988:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 804d98a:	7ac3      	ldrb	r3, [r0, #11]
 804d98c:	6802      	ldr	r2, [r0, #0]
 804d98e:	7a86      	ldrb	r6, [r0, #10]
 804d990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804d994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 804d998:	6842      	ldr	r2, [r0, #4]
 804d99a:	7a5b      	ldrb	r3, [r3, #9]
 804d99c:	011b      	lsls	r3, r3, #4
 804d99e:	18d5      	adds	r5, r2, r3
 804d9a0:	5ad1      	ldrh	r1, [r2, r3]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 804d9a2:	2300      	movs	r3, #0
 804d9a4:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 804d9a6:	7a43      	ldrb	r3, [r0, #9]
{
 804d9a8:	4604      	mov	r4, r0
    if( calcBackOffParams->Joined == false )
 804d9aa:	b973      	cbnz	r3, 804d9ca <RegionCommonCalcBackOff+0x42>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 804d9ac:	68c0      	ldr	r0, [r0, #12]
 804d9ae:	f7ff fe2b 	bl	804d608 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 804d9b2:	b90e      	cbnz	r6, 804d9b8 <RegionCommonCalcBackOff+0x30>
 804d9b4:	7a23      	ldrb	r3, [r4, #8]
 804d9b6:	b153      	cbz	r3, 804d9ce <RegionCommonCalcBackOff+0x46>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 804d9b8:	4281      	cmp	r1, r0
 804d9ba:	bf38      	it	cc
 804d9bc:	4601      	movcc	r1, r0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804d9be:	b289      	uxth	r1, r1
    }
    else
    {
        if( calcBackOffParams->DutyCycleEnabled == true )
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804d9c0:	6923      	ldr	r3, [r4, #16]
 804d9c2:	3901      	subs	r1, #1
 804d9c4:	4359      	muls	r1, r3
 804d9c6:	60e9      	str	r1, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 804d9c8:	e001      	b.n	804d9ce <RegionCommonCalcBackOff+0x46>
        if( calcBackOffParams->DutyCycleEnabled == true )
 804d9ca:	2e00      	cmp	r6, #0
 804d9cc:	d1f8      	bne.n	804d9c0 <RegionCommonCalcBackOff+0x38>
}
 804d9ce:	bd70      	pop	{r4, r5, r6, pc}

0804d9d0 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 804d9d0:	b510      	push	{r4, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 804d9d2:	4c2a      	ldr	r4, [pc, #168]	; (804da7c <certif_tx+0xac>)
 804d9d4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
{
 804d9d8:	b086      	sub	sp, #24
  if( certifParam.LinkCheck == true )
 804d9da:	b17b      	cbz	r3, 804d9fc <certif_tx+0x2c>
  {
    certifParam.LinkCheck = false;
 804d9dc:	2300      	movs	r3, #0
 804d9de:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    certifParam.DataBufferSize = 3;
 804d9e2:	2303      	movs	r3, #3
 804d9e4:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 804d9e6:	2305      	movs	r3, #5
 804d9e8:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 804d9ea:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 804d9ee:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 804d9f0:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 804d9f4:	71a3      	strb	r3, [r4, #6]
  else
  {
    switch( certifParam.State )
    {
    case 4:
      certifParam.State = 1;
 804d9f6:	2301      	movs	r3, #1
 804d9f8:	7063      	strb	r3, [r4, #1]
      break;
 804d9fa:	e004      	b.n	804da06 <certif_tx+0x36>
    switch( certifParam.State )
 804d9fc:	7863      	ldrb	r3, [r4, #1]
 804d9fe:	2b01      	cmp	r3, #1
 804da00:	d019      	beq.n	804da36 <certif_tx+0x66>
 804da02:	2b04      	cmp	r3, #4
 804da04:	d0f7      	beq.n	804d9f6 <certif_tx+0x26>
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 804da06:	a901      	add	r1, sp, #4
 804da08:	78e0      	ldrb	r0, [r4, #3]
 804da0a:	f7fd fae1 	bl	804afd0 <LoRaMacQueryTxPossible>
 804da0e:	b1d0      	cbz	r0, 804da46 <certif_tx+0x76>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 804da10:	2300      	movs	r3, #0
 804da12:	f88d 3008 	strb.w	r3, [sp, #8]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804da16:	9304      	str	r3, [sp, #16]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804da18:	f8ad 3014 	strh.w	r3, [sp, #20]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 804da1c:	f88d 3016 	strb.w	r3, [sp, #22]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 804da20:	4817      	ldr	r0, [pc, #92]	; (804da80 <certif_tx+0xb0>)
 804da22:	f000 fd8b 	bl	804e53c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804da26:	a802      	add	r0, sp, #8
 804da28:	f7fd ff4a 	bl	804b8c0 <LoRaMacMcpsRequest>
  {
      return false;
  }
    return true;
}
 804da2c:	3000      	adds	r0, #0
 804da2e:	bf18      	it	ne
 804da30:	2001      	movne	r0, #1
 804da32:	b006      	add	sp, #24
 804da34:	bd10      	pop	{r4, pc}
      certifParam.DataBufferSize = 2;
 804da36:	2302      	movs	r3, #2
 804da38:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804da3a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 804da3e:	7163      	strb	r3, [r4, #5]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804da40:	0a1a      	lsrs	r2, r3, #8
 804da42:	7122      	strb	r2, [r4, #4]
      break;
 804da44:	e7df      	b.n	804da06 <certif_tx+0x36>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804da46:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 804da4a:	78e1      	ldrb	r1, [r4, #3]
 804da4c:	4a0d      	ldr	r2, [pc, #52]	; (804da84 <certif_tx+0xb4>)
 804da4e:	20e0      	movs	r0, #224	; 0xe0
 804da50:	b93b      	cbnz	r3, 804da62 <certif_tx+0x92>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 804da52:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 804da56:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 804da5a:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 804da5e:	9204      	str	r2, [sp, #16]
 804da60:	e7dc      	b.n	804da1c <certif_tx+0x4c>
          mcpsReq.Type = MCPS_CONFIRMED;
 804da62:	2301      	movs	r3, #1
 804da64:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804da68:	f44f 6300 	mov.w	r3, #2048	; 0x800
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 804da6c:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 804da70:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 804da74:	9204      	str	r2, [sp, #16]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804da76:	f8ad 3016 	strh.w	r3, [sp, #22]
 804da7a:	e7d1      	b.n	804da20 <certif_tx+0x50>
 804da7c:	20003530 	.word	0x20003530
 804da80:	20003630 	.word	0x20003630
 804da84:	20003534 	.word	0x20003534

0804da88 <OnCertifTxNextPacketTimerEvent>:
/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
    certif_tx( );
 804da88:	f7ff bfa2 	b.w	804d9d0 <certif_tx>

0804da8c <certif_running>:
}
 804da8c:	4b01      	ldr	r3, [pc, #4]	; (804da94 <certif_running+0x8>)
 804da8e:	7818      	ldrb	r0, [r3, #0]
 804da90:	4770      	bx	lr
 804da92:	bf00      	nop
 804da94:	20003530 	.word	0x20003530

0804da98 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 804da98:	4a03      	ldr	r2, [pc, #12]	; (804daa8 <certif_DownLinkIncrement+0x10>)
 804da9a:	f8b2 30f6 	ldrh.w	r3, [r2, #246]	; 0xf6
 804da9e:	3301      	adds	r3, #1
 804daa0:	f8a2 30f6 	strh.w	r3, [r2, #246]	; 0xf6
}
 804daa4:	4770      	bx	lr
 804daa6:	bf00      	nop
 804daa8:	20003530 	.word	0x20003530

0804daac <certif_linkCheck>:
  certifParam.LinkCheck = true;
 804daac:	4b05      	ldr	r3, [pc, #20]	; (804dac4 <certif_linkCheck+0x18>)
 804daae:	2201      	movs	r2, #1
 804dab0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 804dab4:	7a02      	ldrb	r2, [r0, #8]
 804dab6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 804daba:	7a42      	ldrb	r2, [r0, #9]
 804dabc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 804dac0:	4770      	bx	lr
 804dac2:	bf00      	nop
 804dac4:	20003530 	.word	0x20003530

0804dac8 <certif_rx>:
{
 804dac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 804daca:	4c63      	ldr	r4, [pc, #396]	; (804dc58 <certif_rx+0x190>)
 804dacc:	7823      	ldrb	r3, [r4, #0]
{
 804dace:	b08d      	sub	sp, #52	; 0x34
 804dad0:	460e      	mov	r6, r1
  if( certifParam.Running == false )
 804dad2:	2b00      	cmp	r3, #0
 804dad4:	d142      	bne.n	804db5c <certif_rx+0x94>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804dad6:	7b07      	ldrb	r7, [r0, #12]
 804dad8:	2f04      	cmp	r7, #4
 804dada:	d13a      	bne.n	804db52 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804dadc:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804dade:	7811      	ldrb	r1, [r2, #0]
 804dae0:	2901      	cmp	r1, #1
 804dae2:	d136      	bne.n	804db52 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804dae4:	7851      	ldrb	r1, [r2, #1]
 804dae6:	2901      	cmp	r1, #1
 804dae8:	d133      	bne.n	804db52 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 804daea:	7891      	ldrb	r1, [r2, #2]
 804daec:	2901      	cmp	r1, #1
 804daee:	d130      	bne.n	804db52 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 804daf0:	78d6      	ldrb	r6, [r2, #3]
 804daf2:	2e01      	cmp	r6, #1
 804daf4:	d12d      	bne.n	804db52 <certif_rx+0x8a>
          mibReq.Type = MIB_ADR;
 804daf6:	ad0c      	add	r5, sp, #48	; 0x30
          certifParam.DataBufferSize = 2;
 804daf8:	2202      	movs	r2, #2
          mibReq.Type = MIB_ADR;
 804dafa:	f805 7d20 	strb.w	r7, [r5, #-32]!
          LoRaMacMibGetRequestConfirm( &mibReq );
 804dafe:	4628      	mov	r0, r5
          certifParam.DataBufferSize = 2;
 804db00:	70e2      	strb	r2, [r4, #3]
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804db02:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.DownLinkCounter = 0;
 804db06:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.LinkCheck = false;
 804db0a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
          certifParam.DemodMargin = 0;
 804db0e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
          certifParam.NbGateways = 0;
 804db12:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
          certifParam.Running = true;
 804db16:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 804db18:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 804db1a:	f7fd fab9 	bl	804b090 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 804db1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804db22:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
          LoRaMacMibSetRequestConfirm( &mibReq );
 804db26:	4628      	mov	r0, r5
          mibReq.Type = MIB_ADR;
 804db28:	f88d 7010 	strb.w	r7, [sp, #16]
          mibReq.Param.AdrEnable = true;
 804db2c:	f88d 6014 	strb.w	r6, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804db30:	f7fd fb8a 	bl	804b248 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 804db34:	4949      	ldr	r1, [pc, #292]	; (804dc5c <certif_rx+0x194>)
 804db36:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804db3a:	f000 fcf5 	bl	804e528 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 804db3e:	f241 3188 	movw	r1, #5000	; 0x1388
 804db42:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804db46:	f000 fd93 	bl	804e670 <TimerSetValue>
        certif_tx( );
 804db4a:	f7ff ff41 	bl	804d9d0 <certif_tx>
    if ( certifParam.Running == false )
 804db4e:	7823      	ldrb	r3, [r4, #0]
 804db50:	b913      	cbnz	r3, 804db58 <certif_rx+0x90>
      TimerStop( &CertifTxNextPacketTimer );
 804db52:	4843      	ldr	r0, [pc, #268]	; (804dc60 <certif_rx+0x198>)
 804db54:	f000 fd64 	bl	804e620 <TimerStop>
}
 804db58:	b00d      	add	sp, #52	; 0x34
 804db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 804db5c:	6883      	ldr	r3, [r0, #8]
 804db5e:	781a      	ldrb	r2, [r3, #0]
 804db60:	7062      	strb	r2, [r4, #1]
      switch( certifParam.State )
 804db62:	2a08      	cmp	r2, #8
 804db64:	d8f3      	bhi.n	804db4e <certif_rx+0x86>
 804db66:	e8df f002 	tbb	[pc, r2]
 804db6a:	1405      	.short	0x1405
 804db6c:	2f211c17 	.word	0x2f211c17
 804db70:	4b34      	.short	0x4b34
 804db72:	74          	.byte	0x74
 804db73:	00          	.byte	0x00
          certifParam.DownLinkCounter = 0;
 804db74:	2300      	movs	r3, #0
 804db76:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.Running = false;
 804db7a:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 804db7c:	2304      	movs	r3, #4
 804db7e:	f88d 3010 	strb.w	r3, [sp, #16]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804db82:	a804      	add	r0, sp, #16
          mibReq.Param.AdrEnable = AdrEnableInit;
 804db84:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804db88:	f88d 3014 	strb.w	r3, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804db8c:	f7fd fb5c 	bl	804b248 <LoRaMacMibSetRequestConfirm>
 804db90:	e7dd      	b.n	804db4e <certif_rx+0x86>
          certifParam.DataBufferSize = 2;
 804db92:	2302      	movs	r3, #2
 804db94:	70e3      	strb	r3, [r4, #3]
          break;
 804db96:	e7da      	b.n	804db4e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 804db98:	2301      	movs	r3, #1
 804db9a:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804db9e:	7063      	strb	r3, [r4, #1]
          break;
 804dba0:	e7d5      	b.n	804db4e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804dba2:	2300      	movs	r3, #0
 804dba4:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804dba8:	2301      	movs	r3, #1
 804dbaa:	e7f8      	b.n	804db9e <certif_rx+0xd6>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 804dbac:	7b05      	ldrb	r5, [r0, #12]
 804dbae:	70e5      	strb	r5, [r4, #3]
          certifParam.DataBuffer[0] = 4;
 804dbb0:	2204      	movs	r2, #4
 804dbb2:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 804dbb4:	2200      	movs	r2, #0
 804dbb6:	3201      	adds	r2, #1
 804dbb8:	b2d1      	uxtb	r1, r2
 804dbba:	428d      	cmp	r5, r1
 804dbbc:	d9c7      	bls.n	804db4e <certif_rx+0x86>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 804dbbe:	5c98      	ldrb	r0, [r3, r2]
 804dbc0:	18a1      	adds	r1, r4, r2
 804dbc2:	3001      	adds	r0, #1
 804dbc4:	7108      	strb	r0, [r1, #4]
 804dbc6:	e7f6      	b.n	804dbb6 <certif_rx+0xee>
          mlmeReq.Type = MLME_LINK_CHECK;
 804dbc8:	a80c      	add	r0, sp, #48	; 0x30
 804dbca:	2303      	movs	r3, #3
          mlmeReq.Type = MLME_DEVICE_TIME;
 804dbcc:	f800 3d20 	strb.w	r3, [r0, #-32]!
 804dbd0:	e013      	b.n	804dbfa <certif_rx+0x132>
            mibReq.Type = MIB_ADR;
 804dbd2:	2304      	movs	r3, #4
            certifParam.DownLinkCounter = 0;
 804dbd4:	2500      	movs	r5, #0
            mibReq.Type = MIB_ADR;
 804dbd6:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804dbda:	a804      	add	r0, sp, #16
            mibReq.Param.AdrEnable = AdrEnableInit;
 804dbdc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804dbe0:	f88d 3014 	strb.w	r3, [sp, #20]
            certifParam.DownLinkCounter = 0;
 804dbe4:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
            certifParam.Running = false;
 804dbe8:	7025      	strb	r5, [r4, #0]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804dbea:	f7fd fb2d 	bl	804b248 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Req.Join = *JoinParameters;
 804dbee:	7833      	ldrb	r3, [r6, #0]
            mlmeReq.Type = MLME_JOIN;
 804dbf0:	f88d 5000 	strb.w	r5, [sp]
            mlmeReq.Req.Join = *JoinParameters;
 804dbf4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMlmeRequest( &mlmeReq );
 804dbf8:	4668      	mov	r0, sp
          LoRaMacMlmeRequest( &mlmeReq );
 804dbfa:	f7fd fd7b 	bl	804b6f4 <LoRaMacMlmeRequest>
 804dbfe:	e7a6      	b.n	804db4e <certif_rx+0x86>
          if( mcpsIndication->BufferSize == 3 )
 804dc00:	7b02      	ldrb	r2, [r0, #12]
 804dc02:	2a03      	cmp	r2, #3
 804dc04:	d10c      	bne.n	804dc20 <certif_rx+0x158>
              mlmeReq.Type = MLME_TXCW;
 804dc06:	2204      	movs	r2, #4
 804dc08:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804dc0c:	785a      	ldrb	r2, [r3, #1]
 804dc0e:	789b      	ldrb	r3, [r3, #2]
 804dc10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804dc14:	f8ad 3014 	strh.w	r3, [sp, #20]
              LoRaMacMlmeRequest( &mlmeReq );
 804dc18:	a804      	add	r0, sp, #16
 804dc1a:	f7fd fd6b 	bl	804b6f4 <LoRaMacMlmeRequest>
 804dc1e:	e7c3      	b.n	804dba8 <certif_rx+0xe0>
          else if( mcpsIndication->BufferSize == 7 )
 804dc20:	2a07      	cmp	r2, #7
 804dc22:	d1c1      	bne.n	804dba8 <certif_rx+0xe0>
              mlmeReq.Type = MLME_TXCW_1;
 804dc24:	2205      	movs	r2, #5
 804dc26:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804dc2a:	7859      	ldrb	r1, [r3, #1]
 804dc2c:	789a      	ldrb	r2, [r3, #2]
 804dc2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 804dc32:	f8ad 2014 	strh.w	r2, [sp, #20]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 804dc36:	791a      	ldrb	r2, [r3, #4]
 804dc38:	78d9      	ldrb	r1, [r3, #3]
 804dc3a:	0212      	lsls	r2, r2, #8
 804dc3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804dc40:	7959      	ldrb	r1, [r3, #5]
 804dc42:	430a      	orrs	r2, r1
 804dc44:	2164      	movs	r1, #100	; 0x64
 804dc46:	434a      	muls	r2, r1
 804dc48:	9206      	str	r2, [sp, #24]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 804dc4a:	799b      	ldrb	r3, [r3, #6]
 804dc4c:	f88d 301c 	strb.w	r3, [sp, #28]
 804dc50:	e7e2      	b.n	804dc18 <certif_rx+0x150>
          mlmeReq.Type = MLME_DEVICE_TIME;
 804dc52:	a80c      	add	r0, sp, #48	; 0x30
 804dc54:	2309      	movs	r3, #9
 804dc56:	e7b9      	b.n	804dbcc <certif_rx+0x104>
 804dc58:	20003530 	.word	0x20003530
 804dc5c:	0804da89 	.word	0x0804da89
 804dc60:	20003630 	.word	0x20003630

0804dc64 <MlmeIndication>:
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 804dc64:	7803      	ldrb	r3, [r0, #0]
 804dc66:	2b06      	cmp	r3, #6
 804dc68:	d103      	bne.n	804dc72 <MlmeIndication+0xe>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 804dc6a:	4b02      	ldr	r3, [pc, #8]	; (804dc74 <MlmeIndication+0x10>)
 804dc6c:	681b      	ldr	r3, [r3, #0]
 804dc6e:	69db      	ldr	r3, [r3, #28]
 804dc70:	4718      	bx	r3
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 804dc72:	4770      	bx	lr
 804dc74:	2000364c 	.word	0x2000364c

0804dc78 <McpsIndication>:
{
 804dc78:	b570      	push	{r4, r5, r6, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804dc7a:	7843      	ldrb	r3, [r0, #1]
{
 804dc7c:	b08e      	sub	sp, #56	; 0x38
 804dc7e:	4604      	mov	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804dc80:	2b00      	cmp	r3, #0
 804dc82:	d136      	bne.n	804dcf2 <McpsIndication+0x7a>
    if( mcpsIndication->FramePending == true )
 804dc84:	7943      	ldrb	r3, [r0, #5]
 804dc86:	2b01      	cmp	r3, #1
 804dc88:	d103      	bne.n	804dc92 <McpsIndication+0x1a>
        LoRaMainCallbacks->LORA_TxNeeded( );
 804dc8a:	4b22      	ldr	r3, [pc, #136]	; (804dd14 <McpsIndication+0x9c>)
 804dc8c:	681b      	ldr	r3, [r3, #0]
 804dc8e:	69db      	ldr	r3, [r3, #28]
 804dc90:	4798      	blx	r3
    if (certif_running() == true )
 804dc92:	f7ff fefb 	bl	804da8c <certif_running>
 804dc96:	b108      	cbz	r0, 804dc9c <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 804dc98:	f7ff fefe 	bl	804da98 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 804dc9c:	7b63      	ldrb	r3, [r4, #13]
 804dc9e:	b133      	cbz	r3, 804dcae <McpsIndication+0x36>
      switch( mcpsIndication->Port )
 804dca0:	78e3      	ldrb	r3, [r4, #3]
 804dca2:	2be0      	cmp	r3, #224	; 0xe0
 804dca4:	d127      	bne.n	804dcf6 <McpsIndication+0x7e>
          certif_rx( mcpsIndication, &JoinParameters );
 804dca6:	491c      	ldr	r1, [pc, #112]	; (804dd18 <McpsIndication+0xa0>)
 804dca8:	4620      	mov	r0, r4
 804dcaa:	f7ff ff0d 	bl	804dac8 <certif_rx>
} 


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 804dcae:	4e1b      	ldr	r6, [pc, #108]	; (804dd1c <McpsIndication+0xa4>)
 804dcb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804dcb2:	ad09      	add	r5, sp, #36	; 0x24
 804dcb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804dcb6:	6833      	ldr	r3, [r6, #0]
 804dcb8:	602b      	str	r3, [r5, #0]
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
	PRINTNOW();
 804dcba:	a807      	add	r0, sp, #28
 804dcbc:	f000 fbff 	bl	804e4be <SysTimeGetMcuTime>
 804dcc0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 804dcc4:	9907      	ldr	r1, [sp, #28]
 804dcc6:	4816      	ldr	r0, [pc, #88]	; (804dd20 <McpsIndication+0xa8>)
 804dcc8:	f000 fd34 	bl	804e734 <TraceSend>
    PRINTF("#= D/L FRAME %lu =# RxWin %s, Port %d, data size %d, rssi %d, snr %d\r\n\r\n", \
 804dccc:	7c62      	ldrb	r2, [r4, #17]
 804dcce:	78e3      	ldrb	r3, [r4, #3]
 804dcd0:	4814      	ldr	r0, [pc, #80]	; (804dd24 <McpsIndication+0xac>)
 804dcd2:	a90e      	add	r1, sp, #56	; 0x38
 804dcd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 804dcd8:	f994 1010 	ldrsb.w	r1, [r4, #16]
 804dcdc:	9102      	str	r1, [sp, #8]
 804dcde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804dce2:	9101      	str	r1, [sp, #4]
 804dce4:	7b21      	ldrb	r1, [r4, #12]
 804dce6:	9100      	str	r1, [sp, #0]
 804dce8:	f852 2c14 	ldr.w	r2, [r2, #-20]
 804dcec:	6961      	ldr	r1, [r4, #20]
 804dcee:	f000 fd21 	bl	804e734 <TraceSend>
}
 804dcf2:	b00e      	add	sp, #56	; 0x38
 804dcf4:	bd70      	pop	{r4, r5, r6, pc}
          AppData.Port = mcpsIndication->Port;
 804dcf6:	f88d 3019 	strb.w	r3, [sp, #25]
          AppData.Buff = mcpsIndication->Buffer;
 804dcfa:	a80e      	add	r0, sp, #56	; 0x38
          AppData.BuffSize = mcpsIndication->BufferSize;
 804dcfc:	7b23      	ldrb	r3, [r4, #12]
 804dcfe:	f88d 3018 	strb.w	r3, [sp, #24]
          AppData.Buff = mcpsIndication->Buffer;
 804dd02:	68a3      	ldr	r3, [r4, #8]
 804dd04:	f840 3d24 	str.w	r3, [r0, #-36]!
          LoRaMainCallbacks->LORA_RxData( &AppData );
 804dd08:	4b02      	ldr	r3, [pc, #8]	; (804dd14 <McpsIndication+0x9c>)
 804dd0a:	681b      	ldr	r3, [r3, #0]
 804dd0c:	691b      	ldr	r3, [r3, #16]
 804dd0e:	4798      	blx	r3
 804dd10:	e7cd      	b.n	804dcae <McpsIndication+0x36>
 804dd12:	bf00      	nop
 804dd14:	2000364c 	.word	0x2000364c
 804dd18:	20003650 	.word	0x20003650
 804dd1c:	0805423c 	.word	0x0805423c
 804dd20:	0805433c 	.word	0x0805433c
 804dd24:	080544fe 	.word	0x080544fe

0804dd28 <McpsConfirm>:
{
 804dd28:	b500      	push	{lr}
 804dd2a:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 804dd2c:	a810      	add	r0, sp, #64	; 0x40
 804dd2e:	2300      	movs	r3, #0
 804dd30:	f800 3d20 	strb.w	r3, [r0, #-32]!
    LoRaMacMibGetRequestConfirm( &mibReq );
 804dd34:	f7fd f9ac 	bl	804b090 <LoRaMacMibGetRequestConfirm>
    mibGet.Type  = MIB_CHANNELS_MASK;
 804dd38:	a810      	add	r0, sp, #64	; 0x40
 804dd3a:	2324      	movs	r3, #36	; 0x24
 804dd3c:	f800 3d40 	strb.w	r3, [r0, #-64]!
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 804dd40:	f7fd f9a6 	bl	804b090 <LoRaMacMibGetRequestConfirm>
}
 804dd44:	b011      	add	sp, #68	; 0x44
 804dd46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804dd4c <LORA_Init>:
{
 804dd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804dd50:	4a6f      	ldr	r2, [pc, #444]	; (804df10 <LORA_Init+0x1c4>)
  LoRaParamInit = LoRaParam;
 804dd52:	4c70      	ldr	r4, [pc, #448]	; (804df14 <LORA_Init+0x1c8>)
{
 804dd54:	b092      	sub	sp, #72	; 0x48
 804dd56:	4605      	mov	r5, r0
 804dd58:	460e      	mov	r6, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804dd5a:	6810      	ldr	r0, [r2, #0]
 804dd5c:	6851      	ldr	r1, [r2, #4]
  LoRaMainCallbacks = callbacks;
 804dd5e:	6025      	str	r5, [r4, #0]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804dd60:	ab0e      	add	r3, sp, #56	; 0x38
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804dd62:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804dd66:	c303      	stmia	r3!, {r0, r1}
  PPRINTF( "ABP\n\r"); 
 804dd68:	4d6b      	ldr	r5, [pc, #428]	; (804df18 <LORA_Init+0x1cc>)
  LoRaParamInit = LoRaParam;
 804dd6a:	60a6      	str	r6, [r4, #8]
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804dd6c:	2300      	movs	r3, #0
 804dd6e:	9310      	str	r3, [sp, #64]	; 0x40
 804dd70:	f8c8 3004 	str.w	r3, [r8, #4]
  PPRINTF( "ABP\n\r"); 
 804dd74:	4628      	mov	r0, r5
 804dd76:	f000 fcdd 	bl	804e734 <TraceSend>
 804dd7a:	2800      	cmp	r0, #0
 804dd7c:	d1fa      	bne.n	804dd74 <LORA_Init+0x28>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 804dd7e:	4d67      	ldr	r5, [pc, #412]	; (804df1c <LORA_Init+0x1d0>)
 804dd80:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 804dd84:	9004      	str	r0, [sp, #16]
 804dd86:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
 804dd8a:	9003      	str	r0, [sp, #12]
 804dd8c:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 804dd90:	9002      	str	r0, [sp, #8]
 804dd92:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 804dd96:	9001      	str	r0, [sp, #4]
 804dd98:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 804dd9c:	9000      	str	r0, [sp, #0]
 804dd9e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 804dda2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 804dda6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 804ddaa:	4628      	mov	r0, r5
 804ddac:	f000 fcc2 	bl	804e734 <TraceSend>
 804ddb0:	2800      	cmp	r0, #0
 804ddb2:	d1e5      	bne.n	804dd80 <LORA_Init+0x34>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 804ddb4:	4e5a      	ldr	r6, [pc, #360]	; (804df20 <LORA_Init+0x1d4>)
 804ddb6:	4d5b      	ldr	r5, [pc, #364]	; (804df24 <LORA_Init+0x1d8>)
 804ddb8:	4631      	mov	r1, r6
 804ddba:	4628      	mov	r0, r5
 804ddbc:	f000 fcba 	bl	804e734 <TraceSend>
 804ddc0:	2800      	cmp	r0, #0
 804ddc2:	d1f9      	bne.n	804ddb8 <LORA_Init+0x6c>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 804ddc4:	4d58      	ldr	r5, [pc, #352]	; (804df28 <LORA_Init+0x1dc>)
 804ddc6:	4f59      	ldr	r7, [pc, #356]	; (804df2c <LORA_Init+0x1e0>)
 804ddc8:	462e      	mov	r6, r5
 804ddca:	7be8      	ldrb	r0, [r5, #15]
 804ddcc:	78ab      	ldrb	r3, [r5, #2]
 804ddce:	786a      	ldrb	r2, [r5, #1]
 804ddd0:	7829      	ldrb	r1, [r5, #0]
 804ddd2:	900c      	str	r0, [sp, #48]	; 0x30
 804ddd4:	7ba8      	ldrb	r0, [r5, #14]
 804ddd6:	900b      	str	r0, [sp, #44]	; 0x2c
 804ddd8:	7b68      	ldrb	r0, [r5, #13]
 804ddda:	900a      	str	r0, [sp, #40]	; 0x28
 804dddc:	7b28      	ldrb	r0, [r5, #12]
 804ddde:	9009      	str	r0, [sp, #36]	; 0x24
 804dde0:	7ae8      	ldrb	r0, [r5, #11]
 804dde2:	9008      	str	r0, [sp, #32]
 804dde4:	7aa8      	ldrb	r0, [r5, #10]
 804dde6:	9007      	str	r0, [sp, #28]
 804dde8:	7a68      	ldrb	r0, [r5, #9]
 804ddea:	9006      	str	r0, [sp, #24]
 804ddec:	7a28      	ldrb	r0, [r5, #8]
 804ddee:	9005      	str	r0, [sp, #20]
 804ddf0:	79e8      	ldrb	r0, [r5, #7]
 804ddf2:	9004      	str	r0, [sp, #16]
 804ddf4:	79a8      	ldrb	r0, [r5, #6]
 804ddf6:	9003      	str	r0, [sp, #12]
 804ddf8:	7968      	ldrb	r0, [r5, #5]
 804ddfa:	9002      	str	r0, [sp, #8]
 804ddfc:	7928      	ldrb	r0, [r5, #4]
 804ddfe:	9001      	str	r0, [sp, #4]
 804de00:	78e8      	ldrb	r0, [r5, #3]
 804de02:	9000      	str	r0, [sp, #0]
 804de04:	4638      	mov	r0, r7
 804de06:	f000 fc95 	bl	804e734 <TraceSend>
 804de0a:	2800      	cmp	r0, #0
 804de0c:	d1dd      	bne.n	804ddca <LORA_Init+0x7e>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 804de0e:	4d48      	ldr	r5, [pc, #288]	; (804df30 <LORA_Init+0x1e4>)
 804de10:	7ff0      	ldrb	r0, [r6, #31]
 804de12:	7cb3      	ldrb	r3, [r6, #18]
 804de14:	7c72      	ldrb	r2, [r6, #17]
 804de16:	7c31      	ldrb	r1, [r6, #16]
 804de18:	900c      	str	r0, [sp, #48]	; 0x30
 804de1a:	7fb0      	ldrb	r0, [r6, #30]
 804de1c:	900b      	str	r0, [sp, #44]	; 0x2c
 804de1e:	7f70      	ldrb	r0, [r6, #29]
 804de20:	900a      	str	r0, [sp, #40]	; 0x28
 804de22:	7f30      	ldrb	r0, [r6, #28]
 804de24:	9009      	str	r0, [sp, #36]	; 0x24
 804de26:	7ef0      	ldrb	r0, [r6, #27]
 804de28:	9008      	str	r0, [sp, #32]
 804de2a:	7eb0      	ldrb	r0, [r6, #26]
 804de2c:	9007      	str	r0, [sp, #28]
 804de2e:	7e70      	ldrb	r0, [r6, #25]
 804de30:	9006      	str	r0, [sp, #24]
 804de32:	7e30      	ldrb	r0, [r6, #24]
 804de34:	9005      	str	r0, [sp, #20]
 804de36:	7df0      	ldrb	r0, [r6, #23]
 804de38:	9004      	str	r0, [sp, #16]
 804de3a:	7db0      	ldrb	r0, [r6, #22]
 804de3c:	9003      	str	r0, [sp, #12]
 804de3e:	7d70      	ldrb	r0, [r6, #21]
 804de40:	9002      	str	r0, [sp, #8]
 804de42:	7d30      	ldrb	r0, [r6, #20]
 804de44:	9001      	str	r0, [sp, #4]
 804de46:	7cf0      	ldrb	r0, [r6, #19]
 804de48:	9000      	str	r0, [sp, #0]
 804de4a:	4628      	mov	r0, r5
 804de4c:	f000 fc72 	bl	804e734 <TraceSend>
 804de50:	4607      	mov	r7, r0
 804de52:	2800      	cmp	r0, #0
 804de54:	d1dc      	bne.n	804de10 <LORA_Init+0xc4>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 804de56:	4b37      	ldr	r3, [pc, #220]	; (804df34 <LORA_Init+0x1e8>)
 804de58:	60e3      	str	r3, [r4, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 804de5a:	4b37      	ldr	r3, [pc, #220]	; (804df38 <LORA_Init+0x1ec>)
 804de5c:	6123      	str	r3, [r4, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 804de5e:	4b37      	ldr	r3, [pc, #220]	; (804df3c <LORA_Init+0x1f0>)
 804de60:	6163      	str	r3, [r4, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 804de62:	4b37      	ldr	r3, [pc, #220]	; (804df40 <LORA_Init+0x1f4>)
 804de64:	61a3      	str	r3, [r4, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804de66:	6823      	ldr	r3, [r4, #0]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804de68:	4936      	ldr	r1, [pc, #216]	; (804df44 <LORA_Init+0x1f8>)
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804de6a:	681a      	ldr	r2, [r3, #0]
 804de6c:	61e2      	str	r2, [r4, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 804de6e:	685a      	ldr	r2, [r3, #4]
 804de70:	6222      	str	r2, [r4, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804de72:	f1a1 0010 	sub.w	r0, r1, #16
 804de76:	2201      	movs	r2, #1
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 804de78:	6a1b      	ldr	r3, [r3, #32]
 804de7a:	62a3      	str	r3, [r4, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804de7c:	f7fc feae 	bl	804abdc <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 804de80:	2302      	movs	r3, #2
 804de82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804de86:	4830      	ldr	r0, [pc, #192]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Param.AppKey = AppKey;
 804de88:	4d30      	ldr	r5, [pc, #192]	; (804df4c <LORA_Init+0x200>)
  mibReq.Param.DevEui = devEui;
 804de8a:	ab0e      	add	r3, sp, #56	; 0x38
 804de8c:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804de8e:	f7fd f9db 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 804de92:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 804de94:	482c      	ldr	r0, [pc, #176]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_JOIN_EUI;
 804de96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.JoinEui = joinEui;
 804de9a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804de9e:	f7fd f9d3 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 804dea2:	2304      	movs	r3, #4
 804dea4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804dea8:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804deaa:	4827      	ldr	r0, [pc, #156]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804deac:	781b      	ldrb	r3, [r3, #0]
 804deae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804deb2:	f7fd f9c9 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 804deb6:	231d      	movs	r3, #29
 804deb8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804debc:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804debe:	4822      	ldr	r0, [pc, #136]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804dec0:	789b      	ldrb	r3, [r3, #2]
 804dec2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dec6:	f7fd f9bf 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 804deca:	2308      	movs	r3, #8
  LoRaMacMibSetRequestConfirm( &mibReq );
 804decc:	481e      	ldr	r0, [pc, #120]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_APP_KEY;
 804dece:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AppKey = AppKey;
 804ded2:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804ded4:	f7fd f9b8 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Param.NwkKey = NwkKey;
 804ded8:	3510      	adds	r5, #16
  mibReq.Type = MIB_NWK_KEY;
 804deda:	2309      	movs	r3, #9
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dedc:	481a      	ldr	r0, [pc, #104]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_NWK_KEY;
 804dede:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.NwkKey = NwkKey;
 804dee2:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dee4:	f7fd f9b0 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dee8:	4817      	ldr	r0, [pc, #92]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_DEVICE_CLASS;
 804deea:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  mibReq.Param.Class= CLASS_A;
 804deee:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804def2:	f7fd f9a9 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 804def6:	2330      	movs	r3, #48	; 0x30
 804def8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804defc:	4812      	ldr	r0, [pc, #72]	; (804df48 <LORA_Init+0x1fc>)
  mibReq.Param.SystemMaxRxError = 20;
 804defe:	2314      	movs	r3, #20
 804df00:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804df02:	f7fd f9a1 	bl	804b248 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 804df06:	f7fd f85b 	bl	804afc0 <LoRaMacStart>
}
 804df0a:	b012      	add	sp, #72	; 0x48
 804df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804df10:	08054250 	.word	0x08054250
 804df14:	2000364c 	.word	0x2000364c
 804df18:	08054547 	.word	0x08054547
 804df1c:	0805454d 	.word	0x0805454d
 804df20:	ff000002 	.word	0xff000002
 804df24:	0805457f 	.word	0x0805457f
 804df28:	2000106c 	.word	0x2000106c
 804df2c:	0805458f 	.word	0x0805458f
 804df30:	080545ea 	.word	0x080545ea
 804df34:	0804dd29 	.word	0x0804dd29
 804df38:	0804dc79 	.word	0x0804dc79
 804df3c:	0804dffd 	.word	0x0804dffd
 804df40:	0804dc65 	.word	0x0804dc65
 804df44:	20003668 	.word	0x20003668
 804df48:	20003678 	.word	0x20003678
 804df4c:	2000108c 	.word	0x2000108c

0804df50 <LORA_Join>:
{
 804df50:	b570      	push	{r4, r5, r6, lr}
    JoinParameters = mlmeReq.Req.Join;
 804df52:	4c26      	ldr	r4, [pc, #152]	; (804dfec <LORA_Join+0x9c>)
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804df54:	4e26      	ldr	r6, [pc, #152]	; (804dff0 <LORA_Join+0xa0>)
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 804df56:	68a3      	ldr	r3, [r4, #8]
    JoinParameters = mlmeReq.Req.Join;
 804df58:	785b      	ldrb	r3, [r3, #1]
 804df5a:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df5c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    mibReq.Type = MIB_NET_ID;
 804df60:	2305      	movs	r3, #5
 804df62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df66:	4628      	mov	r0, r5
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 804df68:	2300      	movs	r3, #0
 804df6a:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df6c:	f7fd f96c 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 804df70:	2306      	movs	r3, #6
 804df72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df76:	4628      	mov	r0, r5
    mibReq.Param.DevAddr = DevAddr;
 804df78:	4b1e      	ldr	r3, [pc, #120]	; (804dff4 <LORA_Join+0xa4>)
 804df7a:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df7c:	f7fd f964 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 804df80:	230c      	movs	r3, #12
 804df82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df86:	4628      	mov	r0, r5
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804df88:	f106 0340 	add.w	r3, r6, #64	; 0x40
 804df8c:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df8e:	f7fd f95b 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 804df92:	230d      	movs	r3, #13
 804df94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804df98:	4628      	mov	r0, r5
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 804df9a:	f106 0350 	add.w	r3, r6, #80	; 0x50
 804df9e:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfa0:	f7fd f952 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804dfa4:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfa6:	4628      	mov	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804dfa8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 804dfac:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfae:	f7fd f94b 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Param.AppSKey = AppSKey;
 804dfb2:	3610      	adds	r6, #16
    mibReq.Type = MIB_APP_S_KEY;
 804dfb4:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfb6:	4628      	mov	r0, r5
    mibReq.Type = MIB_APP_S_KEY;
 804dfb8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.AppSKey = AppSKey;
 804dfbc:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfbe:	f7fd f943 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804dfc2:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfc4:	4628      	mov	r0, r5
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804dfc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 804dfca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfce:	f7fd f93b 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 804dfd2:	2335      	movs	r3, #53	; 0x35
 804dfd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfd8:	4628      	mov	r0, r5
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 804dfda:	4b07      	ldr	r3, [pc, #28]	; (804dff8 <LORA_Join+0xa8>)
 804dfdc:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dfde:	f7fd f933 	bl	804b248 <LoRaMacMibSetRequestConfirm>
    LoRaMainCallbacks->LORA_HasJoined();
 804dfe2:	6823      	ldr	r3, [r4, #0]
}
 804dfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRaMainCallbacks->LORA_HasJoined();
 804dfe8:	695b      	ldr	r3, [r3, #20]
 804dfea:	4718      	bx	r3
 804dfec:	2000364c 	.word	0x2000364c
 804dff0:	2000106c 	.word	0x2000106c
 804dff4:	ff000002 	.word	0xff000002
 804dff8:	01000300 	.word	0x01000300

0804dffc <MlmeConfirm>:
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804dffc:	7842      	ldrb	r2, [r0, #1]
 804dffe:	4b13      	ldr	r3, [pc, #76]	; (804e04c <MlmeConfirm+0x50>)
 804e000:	eb03 0382 	add.w	r3, r3, r2, lsl #2
{
 804e004:	b510      	push	{r4, lr}
 804e006:	4604      	mov	r4, r0
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804e008:	6e19      	ldr	r1, [r3, #96]	; 0x60
 804e00a:	4811      	ldr	r0, [pc, #68]	; (804e050 <MlmeConfirm+0x54>)
 804e00c:	f000 fb92 	bl	804e734 <TraceSend>
    switch( mlmeConfirm->MlmeRequest )
 804e010:	7823      	ldrb	r3, [r4, #0]
 804e012:	b113      	cbz	r3, 804e01a <MlmeConfirm+0x1e>
 804e014:	2b03      	cmp	r3, #3
 804e016:	d00c      	beq.n	804e032 <MlmeConfirm+0x36>
}
 804e018:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804e01a:	7863      	ldrb	r3, [r4, #1]
 804e01c:	b92b      	cbnz	r3, 804e02a <MlmeConfirm+0x2e>
              LoRaMainCallbacks->LORA_HasJoined();
 804e01e:	4b0d      	ldr	r3, [pc, #52]	; (804e054 <MlmeConfirm+0x58>)
 804e020:	681b      	ldr	r3, [r3, #0]
}
 804e022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              LoRaMainCallbacks->LORA_HasJoined();
 804e026:	695b      	ldr	r3, [r3, #20]
 804e028:	4718      	bx	r3
}
 804e02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                LORA_Join();
 804e02e:	f7ff bf8f 	b.w	804df50 <LORA_Join>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804e032:	7863      	ldrb	r3, [r4, #1]
 804e034:	2b00      	cmp	r3, #0
 804e036:	d1ef      	bne.n	804e018 <MlmeConfirm+0x1c>
                if (certif_running() == true )
 804e038:	f7ff fd28 	bl	804da8c <certif_running>
 804e03c:	2800      	cmp	r0, #0
 804e03e:	d0eb      	beq.n	804e018 <MlmeConfirm+0x1c>
                     certif_linkCheck( mlmeConfirm);
 804e040:	4620      	mov	r0, r4
}
 804e042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                     certif_linkCheck( mlmeConfirm);
 804e046:	f7ff bd31 	b.w	804daac <certif_linkCheck>
 804e04a:	bf00      	nop
 804e04c:	2000106c 	.word	0x2000106c
 804e050:	08054645 	.word	0x08054645
 804e054:	2000364c 	.word	0x2000364c

0804e058 <LORA_JoinStatus>:
{
 804e058:	b500      	push	{lr}
 804e05a:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 804e05c:	a808      	add	r0, sp, #32
 804e05e:	2301      	movs	r3, #1
 804e060:	f800 3d20 	strb.w	r3, [r0, #-32]!
  LoRaMacMibGetRequestConfirm( &mibReq );
 804e064:	f7fd f814 	bl	804b090 <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804e068:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 804e06c:	3000      	adds	r0, #0
 804e06e:	bf18      	it	ne
 804e070:	2001      	movne	r0, #1
 804e072:	b009      	add	sp, #36	; 0x24
 804e074:	f85d fb04 	ldr.w	pc, [sp], #4

0804e078 <LORA_send>:
{
 804e078:	b570      	push	{r4, r5, r6, lr}
 804e07a:	b086      	sub	sp, #24
 804e07c:	4604      	mov	r4, r0
 804e07e:	460e      	mov	r6, r1
    if (certif_running() == true)
 804e080:	f7ff fd04 	bl	804da8c <certif_running>
 804e084:	4605      	mov	r5, r0
 804e086:	b128      	cbz	r0, 804e094 <LORA_send+0x1c>
    	PRINTF("Test mode");
 804e088:	481b      	ldr	r0, [pc, #108]	; (804e0f8 <LORA_send+0x80>)
 804e08a:	f000 fb53 	bl	804e734 <TraceSend>
      return false;
 804e08e:	2000      	movs	r0, #0
}  
 804e090:	b006      	add	sp, #24
 804e092:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 804e094:	a901      	add	r1, sp, #4
 804e096:	7920      	ldrb	r0, [r4, #4]
 804e098:	f7fc ff9a 	bl	804afd0 <LoRaMacQueryTxPossible>
 804e09c:	4b17      	ldr	r3, [pc, #92]	; (804e0fc <LORA_send+0x84>)
 804e09e:	b178      	cbz	r0, 804e0c0 <LORA_send+0x48>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804e0a0:	689b      	ldr	r3, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804e0a2:	9504      	str	r5, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804e0a4:	f8ad 5014 	strh.w	r5, [sp, #20]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804e0a8:	785b      	ldrb	r3, [r3, #1]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 804e0aa:	f88d 5008 	strb.w	r5, [sp, #8]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804e0ae:	a802      	add	r0, sp, #8
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 804e0b0:	f88d 3016 	strb.w	r3, [sp, #22]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804e0b4:	f7fd fc04 	bl	804b8c0 <LoRaMacMcpsRequest>
 804e0b8:	3000      	adds	r0, #0
 804e0ba:	bf18      	it	ne
 804e0bc:	2001      	movne	r0, #1
 804e0be:	e7e7      	b.n	804e090 <LORA_send+0x18>
 804e0c0:	689b      	ldr	r3, [r3, #8]
 804e0c2:	7960      	ldrb	r0, [r4, #5]
 804e0c4:	7921      	ldrb	r1, [r4, #4]
 804e0c6:	6822      	ldr	r2, [r4, #0]
 804e0c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804e0cc:	b93e      	cbnz	r6, 804e0de <LORA_send+0x66>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 804e0ce:	f88d 6008 	strb.w	r6, [sp, #8]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 804e0d2:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 804e0d6:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 804e0da:	9204      	str	r2, [sp, #16]
 804e0dc:	e7e7      	b.n	804e0ae <LORA_send+0x36>
            mcpsReq.Type = MCPS_CONFIRMED;
 804e0de:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 804e0e0:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804e0e2:	2208      	movs	r2, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 804e0e4:	f88d 4008 	strb.w	r4, [sp, #8]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 804e0e8:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 804e0ec:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804e0f0:	f88d 2017 	strb.w	r2, [sp, #23]
 804e0f4:	e7db      	b.n	804e0ae <LORA_send+0x36>
 804e0f6:	bf00      	nop
 804e0f8:	08054663 	.word	0x08054663
 804e0fc:	2000364c 	.word	0x2000364c

0804e100 <LORA_RequestClass>:
{
 804e100:	b570      	push	{r4, r5, r6, lr}
 804e102:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 804e104:	ae08      	add	r6, sp, #32
 804e106:	2400      	movs	r4, #0
 804e108:	f806 4d20 	strb.w	r4, [r6, #-32]!
{
 804e10c:	4605      	mov	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 804e10e:	4630      	mov	r0, r6
 804e110:	f7fc ffbe 	bl	804b090 <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 804e114:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (currentClass != newClass)
 804e118:	42ab      	cmp	r3, r5
 804e11a:	d004      	beq.n	804e126 <LORA_RequestClass+0x26>
    switch (newClass)
 804e11c:	2d01      	cmp	r5, #1
 804e11e:	d014      	beq.n	804e14a <LORA_RequestClass+0x4a>
 804e120:	d304      	bcc.n	804e12c <LORA_RequestClass+0x2c>
 804e122:	2d02      	cmp	r5, #2
 804e124:	d015      	beq.n	804e152 <LORA_RequestClass+0x52>
}
 804e126:	4620      	mov	r0, r4
 804e128:	b008      	add	sp, #32
 804e12a:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804e12c:	4630      	mov	r0, r6
        mibReq.Param.Class = CLASS_A;
 804e12e:	f88d 4004 	strb.w	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804e132:	f7fd f889 	bl	804b248 <LoRaMacMibSetRequestConfirm>
 804e136:	4604      	mov	r4, r0
 804e138:	b110      	cbz	r0, 804e140 <LORA_RequestClass+0x40>
          Errorstatus = LORA_ERROR;
 804e13a:	f04f 34ff 	mov.w	r4, #4294967295
 804e13e:	e7f2      	b.n	804e126 <LORA_RequestClass+0x26>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 804e140:	4b0c      	ldr	r3, [pc, #48]	; (804e174 <LORA_RequestClass+0x74>)
 804e142:	681b      	ldr	r3, [r3, #0]
 804e144:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804e146:	4798      	blx	r3
 804e148:	e7ed      	b.n	804e126 <LORA_RequestClass+0x26>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 804e14a:	480b      	ldr	r0, [pc, #44]	; (804e178 <LORA_RequestClass+0x78>)
 804e14c:	f000 faf2 	bl	804e734 <TraceSend>
        break;
 804e150:	e7e9      	b.n	804e126 <LORA_RequestClass+0x26>
        if (currentClass != CLASS_A)
 804e152:	1c1c      	adds	r4, r3, #0
 804e154:	bf18      	it	ne
 804e156:	2401      	movne	r4, #1
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804e158:	4630      	mov	r0, r6
        if (currentClass != CLASS_A)
 804e15a:	4264      	negs	r4, r4
        mibReq.Param.Class = CLASS_C;
 804e15c:	f88d 5004 	strb.w	r5, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804e160:	f7fd f872 	bl	804b248 <LoRaMacMibSetRequestConfirm>
 804e164:	2800      	cmp	r0, #0
 804e166:	d1e8      	bne.n	804e13a <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804e168:	4b02      	ldr	r3, [pc, #8]	; (804e174 <LORA_RequestClass+0x74>)
 804e16a:	681b      	ldr	r3, [r3, #0]
 804e16c:	4628      	mov	r0, r5
 804e16e:	699b      	ldr	r3, [r3, #24]
 804e170:	e7e9      	b.n	804e146 <LORA_RequestClass+0x46>
 804e172:	bf00      	nop
 804e174:	2000364c 	.word	0x2000364c
 804e178:	0805466d 	.word	0x0805466d

0804e17c <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804e17c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e17e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e182:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804e184:	b141      	cbz	r1, 804e198 <LPM_SetOffMode+0x1c>
 804e186:	2901      	cmp	r1, #1
 804e188:	d103      	bne.n	804e192 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 804e18a:	4b06      	ldr	r3, [pc, #24]	; (804e1a4 <LPM_SetOffMode+0x28>)
 804e18c:	681a      	ldr	r2, [r3, #0]
 804e18e:	4302      	orrs	r2, r0
 804e190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e192:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 804e196:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 804e198:	4902      	ldr	r1, [pc, #8]	; (804e1a4 <LPM_SetOffMode+0x28>)
 804e19a:	680b      	ldr	r3, [r1, #0]
 804e19c:	ea23 0300 	bic.w	r3, r3, r0
 804e1a0:	600b      	str	r3, [r1, #0]
      break;
 804e1a2:	e7f6      	b.n	804e192 <LPM_SetOffMode+0x16>
 804e1a4:	20003698 	.word	0x20003698

0804e1a8 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804e1a8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e1aa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e1ae:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804e1b0:	b141      	cbz	r1, 804e1c4 <LPM_SetStopMode+0x1c>
 804e1b2:	2901      	cmp	r1, #1
 804e1b4:	d103      	bne.n	804e1be <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 804e1b6:	4b06      	ldr	r3, [pc, #24]	; (804e1d0 <LPM_SetStopMode+0x28>)
 804e1b8:	685a      	ldr	r2, [r3, #4]
 804e1ba:	4302      	orrs	r2, r0
 804e1bc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e1be:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 804e1c2:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 804e1c4:	4902      	ldr	r1, [pc, #8]	; (804e1d0 <LPM_SetStopMode+0x28>)
 804e1c6:	684b      	ldr	r3, [r1, #4]
 804e1c8:	ea23 0300 	bic.w	r3, r3, r0
 804e1cc:	604b      	str	r3, [r1, #4]
      break;
 804e1ce:	e7f6      	b.n	804e1be <LPM_SetStopMode+0x16>
 804e1d0:	20003698 	.word	0x20003698

0804e1d4 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e1d4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e1d8:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 804e1da:	4b06      	ldr	r3, [pc, #24]	; (804e1f4 <LPM_GetMode+0x20>)
 804e1dc:	6859      	ldr	r1, [r3, #4]
 804e1de:	b939      	cbnz	r1, 804e1f0 <LPM_GetMode+0x1c>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 804e1e0:	681b      	ldr	r3, [r3, #0]
 804e1e2:	2b00      	cmp	r3, #0
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 804e1e4:	bf14      	ite	ne
 804e1e6:	2001      	movne	r0, #1
 804e1e8:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e1ea:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 804e1ee:	4770      	bx	lr
    mode_selected = LPM_SleepMode;
 804e1f0:	2000      	movs	r0, #0
 804e1f2:	e7fa      	b.n	804e1ea <LPM_GetMode+0x16>
 804e1f4:	20003698 	.word	0x20003698

0804e1f8 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804e1f8:	8843      	ldrh	r3, [r0, #2]
 804e1fa:	6882      	ldr	r2, [r0, #8]
{
 804e1fc:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804e1fe:	1c5c      	adds	r4, r3, #1
 804e200:	8044      	strh	r4, [r0, #2]
 804e202:	0a0c      	lsrs	r4, r1, #8
 804e204:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804e206:	8842      	ldrh	r2, [r0, #2]
 804e208:	88c3      	ldrh	r3, [r0, #6]
 804e20a:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804e20c:	bf04      	itt	eq
 804e20e:	2300      	moveq	r3, #0
 804e210:	8043      	strheq	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 804e212:	8843      	ldrh	r3, [r0, #2]
 804e214:	6882      	ldr	r2, [r0, #8]
 804e216:	1c5c      	adds	r4, r3, #1
 804e218:	8044      	strh	r4, [r0, #2]
 804e21a:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804e21c:	88c3      	ldrh	r3, [r0, #6]
 804e21e:	8842      	ldrh	r2, [r0, #2]
 804e220:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804e222:	bf04      	itt	eq
 804e224:	2300      	moveq	r3, #0
 804e226:	8043      	strheq	r3, [r0, #2]
  }
}
 804e228:	bd10      	pop	{r4, pc}

0804e22a <circular_queue_init>:
  queue->queue_read_idx=0;
 804e22a:	2300      	movs	r3, #0
 804e22c:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 804e22e:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 804e230:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 804e232:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 804e234:	7303      	strb	r3, [r0, #12]
}
 804e236:	4770      	bx	lr

0804e238 <circular_queue_add>:
{
 804e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804e23a:	8803      	ldrh	r3, [r0, #0]
{
 804e23c:	4615      	mov	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804e23e:	8842      	ldrh	r2, [r0, #2]
 804e240:	429a      	cmp	r2, r3
{
 804e242:	460e      	mov	r6, r1
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 804e244:	bf24      	itt	cs
 804e246:	88c1      	ldrhcs	r1, [r0, #6]
 804e248:	185b      	addcs	r3, r3, r1
  if ( queue->queue_full==1)
 804e24a:	7b01      	ldrb	r1, [r0, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804e24c:	1a9b      	subs	r3, r3, r2
    free_size=0;
 804e24e:	2901      	cmp	r1, #1
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804e250:	b21b      	sxth	r3, r3
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e252:	f105 0101 	add.w	r1, r5, #1
    free_size=0;
 804e256:	bf08      	it	eq
 804e258:	2300      	moveq	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e25a:	4299      	cmp	r1, r3
{
 804e25c:	4604      	mov	r4, r0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e25e:	da2c      	bge.n	804e2ba <circular_queue_add+0x82>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 804e260:	88c1      	ldrh	r1, [r0, #6]
 804e262:	18a8      	adds	r0, r5, r2
 804e264:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e266:	4288      	cmp	r0, r1
 804e268:	db02      	blt.n	804e270 <circular_queue_add+0x38>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 804e26a:	3902      	subs	r1, #2
 804e26c:	428a      	cmp	r2, r1
 804e26e:	db24      	blt.n	804e2ba <circular_queue_add+0x82>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804e270:	4629      	mov	r1, r5
 804e272:	4620      	mov	r0, r4
 804e274:	f7ff ffc0 	bl	804e1f8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 804e278:	8863      	ldrh	r3, [r4, #2]
 804e27a:	1e5a      	subs	r2, r3, #1
 804e27c:	68a3      	ldr	r3, [r4, #8]
 804e27e:	4413      	add	r3, r2
 804e280:	1972      	adds	r2, r6, r5
  while(size--)
 804e282:	42b2      	cmp	r2, r6
 804e284:	d114      	bne.n	804e2b0 <circular_queue_add+0x78>
    queue->queue_write_idx+=buff_size;
 804e286:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 804e288:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 804e28a:	4415      	add	r5, r2
 804e28c:	b2ad      	uxth	r5, r5
    if (queue->queue_write_idx==queue->queue_size)
 804e28e:	42ab      	cmp	r3, r5
        queue->queue_write_idx=0;
 804e290:	bf08      	it	eq
 804e292:	2300      	moveq	r3, #0
    queue->queue_write_idx+=buff_size;
 804e294:	8065      	strh	r5, [r4, #2]
        queue->queue_write_idx=0;
 804e296:	bf08      	it	eq
 804e298:	8063      	strheq	r3, [r4, #2]
    queue->queue_nb_element++; 
 804e29a:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e29c:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 804e29e:	3301      	adds	r3, #1
 804e2a0:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e2a2:	8823      	ldrh	r3, [r4, #0]
 804e2a4:	429a      	cmp	r2, r3
      queue->queue_full=1;
 804e2a6:	bf04      	itt	eq
 804e2a8:	2301      	moveq	r3, #1
 804e2aa:	7323      	strbeq	r3, [r4, #12]
    status=0;
 804e2ac:	2000      	movs	r0, #0
}
 804e2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 804e2b0:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e2b4:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e2b8:	e7e3      	b.n	804e282 <circular_queue_add+0x4a>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 804e2ba:	1ce9      	adds	r1, r5, #3
 804e2bc:	428b      	cmp	r3, r1
 804e2be:	dd31      	ble.n	804e324 <circular_queue_add+0xec>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 804e2c0:	88e7      	ldrh	r7, [r4, #6]
 804e2c2:	3f02      	subs	r7, #2
 804e2c4:	1abf      	subs	r7, r7, r2
 804e2c6:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 804e2c8:	4639      	mov	r1, r7
 804e2ca:	4620      	mov	r0, r4
 804e2cc:	f7ff ff94 	bl	804e1f8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 804e2d0:	8863      	ldrh	r3, [r4, #2]
 804e2d2:	1e5a      	subs	r2, r3, #1
 804e2d4:	68a3      	ldr	r3, [r4, #8]
 804e2d6:	4413      	add	r3, r2
 804e2d8:	19f2      	adds	r2, r6, r7
  while(size--)
 804e2da:	4296      	cmp	r6, r2
 804e2dc:	d118      	bne.n	804e310 <circular_queue_add+0xd8>
    buff_size-=top_size;
 804e2de:	1bed      	subs	r5, r5, r7
    queue->queue_write_idx=0;
 804e2e0:	2300      	movs	r3, #0
    buff_size-=top_size;
 804e2e2:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 804e2e4:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804e2e6:	4629      	mov	r1, r5
 804e2e8:	4620      	mov	r0, r4
 804e2ea:	f7ff ff85 	bl	804e1f8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 804e2ee:	8863      	ldrh	r3, [r4, #2]
 804e2f0:	1e5a      	subs	r2, r3, #1
 804e2f2:	68a3      	ldr	r3, [r4, #8]
 804e2f4:	4413      	add	r3, r2
 804e2f6:	1972      	adds	r2, r6, r5
  while(size--)
 804e2f8:	42b2      	cmp	r2, r6
 804e2fa:	d10e      	bne.n	804e31a <circular_queue_add+0xe2>
    queue->queue_nb_element+=2;
 804e2fc:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 804e2fe:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element+=2;
 804e300:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 804e302:	4415      	add	r5, r2
    queue->queue_nb_element+=2;
 804e304:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e306:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 804e308:	b2ad      	uxth	r5, r5
 804e30a:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e30c:	42ab      	cmp	r3, r5
 804e30e:	e7ca      	b.n	804e2a6 <circular_queue_add+0x6e>
    *out++= *in++;
 804e310:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e314:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e318:	e7df      	b.n	804e2da <circular_queue_add+0xa2>
 804e31a:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e31e:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e322:	e7e9      	b.n	804e2f8 <circular_queue_add+0xc0>
    status=-1;
 804e324:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e328:	e7c1      	b.n	804e2ae <circular_queue_add+0x76>

0804e32a <circular_queue_get>:
  if (queue->queue_nb_element==0)
 804e32a:	8883      	ldrh	r3, [r0, #4]
{
 804e32c:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804e32e:	b1ab      	cbz	r3, 804e35c <circular_queue_get+0x32>
    uint16_t read_idx=queue->queue_read_idx;
 804e330:	8805      	ldrh	r5, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804e332:	6884      	ldr	r4, [r0, #8]
 804e334:	1c6b      	adds	r3, r5, #1
 804e336:	5d66      	ldrb	r6, [r4, r5]
    if (read_idx==queue->queue_size)
 804e338:	88c5      	ldrh	r5, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804e33a:	b29b      	uxth	r3, r3
      read_idx=0;
 804e33c:	429d      	cmp	r5, r3
 804e33e:	bf08      	it	eq
 804e340:	2300      	moveq	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804e342:	1c58      	adds	r0, r3, #1
 804e344:	b280      	uxth	r0, r0
 804e346:	5ce3      	ldrb	r3, [r4, r3]
      read_idx=0;
 804e348:	4285      	cmp	r5, r0
 804e34a:	bf08      	it	eq
 804e34c:	2000      	moveq	r0, #0
    *buff= queue->queue_buff+read_idx;
 804e34e:	4420      	add	r0, r4
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804e350:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *buff= queue->queue_buff+read_idx;
 804e354:	6008      	str	r0, [r1, #0]
    * buff_size=size;
 804e356:	8013      	strh	r3, [r2, #0]
    status=0;
 804e358:	2000      	movs	r0, #0
}
 804e35a:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 804e35c:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e360:	e7fb      	b.n	804e35a <circular_queue_get+0x30>

0804e362 <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 804e362:	8882      	ldrh	r2, [r0, #4]
{
 804e364:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804e366:	b322      	cbz	r2, 804e3b2 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e368:	8803      	ldrh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 804e36a:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e36c:	6886      	ldr	r6, [r0, #8]
 804e36e:	1c59      	adds	r1, r3, #1
 804e370:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804e372:	42a1      	cmp	r1, r4
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e374:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804e376:	bf08      	it	eq
 804e378:	2100      	moveq	r1, #0
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e37a:	5cf3      	ldrb	r3, [r6, r3]
      queue->queue_read_idx=0;
 804e37c:	bf08      	it	eq
 804e37e:	8001      	strheq	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e380:	8805      	ldrh	r5, [r0, #0]
 804e382:	1c69      	adds	r1, r5, #1
 804e384:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804e386:	428c      	cmp	r4, r1
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e388:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804e38a:	bf08      	it	eq
 804e38c:	2100      	moveq	r1, #0
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e38e:	5d75      	ldrb	r5, [r6, r5]
      queue->queue_read_idx=0;
 804e390:	bf08      	it	eq
 804e392:	8001      	strheq	r1, [r0, #0]
    queue->queue_read_idx+=size;
 804e394:	8801      	ldrh	r1, [r0, #0]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e396:	021b      	lsls	r3, r3, #8
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e398:	432b      	orrs	r3, r5
    queue->queue_read_idx+=size;
 804e39a:	440b      	add	r3, r1
 804e39c:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 804e39e:	429c      	cmp	r4, r3
        queue->queue_read_idx=0;
 804e3a0:	bf08      	it	eq
 804e3a2:	2300      	moveq	r3, #0
 804e3a4:	8003      	strh	r3, [r0, #0]
    queue->queue_nb_element--;
 804e3a6:	3a01      	subs	r2, #1
    queue->queue_full=0;
 804e3a8:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 804e3aa:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 804e3ac:	7303      	strb	r3, [r0, #12]
    status=0;
 804e3ae:	4618      	mov	r0, r3
}
 804e3b0:	bd70      	pop	{r4, r5, r6, pc}
      status=-1;
 804e3b2:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e3b6:	e7fb      	b.n	804e3b0 <circular_queue_remove+0x4e>

0804e3b8 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 804e3b8:	8880      	ldrh	r0, [r0, #4]
 804e3ba:	fab0 f080 	clz	r0, r0
 804e3be:	0940      	lsrs	r0, r0, #5
}
 804e3c0:	4240      	negs	r0, r0
 804e3c2:	4770      	bx	lr

0804e3c4 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 804e3c4:	b082      	sub	sp, #8
 804e3c6:	b082      	sub	sp, #8
 804e3c8:	f10d 0c08 	add.w	ip, sp, #8
 804e3cc:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 804e3d0:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e3d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804e3d6:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 804e3d8:	4413      	add	r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e3da:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804e3de:	440a      	add	r2, r1
 804e3e0:	b292      	uxth	r2, r2
 804e3e2:	b211      	sxth	r1, r2
    if( c.SubSeconds >= 1000 )
 804e3e4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 804e3e8:	bfa2      	ittt	ge
 804e3ea:	f5a2 727a 	subge.w	r2, r2, #1000	; 0x3e8
        c.Seconds++;
 804e3ee:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 804e3f0:	b211      	sxthge	r1, r2
    }
    return c;
 804e3f2:	6003      	str	r3, [r0, #0]
 804e3f4:	8081      	strh	r1, [r0, #4]
}
 804e3f6:	b002      	add	sp, #8
 804e3f8:	b002      	add	sp, #8
 804e3fa:	4770      	bx	lr

0804e3fc <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 804e3fc:	b082      	sub	sp, #8
 804e3fe:	b082      	sub	sp, #8
 804e400:	f10d 0c08 	add.w	ip, sp, #8
 804e404:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 804e408:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e40a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804e40e:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 804e410:	1ad3      	subs	r3, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e412:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804e416:	1a52      	subs	r2, r2, r1
 804e418:	b292      	uxth	r2, r2
 804e41a:	b211      	sxth	r1, r2
    if( c.SubSeconds < 0 )
 804e41c:	2900      	cmp	r1, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 804e41e:	bfbe      	ittt	lt
 804e420:	f502 727a 	addlt.w	r2, r2, #1000	; 0x3e8
        c.Seconds--;
 804e424:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
 804e428:	b211      	sxthlt	r1, r2
    }
    return c;
 804e42a:	6003      	str	r3, [r0, #0]
 804e42c:	8081      	strh	r1, [r0, #4]
}
 804e42e:	b002      	add	sp, #8
 804e430:	b002      	add	sp, #8
 804e432:	4770      	bx	lr

0804e434 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 804e434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804e436:	466b      	mov	r3, sp
 804e438:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e43c:	a804      	add	r0, sp, #16
 804e43e:	2300      	movs	r3, #0
 804e440:	f820 3d04 	strh.w	r3, [r0, #-4]!
 804e444:	9302      	str	r3, [sp, #8]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e446:	f000 fecf 	bl	804f1e8 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 804e44a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e44c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e450:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 804e452:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 804e458:	1a5b      	subs	r3, r3, r1
 804e45a:	b29b      	uxth	r3, r3
 804e45c:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 804e45e:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 804e460:	bfbe      	ittt	lt
 804e462:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
 804e466:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
 804e46a:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 804e46c:	f000 fed0 	bl	804f210 <HW_RTC_BKUPWrite>
}
 804e470:	b005      	add	sp, #20
 804e472:	f85d fb04 	ldr.w	pc, [sp], #4

0804e476 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 804e476:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804e478:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e47a:	a804      	add	r0, sp, #16
 804e47c:	2300      	movs	r3, #0
 804e47e:	f820 3d0c 	strh.w	r3, [r0, #-12]!
 804e482:	9300      	str	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e484:	f000 feb0 	bl	804f1e8 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804e488:	a903      	add	r1, sp, #12
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e48a:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804e48c:	a802      	add	r0, sp, #8
 804e48e:	f000 fed1 	bl	804f234 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 804e492:	9b00      	ldr	r3, [sp, #0]
 804e494:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e496:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 804e49a:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e49c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 804e4a0:	440b      	add	r3, r1
 804e4a2:	b29b      	uxth	r3, r3
 804e4a4:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 804e4a6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 804e4aa:	bfa2      	ittt	ge
 804e4ac:	f5a3 737a 	subge.w	r3, r3, #1000	; 0x3e8
        c.Seconds++;
 804e4b0:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 804e4b2:	b219      	sxthge	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 804e4b4:	4620      	mov	r0, r4
    return sysTime;
 804e4b6:	6022      	str	r2, [r4, #0]
 804e4b8:	80a1      	strh	r1, [r4, #4]
}
 804e4ba:	b004      	add	sp, #16
 804e4bc:	bd10      	pop	{r4, pc}

0804e4be <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 804e4be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e4c0:	2300      	movs	r3, #0
{
 804e4c2:	4604      	mov	r4, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e4c4:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e4c6:	9300      	str	r3, [sp, #0]
 804e4c8:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e4cc:	f000 fe8c 	bl	804f1e8 <HW_RTC_GetCalendarTime>
 804e4d0:	466d      	mov	r5, sp
 804e4d2:	9000      	str	r0, [sp, #0]
    
    return calendarTime;
 804e4d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 804e4d8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 804e4dc:	4620      	mov	r0, r4
 804e4de:	b003      	add	sp, #12
 804e4e0:	bd30      	pop	{r4, r5, pc}

0804e4e2 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 804e4e2:	b570      	push	{r4, r5, r6, lr}
 804e4e4:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804e4e6:	f000 fd11 	bl	804ef0c <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 804e4ea:	2301      	movs	r3, #1
 804e4ec:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804e4ee:	4605      	mov	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 804e4f0:	6826      	ldr	r6, [r4, #0]
 804e4f2:	f000 fd21 	bl	804ef38 <HW_RTC_GetTimerElapsedTime>
 804e4f6:	4428      	add	r0, r5
 804e4f8:	4286      	cmp	r6, r0
 804e4fa:	d203      	bcs.n	804e504 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 804e4fc:	f000 fd1c 	bl	804ef38 <HW_RTC_GetTimerElapsedTime>
 804e500:	4428      	add	r0, r5
 804e502:	6020      	str	r0, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 804e504:	6820      	ldr	r0, [r4, #0]
}
 804e506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_RTC_SetAlarm( obj->Timestamp );
 804e50a:	f000 bd41 	b.w	804ef90 <HW_RTC_SetAlarm>
	...

0804e510 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 804e510:	4b04      	ldr	r3, [pc, #16]	; (804e524 <TimerInsertNewHeadTimer+0x14>)
 804e512:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 804e514:	b10a      	cbz	r2, 804e51a <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsNext2Expire = false;
 804e516:	2100      	movs	r1, #0
 804e518:	7251      	strb	r1, [r2, #9]
  }

  obj->Next = cur;
 804e51a:	6142      	str	r2, [r0, #20]
  TimerListHead = obj;
 804e51c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 804e51e:	f7ff bfe0 	b.w	804e4e2 <TimerSetTimeout>
 804e522:	bf00      	nop
 804e524:	200036a0 	.word	0x200036a0

0804e528 <TimerInit>:
  obj->Timestamp = 0;
 804e528:	2300      	movs	r3, #0
  obj->ReloadValue = 0;
 804e52a:	e9c0 3300 	strd	r3, r3, [r0]
  obj->IsStarted = false;
 804e52e:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 804e530:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 804e532:	e9c0 1303 	strd	r1, r3, [r0, #12]
  obj->Next = NULL;
 804e536:	6143      	str	r3, [r0, #20]
}
 804e538:	4770      	bx	lr
	...

0804e53c <TimerStart>:
{
 804e53c:	b570      	push	{r4, r5, r6, lr}
 804e53e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e540:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e544:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 804e546:	b170      	cbz	r0, 804e566 <TimerStart+0x2a>
  TimerEvent_t* cur = TimerListHead;
 804e548:	4e16      	ldr	r6, [pc, #88]	; (804e5a4 <TimerStart+0x68>)
 804e54a:	6831      	ldr	r1, [r6, #0]
 804e54c:	460b      	mov	r3, r1
  while( cur != NULL )
 804e54e:	b96b      	cbnz	r3, 804e56c <TimerStart+0x30>
  obj->Timestamp = obj->ReloadValue;
 804e550:	6862      	ldr	r2, [r4, #4]
 804e552:	6022      	str	r2, [r4, #0]
  obj->IsStarted = true;
 804e554:	2201      	movs	r2, #1
 804e556:	7222      	strb	r2, [r4, #8]
  obj->IsNext2Expire = false;
 804e558:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 804e55a:	b959      	cbnz	r1, 804e574 <TimerStart+0x38>
    HW_RTC_SetTimerContext( );
 804e55c:	f000 fdfc 	bl	804f158 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 804e560:	4620      	mov	r0, r4
 804e562:	f7ff ffd5 	bl	804e510 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e566:	f385 8810 	msr	PRIMASK, r5
}
 804e56a:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 804e56c:	429c      	cmp	r4, r3
 804e56e:	d0fa      	beq.n	804e566 <TimerStart+0x2a>
    cur = cur->Next;
 804e570:	695b      	ldr	r3, [r3, #20]
 804e572:	e7ec      	b.n	804e54e <TimerStart+0x12>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 804e574:	f000 fce0 	bl	804ef38 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 804e578:	6823      	ldr	r3, [r4, #0]
 804e57a:	4418      	add	r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 804e57c:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 804e57e:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 804e580:	681a      	ldr	r2, [r3, #0]
 804e582:	4290      	cmp	r0, r2
 804e584:	d3ec      	bcc.n	804e560 <TimerStart+0x24>
  TimerEvent_t* next = TimerListHead->Next;
 804e586:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 804e588:	6959      	ldr	r1, [r3, #20]
 804e58a:	b911      	cbnz	r1, 804e592 <TimerStart+0x56>
  cur->Next = obj;
 804e58c:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 804e58e:	6161      	str	r1, [r4, #20]
 804e590:	e7e9      	b.n	804e566 <TimerStart+0x2a>
    if( obj->Timestamp  > next->Timestamp )
 804e592:	6811      	ldr	r1, [r2, #0]
 804e594:	4288      	cmp	r0, r1
 804e596:	d902      	bls.n	804e59e <TimerStart+0x62>
        next = next->Next;
 804e598:	4613      	mov	r3, r2
 804e59a:	6952      	ldr	r2, [r2, #20]
 804e59c:	e7f4      	b.n	804e588 <TimerStart+0x4c>
        cur->Next = obj;
 804e59e:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 804e5a0:	6162      	str	r2, [r4, #20]
 804e5a2:	e7e0      	b.n	804e566 <TimerStart+0x2a>
 804e5a4:	200036a0 	.word	0x200036a0

0804e5a8 <TimerIrqHandler>:
{
 804e5a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 804e5aa:	f000 fe17 	bl	804f1dc <HW_RTC_GetTimerContext>
  if ( TimerListHead != NULL )
 804e5ae:	4c1b      	ldr	r4, [pc, #108]	; (804e61c <TimerIrqHandler+0x74>)
  uint32_t old =  HW_RTC_GetTimerContext( );
 804e5b0:	4605      	mov	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 804e5b2:	f000 fdd1 	bl	804f158 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 804e5b6:	6822      	ldr	r2, [r4, #0]
 804e5b8:	b19a      	cbz	r2, 804e5e2 <TimerIrqHandler+0x3a>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 804e5ba:	1b40      	subs	r0, r0, r5
 804e5bc:	4613      	mov	r3, r2
        next->Timestamp = 0 ;
 804e5be:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 804e5c0:	695b      	ldr	r3, [r3, #20]
 804e5c2:	b92b      	cbnz	r3, 804e5d0 <TimerIrqHandler+0x28>
    cur->IsStarted = false;
 804e5c4:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 804e5c6:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 804e5c8:	6951      	ldr	r1, [r2, #20]
 804e5ca:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 804e5cc:	b93b      	cbnz	r3, 804e5de <TimerIrqHandler+0x36>
 804e5ce:	e7fe      	b.n	804e5ce <TimerIrqHandler+0x26>
      if (next->Timestamp > DeltaContext)
 804e5d0:	6819      	ldr	r1, [r3, #0]
 804e5d2:	4281      	cmp	r1, r0
        next->Timestamp -= DeltaContext;
 804e5d4:	bf86      	itte	hi
 804e5d6:	1a09      	subhi	r1, r1, r0
 804e5d8:	6019      	strhi	r1, [r3, #0]
        next->Timestamp = 0 ;
 804e5da:	601d      	strls	r5, [r3, #0]
 804e5dc:	e7f0      	b.n	804e5c0 <TimerIrqHandler+0x18>
    exec_cb( cur->Callback, cur->Context );
 804e5de:	6910      	ldr	r0, [r2, #16]
 804e5e0:	4798      	blx	r3
   cur->IsStarted = false;
 804e5e2:	2600      	movs	r6, #0
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804e5e4:	6823      	ldr	r3, [r4, #0]
 804e5e6:	b92b      	cbnz	r3, 804e5f4 <TimerIrqHandler+0x4c>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804e5e8:	6820      	ldr	r0, [r4, #0]
 804e5ea:	b980      	cbnz	r0, 804e60e <TimerIrqHandler+0x66>
}
 804e5ec:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 804e5ee:	6918      	ldr	r0, [r3, #16]
 804e5f0:	4790      	blx	r2
 804e5f2:	e7f7      	b.n	804e5e4 <TimerIrqHandler+0x3c>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804e5f4:	681d      	ldr	r5, [r3, #0]
 804e5f6:	f000 fc9f 	bl	804ef38 <HW_RTC_GetTimerElapsedTime>
 804e5fa:	4285      	cmp	r5, r0
 804e5fc:	d2f4      	bcs.n	804e5e8 <TimerIrqHandler+0x40>
   cur = TimerListHead;
 804e5fe:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 804e600:	695a      	ldr	r2, [r3, #20]
 804e602:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback, cur->Context );
 804e604:	68da      	ldr	r2, [r3, #12]
   cur->IsStarted = false;
 804e606:	721e      	strb	r6, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 804e608:	2a00      	cmp	r2, #0
 804e60a:	d1f0      	bne.n	804e5ee <TimerIrqHandler+0x46>
 804e60c:	e7fe      	b.n	804e60c <TimerIrqHandler+0x64>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804e60e:	7a43      	ldrb	r3, [r0, #9]
 804e610:	2b00      	cmp	r3, #0
 804e612:	d1eb      	bne.n	804e5ec <TimerIrqHandler+0x44>
}
 804e614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerSetTimeout( TimerListHead );
 804e618:	f7ff bf63 	b.w	804e4e2 <TimerSetTimeout>
 804e61c:	200036a0 	.word	0x200036a0

0804e620 <TimerStop>:
{
 804e620:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e622:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e626:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 804e628:	4d10      	ldr	r5, [pc, #64]	; (804e66c <TimerStop+0x4c>)
 804e62a:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804e62c:	b103      	cbz	r3, 804e630 <TimerStop+0x10>
 804e62e:	b910      	cbnz	r0, 804e636 <TimerStop+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e630:	f386 8810 	msr	PRIMASK, r6
}  
 804e634:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 804e636:	2200      	movs	r2, #0
  if( TimerListHead == obj ) // Stop the Head                  
 804e638:	4283      	cmp	r3, r0
  obj->IsStarted = false;
 804e63a:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 804e63c:	d10e      	bne.n	804e65c <TimerStop+0x3c>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 804e63e:	7a59      	ldrb	r1, [r3, #9]
 804e640:	695c      	ldr	r4, [r3, #20]
 804e642:	b141      	cbz	r1, 804e656 <TimerStop+0x36>
      TimerListHead->IsNext2Expire = false;
 804e644:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 804e646:	b124      	cbz	r4, 804e652 <TimerStop+0x32>
        TimerSetTimeout( TimerListHead );
 804e648:	4620      	mov	r0, r4
        TimerListHead = TimerListHead->Next;
 804e64a:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 804e64c:	f7ff ff49 	bl	804e4e2 <TimerSetTimeout>
 804e650:	e7ee      	b.n	804e630 <TimerStop+0x10>
        HW_RTC_StopAlarm( );
 804e652:	f000 fc87 	bl	804ef64 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 804e656:	602c      	str	r4, [r5, #0]
 804e658:	e7ea      	b.n	804e630 <TimerStop+0x10>
 804e65a:	4613      	mov	r3, r2
        cur = cur->Next;
 804e65c:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 804e65e:	2a00      	cmp	r2, #0
 804e660:	d0e6      	beq.n	804e630 <TimerStop+0x10>
      if( cur == obj )
 804e662:	4290      	cmp	r0, r2
 804e664:	d1f9      	bne.n	804e65a <TimerStop+0x3a>
        if( cur->Next != NULL )
 804e666:	6942      	ldr	r2, [r0, #20]
          prev->Next = cur;
 804e668:	615a      	str	r2, [r3, #20]
 804e66a:	e7e1      	b.n	804e630 <TimerStop+0x10>
 804e66c:	200036a0 	.word	0x200036a0

0804e670 <TimerSetValue>:
{
 804e670:	b538      	push	{r3, r4, r5, lr}
 804e672:	4605      	mov	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 804e674:	4608      	mov	r0, r1
 804e676:	f000 fc4b 	bl	804ef10 <HW_RTC_ms2Tick>
 804e67a:	4604      	mov	r4, r0
  TimerStop( obj );
 804e67c:	4628      	mov	r0, r5
 804e67e:	f7ff ffcf 	bl	804e620 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 804e682:	f000 fc43 	bl	804ef0c <HW_RTC_GetMinimumTimeout>
 804e686:	42a0      	cmp	r0, r4
 804e688:	bf38      	it	cc
 804e68a:	4620      	movcc	r0, r4
  obj->ReloadValue = ticks;
 804e68c:	e9c5 0000 	strd	r0, r0, [r5]
}
 804e690:	bd38      	pop	{r3, r4, r5, pc}

0804e692 <TimerGetCurrentTime>:
{
 804e692:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 804e694:	f000 fc5e 	bl	804ef54 <HW_RTC_GetTimerValue>
}
 804e698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return  HW_RTC_Tick2ms(now);
 804e69c:	f000 bc41 	b.w	804ef22 <HW_RTC_Tick2ms>

0804e6a0 <TimerGetElapsedTime>:
{
 804e6a0:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 804e6a2:	4605      	mov	r5, r0
 804e6a4:	b150      	cbz	r0, 804e6bc <TimerGetElapsedTime+0x1c>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 804e6a6:	f000 fc55 	bl	804ef54 <HW_RTC_GetTimerValue>
 804e6aa:	4604      	mov	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 804e6ac:	4628      	mov	r0, r5
 804e6ae:	f000 fc2f 	bl	804ef10 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804e6b2:	1a20      	subs	r0, r4, r0
}
 804e6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804e6b8:	f000 bc33 	b.w	804ef22 <HW_RTC_Tick2ms>
}
 804e6bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0804e6c0 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 804e6c0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e6c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e6c6:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 804e6c8:	480f      	ldr	r0, [pc, #60]	; (804e708 <Trace_TxCpltCallback+0x48>)
 804e6ca:	f7ff fe4a 	bl	804e362 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 804e6ce:	480e      	ldr	r0, [pc, #56]	; (804e708 <Trace_TxCpltCallback+0x48>)
 804e6d0:	f7ff fe72 	bl	804e3b8 <circular_queue_sense>

  if ( status == 0) 
 804e6d4:	b970      	cbnz	r0, 804e6f4 <Trace_TxCpltCallback+0x34>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804e6d6:	f10d 0202 	add.w	r2, sp, #2
 804e6da:	a901      	add	r1, sp, #4
 804e6dc:	480a      	ldr	r0, [pc, #40]	; (804e708 <Trace_TxCpltCallback+0x48>)
 804e6de:	f7ff fe24 	bl	804e32a <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e6e2:	f384 8810 	msr	PRIMASK, r4
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 804e6e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 804e6ea:	9801      	ldr	r0, [sp, #4]
 804e6ec:	f001 ff2a 	bl	8050544 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 804e6f0:	b002      	add	sp, #8
 804e6f2:	bd10      	pop	{r4, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 804e6f4:	2100      	movs	r1, #0
 804e6f6:	2020      	movs	r0, #32
 804e6f8:	f7ff fd56 	bl	804e1a8 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 804e6fc:	4b03      	ldr	r3, [pc, #12]	; (804e70c <Trace_TxCpltCallback+0x4c>)
 804e6fe:	2201      	movs	r2, #1
 804e700:	701a      	strb	r2, [r3, #0]
 804e702:	f384 8810 	msr	PRIMASK, r4
}
 804e706:	e7f3      	b.n	804e6f0 <Trace_TxCpltCallback+0x30>
 804e708:	200036a4 	.word	0x200036a4
 804e70c:	200011a4 	.word	0x200011a4

0804e710 <TraceInit>:
{
 804e710:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 804e712:	4806      	ldr	r0, [pc, #24]	; (804e72c <TraceInit+0x1c>)
 804e714:	f001 fefa 	bl	805050c <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804e718:	4805      	ldr	r0, [pc, #20]	; (804e730 <TraceInit+0x20>)
 804e71a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804e71e:	f100 0110 	add.w	r1, r0, #16
}
 804e722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804e726:	f7ff bd80 	b.w	804e22a <circular_queue_init>
 804e72a:	bf00      	nop
 804e72c:	0804e6c1 	.word	0x0804e6c1
 804e730:	200036a4 	.word	0x200036a4

0804e734 <TraceSend>:
{
 804e734:	b40f      	push	{r0, r1, r2, r3}
 804e736:	b5f0      	push	{r4, r5, r6, r7, lr}
 804e738:	b0c5      	sub	sp, #276	; 0x114
 804e73a:	ab4a      	add	r3, sp, #296	; 0x128
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804e73c:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 804e740:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 804e744:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804e746:	a804      	add	r0, sp, #16
 804e748:	f003 f8ca 	bl	80518e0 <vsniprintf>
 804e74c:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e750:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e754:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 804e756:	4814      	ldr	r0, [pc, #80]	; (804e7a8 <TraceSend+0x74>)
 804e758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 804e75c:	a904      	add	r1, sp, #16
 804e75e:	f7ff fd6b 	bl	804e238 <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 804e762:	4605      	mov	r5, r0
 804e764:	b9e0      	cbnz	r0, 804e7a0 <TraceSend+0x6c>
 804e766:	4f11      	ldr	r7, [pc, #68]	; (804e7ac <TraceSend+0x78>)
 804e768:	783c      	ldrb	r4, [r7, #0]
 804e76a:	b2e4      	uxtb	r4, r4
 804e76c:	2c01      	cmp	r4, #1
 804e76e:	d117      	bne.n	804e7a0 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804e770:	f10d 0206 	add.w	r2, sp, #6
 804e774:	a903      	add	r1, sp, #12
 804e776:	480c      	ldr	r0, [pc, #48]	; (804e7a8 <TraceSend+0x74>)
 804e778:	f7ff fdd7 	bl	804e32a <circular_queue_get>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804e77c:	4621      	mov	r1, r4
 804e77e:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 804e780:	703d      	strb	r5, [r7, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804e782:	f7ff fd11 	bl	804e1a8 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e786:	f386 8810 	msr	PRIMASK, r6
    OutputTrace(buffer, bufSize);
 804e78a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 804e78e:	9803      	ldr	r0, [sp, #12]
 804e790:	f001 fed8 	bl	8050544 <vcom_Trace>
}
 804e794:	4628      	mov	r0, r5
 804e796:	b045      	add	sp, #276	; 0x114
 804e798:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804e79c:	b004      	add	sp, #16
 804e79e:	4770      	bx	lr
 804e7a0:	f386 8810 	msr	PRIMASK, r6
  return status;
 804e7a4:	e7f6      	b.n	804e794 <TraceSend+0x60>
 804e7a6:	bf00      	nop
 804e7a8:	200036a4 	.word	0x200036a4
 804e7ac:	200011a4 	.word	0x200011a4

0804e7b0 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 804e7b0:	4b07      	ldr	r3, [pc, #28]	; (804e7d0 <rand1+0x20>)
 804e7b2:	4908      	ldr	r1, [pc, #32]	; (804e7d4 <rand1+0x24>)
 804e7b4:	6818      	ldr	r0, [r3, #0]
 804e7b6:	f243 0239 	movw	r2, #12345	; 0x3039
 804e7ba:	fb01 2000 	mla	r0, r1, r0, r2
 804e7be:	6018      	str	r0, [r3, #0]
 804e7c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804e7c4:	fbb0 f3f3 	udiv	r3, r0, r3
 804e7c8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 804e7cc:	1ac0      	subs	r0, r0, r3
 804e7ce:	4770      	bx	lr
 804e7d0:	200011a8 	.word	0x200011a8
 804e7d4:	41c64e6d 	.word	0x41c64e6d

0804e7d8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 804e7d8:	4b01      	ldr	r3, [pc, #4]	; (804e7e0 <srand1+0x8>)
 804e7da:	6018      	str	r0, [r3, #0]
}
 804e7dc:	4770      	bx	lr
 804e7de:	bf00      	nop
 804e7e0:	200011a8 	.word	0x200011a8

0804e7e4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 804e7e4:	b538      	push	{r3, r4, r5, lr}
 804e7e6:	4605      	mov	r5, r0
 804e7e8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 804e7ea:	f7ff ffe1 	bl	804e7b0 <rand1>
 804e7ee:	1b61      	subs	r1, r4, r5
 804e7f0:	3101      	adds	r1, #1
 804e7f2:	fb90 f3f1 	sdiv	r3, r0, r1
 804e7f6:	fb03 0011 	mls	r0, r3, r1, r0
}
 804e7fa:	4428      	add	r0, r5
 804e7fc:	bd38      	pop	{r3, r4, r5, pc}

0804e7fe <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804e7fe:	3801      	subs	r0, #1
 804e800:	440a      	add	r2, r1
    while( size-- )
 804e802:	4291      	cmp	r1, r2
 804e804:	d100      	bne.n	804e808 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 804e806:	4770      	bx	lr
        *dst++ = *src++;
 804e808:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e80c:	f800 3f01 	strb.w	r3, [r0, #1]!
 804e810:	e7f7      	b.n	804e802 <memcpy1+0x4>

0804e812 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804e812:	4410      	add	r0, r2
 804e814:	440a      	add	r2, r1
    dst = dst + ( size - 1 );
    while( size-- )
 804e816:	4291      	cmp	r1, r2
 804e818:	d100      	bne.n	804e81c <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 804e81a:	4770      	bx	lr
        *dst-- = *src++;
 804e81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e820:	f800 3d01 	strb.w	r3, [r0, #-1]!
 804e824:	e7f7      	b.n	804e816 <memcpyr+0x4>

0804e826 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 804e826:	4402      	add	r2, r0
    while( size-- )
 804e828:	4290      	cmp	r0, r2
 804e82a:	d100      	bne.n	804e82e <memset1+0x8>
    {
        *dst++ = value;
    }
}
 804e82c:	4770      	bx	lr
        *dst++ = value;
 804e82e:	f800 1b01 	strb.w	r1, [r0], #1
 804e832:	e7f9      	b.n	804e828 <memset1+0x2>

0804e834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804e834:	f8df d034 	ldr.w	sp, [pc, #52]	; 804e86c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804e838:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804e83a:	e003      	b.n	804e844 <LoopCopyDataInit>

0804e83c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804e83c:	4b0c      	ldr	r3, [pc, #48]	; (804e870 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804e83e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804e840:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804e842:	3104      	adds	r1, #4

0804e844 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804e844:	480b      	ldr	r0, [pc, #44]	; (804e874 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804e846:	4b0c      	ldr	r3, [pc, #48]	; (804e878 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804e848:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804e84a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804e84c:	d3f6      	bcc.n	804e83c <CopyDataInit>
  ldr  r2, =_sbss
 804e84e:	4a0b      	ldr	r2, [pc, #44]	; (804e87c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804e850:	e002      	b.n	804e858 <LoopFillZerobss>

0804e852 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804e852:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804e854:	f842 3b04 	str.w	r3, [r2], #4

0804e858 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804e858:	4b09      	ldr	r3, [pc, #36]	; (804e880 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804e85a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804e85c:	d3f9      	bcc.n	804e852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804e85e:	f7f4 ff3d 	bl	80436dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804e862:	f002 f98b 	bl	8050b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804e866:	f000 ff0f 	bl	804f688 <main>
  bx  lr    
 804e86a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804e86c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804e870:	08055218 	.word	0x08055218
  ldr  r0, =_sdata
 804e874:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 804e878:	200013e0 	.word	0x200013e0
  ldr  r2, =_sbss
 804e87c:	200013e0 	.word	0x200013e0
  ldr  r3, = _ebss
 804e880:	200063b4 	.word	0x200063b4

0804e884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804e884:	e7fe      	b.n	804e884 <ADC_IRQHandler>

0804e886 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 804e886:	4770      	bx	lr

0804e888 <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 804e888:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 804e88a:	7803      	ldrb	r3, [r0, #0]
 804e88c:	2b30      	cmp	r3, #48	; 0x30
 804e88e:	d127      	bne.n	804e8e0 <Str2Int+0x58>
 804e890:	7843      	ldrb	r3, [r0, #1]
 804e892:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804e896:	2b58      	cmp	r3, #88	; 0x58
 804e898:	d122      	bne.n	804e8e0 <Str2Int+0x58>
 804e89a:	2400      	movs	r4, #0
 804e89c:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e89e:	5d43      	ldrb	r3, [r0, r5]
 804e8a0:	b193      	cbz	r3, 804e8c8 <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 804e8a2:	f023 0620 	bic.w	r6, r3, #32
 804e8a6:	3e41      	subs	r6, #65	; 0x41
 804e8a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 804e8ac:	2e05      	cmp	r6, #5
 804e8ae:	b2d7      	uxtb	r7, r2
 804e8b0:	d901      	bls.n	804e8b6 <Str2Int+0x2e>
 804e8b2:	2f09      	cmp	r7, #9
 804e8b4:	d808      	bhi.n	804e8c8 <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e8b6:	2f09      	cmp	r7, #9
 804e8b8:	ea4f 1404 	mov.w	r4, r4, lsl #4
 804e8bc:	d809      	bhi.n	804e8d2 <Str2Int+0x4a>
 804e8be:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 804e8c0:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e8c2:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e8c4:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e8c6:	d1ea      	bne.n	804e89e <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 804e8c8:	5d43      	ldrb	r3, [r0, r5]
 804e8ca:	bb4b      	cbnz	r3, 804e920 <Str2Int+0x98>
    {
      *pIntNum = val;
 804e8cc:	600c      	str	r4, [r1, #0]
      res = 1U;
 804e8ce:	2001      	movs	r0, #1
 804e8d0:	e027      	b.n	804e922 <Str2Int+0x9a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e8d2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804e8d6:	2a05      	cmp	r2, #5
 804e8d8:	bf94      	ite	ls
 804e8da:	3b37      	subls	r3, #55	; 0x37
 804e8dc:	3b57      	subhi	r3, #87	; 0x57
 804e8de:	e7ef      	b.n	804e8c0 <Str2Int+0x38>
 804e8e0:	1e44      	subs	r4, r0, #1
 804e8e2:	f100 060a 	add.w	r6, r0, #10
 804e8e6:	2300      	movs	r3, #0
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804e8e8:	270a      	movs	r7, #10
      if (pInputStr[i] == '\0')
 804e8ea:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 804e8ee:	b90a      	cbnz	r2, 804e8f4 <Str2Int+0x6c>
        *pIntNum = val;
 804e8f0:	600b      	str	r3, [r1, #0]
        res = 1U;
 804e8f2:	e7ec      	b.n	804e8ce <Str2Int+0x46>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 804e8f4:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 804e8f8:	2d4b      	cmp	r5, #75	; 0x4b
 804e8fa:	d103      	bne.n	804e904 <Str2Int+0x7c>
 804e8fc:	4284      	cmp	r4, r0
 804e8fe:	d007      	beq.n	804e910 <Str2Int+0x88>
        val = val << 10U;
 804e900:	029b      	lsls	r3, r3, #10
 804e902:	e7f5      	b.n	804e8f0 <Str2Int+0x68>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 804e904:	2d4d      	cmp	r5, #77	; 0x4d
 804e906:	d103      	bne.n	804e910 <Str2Int+0x88>
 804e908:	4284      	cmp	r4, r0
 804e90a:	d009      	beq.n	804e920 <Str2Int+0x98>
        val = val << 20U;
 804e90c:	051b      	lsls	r3, r3, #20
 804e90e:	e7ef      	b.n	804e8f0 <Str2Int+0x68>
      else if (ISVALIDDEC(pInputStr[i]))
 804e910:	3a30      	subs	r2, #48	; 0x30
 804e912:	b2d5      	uxtb	r5, r2
 804e914:	2d09      	cmp	r5, #9
 804e916:	d803      	bhi.n	804e920 <Str2Int+0x98>
    while ((i < 11U) && (res != 1U))
 804e918:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804e91a:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 804e91e:	d1e4      	bne.n	804e8ea <Str2Int+0x62>
      res = 1U;
 804e920:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 804e922:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804e924 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 804e924:	b507      	push	{r0, r1, r2, lr}
 804e926:	ab02      	add	r3, sp, #8
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804e928:	2264      	movs	r2, #100	; 0x64
{
 804e92a:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804e92e:	2101      	movs	r1, #1
 804e930:	4618      	mov	r0, r3
 804e932:	f001 ffab 	bl	805088c <COM_Transmit>
}
 804e936:	b003      	add	sp, #12
 804e938:	f85d fb04 	ldr.w	pc, [sp], #4

0804e93c <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}

void Error_Handler(void)
{
 804e93c:	b508      	push	{r3, lr}
	PRINTF("Erro Handler");
 804e93e:	4802      	ldr	r0, [pc, #8]	; (804e948 <Error_Handler+0xc>)
 804e940:	f7ff fef8 	bl	804e734 <TraceSend>
 804e944:	e7fe      	b.n	804e944 <Error_Handler+0x8>
 804e946:	bf00      	nop
 804e948:	08054a35 	.word	0x08054a35

0804e94c <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 804e94c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 804e94e:	f7f5 fd47 	bl	80443e0 <HAL_FLASH_Unlock>
 804e952:	b950      	cbnz	r0, 804e96a <FLASH_INT_If_Clear_Error+0x1e>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR);
 804e954:	4b06      	ldr	r3, [pc, #24]	; (804e970 <FLASH_INT_If_Clear_Error+0x24>)
 804e956:	22f0      	movs	r2, #240	; 0xf0
 804e958:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 804e95a:	f7f5 fd53 	bl	8044404 <HAL_FLASH_Lock>
 804e95e:	b118      	cbz	r0, 804e968 <FLASH_INT_If_Clear_Error+0x1c>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 804e960:	4804      	ldr	r0, [pc, #16]	; (804e974 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804e962:	f002 fe13 	bl	805158c <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 804e966:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 804e968:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804e96a:	4803      	ldr	r0, [pc, #12]	; (804e978 <FLASH_INT_If_Clear_Error+0x2c>)
 804e96c:	e7f9      	b.n	804e962 <FLASH_INT_If_Clear_Error+0x16>
 804e96e:	bf00      	nop
 804e970:	40023c00 	.word	0x40023c00
 804e974:	08054a42 	.word	0x08054a42
 804e978:	08054a5b 	.word	0x08054a5b

0804e97c <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804e97c:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 804e980:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804e982:	d203      	bcs.n	804e98c <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 804e984:	f002 f91e 	bl	8050bc4 <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 804e988:	2000      	movs	r0, #0
}
 804e98a:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 804e98c:	2001      	movs	r0, #1
 804e98e:	e7fc      	b.n	804e98a <FLASH_If_Read+0xe>

0804e990 <FLASH_INT_If_Erase_Size>:
{
 804e990:	b5f0      	push	{r4, r5, r6, r7, lr}
 804e992:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 804e994:	2300      	movs	r3, #0
{
 804e996:	4605      	mov	r5, r0
 804e998:	460f      	mov	r7, r1
  uint32_t sector_error = 0U;
 804e99a:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 804e99c:	f7ff ffd6 	bl	804e94c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804e9a0:	4604      	mov	r4, r0
 804e9a2:	bb90      	cbnz	r0, 804ea0a <FLASH_INT_If_Erase_Size+0x7a>
    if (HAL_FLASH_Unlock() == HAL_OK)
 804e9a4:	f7f5 fd1c 	bl	80443e0 <HAL_FLASH_Unlock>
 804e9a8:	4604      	mov	r4, r0
 804e9aa:	bba8      	cbnz	r0, 804ea18 <FLASH_INT_If_Erase_Size+0x88>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 804e9ac:	4b1b      	ldr	r3, [pc, #108]	; (804ea1c <FLASH_INT_If_Erase_Size+0x8c>)
  uint32_t sector = 0;
 804e9ae:	4606      	mov	r6, r0
 804e9b0:	4618      	mov	r0, r3
  while (Add >= FlashSectorsAddress[sector + 1])
 804e9b2:	1c72      	adds	r2, r6, #1
 804e9b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804e9b8:	428d      	cmp	r5, r1
 804e9ba:	d229      	bcs.n	804ea10 <FLASH_INT_If_Erase_Size+0x80>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804e9bc:	3f01      	subs	r7, #1
 804e9be:	443d      	add	r5, r7
  uint32_t sector = 0;
 804e9c0:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 804e9c2:	1c5a      	adds	r2, r3, #1
 804e9c4:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 804e9c8:	428d      	cmp	r5, r1
 804e9ca:	d223      	bcs.n	804ea14 <FLASH_INT_If_Erase_Size+0x84>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804e9cc:	f1c6 0501 	rsb	r5, r6, #1
 804e9d0:	441d      	add	r5, r3
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 804e9d2:	2300      	movs	r3, #0
 804e9d4:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e9d6:	4f12      	ldr	r7, [pc, #72]	; (804ea20 <FLASH_INT_If_Erase_Size+0x90>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804e9d8:	2302      	movs	r3, #2
 804e9da:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e9dc:	2d02      	cmp	r5, #2
 804e9de:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e9e0:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e9e2:	bf28      	it	cs
 804e9e4:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e9e6:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 804e9e8:	e9cd 6303 	strd	r6, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 804e9ec:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 804e9ee:	441e      	add	r6, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e9f0:	f7f5 fdec 	bl	80445cc <HAL_FLASHEx_Erase>
 804e9f4:	b110      	cbz	r0, 804e9fc <FLASH_INT_If_Erase_Size+0x6c>
          HAL_FLASH_GetError();
 804e9f6:	f7f5 fd0f 	bl	8044418 <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 804e9fa:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e9fc:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 804ea00:	603b      	str	r3, [r7, #0]
      } while (nb_sectors > 0);
 804ea02:	2d00      	cmp	r5, #0
 804ea04:	d1ea      	bne.n	804e9dc <FLASH_INT_If_Erase_Size+0x4c>
      HAL_FLASH_Lock();
 804ea06:	f7f5 fcfd 	bl	8044404 <HAL_FLASH_Lock>
}
 804ea0a:	4620      	mov	r0, r4
 804ea0c:	b007      	add	sp, #28
 804ea0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    sector++;
 804ea10:	4616      	mov	r6, r2
 804ea12:	e7ce      	b.n	804e9b2 <FLASH_INT_If_Erase_Size+0x22>
 804ea14:	4613      	mov	r3, r2
 804ea16:	e7d4      	b.n	804e9c2 <FLASH_INT_If_Erase_Size+0x32>
      e_ret_status = HAL_ERROR;
 804ea18:	2401      	movs	r4, #1
 804ea1a:	e7f6      	b.n	804ea0a <FLASH_INT_If_Erase_Size+0x7a>
 804ea1c:	200011ac 	.word	0x200011ac
 804ea20:	40003000 	.word	0x40003000

0804ea24 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 804ea24:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804ea28:	d201      	bcs.n	804ea2e <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 804ea2a:	f7ff bfb1 	b.w	804e990 <FLASH_INT_If_Erase_Size>
}
 804ea2e:	2001      	movs	r0, #1
 804ea30:	4770      	bx	lr

0804ea32 <FLASH_INT_If_Write>:
{
 804ea32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ea36:	4605      	mov	r5, r0
 804ea38:	460e      	mov	r6, r1
 804ea3a:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 804ea3c:	f7ff ff86 	bl	804e94c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804ea40:	4604      	mov	r4, r0
 804ea42:	b940      	cbnz	r0, 804ea56 <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 804ea44:	f7f5 fccc 	bl	80443e0 <HAL_FLASH_Unlock>
 804ea48:	4604      	mov	r4, r0
 804ea4a:	b9c8      	cbnz	r0, 804ea80 <FLASH_INT_If_Write+0x4e>
 804ea4c:	442f      	add	r7, r5
      for (i = 0U; i < uLength; i++)
 804ea4e:	42bd      	cmp	r5, r7
 804ea50:	d104      	bne.n	804ea5c <FLASH_INT_If_Write+0x2a>
      HAL_FLASH_Lock();
 804ea52:	f7f5 fcd7 	bl	8044404 <HAL_FLASH_Lock>
}
 804ea56:	4620      	mov	r0, r4
 804ea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 804ea5c:	7832      	ldrb	r2, [r6, #0]
 804ea5e:	2300      	movs	r3, #0
 804ea60:	4629      	mov	r1, r5
 804ea62:	2000      	movs	r0, #0
 804ea64:	46b0      	mov	r8, r6
 804ea66:	f7f5 fd07 	bl	8044478 <HAL_FLASH_Program>
 804ea6a:	b938      	cbnz	r0, 804ea7c <FLASH_INT_If_Write+0x4a>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 804ea6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 804ea70:	f898 2000 	ldrb.w	r2, [r8]
 804ea74:	429a      	cmp	r2, r3
 804ea76:	f106 0601 	add.w	r6, r6, #1
 804ea7a:	d0e8      	beq.n	804ea4e <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 804ea7c:	2401      	movs	r4, #1
 804ea7e:	e7e8      	b.n	804ea52 <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 804ea80:	2401      	movs	r4, #1
 804ea82:	e7e8      	b.n	804ea56 <FLASH_INT_If_Write+0x24>

0804ea84 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 804ea84:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804ea88:	d201      	bcs.n	804ea8e <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 804ea8a:	f7ff bfd2 	b.w	804ea32 <FLASH_INT_If_Write>
}
 804ea8e:	2001      	movs	r0, #1
 804ea90:	4770      	bx	lr
	...

0804ea94 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 804ea94:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 804ea96:	4b07      	ldr	r3, [pc, #28]	; (804eab4 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 804ea98:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 804ea9a:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 804ea9e:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 804eaa2:	0a80      	lsrs	r0, r0, #10
 804eaa4:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 804eaa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804eaaa:	f001 f983 	bl	804fdb4 <HAL_Delay>

  return HAL_OK;
}
 804eaae:	4620      	mov	r0, r4
 804eab0:	bd10      	pop	{r4, pc}
 804eab2:	bf00      	nop
 804eab4:	200037b4 	.word	0x200037b4

0804eab8 <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 804eab8:	b570      	push	{r4, r5, r6, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 804eaba:	4c43      	ldr	r4, [pc, #268]	; (804ebc8 <Ymodem_DataPktRxCpltCallback+0x110>)
 804eabc:	6823      	ldr	r3, [r4, #0]
{
 804eabe:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804eac0:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 804eac2:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804eac4:	4293      	cmp	r3, r2
{
 804eac6:	b0d0      	sub	sp, #320	; 0x140
 804eac8:	4606      	mov	r6, r0
  m_uPacketsReceived++;
 804eaca:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804eacc:	d106      	bne.n	804eadc <Ymodem_DataPktRxCpltCallback+0x24>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 804eace:	6865      	ldr	r5, [r4, #4]
 804ead0:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 804ead4:	2d00      	cmp	r5, #0
 804ead6:	bf08      	it	eq
 804ead8:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 804eadc:	2b01      	cmp	r3, #1
 804eade:	d112      	bne.n	804eb06 <Ymodem_DataPktRxCpltCallback+0x4e>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 804eae0:	4b3a      	ldr	r3, [pc, #232]	; (804ebcc <Ymodem_DataPktRxCpltCallback+0x114>)
 804eae2:	4a3b      	ldr	r2, [pc, #236]	; (804ebd0 <Ymodem_DataPktRxCpltCallback+0x118>)
 804eae4:	69db      	ldr	r3, [r3, #28]
 804eae6:	69d2      	ldr	r2, [r2, #28]
 804eae8:	68f0      	ldr	r0, [r6, #12]
 804eaea:	3301      	adds	r3, #1
 804eaec:	1a9b      	subs	r3, r3, r2
 804eaee:	fbb0 f2f3 	udiv	r2, r0, r3
 804eaf2:	fb03 0312 	mls	r3, r3, r2, r0
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804eaf6:	6932      	ldr	r2, [r6, #16]
    m_uDwlImgCurrent = uFlashDestination;
 804eaf8:	e9c4 1103 	strd	r1, r1, [r4, #12]
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804eafc:	4411      	add	r1, r2
                   + SFU_IMG_IMAGE_OFFSET;
 804eafe:	f501 7100 	add.w	r1, r1, #512	; 0x200
 804eb02:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804eb04:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804eb06:	68e3      	ldr	r3, [r4, #12]
 804eb08:	6920      	ldr	r0, [r4, #16]
 804eb0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 804eb0e:	4283      	cmp	r3, r0
 804eb10:	d946      	bls.n	804eba0 <Ymodem_DataPktRxCpltCallback+0xe8>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 804eb12:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804eb14:	4293      	cmp	r3, r2
 804eb16:	d843      	bhi.n	804eba0 <Ymodem_DataPktRxCpltCallback+0xe8>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 804eb18:	f44f 7200 	mov.w	r2, #512	; 0x200
 804eb1c:	4631      	mov	r1, r6
 804eb1e:	f7ff ffb1 	bl	804ea84 <FLASH_If_Write>
 804eb22:	2800      	cmp	r0, #0
 804eb24:	d13e      	bne.n	804eba4 <Ymodem_DataPktRxCpltCallback+0xec>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 804eb26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804eb2a:	68e1      	ldr	r1, [r4, #12]
 804eb2c:	4668      	mov	r0, sp
 804eb2e:	f7ff ff25 	bl	804e97c <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 804eb32:	4b26      	ldr	r3, [pc, #152]	; (804ebcc <Ymodem_DataPktRxCpltCallback+0x114>)
 804eb34:	4a26      	ldr	r2, [pc, #152]	; (804ebd0 <Ymodem_DataPktRxCpltCallback+0x118>)
 804eb36:	69db      	ldr	r3, [r3, #28]
 804eb38:	69d2      	ldr	r2, [r2, #28]
 804eb3a:	9903      	ldr	r1, [sp, #12]
 804eb3c:	3301      	adds	r3, #1
 804eb3e:	1a9b      	subs	r3, r3, r2
 804eb40:	fbb1 f2f3 	udiv	r2, r1, r3
 804eb44:	fb03 1312 	mls	r3, r3, r2, r1
 804eb48:	6922      	ldr	r2, [r4, #16]
 804eb4a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 804eb4e:	4413      	add	r3, r2
 804eb50:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 804eb52:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 804eb56:	f506 7600 	add.w	r6, r6, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 804eb5a:	b19d      	cbz	r5, 804eb84 <Ymodem_DataPktRxCpltCallback+0xcc>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 804eb5c:	076b      	lsls	r3, r5, #29
 804eb5e:	d00b      	beq.n	804eb78 <Ymodem_DataPktRxCpltCallback+0xc0>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804eb60:	6962      	ldr	r2, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804eb62:	f025 0307 	bic.w	r3, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804eb66:	3208      	adds	r2, #8
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804eb68:	3308      	adds	r3, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804eb6a:	6162      	str	r2, [r4, #20]
 804eb6c:	4435      	add	r5, r6
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 804eb6e:	21ff      	movs	r1, #255	; 0xff
      while (uOldSize < uSize)
 804eb70:	1baa      	subs	r2, r5, r6
 804eb72:	429a      	cmp	r2, r3
 804eb74:	d318      	bcc.n	804eba8 <Ymodem_DataPktRxCpltCallback+0xf0>
 804eb76:	461d      	mov	r5, r3
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804eb78:	6923      	ldr	r3, [r4, #16]
 804eb7a:	6962      	ldr	r2, [r4, #20]
 804eb7c:	1959      	adds	r1, r3, r5
 804eb7e:	4291      	cmp	r1, r2
 804eb80:	d915      	bls.n	804ebae <Ymodem_DataPktRxCpltCallback+0xf6>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 804eb82:	2001      	movs	r0, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 804eb84:	68a3      	ldr	r3, [r4, #8]
 804eb86:	6822      	ldr	r2, [r4, #0]
 804eb88:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 804eb8a:	bf04      	itt	eq
 804eb8c:	2300      	moveq	r3, #0
 804eb8e:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 804eb90:	2801      	cmp	r0, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 804eb92:	bf02      	ittt	eq
 804eb94:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
 804eb96:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 804eb9a:	60a3      	streq	r3, [r4, #8]
  }
  return e_ret_status;
}
 804eb9c:	b050      	add	sp, #320	; 0x140
 804eb9e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 804eba0:	2000      	movs	r0, #0
 804eba2:	e7da      	b.n	804eb5a <Ymodem_DataPktRxCpltCallback+0xa2>
      e_ret_status = HAL_ERROR;
 804eba4:	2001      	movs	r0, #1
 804eba6:	e7d8      	b.n	804eb5a <Ymodem_DataPktRxCpltCallback+0xa2>
        pData[uOldSize] = 0xFF;
 804eba8:	f805 1b01 	strb.w	r1, [r5], #1
 804ebac:	e7e0      	b.n	804eb70 <Ymodem_DataPktRxCpltCallback+0xb8>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804ebae:	2800      	cmp	r0, #0
 804ebb0:	d1e7      	bne.n	804eb82 <Ymodem_DataPktRxCpltCallback+0xca>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 804ebb2:	462a      	mov	r2, r5
 804ebb4:	4631      	mov	r1, r6
 804ebb6:	4618      	mov	r0, r3
 804ebb8:	f7ff ff64 	bl	804ea84 <FLASH_If_Write>
 804ebbc:	2800      	cmp	r0, #0
 804ebbe:	d1e0      	bne.n	804eb82 <Ymodem_DataPktRxCpltCallback+0xca>
        m_uDwlImgCurrent += uSize;
 804ebc0:	6923      	ldr	r3, [r4, #16]
 804ebc2:	441d      	add	r5, r3
 804ebc4:	6125      	str	r5, [r4, #16]
 804ebc6:	e7dd      	b.n	804eb84 <Ymodem_DataPktRxCpltCallback+0xcc>
 804ebc8:	200037b4 	.word	0x200037b4
 804ebcc:	08054298 	.word	0x08054298
 804ebd0:	08054278 	.word	0x08054278

0804ebd4 <FW_UPDATE_Run>:
{
 804ebd4:	b530      	push	{r4, r5, lr}
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804ebd6:	4831      	ldr	r0, [pc, #196]	; (804ec9c <FW_UPDATE_Run+0xc8>)
{
 804ebd8:	b0d7      	sub	sp, #348	; 0x15c
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804ebda:	f7ff fdab 	bl	804e734 <TraceSend>
  refresh_iwdg();
 804ebde:	f001 fbe5 	bl	80503ac <refresh_iwdg>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 804ebe2:	a902      	add	r1, sp, #8
 804ebe4:	2004      	movs	r0, #4
 804ebe6:	f000 fffb 	bl	804fbe0 <SFU_APP_GetDownloadAreaInfo>
  refresh_iwdg();
 804ebea:	f001 fbdf 	bl	80503ac <refresh_iwdg>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 804ebee:	4b2c      	ldr	r3, [pc, #176]	; (804eca0 <FW_UPDATE_Run+0xcc>)
 804ebf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 804ebf4:	ac06      	add	r4, sp, #24
 804ebf6:	e884 0003 	stmia.w	r4, {r0, r1}
  PRINTF("  -- Send Firmware \r\n\n");
 804ebfa:	482a      	ldr	r0, [pc, #168]	; (804eca4 <FW_UPDATE_Run+0xd0>)
 804ebfc:	f7ff fd9a 	bl	804e734 <TraceSend>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804ec00:	4b29      	ldr	r3, [pc, #164]	; (804eca8 <FW_UPDATE_Run+0xd4>)
 804ec02:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804ec06:	601a      	str	r2, [r3, #0]
  refresh_iwdg();
 804ec08:	f001 fbd0 	bl	80503ac <refresh_iwdg>
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804ec0c:	4827      	ldr	r0, [pc, #156]	; (804ecac <FW_UPDATE_Run+0xd8>)
 804ec0e:	f7ff fd91 	bl	804e734 <TraceSend>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 804ec12:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 804ec16:	f7ff ff05 	bl	804ea24 <FLASH_If_Erase_Size>
 804ec1a:	bb80      	cbnz	r0, 804ec7e <FW_UPDATE_Run+0xaa>
	  PRINTF("  -- -- File> Transfer> YMODEM> Send ");
 804ec1c:	4824      	ldr	r0, [pc, #144]	; (804ecb0 <FW_UPDATE_Run+0xdc>)
 804ec1e:	f7ff fd89 	bl	804e734 <TraceSend>
	 refresh_iwdg();
 804ec22:	f001 fbc3 	bl	80503ac <refresh_iwdg>
    Ymodem_Init();
 804ec26:	f001 fe49 	bl	80508bc <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 804ec2a:	4622      	mov	r2, r4
 804ec2c:	9903      	ldr	r1, [sp, #12]
 804ec2e:	a801      	add	r0, sp, #4
 804ec30:	f001 fe46 	bl	80508c0 <Ymodem_Receive>
 804ec34:	4605      	mov	r5, r0
    PRINTF("\r\n\n");
 804ec36:	481f      	ldr	r0, [pc, #124]	; (804ecb4 <FW_UPDATE_Run+0xe0>)
 804ec38:	f7ff fd7c 	bl	804e734 <TraceSend>
    if ((e_result == COM_OK))
 804ec3c:	bb35      	cbnz	r5, 804ec8c <FW_UPDATE_Run+0xb8>
    	PRINTF("  -- -- Programming Completed Successfully!\r\n\n");
 804ec3e:	481e      	ldr	r0, [pc, #120]	; (804ecb8 <FW_UPDATE_Run+0xe4>)
 804ec40:	f7ff fd78 	bl	804e734 <TraceSend>
    	PRINTF("  -- -- Bytes: %ld\r\n\n", u_fw_size);
 804ec44:	9901      	ldr	r1, [sp, #4]
 804ec46:	481d      	ldr	r0, [pc, #116]	; (804ecbc <FW_UPDATE_Run+0xe8>)
 804ec48:	f7ff fd74 	bl	804e734 <TraceSend>
    ret = FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 804ec4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804ec50:	9903      	ldr	r1, [sp, #12]
 804ec52:	4620      	mov	r0, r4
 804ec54:	f7ff fe92 	bl	804e97c <FLASH_If_Read>
 804ec58:	4605      	mov	r5, r0
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 804ec5a:	4620      	mov	r0, r4
 804ec5c:	f000 ffa4 	bl	804fba8 <SFU_APP_InstallAtNextReset>
    PRINTF("  -- Image correctly downloaded - reboot\r\n\n");
 804ec60:	4817      	ldr	r0, [pc, #92]	; (804ecc0 <FW_UPDATE_Run+0xec>)
 804ec62:	f7ff fd67 	bl	804e734 <TraceSend>
    COM_Transmit((uint8_t*)&answer_update_success_buffer, sizeof(answer_update_success_buffer), 100);
 804ec66:	2264      	movs	r2, #100	; 0x64
 804ec68:	2103      	movs	r1, #3
 804ec6a:	4816      	ldr	r0, [pc, #88]	; (804ecc4 <FW_UPDATE_Run+0xf0>)
 804ec6c:	f001 fe0e 	bl	805088c <COM_Transmit>
    HAL_Delay(1000U);
 804ec70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804ec74:	f001 f89e 	bl	804fdb4 <HAL_Delay>
    HAL_NVIC_SystemReset();
 804ec78:	f7f5 f952 	bl	8043f20 <HAL_NVIC_SystemReset>
  if (ret != HAL_OK)
 804ec7c:	b115      	cbz	r5, 804ec84 <FW_UPDATE_Run+0xb0>
	  PRINTF("  -- !!Operation failed!! \r\n\n");
 804ec7e:	4812      	ldr	r0, [pc, #72]	; (804ecc8 <FW_UPDATE_Run+0xf4>)
 804ec80:	f7ff fd58 	bl	804e734 <TraceSend>
  HAL_NVIC_SystemReset();
 804ec84:	f7f5 f94c 	bl	8043f20 <HAL_NVIC_SystemReset>
}
 804ec88:	b057      	add	sp, #348	; 0x15c
 804ec8a:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 804ec8c:	2d02      	cmp	r5, #2
    	PRINTF("  -- -- !!Aborted by user!!\r\n\n");
 804ec8e:	bf0c      	ite	eq
 804ec90:	480e      	ldreq	r0, [pc, #56]	; (804eccc <FW_UPDATE_Run+0xf8>)
    	PRINTF("  -- -- !!Error during file download!!\r\n\n");
 804ec92:	480f      	ldrne	r0, [pc, #60]	; (804ecd0 <FW_UPDATE_Run+0xfc>)
 804ec94:	f7ff fd4e 	bl	804e734 <TraceSend>
 804ec98:	e7f1      	b.n	804ec7e <FW_UPDATE_Run+0xaa>
 804ec9a:	bf00      	nop
 804ec9c:	08054a76 	.word	0x08054a76
 804eca0:	08054258 	.word	0x08054258
 804eca4:	08054ab6 	.word	0x08054ab6
 804eca8:	40003000 	.word	0x40003000
 804ecac:	08054acd 	.word	0x08054acd
 804ecb0:	08054af2 	.word	0x08054af2
 804ecb4:	08054bec 	.word	0x08054bec
 804ecb8:	08054b18 	.word	0x08054b18
 804ecbc:	08054b47 	.word	0x08054b47
 804ecc0:	08054b5d 	.word	0x08054b5d
 804ecc4:	20001013 	.word	0x20001013
 804ecc8:	08054bd2 	.word	0x08054bd2
 804eccc:	08054b89 	.word	0x08054b89
 804ecd0:	08054ba8 	.word	0x08054ba8

0804ecd4 <HW_GPIO_GetBitPos>:

  if ((GPIO_Pin & 0xFF00) != 0)
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 804ecd4:	4a0a      	ldr	r2, [pc, #40]	; (804ed00 <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 804ecd6:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 804ecda:	bf14      	ite	ne
 804ecdc:	2308      	movne	r3, #8
 804ecde:	2300      	moveq	r3, #0
  if ((GPIO_Pin & 0xF0F0) != 0)
 804ece0:	4210      	tst	r0, r2
  {
    PinPos |= 0x4;
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 804ece2:	4a08      	ldr	r2, [pc, #32]	; (804ed04 <HW_GPIO_GetBitPos+0x30>)
    PinPos |= 0x4;
 804ece4:	bf18      	it	ne
 804ece6:	f043 0304 	orrne.w	r3, r3, #4
  if ((GPIO_Pin & 0xCCCC) != 0)
 804ecea:	4210      	tst	r0, r2
  {
    PinPos |= 0x2;
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 804ecec:	4a06      	ldr	r2, [pc, #24]	; (804ed08 <HW_GPIO_GetBitPos+0x34>)
    PinPos |= 0x2;
 804ecee:	bf18      	it	ne
 804ecf0:	f043 0302 	orrne.w	r3, r3, #2
  if ((GPIO_Pin & 0xAAAA) != 0)
 804ecf4:	4210      	tst	r0, r2
  {
    PinPos |= 0x1;
 804ecf6:	bf18      	it	ne
 804ecf8:	f043 0301 	orrne.w	r3, r3, #1
  }


  return PinPos;
}
 804ecfc:	4618      	mov	r0, r3
 804ecfe:	4770      	bx	lr
 804ed00:	fffff0f0 	.word	0xfffff0f0
 804ed04:	ffffcccc 	.word	0xffffcccc
 804ed08:	ffffaaaa 	.word	0xffffaaaa

0804ed0c <HW_GPIO_Init>:
{
 804ed0c:	b430      	push	{r4, r5}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804ed0e:	4b28      	ldr	r3, [pc, #160]	; (804edb0 <HW_GPIO_Init+0xa4>)
 804ed10:	4298      	cmp	r0, r3
{
 804ed12:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804ed14:	f04f 0400 	mov.w	r4, #0
 804ed18:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 804ed1c:	d032      	beq.n	804ed84 <HW_GPIO_Init+0x78>
 804ed1e:	d80f      	bhi.n	804ed40 <HW_GPIO_Init+0x34>
 804ed20:	4d24      	ldr	r5, [pc, #144]	; (804edb4 <HW_GPIO_Init+0xa8>)
 804ed22:	42a8      	cmp	r0, r5
 804ed24:	d01e      	beq.n	804ed64 <HW_GPIO_Init+0x58>
 804ed26:	2300      	movs	r3, #0
 804ed28:	9305      	str	r3, [sp, #20]
 804ed2a:	4b23      	ldr	r3, [pc, #140]	; (804edb8 <HW_GPIO_Init+0xac>)
 804ed2c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804ed2e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 804ed32:	631c      	str	r4, [r3, #48]	; 0x30
 804ed34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ed36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804ed3a:	9305      	str	r3, [sp, #20]
 804ed3c:	9b05      	ldr	r3, [sp, #20]
 804ed3e:	e01b      	b.n	804ed78 <HW_GPIO_Init+0x6c>
 804ed40:	4d1e      	ldr	r5, [pc, #120]	; (804edbc <HW_GPIO_Init+0xb0>)
 804ed42:	42a8      	cmp	r0, r5
 804ed44:	d029      	beq.n	804ed9a <HW_GPIO_Init+0x8e>
 804ed46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 804ed4a:	42a8      	cmp	r0, r5
 804ed4c:	d1eb      	bne.n	804ed26 <HW_GPIO_Init+0x1a>
 804ed4e:	9404      	str	r4, [sp, #16]
 804ed50:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804ed52:	f044 0408 	orr.w	r4, r4, #8
 804ed56:	631c      	str	r4, [r3, #48]	; 0x30
 804ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ed5a:	f003 0308 	and.w	r3, r3, #8
 804ed5e:	9304      	str	r3, [sp, #16]
 804ed60:	9b04      	ldr	r3, [sp, #16]
 804ed62:	e009      	b.n	804ed78 <HW_GPIO_Init+0x6c>
 804ed64:	9401      	str	r4, [sp, #4]
 804ed66:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804ed68:	f044 0401 	orr.w	r4, r4, #1
 804ed6c:	631c      	str	r4, [r3, #48]	; 0x30
 804ed6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ed70:	f003 0301 	and.w	r3, r3, #1
 804ed74:	9301      	str	r3, [sp, #4]
 804ed76:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 804ed78:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 804ed7a:	4611      	mov	r1, r2
}
 804ed7c:	b006      	add	sp, #24
 804ed7e:	bc30      	pop	{r4, r5}
  HAL_GPIO_Init(port, initStruct);
 804ed80:	f7f5 bc72 	b.w	8044668 <HAL_GPIO_Init>
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804ed84:	9402      	str	r4, [sp, #8]
 804ed86:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804ed88:	f044 0402 	orr.w	r4, r4, #2
 804ed8c:	631c      	str	r4, [r3, #48]	; 0x30
 804ed8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ed90:	f003 0302 	and.w	r3, r3, #2
 804ed94:	9302      	str	r3, [sp, #8]
 804ed96:	9b02      	ldr	r3, [sp, #8]
 804ed98:	e7ee      	b.n	804ed78 <HW_GPIO_Init+0x6c>
 804ed9a:	9403      	str	r4, [sp, #12]
 804ed9c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804ed9e:	f044 0404 	orr.w	r4, r4, #4
 804eda2:	631c      	str	r4, [r3, #48]	; 0x30
 804eda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eda6:	f003 0304 	and.w	r3, r3, #4
 804edaa:	9303      	str	r3, [sp, #12]
 804edac:	9b03      	ldr	r3, [sp, #12]
 804edae:	e7e3      	b.n	804ed78 <HW_GPIO_Init+0x6c>
 804edb0:	40020400 	.word	0x40020400
 804edb4:	40020000 	.word	0x40020000
 804edb8:	40023800 	.word	0x40023800
 804edbc:	40020800 	.word	0x40020800

0804edc0 <HW_GPIO_SetIrq>:
{
 804edc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804edc2:	4608      	mov	r0, r1
{
 804edc4:	461c      	mov	r4, r3
 804edc6:	4615      	mov	r5, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804edc8:	f7ff ff84 	bl	804ecd4 <HW_GPIO_GetBitPos>
 804edcc:	4b08      	ldr	r3, [pc, #32]	; (804edf0 <HW_GPIO_SetIrq+0x30>)
    GpioIrq[ BitPos ] = irqHandler;
 804edce:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  if (irqHandler != NULL)
 804edd2:	b164      	cbz	r4, 804edee <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804edd4:	4608      	mov	r0, r1
 804edd6:	f001 f841 	bl	804fe5c <MSP_GetIRQn>
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804edda:	4629      	mov	r1, r5
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804eddc:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804edde:	2200      	movs	r2, #0
 804ede0:	f7f5 f848 	bl	8043e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 804ede4:	4620      	mov	r0, r4
}
 804ede6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_NVIC_EnableIRQ(IRQnb);
 804edea:	f7f5 b877 	b.w	8043edc <HAL_NVIC_EnableIRQ>
}
 804edee:	bd38      	pop	{r3, r4, r5, pc}
 804edf0:	200037cc 	.word	0x200037cc

0804edf4 <HW_GPIO_IrqHandler>:
{
 804edf4:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 804edf6:	f7ff ff6d 	bl	804ecd4 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 804edfa:	4b04      	ldr	r3, [pc, #16]	; (804ee0c <HW_GPIO_IrqHandler+0x18>)
 804edfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804ee00:	b11b      	cbz	r3, 804ee0a <HW_GPIO_IrqHandler+0x16>
    GpioIrq[ BitPos ](NULL);
 804ee02:	2000      	movs	r0, #0
}
 804ee04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GpioIrq[ BitPos ](NULL);
 804ee08:	4718      	bx	r3
}
 804ee0a:	bd10      	pop	{r4, pc}
 804ee0c:	200037cc 	.word	0x200037cc

0804ee10 <HW_GPIO_Write>:
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 804ee10:	b2d2      	uxtb	r2, r2
 804ee12:	f7f5 bd9d 	b.w	8044950 <HAL_GPIO_WritePin>
	...

0804ee18 <HW_I2C1_Init>:



/* I2C1 init function */
void HW_I2C1_Init(void)
{
 804ee18:	b508      	push	{r3, lr}
//  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
//  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
//  {
//    Error_Handler();
//  }
	hi2c1.Instance = I2C1;
 804ee1a:	480b      	ldr	r0, [pc, #44]	; (804ee48 <HW_I2C1_Init+0x30>)
	hi2c1.Init.ClockSpeed = 100000;
 804ee1c:	4a0b      	ldr	r2, [pc, #44]	; (804ee4c <HW_I2C1_Init+0x34>)
 804ee1e:	4b0c      	ldr	r3, [pc, #48]	; (804ee50 <HW_I2C1_Init+0x38>)
 804ee20:	e9c0 2300 	strd	r2, r3, [r0]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 804ee24:	2300      	movs	r3, #0
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 804ee26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 804ee2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 804ee2e:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 804ee32:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804ee36:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 804ee38:	f7f5 ff70 	bl	8044d1c <HAL_I2C_Init>
 804ee3c:	b118      	cbz	r0, 804ee46 <HW_I2C1_Init+0x2e>
	{
		Error_Handler();
	}

}
 804ee3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 804ee42:	f7ff bd7b 	b.w	804e93c <Error_Handler>
}
 804ee46:	bd08      	pop	{r3, pc}
 804ee48:	20006038 	.word	0x20006038
 804ee4c:	40005400 	.word	0x40005400
 804ee50:	000186a0 	.word	0x000186a0

0804ee54 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 804ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ee58:	2200      	movs	r2, #0
{
 804ee5a:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ee5c:	4826      	ldr	r0, [pc, #152]	; (804eef8 <HW_RTC_GetCalendarValue+0xa4>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 804ee5e:	4f27      	ldr	r7, [pc, #156]	; (804eefc <HW_RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804ee60:	f8df 8094 	ldr.w	r8, [pc, #148]	; 804eef8 <HW_RTC_GetCalendarValue+0xa4>
{
 804ee64:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ee66:	f7f6 ff4c 	bl	8045d02 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804ee6a:	2200      	movs	r2, #0
 804ee6c:	4629      	mov	r1, r5
 804ee6e:	4640      	mov	r0, r8
 804ee70:	6abe      	ldr	r6, [r7, #40]	; 0x28
 804ee72:	f7f6 ff6d 	bl	8045d50 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ee76:	2200      	movs	r2, #0
 804ee78:	4621      	mov	r1, r4
 804ee7a:	4640      	mov	r0, r8
 804ee7c:	f7f6 ff41 	bl	8045d02 <HAL_RTC_GetTime>
 804ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804ee82:	b2b6      	uxth	r6, r6
 804ee84:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 804ee86:	42b3      	cmp	r3, r6
 804ee88:	d1ef      	bne.n	804ee6a <HW_RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804ee8a:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 804ee8c:	4a1c      	ldr	r2, [pc, #112]	; (804ef00 <HW_RTC_GetCalendarValue+0xac>)
 804ee8e:	491d      	ldr	r1, [pc, #116]	; (804ef04 <HW_RTC_GetCalendarValue+0xb0>)
 804ee90:	f013 0f03 	tst.w	r3, #3
 804ee94:	bf08      	it	eq
 804ee96:	4611      	moveq	r1, r2

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804ee98:	786a      	ldrb	r2, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804ee9a:	f240 50b5 	movw	r0, #1461	; 0x5b5
 804ee9e:	4358      	muls	r0, r3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804eea0:	3a01      	subs	r2, #1
 804eea2:	233d      	movs	r3, #61	; 0x3d
 804eea4:	4353      	muls	r3, r2
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804eea6:	1cc6      	adds	r6, r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804eea8:	3301      	adds	r3, #1
 804eeaa:	2002      	movs	r0, #2
 804eeac:	fb93 f3f0 	sdiv	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 804eeb0:	78a8      	ldrb	r0, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804eeb2:	0052      	lsls	r2, r2, #1
 804eeb4:	3801      	subs	r0, #1
 804eeb6:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 804eeba:	fa21 f202 	lsr.w	r2, r1, r2
 804eebe:	4403      	add	r3, r0
 804eec0:	f002 0203 	and.w	r2, r2, #3
  seconds += (RTC_DateStruct->Date - 1);
 804eec4:	1a9b      	subs	r3, r3, r2

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804eec6:	7862      	ldrb	r2, [r4, #1]
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 804eec8:	7821      	ldrb	r1, [r4, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804eeca:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804eece:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 804eed2:	0092      	lsls	r2, r2, #2
 804eed4:	fb00 2201 	mla	r2, r0, r1, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804eed8:	78a1      	ldrb	r1, [r4, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804eeda:	440a      	add	r2, r1
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804eedc:	490a      	ldr	r1, [pc, #40]	; (804ef08 <HW_RTC_GetCalendarValue+0xb4>)
 804eede:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 804eee2:	0d9e      	lsrs	r6, r3, #22
 804eee4:	029d      	lsls	r5, r3, #10
 804eee6:	6863      	ldr	r3, [r4, #4]
 804eee8:	f5c3 53f9 	rsb	r3, r3, #7968	; 0x1f20
 804eeec:	331f      	adds	r3, #31

  return (calendarValue);
}
 804eeee:	18e8      	adds	r0, r5, r3
 804eef0:	f146 0100 	adc.w	r1, r6, #0
 804eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804eef8:	2000380c 	.word	0x2000380c
 804eefc:	40002800 	.word	0x40002800
 804ef00:	00445550 	.word	0x00445550
 804ef04:	0099aaa0 	.word	0x0099aaa0
 804ef08:	00015180 	.word	0x00015180

0804ef0c <HW_RTC_GetMinimumTimeout>:
}
 804ef0c:	2003      	movs	r0, #3
 804ef0e:	4770      	bx	lr

0804ef10 <HW_RTC_ms2Tick>:
{
 804ef10:	b508      	push	{r3, lr}
 804ef12:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804ef14:	227d      	movs	r2, #125	; 0x7d
 804ef16:	2300      	movs	r3, #0
 804ef18:	01c0      	lsls	r0, r0, #7
 804ef1a:	0e49      	lsrs	r1, r1, #25
 804ef1c:	f7f1 ffec 	bl	8040ef8 <__aeabi_uldivmod>
}
 804ef20:	bd08      	pop	{r3, pc}

0804ef22 <HW_RTC_Tick2ms>:
  tick = tick & PREDIV_S;
 804ef22:	f641 723f 	movw	r2, #7999	; 0x1f3f
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804ef26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  tick = tick & PREDIV_S;
 804ef2a:	4002      	ands	r2, r0
  uint32_t seconds = tick >> N_PREDIV_S;
 804ef2c:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804ef2e:	435a      	muls	r2, r3
 804ef30:	4358      	muls	r0, r3
}
 804ef32:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 804ef36:	4770      	bx	lr

0804ef38 <HW_RTC_GetTimerElapsedTime>:
{
 804ef38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804ef3a:	a901      	add	r1, sp, #4
 804ef3c:	4668      	mov	r0, sp
 804ef3e:	f7ff ff89 	bl	804ee54 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 804ef42:	4b03      	ldr	r3, [pc, #12]	; (804ef50 <HW_RTC_GetTimerElapsedTime+0x18>)
 804ef44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 804ef46:	1ac0      	subs	r0, r0, r3
 804ef48:	b007      	add	sp, #28
 804ef4a:	f85d fb04 	ldr.w	pc, [sp], #4
 804ef4e:	bf00      	nop
 804ef50:	2000380c 	.word	0x2000380c

0804ef54 <HW_RTC_GetTimerValue>:
{
 804ef54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804ef56:	a901      	add	r1, sp, #4
 804ef58:	4668      	mov	r0, sp
 804ef5a:	f7ff ff7b 	bl	804ee54 <HW_RTC_GetCalendarValue>
}
 804ef5e:	b007      	add	sp, #28
 804ef60:	f85d fb04 	ldr.w	pc, [sp], #4

0804ef64 <HW_RTC_StopAlarm>:
{
 804ef64:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 804ef66:	4c08      	ldr	r4, [pc, #32]	; (804ef88 <HW_RTC_StopAlarm+0x24>)
 804ef68:	f44f 7180 	mov.w	r1, #256	; 0x100
 804ef6c:	4620      	mov	r0, r4
 804ef6e:	f7f6 fc6b 	bl	8045848 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 804ef72:	6822      	ldr	r2, [r4, #0]
 804ef74:	68d3      	ldr	r3, [r2, #12]
 804ef76:	b2db      	uxtb	r3, r3
 804ef78:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804ef7c:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804ef7e:	4b03      	ldr	r3, [pc, #12]	; (804ef8c <HW_RTC_StopAlarm+0x28>)
 804ef80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804ef84:	615a      	str	r2, [r3, #20]
}
 804ef86:	bd10      	pop	{r4, pc}
 804ef88:	2000380c 	.word	0x2000380c
 804ef8c:	40013c00 	.word	0x40013c00

0804ef90 <HW_RTC_SetAlarm>:
{
 804ef90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804ef94:	4c52      	ldr	r4, [pc, #328]	; (804f0e0 <HW_RTC_SetAlarm+0x150>)
{
 804ef96:	4606      	mov	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804ef98:	f9b4 504c 	ldrsh.w	r5, [r4, #76]	; 0x4c
 804ef9c:	f7ff ffcc 	bl	804ef38 <HW_RTC_GetTimerElapsedTime>
 804efa0:	3503      	adds	r5, #3
 804efa2:	1a30      	subs	r0, r6, r0
 804efa4:	4285      	cmp	r5, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804efa6:	bf34      	ite	cc
 804efa8:	2100      	movcc	r1, #0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 804efaa:	2101      	movcs	r1, #1
 804efac:	2004      	movs	r0, #4
 804efae:	f7ff f8fb 	bl	804e1a8 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 804efb2:	f7ff f90f 	bl	804e1d4 <LPM_GetMode>
 804efb6:	2801      	cmp	r0, #1
    timeout = timeout -  McuWakeUpTimeCal;
 804efb8:	bf08      	it	eq
 804efba:	f9b4 304c 	ldrsheq.w	r3, [r4, #76]	; 0x4c
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804efbe:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
 804efc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 804efc4:	9001      	str	r0, [sp, #4]
    timeout = timeout -  McuWakeUpTimeCal;
 804efc6:	bf08      	it	eq
 804efc8:	1af6      	subeq	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804efca:	9100      	str	r1, [sp, #0]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804efcc:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804efd0:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
 804efd4:	f894 8056 	ldrb.w	r8, [r4, #86]	; 0x56
 804efd8:	f894 a057 	ldrb.w	sl, [r4, #87]	; 0x57
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804efdc:	f894 9069 	ldrb.w	r9, [r4, #105]	; 0x69
 804efe0:	f894 b06b 	ldrb.w	fp, [r4, #107]	; 0x6b
  HW_RTC_StopAlarm();
 804efe4:	f7ff ffbe 	bl	804ef64 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804efe8:	9900      	ldr	r1, [sp, #0]
 804efea:	9801      	ldr	r0, [sp, #4]
 804efec:	f641 723f 	movw	r2, #7999	; 0x1f3f
 804eff0:	1a51      	subs	r1, r2, r1
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804eff2:	4032      	ands	r2, r6
 804eff4:	fa12 f181 	uxtah	r1, r2, r1
  while (timeoutValue >= SECONDS_IN_1DAY)
 804eff8:	4a3a      	ldr	r2, [pc, #232]	; (804f0e4 <HW_RTC_SetAlarm+0x154>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804effa:	b289      	uxth	r1, r1
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 804effc:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804effe:	b2ab      	uxth	r3, r5
  while (timeoutValue >= SECONDS_IN_1DAY)
 804f000:	4296      	cmp	r6, r2
 804f002:	d847      	bhi.n	804f094 <HW_RTC_SetAlarm+0x104>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 804f004:	b2ba      	uxth	r2, r7
  while (timeoutValue >= SECONDS_IN_1HOUR)
 804f006:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
 804f00a:	d24a      	bcs.n	804f0a2 <HW_RTC_SetAlarm+0x112>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804f00c:	2e3b      	cmp	r6, #59	; 0x3b
    rtcAlarmMinutes++;
 804f00e:	b280      	uxth	r0, r0
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804f010:	d84c      	bhi.n	804f0ac <HW_RTC_SetAlarm+0x11c>
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 804f012:	44b0      	add	r8, r6
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 804f014:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
    rtcAlarmSeconds++;
 804f018:	fa1f f888 	uxth.w	r8, r8
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 804f01c:	d249      	bcs.n	804f0b2 <HW_RTC_SetAlarm+0x122>
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 804f01e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
 804f022:	d84c      	bhi.n	804f0be <HW_RTC_SetAlarm+0x12e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 804f024:	283b      	cmp	r0, #59	; 0x3b
 804f026:	d851      	bhi.n	804f0cc <HW_RTC_SetAlarm+0x13c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 804f028:	2a17      	cmp	r2, #23
 804f02a:	d854      	bhi.n	804f0d6 <HW_RTC_SetAlarm+0x146>
 804f02c:	4d2e      	ldr	r5, [pc, #184]	; (804f0e8 <HW_RTC_SetAlarm+0x158>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 804f02e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  if (RTC_DateStruct.Year % 4 == 0)
 804f032:	f01b 0f03 	tst.w	fp, #3
 804f036:	f109 39ff 	add.w	r9, r9, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804f03a:	bf16      	itet	ne
 804f03c:	444d      	addne	r5, r9
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 804f03e:	f815 6009 	ldrbeq.w	r6, [r5, r9]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804f042:	7b2e      	ldrbne	r6, [r5, #12]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 804f044:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804f048:	f5c1 51f9 	rsb	r1, r1, #7968	; 0x1f20
 804f04c:	311f      	adds	r1, #31
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804f04e:	42b3      	cmp	r3, r6
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804f050:	62a1      	str	r1, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804f052:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804f056:	bf88      	it	hi
 804f058:	fb93 f5f6 	sdivhi	r5, r3, r6
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804f05c:	63e1      	str	r1, [r4, #60]	; 0x3c
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804f05e:	bf88      	it	hi
 804f060:	fb06 3315 	mlshi	r3, r6, r5, r3
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804f064:	4921      	ldr	r1, [pc, #132]	; (804f0ec <HW_RTC_SetAlarm+0x15c>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 804f066:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804f06a:	bf88      	it	hi
 804f06c:	b29b      	uxthhi	r3, r3
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804f06e:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 804f070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804f074:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804f078:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 804f07c:	f884 a027 	strb.w	sl, [r4, #39]	; 0x27
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804f080:	6422      	str	r2, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 804f082:	63a2      	str	r2, [r4, #56]	; 0x38
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804f084:	64a3      	str	r3, [r4, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 804f086:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
}
 804f08a:	b003      	add	sp, #12
 804f08c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804f090:	f7f6 bd80 	b.w	8045b94 <HAL_RTC_SetAlarm_IT>
    timeoutValue -= SECONDS_IN_1DAY;
 804f094:	f5a6 36a8 	sub.w	r6, r6, #86016	; 0x15000
    rtcAlarmDays++;
 804f098:	3301      	adds	r3, #1
    timeoutValue -= SECONDS_IN_1DAY;
 804f09a:	f5a6 76c0 	sub.w	r6, r6, #384	; 0x180
    rtcAlarmDays++;
 804f09e:	b29b      	uxth	r3, r3
 804f0a0:	e7ae      	b.n	804f000 <HW_RTC_SetAlarm+0x70>
    rtcAlarmHours++;
 804f0a2:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 804f0a4:	f5a6 6661 	sub.w	r6, r6, #3600	; 0xe10
    rtcAlarmHours++;
 804f0a8:	b292      	uxth	r2, r2
 804f0aa:	e7ac      	b.n	804f006 <HW_RTC_SetAlarm+0x76>
    timeoutValue -= SECONDS_IN_1MINUTE;
 804f0ac:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 804f0ae:	3001      	adds	r0, #1
 804f0b0:	e7ac      	b.n	804f00c <HW_RTC_SetAlarm+0x7c>
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 804f0b2:	f5a1 51fa 	sub.w	r1, r1, #8000	; 0x1f40
 804f0b6:	b289      	uxth	r1, r1
    rtcAlarmSeconds++;
 804f0b8:	f108 0801 	add.w	r8, r8, #1
 804f0bc:	e7aa      	b.n	804f014 <HW_RTC_SetAlarm+0x84>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804f0be:	f1a8 083c 	sub.w	r8, r8, #60	; 0x3c
    rtcAlarmMinutes++;
 804f0c2:	3001      	adds	r0, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804f0c4:	fa1f f888 	uxth.w	r8, r8
    rtcAlarmMinutes++;
 804f0c8:	b280      	uxth	r0, r0
 804f0ca:	e7a8      	b.n	804f01e <HW_RTC_SetAlarm+0x8e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804f0cc:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmHours++;
 804f0ce:	3201      	adds	r2, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804f0d0:	b280      	uxth	r0, r0
    rtcAlarmHours++;
 804f0d2:	b292      	uxth	r2, r2
 804f0d4:	e7a6      	b.n	804f024 <HW_RTC_SetAlarm+0x94>
    rtcAlarmHours -= HOURS_IN_1DAY;
 804f0d6:	3a18      	subs	r2, #24
    rtcAlarmDays++;
 804f0d8:	3301      	adds	r3, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 804f0da:	b292      	uxth	r2, r2
    rtcAlarmDays++;
 804f0dc:	b29b      	uxth	r3, r3
 804f0de:	e7a3      	b.n	804f028 <HW_RTC_SetAlarm+0x98>
 804f0e0:	2000380c 	.word	0x2000380c
 804f0e4:	0001517f 	.word	0x0001517f
 804f0e8:	08054260 	.word	0x08054260
 804f0ec:	20003830 	.word	0x20003830

0804f0f0 <HW_RTC_IrqHandler>:
{
 804f0f0:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804f0f2:	2100      	movs	r1, #0
 804f0f4:	2004      	movs	r0, #4
 804f0f6:	f7ff f857 	bl	804e1a8 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804f0fa:	4b0b      	ldr	r3, [pc, #44]	; (804f128 <HW_RTC_IrqHandler+0x38>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804f0fc:	480b      	ldr	r0, [pc, #44]	; (804f12c <HW_RTC_IrqHandler+0x3c>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804f0fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804f102:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804f104:	6802      	ldr	r2, [r0, #0]
 804f106:	6893      	ldr	r3, [r2, #8]
 804f108:	04d9      	lsls	r1, r3, #19
 804f10a:	d50b      	bpl.n	804f124 <HW_RTC_IrqHandler+0x34>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 804f10c:	68d3      	ldr	r3, [r2, #12]
 804f10e:	05db      	lsls	r3, r3, #23
 804f110:	d508      	bpl.n	804f124 <HW_RTC_IrqHandler+0x34>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 804f112:	68d3      	ldr	r3, [r2, #12]
 804f114:	b2db      	uxtb	r3, r3
 804f116:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804f11a:	60d3      	str	r3, [r2, #12]
}
 804f11c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_RTC_AlarmAEventCallback(hrtc);
 804f120:	f000 be98 	b.w	804fe54 <HAL_RTC_AlarmAEventCallback>
}
 804f124:	bd08      	pop	{r3, pc}
 804f126:	bf00      	nop
 804f128:	40013c00 	.word	0x40013c00
 804f12c:	2000380c 	.word	0x2000380c

0804f130 <HW_RTC_DelayMs>:
{
 804f130:	4601      	mov	r1, r0
 804f132:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804f134:	227d      	movs	r2, #125	; 0x7d
 804f136:	2300      	movs	r3, #0
 804f138:	01c0      	lsls	r0, r0, #7
 804f13a:	0e49      	lsrs	r1, r1, #25
 804f13c:	f7f1 fedc 	bl	8040ef8 <__aeabi_uldivmod>
 804f140:	4604      	mov	r4, r0
  timeout = HW_RTC_GetTimerValue();
 804f142:	f7ff ff07 	bl	804ef54 <HW_RTC_GetTimerValue>
 804f146:	4605      	mov	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 804f148:	f7ff ff04 	bl	804ef54 <HW_RTC_GetTimerValue>
 804f14c:	1b40      	subs	r0, r0, r5
 804f14e:	42a0      	cmp	r0, r4
 804f150:	d300      	bcc.n	804f154 <HW_RTC_DelayMs+0x24>
}
 804f152:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 804f154:	bf00      	nop
 804f156:	e7f7      	b.n	804f148 <HW_RTC_DelayMs+0x18>

0804f158 <HW_RTC_SetTimerContext>:
{
 804f158:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 804f15a:	4c04      	ldr	r4, [pc, #16]	; (804f16c <HW_RTC_SetTimerContext+0x14>)
 804f15c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 804f160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 804f164:	f7ff fe76 	bl	804ee54 <HW_RTC_GetCalendarValue>
 804f168:	6520      	str	r0, [r4, #80]	; 0x50
}
 804f16a:	bd10      	pop	{r4, pc}
 804f16c:	2000380c 	.word	0x2000380c

0804f170 <HW_RTC_Init>:
{
 804f170:	b530      	push	{r4, r5, lr}
  if (HW_RTC_Initalized == false)
 804f172:	4c17      	ldr	r4, [pc, #92]	; (804f1d0 <HW_RTC_Init+0x60>)
 804f174:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
{
 804f178:	b087      	sub	sp, #28
  if (HW_RTC_Initalized == false)
 804f17a:	bb3d      	cbnz	r5, 804f1cc <HW_RTC_Init+0x5c>
  RtcHandle.Instance = RTC;
 804f17c:	4b15      	ldr	r3, [pc, #84]	; (804f1d4 <HW_RTC_Init+0x64>)
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 804f17e:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804f180:	227c      	movs	r2, #124	; 0x7c
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 804f182:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_RTC_Init(&RtcHandle);
 804f186:	4620      	mov	r0, r4
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804f188:	f641 733f 	movw	r3, #7999	; 0x1f3f
 804f18c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 804f190:	e9c4 5504 	strd	r5, r5, [r4, #16]
  HAL_RTC_Init(&RtcHandle);
 804f194:	f7f6 fbd7 	bl	8045946 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 804f198:	a906      	add	r1, sp, #24
 804f19a:	4b0f      	ldr	r3, [pc, #60]	; (804f1d8 <HW_RTC_Init+0x68>)
 804f19c:	f841 3d18 	str.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 804f1a0:	462a      	mov	r2, r5
 804f1a2:	4620      	mov	r0, r4
 804f1a4:	f7f6 fc99 	bl	8045ada <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 17;
 804f1a8:	2311      	movs	r3, #17
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804f1aa:	462a      	mov	r2, r5
 804f1ac:	a901      	add	r1, sp, #4
 804f1ae:	4620      	mov	r0, r4
  RTC_TimeStruct.TimeFormat = 0;
 804f1b0:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 804f1b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804f1b8:	f7f6 fc1e 	bl	80459f8 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 804f1bc:	4620      	mov	r0, r4
 804f1be:	f7f6 fdf0 	bl	8045da2 <HAL_RTCEx_EnableBypassShadow>
    HW_RTC_SetTimerContext();
 804f1c2:	f7ff ffc9 	bl	804f158 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 804f1c6:	2301      	movs	r3, #1
 804f1c8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 804f1cc:	b007      	add	sp, #28
 804f1ce:	bd30      	pop	{r4, r5, pc}
 804f1d0:	2000380c 	.word	0x2000380c
 804f1d4:	40002800 	.word	0x40002800
 804f1d8:	151a0801 	.word	0x151a0801

0804f1dc <HW_RTC_GetTimerContext>:
}
 804f1dc:	4b01      	ldr	r3, [pc, #4]	; (804f1e4 <HW_RTC_GetTimerContext+0x8>)
 804f1de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804f1e0:	4770      	bx	lr
 804f1e2:	bf00      	nop
 804f1e4:	2000380c 	.word	0x2000380c

0804f1e8 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 804f1e8:	b530      	push	{r4, r5, lr}
 804f1ea:	b087      	sub	sp, #28
 804f1ec:	4605      	mov	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804f1ee:	a901      	add	r1, sp, #4
 804f1f0:	4668      	mov	r0, sp
 804f1f2:	f7ff fe2f 	bl	804ee54 <HW_RTC_GetCalendarValue>
 804f1f6:	4604      	mov	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;

  *mSeconds = HW_RTC_Tick2ms(ticks);
 804f1f8:	f641 703f 	movw	r0, #7999	; 0x1f3f
 804f1fc:	4020      	ands	r0, r4
 804f1fe:	f7ff fe90 	bl	804ef22 <HW_RTC_Tick2ms>
 804f202:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 804f204:	0aa0      	lsrs	r0, r4, #10

  return seconds;
}
 804f206:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 804f20a:	b007      	add	sp, #28
 804f20c:	bd30      	pop	{r4, r5, pc}
	...

0804f210 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 804f210:	b538      	push	{r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804f212:	4c07      	ldr	r4, [pc, #28]	; (804f230 <HW_RTC_BKUPWrite+0x20>)
{
 804f214:	460d      	mov	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804f216:	4602      	mov	r2, r0
 804f218:	2100      	movs	r1, #0
 804f21a:	4620      	mov	r0, r4
 804f21c:	f7f6 fdb7 	bl	8045d8e <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804f220:	462a      	mov	r2, r5
 804f222:	4620      	mov	r0, r4
 804f224:	2101      	movs	r1, #1
}
 804f226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804f22a:	f7f6 bdb0 	b.w	8045d8e <HAL_RTCEx_BKUPWrite>
 804f22e:	bf00      	nop
 804f230:	2000380c 	.word	0x2000380c

0804f234 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 804f234:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f236:	4c07      	ldr	r4, [pc, #28]	; (804f254 <HW_RTC_BKUPRead+0x20>)
{
 804f238:	4606      	mov	r6, r0
 804f23a:	460d      	mov	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f23c:	4620      	mov	r0, r4
 804f23e:	2100      	movs	r1, #0
 804f240:	f7f6 fdaa 	bl	8045d98 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804f244:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f246:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804f248:	4620      	mov	r0, r4
 804f24a:	f7f6 fda5 	bl	8045d98 <HAL_RTCEx_BKUPRead>
 804f24e:	6028      	str	r0, [r5, #0]
}
 804f250:	bd70      	pop	{r4, r5, r6, pc}
 804f252:	bf00      	nop
 804f254:	2000380c 	.word	0x2000380c

0804f258 <get_time_now>:
  // Calculate the resulting period
  return (TimerTime_t) interim;
}

void get_time_now (uint8_t* buffer_datetime)
{
 804f258:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
	unsigned char *p;

	HAL_RTC_GetTime(&RtcHandle, &sTime, RTC_FORMAT_BIN);
 804f25a:	4d10      	ldr	r5, [pc, #64]	; (804f29c <get_time_now+0x44>)
{
 804f25c:	b087      	sub	sp, #28
 804f25e:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&RtcHandle, &sTime, RTC_FORMAT_BIN);
 804f260:	a901      	add	r1, sp, #4
 804f262:	2200      	movs	r2, #0
 804f264:	4628      	mov	r0, r5
 804f266:	f7f6 fd4c 	bl	8045d02 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&RtcHandle, &sDate, RTC_FORMAT_BIN);
 804f26a:	2200      	movs	r2, #0
 804f26c:	4669      	mov	r1, sp
 804f26e:	4628      	mov	r0, r5
 804f270:	f7f6 fd6e 	bl	8045d50 <HAL_RTC_GetDate>
    p++; //ignores WeekDay

    //put date in order month, day, year on buffer
    for (int i=0;i<sizeof(RTC_DateTypeDef)-1;i++)
    {
    	buffer_datetime[i]=*p++;
 804f274:	f89d 3001 	ldrb.w	r3, [sp, #1]
 804f278:	7023      	strb	r3, [r4, #0]
 804f27a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 804f27e:	7063      	strb	r3, [r4, #1]
 804f280:	f89d 3003 	ldrb.w	r3, [sp, #3]
 804f284:	70a3      	strb	r3, [r4, #2]
    p = (unsigned char*)&sTime;

    //put time in order hour, minute, second on buffer
    for (int i=3;i<6;i++)
	{
    	buffer_datetime[i]=*p++;
 804f286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 804f28a:	70e3      	strb	r3, [r4, #3]
 804f28c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 804f290:	7123      	strb	r3, [r4, #4]
 804f292:	f89d 3006 	ldrb.w	r3, [sp, #6]
 804f296:	7163      	strb	r3, [r4, #5]
	}
}
 804f298:	b007      	add	sp, #28
 804f29a:	bd30      	pop	{r4, r5, pc}
 804f29c:	2000380c 	.word	0x2000380c

0804f2a0 <DateTime_Update>:
 * @brief Update the RTC timer from RxData
 * @note The timer is based on the RTC
 * @param buffer_datetime_real	RxData buffer
 * @retval none
 */
void DateTime_Update(uint8_t* buffer_datetime_real) {
 804f2a0:	b530      	push	{r4, r5, lr}
 804f2a2:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct_Real;
	RTC_DateTypeDef RTC_DateStruct_Real;

	// [Wd, Mo, D, Y, H, M, S]

	RTC_DateStruct_Real.Year = buffer_datetime_real[3]; // 0-infinite
 804f2a4:	78c3      	ldrb	r3, [r0, #3]
 804f2a6:	f88d 3003 	strb.w	r3, [sp, #3]
	RTC_DateStruct_Real.Month = buffer_datetime_real[1]; // 0-12
 804f2aa:	7843      	ldrb	r3, [r0, #1]
	RTC_DateStruct_Real.Date = buffer_datetime_real[2]; // 1-31
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
	HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct_Real, RTC_FORMAT_BIN);
 804f2ac:	4d14      	ldr	r5, [pc, #80]	; (804f300 <DateTime_Update+0x60>)
	RTC_DateStruct_Real.Month = buffer_datetime_real[1]; // 0-12
 804f2ae:	f88d 3001 	strb.w	r3, [sp, #1]
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
 804f2b2:	a906      	add	r1, sp, #24
	RTC_DateStruct_Real.Date = buffer_datetime_real[2]; // 1-31
 804f2b4:	7883      	ldrb	r3, [r0, #2]
 804f2b6:	f88d 3002 	strb.w	r3, [sp, #2]
void DateTime_Update(uint8_t* buffer_datetime_real) {
 804f2ba:	4604      	mov	r4, r0
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
 804f2bc:	7803      	ldrb	r3, [r0, #0]
 804f2be:	f801 3d18 	strb.w	r3, [r1, #-24]!
	HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct_Real, RTC_FORMAT_BIN);
 804f2c2:	2200      	movs	r2, #0
 804f2c4:	4628      	mov	r0, r5
 804f2c6:	f7f6 fc08 	bl	8045ada <HAL_RTC_SetDate>

	/*at 0:0:0*/
	RTC_TimeStruct_Real.Hours = buffer_datetime_real[4]; // 0-23
 804f2ca:	7923      	ldrb	r3, [r4, #4]
 804f2cc:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_TimeStruct_Real.Minutes = buffer_datetime_real[5]; // 0-59
 804f2d0:	7963      	ldrb	r3, [r4, #5]
 804f2d2:	f88d 3005 	strb.w	r3, [sp, #5]
	RTC_TimeStruct_Real.Seconds = buffer_datetime_real[6]; // 0-59
	RTC_TimeStruct_Real.TimeFormat = 0;
 804f2d6:	2200      	movs	r2, #0
	RTC_TimeStruct_Real.Seconds = buffer_datetime_real[6]; // 0-59
 804f2d8:	79a3      	ldrb	r3, [r4, #6]
 804f2da:	f88d 3006 	strb.w	r3, [sp, #6]
	RTC_TimeStruct_Real.SubSeconds = 0;
	RTC_TimeStruct_Real.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
	RTC_TimeStruct_Real.DayLightSaving = RTC_STOREOPERATION_RESET;
	HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct_Real, RTC_FORMAT_BIN);
 804f2de:	a901      	add	r1, sp, #4
 804f2e0:	4628      	mov	r0, r5
	RTC_TimeStruct_Real.TimeFormat = 0;
 804f2e2:	f88d 2007 	strb.w	r2, [sp, #7]
	RTC_TimeStruct_Real.SubSeconds = 0;
 804f2e6:	9202      	str	r2, [sp, #8]
	RTC_TimeStruct_Real.DayLightSaving = RTC_STOREOPERATION_RESET;
 804f2e8:	e9cd 2204 	strd	r2, r2, [sp, #16]
	HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct_Real, RTC_FORMAT_BIN);
 804f2ec:	f7f6 fb84 	bl	80459f8 <HAL_RTC_SetTime>

	HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR2, 0x32F2);
 804f2f0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 804f2f4:	2102      	movs	r1, #2
 804f2f6:	4628      	mov	r0, r5
 804f2f8:	f7f6 fd49 	bl	8045d8e <HAL_RTCEx_BKUPWrite>

}
 804f2fc:	b007      	add	sp, #28
 804f2fe:	bd30      	pop	{r4, r5, pc}
 804f300:	2000380c 	.word	0x2000380c

0804f304 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 804f304:	b570      	push	{r4, r5, r6, lr}
 804f306:	b088      	sub	sp, #32

	GPIO_InitTypeDef initStruct = { 0 };
 804f308:	2214      	movs	r2, #20
 804f30a:	2100      	movs	r1, #0
 804f30c:	a803      	add	r0, sp, #12
 804f30e:	f001 fc64 	bl	8050bda <memset>
	if (hspi.Instance == SPI2) {
 804f312:	4b25      	ldr	r3, [pc, #148]	; (804f3a8 <HW_SPI_IoInit+0xa4>)
 804f314:	681a      	ldr	r2, [r3, #0]
 804f316:	4b25      	ldr	r3, [pc, #148]	; (804f3ac <HW_SPI_IoInit+0xa8>)
 804f318:	429a      	cmp	r2, r3
 804f31a:	d143      	bne.n	804f3a4 <HW_SPI_IoInit+0xa0>
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 804f31c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804f320:	2400      	movs	r4, #0
 804f322:	9400      	str	r4, [sp, #0]
 804f324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		initStruct.Mode = GPIO_MODE_AF_PP;
		initStruct.Pull = GPIO_NOPULL;
		initStruct.Speed = GPIO_SPEED_HIGH;
		initStruct.Alternate = SPI2_AF;

		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f326:	4822      	ldr	r0, [pc, #136]	; (804f3b0 <HW_SPI_IoInit+0xac>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 804f328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804f32c:	641a      	str	r2, [r3, #64]	; 0x40
 804f32e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804f330:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804f334:	9200      	str	r2, [sp, #0]
 804f336:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 804f338:	9401      	str	r4, [sp, #4]
 804f33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f33c:	f042 0204 	orr.w	r2, r2, #4
 804f340:	631a      	str	r2, [r3, #48]	; 0x30
 804f342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f344:	f002 0204 	and.w	r2, r2, #4
 804f348:	9201      	str	r2, [sp, #4]
 804f34a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 804f34c:	9402      	str	r4, [sp, #8]
 804f34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f350:	f042 0202 	orr.w	r2, r2, #2
 804f354:	631a      	str	r2, [r3, #48]	; 0x30
 804f356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f358:	f003 0302 	and.w	r3, r3, #2
 804f35c:	9302      	str	r3, [sp, #8]
 804f35e:	9b02      	ldr	r3, [sp, #8]
		initStruct.Alternate = SPI2_AF;
 804f360:	2203      	movs	r2, #3
 804f362:	2305      	movs	r3, #5
 804f364:	e9cd 2306 	strd	r2, r3, [sp, #24]
		initStruct.Mode = GPIO_MODE_AF_PP;
 804f368:	2502      	movs	r5, #2
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f36a:	aa03      	add	r2, sp, #12
 804f36c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		initStruct.Mode = GPIO_MODE_AF_PP;
 804f370:	9504      	str	r5, [sp, #16]
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f372:	f7ff fccb 	bl	804ed0c <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 804f376:	aa03      	add	r2, sp, #12
 804f378:	2104      	movs	r1, #4
 804f37a:	480e      	ldr	r0, [pc, #56]	; (804f3b4 <HW_SPI_IoInit+0xb0>)
 804f37c:	f7ff fcc6 	bl	804ed0c <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 804f380:	aa03      	add	r2, sp, #12
 804f382:	2108      	movs	r1, #8
 804f384:	480b      	ldr	r0, [pc, #44]	; (804f3b4 <HW_SPI_IoInit+0xb0>)
 804f386:	f7ff fcc1 	bl	804ed0c <HW_GPIO_Init>

		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804f38a:	2601      	movs	r6, #1
		initStruct.Pull = GPIO_NOPULL;

		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804f38c:	aa03      	add	r2, sp, #12
 804f38e:	4629      	mov	r1, r5
 804f390:	4807      	ldr	r0, [pc, #28]	; (804f3b0 <HW_SPI_IoInit+0xac>)
		initStruct.Pull = GPIO_NOPULL;
 804f392:	e9cd 6404 	strd	r6, r4, [sp, #16]
		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804f396:	f7ff fcb9 	bl	804ed0c <HW_GPIO_Init>

		HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 804f39a:	4632      	mov	r2, r6
 804f39c:	4629      	mov	r1, r5
 804f39e:	4804      	ldr	r0, [pc, #16]	; (804f3b0 <HW_SPI_IoInit+0xac>)
 804f3a0:	f7ff fd36 	bl	804ee10 <HW_GPIO_Write>
	}
}
 804f3a4:	b008      	add	sp, #32
 804f3a6:	bd70      	pop	{r4, r5, r6, pc}
 804f3a8:	2000387c 	.word	0x2000387c
 804f3ac:	40003800 	.word	0x40003800
 804f3b0:	40020400 	.word	0x40020400
 804f3b4:	40020800 	.word	0x40020800

0804f3b8 <HW_SPI_Init>:
{
 804f3b8:	b508      	push	{r3, lr}
  hspi.Instance = SPI_RADIO;
 804f3ba:	4b1b      	ldr	r3, [pc, #108]	; (804f428 <HW_SPI_Init+0x70>)
 804f3bc:	4a1b      	ldr	r2, [pc, #108]	; (804f42c <HW_SPI_Init+0x74>)
 804f3be:	601a      	str	r2, [r3, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 804f3c0:	4a1b      	ldr	r2, [pc, #108]	; (804f430 <HW_SPI_Init+0x78>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 804f3c2:	481c      	ldr	r0, [pc, #112]	; (804f434 <HW_SPI_Init+0x7c>)
  uint32_t SysClkTmp = SystemCoreClock;
 804f3c4:	6811      	ldr	r1, [r2, #0]
  uint32_t divisor = 0;
 804f3c6:	2200      	movs	r2, #0
  while (SysClkTmp > hz)
 804f3c8:	4281      	cmp	r1, r0
 804f3ca:	d904      	bls.n	804f3d6 <HW_SPI_Init+0x1e>
  {
    divisor++;
 804f3cc:	3201      	adds	r2, #1
    SysClkTmp = (SysClkTmp >> 1);

    if (divisor >= 7)
 804f3ce:	2a07      	cmp	r2, #7
    SysClkTmp = (SysClkTmp >> 1);
 804f3d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (divisor >= 7)
 804f3d4:	d1f8      	bne.n	804f3c8 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f3d6:	f012 0104 	ands.w	r1, r2, #4
 804f3da:	bf18      	it	ne
 804f3dc:	2120      	movne	r1, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 804f3de:	f012 0002 	ands.w	r0, r2, #2
 804f3e2:	bf18      	it	ne
 804f3e4:	2010      	movne	r0, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804f3e6:	f012 0201 	ands.w	r2, r2, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f3ea:	ea41 0100 	orr.w	r1, r1, r0
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804f3ee:	bf18      	it	ne
 804f3f0:	2208      	movne	r2, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f3f2:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 804f3f4:	61da      	str	r2, [r3, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 804f3f6:	f44f 7182 	mov.w	r1, #260	; 0x104
 804f3fa:	2200      	movs	r2, #0
 804f3fc:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804f400:	4809      	ldr	r0, [pc, #36]	; (804f428 <HW_SPI_Init+0x70>)
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 804f402:	60da      	str	r2, [r3, #12]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804f404:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804f408:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804f40c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804f40e:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804f410:	6199      	str	r1, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 804f412:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804f414:	f7f7 face 	bl	80469b4 <HAL_SPI_Init>
 804f418:	b108      	cbz	r0, 804f41e <HW_SPI_Init+0x66>
    Error_Handler();
 804f41a:	f7ff fa8f 	bl	804e93c <Error_Handler>
}
 804f41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_SPI_IoInit();
 804f422:	f7ff bf6f 	b.w	804f304 <HW_SPI_IoInit>
 804f426:	bf00      	nop
 804f428:	2000387c 	.word	0x2000387c
 804f42c:	40003800 	.word	0x40003800
 804f430:	20001048 	.word	0x20001048
 804f434:	00989680 	.word	0x00989680

0804f438 <HW_SPI_InOut>:
{
 804f438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804f43a:	f04f 33ff 	mov.w	r3, #4294967295
{
 804f43e:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804f442:	9300      	str	r3, [sp, #0]
 804f444:	f10d 0216 	add.w	r2, sp, #22
 804f448:	2301      	movs	r3, #1
 804f44a:	f10d 010e 	add.w	r1, sp, #14
 804f44e:	4804      	ldr	r0, [pc, #16]	; (804f460 <HW_SPI_InOut+0x28>)
 804f450:	f7f7 faed 	bl	8046a2e <HAL_SPI_TransmitReceive>
}
 804f454:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 804f458:	b007      	add	sp, #28
 804f45a:	f85d fb04 	ldr.w	pc, [sp], #4
 804f45e:	bf00      	nop
 804f460:	2000387c 	.word	0x2000387c

0804f464 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init()
{
 804f464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804f466:	2210      	movs	r2, #16
 804f468:	2100      	movs	r1, #0
 804f46a:	a802      	add	r0, sp, #8
 804f46c:	f001 fbb5 	bl	8050bda <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 804f470:	4815      	ldr	r0, [pc, #84]	; (804f4c8 <MX_TIM2_Init+0x64>)
	htim2.Init.Prescaler = 799;
 804f472:	f240 321f 	movw	r2, #799	; 0x31f
 804f476:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804f47a:	2300      	movs	r3, #0
	htim2.Init.Prescaler = 799;
 804f47c:	e9c0 1200 	strd	r1, r2, [r0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 1999;
 804f480:	f240 72cf 	movw	r2, #1999	; 0x7cf
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804f484:	e9cd 3300 	strd	r3, r3, [sp]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804f488:	6083      	str	r3, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804f48a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804f48e:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 804f490:	f7f7 fd02 	bl	8046e98 <HAL_TIM_Base_Init>
 804f494:	b108      	cbz	r0, 804f49a <MX_TIM2_Init+0x36>
		Error_Handler();
 804f496:	f7ff fa51 	bl	804e93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f49a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804f49e:	a902      	add	r1, sp, #8
 804f4a0:	4809      	ldr	r0, [pc, #36]	; (804f4c8 <MX_TIM2_Init+0x64>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f4a2:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804f4a4:	f7f7 fd1c 	bl	8046ee0 <HAL_TIM_ConfigClockSource>
 804f4a8:	b108      	cbz	r0, 804f4ae <MX_TIM2_Init+0x4a>
		Error_Handler();
 804f4aa:	f7ff fa47 	bl	804e93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804f4ae:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804f4b0:	4669      	mov	r1, sp
 804f4b2:	4805      	ldr	r0, [pc, #20]	; (804f4c8 <MX_TIM2_Init+0x64>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804f4b4:	e9cd 3300 	strd	r3, r3, [sp]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804f4b8:	f7f7 fda6 	bl	8047008 <HAL_TIMEx_MasterConfigSynchronization>
 804f4bc:	b108      	cbz	r0, 804f4c2 <MX_TIM2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 804f4be:	f7ff fa3d 	bl	804e93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 804f4c2:	b007      	add	sp, #28
 804f4c4:	f85d fb04 	ldr.w	pc, [sp], #4
 804f4c8:	200060cc 	.word	0x200060cc

0804f4cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 804f4cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804f4ce:	2210      	movs	r2, #16
 804f4d0:	2100      	movs	r1, #0
 804f4d2:	a802      	add	r0, sp, #8
 804f4d4:	f001 fb81 	bl	8050bda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804f4d8:	4815      	ldr	r0, [pc, #84]	; (804f530 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 7999;
 804f4da:	4916      	ldr	r1, [pc, #88]	; (804f534 <MX_TIM3_Init+0x68>)
 804f4dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804f4e0:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 7999;
 804f4e2:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
 804f4e6:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804f4ea:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804f4ee:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804f4f0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804f4f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 804f4f6:	f7f7 fccf 	bl	8046e98 <HAL_TIM_Base_Init>
 804f4fa:	b108      	cbz	r0, 804f500 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 804f4fc:	f7ff fa1e 	bl	804e93c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804f504:	a902      	add	r1, sp, #8
 804f506:	480a      	ldr	r0, [pc, #40]	; (804f530 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f508:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804f50a:	f7f7 fce9 	bl	8046ee0 <HAL_TIM_ConfigClockSource>
 804f50e:	b108      	cbz	r0, 804f514 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 804f510:	f7ff fa14 	bl	804e93c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804f514:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804f516:	4669      	mov	r1, sp
 804f518:	4805      	ldr	r0, [pc, #20]	; (804f530 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804f51a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804f51e:	f7f7 fd73 	bl	8047008 <HAL_TIMEx_MasterConfigSynchronization>
 804f522:	b108      	cbz	r0, 804f528 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 804f524:	f7ff fa0a 	bl	804e93c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 804f528:	b007      	add	sp, #28
 804f52a:	f85d fb04 	ldr.w	pc, [sp], #4
 804f52e:	bf00      	nop
 804f530:	2000608c 	.word	0x2000608c
 804f534:	40000400 	.word	0x40000400

0804f538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 804f538:	6803      	ldr	r3, [r0, #0]
 804f53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 804f53e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 804f540:	d116      	bne.n	804f570 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804f542:	2200      	movs	r2, #0
 804f544:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 804f548:	9200      	str	r2, [sp, #0]
 804f54a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804f54c:	f041 0101 	orr.w	r1, r1, #1
 804f550:	6419      	str	r1, [r3, #64]	; 0x40
 804f552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f554:	f003 0301 	and.w	r3, r3, #1
 804f558:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804f55a:	201c      	movs	r0, #28
 804f55c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 804f55e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804f560:	f7f4 fc88 	bl	8043e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 804f564:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 804f566:	b003      	add	sp, #12
 804f568:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804f56c:	f7f4 bcb6 	b.w	8043edc <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 804f570:	4a0b      	ldr	r2, [pc, #44]	; (804f5a0 <HAL_TIM_Base_MspInit+0x68>)
 804f572:	4293      	cmp	r3, r2
 804f574:	d111      	bne.n	804f59a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804f576:	2200      	movs	r2, #0
 804f578:	4b0a      	ldr	r3, [pc, #40]	; (804f5a4 <HAL_TIM_Base_MspInit+0x6c>)
 804f57a:	9201      	str	r2, [sp, #4]
 804f57c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804f57e:	f041 0102 	orr.w	r1, r1, #2
 804f582:	6419      	str	r1, [r3, #64]	; 0x40
 804f584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f586:	f003 0302 	and.w	r3, r3, #2
 804f58a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804f58c:	201d      	movs	r0, #29
 804f58e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 804f590:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804f592:	f7f4 fc6f 	bl	8043e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804f596:	201d      	movs	r0, #29
 804f598:	e7e5      	b.n	804f566 <HAL_TIM_Base_MspInit+0x2e>
}
 804f59a:	b003      	add	sp, #12
 804f59c:	f85d fb04 	ldr.w	pc, [sp], #4
 804f5a0:	40000400 	.word	0x40000400
 804f5a4:	40023800 	.word	0x40023800

0804f5a8 <LoraMacProcessNotify>:
  }
}

void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 804f5a8:	4b01      	ldr	r3, [pc, #4]	; (804f5b0 <LoraMacProcessNotify+0x8>)
 804f5aa:	2201      	movs	r2, #1
 804f5ac:	701a      	strb	r2, [r3, #0]
}
 804f5ae:	4770      	bx	lr
 804f5b0:	200038d4 	.word	0x200038d4

0804f5b4 <LORA_GetBatteryLevel>:
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
  return 0xFF;
}
 804f5b4:	20ff      	movs	r0, #255	; 0xff
 804f5b6:	4770      	bx	lr

0804f5b8 <LORA_TxNeeded>:
  AppData.BuffSize = 0;
 804f5b8:	4803      	ldr	r0, [pc, #12]	; (804f5c8 <LORA_TxNeeded+0x10>)
 804f5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f5be:	8083      	strh	r3, [r0, #4]
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f5c0:	2100      	movs	r1, #0
 804f5c2:	f7fe bd59 	b.w	804e078 <LORA_send>
 804f5c6:	bf00      	nop
 804f5c8:	200011e0 	.word	0x200011e0

0804f5cc <LORA_ConfirmClass>:
{
 804f5cc:	b508      	push	{r3, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 804f5ce:	4b07      	ldr	r3, [pc, #28]	; (804f5ec <LORA_ConfirmClass+0x20>)
 804f5d0:	5c19      	ldrb	r1, [r3, r0]
 804f5d2:	4807      	ldr	r0, [pc, #28]	; (804f5f0 <LORA_ConfirmClass+0x24>)
 804f5d4:	f7ff f8ae 	bl	804e734 <TraceSend>
  AppData.BuffSize = 0;
 804f5d8:	4806      	ldr	r0, [pc, #24]	; (804f5f4 <LORA_ConfirmClass+0x28>)
 804f5da:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f5de:	8083      	strh	r3, [r0, #4]
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f5e0:	2100      	movs	r1, #0
}
 804f5e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f5e6:	f7fe bd47 	b.w	804e078 <LORA_send>
 804f5ea:	bf00      	nop
 804f5ec:	08054df2 	.word	0x08054df2
 804f5f0:	08054dd8 	.word	0x08054dd8
 804f5f4:	200011e0 	.word	0x200011e0

0804f5f8 <LORA_HasJoined>:
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 804f5f8:	2002      	movs	r0, #2
 804f5fa:	f7fe bd81 	b.w	804e100 <LORA_RequestClass>
	...

0804f600 <OnTxTimerEvent>:
{
 804f600:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 804f602:	4c03      	ldr	r4, [pc, #12]	; (804f610 <OnTxTimerEvent+0x10>)
 804f604:	1d20      	adds	r0, r4, #4
 804f606:	f7fe ff99 	bl	804e53c <TimerStart>
  AppProcessRequest = LORA_SET;
 804f60a:	2301      	movs	r3, #1
 804f60c:	7723      	strb	r3, [r4, #28]
}
 804f60e:	bd10      	pop	{r4, pc}
 804f610:	200038d4 	.word	0x200038d4

0804f614 <LORA_RxData>:
{
 804f614:	b510      	push	{r4, lr}
 804f616:	4604      	mov	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 804f618:	7941      	ldrb	r1, [r0, #5]
 804f61a:	4817      	ldr	r0, [pc, #92]	; (804f678 <LORA_RxData+0x64>)
 804f61c:	f7ff f88a 	bl	804e734 <TraceSend>
  switch (AppData->Port)
 804f620:	7963      	ldrb	r3, [r4, #5]
 804f622:	2b02      	cmp	r3, #2
 804f624:	d011      	beq.n	804f64a <LORA_RxData+0x36>
 804f626:	2b03      	cmp	r3, #3
 804f628:	d109      	bne.n	804f63e <LORA_RxData+0x2a>
      if (AppData->BuffSize == 1)
 804f62a:	7923      	ldrb	r3, [r4, #4]
 804f62c:	2b01      	cmp	r3, #1
 804f62e:	d106      	bne.n	804f63e <LORA_RxData+0x2a>
        switch (AppData->Buff[0])
 804f630:	6823      	ldr	r3, [r4, #0]
 804f632:	7818      	ldrb	r0, [r3, #0]
 804f634:	2801      	cmp	r0, #1
 804f636:	d004      	beq.n	804f642 <LORA_RxData+0x2e>
 804f638:	d302      	bcc.n	804f640 <LORA_RxData+0x2c>
 804f63a:	2802      	cmp	r0, #2
 804f63c:	d001      	beq.n	804f642 <LORA_RxData+0x2e>
}
 804f63e:	bd10      	pop	{r4, pc}
            LORA_RequestClass(CLASS_A);
 804f640:	2000      	movs	r0, #0
}
 804f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LORA_RequestClass(CLASS_C);
 804f646:	f7fe bd5b 	b.w	804e100 <LORA_RequestClass>
    	if(AppData->BuffSize == 7)
 804f64a:	7923      	ldrb	r3, [r4, #4]
 804f64c:	2b07      	cmp	r3, #7
 804f64e:	d105      	bne.n	804f65c <LORA_RxData+0x48>
			DateTime_Update(AppData->Buff);
 804f650:	6820      	ldr	r0, [r4, #0]
 804f652:	f7ff fe25 	bl	804f2a0 <DateTime_Update>
			PRINTF("DATE-TIME UPDATED \n\r");
 804f656:	4809      	ldr	r0, [pc, #36]	; (804f67c <LORA_RxData+0x68>)
 804f658:	f7ff f86c 	bl	804e734 <TraceSend>
		if (AppData->BuffSize == 1)
 804f65c:	7923      	ldrb	r3, [r4, #4]
 804f65e:	2b01      	cmp	r3, #1
 804f660:	d1ed      	bne.n	804f63e <LORA_RxData+0x2a>
			AppLedStateOn = AppData->Buff[0] & 0x01;
 804f662:	6823      	ldr	r3, [r4, #0]
 804f664:	781b      	ldrb	r3, [r3, #0]
			if (AppLedStateOn == RESET)
 804f666:	07db      	lsls	r3, r3, #31
				PRINTF("LED OFF\n\r");
 804f668:	bf54      	ite	pl
 804f66a:	4805      	ldrpl	r0, [pc, #20]	; (804f680 <LORA_RxData+0x6c>)
				PRINTF("LED ON\n\r");
 804f66c:	4805      	ldrmi	r0, [pc, #20]	; (804f684 <LORA_RxData+0x70>)
}
 804f66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				PRINTF("LED ON\n\r");
 804f672:	f7ff b85f 	b.w	804e734 <TraceSend>
 804f676:	bf00      	nop
 804f678:	08054df6 	.word	0x08054df6
 804f67c:	08054e13 	.word	0x08054e13
 804f680:	08054e28 	.word	0x08054e28
 804f684:	08054e32 	.word	0x08054e32

0804f688 <main>:
{
 804f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  flags_ble.all_flags=RESET;						/* Reset all bluetooth flags */
 804f68c:	4dc6      	ldr	r5, [pc, #792]	; (804f9a8 <main+0x320>)
{
 804f68e:	b087      	sub	sp, #28
  flags_ble.all_flags=RESET;						/* Reset all bluetooth flags */
 804f690:	2300      	movs	r3, #0
 804f692:	702b      	strb	r3, [r5, #0]
  HAL_Init();										/* STM32 HAL library initialization*/
 804f694:	f7f4 f992 	bl	80439bc <HAL_Init>
  SystemClock_Config();								/* Configure the system clock*/
 804f698:	f000 fcd6 	bl	8050048 <SystemClock_Config>
  HW_Init();										/* Configure the hardware*/
 804f69c:	f000 fdd4 	bl	8050248 <HW_Init>
  refresh_iwdg();
 804f6a0:	f000 fe84 	bl	80503ac <refresh_iwdg>
  ble_config();
 804f6a4:	f7f1 fe60 	bl	8041368 <ble_config>
  refresh_iwdg();
 804f6a8:	f000 fe80 	bl	80503ac <refresh_iwdg>
  init_station();									/* Initialize WeatherStation Peripherals */
 804f6ac:	f7f2 fa94 	bl	8041bd8 <init_station>
  refresh_iwdg();
 804f6b0:	f000 fe7c 	bl	80503ac <refresh_iwdg>
  init_irradiator();
 804f6b4:	f7f2 f9d2 	bl	8041a5c <init_irradiator>
  refresh_iwdg();
 804f6b8:	f000 fe78 	bl	80503ac <refresh_iwdg>
  init_battery_monitor();							/* Initialize Battery monitor */
 804f6bc:	f7f1 fd9c 	bl	80411f8 <init_battery_monitor>
  refresh_iwdg();
 804f6c0:	f000 fe74 	bl	80503ac <refresh_iwdg>
	if(f_mount(&SDFatFS, (const TCHAR *)&SDPath, 1) != FR_OK)
 804f6c4:	2201      	movs	r2, #1
 804f6c6:	49b9      	ldr	r1, [pc, #740]	; (804f9ac <main+0x324>)
 804f6c8:	48b9      	ldr	r0, [pc, #740]	; (804f9b0 <main+0x328>)
 804f6ca:	f7f8 fe65 	bl	8048398 <f_mount>
 804f6ce:	b110      	cbz	r0, 804f6d6 <main+0x4e>
		  PRINT_SD_CARD(PRINTF("Erro ao montar o cartao\r\n");)
 804f6d0:	48b8      	ldr	r0, [pc, #736]	; (804f9b4 <main+0x32c>)
 804f6d2:	f7ff f82f 	bl	804e734 <TraceSend>
  refresh_iwdg();
 804f6d6:	f000 fe69 	bl	80503ac <refresh_iwdg>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);		/* Disable Stand-by mode */
 804f6da:	2101      	movs	r1, #1
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f6dc:	2600      	movs	r6, #0
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);		/* Disable Stand-by mode */
 804f6de:	4608      	mov	r0, r1
 804f6e0:	f7fe fd4c 	bl	804e17c <LPM_SetOffMode>
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f6e4:	4633      	mov	r3, r6
 804f6e6:	2203      	movs	r2, #3
 804f6e8:	2101      	movs	r1, #1
 804f6ea:	9600      	str	r6, [sp, #0]
 804f6ec:	48b2      	ldr	r0, [pc, #712]	; (804f9b8 <main+0x330>)
  flagsStation.all_flags=0;
 804f6ee:	4cb3      	ldr	r4, [pc, #716]	; (804f9bc <main+0x334>)
	if(count_measures == 1 && flagsStation.active_irradiator == 0) {
 804f6f0:	f8df a324 	ldr.w	sl, [pc, #804]	; 804fa18 <main+0x390>
		vbat_int = (uint16_t)(double)(vbat*100);
 804f6f4:	f8df 9324 	ldr.w	r9, [pc, #804]	; 804fa1c <main+0x394>
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f6f8:	f7ff f81c 	bl	804e734 <TraceSend>
	PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f6fc:	2204      	movs	r2, #4
 804f6fe:	4611      	mov	r1, r2
 804f700:	2302      	movs	r3, #2
 804f702:	9600      	str	r6, [sp, #0]
 804f704:	48ae      	ldr	r0, [pc, #696]	; (804f9c0 <main+0x338>)
 804f706:	f7ff f815 	bl	804e734 <TraceSend>
  refresh_iwdg();
 804f70a:	f000 fe4f 	bl	80503ac <refresh_iwdg>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);	/* Configure the Lora Stack*/
 804f70e:	49ad      	ldr	r1, [pc, #692]	; (804f9c4 <main+0x33c>)
 804f710:	1d08      	adds	r0, r1, #4
 804f712:	f7fe fb1b 	bl	804dd4c <LORA_Init>
  refresh_iwdg();
 804f716:	f000 fe49 	bl	80503ac <refresh_iwdg>
  LORA_Join();
 804f71a:	f7fe fc19 	bl	804df50 <LORA_Join>
  refresh_iwdg();
 804f71e:	f000 fe45 	bl	80503ac <refresh_iwdg>
    TimerInit(&TxTimer, OnTxTimerEvent);
 804f722:	49a9      	ldr	r1, [pc, #676]	; (804f9c8 <main+0x340>)
 804f724:	48a9      	ldr	r0, [pc, #676]	; (804f9cc <main+0x344>)
 804f726:	f7fe feff 	bl	804e528 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 804f72a:	f64e 2160 	movw	r1, #60000	; 0xea60
 804f72e:	48a7      	ldr	r0, [pc, #668]	; (804f9cc <main+0x344>)
 804f730:	f7fe ff9e 	bl	804e670 <TimerSetValue>
    OnTxTimerEvent(NULL);
 804f734:	4630      	mov	r0, r6
 804f736:	f7ff ff63 	bl	804f600 <OnTxTimerEvent>
  HAL_TIM_Base_Start_IT(&htim3);
 804f73a:	48a5      	ldr	r0, [pc, #660]	; (804f9d0 <main+0x348>)
 804f73c:	f7f7 fa90 	bl	8046c60 <HAL_TIM_Base_Start_IT>
		vbat_int = (uint16_t)(double)(vbat*100);
 804f740:	f04f 0800 	mov.w	r8, #0
  flags_ble.all_flags=0;
 804f744:	702e      	strb	r6, [r5, #0]
  flagsStation.all_flags=0;
 804f746:	7026      	strb	r6, [r4, #0]
 804f748:	4657      	mov	r7, sl
	refresh_iwdg();
 804f74a:	f000 fe2f 	bl	80503ac <refresh_iwdg>
	if (flagsStation.pluviometer)
 804f74e:	7823      	ldrb	r3, [r4, #0]
 804f750:	07de      	lsls	r6, r3, #31
 804f752:	d514      	bpl.n	804f77e <main+0xf6>
		flagsStation.pluviometer=0;
 804f754:	f36f 0300 	bfc	r3, #0, #1
		get_time_now((uint8_t*)&buffer_time);
 804f758:	a804      	add	r0, sp, #16
		flagsStation.pluviometer=0;
 804f75a:	7023      	strb	r3, [r4, #0]
		get_time_now((uint8_t*)&buffer_time);
 804f75c:	f7ff fd7c 	bl	804f258 <get_time_now>
		if ((buffer_time[3] == 23) && (buffer_time[4] == 59) && buffer_time[5] > 40)
 804f760:	f89d 3013 	ldrb.w	r3, [sp, #19]
 804f764:	2b17      	cmp	r3, #23
 804f766:	d10a      	bne.n	804f77e <main+0xf6>
 804f768:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804f76c:	2b3b      	cmp	r3, #59	; 0x3b
 804f76e:	d106      	bne.n	804f77e <main+0xf6>
 804f770:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804f774:	2b28      	cmp	r3, #40	; 0x28
		  pluviometer_count = 0;
 804f776:	bf82      	ittt	hi
 804f778:	4b96      	ldrhi	r3, [pc, #600]	; (804f9d4 <main+0x34c>)
 804f77a:	2200      	movhi	r2, #0
 804f77c:	801a      	strhhi	r2, [r3, #0]
	if(flagsStation.read_sensors)
 804f77e:	7823      	ldrb	r3, [r4, #0]
 804f780:	06d8      	lsls	r0, r3, #27
 804f782:	d520      	bpl.n	804f7c6 <main+0x13e>
		flagsStation.read_sensors=0;
 804f784:	f36f 1304 	bfc	r3, #4, #1
		PRINTF("Leitura dos Sensores\r\n");
 804f788:	4893      	ldr	r0, [pc, #588]	; (804f9d8 <main+0x350>)
		flagsStation.read_sensors=0;
 804f78a:	7023      	strb	r3, [r4, #0]
		PRINTF("Leitura dos Sensores\r\n");
 804f78c:	f7fe ffd2 	bl	804e734 <TraceSend>
		refresh_iwdg();
 804f790:	f000 fe0c 	bl	80503ac <refresh_iwdg>
		read_sensors(&Parameters);
 804f794:	4891      	ldr	r0, [pc, #580]	; (804f9dc <main+0x354>)
		vbat = get_battery_voltage();
 804f796:	4e92      	ldr	r6, [pc, #584]	; (804f9e0 <main+0x358>)
		read_sensors(&Parameters);
 804f798:	f7f2 fa6a 	bl	8041c70 <read_sensors>
		refresh_iwdg();
 804f79c:	f000 fe06 	bl	80503ac <refresh_iwdg>
		PRINTF("Leitura da tensão da bateria\r\n");
 804f7a0:	4890      	ldr	r0, [pc, #576]	; (804f9e4 <main+0x35c>)
 804f7a2:	f7fe ffc7 	bl	804e734 <TraceSend>
		vbat = get_battery_voltage();
 804f7a6:	f7f1 fd5b 	bl	8041260 <get_battery_voltage>
 804f7aa:	ed86 0b00 	vstr	d0, [r6]
		refresh_iwdg();
 804f7ae:	f000 fdfd 	bl	80503ac <refresh_iwdg>
		vbat_int = (uint16_t)(double)(vbat*100);
 804f7b2:	464b      	mov	r3, r9
 804f7b4:	4642      	mov	r2, r8
 804f7b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 804f7ba:	f7f1 f855 	bl	8040868 <__aeabi_dmul>
 804f7be:	f7f1 fb2b 	bl	8040e18 <__aeabi_d2uiz>
 804f7c2:	4b89      	ldr	r3, [pc, #548]	; (804f9e8 <main+0x360>)
 804f7c4:	8018      	strh	r0, [r3, #0]
	refresh_iwdg();
 804f7c6:	f000 fdf1 	bl	80503ac <refresh_iwdg>
	if(count_measures == 1 && flagsStation.active_irradiator == 0) {
 804f7ca:	f89a 3000 	ldrb.w	r3, [sl]
 804f7ce:	2b01      	cmp	r3, #1
 804f7d0:	d10d      	bne.n	804f7ee <main+0x166>
 804f7d2:	7823      	ldrb	r3, [r4, #0]
 804f7d4:	0759      	lsls	r1, r3, #29
 804f7d6:	d40a      	bmi.n	804f7ee <main+0x166>
		refresh_iwdg();
 804f7d8:	f000 fde8 	bl	80503ac <refresh_iwdg>
		PRINTF("Irradiador transmitindo...\r\n");
 804f7dc:	4883      	ldr	r0, [pc, #524]	; (804f9ec <main+0x364>)
 804f7de:	f7fe ffa9 	bl	804e734 <TraceSend>
		flagsStation.active_irradiator = 1;
 804f7e2:	7823      	ldrb	r3, [r4, #0]
 804f7e4:	f043 0304 	orr.w	r3, r3, #4
 804f7e8:	7023      	strb	r3, [r4, #0]
		refresh_iwdg();
 804f7ea:	f000 fddf 	bl	80503ac <refresh_iwdg>
	if(flagsStation.receive_measure_irrad == 1) {
 804f7ee:	7823      	ldrb	r3, [r4, #0]
 804f7f0:	4e7f      	ldr	r6, [pc, #508]	; (804f9f0 <main+0x368>)
 804f7f2:	f013 0f08 	tst.w	r3, #8
 804f7f6:	d01d      	beq.n	804f834 <main+0x1ac>
		flagsStation.receive_measure_irrad = 0;
 804f7f8:	f36f 03c3 	bfc	r3, #3, #1
 804f7fc:	7023      	strb	r3, [r4, #0]
		refresh_iwdg();
 804f7fe:	f000 fdd5 	bl	80503ac <refresh_iwdg>
		measures += getIntMeasure();
 804f802:	f7f2 f97b 	bl	8041afc <getIntMeasure>
 804f806:	4a7b      	ldr	r2, [pc, #492]	; (804f9f4 <main+0x36c>)
 804f808:	6813      	ldr	r3, [r2, #0]
 804f80a:	4418      	add	r0, r3
		count_measures++;
 804f80c:	783b      	ldrb	r3, [r7, #0]
		measures += getIntMeasure();
 804f80e:	6010      	str	r0, [r2, #0]
		count_measures++;
 804f810:	3301      	adds	r3, #1
 804f812:	703b      	strb	r3, [r7, #0]
		refresh_iwdg();
 804f814:	f000 fdca 	bl	80503ac <refresh_iwdg>
		if(count_measures == 5) {
 804f818:	7838      	ldrb	r0, [r7, #0]
 804f81a:	2805      	cmp	r0, #5
 804f81c:	d108      	bne.n	804f830 <main+0x1a8>
			count_measures = 0;
 804f81e:	2300      	movs	r3, #0
 804f820:	703b      	strb	r3, [r7, #0]
			mean = mediaCalculator(5);
 804f822:	f7f2 f98d 	bl	8041b40 <mediaCalculator>
 804f826:	4601      	mov	r1, r0
 804f828:	6230      	str	r0, [r6, #32]
			PRINTF("Average of the last 5 measurements of the radiator:%ld W/m2\n", mean);
 804f82a:	4873      	ldr	r0, [pc, #460]	; (804f9f8 <main+0x370>)
 804f82c:	f7fe ff82 	bl	804e734 <TraceSend>
		refresh_iwdg();
 804f830:	f000 fdbc 	bl	80503ac <refresh_iwdg>
	if (flags_ble.enable_handler){
 804f834:	782b      	ldrb	r3, [r5, #0]
 804f836:	069a      	lsls	r2, r3, #26
 804f838:	d515      	bpl.n	804f866 <main+0x1de>
		flags_ble.enable_handler = 0;
 804f83a:	f36f 1345 	bfc	r3, #5, #1
		HAL_TIM_Base_Stop(&htim2);
 804f83e:	486f      	ldr	r0, [pc, #444]	; (804f9fc <main+0x374>)
		flags_ble.enable_handler = 0;
 804f840:	702b      	strb	r3, [r5, #0]
		HAL_TIM_Base_Stop(&htim2);
 804f842:	f7f7 f9f6 	bl	8046c32 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim3);
 804f846:	4862      	ldr	r0, [pc, #392]	; (804f9d0 <main+0x348>)
 804f848:	f7f7 f9f3 	bl	8046c32 <HAL_TIM_Base_Stop>
		refresh_iwdg();
 804f84c:	f000 fdae 	bl	80503ac <refresh_iwdg>
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804f850:	486b      	ldr	r0, [pc, #428]	; (804fa00 <main+0x378>)
 804f852:	f7f1 fd4b 	bl	80412ec <ble_handler>
		refresh_iwdg();
 804f856:	f000 fda9 	bl	80503ac <refresh_iwdg>
		HAL_TIM_Base_Start(&htim2);
 804f85a:	4868      	ldr	r0, [pc, #416]	; (804f9fc <main+0x374>)
 804f85c:	f7f7 f9d7 	bl	8046c0e <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 804f860:	485b      	ldr	r0, [pc, #364]	; (804f9d0 <main+0x348>)
 804f862:	f7f7 f9d4 	bl	8046c0e <HAL_TIM_Base_Start>
	if (flags_ble.update_mode==SET){
 804f866:	782b      	ldrb	r3, [r5, #0]
 804f868:	06d8      	lsls	r0, r3, #27
 804f86a:	d53a      	bpl.n	804f8e2 <main+0x25a>
			PRINTF("Update mode \r\n");
 804f86c:	4865      	ldr	r0, [pc, #404]	; (804fa04 <main+0x37c>)
 804f86e:	f7fe ff61 	bl	804e734 <TraceSend>
			refresh_iwdg();
 804f872:	f000 fd9b 	bl	80503ac <refresh_iwdg>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804f876:	f3ef 8310 	mrs	r3, PRIMASK
			flags_ble.update_mode = RESET;
 804f87a:	782b      	ldrb	r3, [r5, #0]
 804f87c:	f36f 1304 	bfc	r3, #4, #1
 804f880:	702b      	strb	r3, [r5, #0]
			refresh_iwdg();
 804f882:	f000 fd93 	bl	80503ac <refresh_iwdg>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 804f886:	2025      	movs	r0, #37	; 0x25
 804f888:	f7f4 fb36 	bl	8043ef8 <HAL_NVIC_DisableIRQ>
			HAL_UART_AbortReceive_IT(&huart1);
 804f88c:	485e      	ldr	r0, [pc, #376]	; (804fa08 <main+0x380>)
 804f88e:	f7f7 ffb5 	bl	80477fc <HAL_UART_AbortReceive_IT>
			HAL_UART_DeInit(&huart1);
 804f892:	485d      	ldr	r0, [pc, #372]	; (804fa08 <main+0x380>)
 804f894:	f7f7 fcd0 	bl	8047238 <HAL_UART_DeInit>
			HAL_Delay(1);
 804f898:	2001      	movs	r0, #1
 804f89a:	f000 fa8b 	bl	804fdb4 <HAL_Delay>
			HAL_TIM_Base_Stop(&htim2);
 804f89e:	4857      	ldr	r0, [pc, #348]	; (804f9fc <main+0x374>)
 804f8a0:	f7f7 f9c7 	bl	8046c32 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 804f8a4:	484a      	ldr	r0, [pc, #296]	; (804f9d0 <main+0x348>)
 804f8a6:	f7f7 f9c4 	bl	8046c32 <HAL_TIM_Base_Stop>
			COM_Init();
 804f8aa:	f000 ffcf 	bl	805084c <COM_Init>
			HAL_Delay(1);
 804f8ae:	2001      	movs	r0, #1
 804f8b0:	f000 fa80 	bl	804fdb4 <HAL_Delay>
			COM_Flush();
 804f8b4:	f000 fffa 	bl	80508ac <COM_Flush>
			refresh_iwdg();
 804f8b8:	f000 fd78 	bl	80503ac <refresh_iwdg>
			FW_UPDATE_Run();
 804f8bc:	f7ff f98a 	bl	804ebd4 <FW_UPDATE_Run>
			refresh_iwdg();
 804f8c0:	f000 fd74 	bl	80503ac <refresh_iwdg>
			HAL_TIM_Base_Start(&htim2);
 804f8c4:	484d      	ldr	r0, [pc, #308]	; (804f9fc <main+0x374>)
 804f8c6:	f7f7 f9a2 	bl	8046c0e <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 804f8ca:	4841      	ldr	r0, [pc, #260]	; (804f9d0 <main+0x348>)
 804f8cc:	f7f7 f99f 	bl	8046c0e <HAL_TIM_Base_Start>
			MX_USART1_UART_Init();
 804f8d0:	f7f1 fd9a 	bl	8041408 <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804f8d4:	2201      	movs	r2, #1
 804f8d6:	494d      	ldr	r1, [pc, #308]	; (804fa0c <main+0x384>)
 804f8d8:	484b      	ldr	r0, [pc, #300]	; (804fa08 <main+0x380>)
 804f8da:	f7f7 fd83 	bl	80473e4 <HAL_UART_Receive_IT>
			refresh_iwdg();
 804f8de:	f000 fd65 	bl	80503ac <refresh_iwdg>
    if (AppProcessRequest == LORA_SET)
 804f8e2:	7f33      	ldrb	r3, [r6, #28]
 804f8e4:	2b01      	cmp	r3, #1
 804f8e6:	d128      	bne.n	804f93a <main+0x2b2>
    	HAL_TIM_Base_Stop(&htim3);
 804f8e8:	4839      	ldr	r0, [pc, #228]	; (804f9d0 <main+0x348>)
	vbat_int = (uint16_t)(double)(vbat*100);
 804f8ea:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 804f9e8 <main+0x360>
    	HAL_TIM_Base_Stop(&htim3);
 804f8ee:	f7f7 f9a0 	bl	8046c32 <HAL_TIM_Base_Stop>
    	HAL_TIM_Base_Stop(&htim2);
 804f8f2:	4842      	ldr	r0, [pc, #264]	; (804f9fc <main+0x374>)
 804f8f4:	f7f7 f99d 	bl	8046c32 <HAL_TIM_Base_Stop>
    	refresh_iwdg();
 804f8f8:	f000 fd58 	bl	80503ac <refresh_iwdg>
    	AppProcessRequest = LORA_RESET;
 804f8fc:	2300      	movs	r3, #0
 804f8fe:	7733      	strb	r3, [r6, #28]
	vbat = get_battery_voltage();
 804f900:	f7f1 fcae 	bl	8041260 <get_battery_voltage>
 804f904:	4b36      	ldr	r3, [pc, #216]	; (804f9e0 <main+0x358>)
 804f906:	ec51 0b10 	vmov	r0, r1, d0
 804f90a:	ed83 0b00 	vstr	d0, [r3]
	vbat_int = (uint16_t)(double)(vbat*100);
 804f90e:	4642      	mov	r2, r8
 804f910:	464b      	mov	r3, r9
 804f912:	f7f0 ffa9 	bl	8040868 <__aeabi_dmul>
 804f916:	f7f1 fa7f 	bl	8040e18 <__aeabi_d2uiz>
 804f91a:	f8ab 0000 	strh.w	r0, [fp]
	if (LORA_JoinStatus() != LORA_SET) {
 804f91e:	f7fe fb9b 	bl	804e058 <LORA_JoinStatus>
 804f922:	2801      	cmp	r0, #1
 804f924:	d016      	beq.n	804f954 <main+0x2cc>
		LORA_Join();
 804f926:	f7fe fb13 	bl	804df50 <LORA_Join>
    	refresh_iwdg();
 804f92a:	f000 fd3f 	bl	80503ac <refresh_iwdg>
    	HAL_TIM_Base_Start(&htim2);
 804f92e:	4833      	ldr	r0, [pc, #204]	; (804f9fc <main+0x374>)
 804f930:	f7f7 f96d 	bl	8046c0e <HAL_TIM_Base_Start>
    	HAL_TIM_Base_Start(&htim3);
 804f934:	4826      	ldr	r0, [pc, #152]	; (804f9d0 <main+0x348>)
 804f936:	f7f7 f96a 	bl	8046c0e <HAL_TIM_Base_Start>
    if (LoraMacProcessRequest == LORA_SET)
 804f93a:	7833      	ldrb	r3, [r6, #0]
 804f93c:	2b01      	cmp	r3, #1
 804f93e:	f47f af04 	bne.w	804f74a <main+0xc2>
    	refresh_iwdg();
 804f942:	f000 fd33 	bl	80503ac <refresh_iwdg>
    	LoraMacProcessRequest = LORA_RESET;
 804f946:	2300      	movs	r3, #0
 804f948:	7033      	strb	r3, [r6, #0]
    	LoRaMacProcess();
 804f94a:	f7fa fcdb 	bl	804a304 <LoRaMacProcess>
    	refresh_iwdg();
 804f94e:	f000 fd2d 	bl	80503ac <refresh_iwdg>
 804f952:	e6fa      	b.n	804f74a <main+0xc2>
	get_time_now(AppData.Buff);
 804f954:	4b2e      	ldr	r3, [pc, #184]	; (804fa10 <main+0x388>)
 804f956:	9303      	str	r3, [sp, #12]
 804f958:	6818      	ldr	r0, [r3, #0]
 804f95a:	f7ff fc7d 	bl	804f258 <get_time_now>
	AppData.Port = LORAWAN_APP_PORT;
 804f95e:	9b03      	ldr	r3, [sp, #12]
	memcpy(&(AppData.Buff[6]),Buffer_to_send,sizeof(Estation_Parameters));
 804f960:	492c      	ldr	r1, [pc, #176]	; (804fa14 <main+0x38c>)
	AppData.Port = LORAWAN_APP_PORT;
 804f962:	2202      	movs	r2, #2
 804f964:	715a      	strb	r2, [r3, #5]
	memcpy(&(AppData.Buff[6]),Buffer_to_send,sizeof(Estation_Parameters));
 804f966:	681a      	ldr	r2, [r3, #0]
 804f968:	f101 0c0c 	add.w	ip, r1, #12
 804f96c:	1d90      	adds	r0, r2, #6
 804f96e:	f851 eb04 	ldr.w	lr, [r1], #4
 804f972:	f840 eb04 	str.w	lr, [r0], #4
 804f976:	4561      	cmp	r1, ip
 804f978:	d1f9      	bne.n	804f96e <main+0x2e6>
 804f97a:	7809      	ldrb	r1, [r1, #0]
 804f97c:	7001      	strb	r1, [r0, #0]
	AppData.Buff[19]= (vbat_int>>8)&0xFF;
 804f97e:	f8bb 1000 	ldrh.w	r1, [fp]
	AppData.Buff[20]= vbat_int&0xFF;
 804f982:	7511      	strb	r1, [r2, #20]
	AppData.Buff[19]= (vbat_int>>8)&0xFF;
 804f984:	0a08      	lsrs	r0, r1, #8
	AppData.BuffSize = sizeof(Estation_Parameters)+8;
 804f986:	2115      	movs	r1, #21
 804f988:	7119      	strb	r1, [r3, #4]
	if(flagsStation.active_irradiator == 1) {
 804f98a:	7821      	ldrb	r1, [r4, #0]
	AppData.Buff[19]= (vbat_int>>8)&0xFF;
 804f98c:	74d0      	strb	r0, [r2, #19]
	if(flagsStation.active_irradiator == 1) {
 804f98e:	0749      	lsls	r1, r1, #29
 804f990:	d505      	bpl.n	804f99e <main+0x316>
		AppData.Buff[21]= (mean>>8);
 804f992:	6a31      	ldr	r1, [r6, #32]
		AppData.Buff[22]= mean;
 804f994:	7591      	strb	r1, [r2, #22]
		AppData.Buff[21]= (mean>>8);
 804f996:	0a08      	lsrs	r0, r1, #8
 804f998:	7550      	strb	r0, [r2, #21]
		AppData.BuffSize += 2;
 804f99a:	2217      	movs	r2, #23
 804f99c:	711a      	strb	r2, [r3, #4]
	LORA_send((lora_AppData_t*)&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 804f99e:	2100      	movs	r1, #0
 804f9a0:	481b      	ldr	r0, [pc, #108]	; (804fa10 <main+0x388>)
 804f9a2:	f7fe fb69 	bl	804e078 <LORA_send>
 804f9a6:	e7c0      	b.n	804f92a <main+0x2a2>
 804f9a8:	20003dd0 	.word	0x20003dd0
 804f9ac:	20003f59 	.word	0x20003f59
 804f9b0:	20004f90 	.word	0x20004f90
 804f9b4:	08054e3b 	.word	0x08054e3b
 804f9b8:	08054e55 	.word	0x08054e55
 804f9bc:	20003e64 	.word	0x20003e64
 804f9c0:	08054e78 	.word	0x08054e78
 804f9c4:	200011e8 	.word	0x200011e8
 804f9c8:	0804f601 	.word	0x0804f601
 804f9cc:	200038d8 	.word	0x200038d8
 804f9d0:	2000608c 	.word	0x2000608c
 804f9d4:	200024a8 	.word	0x200024a8
 804f9d8:	08054e9b 	.word	0x08054e9b
 804f9dc:	20003e65 	.word	0x20003e65
 804f9e0:	20006150 	.word	0x20006150
 804f9e4:	08054eb2 	.word	0x08054eb2
 804f9e8:	2000618a 	.word	0x2000618a
 804f9ec:	08054ed2 	.word	0x08054ed2
 804f9f0:	200038d4 	.word	0x200038d4
 804f9f4:	200024a0 	.word	0x200024a0
 804f9f8:	08054eef 	.word	0x08054eef
 804f9fc:	200060cc 	.word	0x200060cc
 804fa00:	20002470 	.word	0x20002470
 804fa04:	08054f2c 	.word	0x08054f2c
 804fa08:	20003dd4 	.word	0x20003dd4
 804fa0c:	20003dc8 	.word	0x20003dc8
 804fa10:	200011e0 	.word	0x200011e0
 804fa14:	200038f8 	.word	0x200038f8
 804fa18:	200024a4 	.word	0x200024a4
 804fa1c:	40590000 	.word	0x40590000

0804fa20 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 804fa20:	4b05      	ldr	r3, [pc, #20]	; (804fa38 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 804fa22:	4906      	ldr	r1, [pc, #24]	; (804fa3c <MX_SDIO_SD_Init+0x1c>)
 804fa24:	2200      	movs	r2, #0
 804fa26:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 804fa2a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 804fa2e:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 5;
 804fa32:	2205      	movs	r2, #5
 804fa34:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 804fa36:	4770      	bx	lr
 804fa38:	2000624c 	.word	0x2000624c
 804fa3c:	40012c00 	.word	0x40012c00

0804fa40 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 804fa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804fa44:	4606      	mov	r6, r0
 804fa46:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fa48:	2214      	movs	r2, #20
 804fa4a:	2100      	movs	r1, #0
 804fa4c:	a803      	add	r0, sp, #12
 804fa4e:	f001 f8c4 	bl	8050bda <memset>
  if(sdHandle->Instance==SDIO)
 804fa52:	6832      	ldr	r2, [r6, #0]
 804fa54:	4b4d      	ldr	r3, [pc, #308]	; (804fb8c <HAL_SD_MspInit+0x14c>)
 804fa56:	429a      	cmp	r2, r3
 804fa58:	f040 8094 	bne.w	804fb84 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 804fa5c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 804fa60:	2500      	movs	r5, #0
 804fa62:	9500      	str	r5, [sp, #0]
 804fa64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fa66:	484a      	ldr	r0, [pc, #296]	; (804fb90 <HAL_SD_MspInit+0x150>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 804fa68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804fa6c:	645a      	str	r2, [r3, #68]	; 0x44
 804fa6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fa70:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804fa74:	9200      	str	r2, [sp, #0]
 804fa76:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804fa78:	9501      	str	r5, [sp, #4]
 804fa7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fa7c:	f042 0204 	orr.w	r2, r2, #4
 804fa80:	631a      	str	r2, [r3, #48]	; 0x30
 804fa82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fa84:	f002 0204 	and.w	r2, r2, #4
 804fa88:	9201      	str	r2, [sp, #4]
 804fa8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804fa8c:	9502      	str	r5, [sp, #8]
 804fa8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fa90:	f042 0208 	orr.w	r2, r2, #8
 804fa94:	631a      	str	r2, [r3, #48]	; 0x30
 804fa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fa98:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804fa9c:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804fa9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804faa0:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804faa4:	f04f 0901 	mov.w	r9, #1
 804faa8:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804faaa:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804faae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804fab0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fab2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 804fab6:	e9cd 3a03 	strd	r3, sl, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804faba:	e9cd 9705 	strd	r9, r7, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804fabe:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fac2:	f7f4 fdd1 	bl	8044668 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804fac6:	eb0d 0104 	add.w	r1, sp, r4
 804faca:	4832      	ldr	r0, [pc, #200]	; (804fb94 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804facc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804face:	e9cd 8a03 	strd	r8, sl, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 804fad2:	4c31      	ldr	r4, [pc, #196]	; (804fb98 <HAL_SD_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804fad4:	e9cd 9705 	strd	r9, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804fad8:	f7f4 fdc6 	bl	8044668 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804fadc:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 804fba4 <HAL_SD_MspInit+0x164>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804fae0:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804fae2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804fae6:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804faea:	f44f 6980 	mov.w	r9, #1024	; 0x400
 804faee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804faf2:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 804faf6:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 804fafa:	2320      	movs	r3, #32
 804fafc:	e9c4 a306 	strd	sl, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804fb00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 804fb04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804fb08:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804fb0a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 804fb0e:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804fb12:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804fb16:	f7f4 fa3b 	bl	8043f90 <HAL_DMA_Init>
 804fb1a:	b108      	cbz	r0, 804fb20 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 804fb1c:	f7fe ff0e 	bl	804e93c <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804fb20:	4a1e      	ldr	r2, [pc, #120]	; (804fb9c <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 804fb22:	6434      	str	r4, [r6, #64]	; 0x40
 804fb24:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 804fb26:	4c1e      	ldr	r4, [pc, #120]	; (804fba0 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804fb28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804fb2c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804fb30:	2140      	movs	r1, #64	; 0x40
 804fb32:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804fb34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804fb38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804fb3c:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 804fb40:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804fb42:	2704      	movs	r7, #4
 804fb44:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804fb46:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804fb4a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 804fb4e:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804fb50:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804fb54:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 804fb58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804fb5c:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804fb5e:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804fb62:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804fb66:	f7f4 fa13 	bl	8043f90 <HAL_DMA_Init>
 804fb6a:	b108      	cbz	r0, 804fb70 <HAL_SD_MspInit+0x130>
    {
      Error_Handler();
 804fb6c:	f7fe fee6 	bl	804e93c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804fb70:	2200      	movs	r2, #0
 804fb72:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804fb74:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804fb76:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804fb78:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804fb7a:	f7f4 f97b 	bl	8043e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 804fb7e:	2031      	movs	r0, #49	; 0x31
 804fb80:	f7f4 f9ac 	bl	8043edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 804fb84:	b008      	add	sp, #32
 804fb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804fb8a:	bf00      	nop
 804fb8c:	40012c00 	.word	0x40012c00
 804fb90:	40020800 	.word	0x40020800
 804fb94:	40020c00 	.word	0x40020c00
 804fb98:	2000618c 	.word	0x2000618c
 804fb9c:	400264a0 	.word	0x400264a0
 804fba0:	200061ec 	.word	0x200061ec
 804fba4:	40026458 	.word	0x40026458

0804fba8 <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 804fba8:	b513      	push	{r0, r1, r4, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 804fbaa:	4604      	mov	r4, r0
 804fbac:	b910      	cbnz	r0, 804fbb4 <SFU_APP_InstallAtNextReset+0xc>
  {
    return HAL_ERROR;
 804fbae:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 804fbb0:	b002      	add	sp, #8
 804fbb2:	bd10      	pop	{r4, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 804fbb4:	4b09      	ldr	r3, [pc, #36]	; (804fbdc <SFU_APP_InstallAtNextReset+0x34>)
 804fbb6:	69db      	ldr	r3, [r3, #28]
 804fbb8:	9301      	str	r3, [sp, #4]
 804fbba:	f44f 7100 	mov.w	r1, #512	; 0x200
 804fbbe:	4618      	mov	r0, r3
 804fbc0:	f7fe ff30 	bl	804ea24 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 804fbc4:	2800      	cmp	r0, #0
 804fbc6:	d1f2      	bne.n	804fbae <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 804fbc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804fbcc:	4621      	mov	r1, r4
 804fbce:	9801      	ldr	r0, [sp, #4]
 804fbd0:	f7fe ff58 	bl	804ea84 <FLASH_If_Write>
    return HAL_ERROR;
 804fbd4:	3000      	adds	r0, #0
 804fbd6:	bf18      	it	ne
 804fbd8:	2001      	movne	r0, #1
 804fbda:	e7e9      	b.n	804fbb0 <SFU_APP_InstallAtNextReset+0x8>
 804fbdc:	08054278 	.word	0x08054278

0804fbe0 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804fbe0:	4b06      	ldr	r3, [pc, #24]	; (804fbfc <SFU_APP_GetDownloadAreaInfo+0x1c>)
 804fbe2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804fbe6:	4b06      	ldr	r3, [pc, #24]	; (804fc00 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804fbe8:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804fbea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804fbee:	3301      	adds	r3, #1
 804fbf0:	1a9b      	subs	r3, r3, r2
 804fbf2:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 804fbf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 804fbf8:	608b      	str	r3, [r1, #8]
}
 804fbfa:	4770      	bx	lr
 804fbfc:	08054278 	.word	0x08054278
 804fc00:	08054298 	.word	0x08054298

0804fc04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 804fc04:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fc06:	2214      	movs	r2, #20
{
 804fc08:	b08a      	sub	sp, #40	; 0x28
 804fc0a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fc0c:	2100      	movs	r1, #0
 804fc0e:	eb0d 0002 	add.w	r0, sp, r2
 804fc12:	f000 ffe2 	bl	8050bda <memset>
  if(hadc->Instance==ADC1)
 804fc16:	6823      	ldr	r3, [r4, #0]
 804fc18:	4a1e      	ldr	r2, [pc, #120]	; (804fc94 <HAL_ADC_MspInit+0x90>)
 804fc1a:	4293      	cmp	r3, r2
 804fc1c:	d11f      	bne.n	804fc5e <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 804fc1e:	4b1e      	ldr	r3, [pc, #120]	; (804fc98 <HAL_ADC_MspInit+0x94>)
 804fc20:	2100      	movs	r1, #0
 804fc22:	9101      	str	r1, [sp, #4]
 804fc24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fc26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804fc2a:	645a      	str	r2, [r3, #68]	; 0x44
 804fc2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fc2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 804fc32:	9201      	str	r2, [sp, #4]
 804fc34:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804fc36:	9102      	str	r1, [sp, #8]
 804fc38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc3a:	f042 0201 	orr.w	r2, r2, #1
 804fc3e:	631a      	str	r2, [r3, #48]	; 0x30
 804fc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fc42:	f003 0301 	and.w	r3, r3, #1
 804fc46:	9302      	str	r3, [sp, #8]
 804fc48:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 804fc4a:	2301      	movs	r3, #1

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN7		// MIK
    */
	GPIO_InitStruct.Pin = BIRUTA_Pin;
 804fc4c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804fc4e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804fc50:	2303      	movs	r3, #3
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804fc52:	4812      	ldr	r0, [pc, #72]	; (804fc9c <HAL_ADC_MspInit+0x98>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804fc54:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804fc56:	f7f4 fd07 	bl	8044668 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 804fc5a:	b00a      	add	sp, #40	; 0x28
 804fc5c:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 804fc5e:	4a10      	ldr	r2, [pc, #64]	; (804fca0 <HAL_ADC_MspInit+0x9c>)
 804fc60:	4293      	cmp	r3, r2
 804fc62:	d1fa      	bne.n	804fc5a <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 804fc64:	4b0c      	ldr	r3, [pc, #48]	; (804fc98 <HAL_ADC_MspInit+0x94>)
 804fc66:	2100      	movs	r1, #0
 804fc68:	9103      	str	r1, [sp, #12]
 804fc6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fc6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804fc70:	645a      	str	r2, [r3, #68]	; 0x44
 804fc72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804fc74:	f402 7200 	and.w	r2, r2, #512	; 0x200
 804fc78:	9203      	str	r2, [sp, #12]
 804fc7a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804fc7c:	9104      	str	r1, [sp, #16]
 804fc7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fc80:	f042 0201 	orr.w	r2, r2, #1
 804fc84:	631a      	str	r2, [r3, #48]	; 0x30
 804fc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fc88:	f003 0301 	and.w	r3, r3, #1
 804fc8c:	9304      	str	r3, [sp, #16]
 804fc8e:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = BIRUTA_Pin;
 804fc90:	2380      	movs	r3, #128	; 0x80
 804fc92:	e7db      	b.n	804fc4c <HAL_ADC_MspInit+0x48>
 804fc94:	40012000 	.word	0x40012000
 804fc98:	40023800 	.word	0x40023800
 804fc9c:	40020000 	.word	0x40020000
 804fca0:	40012100 	.word	0x40012100

0804fca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 804fca4:	b530      	push	{r4, r5, lr}
 804fca6:	4604      	mov	r4, r0
 804fca8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fcaa:	2214      	movs	r2, #20
 804fcac:	2100      	movs	r1, #0
 804fcae:	a803      	add	r0, sp, #12
 804fcb0:	f000 ff93 	bl	8050bda <memset>
  if(hi2c->Instance==I2C1)
 804fcb4:	6822      	ldr	r2, [r4, #0]
 804fcb6:	4b14      	ldr	r3, [pc, #80]	; (804fd08 <HAL_I2C_MspInit+0x64>)
 804fcb8:	429a      	cmp	r2, r3
 804fcba:	d123      	bne.n	804fd04 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fcbc:	4c13      	ldr	r4, [pc, #76]	; (804fd0c <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = SCL_BME280_Pin|SDA_BME280_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fcbe:	4814      	ldr	r0, [pc, #80]	; (804fd10 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fcc0:	2500      	movs	r5, #0
 804fcc2:	9501      	str	r5, [sp, #4]
 804fcc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804fcc6:	f043 0302 	orr.w	r3, r3, #2
 804fcca:	6323      	str	r3, [r4, #48]	; 0x30
 804fccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804fcce:	f003 0302 	and.w	r3, r3, #2
 804fcd2:	9301      	str	r3, [sp, #4]
 804fcd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804fcd6:	22c0      	movs	r2, #192	; 0xc0
 804fcd8:	2312      	movs	r3, #18
 804fcda:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804fcde:	2101      	movs	r1, #1
 804fce0:	2303      	movs	r3, #3
 804fce2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 804fce6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fce8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 804fcea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fcec:	f7f4 fcbc 	bl	8044668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 804fcf0:	9502      	str	r5, [sp, #8]
 804fcf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804fcf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804fcf8:	6423      	str	r3, [r4, #64]	; 0x40
 804fcfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804fcfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804fd00:	9302      	str	r3, [sp, #8]
 804fd02:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 804fd04:	b009      	add	sp, #36	; 0x24
 804fd06:	bd30      	pop	{r4, r5, pc}
 804fd08:	40005400 	.word	0x40005400
 804fd0c:	40023800 	.word	0x40023800
 804fd10:	40020400 	.word	0x40020400

0804fd14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 804fd16:	4604      	mov	r4, r0
 804fd18:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fd1a:	2214      	movs	r2, #20
 804fd1c:	2100      	movs	r1, #0
 804fd1e:	a803      	add	r0, sp, #12
 804fd20:	f000 ff5b 	bl	8050bda <memset>
  if(hspi->Instance==SPI2)
 804fd24:	6822      	ldr	r2, [r4, #0]
 804fd26:	4b1f      	ldr	r3, [pc, #124]	; (804fda4 <HAL_SPI_MspInit+0x90>)
 804fd28:	429a      	cmp	r2, r3
 804fd2a:	d138      	bne.n	804fd9e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 804fd2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804fd30:	2400      	movs	r4, #0
 804fd32:	9400      	str	r4, [sp, #0]
 804fd34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fd36:	481c      	ldr	r0, [pc, #112]	; (804fda8 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 804fd38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804fd3c:	641a      	str	r2, [r3, #64]	; 0x40
 804fd3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fd40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804fd44:	9200      	str	r2, [sp, #0]
 804fd46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804fd48:	9401      	str	r4, [sp, #4]
 804fd4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fd4c:	f042 0204 	orr.w	r2, r2, #4
 804fd50:	631a      	str	r2, [r3, #48]	; 0x30
 804fd52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fd54:	f002 0204 	and.w	r2, r2, #4
 804fd58:	9201      	str	r2, [sp, #4]
 804fd5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fd5c:	9402      	str	r4, [sp, #8]
 804fd5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fd60:	f042 0202 	orr.w	r2, r2, #2
 804fd64:	631a      	str	r2, [r3, #48]	; 0x30
 804fd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fd68:	f003 0302 	and.w	r3, r3, #2
 804fd6c:	9302      	str	r3, [sp, #8]
 804fd6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fd70:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fd72:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fd76:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804fd78:	2603      	movs	r6, #3
 804fd7a:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fd7c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804fd80:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fd84:	f7f4 fc70 	bl	8044668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 804fd88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804fd8c:	a903      	add	r1, sp, #12
 804fd8e:	4807      	ldr	r0, [pc, #28]	; (804fdac <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804fd90:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fd92:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804fd96:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804fd9a:	f7f4 fc65 	bl	8044668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 804fd9e:	b009      	add	sp, #36	; 0x24
 804fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804fda2:	bf00      	nop
 804fda4:	40003800 	.word	0x40003800
 804fda8:	40020800 	.word	0x40020800
 804fdac:	40020400 	.word	0x40020400

0804fdb0 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 804fdb0:	2000      	movs	r0, #0
 804fdb2:	4770      	bx	lr

0804fdb4 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 804fdb4:	b082      	sub	sp, #8
 804fdb6:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804fdb8:	9801      	ldr	r0, [sp, #4]
}
 804fdba:	b002      	add	sp, #8
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804fdbc:	f7ff b9b8 	b.w	804f130 <HW_RTC_DelayMs>

0804fdc0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 804fdc0:	b082      	sub	sp, #8
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 804fdc2:	2300      	movs	r3, #0
 804fdc4:	9301      	str	r3, [sp, #4]
 804fdc6:	4b06      	ldr	r3, [pc, #24]	; (804fde0 <HAL_MspInit+0x20>)
 804fdc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fdca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804fdce:	641a      	str	r2, [r3, #64]	; 0x40
 804fdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804fdd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804fdd6:	9301      	str	r3, [sp, #4]
 804fdd8:	9b01      	ldr	r3, [sp, #4]

  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  HW_GpioInit();
}
 804fdda:	b002      	add	sp, #8
  HW_GpioInit();
 804fddc:	f000 b866 	b.w	804feac <HW_GpioInit>
 804fde0:	40023800 	.word	0x40023800

0804fde4 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 804fde4:	b510      	push	{r4, lr}
 804fde6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804fde8:	2410      	movs	r4, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804fdea:	2228      	movs	r2, #40	; 0x28
 804fdec:	2100      	movs	r1, #0
 804fdee:	a806      	add	r0, sp, #24
 804fdf0:	f000 fef3 	bl	8050bda <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804fdf4:	4622      	mov	r2, r4
 804fdf6:	2100      	movs	r1, #0
 804fdf8:	4668      	mov	r0, sp
 804fdfa:	f000 feee 	bl	8050bda <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 804fdfe:	230b      	movs	r3, #11
 804fe00:	9304      	str	r3, [sp, #16]
          |RCC_OSCILLATORTYPE_HSE; //_LSE
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804fe02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804fe06:	2301      	movs	r3, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804fe08:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804fe0c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804fe10:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804fe12:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804fe14:	f7f5 f9f2 	bl	80451fc <HAL_RCC_OscConfig>
 804fe18:	b108      	cbz	r0, 804fe1e <HAL_RTC_MspInit+0x3a>
  {
    Error_Handler();
 804fe1a:	f7fe fd8f 	bl	804e93c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804fe1e:	2302      	movs	r3, #2
 804fe20:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;//LSE
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804fe22:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;//LSE
 804fe24:	4b09      	ldr	r3, [pc, #36]	; (804fe4c <HAL_RTC_MspInit+0x68>)
 804fe26:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804fe28:	f7f5 fc76 	bl	8045718 <HAL_RCCEx_PeriphCLKConfig>
 804fe2c:	b108      	cbz	r0, 804fe32 <HAL_RTC_MspInit+0x4e>
  {
    Error_Handler();
 804fe2e:	f7fe fd85 	bl	804e93c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();//RTCCLK
 804fe32:	4b07      	ldr	r3, [pc, #28]	; (804fe50 <HAL_RTC_MspInit+0x6c>)
 804fe34:	2201      	movs	r2, #1
 804fe36:	601a      	str	r2, [r3, #0]

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 804fe38:	2200      	movs	r2, #0
 804fe3a:	4611      	mov	r1, r2
 804fe3c:	2029      	movs	r0, #41	; 0x29
 804fe3e:	f7f4 f819 	bl	8043e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 804fe42:	2029      	movs	r0, #41	; 0x29
 804fe44:	f7f4 f84a 	bl	8043edc <HAL_NVIC_EnableIRQ>
}
 804fe48:	b010      	add	sp, #64	; 0x40
 804fe4a:	bd10      	pop	{r4, pc}
 804fe4c:	00080300 	.word	0x00080300
 804fe50:	42470e3c 	.word	0x42470e3c

0804fe54 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  TimerIrqHandler();
 804fe54:	f7fe bba8 	b.w	804e5a8 <TimerIrqHandler>

0804fe58 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	HW_GPIO_IrqHandler(GPIO_Pin);
 804fe58:	f7fe bfcc 	b.w	804edf4 <HW_GPIO_IrqHandler>

0804fe5c <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 804fe5c:	2810      	cmp	r0, #16
 804fe5e:	d020      	beq.n	804fea2 <MSP_GetIRQn+0x46>
 804fe60:	d80c      	bhi.n	804fe7c <MSP_GetIRQn+0x20>
 804fe62:	2802      	cmp	r0, #2
 804fe64:	d019      	beq.n	804fe9a <MSP_GetIRQn+0x3e>
 804fe66:	d803      	bhi.n	804fe70 <MSP_GetIRQn+0x14>
 804fe68:	2801      	cmp	r0, #1
 804fe6a:	d01c      	beq.n	804fea6 <MSP_GetIRQn+0x4a>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 804fe6c:	2028      	movs	r0, #40	; 0x28
 804fe6e:	4770      	bx	lr
  switch (GPIO_Pin)
 804fe70:	2804      	cmp	r0, #4
 804fe72:	d014      	beq.n	804fe9e <MSP_GetIRQn+0x42>
 804fe74:	2808      	cmp	r0, #8
 804fe76:	d1f9      	bne.n	804fe6c <MSP_GetIRQn+0x10>
      return EXTI3_IRQn;
 804fe78:	2009      	movs	r0, #9
 804fe7a:	4770      	bx	lr
  switch (GPIO_Pin)
 804fe7c:	2880      	cmp	r0, #128	; 0x80
 804fe7e:	d004      	beq.n	804fe8a <MSP_GetIRQn+0x2e>
 804fe80:	d805      	bhi.n	804fe8e <MSP_GetIRQn+0x32>
 804fe82:	2820      	cmp	r0, #32
 804fe84:	d001      	beq.n	804fe8a <MSP_GetIRQn+0x2e>
 804fe86:	2840      	cmp	r0, #64	; 0x40
 804fe88:	d1f0      	bne.n	804fe6c <MSP_GetIRQn+0x10>
      return EXTI9_5_IRQn;
 804fe8a:	2017      	movs	r0, #23
 804fe8c:	4770      	bx	lr
  switch (GPIO_Pin)
 804fe8e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 804fe92:	d0fa      	beq.n	804fe8a <MSP_GetIRQn+0x2e>
 804fe94:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 804fe98:	e7f6      	b.n	804fe88 <MSP_GetIRQn+0x2c>
      return EXTI1_IRQn;
 804fe9a:	2007      	movs	r0, #7
 804fe9c:	4770      	bx	lr
      return EXTI2_IRQn;
 804fe9e:	2008      	movs	r0, #8
 804fea0:	4770      	bx	lr
      return EXTI4_IRQn;
 804fea2:	200a      	movs	r0, #10
 804fea4:	4770      	bx	lr
      return EXTI0_IRQn;
 804fea6:	2006      	movs	r0, #6
  }
}
 804fea8:	4770      	bx	lr
	...

0804feac <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 804feac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804feb0:	b08d      	sub	sp, #52	; 0x34
	 GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804feb2:	2400      	movs	r4, #0
 804feb4:	4d60      	ldr	r5, [pc, #384]	; (8050038 <HW_GpioInit+0x18c>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804feb6:	4f61      	ldr	r7, [pc, #388]	; (805003c <HW_GpioInit+0x190>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804feb8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8050040 <HW_GpioInit+0x194>
	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOB, LED_PLUVIOMETRO_Pin|LED_ANEMOMETRO_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : USER_BUTTON_Pin */
	  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804febc:	f8df a184 	ldr.w	sl, [pc, #388]	; 8050044 <HW_GpioInit+0x198>
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fec0:	2214      	movs	r2, #20
 804fec2:	2100      	movs	r1, #0
 804fec4:	a807      	add	r0, sp, #28
 804fec6:	f000 fe88 	bl	8050bda <memset>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804feca:	9400      	str	r4, [sp, #0]
 804fecc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fece:	f043 0310 	orr.w	r3, r3, #16
 804fed2:	632b      	str	r3, [r5, #48]	; 0x30
 804fed4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fed6:	f003 0310 	and.w	r3, r3, #16
 804feda:	9300      	str	r3, [sp, #0]
 804fedc:	9b00      	ldr	r3, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 804fede:	9401      	str	r4, [sp, #4]
 804fee0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fee2:	f043 0304 	orr.w	r3, r3, #4
 804fee6:	632b      	str	r3, [r5, #48]	; 0x30
 804fee8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804feea:	f003 0304 	and.w	r3, r3, #4
 804feee:	9301      	str	r3, [sp, #4]
 804fef0:	9b01      	ldr	r3, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 804fef2:	9402      	str	r4, [sp, #8]
 804fef4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804fefa:	632b      	str	r3, [r5, #48]	; 0x30
 804fefc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804ff02:	9302      	str	r3, [sp, #8]
 804ff04:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 804ff06:	9403      	str	r4, [sp, #12]
 804ff08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff0a:	f043 0301 	orr.w	r3, r3, #1
 804ff0e:	632b      	str	r3, [r5, #48]	; 0x30
 804ff10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff12:	f003 0301 	and.w	r3, r3, #1
 804ff16:	9303      	str	r3, [sp, #12]
 804ff18:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 804ff1a:	9404      	str	r4, [sp, #16]
 804ff1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff1e:	f043 0302 	orr.w	r3, r3, #2
 804ff22:	632b      	str	r3, [r5, #48]	; 0x30
 804ff24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff26:	f003 0302 	and.w	r3, r3, #2
 804ff2a:	9304      	str	r3, [sp, #16]
 804ff2c:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804ff2e:	9405      	str	r4, [sp, #20]
 804ff30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff32:	f043 0308 	orr.w	r3, r3, #8
 804ff36:	632b      	str	r3, [r5, #48]	; 0x30
 804ff38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ff3a:	f003 0308 	and.w	r3, r3, #8
 804ff3e:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804ff40:	4622      	mov	r2, r4
 804ff42:	4638      	mov	r0, r7
 804ff44:	2140      	movs	r1, #64	; 0x40
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804ff46:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804ff48:	f7f4 fd02 	bl	8044950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804ff4c:	4622      	mov	r2, r4
 804ff4e:	4648      	mov	r0, r9
 804ff50:	2101      	movs	r1, #1
 804ff52:	f7f4 fcfd 	bl	8044950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);
 804ff56:	2201      	movs	r2, #1
 804ff58:	4648      	mov	r0, r9
 804ff5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 804ff5e:	f7f4 fcf7 	bl	8044950 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804ff62:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804ff64:	f04f 0808 	mov.w	r8, #8
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804ff68:	a907      	add	r1, sp, #28
 804ff6a:	4638      	mov	r0, r7

	  /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = ANEMOMETRO_Pin;
 804ff6c:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804ff70:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804ff74:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804ff76:	f7f4 fb77 	bl	8044668 <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804ff7a:	a907      	add	r1, sp, #28
 804ff7c:	4638      	mov	r0, r7
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804ff7e:	e9cd ba07 	strd	fp, sl, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 804ff82:	9609      	str	r6, [sp, #36]	; 0x24
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804ff84:	f7f4 fb70 	bl	8044668 <HAL_GPIO_Init>

      /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = PLUVIOMETRO_Pin;
 804ff88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804ff8c:	e9cd 3a07 	strd	r3, sl, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804ff90:	a907      	add	r1, sp, #28
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804ff92:	2302      	movs	r3, #2
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804ff94:	4638      	mov	r0, r7
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804ff96:	9309      	str	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804ff98:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804ff9c:	f7f4 fb64 	bl	8044668 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LORA_RESET_Pin|MEM_WP_Pin;
 804ffa0:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804ffa4:	a907      	add	r1, sp, #28
 804ffa6:	4648      	mov	r0, r9
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804ffa8:	e9cd 3607 	strd	r3, r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804ffac:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804ffb0:	f7f4 fb5a 	bl	8044668 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804ffb4:	4632      	mov	r2, r6
 804ffb6:	4659      	mov	r1, fp
 804ffb8:	4638      	mov	r0, r7
 804ffba:	f7f4 fcc9 	bl	8044950 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SD_DET_CARD_Pin;
 804ffbe:	2380      	movs	r3, #128	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804ffc0:	a907      	add	r1, sp, #28
 804ffc2:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804ffc4:	e9cd 3407 	strd	r3, r4, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804ffc8:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804ffca:	f7f4 fb4d 	bl	8044668 <HAL_GPIO_Init>

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804ffce:	9406      	str	r4, [sp, #24]
 804ffd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ffd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804ffd6:	632b      	str	r3, [r5, #48]	; 0x30
 804ffd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804ffda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804ffde:	4622      	mov	r2, r4
 804ffe0:	4621      	mov	r1, r4
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804ffe2:	9306      	str	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804ffe4:	203b      	movs	r0, #59	; 0x3b
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804ffe6:	9b06      	ldr	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804ffe8:	f7f3 ff44 	bl	8043e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 804ffec:	203b      	movs	r0, #59	; 0x3b
 804ffee:	f7f3 ff75 	bl	8043edc <HAL_NVIC_EnableIRQ>
	  /* DMA2_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 804fff2:	4622      	mov	r2, r4
 804fff4:	4621      	mov	r1, r4
 804fff6:	2045      	movs	r0, #69	; 0x45
 804fff8:	f7f3 ff3c 	bl	8043e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 804fffc:	2045      	movs	r0, #69	; 0x45
 804fffe:	f7f3 ff6d 	bl	8043edc <HAL_NVIC_EnableIRQ>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8050002:	4622      	mov	r2, r4
 8050004:	4621      	mov	r1, r4
 8050006:	2006      	movs	r0, #6
 8050008:	f7f3 ff34 	bl	8043e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 805000c:	2006      	movs	r0, #6
 805000e:	f7f3 ff65 	bl	8043edc <HAL_NVIC_EnableIRQ>

  	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8050012:	4622      	mov	r2, r4
 8050014:	4621      	mov	r1, r4
 8050016:	4640      	mov	r0, r8
 8050018:	f7f3 ff2c 	bl	8043e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 805001c:	4640      	mov	r0, r8
 805001e:	f7f3 ff5d 	bl	8043edc <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8050022:	4622      	mov	r2, r4
 8050024:	4621      	mov	r1, r4
 8050026:	2028      	movs	r0, #40	; 0x28
 8050028:	f7f3 ff24 	bl	8043e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 805002c:	2028      	movs	r0, #40	; 0x28
 805002e:	f7f3 ff55 	bl	8043edc <HAL_NVIC_EnableIRQ>

}
 8050032:	b00d      	add	sp, #52	; 0x34
 8050034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8050038:	40023800 	.word	0x40023800
 805003c:	40021000 	.word	0x40021000
 8050040:	40020400 	.word	0x40020400
 8050044:	10110000 	.word	0x10110000

08050048 <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 8050048:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 805004a:	2400      	movs	r4, #0
{
 805004c:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 805004e:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8050050:	2214      	movs	r2, #20
 8050052:	4621      	mov	r1, r4
 8050054:	a807      	add	r0, sp, #28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8050056:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8050058:	f000 fdbf 	bl	8050bda <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 805005c:	462a      	mov	r2, r5
 805005e:	4621      	mov	r1, r4
 8050060:	a803      	add	r0, sp, #12
 8050062:	f000 fdba 	bl	8050bda <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8050066:	4b23      	ldr	r3, [pc, #140]	; (80500f4 <SystemClock_Config+0xac>)
 8050068:	9401      	str	r4, [sp, #4]
 805006a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 805006c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8050070:	641a      	str	r2, [r3, #64]	; 0x40
 8050072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8050074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8050078:	9301      	str	r3, [sp, #4]
 805007a:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 805007c:	4b1e      	ldr	r3, [pc, #120]	; (80500f8 <SystemClock_Config+0xb0>)
 805007e:	9402      	str	r4, [sp, #8]
 8050080:	681a      	ldr	r2, [r3, #0]
 8050082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8050086:	601a      	str	r2, [r3, #0]
 8050088:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	//RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 805008a:	9514      	str	r5, [sp, #80]	; 0x50
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 805008c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8050090:	9302      	str	r3, [sp, #8]
 8050092:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8050094:	230b      	movs	r3, #11
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8050096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 805009a:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 805009c:	2301      	movs	r3, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 805009e:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80500a2:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80500a4:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 192;
 80500a6:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80500a8:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80500aa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80500ae:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;

	//RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80500b2:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80500b4:	2304      	movs	r3, #4
 80500b6:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80500b8:	f7f5 f8a0 	bl	80451fc <HAL_RCC_OscConfig>
 80500bc:	b108      	cbz	r0, 80500c2 <SystemClock_Config+0x7a>
		Error_Handler();
 80500be:	f7fe fc3d 	bl	804e93c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80500c2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80500c4:	2100      	movs	r1, #0
 80500c6:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80500c8:	e9cd 3407 	strd	r3, r4, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80500cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80500d0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80500d2:	f7f5 fa67 	bl	80455a4 <HAL_RCC_ClockConfig>
 80500d6:	b108      	cbz	r0, 80500dc <SystemClock_Config+0x94>
		Error_Handler();
 80500d8:	f7fe fc30 	bl	804e93c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80500dc:	2302      	movs	r3, #2
 80500de:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80500e0:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 80500e2:	4b06      	ldr	r3, [pc, #24]	; (80500fc <SystemClock_Config+0xb4>)
 80500e4:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80500e6:	f7f5 fb17 	bl	8045718 <HAL_RCCEx_PeriphCLKConfig>
 80500ea:	b108      	cbz	r0, 80500f0 <SystemClock_Config+0xa8>
		Error_Handler();
 80500ec:	f7fe fc26 	bl	804e93c <Error_Handler>
	}

}
 80500f0:	b019      	add	sp, #100	; 0x64
 80500f2:	bd30      	pop	{r4, r5, pc}
 80500f4:	40023800 	.word	0x40023800
 80500f8:	40007000 	.word	0x40007000
 80500fc:	00080300 	.word	0x00080300

08050100 <HW_GetRandomSeed>:
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 8050100:	4a03      	ldr	r2, [pc, #12]	; (8050110 <HW_GetRandomSeed+0x10>)
 8050102:	4b04      	ldr	r3, [pc, #16]	; (8050114 <HW_GetRandomSeed+0x14>)
 8050104:	6810      	ldr	r0, [r2, #0]
 8050106:	681b      	ldr	r3, [r3, #0]
 8050108:	4043      	eors	r3, r0
 805010a:	6850      	ldr	r0, [r2, #4]
}
 805010c:	4058      	eors	r0, r3
 805010e:	4770      	bx	lr
 8050110:	1fff7594 	.word	0x1fff7594
 8050114:	1fff7590 	.word	0x1fff7590

08050118 <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8050118:	4910      	ldr	r1, [pc, #64]	; (805015c <HW_GetUniqueId+0x44>)
 805011a:	4a11      	ldr	r2, [pc, #68]	; (8050160 <HW_GetUniqueId+0x48>)
 805011c:	680b      	ldr	r3, [r1, #0]
{
 805011e:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8050120:	6814      	ldr	r4, [r2, #0]
 8050122:	4423      	add	r3, r4
 8050124:	0e1b      	lsrs	r3, r3, #24
 8050126:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 8050128:	6814      	ldr	r4, [r2, #0]
 805012a:	680b      	ldr	r3, [r1, #0]
 805012c:	4423      	add	r3, r4
 805012e:	0c1b      	lsrs	r3, r3, #16
 8050130:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 8050132:	6814      	ldr	r4, [r2, #0]
 8050134:	680b      	ldr	r3, [r1, #0]
 8050136:	4423      	add	r3, r4
 8050138:	0a1b      	lsrs	r3, r3, #8
 805013a:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 805013c:	6812      	ldr	r2, [r2, #0]
 805013e:	680b      	ldr	r3, [r1, #0]
 8050140:	4413      	add	r3, r2
 8050142:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 8050144:	4b07      	ldr	r3, [pc, #28]	; (8050164 <HW_GetUniqueId+0x4c>)
 8050146:	78da      	ldrb	r2, [r3, #3]
 8050148:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 805014a:	885a      	ldrh	r2, [r3, #2]
 805014c:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 805014e:	681a      	ldr	r2, [r3, #0]
 8050150:	0a12      	lsrs	r2, r2, #8
 8050152:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 8050154:	681b      	ldr	r3, [r3, #0]
 8050156:	7003      	strb	r3, [r0, #0]
}
 8050158:	bd10      	pop	{r4, pc}
 805015a:	bf00      	nop
 805015c:	1fff7590 	.word	0x1fff7590
 8050160:	1fff7598 	.word	0x1fff7598
 8050164:	1fff7594 	.word	0x1fff7594

08050168 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 8050168:	b510      	push	{r4, lr}
 805016a:	b086      	sub	sp, #24
//  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
 805016c:	2210      	movs	r2, #16
 805016e:	2100      	movs	r1, #0
 8050170:	a802      	add	r0, sp, #8
 8050172:	f000 fd32 	bl	8050bda <memset>
  if (AdcInitialized == false)
 8050176:	4a2d      	ldr	r2, [pc, #180]	; (805022c <HW_AdcInit+0xc4>)
 8050178:	7853      	ldrb	r3, [r2, #1]
 805017a:	2b00      	cmp	r3, #0
 805017c:	d153      	bne.n	8050226 <HW_AdcInit+0xbe>
  {
    AdcInitialized = true;
 805017e:	2401      	movs	r4, #1

	hadc.Instance = ADC1;
 8050180:	482b      	ldr	r0, [pc, #172]	; (8050230 <HW_AdcInit+0xc8>)
    AdcInitialized = true;
 8050182:	7054      	strb	r4, [r2, #1]
	hadc.Instance = ADC1;
 8050184:	4a2b      	ldr	r2, [pc, #172]	; (8050234 <HW_AdcInit+0xcc>)
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.NbrOfConversion = 1;
	hadc.Init.DMAContinuousRequests = DISABLE;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	 ADCCLK_ENABLE();
 8050186:	9301      	str	r3, [sp, #4]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8050188:	e9c0 2300 	strd	r2, r3, [r0]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 805018c:	6083      	str	r3, [r0, #8]
	hadc.Init.ScanConvMode = DISABLE;
 805018e:	6103      	str	r3, [r0, #16]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8050190:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8050192:	60c3      	str	r3, [r0, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8050194:	7603      	strb	r3, [r0, #24]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8050196:	f880 3020 	strb.w	r3, [r0, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 805019a:	4a27      	ldr	r2, [pc, #156]	; (8050238 <HW_AdcInit+0xd0>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 805019c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	 ADCCLK_ENABLE();
 80501a0:	4b26      	ldr	r3, [pc, #152]	; (805023c <HW_AdcInit+0xd4>)
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80501a2:	6282      	str	r2, [r0, #40]	; 0x28
	hadc.Init.NbrOfConversion = 1;
 80501a4:	61c4      	str	r4, [r0, #28]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80501a6:	6144      	str	r4, [r0, #20]
	 ADCCLK_ENABLE();
 80501a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80501aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80501ae:	645a      	str	r2, [r3, #68]	; 0x44
 80501b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80501b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80501b6:	9301      	str	r3, [sp, #4]
 80501b8:	9b01      	ldr	r3, [sp, #4]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80501ba:	f7f3 fc2b 	bl	8043a14 <HAL_ADC_Init>
 80501be:	b108      	cbz	r0, 80501c4 <HW_AdcInit+0x5c>
	{
		Error_Handler();
 80501c0:	f7fe fbbc 	bl	804e93c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 80501c4:	230e      	movs	r3, #14
	sConfig.Rank = 1;
 80501c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80501ca:	a902      	add	r1, sp, #8
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80501cc:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80501ce:	4818      	ldr	r0, [pc, #96]	; (8050230 <HW_AdcInit+0xc8>)
	sConfig.Offset = 0;
 80501d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80501d4:	f7f3 fdac 	bl	8043d30 <HAL_ADC_ConfigChannel>
 80501d8:	b108      	cbz	r0, 80501de <HW_AdcInit+0x76>
	{
		Error_Handler();
 80501da:	f7fe fbaf 	bl	804e93c <Error_Handler>

	///////////////////////////////////////////////////////////////////////////

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc2.Instance = ADC2;
 80501de:	4818      	ldr	r0, [pc, #96]	; (8050240 <HW_AdcInit+0xd8>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80501e0:	4a18      	ldr	r2, [pc, #96]	; (8050244 <HW_AdcInit+0xdc>)
 80501e2:	2300      	movs	r3, #0
	  hadc2.Init.ContinuousConvMode = DISABLE;
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2.Init.NbrOfConversion = 1;
 80501e4:	2401      	movs	r4, #1
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80501e6:	e9c0 2300 	strd	r2, r3, [r0]
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80501ea:	4a13      	ldr	r2, [pc, #76]	; (8050238 <HW_AdcInit+0xd0>)
	  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80501ec:	6083      	str	r3, [r0, #8]
	  hadc2.Init.ScanConvMode = DISABLE;
 80501ee:	6103      	str	r3, [r0, #16]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 80501f0:	7603      	strb	r3, [r0, #24]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80501f2:	f880 3020 	strb.w	r3, [r0, #32]
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80501f6:	62c3      	str	r3, [r0, #44]	; 0x2c
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80501f8:	6282      	str	r2, [r0, #40]	; 0x28
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80501fa:	60c3      	str	r3, [r0, #12]
	  hadc2.Init.NbrOfConversion = 1;
 80501fc:	61c4      	str	r4, [r0, #28]
	  hadc2.Init.DMAContinuousRequests = DISABLE;
 80501fe:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8050202:	6144      	str	r4, [r0, #20]
	  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8050204:	f7f3 fc06 	bl	8043a14 <HAL_ADC_Init>
 8050208:	b108      	cbz	r0, 805020e <HW_AdcInit+0xa6>
	  {
	    Error_Handler();
 805020a:	f7fe fb97 	bl	804e93c <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 805020e:	2307      	movs	r3, #7
	  sConfig.Rank = 1;
 8050210:	e9cd 3402 	strd	r3, r4, [sp, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8050214:	a902      	add	r1, sp, #8
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8050216:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8050218:	4809      	ldr	r0, [pc, #36]	; (8050240 <HW_AdcInit+0xd8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 805021a:	9304      	str	r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 805021c:	f7f3 fd88 	bl	8043d30 <HAL_ADC_ConfigChannel>
 8050220:	b108      	cbz	r0, 8050226 <HW_AdcInit+0xbe>
	  {
	    Error_Handler();
 8050222:	f7fe fb8b 	bl	804e93c <Error_Handler>
	  }

  }
}
 8050226:	b006      	add	sp, #24
 8050228:	bd10      	pop	{r4, pc}
 805022a:	bf00      	nop
 805022c:	20003909 	.word	0x20003909
 8050230:	20006324 	.word	0x20006324
 8050234:	40012000 	.word	0x40012000
 8050238:	0f000001 	.word	0x0f000001
 805023c:	40023800 	.word	0x40023800
 8050240:	200062d0 	.word	0x200062d0
 8050244:	40012100 	.word	0x40012100

08050248 <HW_Init>:
{
 8050248:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 805024a:	4c1c      	ldr	r4, [pc, #112]	; (80502bc <HW_Init+0x74>)
 805024c:	7822      	ldrb	r2, [r4, #0]
 805024e:	bb9a      	cbnz	r2, 80502b8 <HW_Init+0x70>
    HW_AdcInit();
 8050250:	f7ff ff8a 	bl	8050168 <HW_AdcInit>
    Radio.IoInit();
 8050254:	4b1a      	ldr	r3, [pc, #104]	; (80502c0 <HW_Init+0x78>)
 8050256:	681b      	ldr	r3, [r3, #0]
 8050258:	4798      	blx	r3
    HW_SPI_Init();
 805025a:	f7ff f8ad 	bl	804f3b8 <HW_SPI_Init>
    HW_RTC_Init();
 805025e:	f7fe ff87 	bl	804f170 <HW_RTC_Init>
    HW_I2C1_Init();
 8050262:	f7fe fdd9 	bl	804ee18 <HW_I2C1_Init>
    TraceInit();
 8050266:	f7fe fa53 	bl	804e710 <TraceInit>
    BSP_sensor_Init();
 805026a:	f7fe fb0c 	bl	804e886 <BSP_sensor_Init>
    Ble_Init_GPIO();
 805026e:	f7f1 f8e7 	bl	8041440 <Ble_Init_GPIO>
    COM_Init();
 8050272:	f000 faeb 	bl	805084c <COM_Init>
    MX_USART1_UART_Init();
 8050276:	f7f1 f8c7 	bl	8041408 <MX_USART1_UART_Init>
    MX_TIM2_Init();
 805027a:	f7ff f8f3 	bl	804f464 <MX_TIM2_Init>
    MX_TIM3_Init();
 805027e:	f7ff f925 	bl	804f4cc <MX_TIM3_Init>
    MX_SDIO_SD_Init();
 8050282:	f7ff fbcd 	bl	804fa20 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8050286:	f7f3 faad 	bl	80437e4 <MX_FATFS_Init>
    HAL_TIM_Base_Start_IT(&htim2);
 805028a:	480e      	ldr	r0, [pc, #56]	; (80502c4 <HW_Init+0x7c>)
 805028c:	f7f6 fce8 	bl	8046c60 <HAL_TIM_Base_Start_IT>
    HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 8050290:	2201      	movs	r2, #1
 8050292:	490d      	ldr	r1, [pc, #52]	; (80502c8 <HW_Init+0x80>)
 8050294:	480d      	ldr	r0, [pc, #52]	; (80502cc <HW_Init+0x84>)
 8050296:	f7f7 f8a5 	bl	80473e4 <HAL_UART_Receive_IT>
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 805029a:	480d      	ldr	r0, [pc, #52]	; (80502d0 <HW_Init+0x88>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 805029c:	4a0d      	ldr	r2, [pc, #52]	; (80502d4 <HW_Init+0x8c>)
 805029e:	2304      	movs	r3, #4
 80502a0:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 2499;
 80502a4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80502a8:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80502aa:	f7f4 ff7f 	bl	80451ac <HAL_IWDG_Init>
 80502ae:	b108      	cbz	r0, 80502b4 <HW_Init+0x6c>
  {
    Error_Handler();
 80502b0:	f7fe fb44 	bl	804e93c <Error_Handler>
    McuInitialized = true;
 80502b4:	2301      	movs	r3, #1
 80502b6:	7023      	strb	r3, [r4, #0]
}
 80502b8:	bd10      	pop	{r4, pc}
 80502ba:	bf00      	nop
 80502bc:	20003909 	.word	0x20003909
 80502c0:	08053dd0 	.word	0x08053dd0
 80502c4:	200060cc 	.word	0x200060cc
 80502c8:	20003dc8 	.word	0x20003dc8
 80502cc:	20003dd4 	.word	0x20003dd4
 80502d0:	20006318 	.word	0x20006318
 80502d4:	40003000 	.word	0x40003000

080502d8 <HW_AdcReadChannel>:
{
 80502d8:	b530      	push	{r4, r5, lr}
 80502da:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef adcConf = {0};
 80502dc:	2210      	movs	r2, #16
 80502de:	2100      	movs	r1, #0
{
 80502e0:	4605      	mov	r5, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 80502e2:	a802      	add	r0, sp, #8
 80502e4:	f000 fc79 	bl	8050bda <memset>
  HW_AdcInit();
 80502e8:	f7ff ff3e 	bl	8050168 <HW_AdcInit>
  if (AdcInitialized == true)
 80502ec:	4b17      	ldr	r3, [pc, #92]	; (805034c <HW_AdcReadChannel+0x74>)
 80502ee:	7858      	ldrb	r0, [r3, #1]
 80502f0:	b350      	cbz	r0, 8050348 <HW_AdcReadChannel+0x70>
    ADCCLK_ENABLE();
 80502f2:	4c17      	ldr	r4, [pc, #92]	; (8050350 <HW_AdcReadChannel+0x78>)
 80502f4:	2300      	movs	r3, #0
 80502f6:	9301      	str	r3, [sp, #4]
 80502f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80502fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80502fe:	6463      	str	r3, [r4, #68]	; 0x44
 8050300:	6c63      	ldr	r3, [r4, #68]	; 0x44
    adcConf.Channel = Channel;
 8050302:	9502      	str	r5, [sp, #8]
    ADCCLK_ENABLE();
 8050304:	f403 7380 	and.w	r3, r3, #256	; 0x100
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050308:	4d12      	ldr	r5, [pc, #72]	; (8050354 <HW_AdcReadChannel+0x7c>)
    ADCCLK_ENABLE();
 805030a:	9301      	str	r3, [sp, #4]
 805030c:	9b01      	ldr	r3, [sp, #4]
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 805030e:	2303      	movs	r3, #3
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050310:	a902      	add	r1, sp, #8
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8050312:	9304      	str	r3, [sp, #16]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050314:	4628      	mov	r0, r5
    adcConf.Rank = 1;
 8050316:	2301      	movs	r3, #1
 8050318:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 805031a:	f7f3 fd09 	bl	8043d30 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc);
 805031e:	4628      	mov	r0, r5
 8050320:	f7f3 fc1e 	bl	8043b60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8050324:	f04f 31ff 	mov.w	r1, #4294967295
 8050328:	4628      	mov	r0, r5
 805032a:	f7f3 fcad 	bl	8043c88 <HAL_ADC_PollForConversion>
    adcData = HAL_ADC_GetValue(&hadc);
 805032e:	4628      	mov	r0, r5
 8050330:	f7f3 fcfa 	bl	8043d28 <HAL_ADC_GetValue>
    __HAL_ADC_DISABLE(&hadc);
 8050334:	682a      	ldr	r2, [r5, #0]
 8050336:	6893      	ldr	r3, [r2, #8]
 8050338:	f023 0301 	bic.w	r3, r3, #1
 805033c:	6093      	str	r3, [r2, #8]
    ADCCLK_DISABLE();
 805033e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8050340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    adcData = HAL_ADC_GetValue(&hadc);
 8050344:	b280      	uxth	r0, r0
    ADCCLK_DISABLE();
 8050346:	6463      	str	r3, [r4, #68]	; 0x44
}
 8050348:	b007      	add	sp, #28
 805034a:	bd30      	pop	{r4, r5, pc}
 805034c:	20003909 	.word	0x20003909
 8050350:	40023800 	.word	0x40023800
 8050354:	20006324 	.word	0x20006324

08050358 <HW_GetTemperatureLevel>:
{
 8050358:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 805035a:	2011      	movs	r0, #17
 805035c:	f7ff ffbc 	bl	80502d8 <HW_AdcReadChannel>
  if (measuredLevel == 0)
 8050360:	b1e8      	cbz	r0, 805039e <HW_GetTemperatureLevel+0x46>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8050362:	4b10      	ldr	r3, [pc, #64]	; (80503a4 <HW_GetTemperatureLevel+0x4c>)
 8050364:	881b      	ldrh	r3, [r3, #0]
 8050366:	f640 34b8 	movw	r4, #3000	; 0xbb8
 805036a:	435c      	muls	r4, r3
 805036c:	fbb4 f4f0 	udiv	r4, r4, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 8050370:	2010      	movs	r0, #16
 8050372:	f7ff ffb1 	bl	80502d8 <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8050376:	4b0c      	ldr	r3, [pc, #48]	; (80503a8 <HW_GetTemperatureLevel+0x50>)
 8050378:	881a      	ldrh	r2, [r3, #0]
 805037a:	3322      	adds	r3, #34	; 0x22
 805037c:	4360      	muls	r0, r4
 805037e:	881b      	ldrh	r3, [r3, #0]
 8050380:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8050384:	fbb0 f0f4 	udiv	r0, r0, r4
 8050388:	2450      	movs	r4, #80	; 0x50
 805038a:	1a80      	subs	r0, r0, r2
 805038c:	4360      	muls	r0, r4
 805038e:	1a9b      	subs	r3, r3, r2
 8050390:	0200      	lsls	r0, r0, #8
 8050392:	fb90 f0f3 	sdiv	r0, r0, r3
 8050396:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
}
 805039a:	b280      	uxth	r0, r0
 805039c:	bd10      	pop	{r4, pc}
    batteryLevelmV = 0;
 805039e:	4604      	mov	r4, r0
 80503a0:	e7e6      	b.n	8050370 <HW_GetTemperatureLevel+0x18>
 80503a2:	bf00      	nop
 80503a4:	1fff75aa 	.word	0x1fff75aa
 80503a8:	1fff75a8 	.word	0x1fff75a8

080503ac <refresh_iwdg>:
  /* USER CODE END IWDG_Init 2 */

}

void refresh_iwdg(void){
	HAL_IWDG_Refresh(&hiwdg);
 80503ac:	4801      	ldr	r0, [pc, #4]	; (80503b4 <refresh_iwdg+0x8>)
 80503ae:	f7f4 bf1e 	b.w	80451ee <HAL_IWDG_Refresh>
 80503b2:	bf00      	nop
 80503b4:	20006318 	.word	0x20006318

080503b8 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 80503b8:	4770      	bx	lr

080503ba <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 80503ba:	bf00      	nop
 80503bc:	e7fd      	b.n	80503ba <HardFault_Handler>

080503be <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80503be:	e7fe      	b.n	80503be <MemManage_Handler>

080503c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80503c0:	e7fe      	b.n	80503c0 <BusFault_Handler>

080503c2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80503c2:	e7fe      	b.n	80503c2 <UsageFault_Handler>

080503c4 <SVC_Handler>:
 80503c4:	4770      	bx	lr

080503c6 <DebugMon_Handler>:
 80503c6:	4770      	bx	lr

080503c8 <PendSV_Handler>:
 80503c8:	4770      	bx	lr

080503ca <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80503ca:	f7f3 bb11 	b.w	80439f0 <HAL_IncTick>
	...

080503d0 <TIM2_IRQHandler>:
{

//	count_velo = aux_count_velo;
//	aux_count_velo = 0;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80503d0:	4801      	ldr	r0, [pc, #4]	; (80503d8 <TIM2_IRQHandler+0x8>)
 80503d2:	f7f6 bc59 	b.w	8046c88 <HAL_TIM_IRQHandler>
 80503d6:	bf00      	nop
 80503d8:	200060cc 	.word	0x200060cc

080503dc <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80503dc:	4801      	ldr	r0, [pc, #4]	; (80503e4 <TIM3_IRQHandler+0x8>)
 80503de:	f7f6 bc53 	b.w	8046c88 <HAL_TIM_IRQHandler>
 80503e2:	bf00      	nop
 80503e4:	2000608c 	.word	0x2000608c

080503e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80503e8:	b508      	push	{r3, lr}


	HAL_UART_IRQHandler(&huart1);
 80503ea:	4815      	ldr	r0, [pc, #84]	; (8050440 <USART1_IRQHandler+0x58>)
 80503ec:	f7f7 f8dc 	bl	80475a8 <HAL_UART_IRQHandler>
	if(ble_index>sizeof(message_ble))
 80503f0:	4b14      	ldr	r3, [pc, #80]	; (8050444 <USART1_IRQHandler+0x5c>)
		ble_index=0;
	message_ble[ble_index] = rx_byte_uart1[0];
 80503f2:	4915      	ldr	r1, [pc, #84]	; (8050448 <USART1_IRQHandler+0x60>)
	if(ble_index>sizeof(message_ble))
 80503f4:	681a      	ldr	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 80503f6:	4815      	ldr	r0, [pc, #84]	; (805044c <USART1_IRQHandler+0x64>)
 80503f8:	7809      	ldrb	r1, [r1, #0]
	if(ble_index>sizeof(message_ble))
 80503fa:	2a0a      	cmp	r2, #10
		ble_index=0;
 80503fc:	bf84      	itt	hi
 80503fe:	2200      	movhi	r2, #0
 8050400:	601a      	strhi	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 8050402:	681a      	ldr	r2, [r3, #0]
 8050404:	5481      	strb	r1, [r0, r2]
	ble_index++;
 8050406:	3201      	adds	r2, #1
	if(ble_index>2){
 8050408:	2a02      	cmp	r2, #2
	ble_index++;
 805040a:	601a      	str	r2, [r3, #0]
	if(ble_index>2){
 805040c:	dd0b      	ble.n	8050426 <USART1_IRQHandler+0x3e>

	//*****Comentado por JP****
	//HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
	//HAL_UART_Abort_IT(&huart1);
	//**************************
		if(message_ble[0] == 0xa){
 805040e:	7802      	ldrb	r2, [r0, #0]
 8050410:	2a0a      	cmp	r2, #10
 8050412:	d108      	bne.n	8050426 <USART1_IRQHandler+0x3e>
			if(message_ble[ble_index-1] == 0xd)
 8050414:	290d      	cmp	r1, #13
 8050416:	d106      	bne.n	8050426 <USART1_IRQHandler+0x3e>
			{
				// Sinaliza que chegou uma mensagem válida
				ble_index = 0;								// Zera o índice para nova mensagem
 8050418:	2200      	movs	r2, #0
 805041a:	601a      	str	r2, [r3, #0]
				//ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
				flags_ble.enable_handler=1;
 805041c:	4a0c      	ldr	r2, [pc, #48]	; (8050450 <USART1_IRQHandler+0x68>)
 805041e:	7813      	ldrb	r3, [r2, #0]
 8050420:	f043 0320 	orr.w	r3, r3, #32
 8050424:	7013      	strb	r3, [r2, #0]
//			ble_index = 0;								// Zera o índice para nova mensagem
//			ble_handler(&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
//		}
//	}

	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8050426:	2025      	movs	r0, #37	; 0x25
 8050428:	f7f3 fd8c 	bl	8043f44 <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart1);
 805042c:	4804      	ldr	r0, [pc, #16]	; (8050440 <USART1_IRQHandler+0x58>)
 805042e:	f7f7 f967 	bl	8047700 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 8050432:	2201      	movs	r2, #1
 8050434:	4904      	ldr	r1, [pc, #16]	; (8050448 <USART1_IRQHandler+0x60>)
 8050436:	4802      	ldr	r0, [pc, #8]	; (8050440 <USART1_IRQHandler+0x58>)

}
 8050438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 805043c:	f7f6 bfd2 	b.w	80473e4 <HAL_UART_Receive_IT>
 8050440:	20003dd4 	.word	0x20003dd4
 8050444:	2000246c 	.word	0x2000246c
 8050448:	20003dc8 	.word	0x20003dc8
 805044c:	20002470 	.word	0x20002470
 8050450:	20003dd0 	.word	0x20003dd0

08050454 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {

	HAL_UART_IRQHandler(&huart2);
 8050454:	4801      	ldr	r0, [pc, #4]	; (805045c <USART2_IRQHandler+0x8>)
 8050456:	f7f7 b8a7 	b.w	80475a8 <HAL_UART_IRQHandler>
 805045a:	bf00      	nop
 805045c:	20003e18 	.word	0x20003e18

08050460 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8050460:	4801      	ldr	r0, [pc, #4]	; (8050468 <SDIO_IRQHandler+0x8>)
 8050462:	f7f6 b933 	b.w	80466cc <HAL_SD_IRQHandler>
 8050466:	bf00      	nop
 8050468:	2000624c 	.word	0x2000624c

0805046c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 805046c:	4801      	ldr	r0, [pc, #4]	; (8050474 <DMA2_Stream3_IRQHandler+0x8>)
 805046e:	f7f3 be83 	b.w	8044178 <HAL_DMA_IRQHandler>
 8050472:	bf00      	nop
 8050474:	2000618c 	.word	0x2000618c

08050478 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8050478:	4801      	ldr	r0, [pc, #4]	; (8050480 <DMA2_Stream6_IRQHandler+0x8>)
 805047a:	f7f3 be7d 	b.w	8044178 <HAL_DMA_IRQHandler>
 805047e:	bf00      	nop
 8050480:	200061ec 	.word	0x200061ec

08050484 <USART3_IRQHandler>:
  /* USER CODE END DMA2_Stream6_IRQn 1 */
}

void USARTx_IRQHandler(void)
{
  vcom_IRQHandler();
 8050484:	f000 b872 	b.w	805056c <vcom_IRQHandler>

08050488 <DMA1_Stream4_IRQHandler>:
}

void USARTx_DMA_TX_IRQHandler(void)
{
  vcom_DMA_TX_IRQHandler();
 8050488:	f000 b86a 	b.w	8050560 <vcom_DMA_TX_IRQHandler>

0805048c <RTC_Alarm_IRQHandler>:
}

void RTC_Alarm_IRQHandler(void)
{
  HW_RTC_IrqHandler();
 805048c:	f7fe be30 	b.w	804f0f0 <HW_RTC_IrqHandler>

08050490 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8050490:	2001      	movs	r0, #1
 8050492:	f7f4 ba63 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

08050496 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8050496:	2002      	movs	r0, #2
 8050498:	f7f4 ba60 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

0805049c <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 805049c:	2004      	movs	r0, #4
 805049e:	f7f4 ba5d 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

080504a2 <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80504a2:	2008      	movs	r0, #8
 80504a4:	f7f4 ba5a 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

080504a8 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80504a8:	2010      	movs	r0, #16
 80504aa:	f7f4 ba57 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

080504ae <EXTI9_5_IRQHandler>:
}


void EXTI9_5_IRQHandler(void)
{
 80504ae:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80504b0:	2020      	movs	r0, #32
 80504b2:	f7f4 fa53 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80504b6:	2040      	movs	r0, #64	; 0x40
 80504b8:	f7f4 fa50 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80504bc:	2080      	movs	r0, #128	; 0x80
 80504be:	f7f4 fa4d 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80504c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80504c6:	f7f4 fa49 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80504ca:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 80504ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80504d2:	f7f4 ba43 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

080504d6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80504d6:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80504d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80504dc:	f7f4 fa3e 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80504e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80504e4:	f7f4 fa3a 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80504e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80504ec:	f7f4 fa36 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80504f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80504f4:	f7f4 fa32 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80504f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80504fc:	f7f4 fa2e 	bl	804495c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8050500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 8050504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8050508:	f7f4 ba28 	b.w	804495c <HAL_GPIO_EXTI_IRQHandler>

0805050c <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 805050c:	b508      	push	{r3, lr}
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;

  UartHandle.Init.BaudRate   = 115200;
 805050e:	490b      	ldr	r1, [pc, #44]	; (805053c <vcom_Init+0x30>)
  TxCpltCallback = TxCb;
 8050510:	4b0b      	ldr	r3, [pc, #44]	; (8050540 <vcom_Init+0x34>)
  UartHandle.Init.BaudRate   = 115200;
 8050512:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8050516:	e9c3 1201 	strd	r1, r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 805051a:	2200      	movs	r2, #0
  TxCpltCallback = TxCb;
 805051c:	6018      	str	r0, [r3, #0]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 805051e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8050522:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8050524:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8050526:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 8050528:	2208      	movs	r2, #8
 805052a:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 805052c:	f7f6 fe56 	bl	80471dc <HAL_UART_Init>
 8050530:	b118      	cbz	r0, 805053a <vcom_Init+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 8050532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8050536:	f7fe ba01 	b.w	804e93c <Error_Handler>
}
 805053a:	bd08      	pop	{r3, pc}
 805053c:	40004800 	.word	0x40004800
 8050540:	2000390c 	.word	0x2000390c

08050544 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8050544:	460a      	mov	r2, r1
 8050546:	4601      	mov	r1, r0
 8050548:	4801      	ldr	r0, [pc, #4]	; (8050550 <vcom_Trace+0xc>)
 805054a:	f7f6 bf73 	b.w	8047434 <HAL_UART_Transmit_DMA>
 805054e:	bf00      	nop
 8050550:	20003910 	.word	0x20003910

08050554 <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
  TxCpltCallback();
 8050554:	4b01      	ldr	r3, [pc, #4]	; (805055c <HAL_UART_TxCpltCallback+0x8>)
 8050556:	681b      	ldr	r3, [r3, #0]
 8050558:	4718      	bx	r3
 805055a:	bf00      	nop
 805055c:	2000390c 	.word	0x2000390c

08050560 <vcom_DMA_TX_IRQHandler>:
}

void vcom_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8050560:	4b01      	ldr	r3, [pc, #4]	; (8050568 <vcom_DMA_TX_IRQHandler+0x8>)
 8050562:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8050564:	f7f3 be08 	b.w	8044178 <HAL_DMA_IRQHandler>
 8050568:	2000390c 	.word	0x2000390c

0805056c <vcom_IRQHandler>:
}

void vcom_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 805056c:	4801      	ldr	r0, [pc, #4]	; (8050574 <vcom_IRQHandler+0x8>)
 805056e:	f7f7 b81b 	b.w	80475a8 <HAL_UART_IRQHandler>
 8050572:	bf00      	nop
 8050574:	20003910 	.word	0x20003910

08050578 <vcom_IoInit>:
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
	}
}

void vcom_IoInit(void)
{
 8050578:	b530      	push	{r4, r5, lr}
 805057a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 805057c:	4b17      	ldr	r3, [pc, #92]	; (80505dc <vcom_IoInit+0x64>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 805057e:	4c18      	ldr	r4, [pc, #96]	; (80505e0 <vcom_IoInit+0x68>)
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8050580:	2200      	movs	r2, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8050582:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8050584:	9205      	str	r2, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 8050586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8050588:	f041 0102 	orr.w	r1, r1, #2
 805058c:	6319      	str	r1, [r3, #48]	; 0x30
 805058e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8050590:	f001 0102 	and.w	r1, r1, #2
 8050594:	9101      	str	r1, [sp, #4]
 8050596:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8050598:	9202      	str	r2, [sp, #8]
 805059a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805059c:	f042 0202 	orr.w	r2, r2, #2
 80505a0:	631a      	str	r2, [r3, #48]	; 0x30
 80505a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80505a4:	f003 0302 	and.w	r3, r3, #2
 80505a8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80505aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  USARTx_RX_GPIO_CLK_ENABLE();
 80505ae:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80505b0:	2302      	movs	r3, #2
 80505b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80505b6:	2507      	movs	r5, #7
 80505b8:	2303      	movs	r3, #3
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80505ba:	a903      	add	r1, sp, #12
 80505bc:	4620      	mov	r0, r4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80505be:	e9cd 3506 	strd	r3, r5, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80505c2:	f7f4 f851 	bl	8044668 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80505c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80505ca:	a903      	add	r1, sp, #12
 80505cc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80505ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80505d0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80505d2:	f7f4 f849 	bl	8044668 <HAL_GPIO_Init>
}
 80505d6:	b009      	add	sp, #36	; 0x24
 80505d8:	bd30      	pop	{r4, r5, pc}
 80505da:	bf00      	nop
 80505dc:	40023800 	.word	0x40023800
 80505e0:	40020400 	.word	0x40020400

080505e4 <HAL_UART_MspInit>:
{
 80505e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80505e6:	4606      	mov	r6, r0
 80505e8:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80505ea:	2214      	movs	r2, #20
 80505ec:	2100      	movs	r1, #0
 80505ee:	a809      	add	r0, sp, #36	; 0x24
 80505f0:	f000 faf3 	bl	8050bda <memset>
	if (huart->Instance == USART1) {
 80505f4:	6833      	ldr	r3, [r6, #0]
 80505f6:	4a5a      	ldr	r2, [pc, #360]	; (8050760 <HAL_UART_MspInit+0x17c>)
 80505f8:	4293      	cmp	r3, r2
 80505fa:	f040 8085 	bne.w	8050708 <HAL_UART_MspInit+0x124>
		__HAL_RCC_USART1_CLK_ENABLE();
 80505fe:	4b59      	ldr	r3, [pc, #356]	; (8050764 <HAL_UART_MspInit+0x180>)
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8050600:	4859      	ldr	r0, [pc, #356]	; (8050768 <HAL_UART_MspInit+0x184>)
		__HAL_RCC_USART1_CLK_ENABLE();
 8050602:	2400      	movs	r4, #0
 8050604:	9401      	str	r4, [sp, #4]
 8050606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8050608:	f042 0210 	orr.w	r2, r2, #16
 805060c:	645a      	str	r2, [r3, #68]	; 0x44
 805060e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8050610:	f002 0210 	and.w	r2, r2, #16
 8050614:	9201      	str	r2, [sp, #4]
 8050616:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8050618:	9402      	str	r4, [sp, #8]
 805061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805061c:	f042 0201 	orr.w	r2, r2, #1
 8050620:	631a      	str	r2, [r3, #48]	; 0x30
 8050622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050624:	f003 0301 	and.w	r3, r3, #1
 8050628:	9302      	str	r3, [sp, #8]
 805062a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805062c:	2502      	movs	r5, #2
 805062e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8050632:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8050636:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8050638:	2307      	movs	r3, #7
 805063a:	2703      	movs	r7, #3
 805063c:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8050640:	f7f4 f812 	bl	8044668 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 8050644:	2025      	movs	r0, #37	; 0x25
 8050646:	462a      	mov	r2, r5
 8050648:	4621      	mov	r1, r4
 805064a:	f7f3 fc13 	bl	8043e74 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 805064e:	2025      	movs	r0, #37	; 0x25
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8050650:	f7f3 fc44 	bl	8043edc <HAL_NVIC_EnableIRQ>
/*	else */if (huart->Instance == USARTx) {
 8050654:	6832      	ldr	r2, [r6, #0]
 8050656:	4b45      	ldr	r3, [pc, #276]	; (805076c <HAL_UART_MspInit+0x188>)
 8050658:	429a      	cmp	r2, r3
 805065a:	d153      	bne.n	8050704 <HAL_UART_MspInit+0x120>
		USARTx_TX_GPIO_CLK_ENABLE();
 805065c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8050660:	2400      	movs	r4, #0
 8050662:	9405      	str	r4, [sp, #20]
 8050664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		hdma_tx.Instance = USARTx_TX_DMA_CHANNEL;
 8050666:	4d42      	ldr	r5, [pc, #264]	; (8050770 <HAL_UART_MspInit+0x18c>)
		USARTx_TX_GPIO_CLK_ENABLE();
 8050668:	f042 0202 	orr.w	r2, r2, #2
 805066c:	631a      	str	r2, [r3, #48]	; 0x30
 805066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050670:	f002 0202 	and.w	r2, r2, #2
 8050674:	9205      	str	r2, [sp, #20]
 8050676:	9a05      	ldr	r2, [sp, #20]
		USARTx_RX_GPIO_CLK_ENABLE();
 8050678:	9406      	str	r4, [sp, #24]
 805067a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805067c:	f042 0202 	orr.w	r2, r2, #2
 8050680:	631a      	str	r2, [r3, #48]	; 0x30
 8050682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050684:	f002 0202 	and.w	r2, r2, #2
 8050688:	9206      	str	r2, [sp, #24]
 805068a:	9a06      	ldr	r2, [sp, #24]
		USARTx_CLK_ENABLE();
 805068c:	9407      	str	r4, [sp, #28]
 805068e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050690:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8050694:	641a      	str	r2, [r3, #64]	; 0x40
 8050696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050698:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 805069c:	9207      	str	r2, [sp, #28]
 805069e:	9a07      	ldr	r2, [sp, #28]
		DMAx_CLK_ENABLE();
 80506a0:	9408      	str	r4, [sp, #32]
 80506a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80506a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80506a8:	631a      	str	r2, [r3, #48]	; 0x30
 80506aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80506ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80506b0:	9308      	str	r3, [sp, #32]
 80506b2:	9b08      	ldr	r3, [sp, #32]
		vcom_IoInit();
 80506b4:	f7ff ff60 	bl	8050578 <vcom_IoInit>
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 80506b8:	4a2e      	ldr	r2, [pc, #184]	; (8050774 <HAL_UART_MspInit+0x190>)
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 80506ba:	666c      	str	r4, [r5, #100]	; 0x64
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 80506bc:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80506c0:	e9c5 2311 	strd	r2, r3, [r5, #68]	; 0x44
		HAL_DMA_Init(&hdma_tx);
 80506c4:	f105 0744 	add.w	r7, r5, #68	; 0x44
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80506c8:	2340      	movs	r3, #64	; 0x40
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80506ca:	e9c5 3413 	strd	r3, r4, [r5, #76]	; 0x4c
		HAL_DMA_Init(&hdma_tx);
 80506ce:	4638      	mov	r0, r7
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 80506d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80506d4:	e9c5 3415 	strd	r3, r4, [r5, #84]	; 0x54
		hdma_tx.Init.Mode = DMA_NORMAL;
 80506d8:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
		HAL_DMA_Init(&hdma_tx);
 80506dc:	f7f3 fc58 	bl	8043f90 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80506e0:	2201      	movs	r2, #1
 80506e2:	4621      	mov	r1, r4
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80506e4:	6337      	str	r7, [r6, #48]	; 0x30
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80506e6:	200f      	movs	r0, #15
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80506e8:	67ee      	str	r6, [r5, #124]	; 0x7c
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80506ea:	f7f3 fbc3 	bl	8043e74 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80506ee:	200f      	movs	r0, #15
 80506f0:	f7f3 fbf4 	bl	8043edc <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80506f4:	2027      	movs	r0, #39	; 0x27
 80506f6:	2201      	movs	r2, #1
 80506f8:	4621      	mov	r1, r4
 80506fa:	f7f3 fbbb 	bl	8043e74 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80506fe:	2027      	movs	r0, #39	; 0x27
 8050700:	f7f3 fbec 	bl	8043edc <HAL_NVIC_EnableIRQ>
}
 8050704:	b00f      	add	sp, #60	; 0x3c
 8050706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (huart->Instance == USART2) {
 8050708:	4a1b      	ldr	r2, [pc, #108]	; (8050778 <HAL_UART_MspInit+0x194>)
 805070a:	4293      	cmp	r3, r2
 805070c:	d1a2      	bne.n	8050654 <HAL_UART_MspInit+0x70>
		__HAL_RCC_USART2_CLK_ENABLE();
 805070e:	4b15      	ldr	r3, [pc, #84]	; (8050764 <HAL_UART_MspInit+0x180>)
 8050710:	2400      	movs	r4, #0
 8050712:	9403      	str	r4, [sp, #12]
 8050714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050716:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 805071a:	641a      	str	r2, [r3, #64]	; 0x40
 805071c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 805071e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8050722:	9203      	str	r2, [sp, #12]
 8050724:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8050726:	9404      	str	r4, [sp, #16]
 8050728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805072a:	f042 0201 	orr.w	r2, r2, #1
 805072e:	631a      	str	r2, [r3, #48]	; 0x30
 8050730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050732:	f003 0301 	and.w	r3, r3, #1
 8050736:	9304      	str	r3, [sp, #16]
 8050738:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805073a:	210c      	movs	r1, #12
 805073c:	2302      	movs	r3, #2
 805073e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8050742:	2003      	movs	r0, #3
 8050744:	2307      	movs	r3, #7
 8050746:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(RFID_TX_GPIO_Port, &GPIO_InitStruct);
 805074a:	a909      	add	r1, sp, #36	; 0x24
 805074c:	4806      	ldr	r0, [pc, #24]	; (8050768 <HAL_UART_MspInit+0x184>)
 805074e:	f7f3 ff8b 	bl	8044668 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8050752:	2026      	movs	r0, #38	; 0x26
 8050754:	4622      	mov	r2, r4
 8050756:	4621      	mov	r1, r4
 8050758:	f7f3 fb8c 	bl	8043e74 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 805075c:	2026      	movs	r0, #38	; 0x26
 805075e:	e777      	b.n	8050650 <HAL_UART_MspInit+0x6c>
 8050760:	40011000 	.word	0x40011000
 8050764:	40023800 	.word	0x40023800
 8050768:	40020000 	.word	0x40020000
 805076c:	40004800 	.word	0x40004800
 8050770:	2000390c 	.word	0x2000390c
 8050774:	40026070 	.word	0x40026070
 8050778:	40004400 	.word	0x40004400

0805077c <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 805077c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 805077e:	2300      	movs	r3, #0
{
 8050780:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8050782:	e9cd 3303 	strd	r3, r3, [sp, #12]

  USARTx_TX_GPIO_CLK_ENABLE();
 8050786:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8050788:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 805078a:	4b0f      	ldr	r3, [pc, #60]	; (80507c8 <vcom_IoDeInit+0x4c>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 805078c:	4d0f      	ldr	r5, [pc, #60]	; (80507cc <vcom_IoDeInit+0x50>)
  USARTx_TX_GPIO_CLK_ENABLE();
 805078e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050790:	f042 0202 	orr.w	r2, r2, #2
 8050794:	631a      	str	r2, [r3, #48]	; 0x30
 8050796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050798:	f003 0302 	and.w	r3, r3, #2
 805079c:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 805079e:	ac06      	add	r4, sp, #24
  USARTx_TX_GPIO_CLK_ENABLE();
 80507a0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80507a2:	2303      	movs	r3, #3
 80507a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 80507a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80507aa:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 80507ae:	4628      	mov	r0, r5
 80507b0:	4621      	mov	r1, r4
 80507b2:	f7f3 ff59 	bl	8044668 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 80507b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 80507ba:	4621      	mov	r1, r4
 80507bc:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 80507be:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 80507c0:	f7f3 ff52 	bl	8044668 <HAL_GPIO_Init>
}
 80507c4:	b007      	add	sp, #28
 80507c6:	bd30      	pop	{r4, r5, pc}
 80507c8:	40023800 	.word	0x40023800
 80507cc:	40020400 	.word	0x40020400

080507d0 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 80507d0:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART1) {
 80507d2:	4a1a      	ldr	r2, [pc, #104]	; (805083c <HAL_UART_MspDeInit+0x6c>)
 80507d4:	6803      	ldr	r3, [r0, #0]
 80507d6:	4c1a      	ldr	r4, [pc, #104]	; (8050840 <HAL_UART_MspDeInit+0x70>)
 80507d8:	4293      	cmp	r3, r2
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 80507da:	4605      	mov	r5, r0
	if (huart->Instance == USART1) {
 80507dc:	d10d      	bne.n	80507fa <HAL_UART_MspDeInit+0x2a>
		__HAL_RCC_USART1_CLK_DISABLE();
 80507de:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 80507e0:	4818      	ldr	r0, [pc, #96]	; (8050844 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART1_CLK_DISABLE();
 80507e2:	f023 0310 	bic.w	r3, r3, #16
 80507e6:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 80507e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80507ec:	f7f4 f81c 	bl	8044828 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 80507f0:	2025      	movs	r0, #37	; 0x25
}
 80507f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 80507f6:	f7f3 bb7f 	b.w	8043ef8 <HAL_NVIC_DisableIRQ>
	} else if (huart->Instance == USART2) {
 80507fa:	4a13      	ldr	r2, [pc, #76]	; (8050848 <HAL_UART_MspDeInit+0x78>)
 80507fc:	4293      	cmp	r3, r2
 80507fe:	d109      	bne.n	8050814 <HAL_UART_MspDeInit+0x44>
		__HAL_RCC_USART2_CLK_DISABLE();
 8050800:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 8050802:	4810      	ldr	r0, [pc, #64]	; (8050844 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART2_CLK_DISABLE();
 8050804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8050808:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 805080a:	210c      	movs	r1, #12
 805080c:	f7f4 f80c 	bl	8044828 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 8050810:	2026      	movs	r0, #38	; 0x26
 8050812:	e7ee      	b.n	80507f2 <HAL_UART_MspDeInit+0x22>
		vcom_IoDeInit();
 8050814:	f7ff ffb2 	bl	805077c <vcom_IoDeInit>
		USARTx_FORCE_RESET();
 8050818:	6a23      	ldr	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 805081a:	6b68      	ldr	r0, [r5, #52]	; 0x34
		USARTx_FORCE_RESET();
 805081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8050820:	6223      	str	r3, [r4, #32]
		USARTx_RELEASE_RESET();
 8050822:	6a23      	ldr	r3, [r4, #32]
 8050824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8050828:	6223      	str	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 805082a:	b108      	cbz	r0, 8050830 <HAL_UART_MspDeInit+0x60>
			HAL_DMA_DeInit(huart->hdmarx);
 805082c:	f7f3 fc2e 	bl	804408c <HAL_DMA_DeInit>
		if (huart->hdmatx != 0) {
 8050830:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8050832:	b108      	cbz	r0, 8050838 <HAL_UART_MspDeInit+0x68>
			HAL_DMA_DeInit(huart->hdmatx);
 8050834:	f7f3 fc2a 	bl	804408c <HAL_DMA_DeInit>
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 8050838:	200f      	movs	r0, #15
 805083a:	e7da      	b.n	80507f2 <HAL_UART_MspDeInit+0x22>
 805083c:	40011000 	.word	0x40011000
 8050840:	40023800 	.word	0x40023800
 8050844:	40020000 	.word	0x40020000
 8050848:	40004400 	.word	0x40004400

0805084c <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 805084c:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 805084e:	4b0c      	ldr	r3, [pc, #48]	; (8050880 <COM_Init+0x34>)
 8050850:	6818      	ldr	r0, [r3, #0]
 8050852:	2300      	movs	r3, #0
 8050854:	2202      	movs	r2, #2
 8050856:	4619      	mov	r1, r3
 8050858:	6880      	ldr	r0, [r0, #8]
 805085a:	f000 fe9f 	bl	805159c <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  /*UartHandleUpdate*/huart1.Instance = COM_UART;
 805085e:	4809      	ldr	r0, [pc, #36]	; (8050884 <COM_Init+0x38>)
  /*UartHandleUpdate*/huart1.Init.BaudRate = 9600;
 8050860:	4a09      	ldr	r2, [pc, #36]	; (8050888 <COM_Init+0x3c>)
 8050862:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8050866:	e9c0 2300 	strd	r2, r3, [r0]
  /*UartHandleUpdate*/huart1.Init.WordLength = UART_WORDLENGTH_8B;
 805086a:	2300      	movs	r3, #0
  /*UartHandleUpdate*/huart1.Init.StopBits = UART_STOPBITS_1;
 805086c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /*UartHandleUpdate*/huart1.Init.Parity = UART_PARITY_NONE;
 8050870:	6103      	str	r3, [r0, #16]
  /*UartHandleUpdate*/huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8050872:	6183      	str	r3, [r0, #24]
  /*UartHandleUpdate*/huart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 8050874:	230c      	movs	r3, #12
 8050876:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
}
 8050878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
 805087c:	f7f6 bcae 	b.w	80471dc <HAL_UART_Init>
 8050880:	20001210 	.word	0x20001210
 8050884:	20003dd4 	.word	0x20003dd4
 8050888:	40011000 	.word	0x40011000

0805088c <COM_Transmit>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{ //UartHandleUpdate
  return HAL_UART_Transmit(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 805088c:	4613      	mov	r3, r2
 805088e:	460a      	mov	r2, r1
 8050890:	4601      	mov	r1, r0
 8050892:	4801      	ldr	r0, [pc, #4]	; (8050898 <COM_Transmit+0xc>)
 8050894:	f7f6 bce8 	b.w	8047268 <HAL_UART_Transmit>
 8050898:	20003dd4 	.word	0x20003dd4

0805089c <COM_Receive>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
  return HAL_UART_Receive(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 805089c:	4613      	mov	r3, r2
 805089e:	460a      	mov	r2, r1
 80508a0:	4601      	mov	r1, r0
 80508a2:	4801      	ldr	r0, [pc, #4]	; (80508a8 <COM_Receive+0xc>)
 80508a4:	f7f6 bd3c 	b.w	8047320 <HAL_UART_Receive>
 80508a8:	20003dd4 	.word	0x20003dd4

080508ac <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 80508ac:	4b02      	ldr	r3, [pc, #8]	; (80508b8 <COM_Flush+0xc>)
 80508ae:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 80508b0:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 80508b2:	685b      	ldr	r3, [r3, #4]
}
 80508b4:	4770      	bx	lr
 80508b6:	bf00      	nop
 80508b8:	20003dd4 	.word	0x20003dd4

080508bc <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 80508bc:	4770      	bx	lr
	...

080508c0 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 80508c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80508c4:	b08d      	sub	sp, #52	; 0x34
 80508c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80508ca:	4692      	mov	sl, r2
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH + 1U];
  uint8_t tmp;
  uint32_t packets_received;
  COM_StatusTypeDef e_result = COM_OK;
  refresh_iwdg();
 80508cc:	f7ff fd6e 	bl	80503ac <refresh_iwdg>
    *pData = char1;
 80508d0:	4fa1      	ldr	r7, [pc, #644]	; (8050b58 <Ymodem_Receive+0x298>)
  uint32_t session_begin = 0U;
 80508d2:	f04f 0900 	mov.w	r9, #0
 80508d6:	2600      	movs	r6, #0
 80508d8:	e0dd      	b.n	8050a96 <Ymodem_Receive+0x1d6>
    switch (char1)
 80508da:	2b61      	cmp	r3, #97	; 0x61
 80508dc:	d004      	beq.n	80508e8 <Ymodem_Receive+0x28>
 80508de:	2b72      	cmp	r3, #114	; 0x72
 80508e0:	d077      	beq.n	80509d2 <Ymodem_Receive+0x112>
 80508e2:	2b41      	cmp	r3, #65	; 0x41
 80508e4:	f040 8085 	bne.w	80509f2 <Ymodem_Receive+0x132>
        status = HAL_BUSY;
 80508e8:	2402      	movs	r4, #2
  uint32_t packet_size = 0U;
 80508ea:	2500      	movs	r5, #0
 80508ec:	e001      	b.n	80508f2 <Ymodem_Receive+0x32>
        packet_size = PACKET_1K_SIZE;
 80508ee:	f44f 6580 	mov.w	r5, #1024	; 0x400
    *pData = char1;
 80508f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80508f6:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE)
 80508f8:	2d7f      	cmp	r5, #127	; 0x7f
 80508fa:	d97e      	bls.n	80509fa <Ymodem_Receive+0x13a>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 80508fc:	fa1f fb85 	uxth.w	fp, r5
 8050900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050904:	f10b 0104 	add.w	r1, fp, #4
 8050908:	4894      	ldr	r0, [pc, #592]	; (8050b5c <Ymodem_Receive+0x29c>)
 805090a:	f7ff ffc7 	bl	805089c <COM_Receive>
      if (status == HAL_OK)
 805090e:	4604      	mov	r4, r0
 8050910:	2800      	cmp	r0, #0
 8050912:	d173      	bne.n	80509fc <Ymodem_Receive+0x13c>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8050914:	78fb      	ldrb	r3, [r7, #3]
 8050916:	78ba      	ldrb	r2, [r7, #2]
 8050918:	43db      	mvns	r3, r3
 805091a:	b2db      	uxtb	r3, r3
 805091c:	429a      	cmp	r2, r3
 805091e:	d16f      	bne.n	8050a00 <Ymodem_Receive+0x140>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 8050920:	197b      	adds	r3, r7, r5
    out ^= 0x1021;
 8050922:	f241 0e21 	movw	lr, #4129	; 0x1021
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 8050926:	791a      	ldrb	r2, [r3, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 8050928:	795b      	ldrb	r3, [r3, #5]
 805092a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 805092e:	4a8c      	ldr	r2, [pc, #560]	; (8050b60 <Ymodem_Receive+0x2a0>)
 8050930:	9301      	str	r3, [sp, #4]
 8050932:	1c51      	adds	r1, r2, #1
 8050934:	f10b 33ff 	add.w	r3, fp, #4294967295
 8050938:	fa11 f383 	uxtah	r3, r1, r3
      crc = crc_update(crc, *pdata & i);
 805093c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8050940:	2008      	movs	r0, #8
    for (i = 0x80; i; i >>= 1)
 8050942:	2180      	movs	r1, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 8050944:	ea4f 3bd4 	mov.w	fp, r4, lsr #15
  uint16_t out = crc_in << 1;
 8050948:	0064      	lsls	r4, r4, #1
 805094a:	b2a4      	uxth	r4, r4
  if (incr)
 805094c:	ea1c 0f01 	tst.w	ip, r1
    out++;
 8050950:	bf1c      	itt	ne
 8050952:	3401      	addne	r4, #1
 8050954:	b2a4      	uxthne	r4, r4
  if (xor)
 8050956:	f1bb 0f00 	cmp.w	fp, #0
 805095a:	d001      	beq.n	8050960 <Ymodem_Receive+0xa0>
    out ^= 0x1021;
 805095c:	ea84 040e 	eor.w	r4, r4, lr
    for (i = 0x80; i; i >>= 1)
 8050960:	3801      	subs	r0, #1
 8050962:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8050966:	d1ed      	bne.n	8050944 <Ymodem_Receive+0x84>
  for (crc = 0; size > 0; size--, pdata++)
 8050968:	429a      	cmp	r2, r3
 805096a:	d1e7      	bne.n	805093c <Ymodem_Receive+0x7c>
 805096c:	2310      	movs	r3, #16
    out ^= 0x1021;
 805096e:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 8050972:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 8050974:	0064      	lsls	r4, r4, #1
 8050976:	b2a4      	uxth	r4, r4
  if (xor)
 8050978:	b101      	cbz	r1, 805097c <Ymodem_Receive+0xbc>
    out ^= 0x1021;
 805097a:	4054      	eors	r4, r2
 805097c:	3b01      	subs	r3, #1
  for (i = 0; i < 16; i++)
 805097e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8050982:	d1f6      	bne.n	8050972 <Ymodem_Receive+0xb2>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 8050984:	9b01      	ldr	r3, [sp, #4]
 8050986:	42a3      	cmp	r3, r4
 8050988:	d13a      	bne.n	8050a00 <Ymodem_Receive+0x140>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 805098a:	78ba      	ldrb	r2, [r7, #2]
 805098c:	b2f3      	uxtb	r3, r6
 805098e:	429a      	cmp	r2, r3
 8050990:	f040 8081 	bne.w	8050a96 <Ymodem_Receive+0x1d6>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 8050994:	2e00      	cmp	r6, #0
 8050996:	f040 80bb 	bne.w	8050b10 <Ymodem_Receive+0x250>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 805099a:	793b      	ldrb	r3, [r7, #4]
 805099c:	2b00      	cmp	r3, #0
 805099e:	f040 809e 	bne.w	8050ade <Ymodem_Receive+0x21e>

                  }
                  /* File header packet is empty, end session */
                  else
                  {
                    Serial_PutByte(ACK);
 80509a2:	2006      	movs	r0, #6
 80509a4:	f7fd ffbe 	bl	804e924 <Serial_PutByte>
 80509a8:	4630      	mov	r0, r6
          break;
      }
    }
  }
  return e_result;
}
 80509aa:	b00d      	add	sp, #52	; 0x34
 80509ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 80509b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80509b4:	2101      	movs	r1, #1
 80509b6:	f10d 0017 	add.w	r0, sp, #23
 80509ba:	f7ff ff6f 	bl	805089c <COM_Receive>
 80509be:	4604      	mov	r4, r0
 80509c0:	b9c8      	cbnz	r0, 80509f6 <Ymodem_Receive+0x136>
 80509c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 80509c6:	2b18      	cmp	r3, #24
 80509c8:	bf16      	itet	ne
 80509ca:	2500      	movne	r5, #0
 80509cc:	2502      	moveq	r5, #2
 80509ce:	2401      	movne	r4, #1
 80509d0:	e78f      	b.n	80508f2 <Ymodem_Receive+0x32>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 80509d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80509d6:	2101      	movs	r1, #1
 80509d8:	f10d 0017 	add.w	r0, sp, #23
 80509dc:	f7ff ff5e 	bl	805089c <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 80509e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80509e4:	2101      	movs	r1, #1
 80509e6:	f10d 0017 	add.w	r0, sp, #23
 80509ea:	f7ff ff57 	bl	805089c <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 80509ee:	2503      	movs	r5, #3
 80509f0:	e77f      	b.n	80508f2 <Ymodem_Receive+0x32>
        status = HAL_ERROR;
 80509f2:	2401      	movs	r4, #1
 80509f4:	e779      	b.n	80508ea <Ymodem_Receive+0x2a>
          status = HAL_ERROR;
 80509f6:	2401      	movs	r4, #1
 80509f8:	e77b      	b.n	80508f2 <Ymodem_Receive+0x32>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 80509fa:	b17c      	cbz	r4, 8050a1c <Ymodem_Receive+0x15c>
 80509fc:	2c02      	cmp	r4, #2
 80509fe:	d008      	beq.n	8050a12 <Ymodem_Receive+0x152>
          if (session_begin > 0U)
 8050a00:	f1b9 0f00 	cmp.w	r9, #0
 8050a04:	d001      	beq.n	8050a0a <Ymodem_Receive+0x14a>
            errors ++;
 8050a06:	f108 0801 	add.w	r8, r8, #1
          if (errors > MAX_ERRORS)
 8050a0a:	f1b8 0f05 	cmp.w	r8, #5
 8050a0e:	f240 809b 	bls.w	8050b48 <Ymodem_Receive+0x288>
          Serial_PutByte(CA);
 8050a12:	2018      	movs	r0, #24
 8050a14:	f7fd ff86 	bl	804e924 <Serial_PutByte>
          Serial_PutByte(CA);
 8050a18:	2018      	movs	r0, #24
 8050a1a:	e00d      	b.n	8050a38 <Ymodem_Receive+0x178>
          switch (packet_length)
 8050a1c:	2d02      	cmp	r5, #2
 8050a1e:	d00a      	beq.n	8050a36 <Ymodem_Receive+0x176>
 8050a20:	2d03      	cmp	r5, #3
 8050a22:	d038      	beq.n	8050a96 <Ymodem_Receive+0x1d6>
 8050a24:	2d00      	cmp	r5, #0
 8050a26:	d1b0      	bne.n	805098a <Ymodem_Receive+0xca>
              Serial_PutByte(ACK);
 8050a28:	2006      	movs	r0, #6
 8050a2a:	f7fd ff7b 	bl	804e924 <Serial_PutByte>
              *puSize = filesize;
 8050a2e:	9a02      	ldr	r2, [sp, #8]
 8050a30:	9b06      	ldr	r3, [sp, #24]
 8050a32:	6013      	str	r3, [r2, #0]
 8050a34:	e74f      	b.n	80508d6 <Ymodem_Receive+0x16>
              Serial_PutByte(ACK);
 8050a36:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 8050a38:	f7fd ff74 	bl	804e924 <Serial_PutByte>
          break;
 8050a3c:	e066      	b.n	8050b0c <Ymodem_Receive+0x24c>
                      m_aFileName[i++] = *file_ptr++;
 8050a3e:	5483      	strb	r3, [r0, r2]
 8050a40:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 8050a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8050a46:	b10b      	cbz	r3, 8050a4c <Ymodem_Receive+0x18c>
 8050a48:	2a40      	cmp	r2, #64	; 0x40
 8050a4a:	d1f8      	bne.n	8050a3e <Ymodem_Receive+0x17e>
                    m_aFileName[i++] = '\0';
 8050a4c:	2300      	movs	r3, #0
 8050a4e:	5483      	strb	r3, [r0, r2]
 8050a50:	a807      	add	r0, sp, #28
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8050a52:	5cca      	ldrb	r2, [r1, r3]
 8050a54:	2a20      	cmp	r2, #32
 8050a56:	d001      	beq.n	8050a5c <Ymodem_Receive+0x19c>
 8050a58:	2b10      	cmp	r3, #16
 8050a5a:	d144      	bne.n	8050ae6 <Ymodem_Receive+0x226>
                    file_size[i++] = '\0';
 8050a5c:	aa0c      	add	r2, sp, #48	; 0x30
 8050a5e:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 8050a60:	a906      	add	r1, sp, #24
                    file_size[i++] = '\0';
 8050a62:	2200      	movs	r2, #0
 8050a64:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 8050a68:	f7fd ff0e 	bl	804e888 <Str2Int>
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 8050a6c:	f8da 3000 	ldr.w	r3, [sl]
 8050a70:	9806      	ldr	r0, [sp, #24]
 8050a72:	4798      	blx	r3
 8050a74:	4604      	mov	r4, r0
 8050a76:	2800      	cmp	r0, #0
 8050a78:	d138      	bne.n	8050aec <Ymodem_Receive+0x22c>
                      Serial_PutByte(ACK);
 8050a7a:	2006      	movs	r0, #6
 8050a7c:	f7fd ff52 	bl	804e924 <Serial_PutByte>
                      COM_Flush();
 8050a80:	f7ff ff14 	bl	80508ac <COM_Flush>
                      Serial_PutByte(CRC16);
 8050a84:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 8050a86:	f7fd ff4d 	bl	804e924 <Serial_PutByte>
 8050a8a:	4620      	mov	r0, r4
                packets_received ++;
 8050a8c:	3601      	adds	r6, #1
                session_begin = 1U;
 8050a8e:	f04f 0901 	mov.w	r9, #1
    while ((file_done == 0U) && (e_result == COM_OK))
 8050a92:	2800      	cmp	r0, #0
 8050a94:	d189      	bne.n	80509aa <Ymodem_Receive+0xea>
 8050a96:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8050a9a:	4b32      	ldr	r3, [pc, #200]	; (8050b64 <Ymodem_Receive+0x2a4>)
 8050a9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8050aa0:	601a      	str	r2, [r3, #0]
  refresh_iwdg();
 8050aa2:	f7ff fc83 	bl	80503ac <refresh_iwdg>
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 8050aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050aaa:	2101      	movs	r1, #1
 8050aac:	f10d 0017 	add.w	r0, sp, #23
 8050ab0:	f7ff fef4 	bl	805089c <COM_Receive>
 8050ab4:	4604      	mov	r4, r0
 8050ab6:	4605      	mov	r5, r0
  if (status == HAL_OK)
 8050ab8:	2800      	cmp	r0, #0
 8050aba:	d19f      	bne.n	80509fc <Ymodem_Receive+0x13c>
    switch (char1)
 8050abc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8050ac0:	2b18      	cmp	r3, #24
 8050ac2:	f43f af75 	beq.w	80509b0 <Ymodem_Receive+0xf0>
 8050ac6:	f63f af08 	bhi.w	80508da <Ymodem_Receive+0x1a>
 8050aca:	2b02      	cmp	r3, #2
 8050acc:	f43f af0f 	beq.w	80508ee <Ymodem_Receive+0x2e>
 8050ad0:	2b04      	cmp	r3, #4
 8050ad2:	f43f af0a 	beq.w	80508ea <Ymodem_Receive+0x2a>
 8050ad6:	2b01      	cmp	r3, #1
 8050ad8:	d18b      	bne.n	80509f2 <Ymodem_Receive+0x132>
        packet_size = PACKET_SIZE;
 8050ada:	2580      	movs	r5, #128	; 0x80
 8050adc:	e709      	b.n	80508f2 <Ymodem_Receive+0x32>
 8050ade:	4632      	mov	r2, r6
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 8050ae0:	4921      	ldr	r1, [pc, #132]	; (8050b68 <Ymodem_Receive+0x2a8>)
 8050ae2:	4822      	ldr	r0, [pc, #136]	; (8050b6c <Ymodem_Receive+0x2ac>)
 8050ae4:	e7ad      	b.n	8050a42 <Ymodem_Receive+0x182>
                      file_size[i++] = *file_ptr++;
 8050ae6:	54c2      	strb	r2, [r0, r3]
 8050ae8:	3301      	adds	r3, #1
 8050aea:	e7b2      	b.n	8050a52 <Ymodem_Receive+0x192>
                      tmp = CA;
 8050aec:	ac0c      	add	r4, sp, #48	; 0x30
 8050aee:	2318      	movs	r3, #24
 8050af0:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050af8:	2101      	movs	r1, #1
 8050afa:	4620      	mov	r0, r4
 8050afc:	f7ff fec6 	bl	805088c <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050b00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050b04:	2101      	movs	r1, #1
 8050b06:	4620      	mov	r0, r4
 8050b08:	f7ff fec0 	bl	805088c <COM_Transmit>
                session_begin = 1U;
 8050b0c:	2002      	movs	r0, #2
  return e_result;
 8050b0e:	e74c      	b.n	80509aa <Ymodem_Receive+0xea>
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 8050b10:	f8da 3004 	ldr.w	r3, [sl, #4]
 8050b14:	9903      	ldr	r1, [sp, #12]
 8050b16:	4814      	ldr	r0, [pc, #80]	; (8050b68 <Ymodem_Receive+0x2a8>)
 8050b18:	462a      	mov	r2, r5
 8050b1a:	4798      	blx	r3
 8050b1c:	4604      	mov	r4, r0
 8050b1e:	b908      	cbnz	r0, 8050b24 <Ymodem_Receive+0x264>
                    Serial_PutByte(ACK);
 8050b20:	2006      	movs	r0, #6
 8050b22:	e7b0      	b.n	8050a86 <Ymodem_Receive+0x1c6>
                    tmp = CA;
 8050b24:	ac0c      	add	r4, sp, #48	; 0x30
 8050b26:	2318      	movs	r3, #24
 8050b28:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050b30:	2101      	movs	r1, #1
 8050b32:	4620      	mov	r0, r4
 8050b34:	f7ff feaa 	bl	805088c <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050b3c:	2101      	movs	r1, #1
 8050b3e:	4620      	mov	r0, r4
 8050b40:	f7ff fea4 	bl	805088c <COM_Transmit>
                    e_result = COM_ERROR;
 8050b44:	2001      	movs	r0, #1
 8050b46:	e7a1      	b.n	8050a8c <Ymodem_Receive+0x1cc>
            Serial_PutByte(CRC16); /* Ask for a packet */
 8050b48:	2043      	movs	r0, #67	; 0x43
 8050b4a:	f7fd feeb 	bl	804e924 <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 8050b4e:	4808      	ldr	r0, [pc, #32]	; (8050b70 <Ymodem_Receive+0x2b0>)
 8050b50:	f000 fca8 	bl	80514a4 <iprintf>
 8050b54:	e7a1      	b.n	8050a9a <Ymodem_Receive+0x1da>
 8050b56:	bf00      	nop
 8050b58:	200039b0 	.word	0x200039b0
 8050b5c:	200039b2 	.word	0x200039b2
 8050b60:	200039b3 	.word	0x200039b3
 8050b64:	40003000 	.word	0x40003000
 8050b68:	200039b4 	.word	0x200039b4
 8050b6c:	2000636c 	.word	0x2000636c
 8050b70:	08054f3b 	.word	0x08054f3b

08050b74 <atoi>:
 8050b74:	220a      	movs	r2, #10
 8050b76:	2100      	movs	r1, #0
 8050b78:	f000 be70 	b.w	805185c <strtol>

08050b7c <__libc_init_array>:
 8050b7c:	b570      	push	{r4, r5, r6, lr}
 8050b7e:	4e0d      	ldr	r6, [pc, #52]	; (8050bb4 <__libc_init_array+0x38>)
 8050b80:	4c0d      	ldr	r4, [pc, #52]	; (8050bb8 <__libc_init_array+0x3c>)
 8050b82:	1ba4      	subs	r4, r4, r6
 8050b84:	10a4      	asrs	r4, r4, #2
 8050b86:	2500      	movs	r5, #0
 8050b88:	42a5      	cmp	r5, r4
 8050b8a:	d109      	bne.n	8050ba0 <__libc_init_array+0x24>
 8050b8c:	4e0b      	ldr	r6, [pc, #44]	; (8050bbc <__libc_init_array+0x40>)
 8050b8e:	4c0c      	ldr	r4, [pc, #48]	; (8050bc0 <__libc_init_array+0x44>)
 8050b90:	f003 f886 	bl	8053ca0 <_init>
 8050b94:	1ba4      	subs	r4, r4, r6
 8050b96:	10a4      	asrs	r4, r4, #2
 8050b98:	2500      	movs	r5, #0
 8050b9a:	42a5      	cmp	r5, r4
 8050b9c:	d105      	bne.n	8050baa <__libc_init_array+0x2e>
 8050b9e:	bd70      	pop	{r4, r5, r6, pc}
 8050ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8050ba4:	4798      	blx	r3
 8050ba6:	3501      	adds	r5, #1
 8050ba8:	e7ee      	b.n	8050b88 <__libc_init_array+0xc>
 8050baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8050bae:	4798      	blx	r3
 8050bb0:	3501      	adds	r5, #1
 8050bb2:	e7f2      	b.n	8050b9a <__libc_init_array+0x1e>
 8050bb4:	08055208 	.word	0x08055208
 8050bb8:	08055208 	.word	0x08055208
 8050bbc:	08055208 	.word	0x08055208
 8050bc0:	0805520c 	.word	0x0805520c

08050bc4 <memcpy>:
 8050bc4:	b510      	push	{r4, lr}
 8050bc6:	1e43      	subs	r3, r0, #1
 8050bc8:	440a      	add	r2, r1
 8050bca:	4291      	cmp	r1, r2
 8050bcc:	d100      	bne.n	8050bd0 <memcpy+0xc>
 8050bce:	bd10      	pop	{r4, pc}
 8050bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8050bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8050bd8:	e7f7      	b.n	8050bca <memcpy+0x6>

08050bda <memset>:
 8050bda:	4402      	add	r2, r0
 8050bdc:	4603      	mov	r3, r0
 8050bde:	4293      	cmp	r3, r2
 8050be0:	d100      	bne.n	8050be4 <memset+0xa>
 8050be2:	4770      	bx	lr
 8050be4:	f803 1b01 	strb.w	r1, [r3], #1
 8050be8:	e7f9      	b.n	8050bde <memset+0x4>

08050bea <__cvt>:
 8050bea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8050bee:	ec55 4b10 	vmov	r4, r5, d0
 8050bf2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8050bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8050bf8:	2d00      	cmp	r5, #0
 8050bfa:	460e      	mov	r6, r1
 8050bfc:	4691      	mov	r9, r2
 8050bfe:	4619      	mov	r1, r3
 8050c00:	bfb8      	it	lt
 8050c02:	4622      	movlt	r2, r4
 8050c04:	462b      	mov	r3, r5
 8050c06:	f027 0720 	bic.w	r7, r7, #32
 8050c0a:	bfbb      	ittet	lt
 8050c0c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8050c10:	461d      	movlt	r5, r3
 8050c12:	2300      	movge	r3, #0
 8050c14:	232d      	movlt	r3, #45	; 0x2d
 8050c16:	bfb8      	it	lt
 8050c18:	4614      	movlt	r4, r2
 8050c1a:	2f46      	cmp	r7, #70	; 0x46
 8050c1c:	700b      	strb	r3, [r1, #0]
 8050c1e:	d004      	beq.n	8050c2a <__cvt+0x40>
 8050c20:	2f45      	cmp	r7, #69	; 0x45
 8050c22:	d100      	bne.n	8050c26 <__cvt+0x3c>
 8050c24:	3601      	adds	r6, #1
 8050c26:	2102      	movs	r1, #2
 8050c28:	e000      	b.n	8050c2c <__cvt+0x42>
 8050c2a:	2103      	movs	r1, #3
 8050c2c:	ab03      	add	r3, sp, #12
 8050c2e:	9301      	str	r3, [sp, #4]
 8050c30:	ab02      	add	r3, sp, #8
 8050c32:	9300      	str	r3, [sp, #0]
 8050c34:	4632      	mov	r2, r6
 8050c36:	4653      	mov	r3, sl
 8050c38:	ec45 4b10 	vmov	d0, r4, r5
 8050c3c:	f000 ffac 	bl	8051b98 <_dtoa_r>
 8050c40:	2f47      	cmp	r7, #71	; 0x47
 8050c42:	4680      	mov	r8, r0
 8050c44:	d102      	bne.n	8050c4c <__cvt+0x62>
 8050c46:	f019 0f01 	tst.w	r9, #1
 8050c4a:	d026      	beq.n	8050c9a <__cvt+0xb0>
 8050c4c:	2f46      	cmp	r7, #70	; 0x46
 8050c4e:	eb08 0906 	add.w	r9, r8, r6
 8050c52:	d111      	bne.n	8050c78 <__cvt+0x8e>
 8050c54:	f898 3000 	ldrb.w	r3, [r8]
 8050c58:	2b30      	cmp	r3, #48	; 0x30
 8050c5a:	d10a      	bne.n	8050c72 <__cvt+0x88>
 8050c5c:	2200      	movs	r2, #0
 8050c5e:	2300      	movs	r3, #0
 8050c60:	4620      	mov	r0, r4
 8050c62:	4629      	mov	r1, r5
 8050c64:	f7f0 f868 	bl	8040d38 <__aeabi_dcmpeq>
 8050c68:	b918      	cbnz	r0, 8050c72 <__cvt+0x88>
 8050c6a:	f1c6 0601 	rsb	r6, r6, #1
 8050c6e:	f8ca 6000 	str.w	r6, [sl]
 8050c72:	f8da 3000 	ldr.w	r3, [sl]
 8050c76:	4499      	add	r9, r3
 8050c78:	2200      	movs	r2, #0
 8050c7a:	2300      	movs	r3, #0
 8050c7c:	4620      	mov	r0, r4
 8050c7e:	4629      	mov	r1, r5
 8050c80:	f7f0 f85a 	bl	8040d38 <__aeabi_dcmpeq>
 8050c84:	b938      	cbnz	r0, 8050c96 <__cvt+0xac>
 8050c86:	2230      	movs	r2, #48	; 0x30
 8050c88:	9b03      	ldr	r3, [sp, #12]
 8050c8a:	454b      	cmp	r3, r9
 8050c8c:	d205      	bcs.n	8050c9a <__cvt+0xb0>
 8050c8e:	1c59      	adds	r1, r3, #1
 8050c90:	9103      	str	r1, [sp, #12]
 8050c92:	701a      	strb	r2, [r3, #0]
 8050c94:	e7f8      	b.n	8050c88 <__cvt+0x9e>
 8050c96:	f8cd 900c 	str.w	r9, [sp, #12]
 8050c9a:	9b03      	ldr	r3, [sp, #12]
 8050c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8050c9e:	eba3 0308 	sub.w	r3, r3, r8
 8050ca2:	4640      	mov	r0, r8
 8050ca4:	6013      	str	r3, [r2, #0]
 8050ca6:	b004      	add	sp, #16
 8050ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08050cac <__exponent>:
 8050cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8050cae:	2900      	cmp	r1, #0
 8050cb0:	4604      	mov	r4, r0
 8050cb2:	bfba      	itte	lt
 8050cb4:	4249      	neglt	r1, r1
 8050cb6:	232d      	movlt	r3, #45	; 0x2d
 8050cb8:	232b      	movge	r3, #43	; 0x2b
 8050cba:	2909      	cmp	r1, #9
 8050cbc:	f804 2b02 	strb.w	r2, [r4], #2
 8050cc0:	7043      	strb	r3, [r0, #1]
 8050cc2:	dd20      	ble.n	8050d06 <__exponent+0x5a>
 8050cc4:	f10d 0307 	add.w	r3, sp, #7
 8050cc8:	461f      	mov	r7, r3
 8050cca:	260a      	movs	r6, #10
 8050ccc:	fb91 f5f6 	sdiv	r5, r1, r6
 8050cd0:	fb06 1115 	mls	r1, r6, r5, r1
 8050cd4:	3130      	adds	r1, #48	; 0x30
 8050cd6:	2d09      	cmp	r5, #9
 8050cd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8050cdc:	f103 32ff 	add.w	r2, r3, #4294967295
 8050ce0:	4629      	mov	r1, r5
 8050ce2:	dc09      	bgt.n	8050cf8 <__exponent+0x4c>
 8050ce4:	3130      	adds	r1, #48	; 0x30
 8050ce6:	3b02      	subs	r3, #2
 8050ce8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8050cec:	42bb      	cmp	r3, r7
 8050cee:	4622      	mov	r2, r4
 8050cf0:	d304      	bcc.n	8050cfc <__exponent+0x50>
 8050cf2:	1a10      	subs	r0, r2, r0
 8050cf4:	b003      	add	sp, #12
 8050cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8050cf8:	4613      	mov	r3, r2
 8050cfa:	e7e7      	b.n	8050ccc <__exponent+0x20>
 8050cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8050d00:	f804 2b01 	strb.w	r2, [r4], #1
 8050d04:	e7f2      	b.n	8050cec <__exponent+0x40>
 8050d06:	2330      	movs	r3, #48	; 0x30
 8050d08:	4419      	add	r1, r3
 8050d0a:	7083      	strb	r3, [r0, #2]
 8050d0c:	1d02      	adds	r2, r0, #4
 8050d0e:	70c1      	strb	r1, [r0, #3]
 8050d10:	e7ef      	b.n	8050cf2 <__exponent+0x46>
	...

08050d14 <_printf_float>:
 8050d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8050d18:	b08d      	sub	sp, #52	; 0x34
 8050d1a:	460c      	mov	r4, r1
 8050d1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8050d20:	4616      	mov	r6, r2
 8050d22:	461f      	mov	r7, r3
 8050d24:	4605      	mov	r5, r0
 8050d26:	f001 fe6d 	bl	8052a04 <_localeconv_r>
 8050d2a:	6803      	ldr	r3, [r0, #0]
 8050d2c:	9304      	str	r3, [sp, #16]
 8050d2e:	4618      	mov	r0, r3
 8050d30:	f7ef fb86 	bl	8040440 <strlen>
 8050d34:	2300      	movs	r3, #0
 8050d36:	930a      	str	r3, [sp, #40]	; 0x28
 8050d38:	f8d8 3000 	ldr.w	r3, [r8]
 8050d3c:	9005      	str	r0, [sp, #20]
 8050d3e:	3307      	adds	r3, #7
 8050d40:	f023 0307 	bic.w	r3, r3, #7
 8050d44:	f103 0208 	add.w	r2, r3, #8
 8050d48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8050d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8050d50:	f8c8 2000 	str.w	r2, [r8]
 8050d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8050d58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8050d5c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8050d60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8050d64:	9307      	str	r3, [sp, #28]
 8050d66:	f8cd 8018 	str.w	r8, [sp, #24]
 8050d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8050d6e:	4ba7      	ldr	r3, [pc, #668]	; (805100c <_printf_float+0x2f8>)
 8050d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8050d74:	f7f0 f812 	bl	8040d9c <__aeabi_dcmpun>
 8050d78:	bb70      	cbnz	r0, 8050dd8 <_printf_float+0xc4>
 8050d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8050d7e:	4ba3      	ldr	r3, [pc, #652]	; (805100c <_printf_float+0x2f8>)
 8050d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8050d84:	f7ef ffec 	bl	8040d60 <__aeabi_dcmple>
 8050d88:	bb30      	cbnz	r0, 8050dd8 <_printf_float+0xc4>
 8050d8a:	2200      	movs	r2, #0
 8050d8c:	2300      	movs	r3, #0
 8050d8e:	4640      	mov	r0, r8
 8050d90:	4649      	mov	r1, r9
 8050d92:	f7ef ffdb 	bl	8040d4c <__aeabi_dcmplt>
 8050d96:	b110      	cbz	r0, 8050d9e <_printf_float+0x8a>
 8050d98:	232d      	movs	r3, #45	; 0x2d
 8050d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8050d9e:	4a9c      	ldr	r2, [pc, #624]	; (8051010 <_printf_float+0x2fc>)
 8050da0:	4b9c      	ldr	r3, [pc, #624]	; (8051014 <_printf_float+0x300>)
 8050da2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8050da6:	bf8c      	ite	hi
 8050da8:	4690      	movhi	r8, r2
 8050daa:	4698      	movls	r8, r3
 8050dac:	2303      	movs	r3, #3
 8050dae:	f02b 0204 	bic.w	r2, fp, #4
 8050db2:	6123      	str	r3, [r4, #16]
 8050db4:	6022      	str	r2, [r4, #0]
 8050db6:	f04f 0900 	mov.w	r9, #0
 8050dba:	9700      	str	r7, [sp, #0]
 8050dbc:	4633      	mov	r3, r6
 8050dbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8050dc0:	4621      	mov	r1, r4
 8050dc2:	4628      	mov	r0, r5
 8050dc4:	f000 f9e6 	bl	8051194 <_printf_common>
 8050dc8:	3001      	adds	r0, #1
 8050dca:	f040 808d 	bne.w	8050ee8 <_printf_float+0x1d4>
 8050dce:	f04f 30ff 	mov.w	r0, #4294967295
 8050dd2:	b00d      	add	sp, #52	; 0x34
 8050dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8050dd8:	4642      	mov	r2, r8
 8050dda:	464b      	mov	r3, r9
 8050ddc:	4640      	mov	r0, r8
 8050dde:	4649      	mov	r1, r9
 8050de0:	f7ef ffdc 	bl	8040d9c <__aeabi_dcmpun>
 8050de4:	b110      	cbz	r0, 8050dec <_printf_float+0xd8>
 8050de6:	4a8c      	ldr	r2, [pc, #560]	; (8051018 <_printf_float+0x304>)
 8050de8:	4b8c      	ldr	r3, [pc, #560]	; (805101c <_printf_float+0x308>)
 8050dea:	e7da      	b.n	8050da2 <_printf_float+0x8e>
 8050dec:	6861      	ldr	r1, [r4, #4]
 8050dee:	1c4b      	adds	r3, r1, #1
 8050df0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8050df4:	a80a      	add	r0, sp, #40	; 0x28
 8050df6:	d13e      	bne.n	8050e76 <_printf_float+0x162>
 8050df8:	2306      	movs	r3, #6
 8050dfa:	6063      	str	r3, [r4, #4]
 8050dfc:	2300      	movs	r3, #0
 8050dfe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8050e02:	ab09      	add	r3, sp, #36	; 0x24
 8050e04:	9300      	str	r3, [sp, #0]
 8050e06:	ec49 8b10 	vmov	d0, r8, r9
 8050e0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8050e0e:	6022      	str	r2, [r4, #0]
 8050e10:	f8cd a004 	str.w	sl, [sp, #4]
 8050e14:	6861      	ldr	r1, [r4, #4]
 8050e16:	4628      	mov	r0, r5
 8050e18:	f7ff fee7 	bl	8050bea <__cvt>
 8050e1c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8050e20:	2b47      	cmp	r3, #71	; 0x47
 8050e22:	4680      	mov	r8, r0
 8050e24:	d109      	bne.n	8050e3a <_printf_float+0x126>
 8050e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050e28:	1cd8      	adds	r0, r3, #3
 8050e2a:	db02      	blt.n	8050e32 <_printf_float+0x11e>
 8050e2c:	6862      	ldr	r2, [r4, #4]
 8050e2e:	4293      	cmp	r3, r2
 8050e30:	dd47      	ble.n	8050ec2 <_printf_float+0x1ae>
 8050e32:	f1aa 0a02 	sub.w	sl, sl, #2
 8050e36:	fa5f fa8a 	uxtb.w	sl, sl
 8050e3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8050e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8050e40:	d824      	bhi.n	8050e8c <_printf_float+0x178>
 8050e42:	3901      	subs	r1, #1
 8050e44:	4652      	mov	r2, sl
 8050e46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8050e4a:	9109      	str	r1, [sp, #36]	; 0x24
 8050e4c:	f7ff ff2e 	bl	8050cac <__exponent>
 8050e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8050e52:	1813      	adds	r3, r2, r0
 8050e54:	2a01      	cmp	r2, #1
 8050e56:	4681      	mov	r9, r0
 8050e58:	6123      	str	r3, [r4, #16]
 8050e5a:	dc02      	bgt.n	8050e62 <_printf_float+0x14e>
 8050e5c:	6822      	ldr	r2, [r4, #0]
 8050e5e:	07d1      	lsls	r1, r2, #31
 8050e60:	d501      	bpl.n	8050e66 <_printf_float+0x152>
 8050e62:	3301      	adds	r3, #1
 8050e64:	6123      	str	r3, [r4, #16]
 8050e66:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8050e6a:	2b00      	cmp	r3, #0
 8050e6c:	d0a5      	beq.n	8050dba <_printf_float+0xa6>
 8050e6e:	232d      	movs	r3, #45	; 0x2d
 8050e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8050e74:	e7a1      	b.n	8050dba <_printf_float+0xa6>
 8050e76:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8050e7a:	f000 8177 	beq.w	805116c <_printf_float+0x458>
 8050e7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8050e82:	d1bb      	bne.n	8050dfc <_printf_float+0xe8>
 8050e84:	2900      	cmp	r1, #0
 8050e86:	d1b9      	bne.n	8050dfc <_printf_float+0xe8>
 8050e88:	2301      	movs	r3, #1
 8050e8a:	e7b6      	b.n	8050dfa <_printf_float+0xe6>
 8050e8c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8050e90:	d119      	bne.n	8050ec6 <_printf_float+0x1b2>
 8050e92:	2900      	cmp	r1, #0
 8050e94:	6863      	ldr	r3, [r4, #4]
 8050e96:	dd0c      	ble.n	8050eb2 <_printf_float+0x19e>
 8050e98:	6121      	str	r1, [r4, #16]
 8050e9a:	b913      	cbnz	r3, 8050ea2 <_printf_float+0x18e>
 8050e9c:	6822      	ldr	r2, [r4, #0]
 8050e9e:	07d2      	lsls	r2, r2, #31
 8050ea0:	d502      	bpl.n	8050ea8 <_printf_float+0x194>
 8050ea2:	3301      	adds	r3, #1
 8050ea4:	440b      	add	r3, r1
 8050ea6:	6123      	str	r3, [r4, #16]
 8050ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050eaa:	65a3      	str	r3, [r4, #88]	; 0x58
 8050eac:	f04f 0900 	mov.w	r9, #0
 8050eb0:	e7d9      	b.n	8050e66 <_printf_float+0x152>
 8050eb2:	b913      	cbnz	r3, 8050eba <_printf_float+0x1a6>
 8050eb4:	6822      	ldr	r2, [r4, #0]
 8050eb6:	07d0      	lsls	r0, r2, #31
 8050eb8:	d501      	bpl.n	8050ebe <_printf_float+0x1aa>
 8050eba:	3302      	adds	r3, #2
 8050ebc:	e7f3      	b.n	8050ea6 <_printf_float+0x192>
 8050ebe:	2301      	movs	r3, #1
 8050ec0:	e7f1      	b.n	8050ea6 <_printf_float+0x192>
 8050ec2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8050ec6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8050eca:	4293      	cmp	r3, r2
 8050ecc:	db05      	blt.n	8050eda <_printf_float+0x1c6>
 8050ece:	6822      	ldr	r2, [r4, #0]
 8050ed0:	6123      	str	r3, [r4, #16]
 8050ed2:	07d1      	lsls	r1, r2, #31
 8050ed4:	d5e8      	bpl.n	8050ea8 <_printf_float+0x194>
 8050ed6:	3301      	adds	r3, #1
 8050ed8:	e7e5      	b.n	8050ea6 <_printf_float+0x192>
 8050eda:	2b00      	cmp	r3, #0
 8050edc:	bfd4      	ite	le
 8050ede:	f1c3 0302 	rsble	r3, r3, #2
 8050ee2:	2301      	movgt	r3, #1
 8050ee4:	4413      	add	r3, r2
 8050ee6:	e7de      	b.n	8050ea6 <_printf_float+0x192>
 8050ee8:	6823      	ldr	r3, [r4, #0]
 8050eea:	055a      	lsls	r2, r3, #21
 8050eec:	d407      	bmi.n	8050efe <_printf_float+0x1ea>
 8050eee:	6923      	ldr	r3, [r4, #16]
 8050ef0:	4642      	mov	r2, r8
 8050ef2:	4631      	mov	r1, r6
 8050ef4:	4628      	mov	r0, r5
 8050ef6:	47b8      	blx	r7
 8050ef8:	3001      	adds	r0, #1
 8050efa:	d12b      	bne.n	8050f54 <_printf_float+0x240>
 8050efc:	e767      	b.n	8050dce <_printf_float+0xba>
 8050efe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8050f02:	f240 80dc 	bls.w	80510be <_printf_float+0x3aa>
 8050f06:	2200      	movs	r2, #0
 8050f08:	2300      	movs	r3, #0
 8050f0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8050f0e:	f7ef ff13 	bl	8040d38 <__aeabi_dcmpeq>
 8050f12:	2800      	cmp	r0, #0
 8050f14:	d033      	beq.n	8050f7e <_printf_float+0x26a>
 8050f16:	2301      	movs	r3, #1
 8050f18:	4a41      	ldr	r2, [pc, #260]	; (8051020 <_printf_float+0x30c>)
 8050f1a:	4631      	mov	r1, r6
 8050f1c:	4628      	mov	r0, r5
 8050f1e:	47b8      	blx	r7
 8050f20:	3001      	adds	r0, #1
 8050f22:	f43f af54 	beq.w	8050dce <_printf_float+0xba>
 8050f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8050f2a:	429a      	cmp	r2, r3
 8050f2c:	db02      	blt.n	8050f34 <_printf_float+0x220>
 8050f2e:	6823      	ldr	r3, [r4, #0]
 8050f30:	07d8      	lsls	r0, r3, #31
 8050f32:	d50f      	bpl.n	8050f54 <_printf_float+0x240>
 8050f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8050f38:	4631      	mov	r1, r6
 8050f3a:	4628      	mov	r0, r5
 8050f3c:	47b8      	blx	r7
 8050f3e:	3001      	adds	r0, #1
 8050f40:	f43f af45 	beq.w	8050dce <_printf_float+0xba>
 8050f44:	f04f 0800 	mov.w	r8, #0
 8050f48:	f104 091a 	add.w	r9, r4, #26
 8050f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8050f4e:	3b01      	subs	r3, #1
 8050f50:	4543      	cmp	r3, r8
 8050f52:	dc09      	bgt.n	8050f68 <_printf_float+0x254>
 8050f54:	6823      	ldr	r3, [r4, #0]
 8050f56:	079b      	lsls	r3, r3, #30
 8050f58:	f100 8103 	bmi.w	8051162 <_printf_float+0x44e>
 8050f5c:	68e0      	ldr	r0, [r4, #12]
 8050f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8050f60:	4298      	cmp	r0, r3
 8050f62:	bfb8      	it	lt
 8050f64:	4618      	movlt	r0, r3
 8050f66:	e734      	b.n	8050dd2 <_printf_float+0xbe>
 8050f68:	2301      	movs	r3, #1
 8050f6a:	464a      	mov	r2, r9
 8050f6c:	4631      	mov	r1, r6
 8050f6e:	4628      	mov	r0, r5
 8050f70:	47b8      	blx	r7
 8050f72:	3001      	adds	r0, #1
 8050f74:	f43f af2b 	beq.w	8050dce <_printf_float+0xba>
 8050f78:	f108 0801 	add.w	r8, r8, #1
 8050f7c:	e7e6      	b.n	8050f4c <_printf_float+0x238>
 8050f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050f80:	2b00      	cmp	r3, #0
 8050f82:	dc2b      	bgt.n	8050fdc <_printf_float+0x2c8>
 8050f84:	2301      	movs	r3, #1
 8050f86:	4a26      	ldr	r2, [pc, #152]	; (8051020 <_printf_float+0x30c>)
 8050f88:	4631      	mov	r1, r6
 8050f8a:	4628      	mov	r0, r5
 8050f8c:	47b8      	blx	r7
 8050f8e:	3001      	adds	r0, #1
 8050f90:	f43f af1d 	beq.w	8050dce <_printf_float+0xba>
 8050f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050f96:	b923      	cbnz	r3, 8050fa2 <_printf_float+0x28e>
 8050f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8050f9a:	b913      	cbnz	r3, 8050fa2 <_printf_float+0x28e>
 8050f9c:	6823      	ldr	r3, [r4, #0]
 8050f9e:	07d9      	lsls	r1, r3, #31
 8050fa0:	d5d8      	bpl.n	8050f54 <_printf_float+0x240>
 8050fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8050fa6:	4631      	mov	r1, r6
 8050fa8:	4628      	mov	r0, r5
 8050faa:	47b8      	blx	r7
 8050fac:	3001      	adds	r0, #1
 8050fae:	f43f af0e 	beq.w	8050dce <_printf_float+0xba>
 8050fb2:	f04f 0900 	mov.w	r9, #0
 8050fb6:	f104 0a1a 	add.w	sl, r4, #26
 8050fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8050fbc:	425b      	negs	r3, r3
 8050fbe:	454b      	cmp	r3, r9
 8050fc0:	dc01      	bgt.n	8050fc6 <_printf_float+0x2b2>
 8050fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8050fc4:	e794      	b.n	8050ef0 <_printf_float+0x1dc>
 8050fc6:	2301      	movs	r3, #1
 8050fc8:	4652      	mov	r2, sl
 8050fca:	4631      	mov	r1, r6
 8050fcc:	4628      	mov	r0, r5
 8050fce:	47b8      	blx	r7
 8050fd0:	3001      	adds	r0, #1
 8050fd2:	f43f aefc 	beq.w	8050dce <_printf_float+0xba>
 8050fd6:	f109 0901 	add.w	r9, r9, #1
 8050fda:	e7ee      	b.n	8050fba <_printf_float+0x2a6>
 8050fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8050fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8050fe0:	429a      	cmp	r2, r3
 8050fe2:	bfa8      	it	ge
 8050fe4:	461a      	movge	r2, r3
 8050fe6:	2a00      	cmp	r2, #0
 8050fe8:	4691      	mov	r9, r2
 8050fea:	dd07      	ble.n	8050ffc <_printf_float+0x2e8>
 8050fec:	4613      	mov	r3, r2
 8050fee:	4631      	mov	r1, r6
 8050ff0:	4642      	mov	r2, r8
 8050ff2:	4628      	mov	r0, r5
 8050ff4:	47b8      	blx	r7
 8050ff6:	3001      	adds	r0, #1
 8050ff8:	f43f aee9 	beq.w	8050dce <_printf_float+0xba>
 8050ffc:	f104 031a 	add.w	r3, r4, #26
 8051000:	f04f 0b00 	mov.w	fp, #0
 8051004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8051008:	9306      	str	r3, [sp, #24]
 805100a:	e015      	b.n	8051038 <_printf_float+0x324>
 805100c:	7fefffff 	.word	0x7fefffff
 8051010:	08054f48 	.word	0x08054f48
 8051014:	08054f44 	.word	0x08054f44
 8051018:	08054f50 	.word	0x08054f50
 805101c:	08054f4c 	.word	0x08054f4c
 8051020:	080542df 	.word	0x080542df
 8051024:	2301      	movs	r3, #1
 8051026:	9a06      	ldr	r2, [sp, #24]
 8051028:	4631      	mov	r1, r6
 805102a:	4628      	mov	r0, r5
 805102c:	47b8      	blx	r7
 805102e:	3001      	adds	r0, #1
 8051030:	f43f aecd 	beq.w	8050dce <_printf_float+0xba>
 8051034:	f10b 0b01 	add.w	fp, fp, #1
 8051038:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 805103c:	ebaa 0309 	sub.w	r3, sl, r9
 8051040:	455b      	cmp	r3, fp
 8051042:	dcef      	bgt.n	8051024 <_printf_float+0x310>
 8051044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8051048:	429a      	cmp	r2, r3
 805104a:	44d0      	add	r8, sl
 805104c:	db15      	blt.n	805107a <_printf_float+0x366>
 805104e:	6823      	ldr	r3, [r4, #0]
 8051050:	07da      	lsls	r2, r3, #31
 8051052:	d412      	bmi.n	805107a <_printf_float+0x366>
 8051054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8051056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8051058:	eba3 020a 	sub.w	r2, r3, sl
 805105c:	eba3 0a01 	sub.w	sl, r3, r1
 8051060:	4592      	cmp	sl, r2
 8051062:	bfa8      	it	ge
 8051064:	4692      	movge	sl, r2
 8051066:	f1ba 0f00 	cmp.w	sl, #0
 805106a:	dc0e      	bgt.n	805108a <_printf_float+0x376>
 805106c:	f04f 0800 	mov.w	r8, #0
 8051070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8051074:	f104 091a 	add.w	r9, r4, #26
 8051078:	e019      	b.n	80510ae <_printf_float+0x39a>
 805107a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 805107e:	4631      	mov	r1, r6
 8051080:	4628      	mov	r0, r5
 8051082:	47b8      	blx	r7
 8051084:	3001      	adds	r0, #1
 8051086:	d1e5      	bne.n	8051054 <_printf_float+0x340>
 8051088:	e6a1      	b.n	8050dce <_printf_float+0xba>
 805108a:	4653      	mov	r3, sl
 805108c:	4642      	mov	r2, r8
 805108e:	4631      	mov	r1, r6
 8051090:	4628      	mov	r0, r5
 8051092:	47b8      	blx	r7
 8051094:	3001      	adds	r0, #1
 8051096:	d1e9      	bne.n	805106c <_printf_float+0x358>
 8051098:	e699      	b.n	8050dce <_printf_float+0xba>
 805109a:	2301      	movs	r3, #1
 805109c:	464a      	mov	r2, r9
 805109e:	4631      	mov	r1, r6
 80510a0:	4628      	mov	r0, r5
 80510a2:	47b8      	blx	r7
 80510a4:	3001      	adds	r0, #1
 80510a6:	f43f ae92 	beq.w	8050dce <_printf_float+0xba>
 80510aa:	f108 0801 	add.w	r8, r8, #1
 80510ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80510b2:	1a9b      	subs	r3, r3, r2
 80510b4:	eba3 030a 	sub.w	r3, r3, sl
 80510b8:	4543      	cmp	r3, r8
 80510ba:	dcee      	bgt.n	805109a <_printf_float+0x386>
 80510bc:	e74a      	b.n	8050f54 <_printf_float+0x240>
 80510be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80510c0:	2a01      	cmp	r2, #1
 80510c2:	dc01      	bgt.n	80510c8 <_printf_float+0x3b4>
 80510c4:	07db      	lsls	r3, r3, #31
 80510c6:	d53a      	bpl.n	805113e <_printf_float+0x42a>
 80510c8:	2301      	movs	r3, #1
 80510ca:	4642      	mov	r2, r8
 80510cc:	4631      	mov	r1, r6
 80510ce:	4628      	mov	r0, r5
 80510d0:	47b8      	blx	r7
 80510d2:	3001      	adds	r0, #1
 80510d4:	f43f ae7b 	beq.w	8050dce <_printf_float+0xba>
 80510d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80510dc:	4631      	mov	r1, r6
 80510de:	4628      	mov	r0, r5
 80510e0:	47b8      	blx	r7
 80510e2:	3001      	adds	r0, #1
 80510e4:	f108 0801 	add.w	r8, r8, #1
 80510e8:	f43f ae71 	beq.w	8050dce <_printf_float+0xba>
 80510ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80510ee:	2200      	movs	r2, #0
 80510f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80510f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80510f8:	2300      	movs	r3, #0
 80510fa:	f7ef fe1d 	bl	8040d38 <__aeabi_dcmpeq>
 80510fe:	b9c8      	cbnz	r0, 8051134 <_printf_float+0x420>
 8051100:	4653      	mov	r3, sl
 8051102:	4642      	mov	r2, r8
 8051104:	4631      	mov	r1, r6
 8051106:	4628      	mov	r0, r5
 8051108:	47b8      	blx	r7
 805110a:	3001      	adds	r0, #1
 805110c:	d10e      	bne.n	805112c <_printf_float+0x418>
 805110e:	e65e      	b.n	8050dce <_printf_float+0xba>
 8051110:	2301      	movs	r3, #1
 8051112:	4652      	mov	r2, sl
 8051114:	4631      	mov	r1, r6
 8051116:	4628      	mov	r0, r5
 8051118:	47b8      	blx	r7
 805111a:	3001      	adds	r0, #1
 805111c:	f43f ae57 	beq.w	8050dce <_printf_float+0xba>
 8051120:	f108 0801 	add.w	r8, r8, #1
 8051124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8051126:	3b01      	subs	r3, #1
 8051128:	4543      	cmp	r3, r8
 805112a:	dcf1      	bgt.n	8051110 <_printf_float+0x3fc>
 805112c:	464b      	mov	r3, r9
 805112e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8051132:	e6de      	b.n	8050ef2 <_printf_float+0x1de>
 8051134:	f04f 0800 	mov.w	r8, #0
 8051138:	f104 0a1a 	add.w	sl, r4, #26
 805113c:	e7f2      	b.n	8051124 <_printf_float+0x410>
 805113e:	2301      	movs	r3, #1
 8051140:	e7df      	b.n	8051102 <_printf_float+0x3ee>
 8051142:	2301      	movs	r3, #1
 8051144:	464a      	mov	r2, r9
 8051146:	4631      	mov	r1, r6
 8051148:	4628      	mov	r0, r5
 805114a:	47b8      	blx	r7
 805114c:	3001      	adds	r0, #1
 805114e:	f43f ae3e 	beq.w	8050dce <_printf_float+0xba>
 8051152:	f108 0801 	add.w	r8, r8, #1
 8051156:	68e3      	ldr	r3, [r4, #12]
 8051158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 805115a:	1a9b      	subs	r3, r3, r2
 805115c:	4543      	cmp	r3, r8
 805115e:	dcf0      	bgt.n	8051142 <_printf_float+0x42e>
 8051160:	e6fc      	b.n	8050f5c <_printf_float+0x248>
 8051162:	f04f 0800 	mov.w	r8, #0
 8051166:	f104 0919 	add.w	r9, r4, #25
 805116a:	e7f4      	b.n	8051156 <_printf_float+0x442>
 805116c:	2900      	cmp	r1, #0
 805116e:	f43f ae8b 	beq.w	8050e88 <_printf_float+0x174>
 8051172:	2300      	movs	r3, #0
 8051174:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8051178:	ab09      	add	r3, sp, #36	; 0x24
 805117a:	9300      	str	r3, [sp, #0]
 805117c:	ec49 8b10 	vmov	d0, r8, r9
 8051180:	6022      	str	r2, [r4, #0]
 8051182:	f8cd a004 	str.w	sl, [sp, #4]
 8051186:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 805118a:	4628      	mov	r0, r5
 805118c:	f7ff fd2d 	bl	8050bea <__cvt>
 8051190:	4680      	mov	r8, r0
 8051192:	e648      	b.n	8050e26 <_printf_float+0x112>

08051194 <_printf_common>:
 8051194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8051198:	4691      	mov	r9, r2
 805119a:	461f      	mov	r7, r3
 805119c:	688a      	ldr	r2, [r1, #8]
 805119e:	690b      	ldr	r3, [r1, #16]
 80511a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80511a4:	4293      	cmp	r3, r2
 80511a6:	bfb8      	it	lt
 80511a8:	4613      	movlt	r3, r2
 80511aa:	f8c9 3000 	str.w	r3, [r9]
 80511ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80511b2:	4606      	mov	r6, r0
 80511b4:	460c      	mov	r4, r1
 80511b6:	b112      	cbz	r2, 80511be <_printf_common+0x2a>
 80511b8:	3301      	adds	r3, #1
 80511ba:	f8c9 3000 	str.w	r3, [r9]
 80511be:	6823      	ldr	r3, [r4, #0]
 80511c0:	0699      	lsls	r1, r3, #26
 80511c2:	bf42      	ittt	mi
 80511c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80511c8:	3302      	addmi	r3, #2
 80511ca:	f8c9 3000 	strmi.w	r3, [r9]
 80511ce:	6825      	ldr	r5, [r4, #0]
 80511d0:	f015 0506 	ands.w	r5, r5, #6
 80511d4:	d107      	bne.n	80511e6 <_printf_common+0x52>
 80511d6:	f104 0a19 	add.w	sl, r4, #25
 80511da:	68e3      	ldr	r3, [r4, #12]
 80511dc:	f8d9 2000 	ldr.w	r2, [r9]
 80511e0:	1a9b      	subs	r3, r3, r2
 80511e2:	42ab      	cmp	r3, r5
 80511e4:	dc28      	bgt.n	8051238 <_printf_common+0xa4>
 80511e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80511ea:	6822      	ldr	r2, [r4, #0]
 80511ec:	3300      	adds	r3, #0
 80511ee:	bf18      	it	ne
 80511f0:	2301      	movne	r3, #1
 80511f2:	0692      	lsls	r2, r2, #26
 80511f4:	d42d      	bmi.n	8051252 <_printf_common+0xbe>
 80511f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80511fa:	4639      	mov	r1, r7
 80511fc:	4630      	mov	r0, r6
 80511fe:	47c0      	blx	r8
 8051200:	3001      	adds	r0, #1
 8051202:	d020      	beq.n	8051246 <_printf_common+0xb2>
 8051204:	6823      	ldr	r3, [r4, #0]
 8051206:	68e5      	ldr	r5, [r4, #12]
 8051208:	f8d9 2000 	ldr.w	r2, [r9]
 805120c:	f003 0306 	and.w	r3, r3, #6
 8051210:	2b04      	cmp	r3, #4
 8051212:	bf08      	it	eq
 8051214:	1aad      	subeq	r5, r5, r2
 8051216:	68a3      	ldr	r3, [r4, #8]
 8051218:	6922      	ldr	r2, [r4, #16]
 805121a:	bf0c      	ite	eq
 805121c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8051220:	2500      	movne	r5, #0
 8051222:	4293      	cmp	r3, r2
 8051224:	bfc4      	itt	gt
 8051226:	1a9b      	subgt	r3, r3, r2
 8051228:	18ed      	addgt	r5, r5, r3
 805122a:	f04f 0900 	mov.w	r9, #0
 805122e:	341a      	adds	r4, #26
 8051230:	454d      	cmp	r5, r9
 8051232:	d11a      	bne.n	805126a <_printf_common+0xd6>
 8051234:	2000      	movs	r0, #0
 8051236:	e008      	b.n	805124a <_printf_common+0xb6>
 8051238:	2301      	movs	r3, #1
 805123a:	4652      	mov	r2, sl
 805123c:	4639      	mov	r1, r7
 805123e:	4630      	mov	r0, r6
 8051240:	47c0      	blx	r8
 8051242:	3001      	adds	r0, #1
 8051244:	d103      	bne.n	805124e <_printf_common+0xba>
 8051246:	f04f 30ff 	mov.w	r0, #4294967295
 805124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805124e:	3501      	adds	r5, #1
 8051250:	e7c3      	b.n	80511da <_printf_common+0x46>
 8051252:	18e1      	adds	r1, r4, r3
 8051254:	1c5a      	adds	r2, r3, #1
 8051256:	2030      	movs	r0, #48	; 0x30
 8051258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 805125c:	4422      	add	r2, r4
 805125e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8051262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8051266:	3302      	adds	r3, #2
 8051268:	e7c5      	b.n	80511f6 <_printf_common+0x62>
 805126a:	2301      	movs	r3, #1
 805126c:	4622      	mov	r2, r4
 805126e:	4639      	mov	r1, r7
 8051270:	4630      	mov	r0, r6
 8051272:	47c0      	blx	r8
 8051274:	3001      	adds	r0, #1
 8051276:	d0e6      	beq.n	8051246 <_printf_common+0xb2>
 8051278:	f109 0901 	add.w	r9, r9, #1
 805127c:	e7d8      	b.n	8051230 <_printf_common+0x9c>
	...

08051280 <_printf_i>:
 8051280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8051284:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8051288:	460c      	mov	r4, r1
 805128a:	7e09      	ldrb	r1, [r1, #24]
 805128c:	b085      	sub	sp, #20
 805128e:	296e      	cmp	r1, #110	; 0x6e
 8051290:	4617      	mov	r7, r2
 8051292:	4606      	mov	r6, r0
 8051294:	4698      	mov	r8, r3
 8051296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8051298:	f000 80b3 	beq.w	8051402 <_printf_i+0x182>
 805129c:	d822      	bhi.n	80512e4 <_printf_i+0x64>
 805129e:	2963      	cmp	r1, #99	; 0x63
 80512a0:	d036      	beq.n	8051310 <_printf_i+0x90>
 80512a2:	d80a      	bhi.n	80512ba <_printf_i+0x3a>
 80512a4:	2900      	cmp	r1, #0
 80512a6:	f000 80b9 	beq.w	805141c <_printf_i+0x19c>
 80512aa:	2958      	cmp	r1, #88	; 0x58
 80512ac:	f000 8083 	beq.w	80513b6 <_printf_i+0x136>
 80512b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80512b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80512b8:	e032      	b.n	8051320 <_printf_i+0xa0>
 80512ba:	2964      	cmp	r1, #100	; 0x64
 80512bc:	d001      	beq.n	80512c2 <_printf_i+0x42>
 80512be:	2969      	cmp	r1, #105	; 0x69
 80512c0:	d1f6      	bne.n	80512b0 <_printf_i+0x30>
 80512c2:	6820      	ldr	r0, [r4, #0]
 80512c4:	6813      	ldr	r3, [r2, #0]
 80512c6:	0605      	lsls	r5, r0, #24
 80512c8:	f103 0104 	add.w	r1, r3, #4
 80512cc:	d52a      	bpl.n	8051324 <_printf_i+0xa4>
 80512ce:	681b      	ldr	r3, [r3, #0]
 80512d0:	6011      	str	r1, [r2, #0]
 80512d2:	2b00      	cmp	r3, #0
 80512d4:	da03      	bge.n	80512de <_printf_i+0x5e>
 80512d6:	222d      	movs	r2, #45	; 0x2d
 80512d8:	425b      	negs	r3, r3
 80512da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80512de:	486f      	ldr	r0, [pc, #444]	; (805149c <_printf_i+0x21c>)
 80512e0:	220a      	movs	r2, #10
 80512e2:	e039      	b.n	8051358 <_printf_i+0xd8>
 80512e4:	2973      	cmp	r1, #115	; 0x73
 80512e6:	f000 809d 	beq.w	8051424 <_printf_i+0x1a4>
 80512ea:	d808      	bhi.n	80512fe <_printf_i+0x7e>
 80512ec:	296f      	cmp	r1, #111	; 0x6f
 80512ee:	d020      	beq.n	8051332 <_printf_i+0xb2>
 80512f0:	2970      	cmp	r1, #112	; 0x70
 80512f2:	d1dd      	bne.n	80512b0 <_printf_i+0x30>
 80512f4:	6823      	ldr	r3, [r4, #0]
 80512f6:	f043 0320 	orr.w	r3, r3, #32
 80512fa:	6023      	str	r3, [r4, #0]
 80512fc:	e003      	b.n	8051306 <_printf_i+0x86>
 80512fe:	2975      	cmp	r1, #117	; 0x75
 8051300:	d017      	beq.n	8051332 <_printf_i+0xb2>
 8051302:	2978      	cmp	r1, #120	; 0x78
 8051304:	d1d4      	bne.n	80512b0 <_printf_i+0x30>
 8051306:	2378      	movs	r3, #120	; 0x78
 8051308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 805130c:	4864      	ldr	r0, [pc, #400]	; (80514a0 <_printf_i+0x220>)
 805130e:	e055      	b.n	80513bc <_printf_i+0x13c>
 8051310:	6813      	ldr	r3, [r2, #0]
 8051312:	1d19      	adds	r1, r3, #4
 8051314:	681b      	ldr	r3, [r3, #0]
 8051316:	6011      	str	r1, [r2, #0]
 8051318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805131c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8051320:	2301      	movs	r3, #1
 8051322:	e08c      	b.n	805143e <_printf_i+0x1be>
 8051324:	681b      	ldr	r3, [r3, #0]
 8051326:	6011      	str	r1, [r2, #0]
 8051328:	f010 0f40 	tst.w	r0, #64	; 0x40
 805132c:	bf18      	it	ne
 805132e:	b21b      	sxthne	r3, r3
 8051330:	e7cf      	b.n	80512d2 <_printf_i+0x52>
 8051332:	6813      	ldr	r3, [r2, #0]
 8051334:	6825      	ldr	r5, [r4, #0]
 8051336:	1d18      	adds	r0, r3, #4
 8051338:	6010      	str	r0, [r2, #0]
 805133a:	0628      	lsls	r0, r5, #24
 805133c:	d501      	bpl.n	8051342 <_printf_i+0xc2>
 805133e:	681b      	ldr	r3, [r3, #0]
 8051340:	e002      	b.n	8051348 <_printf_i+0xc8>
 8051342:	0668      	lsls	r0, r5, #25
 8051344:	d5fb      	bpl.n	805133e <_printf_i+0xbe>
 8051346:	881b      	ldrh	r3, [r3, #0]
 8051348:	4854      	ldr	r0, [pc, #336]	; (805149c <_printf_i+0x21c>)
 805134a:	296f      	cmp	r1, #111	; 0x6f
 805134c:	bf14      	ite	ne
 805134e:	220a      	movne	r2, #10
 8051350:	2208      	moveq	r2, #8
 8051352:	2100      	movs	r1, #0
 8051354:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8051358:	6865      	ldr	r5, [r4, #4]
 805135a:	60a5      	str	r5, [r4, #8]
 805135c:	2d00      	cmp	r5, #0
 805135e:	f2c0 8095 	blt.w	805148c <_printf_i+0x20c>
 8051362:	6821      	ldr	r1, [r4, #0]
 8051364:	f021 0104 	bic.w	r1, r1, #4
 8051368:	6021      	str	r1, [r4, #0]
 805136a:	2b00      	cmp	r3, #0
 805136c:	d13d      	bne.n	80513ea <_printf_i+0x16a>
 805136e:	2d00      	cmp	r5, #0
 8051370:	f040 808e 	bne.w	8051490 <_printf_i+0x210>
 8051374:	4665      	mov	r5, ip
 8051376:	2a08      	cmp	r2, #8
 8051378:	d10b      	bne.n	8051392 <_printf_i+0x112>
 805137a:	6823      	ldr	r3, [r4, #0]
 805137c:	07db      	lsls	r3, r3, #31
 805137e:	d508      	bpl.n	8051392 <_printf_i+0x112>
 8051380:	6923      	ldr	r3, [r4, #16]
 8051382:	6862      	ldr	r2, [r4, #4]
 8051384:	429a      	cmp	r2, r3
 8051386:	bfde      	ittt	le
 8051388:	2330      	movle	r3, #48	; 0x30
 805138a:	f805 3c01 	strble.w	r3, [r5, #-1]
 805138e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8051392:	ebac 0305 	sub.w	r3, ip, r5
 8051396:	6123      	str	r3, [r4, #16]
 8051398:	f8cd 8000 	str.w	r8, [sp]
 805139c:	463b      	mov	r3, r7
 805139e:	aa03      	add	r2, sp, #12
 80513a0:	4621      	mov	r1, r4
 80513a2:	4630      	mov	r0, r6
 80513a4:	f7ff fef6 	bl	8051194 <_printf_common>
 80513a8:	3001      	adds	r0, #1
 80513aa:	d14d      	bne.n	8051448 <_printf_i+0x1c8>
 80513ac:	f04f 30ff 	mov.w	r0, #4294967295
 80513b0:	b005      	add	sp, #20
 80513b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80513b6:	4839      	ldr	r0, [pc, #228]	; (805149c <_printf_i+0x21c>)
 80513b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80513bc:	6813      	ldr	r3, [r2, #0]
 80513be:	6821      	ldr	r1, [r4, #0]
 80513c0:	1d1d      	adds	r5, r3, #4
 80513c2:	681b      	ldr	r3, [r3, #0]
 80513c4:	6015      	str	r5, [r2, #0]
 80513c6:	060a      	lsls	r2, r1, #24
 80513c8:	d50b      	bpl.n	80513e2 <_printf_i+0x162>
 80513ca:	07ca      	lsls	r2, r1, #31
 80513cc:	bf44      	itt	mi
 80513ce:	f041 0120 	orrmi.w	r1, r1, #32
 80513d2:	6021      	strmi	r1, [r4, #0]
 80513d4:	b91b      	cbnz	r3, 80513de <_printf_i+0x15e>
 80513d6:	6822      	ldr	r2, [r4, #0]
 80513d8:	f022 0220 	bic.w	r2, r2, #32
 80513dc:	6022      	str	r2, [r4, #0]
 80513de:	2210      	movs	r2, #16
 80513e0:	e7b7      	b.n	8051352 <_printf_i+0xd2>
 80513e2:	064d      	lsls	r5, r1, #25
 80513e4:	bf48      	it	mi
 80513e6:	b29b      	uxthmi	r3, r3
 80513e8:	e7ef      	b.n	80513ca <_printf_i+0x14a>
 80513ea:	4665      	mov	r5, ip
 80513ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80513f0:	fb02 3311 	mls	r3, r2, r1, r3
 80513f4:	5cc3      	ldrb	r3, [r0, r3]
 80513f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80513fa:	460b      	mov	r3, r1
 80513fc:	2900      	cmp	r1, #0
 80513fe:	d1f5      	bne.n	80513ec <_printf_i+0x16c>
 8051400:	e7b9      	b.n	8051376 <_printf_i+0xf6>
 8051402:	6813      	ldr	r3, [r2, #0]
 8051404:	6825      	ldr	r5, [r4, #0]
 8051406:	6961      	ldr	r1, [r4, #20]
 8051408:	1d18      	adds	r0, r3, #4
 805140a:	6010      	str	r0, [r2, #0]
 805140c:	0628      	lsls	r0, r5, #24
 805140e:	681b      	ldr	r3, [r3, #0]
 8051410:	d501      	bpl.n	8051416 <_printf_i+0x196>
 8051412:	6019      	str	r1, [r3, #0]
 8051414:	e002      	b.n	805141c <_printf_i+0x19c>
 8051416:	066a      	lsls	r2, r5, #25
 8051418:	d5fb      	bpl.n	8051412 <_printf_i+0x192>
 805141a:	8019      	strh	r1, [r3, #0]
 805141c:	2300      	movs	r3, #0
 805141e:	6123      	str	r3, [r4, #16]
 8051420:	4665      	mov	r5, ip
 8051422:	e7b9      	b.n	8051398 <_printf_i+0x118>
 8051424:	6813      	ldr	r3, [r2, #0]
 8051426:	1d19      	adds	r1, r3, #4
 8051428:	6011      	str	r1, [r2, #0]
 805142a:	681d      	ldr	r5, [r3, #0]
 805142c:	6862      	ldr	r2, [r4, #4]
 805142e:	2100      	movs	r1, #0
 8051430:	4628      	mov	r0, r5
 8051432:	f7ef f80d 	bl	8040450 <memchr>
 8051436:	b108      	cbz	r0, 805143c <_printf_i+0x1bc>
 8051438:	1b40      	subs	r0, r0, r5
 805143a:	6060      	str	r0, [r4, #4]
 805143c:	6863      	ldr	r3, [r4, #4]
 805143e:	6123      	str	r3, [r4, #16]
 8051440:	2300      	movs	r3, #0
 8051442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8051446:	e7a7      	b.n	8051398 <_printf_i+0x118>
 8051448:	6923      	ldr	r3, [r4, #16]
 805144a:	462a      	mov	r2, r5
 805144c:	4639      	mov	r1, r7
 805144e:	4630      	mov	r0, r6
 8051450:	47c0      	blx	r8
 8051452:	3001      	adds	r0, #1
 8051454:	d0aa      	beq.n	80513ac <_printf_i+0x12c>
 8051456:	6823      	ldr	r3, [r4, #0]
 8051458:	079b      	lsls	r3, r3, #30
 805145a:	d413      	bmi.n	8051484 <_printf_i+0x204>
 805145c:	68e0      	ldr	r0, [r4, #12]
 805145e:	9b03      	ldr	r3, [sp, #12]
 8051460:	4298      	cmp	r0, r3
 8051462:	bfb8      	it	lt
 8051464:	4618      	movlt	r0, r3
 8051466:	e7a3      	b.n	80513b0 <_printf_i+0x130>
 8051468:	2301      	movs	r3, #1
 805146a:	464a      	mov	r2, r9
 805146c:	4639      	mov	r1, r7
 805146e:	4630      	mov	r0, r6
 8051470:	47c0      	blx	r8
 8051472:	3001      	adds	r0, #1
 8051474:	d09a      	beq.n	80513ac <_printf_i+0x12c>
 8051476:	3501      	adds	r5, #1
 8051478:	68e3      	ldr	r3, [r4, #12]
 805147a:	9a03      	ldr	r2, [sp, #12]
 805147c:	1a9b      	subs	r3, r3, r2
 805147e:	42ab      	cmp	r3, r5
 8051480:	dcf2      	bgt.n	8051468 <_printf_i+0x1e8>
 8051482:	e7eb      	b.n	805145c <_printf_i+0x1dc>
 8051484:	2500      	movs	r5, #0
 8051486:	f104 0919 	add.w	r9, r4, #25
 805148a:	e7f5      	b.n	8051478 <_printf_i+0x1f8>
 805148c:	2b00      	cmp	r3, #0
 805148e:	d1ac      	bne.n	80513ea <_printf_i+0x16a>
 8051490:	7803      	ldrb	r3, [r0, #0]
 8051492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8051496:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805149a:	e76c      	b.n	8051376 <_printf_i+0xf6>
 805149c:	08054f54 	.word	0x08054f54
 80514a0:	08054f65 	.word	0x08054f65

080514a4 <iprintf>:
 80514a4:	b40f      	push	{r0, r1, r2, r3}
 80514a6:	4b0a      	ldr	r3, [pc, #40]	; (80514d0 <iprintf+0x2c>)
 80514a8:	b513      	push	{r0, r1, r4, lr}
 80514aa:	681c      	ldr	r4, [r3, #0]
 80514ac:	b124      	cbz	r4, 80514b8 <iprintf+0x14>
 80514ae:	69a3      	ldr	r3, [r4, #24]
 80514b0:	b913      	cbnz	r3, 80514b8 <iprintf+0x14>
 80514b2:	4620      	mov	r0, r4
 80514b4:	f001 fa18 	bl	80528e8 <__sinit>
 80514b8:	ab05      	add	r3, sp, #20
 80514ba:	9a04      	ldr	r2, [sp, #16]
 80514bc:	68a1      	ldr	r1, [r4, #8]
 80514be:	9301      	str	r3, [sp, #4]
 80514c0:	4620      	mov	r0, r4
 80514c2:	f002 f839 	bl	8053538 <_vfiprintf_r>
 80514c6:	b002      	add	sp, #8
 80514c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80514cc:	b004      	add	sp, #16
 80514ce:	4770      	bx	lr
 80514d0:	20001210 	.word	0x20001210

080514d4 <_puts_r>:
 80514d4:	b570      	push	{r4, r5, r6, lr}
 80514d6:	460e      	mov	r6, r1
 80514d8:	4605      	mov	r5, r0
 80514da:	b118      	cbz	r0, 80514e4 <_puts_r+0x10>
 80514dc:	6983      	ldr	r3, [r0, #24]
 80514de:	b90b      	cbnz	r3, 80514e4 <_puts_r+0x10>
 80514e0:	f001 fa02 	bl	80528e8 <__sinit>
 80514e4:	69ab      	ldr	r3, [r5, #24]
 80514e6:	68ac      	ldr	r4, [r5, #8]
 80514e8:	b913      	cbnz	r3, 80514f0 <_puts_r+0x1c>
 80514ea:	4628      	mov	r0, r5
 80514ec:	f001 f9fc 	bl	80528e8 <__sinit>
 80514f0:	4b23      	ldr	r3, [pc, #140]	; (8051580 <_puts_r+0xac>)
 80514f2:	429c      	cmp	r4, r3
 80514f4:	d117      	bne.n	8051526 <_puts_r+0x52>
 80514f6:	686c      	ldr	r4, [r5, #4]
 80514f8:	89a3      	ldrh	r3, [r4, #12]
 80514fa:	071b      	lsls	r3, r3, #28
 80514fc:	d51d      	bpl.n	805153a <_puts_r+0x66>
 80514fe:	6923      	ldr	r3, [r4, #16]
 8051500:	b1db      	cbz	r3, 805153a <_puts_r+0x66>
 8051502:	3e01      	subs	r6, #1
 8051504:	68a3      	ldr	r3, [r4, #8]
 8051506:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 805150a:	3b01      	subs	r3, #1
 805150c:	60a3      	str	r3, [r4, #8]
 805150e:	b9e9      	cbnz	r1, 805154c <_puts_r+0x78>
 8051510:	2b00      	cmp	r3, #0
 8051512:	da2e      	bge.n	8051572 <_puts_r+0x9e>
 8051514:	4622      	mov	r2, r4
 8051516:	210a      	movs	r1, #10
 8051518:	4628      	mov	r0, r5
 805151a:	f000 f9ef 	bl	80518fc <__swbuf_r>
 805151e:	3001      	adds	r0, #1
 8051520:	d011      	beq.n	8051546 <_puts_r+0x72>
 8051522:	200a      	movs	r0, #10
 8051524:	e011      	b.n	805154a <_puts_r+0x76>
 8051526:	4b17      	ldr	r3, [pc, #92]	; (8051584 <_puts_r+0xb0>)
 8051528:	429c      	cmp	r4, r3
 805152a:	d101      	bne.n	8051530 <_puts_r+0x5c>
 805152c:	68ac      	ldr	r4, [r5, #8]
 805152e:	e7e3      	b.n	80514f8 <_puts_r+0x24>
 8051530:	4b15      	ldr	r3, [pc, #84]	; (8051588 <_puts_r+0xb4>)
 8051532:	429c      	cmp	r4, r3
 8051534:	bf08      	it	eq
 8051536:	68ec      	ldreq	r4, [r5, #12]
 8051538:	e7de      	b.n	80514f8 <_puts_r+0x24>
 805153a:	4621      	mov	r1, r4
 805153c:	4628      	mov	r0, r5
 805153e:	f000 fa2f 	bl	80519a0 <__swsetup_r>
 8051542:	2800      	cmp	r0, #0
 8051544:	d0dd      	beq.n	8051502 <_puts_r+0x2e>
 8051546:	f04f 30ff 	mov.w	r0, #4294967295
 805154a:	bd70      	pop	{r4, r5, r6, pc}
 805154c:	2b00      	cmp	r3, #0
 805154e:	da04      	bge.n	805155a <_puts_r+0x86>
 8051550:	69a2      	ldr	r2, [r4, #24]
 8051552:	429a      	cmp	r2, r3
 8051554:	dc06      	bgt.n	8051564 <_puts_r+0x90>
 8051556:	290a      	cmp	r1, #10
 8051558:	d004      	beq.n	8051564 <_puts_r+0x90>
 805155a:	6823      	ldr	r3, [r4, #0]
 805155c:	1c5a      	adds	r2, r3, #1
 805155e:	6022      	str	r2, [r4, #0]
 8051560:	7019      	strb	r1, [r3, #0]
 8051562:	e7cf      	b.n	8051504 <_puts_r+0x30>
 8051564:	4622      	mov	r2, r4
 8051566:	4628      	mov	r0, r5
 8051568:	f000 f9c8 	bl	80518fc <__swbuf_r>
 805156c:	3001      	adds	r0, #1
 805156e:	d1c9      	bne.n	8051504 <_puts_r+0x30>
 8051570:	e7e9      	b.n	8051546 <_puts_r+0x72>
 8051572:	6823      	ldr	r3, [r4, #0]
 8051574:	200a      	movs	r0, #10
 8051576:	1c5a      	adds	r2, r3, #1
 8051578:	6022      	str	r2, [r4, #0]
 805157a:	7018      	strb	r0, [r3, #0]
 805157c:	e7e5      	b.n	805154a <_puts_r+0x76>
 805157e:	bf00      	nop
 8051580:	08054fa4 	.word	0x08054fa4
 8051584:	08054fc4 	.word	0x08054fc4
 8051588:	08054f84 	.word	0x08054f84

0805158c <puts>:
 805158c:	4b02      	ldr	r3, [pc, #8]	; (8051598 <puts+0xc>)
 805158e:	4601      	mov	r1, r0
 8051590:	6818      	ldr	r0, [r3, #0]
 8051592:	f7ff bf9f 	b.w	80514d4 <_puts_r>
 8051596:	bf00      	nop
 8051598:	20001210 	.word	0x20001210

0805159c <setvbuf>:
 805159c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80515a0:	461d      	mov	r5, r3
 80515a2:	4b51      	ldr	r3, [pc, #324]	; (80516e8 <setvbuf+0x14c>)
 80515a4:	681e      	ldr	r6, [r3, #0]
 80515a6:	4604      	mov	r4, r0
 80515a8:	460f      	mov	r7, r1
 80515aa:	4690      	mov	r8, r2
 80515ac:	b126      	cbz	r6, 80515b8 <setvbuf+0x1c>
 80515ae:	69b3      	ldr	r3, [r6, #24]
 80515b0:	b913      	cbnz	r3, 80515b8 <setvbuf+0x1c>
 80515b2:	4630      	mov	r0, r6
 80515b4:	f001 f998 	bl	80528e8 <__sinit>
 80515b8:	4b4c      	ldr	r3, [pc, #304]	; (80516ec <setvbuf+0x150>)
 80515ba:	429c      	cmp	r4, r3
 80515bc:	d152      	bne.n	8051664 <setvbuf+0xc8>
 80515be:	6874      	ldr	r4, [r6, #4]
 80515c0:	f1b8 0f02 	cmp.w	r8, #2
 80515c4:	d006      	beq.n	80515d4 <setvbuf+0x38>
 80515c6:	f1b8 0f01 	cmp.w	r8, #1
 80515ca:	f200 8089 	bhi.w	80516e0 <setvbuf+0x144>
 80515ce:	2d00      	cmp	r5, #0
 80515d0:	f2c0 8086 	blt.w	80516e0 <setvbuf+0x144>
 80515d4:	4621      	mov	r1, r4
 80515d6:	4630      	mov	r0, r6
 80515d8:	f001 f91c 	bl	8052814 <_fflush_r>
 80515dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80515de:	b141      	cbz	r1, 80515f2 <setvbuf+0x56>
 80515e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80515e4:	4299      	cmp	r1, r3
 80515e6:	d002      	beq.n	80515ee <setvbuf+0x52>
 80515e8:	4630      	mov	r0, r6
 80515ea:	f001 fd81 	bl	80530f0 <_free_r>
 80515ee:	2300      	movs	r3, #0
 80515f0:	6363      	str	r3, [r4, #52]	; 0x34
 80515f2:	2300      	movs	r3, #0
 80515f4:	61a3      	str	r3, [r4, #24]
 80515f6:	6063      	str	r3, [r4, #4]
 80515f8:	89a3      	ldrh	r3, [r4, #12]
 80515fa:	061b      	lsls	r3, r3, #24
 80515fc:	d503      	bpl.n	8051606 <setvbuf+0x6a>
 80515fe:	6921      	ldr	r1, [r4, #16]
 8051600:	4630      	mov	r0, r6
 8051602:	f001 fd75 	bl	80530f0 <_free_r>
 8051606:	89a3      	ldrh	r3, [r4, #12]
 8051608:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 805160c:	f023 0303 	bic.w	r3, r3, #3
 8051610:	f1b8 0f02 	cmp.w	r8, #2
 8051614:	81a3      	strh	r3, [r4, #12]
 8051616:	d05d      	beq.n	80516d4 <setvbuf+0x138>
 8051618:	ab01      	add	r3, sp, #4
 805161a:	466a      	mov	r2, sp
 805161c:	4621      	mov	r1, r4
 805161e:	4630      	mov	r0, r6
 8051620:	f001 f9fe 	bl	8052a20 <__swhatbuf_r>
 8051624:	89a3      	ldrh	r3, [r4, #12]
 8051626:	4318      	orrs	r0, r3
 8051628:	81a0      	strh	r0, [r4, #12]
 805162a:	bb2d      	cbnz	r5, 8051678 <setvbuf+0xdc>
 805162c:	9d00      	ldr	r5, [sp, #0]
 805162e:	4628      	mov	r0, r5
 8051630:	f001 fa5a 	bl	8052ae8 <malloc>
 8051634:	4607      	mov	r7, r0
 8051636:	2800      	cmp	r0, #0
 8051638:	d14e      	bne.n	80516d8 <setvbuf+0x13c>
 805163a:	f8dd 9000 	ldr.w	r9, [sp]
 805163e:	45a9      	cmp	r9, r5
 8051640:	d13c      	bne.n	80516bc <setvbuf+0x120>
 8051642:	f04f 30ff 	mov.w	r0, #4294967295
 8051646:	89a3      	ldrh	r3, [r4, #12]
 8051648:	f043 0302 	orr.w	r3, r3, #2
 805164c:	81a3      	strh	r3, [r4, #12]
 805164e:	2300      	movs	r3, #0
 8051650:	60a3      	str	r3, [r4, #8]
 8051652:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8051656:	6023      	str	r3, [r4, #0]
 8051658:	6123      	str	r3, [r4, #16]
 805165a:	2301      	movs	r3, #1
 805165c:	6163      	str	r3, [r4, #20]
 805165e:	b003      	add	sp, #12
 8051660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8051664:	4b22      	ldr	r3, [pc, #136]	; (80516f0 <setvbuf+0x154>)
 8051666:	429c      	cmp	r4, r3
 8051668:	d101      	bne.n	805166e <setvbuf+0xd2>
 805166a:	68b4      	ldr	r4, [r6, #8]
 805166c:	e7a8      	b.n	80515c0 <setvbuf+0x24>
 805166e:	4b21      	ldr	r3, [pc, #132]	; (80516f4 <setvbuf+0x158>)
 8051670:	429c      	cmp	r4, r3
 8051672:	bf08      	it	eq
 8051674:	68f4      	ldreq	r4, [r6, #12]
 8051676:	e7a3      	b.n	80515c0 <setvbuf+0x24>
 8051678:	2f00      	cmp	r7, #0
 805167a:	d0d8      	beq.n	805162e <setvbuf+0x92>
 805167c:	69b3      	ldr	r3, [r6, #24]
 805167e:	b913      	cbnz	r3, 8051686 <setvbuf+0xea>
 8051680:	4630      	mov	r0, r6
 8051682:	f001 f931 	bl	80528e8 <__sinit>
 8051686:	f1b8 0f01 	cmp.w	r8, #1
 805168a:	bf08      	it	eq
 805168c:	89a3      	ldrheq	r3, [r4, #12]
 805168e:	6027      	str	r7, [r4, #0]
 8051690:	bf04      	itt	eq
 8051692:	f043 0301 	orreq.w	r3, r3, #1
 8051696:	81a3      	strheq	r3, [r4, #12]
 8051698:	89a3      	ldrh	r3, [r4, #12]
 805169a:	f013 0008 	ands.w	r0, r3, #8
 805169e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80516a2:	d01b      	beq.n	80516dc <setvbuf+0x140>
 80516a4:	f013 0001 	ands.w	r0, r3, #1
 80516a8:	bf18      	it	ne
 80516aa:	426d      	negne	r5, r5
 80516ac:	f04f 0300 	mov.w	r3, #0
 80516b0:	bf1d      	ittte	ne
 80516b2:	60a3      	strne	r3, [r4, #8]
 80516b4:	61a5      	strne	r5, [r4, #24]
 80516b6:	4618      	movne	r0, r3
 80516b8:	60a5      	streq	r5, [r4, #8]
 80516ba:	e7d0      	b.n	805165e <setvbuf+0xc2>
 80516bc:	4648      	mov	r0, r9
 80516be:	f001 fa13 	bl	8052ae8 <malloc>
 80516c2:	4607      	mov	r7, r0
 80516c4:	2800      	cmp	r0, #0
 80516c6:	d0bc      	beq.n	8051642 <setvbuf+0xa6>
 80516c8:	89a3      	ldrh	r3, [r4, #12]
 80516ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80516ce:	81a3      	strh	r3, [r4, #12]
 80516d0:	464d      	mov	r5, r9
 80516d2:	e7d3      	b.n	805167c <setvbuf+0xe0>
 80516d4:	2000      	movs	r0, #0
 80516d6:	e7b6      	b.n	8051646 <setvbuf+0xaa>
 80516d8:	46a9      	mov	r9, r5
 80516da:	e7f5      	b.n	80516c8 <setvbuf+0x12c>
 80516dc:	60a0      	str	r0, [r4, #8]
 80516de:	e7be      	b.n	805165e <setvbuf+0xc2>
 80516e0:	f04f 30ff 	mov.w	r0, #4294967295
 80516e4:	e7bb      	b.n	805165e <setvbuf+0xc2>
 80516e6:	bf00      	nop
 80516e8:	20001210 	.word	0x20001210
 80516ec:	08054fa4 	.word	0x08054fa4
 80516f0:	08054fc4 	.word	0x08054fc4
 80516f4:	08054f84 	.word	0x08054f84

080516f8 <siprintf>:
 80516f8:	b40e      	push	{r1, r2, r3}
 80516fa:	b500      	push	{lr}
 80516fc:	b09c      	sub	sp, #112	; 0x70
 80516fe:	ab1d      	add	r3, sp, #116	; 0x74
 8051700:	9002      	str	r0, [sp, #8]
 8051702:	9006      	str	r0, [sp, #24]
 8051704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8051708:	4809      	ldr	r0, [pc, #36]	; (8051730 <siprintf+0x38>)
 805170a:	9107      	str	r1, [sp, #28]
 805170c:	9104      	str	r1, [sp, #16]
 805170e:	4909      	ldr	r1, [pc, #36]	; (8051734 <siprintf+0x3c>)
 8051710:	f853 2b04 	ldr.w	r2, [r3], #4
 8051714:	9105      	str	r1, [sp, #20]
 8051716:	6800      	ldr	r0, [r0, #0]
 8051718:	9301      	str	r3, [sp, #4]
 805171a:	a902      	add	r1, sp, #8
 805171c:	f001 fdea 	bl	80532f4 <_svfiprintf_r>
 8051720:	9b02      	ldr	r3, [sp, #8]
 8051722:	2200      	movs	r2, #0
 8051724:	701a      	strb	r2, [r3, #0]
 8051726:	b01c      	add	sp, #112	; 0x70
 8051728:	f85d eb04 	ldr.w	lr, [sp], #4
 805172c:	b003      	add	sp, #12
 805172e:	4770      	bx	lr
 8051730:	20001210 	.word	0x20001210
 8051734:	ffff0208 	.word	0xffff0208

08051738 <strcat>:
 8051738:	b510      	push	{r4, lr}
 805173a:	4603      	mov	r3, r0
 805173c:	781a      	ldrb	r2, [r3, #0]
 805173e:	1c5c      	adds	r4, r3, #1
 8051740:	b93a      	cbnz	r2, 8051752 <strcat+0x1a>
 8051742:	3b01      	subs	r3, #1
 8051744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8051748:	f803 2f01 	strb.w	r2, [r3, #1]!
 805174c:	2a00      	cmp	r2, #0
 805174e:	d1f9      	bne.n	8051744 <strcat+0xc>
 8051750:	bd10      	pop	{r4, pc}
 8051752:	4623      	mov	r3, r4
 8051754:	e7f2      	b.n	805173c <strcat+0x4>

08051756 <strcpy>:
 8051756:	4603      	mov	r3, r0
 8051758:	f811 2b01 	ldrb.w	r2, [r1], #1
 805175c:	f803 2b01 	strb.w	r2, [r3], #1
 8051760:	2a00      	cmp	r2, #0
 8051762:	d1f9      	bne.n	8051758 <strcpy+0x2>
 8051764:	4770      	bx	lr

08051766 <_strtol_l.isra.0>:
 8051766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805176a:	4680      	mov	r8, r0
 805176c:	4689      	mov	r9, r1
 805176e:	4692      	mov	sl, r2
 8051770:	461e      	mov	r6, r3
 8051772:	460f      	mov	r7, r1
 8051774:	463d      	mov	r5, r7
 8051776:	9808      	ldr	r0, [sp, #32]
 8051778:	f815 4b01 	ldrb.w	r4, [r5], #1
 805177c:	f001 f93e 	bl	80529fc <__locale_ctype_ptr_l>
 8051780:	4420      	add	r0, r4
 8051782:	7843      	ldrb	r3, [r0, #1]
 8051784:	f013 0308 	ands.w	r3, r3, #8
 8051788:	d132      	bne.n	80517f0 <_strtol_l.isra.0+0x8a>
 805178a:	2c2d      	cmp	r4, #45	; 0x2d
 805178c:	d132      	bne.n	80517f4 <_strtol_l.isra.0+0x8e>
 805178e:	787c      	ldrb	r4, [r7, #1]
 8051790:	1cbd      	adds	r5, r7, #2
 8051792:	2201      	movs	r2, #1
 8051794:	2e00      	cmp	r6, #0
 8051796:	d05d      	beq.n	8051854 <_strtol_l.isra.0+0xee>
 8051798:	2e10      	cmp	r6, #16
 805179a:	d109      	bne.n	80517b0 <_strtol_l.isra.0+0x4a>
 805179c:	2c30      	cmp	r4, #48	; 0x30
 805179e:	d107      	bne.n	80517b0 <_strtol_l.isra.0+0x4a>
 80517a0:	782b      	ldrb	r3, [r5, #0]
 80517a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80517a6:	2b58      	cmp	r3, #88	; 0x58
 80517a8:	d14f      	bne.n	805184a <_strtol_l.isra.0+0xe4>
 80517aa:	786c      	ldrb	r4, [r5, #1]
 80517ac:	2610      	movs	r6, #16
 80517ae:	3502      	adds	r5, #2
 80517b0:	2a00      	cmp	r2, #0
 80517b2:	bf14      	ite	ne
 80517b4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80517b8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80517bc:	2700      	movs	r7, #0
 80517be:	fbb1 fcf6 	udiv	ip, r1, r6
 80517c2:	4638      	mov	r0, r7
 80517c4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80517c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80517cc:	2b09      	cmp	r3, #9
 80517ce:	d817      	bhi.n	8051800 <_strtol_l.isra.0+0x9a>
 80517d0:	461c      	mov	r4, r3
 80517d2:	42a6      	cmp	r6, r4
 80517d4:	dd23      	ble.n	805181e <_strtol_l.isra.0+0xb8>
 80517d6:	1c7b      	adds	r3, r7, #1
 80517d8:	d007      	beq.n	80517ea <_strtol_l.isra.0+0x84>
 80517da:	4584      	cmp	ip, r0
 80517dc:	d31c      	bcc.n	8051818 <_strtol_l.isra.0+0xb2>
 80517de:	d101      	bne.n	80517e4 <_strtol_l.isra.0+0x7e>
 80517e0:	45a6      	cmp	lr, r4
 80517e2:	db19      	blt.n	8051818 <_strtol_l.isra.0+0xb2>
 80517e4:	fb00 4006 	mla	r0, r0, r6, r4
 80517e8:	2701      	movs	r7, #1
 80517ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80517ee:	e7eb      	b.n	80517c8 <_strtol_l.isra.0+0x62>
 80517f0:	462f      	mov	r7, r5
 80517f2:	e7bf      	b.n	8051774 <_strtol_l.isra.0+0xe>
 80517f4:	2c2b      	cmp	r4, #43	; 0x2b
 80517f6:	bf04      	itt	eq
 80517f8:	1cbd      	addeq	r5, r7, #2
 80517fa:	787c      	ldrbeq	r4, [r7, #1]
 80517fc:	461a      	mov	r2, r3
 80517fe:	e7c9      	b.n	8051794 <_strtol_l.isra.0+0x2e>
 8051800:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8051804:	2b19      	cmp	r3, #25
 8051806:	d801      	bhi.n	805180c <_strtol_l.isra.0+0xa6>
 8051808:	3c37      	subs	r4, #55	; 0x37
 805180a:	e7e2      	b.n	80517d2 <_strtol_l.isra.0+0x6c>
 805180c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8051810:	2b19      	cmp	r3, #25
 8051812:	d804      	bhi.n	805181e <_strtol_l.isra.0+0xb8>
 8051814:	3c57      	subs	r4, #87	; 0x57
 8051816:	e7dc      	b.n	80517d2 <_strtol_l.isra.0+0x6c>
 8051818:	f04f 37ff 	mov.w	r7, #4294967295
 805181c:	e7e5      	b.n	80517ea <_strtol_l.isra.0+0x84>
 805181e:	1c7b      	adds	r3, r7, #1
 8051820:	d108      	bne.n	8051834 <_strtol_l.isra.0+0xce>
 8051822:	2322      	movs	r3, #34	; 0x22
 8051824:	f8c8 3000 	str.w	r3, [r8]
 8051828:	4608      	mov	r0, r1
 805182a:	f1ba 0f00 	cmp.w	sl, #0
 805182e:	d107      	bne.n	8051840 <_strtol_l.isra.0+0xda>
 8051830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8051834:	b102      	cbz	r2, 8051838 <_strtol_l.isra.0+0xd2>
 8051836:	4240      	negs	r0, r0
 8051838:	f1ba 0f00 	cmp.w	sl, #0
 805183c:	d0f8      	beq.n	8051830 <_strtol_l.isra.0+0xca>
 805183e:	b10f      	cbz	r7, 8051844 <_strtol_l.isra.0+0xde>
 8051840:	f105 39ff 	add.w	r9, r5, #4294967295
 8051844:	f8ca 9000 	str.w	r9, [sl]
 8051848:	e7f2      	b.n	8051830 <_strtol_l.isra.0+0xca>
 805184a:	2430      	movs	r4, #48	; 0x30
 805184c:	2e00      	cmp	r6, #0
 805184e:	d1af      	bne.n	80517b0 <_strtol_l.isra.0+0x4a>
 8051850:	2608      	movs	r6, #8
 8051852:	e7ad      	b.n	80517b0 <_strtol_l.isra.0+0x4a>
 8051854:	2c30      	cmp	r4, #48	; 0x30
 8051856:	d0a3      	beq.n	80517a0 <_strtol_l.isra.0+0x3a>
 8051858:	260a      	movs	r6, #10
 805185a:	e7a9      	b.n	80517b0 <_strtol_l.isra.0+0x4a>

0805185c <strtol>:
 805185c:	4b08      	ldr	r3, [pc, #32]	; (8051880 <strtol+0x24>)
 805185e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8051860:	681c      	ldr	r4, [r3, #0]
 8051862:	4d08      	ldr	r5, [pc, #32]	; (8051884 <strtol+0x28>)
 8051864:	6a23      	ldr	r3, [r4, #32]
 8051866:	2b00      	cmp	r3, #0
 8051868:	bf08      	it	eq
 805186a:	462b      	moveq	r3, r5
 805186c:	9300      	str	r3, [sp, #0]
 805186e:	4613      	mov	r3, r2
 8051870:	460a      	mov	r2, r1
 8051872:	4601      	mov	r1, r0
 8051874:	4620      	mov	r0, r4
 8051876:	f7ff ff76 	bl	8051766 <_strtol_l.isra.0>
 805187a:	b003      	add	sp, #12
 805187c:	bd30      	pop	{r4, r5, pc}
 805187e:	bf00      	nop
 8051880:	20001210 	.word	0x20001210
 8051884:	20001274 	.word	0x20001274

08051888 <_vsniprintf_r>:
 8051888:	b530      	push	{r4, r5, lr}
 805188a:	1e14      	subs	r4, r2, #0
 805188c:	4605      	mov	r5, r0
 805188e:	b09b      	sub	sp, #108	; 0x6c
 8051890:	4618      	mov	r0, r3
 8051892:	da05      	bge.n	80518a0 <_vsniprintf_r+0x18>
 8051894:	238b      	movs	r3, #139	; 0x8b
 8051896:	602b      	str	r3, [r5, #0]
 8051898:	f04f 30ff 	mov.w	r0, #4294967295
 805189c:	b01b      	add	sp, #108	; 0x6c
 805189e:	bd30      	pop	{r4, r5, pc}
 80518a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80518a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80518a8:	bf14      	ite	ne
 80518aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80518ae:	4623      	moveq	r3, r4
 80518b0:	9302      	str	r3, [sp, #8]
 80518b2:	9305      	str	r3, [sp, #20]
 80518b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80518b8:	9100      	str	r1, [sp, #0]
 80518ba:	9104      	str	r1, [sp, #16]
 80518bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80518c0:	4602      	mov	r2, r0
 80518c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80518c4:	4669      	mov	r1, sp
 80518c6:	4628      	mov	r0, r5
 80518c8:	f001 fd14 	bl	80532f4 <_svfiprintf_r>
 80518cc:	1c43      	adds	r3, r0, #1
 80518ce:	bfbc      	itt	lt
 80518d0:	238b      	movlt	r3, #139	; 0x8b
 80518d2:	602b      	strlt	r3, [r5, #0]
 80518d4:	2c00      	cmp	r4, #0
 80518d6:	d0e1      	beq.n	805189c <_vsniprintf_r+0x14>
 80518d8:	9b00      	ldr	r3, [sp, #0]
 80518da:	2200      	movs	r2, #0
 80518dc:	701a      	strb	r2, [r3, #0]
 80518de:	e7dd      	b.n	805189c <_vsniprintf_r+0x14>

080518e0 <vsniprintf>:
 80518e0:	b507      	push	{r0, r1, r2, lr}
 80518e2:	9300      	str	r3, [sp, #0]
 80518e4:	4613      	mov	r3, r2
 80518e6:	460a      	mov	r2, r1
 80518e8:	4601      	mov	r1, r0
 80518ea:	4803      	ldr	r0, [pc, #12]	; (80518f8 <vsniprintf+0x18>)
 80518ec:	6800      	ldr	r0, [r0, #0]
 80518ee:	f7ff ffcb 	bl	8051888 <_vsniprintf_r>
 80518f2:	b003      	add	sp, #12
 80518f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80518f8:	20001210 	.word	0x20001210

080518fc <__swbuf_r>:
 80518fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80518fe:	460e      	mov	r6, r1
 8051900:	4614      	mov	r4, r2
 8051902:	4605      	mov	r5, r0
 8051904:	b118      	cbz	r0, 805190e <__swbuf_r+0x12>
 8051906:	6983      	ldr	r3, [r0, #24]
 8051908:	b90b      	cbnz	r3, 805190e <__swbuf_r+0x12>
 805190a:	f000 ffed 	bl	80528e8 <__sinit>
 805190e:	4b21      	ldr	r3, [pc, #132]	; (8051994 <__swbuf_r+0x98>)
 8051910:	429c      	cmp	r4, r3
 8051912:	d12a      	bne.n	805196a <__swbuf_r+0x6e>
 8051914:	686c      	ldr	r4, [r5, #4]
 8051916:	69a3      	ldr	r3, [r4, #24]
 8051918:	60a3      	str	r3, [r4, #8]
 805191a:	89a3      	ldrh	r3, [r4, #12]
 805191c:	071a      	lsls	r2, r3, #28
 805191e:	d52e      	bpl.n	805197e <__swbuf_r+0x82>
 8051920:	6923      	ldr	r3, [r4, #16]
 8051922:	b363      	cbz	r3, 805197e <__swbuf_r+0x82>
 8051924:	6923      	ldr	r3, [r4, #16]
 8051926:	6820      	ldr	r0, [r4, #0]
 8051928:	1ac0      	subs	r0, r0, r3
 805192a:	6963      	ldr	r3, [r4, #20]
 805192c:	b2f6      	uxtb	r6, r6
 805192e:	4283      	cmp	r3, r0
 8051930:	4637      	mov	r7, r6
 8051932:	dc04      	bgt.n	805193e <__swbuf_r+0x42>
 8051934:	4621      	mov	r1, r4
 8051936:	4628      	mov	r0, r5
 8051938:	f000 ff6c 	bl	8052814 <_fflush_r>
 805193c:	bb28      	cbnz	r0, 805198a <__swbuf_r+0x8e>
 805193e:	68a3      	ldr	r3, [r4, #8]
 8051940:	3b01      	subs	r3, #1
 8051942:	60a3      	str	r3, [r4, #8]
 8051944:	6823      	ldr	r3, [r4, #0]
 8051946:	1c5a      	adds	r2, r3, #1
 8051948:	6022      	str	r2, [r4, #0]
 805194a:	701e      	strb	r6, [r3, #0]
 805194c:	6963      	ldr	r3, [r4, #20]
 805194e:	3001      	adds	r0, #1
 8051950:	4283      	cmp	r3, r0
 8051952:	d004      	beq.n	805195e <__swbuf_r+0x62>
 8051954:	89a3      	ldrh	r3, [r4, #12]
 8051956:	07db      	lsls	r3, r3, #31
 8051958:	d519      	bpl.n	805198e <__swbuf_r+0x92>
 805195a:	2e0a      	cmp	r6, #10
 805195c:	d117      	bne.n	805198e <__swbuf_r+0x92>
 805195e:	4621      	mov	r1, r4
 8051960:	4628      	mov	r0, r5
 8051962:	f000 ff57 	bl	8052814 <_fflush_r>
 8051966:	b190      	cbz	r0, 805198e <__swbuf_r+0x92>
 8051968:	e00f      	b.n	805198a <__swbuf_r+0x8e>
 805196a:	4b0b      	ldr	r3, [pc, #44]	; (8051998 <__swbuf_r+0x9c>)
 805196c:	429c      	cmp	r4, r3
 805196e:	d101      	bne.n	8051974 <__swbuf_r+0x78>
 8051970:	68ac      	ldr	r4, [r5, #8]
 8051972:	e7d0      	b.n	8051916 <__swbuf_r+0x1a>
 8051974:	4b09      	ldr	r3, [pc, #36]	; (805199c <__swbuf_r+0xa0>)
 8051976:	429c      	cmp	r4, r3
 8051978:	bf08      	it	eq
 805197a:	68ec      	ldreq	r4, [r5, #12]
 805197c:	e7cb      	b.n	8051916 <__swbuf_r+0x1a>
 805197e:	4621      	mov	r1, r4
 8051980:	4628      	mov	r0, r5
 8051982:	f000 f80d 	bl	80519a0 <__swsetup_r>
 8051986:	2800      	cmp	r0, #0
 8051988:	d0cc      	beq.n	8051924 <__swbuf_r+0x28>
 805198a:	f04f 37ff 	mov.w	r7, #4294967295
 805198e:	4638      	mov	r0, r7
 8051990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8051992:	bf00      	nop
 8051994:	08054fa4 	.word	0x08054fa4
 8051998:	08054fc4 	.word	0x08054fc4
 805199c:	08054f84 	.word	0x08054f84

080519a0 <__swsetup_r>:
 80519a0:	4b32      	ldr	r3, [pc, #200]	; (8051a6c <__swsetup_r+0xcc>)
 80519a2:	b570      	push	{r4, r5, r6, lr}
 80519a4:	681d      	ldr	r5, [r3, #0]
 80519a6:	4606      	mov	r6, r0
 80519a8:	460c      	mov	r4, r1
 80519aa:	b125      	cbz	r5, 80519b6 <__swsetup_r+0x16>
 80519ac:	69ab      	ldr	r3, [r5, #24]
 80519ae:	b913      	cbnz	r3, 80519b6 <__swsetup_r+0x16>
 80519b0:	4628      	mov	r0, r5
 80519b2:	f000 ff99 	bl	80528e8 <__sinit>
 80519b6:	4b2e      	ldr	r3, [pc, #184]	; (8051a70 <__swsetup_r+0xd0>)
 80519b8:	429c      	cmp	r4, r3
 80519ba:	d10f      	bne.n	80519dc <__swsetup_r+0x3c>
 80519bc:	686c      	ldr	r4, [r5, #4]
 80519be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80519c2:	b29a      	uxth	r2, r3
 80519c4:	0715      	lsls	r5, r2, #28
 80519c6:	d42c      	bmi.n	8051a22 <__swsetup_r+0x82>
 80519c8:	06d0      	lsls	r0, r2, #27
 80519ca:	d411      	bmi.n	80519f0 <__swsetup_r+0x50>
 80519cc:	2209      	movs	r2, #9
 80519ce:	6032      	str	r2, [r6, #0]
 80519d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80519d4:	81a3      	strh	r3, [r4, #12]
 80519d6:	f04f 30ff 	mov.w	r0, #4294967295
 80519da:	e03e      	b.n	8051a5a <__swsetup_r+0xba>
 80519dc:	4b25      	ldr	r3, [pc, #148]	; (8051a74 <__swsetup_r+0xd4>)
 80519de:	429c      	cmp	r4, r3
 80519e0:	d101      	bne.n	80519e6 <__swsetup_r+0x46>
 80519e2:	68ac      	ldr	r4, [r5, #8]
 80519e4:	e7eb      	b.n	80519be <__swsetup_r+0x1e>
 80519e6:	4b24      	ldr	r3, [pc, #144]	; (8051a78 <__swsetup_r+0xd8>)
 80519e8:	429c      	cmp	r4, r3
 80519ea:	bf08      	it	eq
 80519ec:	68ec      	ldreq	r4, [r5, #12]
 80519ee:	e7e6      	b.n	80519be <__swsetup_r+0x1e>
 80519f0:	0751      	lsls	r1, r2, #29
 80519f2:	d512      	bpl.n	8051a1a <__swsetup_r+0x7a>
 80519f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80519f6:	b141      	cbz	r1, 8051a0a <__swsetup_r+0x6a>
 80519f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80519fc:	4299      	cmp	r1, r3
 80519fe:	d002      	beq.n	8051a06 <__swsetup_r+0x66>
 8051a00:	4630      	mov	r0, r6
 8051a02:	f001 fb75 	bl	80530f0 <_free_r>
 8051a06:	2300      	movs	r3, #0
 8051a08:	6363      	str	r3, [r4, #52]	; 0x34
 8051a0a:	89a3      	ldrh	r3, [r4, #12]
 8051a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8051a10:	81a3      	strh	r3, [r4, #12]
 8051a12:	2300      	movs	r3, #0
 8051a14:	6063      	str	r3, [r4, #4]
 8051a16:	6923      	ldr	r3, [r4, #16]
 8051a18:	6023      	str	r3, [r4, #0]
 8051a1a:	89a3      	ldrh	r3, [r4, #12]
 8051a1c:	f043 0308 	orr.w	r3, r3, #8
 8051a20:	81a3      	strh	r3, [r4, #12]
 8051a22:	6923      	ldr	r3, [r4, #16]
 8051a24:	b94b      	cbnz	r3, 8051a3a <__swsetup_r+0x9a>
 8051a26:	89a3      	ldrh	r3, [r4, #12]
 8051a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8051a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8051a30:	d003      	beq.n	8051a3a <__swsetup_r+0x9a>
 8051a32:	4621      	mov	r1, r4
 8051a34:	4630      	mov	r0, r6
 8051a36:	f001 f817 	bl	8052a68 <__smakebuf_r>
 8051a3a:	89a2      	ldrh	r2, [r4, #12]
 8051a3c:	f012 0301 	ands.w	r3, r2, #1
 8051a40:	d00c      	beq.n	8051a5c <__swsetup_r+0xbc>
 8051a42:	2300      	movs	r3, #0
 8051a44:	60a3      	str	r3, [r4, #8]
 8051a46:	6963      	ldr	r3, [r4, #20]
 8051a48:	425b      	negs	r3, r3
 8051a4a:	61a3      	str	r3, [r4, #24]
 8051a4c:	6923      	ldr	r3, [r4, #16]
 8051a4e:	b953      	cbnz	r3, 8051a66 <__swsetup_r+0xc6>
 8051a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8051a54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8051a58:	d1ba      	bne.n	80519d0 <__swsetup_r+0x30>
 8051a5a:	bd70      	pop	{r4, r5, r6, pc}
 8051a5c:	0792      	lsls	r2, r2, #30
 8051a5e:	bf58      	it	pl
 8051a60:	6963      	ldrpl	r3, [r4, #20]
 8051a62:	60a3      	str	r3, [r4, #8]
 8051a64:	e7f2      	b.n	8051a4c <__swsetup_r+0xac>
 8051a66:	2000      	movs	r0, #0
 8051a68:	e7f7      	b.n	8051a5a <__swsetup_r+0xba>
 8051a6a:	bf00      	nop
 8051a6c:	20001210 	.word	0x20001210
 8051a70:	08054fa4 	.word	0x08054fa4
 8051a74:	08054fc4 	.word	0x08054fc4
 8051a78:	08054f84 	.word	0x08054f84

08051a7c <quorem>:
 8051a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8051a80:	6903      	ldr	r3, [r0, #16]
 8051a82:	690c      	ldr	r4, [r1, #16]
 8051a84:	42a3      	cmp	r3, r4
 8051a86:	4680      	mov	r8, r0
 8051a88:	f2c0 8082 	blt.w	8051b90 <quorem+0x114>
 8051a8c:	3c01      	subs	r4, #1
 8051a8e:	f101 0714 	add.w	r7, r1, #20
 8051a92:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8051a96:	f100 0614 	add.w	r6, r0, #20
 8051a9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8051a9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8051aa2:	eb06 030c 	add.w	r3, r6, ip
 8051aa6:	3501      	adds	r5, #1
 8051aa8:	eb07 090c 	add.w	r9, r7, ip
 8051aac:	9301      	str	r3, [sp, #4]
 8051aae:	fbb0 f5f5 	udiv	r5, r0, r5
 8051ab2:	b395      	cbz	r5, 8051b1a <quorem+0x9e>
 8051ab4:	f04f 0a00 	mov.w	sl, #0
 8051ab8:	4638      	mov	r0, r7
 8051aba:	46b6      	mov	lr, r6
 8051abc:	46d3      	mov	fp, sl
 8051abe:	f850 2b04 	ldr.w	r2, [r0], #4
 8051ac2:	b293      	uxth	r3, r2
 8051ac4:	fb05 a303 	mla	r3, r5, r3, sl
 8051ac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8051acc:	b29b      	uxth	r3, r3
 8051ace:	ebab 0303 	sub.w	r3, fp, r3
 8051ad2:	0c12      	lsrs	r2, r2, #16
 8051ad4:	f8de b000 	ldr.w	fp, [lr]
 8051ad8:	fb05 a202 	mla	r2, r5, r2, sl
 8051adc:	fa13 f38b 	uxtah	r3, r3, fp
 8051ae0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8051ae4:	fa1f fb82 	uxth.w	fp, r2
 8051ae8:	f8de 2000 	ldr.w	r2, [lr]
 8051aec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8051af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8051af4:	b29b      	uxth	r3, r3
 8051af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8051afa:	4581      	cmp	r9, r0
 8051afc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8051b00:	f84e 3b04 	str.w	r3, [lr], #4
 8051b04:	d2db      	bcs.n	8051abe <quorem+0x42>
 8051b06:	f856 300c 	ldr.w	r3, [r6, ip]
 8051b0a:	b933      	cbnz	r3, 8051b1a <quorem+0x9e>
 8051b0c:	9b01      	ldr	r3, [sp, #4]
 8051b0e:	3b04      	subs	r3, #4
 8051b10:	429e      	cmp	r6, r3
 8051b12:	461a      	mov	r2, r3
 8051b14:	d330      	bcc.n	8051b78 <quorem+0xfc>
 8051b16:	f8c8 4010 	str.w	r4, [r8, #16]
 8051b1a:	4640      	mov	r0, r8
 8051b1c:	f001 fa14 	bl	8052f48 <__mcmp>
 8051b20:	2800      	cmp	r0, #0
 8051b22:	db25      	blt.n	8051b70 <quorem+0xf4>
 8051b24:	3501      	adds	r5, #1
 8051b26:	4630      	mov	r0, r6
 8051b28:	f04f 0c00 	mov.w	ip, #0
 8051b2c:	f857 2b04 	ldr.w	r2, [r7], #4
 8051b30:	f8d0 e000 	ldr.w	lr, [r0]
 8051b34:	b293      	uxth	r3, r2
 8051b36:	ebac 0303 	sub.w	r3, ip, r3
 8051b3a:	0c12      	lsrs	r2, r2, #16
 8051b3c:	fa13 f38e 	uxtah	r3, r3, lr
 8051b40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8051b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8051b48:	b29b      	uxth	r3, r3
 8051b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8051b4e:	45b9      	cmp	r9, r7
 8051b50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8051b54:	f840 3b04 	str.w	r3, [r0], #4
 8051b58:	d2e8      	bcs.n	8051b2c <quorem+0xb0>
 8051b5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8051b5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8051b62:	b92a      	cbnz	r2, 8051b70 <quorem+0xf4>
 8051b64:	3b04      	subs	r3, #4
 8051b66:	429e      	cmp	r6, r3
 8051b68:	461a      	mov	r2, r3
 8051b6a:	d30b      	bcc.n	8051b84 <quorem+0x108>
 8051b6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8051b70:	4628      	mov	r0, r5
 8051b72:	b003      	add	sp, #12
 8051b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8051b78:	6812      	ldr	r2, [r2, #0]
 8051b7a:	3b04      	subs	r3, #4
 8051b7c:	2a00      	cmp	r2, #0
 8051b7e:	d1ca      	bne.n	8051b16 <quorem+0x9a>
 8051b80:	3c01      	subs	r4, #1
 8051b82:	e7c5      	b.n	8051b10 <quorem+0x94>
 8051b84:	6812      	ldr	r2, [r2, #0]
 8051b86:	3b04      	subs	r3, #4
 8051b88:	2a00      	cmp	r2, #0
 8051b8a:	d1ef      	bne.n	8051b6c <quorem+0xf0>
 8051b8c:	3c01      	subs	r4, #1
 8051b8e:	e7ea      	b.n	8051b66 <quorem+0xea>
 8051b90:	2000      	movs	r0, #0
 8051b92:	e7ee      	b.n	8051b72 <quorem+0xf6>
 8051b94:	0000      	movs	r0, r0
	...

08051b98 <_dtoa_r>:
 8051b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8051b9c:	ec57 6b10 	vmov	r6, r7, d0
 8051ba0:	b097      	sub	sp, #92	; 0x5c
 8051ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8051ba4:	9106      	str	r1, [sp, #24]
 8051ba6:	4604      	mov	r4, r0
 8051ba8:	920b      	str	r2, [sp, #44]	; 0x2c
 8051baa:	9312      	str	r3, [sp, #72]	; 0x48
 8051bac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8051bb0:	e9cd 6700 	strd	r6, r7, [sp]
 8051bb4:	b93d      	cbnz	r5, 8051bc6 <_dtoa_r+0x2e>
 8051bb6:	2010      	movs	r0, #16
 8051bb8:	f000 ff96 	bl	8052ae8 <malloc>
 8051bbc:	6260      	str	r0, [r4, #36]	; 0x24
 8051bbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8051bc2:	6005      	str	r5, [r0, #0]
 8051bc4:	60c5      	str	r5, [r0, #12]
 8051bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8051bc8:	6819      	ldr	r1, [r3, #0]
 8051bca:	b151      	cbz	r1, 8051be2 <_dtoa_r+0x4a>
 8051bcc:	685a      	ldr	r2, [r3, #4]
 8051bce:	604a      	str	r2, [r1, #4]
 8051bd0:	2301      	movs	r3, #1
 8051bd2:	4093      	lsls	r3, r2
 8051bd4:	608b      	str	r3, [r1, #8]
 8051bd6:	4620      	mov	r0, r4
 8051bd8:	f000 ffd4 	bl	8052b84 <_Bfree>
 8051bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8051bde:	2200      	movs	r2, #0
 8051be0:	601a      	str	r2, [r3, #0]
 8051be2:	1e3b      	subs	r3, r7, #0
 8051be4:	bfbb      	ittet	lt
 8051be6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8051bea:	9301      	strlt	r3, [sp, #4]
 8051bec:	2300      	movge	r3, #0
 8051bee:	2201      	movlt	r2, #1
 8051bf0:	bfac      	ite	ge
 8051bf2:	f8c8 3000 	strge.w	r3, [r8]
 8051bf6:	f8c8 2000 	strlt.w	r2, [r8]
 8051bfa:	4baf      	ldr	r3, [pc, #700]	; (8051eb8 <_dtoa_r+0x320>)
 8051bfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8051c00:	ea33 0308 	bics.w	r3, r3, r8
 8051c04:	d114      	bne.n	8051c30 <_dtoa_r+0x98>
 8051c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8051c08:	f242 730f 	movw	r3, #9999	; 0x270f
 8051c0c:	6013      	str	r3, [r2, #0]
 8051c0e:	9b00      	ldr	r3, [sp, #0]
 8051c10:	b923      	cbnz	r3, 8051c1c <_dtoa_r+0x84>
 8051c12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8051c16:	2800      	cmp	r0, #0
 8051c18:	f000 8542 	beq.w	80526a0 <_dtoa_r+0xb08>
 8051c1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8051c1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8051ecc <_dtoa_r+0x334>
 8051c22:	2b00      	cmp	r3, #0
 8051c24:	f000 8544 	beq.w	80526b0 <_dtoa_r+0xb18>
 8051c28:	f10b 0303 	add.w	r3, fp, #3
 8051c2c:	f000 bd3e 	b.w	80526ac <_dtoa_r+0xb14>
 8051c30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8051c34:	2200      	movs	r2, #0
 8051c36:	2300      	movs	r3, #0
 8051c38:	4630      	mov	r0, r6
 8051c3a:	4639      	mov	r1, r7
 8051c3c:	f7ef f87c 	bl	8040d38 <__aeabi_dcmpeq>
 8051c40:	4681      	mov	r9, r0
 8051c42:	b168      	cbz	r0, 8051c60 <_dtoa_r+0xc8>
 8051c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8051c46:	2301      	movs	r3, #1
 8051c48:	6013      	str	r3, [r2, #0]
 8051c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8051c4c:	2b00      	cmp	r3, #0
 8051c4e:	f000 8524 	beq.w	805269a <_dtoa_r+0xb02>
 8051c52:	4b9a      	ldr	r3, [pc, #616]	; (8051ebc <_dtoa_r+0x324>)
 8051c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8051c56:	f103 3bff 	add.w	fp, r3, #4294967295
 8051c5a:	6013      	str	r3, [r2, #0]
 8051c5c:	f000 bd28 	b.w	80526b0 <_dtoa_r+0xb18>
 8051c60:	aa14      	add	r2, sp, #80	; 0x50
 8051c62:	a915      	add	r1, sp, #84	; 0x54
 8051c64:	ec47 6b10 	vmov	d0, r6, r7
 8051c68:	4620      	mov	r0, r4
 8051c6a:	f001 f9e4 	bl	8053036 <__d2b>
 8051c6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8051c72:	9004      	str	r0, [sp, #16]
 8051c74:	2d00      	cmp	r5, #0
 8051c76:	d07c      	beq.n	8051d72 <_dtoa_r+0x1da>
 8051c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8051c7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8051c80:	46b2      	mov	sl, r6
 8051c82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8051c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8051c8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8051c8e:	2200      	movs	r2, #0
 8051c90:	4b8b      	ldr	r3, [pc, #556]	; (8051ec0 <_dtoa_r+0x328>)
 8051c92:	4650      	mov	r0, sl
 8051c94:	4659      	mov	r1, fp
 8051c96:	f7ee fc2f 	bl	80404f8 <__aeabi_dsub>
 8051c9a:	a381      	add	r3, pc, #516	; (adr r3, 8051ea0 <_dtoa_r+0x308>)
 8051c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051ca0:	f7ee fde2 	bl	8040868 <__aeabi_dmul>
 8051ca4:	a380      	add	r3, pc, #512	; (adr r3, 8051ea8 <_dtoa_r+0x310>)
 8051ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051caa:	f7ee fc27 	bl	80404fc <__adddf3>
 8051cae:	4606      	mov	r6, r0
 8051cb0:	4628      	mov	r0, r5
 8051cb2:	460f      	mov	r7, r1
 8051cb4:	f7ee fd6e 	bl	8040794 <__aeabi_i2d>
 8051cb8:	a37d      	add	r3, pc, #500	; (adr r3, 8051eb0 <_dtoa_r+0x318>)
 8051cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051cbe:	f7ee fdd3 	bl	8040868 <__aeabi_dmul>
 8051cc2:	4602      	mov	r2, r0
 8051cc4:	460b      	mov	r3, r1
 8051cc6:	4630      	mov	r0, r6
 8051cc8:	4639      	mov	r1, r7
 8051cca:	f7ee fc17 	bl	80404fc <__adddf3>
 8051cce:	4606      	mov	r6, r0
 8051cd0:	460f      	mov	r7, r1
 8051cd2:	f7ef f879 	bl	8040dc8 <__aeabi_d2iz>
 8051cd6:	2200      	movs	r2, #0
 8051cd8:	4682      	mov	sl, r0
 8051cda:	2300      	movs	r3, #0
 8051cdc:	4630      	mov	r0, r6
 8051cde:	4639      	mov	r1, r7
 8051ce0:	f7ef f834 	bl	8040d4c <__aeabi_dcmplt>
 8051ce4:	b148      	cbz	r0, 8051cfa <_dtoa_r+0x162>
 8051ce6:	4650      	mov	r0, sl
 8051ce8:	f7ee fd54 	bl	8040794 <__aeabi_i2d>
 8051cec:	4632      	mov	r2, r6
 8051cee:	463b      	mov	r3, r7
 8051cf0:	f7ef f822 	bl	8040d38 <__aeabi_dcmpeq>
 8051cf4:	b908      	cbnz	r0, 8051cfa <_dtoa_r+0x162>
 8051cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8051cfa:	f1ba 0f16 	cmp.w	sl, #22
 8051cfe:	d859      	bhi.n	8051db4 <_dtoa_r+0x21c>
 8051d00:	4970      	ldr	r1, [pc, #448]	; (8051ec4 <_dtoa_r+0x32c>)
 8051d02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8051d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8051d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8051d0e:	f7ef f83b 	bl	8040d88 <__aeabi_dcmpgt>
 8051d12:	2800      	cmp	r0, #0
 8051d14:	d050      	beq.n	8051db8 <_dtoa_r+0x220>
 8051d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8051d1a:	2300      	movs	r3, #0
 8051d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8051d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8051d20:	1b5d      	subs	r5, r3, r5
 8051d22:	f1b5 0801 	subs.w	r8, r5, #1
 8051d26:	bf49      	itett	mi
 8051d28:	f1c5 0301 	rsbmi	r3, r5, #1
 8051d2c:	2300      	movpl	r3, #0
 8051d2e:	9305      	strmi	r3, [sp, #20]
 8051d30:	f04f 0800 	movmi.w	r8, #0
 8051d34:	bf58      	it	pl
 8051d36:	9305      	strpl	r3, [sp, #20]
 8051d38:	f1ba 0f00 	cmp.w	sl, #0
 8051d3c:	db3e      	blt.n	8051dbc <_dtoa_r+0x224>
 8051d3e:	2300      	movs	r3, #0
 8051d40:	44d0      	add	r8, sl
 8051d42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8051d46:	9307      	str	r3, [sp, #28]
 8051d48:	9b06      	ldr	r3, [sp, #24]
 8051d4a:	2b09      	cmp	r3, #9
 8051d4c:	f200 8090 	bhi.w	8051e70 <_dtoa_r+0x2d8>
 8051d50:	2b05      	cmp	r3, #5
 8051d52:	bfc4      	itt	gt
 8051d54:	3b04      	subgt	r3, #4
 8051d56:	9306      	strgt	r3, [sp, #24]
 8051d58:	9b06      	ldr	r3, [sp, #24]
 8051d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8051d5e:	bfcc      	ite	gt
 8051d60:	2500      	movgt	r5, #0
 8051d62:	2501      	movle	r5, #1
 8051d64:	2b03      	cmp	r3, #3
 8051d66:	f200 808f 	bhi.w	8051e88 <_dtoa_r+0x2f0>
 8051d6a:	e8df f003 	tbb	[pc, r3]
 8051d6e:	7f7d      	.short	0x7f7d
 8051d70:	7131      	.short	0x7131
 8051d72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8051d76:	441d      	add	r5, r3
 8051d78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8051d7c:	2820      	cmp	r0, #32
 8051d7e:	dd13      	ble.n	8051da8 <_dtoa_r+0x210>
 8051d80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8051d84:	9b00      	ldr	r3, [sp, #0]
 8051d86:	fa08 f800 	lsl.w	r8, r8, r0
 8051d8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8051d8e:	fa23 f000 	lsr.w	r0, r3, r0
 8051d92:	ea48 0000 	orr.w	r0, r8, r0
 8051d96:	f7ee fced 	bl	8040774 <__aeabi_ui2d>
 8051d9a:	2301      	movs	r3, #1
 8051d9c:	4682      	mov	sl, r0
 8051d9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8051da2:	3d01      	subs	r5, #1
 8051da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8051da6:	e772      	b.n	8051c8e <_dtoa_r+0xf6>
 8051da8:	9b00      	ldr	r3, [sp, #0]
 8051daa:	f1c0 0020 	rsb	r0, r0, #32
 8051dae:	fa03 f000 	lsl.w	r0, r3, r0
 8051db2:	e7f0      	b.n	8051d96 <_dtoa_r+0x1fe>
 8051db4:	2301      	movs	r3, #1
 8051db6:	e7b1      	b.n	8051d1c <_dtoa_r+0x184>
 8051db8:	900f      	str	r0, [sp, #60]	; 0x3c
 8051dba:	e7b0      	b.n	8051d1e <_dtoa_r+0x186>
 8051dbc:	9b05      	ldr	r3, [sp, #20]
 8051dbe:	eba3 030a 	sub.w	r3, r3, sl
 8051dc2:	9305      	str	r3, [sp, #20]
 8051dc4:	f1ca 0300 	rsb	r3, sl, #0
 8051dc8:	9307      	str	r3, [sp, #28]
 8051dca:	2300      	movs	r3, #0
 8051dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8051dce:	e7bb      	b.n	8051d48 <_dtoa_r+0x1b0>
 8051dd0:	2301      	movs	r3, #1
 8051dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8051dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8051dd6:	2b00      	cmp	r3, #0
 8051dd8:	dd59      	ble.n	8051e8e <_dtoa_r+0x2f6>
 8051dda:	9302      	str	r3, [sp, #8]
 8051ddc:	4699      	mov	r9, r3
 8051dde:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8051de0:	2200      	movs	r2, #0
 8051de2:	6072      	str	r2, [r6, #4]
 8051de4:	2204      	movs	r2, #4
 8051de6:	f102 0014 	add.w	r0, r2, #20
 8051dea:	4298      	cmp	r0, r3
 8051dec:	6871      	ldr	r1, [r6, #4]
 8051dee:	d953      	bls.n	8051e98 <_dtoa_r+0x300>
 8051df0:	4620      	mov	r0, r4
 8051df2:	f000 fe93 	bl	8052b1c <_Balloc>
 8051df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8051df8:	6030      	str	r0, [r6, #0]
 8051dfa:	f1b9 0f0e 	cmp.w	r9, #14
 8051dfe:	f8d3 b000 	ldr.w	fp, [r3]
 8051e02:	f200 80e6 	bhi.w	8051fd2 <_dtoa_r+0x43a>
 8051e06:	2d00      	cmp	r5, #0
 8051e08:	f000 80e3 	beq.w	8051fd2 <_dtoa_r+0x43a>
 8051e0c:	ed9d 7b00 	vldr	d7, [sp]
 8051e10:	f1ba 0f00 	cmp.w	sl, #0
 8051e14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8051e18:	dd74      	ble.n	8051f04 <_dtoa_r+0x36c>
 8051e1a:	4a2a      	ldr	r2, [pc, #168]	; (8051ec4 <_dtoa_r+0x32c>)
 8051e1c:	f00a 030f 	and.w	r3, sl, #15
 8051e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8051e24:	ed93 7b00 	vldr	d7, [r3]
 8051e28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8051e2c:	06f0      	lsls	r0, r6, #27
 8051e2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8051e32:	d565      	bpl.n	8051f00 <_dtoa_r+0x368>
 8051e34:	4b24      	ldr	r3, [pc, #144]	; (8051ec8 <_dtoa_r+0x330>)
 8051e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8051e3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8051e3e:	f7ee fe3d 	bl	8040abc <__aeabi_ddiv>
 8051e42:	e9cd 0100 	strd	r0, r1, [sp]
 8051e46:	f006 060f 	and.w	r6, r6, #15
 8051e4a:	2503      	movs	r5, #3
 8051e4c:	4f1e      	ldr	r7, [pc, #120]	; (8051ec8 <_dtoa_r+0x330>)
 8051e4e:	e04c      	b.n	8051eea <_dtoa_r+0x352>
 8051e50:	2301      	movs	r3, #1
 8051e52:	930a      	str	r3, [sp, #40]	; 0x28
 8051e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8051e56:	4453      	add	r3, sl
 8051e58:	f103 0901 	add.w	r9, r3, #1
 8051e5c:	9302      	str	r3, [sp, #8]
 8051e5e:	464b      	mov	r3, r9
 8051e60:	2b01      	cmp	r3, #1
 8051e62:	bfb8      	it	lt
 8051e64:	2301      	movlt	r3, #1
 8051e66:	e7ba      	b.n	8051dde <_dtoa_r+0x246>
 8051e68:	2300      	movs	r3, #0
 8051e6a:	e7b2      	b.n	8051dd2 <_dtoa_r+0x23a>
 8051e6c:	2300      	movs	r3, #0
 8051e6e:	e7f0      	b.n	8051e52 <_dtoa_r+0x2ba>
 8051e70:	2501      	movs	r5, #1
 8051e72:	2300      	movs	r3, #0
 8051e74:	9306      	str	r3, [sp, #24]
 8051e76:	950a      	str	r5, [sp, #40]	; 0x28
 8051e78:	f04f 33ff 	mov.w	r3, #4294967295
 8051e7c:	9302      	str	r3, [sp, #8]
 8051e7e:	4699      	mov	r9, r3
 8051e80:	2200      	movs	r2, #0
 8051e82:	2312      	movs	r3, #18
 8051e84:	920b      	str	r2, [sp, #44]	; 0x2c
 8051e86:	e7aa      	b.n	8051dde <_dtoa_r+0x246>
 8051e88:	2301      	movs	r3, #1
 8051e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8051e8c:	e7f4      	b.n	8051e78 <_dtoa_r+0x2e0>
 8051e8e:	2301      	movs	r3, #1
 8051e90:	9302      	str	r3, [sp, #8]
 8051e92:	4699      	mov	r9, r3
 8051e94:	461a      	mov	r2, r3
 8051e96:	e7f5      	b.n	8051e84 <_dtoa_r+0x2ec>
 8051e98:	3101      	adds	r1, #1
 8051e9a:	6071      	str	r1, [r6, #4]
 8051e9c:	0052      	lsls	r2, r2, #1
 8051e9e:	e7a2      	b.n	8051de6 <_dtoa_r+0x24e>
 8051ea0:	636f4361 	.word	0x636f4361
 8051ea4:	3fd287a7 	.word	0x3fd287a7
 8051ea8:	8b60c8b3 	.word	0x8b60c8b3
 8051eac:	3fc68a28 	.word	0x3fc68a28
 8051eb0:	509f79fb 	.word	0x509f79fb
 8051eb4:	3fd34413 	.word	0x3fd34413
 8051eb8:	7ff00000 	.word	0x7ff00000
 8051ebc:	080542e0 	.word	0x080542e0
 8051ec0:	3ff80000 	.word	0x3ff80000
 8051ec4:	08055018 	.word	0x08055018
 8051ec8:	08054ff0 	.word	0x08054ff0
 8051ecc:	08054f7f 	.word	0x08054f7f
 8051ed0:	07f1      	lsls	r1, r6, #31
 8051ed2:	d508      	bpl.n	8051ee6 <_dtoa_r+0x34e>
 8051ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8051ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8051edc:	f7ee fcc4 	bl	8040868 <__aeabi_dmul>
 8051ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8051ee4:	3501      	adds	r5, #1
 8051ee6:	1076      	asrs	r6, r6, #1
 8051ee8:	3708      	adds	r7, #8
 8051eea:	2e00      	cmp	r6, #0
 8051eec:	d1f0      	bne.n	8051ed0 <_dtoa_r+0x338>
 8051eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8051ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8051ef6:	f7ee fde1 	bl	8040abc <__aeabi_ddiv>
 8051efa:	e9cd 0100 	strd	r0, r1, [sp]
 8051efe:	e01a      	b.n	8051f36 <_dtoa_r+0x39e>
 8051f00:	2502      	movs	r5, #2
 8051f02:	e7a3      	b.n	8051e4c <_dtoa_r+0x2b4>
 8051f04:	f000 80a0 	beq.w	8052048 <_dtoa_r+0x4b0>
 8051f08:	f1ca 0600 	rsb	r6, sl, #0
 8051f0c:	4b9f      	ldr	r3, [pc, #636]	; (805218c <_dtoa_r+0x5f4>)
 8051f0e:	4fa0      	ldr	r7, [pc, #640]	; (8052190 <_dtoa_r+0x5f8>)
 8051f10:	f006 020f 	and.w	r2, r6, #15
 8051f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8051f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051f1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8051f20:	f7ee fca2 	bl	8040868 <__aeabi_dmul>
 8051f24:	e9cd 0100 	strd	r0, r1, [sp]
 8051f28:	1136      	asrs	r6, r6, #4
 8051f2a:	2300      	movs	r3, #0
 8051f2c:	2502      	movs	r5, #2
 8051f2e:	2e00      	cmp	r6, #0
 8051f30:	d17f      	bne.n	8052032 <_dtoa_r+0x49a>
 8051f32:	2b00      	cmp	r3, #0
 8051f34:	d1e1      	bne.n	8051efa <_dtoa_r+0x362>
 8051f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8051f38:	2b00      	cmp	r3, #0
 8051f3a:	f000 8087 	beq.w	805204c <_dtoa_r+0x4b4>
 8051f3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8051f42:	2200      	movs	r2, #0
 8051f44:	4b93      	ldr	r3, [pc, #588]	; (8052194 <_dtoa_r+0x5fc>)
 8051f46:	4630      	mov	r0, r6
 8051f48:	4639      	mov	r1, r7
 8051f4a:	f7ee feff 	bl	8040d4c <__aeabi_dcmplt>
 8051f4e:	2800      	cmp	r0, #0
 8051f50:	d07c      	beq.n	805204c <_dtoa_r+0x4b4>
 8051f52:	f1b9 0f00 	cmp.w	r9, #0
 8051f56:	d079      	beq.n	805204c <_dtoa_r+0x4b4>
 8051f58:	9b02      	ldr	r3, [sp, #8]
 8051f5a:	2b00      	cmp	r3, #0
 8051f5c:	dd35      	ble.n	8051fca <_dtoa_r+0x432>
 8051f5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8051f62:	9308      	str	r3, [sp, #32]
 8051f64:	4639      	mov	r1, r7
 8051f66:	2200      	movs	r2, #0
 8051f68:	4b8b      	ldr	r3, [pc, #556]	; (8052198 <_dtoa_r+0x600>)
 8051f6a:	4630      	mov	r0, r6
 8051f6c:	f7ee fc7c 	bl	8040868 <__aeabi_dmul>
 8051f70:	e9cd 0100 	strd	r0, r1, [sp]
 8051f74:	9f02      	ldr	r7, [sp, #8]
 8051f76:	3501      	adds	r5, #1
 8051f78:	4628      	mov	r0, r5
 8051f7a:	f7ee fc0b 	bl	8040794 <__aeabi_i2d>
 8051f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8051f82:	f7ee fc71 	bl	8040868 <__aeabi_dmul>
 8051f86:	2200      	movs	r2, #0
 8051f88:	4b84      	ldr	r3, [pc, #528]	; (805219c <_dtoa_r+0x604>)
 8051f8a:	f7ee fab7 	bl	80404fc <__adddf3>
 8051f8e:	4605      	mov	r5, r0
 8051f90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8051f94:	2f00      	cmp	r7, #0
 8051f96:	d15d      	bne.n	8052054 <_dtoa_r+0x4bc>
 8051f98:	2200      	movs	r2, #0
 8051f9a:	4b81      	ldr	r3, [pc, #516]	; (80521a0 <_dtoa_r+0x608>)
 8051f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8051fa0:	f7ee faaa 	bl	80404f8 <__aeabi_dsub>
 8051fa4:	462a      	mov	r2, r5
 8051fa6:	4633      	mov	r3, r6
 8051fa8:	e9cd 0100 	strd	r0, r1, [sp]
 8051fac:	f7ee feec 	bl	8040d88 <__aeabi_dcmpgt>
 8051fb0:	2800      	cmp	r0, #0
 8051fb2:	f040 8288 	bne.w	80524c6 <_dtoa_r+0x92e>
 8051fb6:	462a      	mov	r2, r5
 8051fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8051fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8051fc0:	f7ee fec4 	bl	8040d4c <__aeabi_dcmplt>
 8051fc4:	2800      	cmp	r0, #0
 8051fc6:	f040 827c 	bne.w	80524c2 <_dtoa_r+0x92a>
 8051fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8051fce:	e9cd 2300 	strd	r2, r3, [sp]
 8051fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8051fd4:	2b00      	cmp	r3, #0
 8051fd6:	f2c0 8150 	blt.w	805227a <_dtoa_r+0x6e2>
 8051fda:	f1ba 0f0e 	cmp.w	sl, #14
 8051fde:	f300 814c 	bgt.w	805227a <_dtoa_r+0x6e2>
 8051fe2:	4b6a      	ldr	r3, [pc, #424]	; (805218c <_dtoa_r+0x5f4>)
 8051fe4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8051fe8:	ed93 7b00 	vldr	d7, [r3]
 8051fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8051fee:	2b00      	cmp	r3, #0
 8051ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8051ff4:	f280 80d8 	bge.w	80521a8 <_dtoa_r+0x610>
 8051ff8:	f1b9 0f00 	cmp.w	r9, #0
 8051ffc:	f300 80d4 	bgt.w	80521a8 <_dtoa_r+0x610>
 8052000:	f040 825e 	bne.w	80524c0 <_dtoa_r+0x928>
 8052004:	2200      	movs	r2, #0
 8052006:	4b66      	ldr	r3, [pc, #408]	; (80521a0 <_dtoa_r+0x608>)
 8052008:	ec51 0b17 	vmov	r0, r1, d7
 805200c:	f7ee fc2c 	bl	8040868 <__aeabi_dmul>
 8052010:	e9dd 2300 	ldrd	r2, r3, [sp]
 8052014:	f7ee feae 	bl	8040d74 <__aeabi_dcmpge>
 8052018:	464f      	mov	r7, r9
 805201a:	464e      	mov	r6, r9
 805201c:	2800      	cmp	r0, #0
 805201e:	f040 8234 	bne.w	805248a <_dtoa_r+0x8f2>
 8052022:	2331      	movs	r3, #49	; 0x31
 8052024:	f10b 0501 	add.w	r5, fp, #1
 8052028:	f88b 3000 	strb.w	r3, [fp]
 805202c:	f10a 0a01 	add.w	sl, sl, #1
 8052030:	e22f      	b.n	8052492 <_dtoa_r+0x8fa>
 8052032:	07f2      	lsls	r2, r6, #31
 8052034:	d505      	bpl.n	8052042 <_dtoa_r+0x4aa>
 8052036:	e9d7 2300 	ldrd	r2, r3, [r7]
 805203a:	f7ee fc15 	bl	8040868 <__aeabi_dmul>
 805203e:	3501      	adds	r5, #1
 8052040:	2301      	movs	r3, #1
 8052042:	1076      	asrs	r6, r6, #1
 8052044:	3708      	adds	r7, #8
 8052046:	e772      	b.n	8051f2e <_dtoa_r+0x396>
 8052048:	2502      	movs	r5, #2
 805204a:	e774      	b.n	8051f36 <_dtoa_r+0x39e>
 805204c:	f8cd a020 	str.w	sl, [sp, #32]
 8052050:	464f      	mov	r7, r9
 8052052:	e791      	b.n	8051f78 <_dtoa_r+0x3e0>
 8052054:	4b4d      	ldr	r3, [pc, #308]	; (805218c <_dtoa_r+0x5f4>)
 8052056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 805205a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 805205e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8052060:	2b00      	cmp	r3, #0
 8052062:	d047      	beq.n	80520f4 <_dtoa_r+0x55c>
 8052064:	4602      	mov	r2, r0
 8052066:	460b      	mov	r3, r1
 8052068:	2000      	movs	r0, #0
 805206a:	494e      	ldr	r1, [pc, #312]	; (80521a4 <_dtoa_r+0x60c>)
 805206c:	f7ee fd26 	bl	8040abc <__aeabi_ddiv>
 8052070:	462a      	mov	r2, r5
 8052072:	4633      	mov	r3, r6
 8052074:	f7ee fa40 	bl	80404f8 <__aeabi_dsub>
 8052078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 805207c:	465d      	mov	r5, fp
 805207e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8052082:	f7ee fea1 	bl	8040dc8 <__aeabi_d2iz>
 8052086:	4606      	mov	r6, r0
 8052088:	f7ee fb84 	bl	8040794 <__aeabi_i2d>
 805208c:	4602      	mov	r2, r0
 805208e:	460b      	mov	r3, r1
 8052090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8052094:	f7ee fa30 	bl	80404f8 <__aeabi_dsub>
 8052098:	3630      	adds	r6, #48	; 0x30
 805209a:	f805 6b01 	strb.w	r6, [r5], #1
 805209e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80520a2:	e9cd 0100 	strd	r0, r1, [sp]
 80520a6:	f7ee fe51 	bl	8040d4c <__aeabi_dcmplt>
 80520aa:	2800      	cmp	r0, #0
 80520ac:	d163      	bne.n	8052176 <_dtoa_r+0x5de>
 80520ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80520b2:	2000      	movs	r0, #0
 80520b4:	4937      	ldr	r1, [pc, #220]	; (8052194 <_dtoa_r+0x5fc>)
 80520b6:	f7ee fa1f 	bl	80404f8 <__aeabi_dsub>
 80520ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80520be:	f7ee fe45 	bl	8040d4c <__aeabi_dcmplt>
 80520c2:	2800      	cmp	r0, #0
 80520c4:	f040 80b7 	bne.w	8052236 <_dtoa_r+0x69e>
 80520c8:	eba5 030b 	sub.w	r3, r5, fp
 80520cc:	429f      	cmp	r7, r3
 80520ce:	f77f af7c 	ble.w	8051fca <_dtoa_r+0x432>
 80520d2:	2200      	movs	r2, #0
 80520d4:	4b30      	ldr	r3, [pc, #192]	; (8052198 <_dtoa_r+0x600>)
 80520d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80520da:	f7ee fbc5 	bl	8040868 <__aeabi_dmul>
 80520de:	2200      	movs	r2, #0
 80520e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80520e4:	4b2c      	ldr	r3, [pc, #176]	; (8052198 <_dtoa_r+0x600>)
 80520e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80520ea:	f7ee fbbd 	bl	8040868 <__aeabi_dmul>
 80520ee:	e9cd 0100 	strd	r0, r1, [sp]
 80520f2:	e7c4      	b.n	805207e <_dtoa_r+0x4e6>
 80520f4:	462a      	mov	r2, r5
 80520f6:	4633      	mov	r3, r6
 80520f8:	f7ee fbb6 	bl	8040868 <__aeabi_dmul>
 80520fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8052100:	eb0b 0507 	add.w	r5, fp, r7
 8052104:	465e      	mov	r6, fp
 8052106:	e9dd 0100 	ldrd	r0, r1, [sp]
 805210a:	f7ee fe5d 	bl	8040dc8 <__aeabi_d2iz>
 805210e:	4607      	mov	r7, r0
 8052110:	f7ee fb40 	bl	8040794 <__aeabi_i2d>
 8052114:	3730      	adds	r7, #48	; 0x30
 8052116:	4602      	mov	r2, r0
 8052118:	460b      	mov	r3, r1
 805211a:	e9dd 0100 	ldrd	r0, r1, [sp]
 805211e:	f7ee f9eb 	bl	80404f8 <__aeabi_dsub>
 8052122:	f806 7b01 	strb.w	r7, [r6], #1
 8052126:	42ae      	cmp	r6, r5
 8052128:	e9cd 0100 	strd	r0, r1, [sp]
 805212c:	f04f 0200 	mov.w	r2, #0
 8052130:	d126      	bne.n	8052180 <_dtoa_r+0x5e8>
 8052132:	4b1c      	ldr	r3, [pc, #112]	; (80521a4 <_dtoa_r+0x60c>)
 8052134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8052138:	f7ee f9e0 	bl	80404fc <__adddf3>
 805213c:	4602      	mov	r2, r0
 805213e:	460b      	mov	r3, r1
 8052140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8052144:	f7ee fe20 	bl	8040d88 <__aeabi_dcmpgt>
 8052148:	2800      	cmp	r0, #0
 805214a:	d174      	bne.n	8052236 <_dtoa_r+0x69e>
 805214c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8052150:	2000      	movs	r0, #0
 8052152:	4914      	ldr	r1, [pc, #80]	; (80521a4 <_dtoa_r+0x60c>)
 8052154:	f7ee f9d0 	bl	80404f8 <__aeabi_dsub>
 8052158:	4602      	mov	r2, r0
 805215a:	460b      	mov	r3, r1
 805215c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8052160:	f7ee fdf4 	bl	8040d4c <__aeabi_dcmplt>
 8052164:	2800      	cmp	r0, #0
 8052166:	f43f af30 	beq.w	8051fca <_dtoa_r+0x432>
 805216a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 805216e:	2b30      	cmp	r3, #48	; 0x30
 8052170:	f105 32ff 	add.w	r2, r5, #4294967295
 8052174:	d002      	beq.n	805217c <_dtoa_r+0x5e4>
 8052176:	f8dd a020 	ldr.w	sl, [sp, #32]
 805217a:	e04a      	b.n	8052212 <_dtoa_r+0x67a>
 805217c:	4615      	mov	r5, r2
 805217e:	e7f4      	b.n	805216a <_dtoa_r+0x5d2>
 8052180:	4b05      	ldr	r3, [pc, #20]	; (8052198 <_dtoa_r+0x600>)
 8052182:	f7ee fb71 	bl	8040868 <__aeabi_dmul>
 8052186:	e9cd 0100 	strd	r0, r1, [sp]
 805218a:	e7bc      	b.n	8052106 <_dtoa_r+0x56e>
 805218c:	08055018 	.word	0x08055018
 8052190:	08054ff0 	.word	0x08054ff0
 8052194:	3ff00000 	.word	0x3ff00000
 8052198:	40240000 	.word	0x40240000
 805219c:	401c0000 	.word	0x401c0000
 80521a0:	40140000 	.word	0x40140000
 80521a4:	3fe00000 	.word	0x3fe00000
 80521a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80521ac:	465d      	mov	r5, fp
 80521ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80521b2:	4630      	mov	r0, r6
 80521b4:	4639      	mov	r1, r7
 80521b6:	f7ee fc81 	bl	8040abc <__aeabi_ddiv>
 80521ba:	f7ee fe05 	bl	8040dc8 <__aeabi_d2iz>
 80521be:	4680      	mov	r8, r0
 80521c0:	f7ee fae8 	bl	8040794 <__aeabi_i2d>
 80521c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80521c8:	f7ee fb4e 	bl	8040868 <__aeabi_dmul>
 80521cc:	4602      	mov	r2, r0
 80521ce:	460b      	mov	r3, r1
 80521d0:	4630      	mov	r0, r6
 80521d2:	4639      	mov	r1, r7
 80521d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80521d8:	f7ee f98e 	bl	80404f8 <__aeabi_dsub>
 80521dc:	f805 6b01 	strb.w	r6, [r5], #1
 80521e0:	eba5 060b 	sub.w	r6, r5, fp
 80521e4:	45b1      	cmp	r9, r6
 80521e6:	4602      	mov	r2, r0
 80521e8:	460b      	mov	r3, r1
 80521ea:	d139      	bne.n	8052260 <_dtoa_r+0x6c8>
 80521ec:	f7ee f986 	bl	80404fc <__adddf3>
 80521f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80521f4:	4606      	mov	r6, r0
 80521f6:	460f      	mov	r7, r1
 80521f8:	f7ee fdc6 	bl	8040d88 <__aeabi_dcmpgt>
 80521fc:	b9c8      	cbnz	r0, 8052232 <_dtoa_r+0x69a>
 80521fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8052202:	4630      	mov	r0, r6
 8052204:	4639      	mov	r1, r7
 8052206:	f7ee fd97 	bl	8040d38 <__aeabi_dcmpeq>
 805220a:	b110      	cbz	r0, 8052212 <_dtoa_r+0x67a>
 805220c:	f018 0f01 	tst.w	r8, #1
 8052210:	d10f      	bne.n	8052232 <_dtoa_r+0x69a>
 8052212:	9904      	ldr	r1, [sp, #16]
 8052214:	4620      	mov	r0, r4
 8052216:	f000 fcb5 	bl	8052b84 <_Bfree>
 805221a:	2300      	movs	r3, #0
 805221c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 805221e:	702b      	strb	r3, [r5, #0]
 8052220:	f10a 0301 	add.w	r3, sl, #1
 8052224:	6013      	str	r3, [r2, #0]
 8052226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8052228:	2b00      	cmp	r3, #0
 805222a:	f000 8241 	beq.w	80526b0 <_dtoa_r+0xb18>
 805222e:	601d      	str	r5, [r3, #0]
 8052230:	e23e      	b.n	80526b0 <_dtoa_r+0xb18>
 8052232:	f8cd a020 	str.w	sl, [sp, #32]
 8052236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 805223a:	2a39      	cmp	r2, #57	; 0x39
 805223c:	f105 33ff 	add.w	r3, r5, #4294967295
 8052240:	d108      	bne.n	8052254 <_dtoa_r+0x6bc>
 8052242:	459b      	cmp	fp, r3
 8052244:	d10a      	bne.n	805225c <_dtoa_r+0x6c4>
 8052246:	9b08      	ldr	r3, [sp, #32]
 8052248:	3301      	adds	r3, #1
 805224a:	9308      	str	r3, [sp, #32]
 805224c:	2330      	movs	r3, #48	; 0x30
 805224e:	f88b 3000 	strb.w	r3, [fp]
 8052252:	465b      	mov	r3, fp
 8052254:	781a      	ldrb	r2, [r3, #0]
 8052256:	3201      	adds	r2, #1
 8052258:	701a      	strb	r2, [r3, #0]
 805225a:	e78c      	b.n	8052176 <_dtoa_r+0x5de>
 805225c:	461d      	mov	r5, r3
 805225e:	e7ea      	b.n	8052236 <_dtoa_r+0x69e>
 8052260:	2200      	movs	r2, #0
 8052262:	4b9b      	ldr	r3, [pc, #620]	; (80524d0 <_dtoa_r+0x938>)
 8052264:	f7ee fb00 	bl	8040868 <__aeabi_dmul>
 8052268:	2200      	movs	r2, #0
 805226a:	2300      	movs	r3, #0
 805226c:	4606      	mov	r6, r0
 805226e:	460f      	mov	r7, r1
 8052270:	f7ee fd62 	bl	8040d38 <__aeabi_dcmpeq>
 8052274:	2800      	cmp	r0, #0
 8052276:	d09a      	beq.n	80521ae <_dtoa_r+0x616>
 8052278:	e7cb      	b.n	8052212 <_dtoa_r+0x67a>
 805227a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 805227c:	2a00      	cmp	r2, #0
 805227e:	f000 808b 	beq.w	8052398 <_dtoa_r+0x800>
 8052282:	9a06      	ldr	r2, [sp, #24]
 8052284:	2a01      	cmp	r2, #1
 8052286:	dc6e      	bgt.n	8052366 <_dtoa_r+0x7ce>
 8052288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 805228a:	2a00      	cmp	r2, #0
 805228c:	d067      	beq.n	805235e <_dtoa_r+0x7c6>
 805228e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8052292:	9f07      	ldr	r7, [sp, #28]
 8052294:	9d05      	ldr	r5, [sp, #20]
 8052296:	9a05      	ldr	r2, [sp, #20]
 8052298:	2101      	movs	r1, #1
 805229a:	441a      	add	r2, r3
 805229c:	4620      	mov	r0, r4
 805229e:	9205      	str	r2, [sp, #20]
 80522a0:	4498      	add	r8, r3
 80522a2:	f000 fd0f 	bl	8052cc4 <__i2b>
 80522a6:	4606      	mov	r6, r0
 80522a8:	2d00      	cmp	r5, #0
 80522aa:	dd0c      	ble.n	80522c6 <_dtoa_r+0x72e>
 80522ac:	f1b8 0f00 	cmp.w	r8, #0
 80522b0:	dd09      	ble.n	80522c6 <_dtoa_r+0x72e>
 80522b2:	4545      	cmp	r5, r8
 80522b4:	9a05      	ldr	r2, [sp, #20]
 80522b6:	462b      	mov	r3, r5
 80522b8:	bfa8      	it	ge
 80522ba:	4643      	movge	r3, r8
 80522bc:	1ad2      	subs	r2, r2, r3
 80522be:	9205      	str	r2, [sp, #20]
 80522c0:	1aed      	subs	r5, r5, r3
 80522c2:	eba8 0803 	sub.w	r8, r8, r3
 80522c6:	9b07      	ldr	r3, [sp, #28]
 80522c8:	b1eb      	cbz	r3, 8052306 <_dtoa_r+0x76e>
 80522ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80522cc:	2b00      	cmp	r3, #0
 80522ce:	d067      	beq.n	80523a0 <_dtoa_r+0x808>
 80522d0:	b18f      	cbz	r7, 80522f6 <_dtoa_r+0x75e>
 80522d2:	4631      	mov	r1, r6
 80522d4:	463a      	mov	r2, r7
 80522d6:	4620      	mov	r0, r4
 80522d8:	f000 fd94 	bl	8052e04 <__pow5mult>
 80522dc:	9a04      	ldr	r2, [sp, #16]
 80522de:	4601      	mov	r1, r0
 80522e0:	4606      	mov	r6, r0
 80522e2:	4620      	mov	r0, r4
 80522e4:	f000 fcf7 	bl	8052cd6 <__multiply>
 80522e8:	9904      	ldr	r1, [sp, #16]
 80522ea:	9008      	str	r0, [sp, #32]
 80522ec:	4620      	mov	r0, r4
 80522ee:	f000 fc49 	bl	8052b84 <_Bfree>
 80522f2:	9b08      	ldr	r3, [sp, #32]
 80522f4:	9304      	str	r3, [sp, #16]
 80522f6:	9b07      	ldr	r3, [sp, #28]
 80522f8:	1bda      	subs	r2, r3, r7
 80522fa:	d004      	beq.n	8052306 <_dtoa_r+0x76e>
 80522fc:	9904      	ldr	r1, [sp, #16]
 80522fe:	4620      	mov	r0, r4
 8052300:	f000 fd80 	bl	8052e04 <__pow5mult>
 8052304:	9004      	str	r0, [sp, #16]
 8052306:	2101      	movs	r1, #1
 8052308:	4620      	mov	r0, r4
 805230a:	f000 fcdb 	bl	8052cc4 <__i2b>
 805230e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8052310:	4607      	mov	r7, r0
 8052312:	2b00      	cmp	r3, #0
 8052314:	f000 81d0 	beq.w	80526b8 <_dtoa_r+0xb20>
 8052318:	461a      	mov	r2, r3
 805231a:	4601      	mov	r1, r0
 805231c:	4620      	mov	r0, r4
 805231e:	f000 fd71 	bl	8052e04 <__pow5mult>
 8052322:	9b06      	ldr	r3, [sp, #24]
 8052324:	2b01      	cmp	r3, #1
 8052326:	4607      	mov	r7, r0
 8052328:	dc40      	bgt.n	80523ac <_dtoa_r+0x814>
 805232a:	9b00      	ldr	r3, [sp, #0]
 805232c:	2b00      	cmp	r3, #0
 805232e:	d139      	bne.n	80523a4 <_dtoa_r+0x80c>
 8052330:	9b01      	ldr	r3, [sp, #4]
 8052332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8052336:	2b00      	cmp	r3, #0
 8052338:	d136      	bne.n	80523a8 <_dtoa_r+0x810>
 805233a:	9b01      	ldr	r3, [sp, #4]
 805233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8052340:	0d1b      	lsrs	r3, r3, #20
 8052342:	051b      	lsls	r3, r3, #20
 8052344:	b12b      	cbz	r3, 8052352 <_dtoa_r+0x7ba>
 8052346:	9b05      	ldr	r3, [sp, #20]
 8052348:	3301      	adds	r3, #1
 805234a:	9305      	str	r3, [sp, #20]
 805234c:	f108 0801 	add.w	r8, r8, #1
 8052350:	2301      	movs	r3, #1
 8052352:	9307      	str	r3, [sp, #28]
 8052354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8052356:	2b00      	cmp	r3, #0
 8052358:	d12a      	bne.n	80523b0 <_dtoa_r+0x818>
 805235a:	2001      	movs	r0, #1
 805235c:	e030      	b.n	80523c0 <_dtoa_r+0x828>
 805235e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8052360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8052364:	e795      	b.n	8052292 <_dtoa_r+0x6fa>
 8052366:	9b07      	ldr	r3, [sp, #28]
 8052368:	f109 37ff 	add.w	r7, r9, #4294967295
 805236c:	42bb      	cmp	r3, r7
 805236e:	bfbf      	itttt	lt
 8052370:	9b07      	ldrlt	r3, [sp, #28]
 8052372:	9707      	strlt	r7, [sp, #28]
 8052374:	1afa      	sublt	r2, r7, r3
 8052376:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8052378:	bfbb      	ittet	lt
 805237a:	189b      	addlt	r3, r3, r2
 805237c:	930e      	strlt	r3, [sp, #56]	; 0x38
 805237e:	1bdf      	subge	r7, r3, r7
 8052380:	2700      	movlt	r7, #0
 8052382:	f1b9 0f00 	cmp.w	r9, #0
 8052386:	bfb5      	itete	lt
 8052388:	9b05      	ldrlt	r3, [sp, #20]
 805238a:	9d05      	ldrge	r5, [sp, #20]
 805238c:	eba3 0509 	sublt.w	r5, r3, r9
 8052390:	464b      	movge	r3, r9
 8052392:	bfb8      	it	lt
 8052394:	2300      	movlt	r3, #0
 8052396:	e77e      	b.n	8052296 <_dtoa_r+0x6fe>
 8052398:	9f07      	ldr	r7, [sp, #28]
 805239a:	9d05      	ldr	r5, [sp, #20]
 805239c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 805239e:	e783      	b.n	80522a8 <_dtoa_r+0x710>
 80523a0:	9a07      	ldr	r2, [sp, #28]
 80523a2:	e7ab      	b.n	80522fc <_dtoa_r+0x764>
 80523a4:	2300      	movs	r3, #0
 80523a6:	e7d4      	b.n	8052352 <_dtoa_r+0x7ba>
 80523a8:	9b00      	ldr	r3, [sp, #0]
 80523aa:	e7d2      	b.n	8052352 <_dtoa_r+0x7ba>
 80523ac:	2300      	movs	r3, #0
 80523ae:	9307      	str	r3, [sp, #28]
 80523b0:	693b      	ldr	r3, [r7, #16]
 80523b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80523b6:	6918      	ldr	r0, [r3, #16]
 80523b8:	f000 fc36 	bl	8052c28 <__hi0bits>
 80523bc:	f1c0 0020 	rsb	r0, r0, #32
 80523c0:	4440      	add	r0, r8
 80523c2:	f010 001f 	ands.w	r0, r0, #31
 80523c6:	d047      	beq.n	8052458 <_dtoa_r+0x8c0>
 80523c8:	f1c0 0320 	rsb	r3, r0, #32
 80523cc:	2b04      	cmp	r3, #4
 80523ce:	dd3b      	ble.n	8052448 <_dtoa_r+0x8b0>
 80523d0:	9b05      	ldr	r3, [sp, #20]
 80523d2:	f1c0 001c 	rsb	r0, r0, #28
 80523d6:	4403      	add	r3, r0
 80523d8:	9305      	str	r3, [sp, #20]
 80523da:	4405      	add	r5, r0
 80523dc:	4480      	add	r8, r0
 80523de:	9b05      	ldr	r3, [sp, #20]
 80523e0:	2b00      	cmp	r3, #0
 80523e2:	dd05      	ble.n	80523f0 <_dtoa_r+0x858>
 80523e4:	461a      	mov	r2, r3
 80523e6:	9904      	ldr	r1, [sp, #16]
 80523e8:	4620      	mov	r0, r4
 80523ea:	f000 fd59 	bl	8052ea0 <__lshift>
 80523ee:	9004      	str	r0, [sp, #16]
 80523f0:	f1b8 0f00 	cmp.w	r8, #0
 80523f4:	dd05      	ble.n	8052402 <_dtoa_r+0x86a>
 80523f6:	4639      	mov	r1, r7
 80523f8:	4642      	mov	r2, r8
 80523fa:	4620      	mov	r0, r4
 80523fc:	f000 fd50 	bl	8052ea0 <__lshift>
 8052400:	4607      	mov	r7, r0
 8052402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8052404:	b353      	cbz	r3, 805245c <_dtoa_r+0x8c4>
 8052406:	4639      	mov	r1, r7
 8052408:	9804      	ldr	r0, [sp, #16]
 805240a:	f000 fd9d 	bl	8052f48 <__mcmp>
 805240e:	2800      	cmp	r0, #0
 8052410:	da24      	bge.n	805245c <_dtoa_r+0x8c4>
 8052412:	2300      	movs	r3, #0
 8052414:	220a      	movs	r2, #10
 8052416:	9904      	ldr	r1, [sp, #16]
 8052418:	4620      	mov	r0, r4
 805241a:	f000 fbca 	bl	8052bb2 <__multadd>
 805241e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8052420:	9004      	str	r0, [sp, #16]
 8052422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8052426:	2b00      	cmp	r3, #0
 8052428:	f000 814d 	beq.w	80526c6 <_dtoa_r+0xb2e>
 805242c:	2300      	movs	r3, #0
 805242e:	4631      	mov	r1, r6
 8052430:	220a      	movs	r2, #10
 8052432:	4620      	mov	r0, r4
 8052434:	f000 fbbd 	bl	8052bb2 <__multadd>
 8052438:	9b02      	ldr	r3, [sp, #8]
 805243a:	2b00      	cmp	r3, #0
 805243c:	4606      	mov	r6, r0
 805243e:	dc4f      	bgt.n	80524e0 <_dtoa_r+0x948>
 8052440:	9b06      	ldr	r3, [sp, #24]
 8052442:	2b02      	cmp	r3, #2
 8052444:	dd4c      	ble.n	80524e0 <_dtoa_r+0x948>
 8052446:	e011      	b.n	805246c <_dtoa_r+0x8d4>
 8052448:	d0c9      	beq.n	80523de <_dtoa_r+0x846>
 805244a:	9a05      	ldr	r2, [sp, #20]
 805244c:	331c      	adds	r3, #28
 805244e:	441a      	add	r2, r3
 8052450:	9205      	str	r2, [sp, #20]
 8052452:	441d      	add	r5, r3
 8052454:	4498      	add	r8, r3
 8052456:	e7c2      	b.n	80523de <_dtoa_r+0x846>
 8052458:	4603      	mov	r3, r0
 805245a:	e7f6      	b.n	805244a <_dtoa_r+0x8b2>
 805245c:	f1b9 0f00 	cmp.w	r9, #0
 8052460:	dc38      	bgt.n	80524d4 <_dtoa_r+0x93c>
 8052462:	9b06      	ldr	r3, [sp, #24]
 8052464:	2b02      	cmp	r3, #2
 8052466:	dd35      	ble.n	80524d4 <_dtoa_r+0x93c>
 8052468:	f8cd 9008 	str.w	r9, [sp, #8]
 805246c:	9b02      	ldr	r3, [sp, #8]
 805246e:	b963      	cbnz	r3, 805248a <_dtoa_r+0x8f2>
 8052470:	4639      	mov	r1, r7
 8052472:	2205      	movs	r2, #5
 8052474:	4620      	mov	r0, r4
 8052476:	f000 fb9c 	bl	8052bb2 <__multadd>
 805247a:	4601      	mov	r1, r0
 805247c:	4607      	mov	r7, r0
 805247e:	9804      	ldr	r0, [sp, #16]
 8052480:	f000 fd62 	bl	8052f48 <__mcmp>
 8052484:	2800      	cmp	r0, #0
 8052486:	f73f adcc 	bgt.w	8052022 <_dtoa_r+0x48a>
 805248a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 805248c:	465d      	mov	r5, fp
 805248e:	ea6f 0a03 	mvn.w	sl, r3
 8052492:	f04f 0900 	mov.w	r9, #0
 8052496:	4639      	mov	r1, r7
 8052498:	4620      	mov	r0, r4
 805249a:	f000 fb73 	bl	8052b84 <_Bfree>
 805249e:	2e00      	cmp	r6, #0
 80524a0:	f43f aeb7 	beq.w	8052212 <_dtoa_r+0x67a>
 80524a4:	f1b9 0f00 	cmp.w	r9, #0
 80524a8:	d005      	beq.n	80524b6 <_dtoa_r+0x91e>
 80524aa:	45b1      	cmp	r9, r6
 80524ac:	d003      	beq.n	80524b6 <_dtoa_r+0x91e>
 80524ae:	4649      	mov	r1, r9
 80524b0:	4620      	mov	r0, r4
 80524b2:	f000 fb67 	bl	8052b84 <_Bfree>
 80524b6:	4631      	mov	r1, r6
 80524b8:	4620      	mov	r0, r4
 80524ba:	f000 fb63 	bl	8052b84 <_Bfree>
 80524be:	e6a8      	b.n	8052212 <_dtoa_r+0x67a>
 80524c0:	2700      	movs	r7, #0
 80524c2:	463e      	mov	r6, r7
 80524c4:	e7e1      	b.n	805248a <_dtoa_r+0x8f2>
 80524c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80524ca:	463e      	mov	r6, r7
 80524cc:	e5a9      	b.n	8052022 <_dtoa_r+0x48a>
 80524ce:	bf00      	nop
 80524d0:	40240000 	.word	0x40240000
 80524d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80524d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80524da:	2b00      	cmp	r3, #0
 80524dc:	f000 80fa 	beq.w	80526d4 <_dtoa_r+0xb3c>
 80524e0:	2d00      	cmp	r5, #0
 80524e2:	dd05      	ble.n	80524f0 <_dtoa_r+0x958>
 80524e4:	4631      	mov	r1, r6
 80524e6:	462a      	mov	r2, r5
 80524e8:	4620      	mov	r0, r4
 80524ea:	f000 fcd9 	bl	8052ea0 <__lshift>
 80524ee:	4606      	mov	r6, r0
 80524f0:	9b07      	ldr	r3, [sp, #28]
 80524f2:	2b00      	cmp	r3, #0
 80524f4:	d04c      	beq.n	8052590 <_dtoa_r+0x9f8>
 80524f6:	6871      	ldr	r1, [r6, #4]
 80524f8:	4620      	mov	r0, r4
 80524fa:	f000 fb0f 	bl	8052b1c <_Balloc>
 80524fe:	6932      	ldr	r2, [r6, #16]
 8052500:	3202      	adds	r2, #2
 8052502:	4605      	mov	r5, r0
 8052504:	0092      	lsls	r2, r2, #2
 8052506:	f106 010c 	add.w	r1, r6, #12
 805250a:	300c      	adds	r0, #12
 805250c:	f7fe fb5a 	bl	8050bc4 <memcpy>
 8052510:	2201      	movs	r2, #1
 8052512:	4629      	mov	r1, r5
 8052514:	4620      	mov	r0, r4
 8052516:	f000 fcc3 	bl	8052ea0 <__lshift>
 805251a:	9b00      	ldr	r3, [sp, #0]
 805251c:	f8cd b014 	str.w	fp, [sp, #20]
 8052520:	f003 0301 	and.w	r3, r3, #1
 8052524:	46b1      	mov	r9, r6
 8052526:	9307      	str	r3, [sp, #28]
 8052528:	4606      	mov	r6, r0
 805252a:	4639      	mov	r1, r7
 805252c:	9804      	ldr	r0, [sp, #16]
 805252e:	f7ff faa5 	bl	8051a7c <quorem>
 8052532:	4649      	mov	r1, r9
 8052534:	4605      	mov	r5, r0
 8052536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 805253a:	9804      	ldr	r0, [sp, #16]
 805253c:	f000 fd04 	bl	8052f48 <__mcmp>
 8052540:	4632      	mov	r2, r6
 8052542:	9000      	str	r0, [sp, #0]
 8052544:	4639      	mov	r1, r7
 8052546:	4620      	mov	r0, r4
 8052548:	f000 fd18 	bl	8052f7c <__mdiff>
 805254c:	68c3      	ldr	r3, [r0, #12]
 805254e:	4602      	mov	r2, r0
 8052550:	bb03      	cbnz	r3, 8052594 <_dtoa_r+0x9fc>
 8052552:	4601      	mov	r1, r0
 8052554:	9008      	str	r0, [sp, #32]
 8052556:	9804      	ldr	r0, [sp, #16]
 8052558:	f000 fcf6 	bl	8052f48 <__mcmp>
 805255c:	9a08      	ldr	r2, [sp, #32]
 805255e:	4603      	mov	r3, r0
 8052560:	4611      	mov	r1, r2
 8052562:	4620      	mov	r0, r4
 8052564:	9308      	str	r3, [sp, #32]
 8052566:	f000 fb0d 	bl	8052b84 <_Bfree>
 805256a:	9b08      	ldr	r3, [sp, #32]
 805256c:	b9a3      	cbnz	r3, 8052598 <_dtoa_r+0xa00>
 805256e:	9a06      	ldr	r2, [sp, #24]
 8052570:	b992      	cbnz	r2, 8052598 <_dtoa_r+0xa00>
 8052572:	9a07      	ldr	r2, [sp, #28]
 8052574:	b982      	cbnz	r2, 8052598 <_dtoa_r+0xa00>
 8052576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 805257a:	d029      	beq.n	80525d0 <_dtoa_r+0xa38>
 805257c:	9b00      	ldr	r3, [sp, #0]
 805257e:	2b00      	cmp	r3, #0
 8052580:	dd01      	ble.n	8052586 <_dtoa_r+0x9ee>
 8052582:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8052586:	9b05      	ldr	r3, [sp, #20]
 8052588:	1c5d      	adds	r5, r3, #1
 805258a:	f883 8000 	strb.w	r8, [r3]
 805258e:	e782      	b.n	8052496 <_dtoa_r+0x8fe>
 8052590:	4630      	mov	r0, r6
 8052592:	e7c2      	b.n	805251a <_dtoa_r+0x982>
 8052594:	2301      	movs	r3, #1
 8052596:	e7e3      	b.n	8052560 <_dtoa_r+0x9c8>
 8052598:	9a00      	ldr	r2, [sp, #0]
 805259a:	2a00      	cmp	r2, #0
 805259c:	db04      	blt.n	80525a8 <_dtoa_r+0xa10>
 805259e:	d125      	bne.n	80525ec <_dtoa_r+0xa54>
 80525a0:	9a06      	ldr	r2, [sp, #24]
 80525a2:	bb1a      	cbnz	r2, 80525ec <_dtoa_r+0xa54>
 80525a4:	9a07      	ldr	r2, [sp, #28]
 80525a6:	bb0a      	cbnz	r2, 80525ec <_dtoa_r+0xa54>
 80525a8:	2b00      	cmp	r3, #0
 80525aa:	ddec      	ble.n	8052586 <_dtoa_r+0x9ee>
 80525ac:	2201      	movs	r2, #1
 80525ae:	9904      	ldr	r1, [sp, #16]
 80525b0:	4620      	mov	r0, r4
 80525b2:	f000 fc75 	bl	8052ea0 <__lshift>
 80525b6:	4639      	mov	r1, r7
 80525b8:	9004      	str	r0, [sp, #16]
 80525ba:	f000 fcc5 	bl	8052f48 <__mcmp>
 80525be:	2800      	cmp	r0, #0
 80525c0:	dc03      	bgt.n	80525ca <_dtoa_r+0xa32>
 80525c2:	d1e0      	bne.n	8052586 <_dtoa_r+0x9ee>
 80525c4:	f018 0f01 	tst.w	r8, #1
 80525c8:	d0dd      	beq.n	8052586 <_dtoa_r+0x9ee>
 80525ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80525ce:	d1d8      	bne.n	8052582 <_dtoa_r+0x9ea>
 80525d0:	9b05      	ldr	r3, [sp, #20]
 80525d2:	9a05      	ldr	r2, [sp, #20]
 80525d4:	1c5d      	adds	r5, r3, #1
 80525d6:	2339      	movs	r3, #57	; 0x39
 80525d8:	7013      	strb	r3, [r2, #0]
 80525da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80525de:	2b39      	cmp	r3, #57	; 0x39
 80525e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80525e4:	d04f      	beq.n	8052686 <_dtoa_r+0xaee>
 80525e6:	3301      	adds	r3, #1
 80525e8:	7013      	strb	r3, [r2, #0]
 80525ea:	e754      	b.n	8052496 <_dtoa_r+0x8fe>
 80525ec:	9a05      	ldr	r2, [sp, #20]
 80525ee:	2b00      	cmp	r3, #0
 80525f0:	f102 0501 	add.w	r5, r2, #1
 80525f4:	dd06      	ble.n	8052604 <_dtoa_r+0xa6c>
 80525f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80525fa:	d0e9      	beq.n	80525d0 <_dtoa_r+0xa38>
 80525fc:	f108 0801 	add.w	r8, r8, #1
 8052600:	9b05      	ldr	r3, [sp, #20]
 8052602:	e7c2      	b.n	805258a <_dtoa_r+0x9f2>
 8052604:	9a02      	ldr	r2, [sp, #8]
 8052606:	f805 8c01 	strb.w	r8, [r5, #-1]
 805260a:	eba5 030b 	sub.w	r3, r5, fp
 805260e:	4293      	cmp	r3, r2
 8052610:	d021      	beq.n	8052656 <_dtoa_r+0xabe>
 8052612:	2300      	movs	r3, #0
 8052614:	220a      	movs	r2, #10
 8052616:	9904      	ldr	r1, [sp, #16]
 8052618:	4620      	mov	r0, r4
 805261a:	f000 faca 	bl	8052bb2 <__multadd>
 805261e:	45b1      	cmp	r9, r6
 8052620:	9004      	str	r0, [sp, #16]
 8052622:	f04f 0300 	mov.w	r3, #0
 8052626:	f04f 020a 	mov.w	r2, #10
 805262a:	4649      	mov	r1, r9
 805262c:	4620      	mov	r0, r4
 805262e:	d105      	bne.n	805263c <_dtoa_r+0xaa4>
 8052630:	f000 fabf 	bl	8052bb2 <__multadd>
 8052634:	4681      	mov	r9, r0
 8052636:	4606      	mov	r6, r0
 8052638:	9505      	str	r5, [sp, #20]
 805263a:	e776      	b.n	805252a <_dtoa_r+0x992>
 805263c:	f000 fab9 	bl	8052bb2 <__multadd>
 8052640:	4631      	mov	r1, r6
 8052642:	4681      	mov	r9, r0
 8052644:	2300      	movs	r3, #0
 8052646:	220a      	movs	r2, #10
 8052648:	4620      	mov	r0, r4
 805264a:	f000 fab2 	bl	8052bb2 <__multadd>
 805264e:	4606      	mov	r6, r0
 8052650:	e7f2      	b.n	8052638 <_dtoa_r+0xaa0>
 8052652:	f04f 0900 	mov.w	r9, #0
 8052656:	2201      	movs	r2, #1
 8052658:	9904      	ldr	r1, [sp, #16]
 805265a:	4620      	mov	r0, r4
 805265c:	f000 fc20 	bl	8052ea0 <__lshift>
 8052660:	4639      	mov	r1, r7
 8052662:	9004      	str	r0, [sp, #16]
 8052664:	f000 fc70 	bl	8052f48 <__mcmp>
 8052668:	2800      	cmp	r0, #0
 805266a:	dcb6      	bgt.n	80525da <_dtoa_r+0xa42>
 805266c:	d102      	bne.n	8052674 <_dtoa_r+0xadc>
 805266e:	f018 0f01 	tst.w	r8, #1
 8052672:	d1b2      	bne.n	80525da <_dtoa_r+0xa42>
 8052674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8052678:	2b30      	cmp	r3, #48	; 0x30
 805267a:	f105 32ff 	add.w	r2, r5, #4294967295
 805267e:	f47f af0a 	bne.w	8052496 <_dtoa_r+0x8fe>
 8052682:	4615      	mov	r5, r2
 8052684:	e7f6      	b.n	8052674 <_dtoa_r+0xadc>
 8052686:	4593      	cmp	fp, r2
 8052688:	d105      	bne.n	8052696 <_dtoa_r+0xafe>
 805268a:	2331      	movs	r3, #49	; 0x31
 805268c:	f10a 0a01 	add.w	sl, sl, #1
 8052690:	f88b 3000 	strb.w	r3, [fp]
 8052694:	e6ff      	b.n	8052496 <_dtoa_r+0x8fe>
 8052696:	4615      	mov	r5, r2
 8052698:	e79f      	b.n	80525da <_dtoa_r+0xa42>
 805269a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8052700 <_dtoa_r+0xb68>
 805269e:	e007      	b.n	80526b0 <_dtoa_r+0xb18>
 80526a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80526a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8052704 <_dtoa_r+0xb6c>
 80526a6:	b11b      	cbz	r3, 80526b0 <_dtoa_r+0xb18>
 80526a8:	f10b 0308 	add.w	r3, fp, #8
 80526ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80526ae:	6013      	str	r3, [r2, #0]
 80526b0:	4658      	mov	r0, fp
 80526b2:	b017      	add	sp, #92	; 0x5c
 80526b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80526b8:	9b06      	ldr	r3, [sp, #24]
 80526ba:	2b01      	cmp	r3, #1
 80526bc:	f77f ae35 	ble.w	805232a <_dtoa_r+0x792>
 80526c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80526c2:	9307      	str	r3, [sp, #28]
 80526c4:	e649      	b.n	805235a <_dtoa_r+0x7c2>
 80526c6:	9b02      	ldr	r3, [sp, #8]
 80526c8:	2b00      	cmp	r3, #0
 80526ca:	dc03      	bgt.n	80526d4 <_dtoa_r+0xb3c>
 80526cc:	9b06      	ldr	r3, [sp, #24]
 80526ce:	2b02      	cmp	r3, #2
 80526d0:	f73f aecc 	bgt.w	805246c <_dtoa_r+0x8d4>
 80526d4:	465d      	mov	r5, fp
 80526d6:	4639      	mov	r1, r7
 80526d8:	9804      	ldr	r0, [sp, #16]
 80526da:	f7ff f9cf 	bl	8051a7c <quorem>
 80526de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80526e2:	f805 8b01 	strb.w	r8, [r5], #1
 80526e6:	9a02      	ldr	r2, [sp, #8]
 80526e8:	eba5 030b 	sub.w	r3, r5, fp
 80526ec:	429a      	cmp	r2, r3
 80526ee:	ddb0      	ble.n	8052652 <_dtoa_r+0xaba>
 80526f0:	2300      	movs	r3, #0
 80526f2:	220a      	movs	r2, #10
 80526f4:	9904      	ldr	r1, [sp, #16]
 80526f6:	4620      	mov	r0, r4
 80526f8:	f000 fa5b 	bl	8052bb2 <__multadd>
 80526fc:	9004      	str	r0, [sp, #16]
 80526fe:	e7ea      	b.n	80526d6 <_dtoa_r+0xb3e>
 8052700:	080542df 	.word	0x080542df
 8052704:	08054f76 	.word	0x08054f76

08052708 <__sflush_r>:
 8052708:	898a      	ldrh	r2, [r1, #12]
 805270a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805270e:	4605      	mov	r5, r0
 8052710:	0710      	lsls	r0, r2, #28
 8052712:	460c      	mov	r4, r1
 8052714:	d458      	bmi.n	80527c8 <__sflush_r+0xc0>
 8052716:	684b      	ldr	r3, [r1, #4]
 8052718:	2b00      	cmp	r3, #0
 805271a:	dc05      	bgt.n	8052728 <__sflush_r+0x20>
 805271c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 805271e:	2b00      	cmp	r3, #0
 8052720:	dc02      	bgt.n	8052728 <__sflush_r+0x20>
 8052722:	2000      	movs	r0, #0
 8052724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8052728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 805272a:	2e00      	cmp	r6, #0
 805272c:	d0f9      	beq.n	8052722 <__sflush_r+0x1a>
 805272e:	2300      	movs	r3, #0
 8052730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8052734:	682f      	ldr	r7, [r5, #0]
 8052736:	6a21      	ldr	r1, [r4, #32]
 8052738:	602b      	str	r3, [r5, #0]
 805273a:	d032      	beq.n	80527a2 <__sflush_r+0x9a>
 805273c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 805273e:	89a3      	ldrh	r3, [r4, #12]
 8052740:	075a      	lsls	r2, r3, #29
 8052742:	d505      	bpl.n	8052750 <__sflush_r+0x48>
 8052744:	6863      	ldr	r3, [r4, #4]
 8052746:	1ac0      	subs	r0, r0, r3
 8052748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 805274a:	b10b      	cbz	r3, 8052750 <__sflush_r+0x48>
 805274c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 805274e:	1ac0      	subs	r0, r0, r3
 8052750:	2300      	movs	r3, #0
 8052752:	4602      	mov	r2, r0
 8052754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8052756:	6a21      	ldr	r1, [r4, #32]
 8052758:	4628      	mov	r0, r5
 805275a:	47b0      	blx	r6
 805275c:	1c43      	adds	r3, r0, #1
 805275e:	89a3      	ldrh	r3, [r4, #12]
 8052760:	d106      	bne.n	8052770 <__sflush_r+0x68>
 8052762:	6829      	ldr	r1, [r5, #0]
 8052764:	291d      	cmp	r1, #29
 8052766:	d848      	bhi.n	80527fa <__sflush_r+0xf2>
 8052768:	4a29      	ldr	r2, [pc, #164]	; (8052810 <__sflush_r+0x108>)
 805276a:	40ca      	lsrs	r2, r1
 805276c:	07d6      	lsls	r6, r2, #31
 805276e:	d544      	bpl.n	80527fa <__sflush_r+0xf2>
 8052770:	2200      	movs	r2, #0
 8052772:	6062      	str	r2, [r4, #4]
 8052774:	04d9      	lsls	r1, r3, #19
 8052776:	6922      	ldr	r2, [r4, #16]
 8052778:	6022      	str	r2, [r4, #0]
 805277a:	d504      	bpl.n	8052786 <__sflush_r+0x7e>
 805277c:	1c42      	adds	r2, r0, #1
 805277e:	d101      	bne.n	8052784 <__sflush_r+0x7c>
 8052780:	682b      	ldr	r3, [r5, #0]
 8052782:	b903      	cbnz	r3, 8052786 <__sflush_r+0x7e>
 8052784:	6560      	str	r0, [r4, #84]	; 0x54
 8052786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8052788:	602f      	str	r7, [r5, #0]
 805278a:	2900      	cmp	r1, #0
 805278c:	d0c9      	beq.n	8052722 <__sflush_r+0x1a>
 805278e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8052792:	4299      	cmp	r1, r3
 8052794:	d002      	beq.n	805279c <__sflush_r+0x94>
 8052796:	4628      	mov	r0, r5
 8052798:	f000 fcaa 	bl	80530f0 <_free_r>
 805279c:	2000      	movs	r0, #0
 805279e:	6360      	str	r0, [r4, #52]	; 0x34
 80527a0:	e7c0      	b.n	8052724 <__sflush_r+0x1c>
 80527a2:	2301      	movs	r3, #1
 80527a4:	4628      	mov	r0, r5
 80527a6:	47b0      	blx	r6
 80527a8:	1c41      	adds	r1, r0, #1
 80527aa:	d1c8      	bne.n	805273e <__sflush_r+0x36>
 80527ac:	682b      	ldr	r3, [r5, #0]
 80527ae:	2b00      	cmp	r3, #0
 80527b0:	d0c5      	beq.n	805273e <__sflush_r+0x36>
 80527b2:	2b1d      	cmp	r3, #29
 80527b4:	d001      	beq.n	80527ba <__sflush_r+0xb2>
 80527b6:	2b16      	cmp	r3, #22
 80527b8:	d101      	bne.n	80527be <__sflush_r+0xb6>
 80527ba:	602f      	str	r7, [r5, #0]
 80527bc:	e7b1      	b.n	8052722 <__sflush_r+0x1a>
 80527be:	89a3      	ldrh	r3, [r4, #12]
 80527c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80527c4:	81a3      	strh	r3, [r4, #12]
 80527c6:	e7ad      	b.n	8052724 <__sflush_r+0x1c>
 80527c8:	690f      	ldr	r7, [r1, #16]
 80527ca:	2f00      	cmp	r7, #0
 80527cc:	d0a9      	beq.n	8052722 <__sflush_r+0x1a>
 80527ce:	0793      	lsls	r3, r2, #30
 80527d0:	680e      	ldr	r6, [r1, #0]
 80527d2:	bf08      	it	eq
 80527d4:	694b      	ldreq	r3, [r1, #20]
 80527d6:	600f      	str	r7, [r1, #0]
 80527d8:	bf18      	it	ne
 80527da:	2300      	movne	r3, #0
 80527dc:	eba6 0807 	sub.w	r8, r6, r7
 80527e0:	608b      	str	r3, [r1, #8]
 80527e2:	f1b8 0f00 	cmp.w	r8, #0
 80527e6:	dd9c      	ble.n	8052722 <__sflush_r+0x1a>
 80527e8:	4643      	mov	r3, r8
 80527ea:	463a      	mov	r2, r7
 80527ec:	6a21      	ldr	r1, [r4, #32]
 80527ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80527f0:	4628      	mov	r0, r5
 80527f2:	47b0      	blx	r6
 80527f4:	2800      	cmp	r0, #0
 80527f6:	dc06      	bgt.n	8052806 <__sflush_r+0xfe>
 80527f8:	89a3      	ldrh	r3, [r4, #12]
 80527fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80527fe:	81a3      	strh	r3, [r4, #12]
 8052800:	f04f 30ff 	mov.w	r0, #4294967295
 8052804:	e78e      	b.n	8052724 <__sflush_r+0x1c>
 8052806:	4407      	add	r7, r0
 8052808:	eba8 0800 	sub.w	r8, r8, r0
 805280c:	e7e9      	b.n	80527e2 <__sflush_r+0xda>
 805280e:	bf00      	nop
 8052810:	20400001 	.word	0x20400001

08052814 <_fflush_r>:
 8052814:	b538      	push	{r3, r4, r5, lr}
 8052816:	690b      	ldr	r3, [r1, #16]
 8052818:	4605      	mov	r5, r0
 805281a:	460c      	mov	r4, r1
 805281c:	b1db      	cbz	r3, 8052856 <_fflush_r+0x42>
 805281e:	b118      	cbz	r0, 8052828 <_fflush_r+0x14>
 8052820:	6983      	ldr	r3, [r0, #24]
 8052822:	b90b      	cbnz	r3, 8052828 <_fflush_r+0x14>
 8052824:	f000 f860 	bl	80528e8 <__sinit>
 8052828:	4b0c      	ldr	r3, [pc, #48]	; (805285c <_fflush_r+0x48>)
 805282a:	429c      	cmp	r4, r3
 805282c:	d109      	bne.n	8052842 <_fflush_r+0x2e>
 805282e:	686c      	ldr	r4, [r5, #4]
 8052830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8052834:	b17b      	cbz	r3, 8052856 <_fflush_r+0x42>
 8052836:	4621      	mov	r1, r4
 8052838:	4628      	mov	r0, r5
 805283a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805283e:	f7ff bf63 	b.w	8052708 <__sflush_r>
 8052842:	4b07      	ldr	r3, [pc, #28]	; (8052860 <_fflush_r+0x4c>)
 8052844:	429c      	cmp	r4, r3
 8052846:	d101      	bne.n	805284c <_fflush_r+0x38>
 8052848:	68ac      	ldr	r4, [r5, #8]
 805284a:	e7f1      	b.n	8052830 <_fflush_r+0x1c>
 805284c:	4b05      	ldr	r3, [pc, #20]	; (8052864 <_fflush_r+0x50>)
 805284e:	429c      	cmp	r4, r3
 8052850:	bf08      	it	eq
 8052852:	68ec      	ldreq	r4, [r5, #12]
 8052854:	e7ec      	b.n	8052830 <_fflush_r+0x1c>
 8052856:	2000      	movs	r0, #0
 8052858:	bd38      	pop	{r3, r4, r5, pc}
 805285a:	bf00      	nop
 805285c:	08054fa4 	.word	0x08054fa4
 8052860:	08054fc4 	.word	0x08054fc4
 8052864:	08054f84 	.word	0x08054f84

08052868 <std>:
 8052868:	2300      	movs	r3, #0
 805286a:	b510      	push	{r4, lr}
 805286c:	4604      	mov	r4, r0
 805286e:	e9c0 3300 	strd	r3, r3, [r0]
 8052872:	6083      	str	r3, [r0, #8]
 8052874:	8181      	strh	r1, [r0, #12]
 8052876:	6643      	str	r3, [r0, #100]	; 0x64
 8052878:	81c2      	strh	r2, [r0, #14]
 805287a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 805287e:	6183      	str	r3, [r0, #24]
 8052880:	4619      	mov	r1, r3
 8052882:	2208      	movs	r2, #8
 8052884:	305c      	adds	r0, #92	; 0x5c
 8052886:	f7fe f9a8 	bl	8050bda <memset>
 805288a:	4b05      	ldr	r3, [pc, #20]	; (80528a0 <std+0x38>)
 805288c:	6263      	str	r3, [r4, #36]	; 0x24
 805288e:	4b05      	ldr	r3, [pc, #20]	; (80528a4 <std+0x3c>)
 8052890:	62a3      	str	r3, [r4, #40]	; 0x28
 8052892:	4b05      	ldr	r3, [pc, #20]	; (80528a8 <std+0x40>)
 8052894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8052896:	4b05      	ldr	r3, [pc, #20]	; (80528ac <std+0x44>)
 8052898:	6224      	str	r4, [r4, #32]
 805289a:	6323      	str	r3, [r4, #48]	; 0x30
 805289c:	bd10      	pop	{r4, pc}
 805289e:	bf00      	nop
 80528a0:	08053785 	.word	0x08053785
 80528a4:	080537a7 	.word	0x080537a7
 80528a8:	080537df 	.word	0x080537df
 80528ac:	08053803 	.word	0x08053803

080528b0 <_cleanup_r>:
 80528b0:	4901      	ldr	r1, [pc, #4]	; (80528b8 <_cleanup_r+0x8>)
 80528b2:	f000 b885 	b.w	80529c0 <_fwalk_reent>
 80528b6:	bf00      	nop
 80528b8:	08052815 	.word	0x08052815

080528bc <__sfmoreglue>:
 80528bc:	b570      	push	{r4, r5, r6, lr}
 80528be:	1e4a      	subs	r2, r1, #1
 80528c0:	2568      	movs	r5, #104	; 0x68
 80528c2:	4355      	muls	r5, r2
 80528c4:	460e      	mov	r6, r1
 80528c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80528ca:	f000 fc5f 	bl	805318c <_malloc_r>
 80528ce:	4604      	mov	r4, r0
 80528d0:	b140      	cbz	r0, 80528e4 <__sfmoreglue+0x28>
 80528d2:	2100      	movs	r1, #0
 80528d4:	e9c0 1600 	strd	r1, r6, [r0]
 80528d8:	300c      	adds	r0, #12
 80528da:	60a0      	str	r0, [r4, #8]
 80528dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80528e0:	f7fe f97b 	bl	8050bda <memset>
 80528e4:	4620      	mov	r0, r4
 80528e6:	bd70      	pop	{r4, r5, r6, pc}

080528e8 <__sinit>:
 80528e8:	6983      	ldr	r3, [r0, #24]
 80528ea:	b510      	push	{r4, lr}
 80528ec:	4604      	mov	r4, r0
 80528ee:	bb33      	cbnz	r3, 805293e <__sinit+0x56>
 80528f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80528f4:	6503      	str	r3, [r0, #80]	; 0x50
 80528f6:	4b12      	ldr	r3, [pc, #72]	; (8052940 <__sinit+0x58>)
 80528f8:	4a12      	ldr	r2, [pc, #72]	; (8052944 <__sinit+0x5c>)
 80528fa:	681b      	ldr	r3, [r3, #0]
 80528fc:	6282      	str	r2, [r0, #40]	; 0x28
 80528fe:	4298      	cmp	r0, r3
 8052900:	bf04      	itt	eq
 8052902:	2301      	moveq	r3, #1
 8052904:	6183      	streq	r3, [r0, #24]
 8052906:	f000 f81f 	bl	8052948 <__sfp>
 805290a:	6060      	str	r0, [r4, #4]
 805290c:	4620      	mov	r0, r4
 805290e:	f000 f81b 	bl	8052948 <__sfp>
 8052912:	60a0      	str	r0, [r4, #8]
 8052914:	4620      	mov	r0, r4
 8052916:	f000 f817 	bl	8052948 <__sfp>
 805291a:	2200      	movs	r2, #0
 805291c:	60e0      	str	r0, [r4, #12]
 805291e:	2104      	movs	r1, #4
 8052920:	6860      	ldr	r0, [r4, #4]
 8052922:	f7ff ffa1 	bl	8052868 <std>
 8052926:	2201      	movs	r2, #1
 8052928:	2109      	movs	r1, #9
 805292a:	68a0      	ldr	r0, [r4, #8]
 805292c:	f7ff ff9c 	bl	8052868 <std>
 8052930:	2202      	movs	r2, #2
 8052932:	2112      	movs	r1, #18
 8052934:	68e0      	ldr	r0, [r4, #12]
 8052936:	f7ff ff97 	bl	8052868 <std>
 805293a:	2301      	movs	r3, #1
 805293c:	61a3      	str	r3, [r4, #24]
 805293e:	bd10      	pop	{r4, pc}
 8052940:	08054f40 	.word	0x08054f40
 8052944:	080528b1 	.word	0x080528b1

08052948 <__sfp>:
 8052948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805294a:	4b1b      	ldr	r3, [pc, #108]	; (80529b8 <__sfp+0x70>)
 805294c:	681e      	ldr	r6, [r3, #0]
 805294e:	69b3      	ldr	r3, [r6, #24]
 8052950:	4607      	mov	r7, r0
 8052952:	b913      	cbnz	r3, 805295a <__sfp+0x12>
 8052954:	4630      	mov	r0, r6
 8052956:	f7ff ffc7 	bl	80528e8 <__sinit>
 805295a:	3648      	adds	r6, #72	; 0x48
 805295c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8052960:	3b01      	subs	r3, #1
 8052962:	d503      	bpl.n	805296c <__sfp+0x24>
 8052964:	6833      	ldr	r3, [r6, #0]
 8052966:	b133      	cbz	r3, 8052976 <__sfp+0x2e>
 8052968:	6836      	ldr	r6, [r6, #0]
 805296a:	e7f7      	b.n	805295c <__sfp+0x14>
 805296c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8052970:	b16d      	cbz	r5, 805298e <__sfp+0x46>
 8052972:	3468      	adds	r4, #104	; 0x68
 8052974:	e7f4      	b.n	8052960 <__sfp+0x18>
 8052976:	2104      	movs	r1, #4
 8052978:	4638      	mov	r0, r7
 805297a:	f7ff ff9f 	bl	80528bc <__sfmoreglue>
 805297e:	6030      	str	r0, [r6, #0]
 8052980:	2800      	cmp	r0, #0
 8052982:	d1f1      	bne.n	8052968 <__sfp+0x20>
 8052984:	230c      	movs	r3, #12
 8052986:	603b      	str	r3, [r7, #0]
 8052988:	4604      	mov	r4, r0
 805298a:	4620      	mov	r0, r4
 805298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 805298e:	4b0b      	ldr	r3, [pc, #44]	; (80529bc <__sfp+0x74>)
 8052990:	6665      	str	r5, [r4, #100]	; 0x64
 8052992:	e9c4 5500 	strd	r5, r5, [r4]
 8052996:	60a5      	str	r5, [r4, #8]
 8052998:	e9c4 3503 	strd	r3, r5, [r4, #12]
 805299c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80529a0:	2208      	movs	r2, #8
 80529a2:	4629      	mov	r1, r5
 80529a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80529a8:	f7fe f917 	bl	8050bda <memset>
 80529ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80529b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80529b4:	e7e9      	b.n	805298a <__sfp+0x42>
 80529b6:	bf00      	nop
 80529b8:	08054f40 	.word	0x08054f40
 80529bc:	ffff0001 	.word	0xffff0001

080529c0 <_fwalk_reent>:
 80529c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80529c4:	4680      	mov	r8, r0
 80529c6:	4689      	mov	r9, r1
 80529c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80529cc:	2600      	movs	r6, #0
 80529ce:	b914      	cbnz	r4, 80529d6 <_fwalk_reent+0x16>
 80529d0:	4630      	mov	r0, r6
 80529d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80529d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80529da:	3f01      	subs	r7, #1
 80529dc:	d501      	bpl.n	80529e2 <_fwalk_reent+0x22>
 80529de:	6824      	ldr	r4, [r4, #0]
 80529e0:	e7f5      	b.n	80529ce <_fwalk_reent+0xe>
 80529e2:	89ab      	ldrh	r3, [r5, #12]
 80529e4:	2b01      	cmp	r3, #1
 80529e6:	d907      	bls.n	80529f8 <_fwalk_reent+0x38>
 80529e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80529ec:	3301      	adds	r3, #1
 80529ee:	d003      	beq.n	80529f8 <_fwalk_reent+0x38>
 80529f0:	4629      	mov	r1, r5
 80529f2:	4640      	mov	r0, r8
 80529f4:	47c8      	blx	r9
 80529f6:	4306      	orrs	r6, r0
 80529f8:	3568      	adds	r5, #104	; 0x68
 80529fa:	e7ee      	b.n	80529da <_fwalk_reent+0x1a>

080529fc <__locale_ctype_ptr_l>:
 80529fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8052a00:	4770      	bx	lr
	...

08052a04 <_localeconv_r>:
 8052a04:	4b04      	ldr	r3, [pc, #16]	; (8052a18 <_localeconv_r+0x14>)
 8052a06:	681b      	ldr	r3, [r3, #0]
 8052a08:	6a18      	ldr	r0, [r3, #32]
 8052a0a:	4b04      	ldr	r3, [pc, #16]	; (8052a1c <_localeconv_r+0x18>)
 8052a0c:	2800      	cmp	r0, #0
 8052a0e:	bf08      	it	eq
 8052a10:	4618      	moveq	r0, r3
 8052a12:	30f0      	adds	r0, #240	; 0xf0
 8052a14:	4770      	bx	lr
 8052a16:	bf00      	nop
 8052a18:	20001210 	.word	0x20001210
 8052a1c:	20001274 	.word	0x20001274

08052a20 <__swhatbuf_r>:
 8052a20:	b570      	push	{r4, r5, r6, lr}
 8052a22:	460e      	mov	r6, r1
 8052a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8052a28:	2900      	cmp	r1, #0
 8052a2a:	b096      	sub	sp, #88	; 0x58
 8052a2c:	4614      	mov	r4, r2
 8052a2e:	461d      	mov	r5, r3
 8052a30:	da07      	bge.n	8052a42 <__swhatbuf_r+0x22>
 8052a32:	2300      	movs	r3, #0
 8052a34:	602b      	str	r3, [r5, #0]
 8052a36:	89b3      	ldrh	r3, [r6, #12]
 8052a38:	061a      	lsls	r2, r3, #24
 8052a3a:	d410      	bmi.n	8052a5e <__swhatbuf_r+0x3e>
 8052a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8052a40:	e00e      	b.n	8052a60 <__swhatbuf_r+0x40>
 8052a42:	466a      	mov	r2, sp
 8052a44:	f000 ff10 	bl	8053868 <_fstat_r>
 8052a48:	2800      	cmp	r0, #0
 8052a4a:	dbf2      	blt.n	8052a32 <__swhatbuf_r+0x12>
 8052a4c:	9a01      	ldr	r2, [sp, #4]
 8052a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8052a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8052a56:	425a      	negs	r2, r3
 8052a58:	415a      	adcs	r2, r3
 8052a5a:	602a      	str	r2, [r5, #0]
 8052a5c:	e7ee      	b.n	8052a3c <__swhatbuf_r+0x1c>
 8052a5e:	2340      	movs	r3, #64	; 0x40
 8052a60:	2000      	movs	r0, #0
 8052a62:	6023      	str	r3, [r4, #0]
 8052a64:	b016      	add	sp, #88	; 0x58
 8052a66:	bd70      	pop	{r4, r5, r6, pc}

08052a68 <__smakebuf_r>:
 8052a68:	898b      	ldrh	r3, [r1, #12]
 8052a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8052a6c:	079d      	lsls	r5, r3, #30
 8052a6e:	4606      	mov	r6, r0
 8052a70:	460c      	mov	r4, r1
 8052a72:	d507      	bpl.n	8052a84 <__smakebuf_r+0x1c>
 8052a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8052a78:	6023      	str	r3, [r4, #0]
 8052a7a:	6123      	str	r3, [r4, #16]
 8052a7c:	2301      	movs	r3, #1
 8052a7e:	6163      	str	r3, [r4, #20]
 8052a80:	b002      	add	sp, #8
 8052a82:	bd70      	pop	{r4, r5, r6, pc}
 8052a84:	ab01      	add	r3, sp, #4
 8052a86:	466a      	mov	r2, sp
 8052a88:	f7ff ffca 	bl	8052a20 <__swhatbuf_r>
 8052a8c:	9900      	ldr	r1, [sp, #0]
 8052a8e:	4605      	mov	r5, r0
 8052a90:	4630      	mov	r0, r6
 8052a92:	f000 fb7b 	bl	805318c <_malloc_r>
 8052a96:	b948      	cbnz	r0, 8052aac <__smakebuf_r+0x44>
 8052a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8052a9c:	059a      	lsls	r2, r3, #22
 8052a9e:	d4ef      	bmi.n	8052a80 <__smakebuf_r+0x18>
 8052aa0:	f023 0303 	bic.w	r3, r3, #3
 8052aa4:	f043 0302 	orr.w	r3, r3, #2
 8052aa8:	81a3      	strh	r3, [r4, #12]
 8052aaa:	e7e3      	b.n	8052a74 <__smakebuf_r+0xc>
 8052aac:	4b0d      	ldr	r3, [pc, #52]	; (8052ae4 <__smakebuf_r+0x7c>)
 8052aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8052ab0:	89a3      	ldrh	r3, [r4, #12]
 8052ab2:	6020      	str	r0, [r4, #0]
 8052ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8052ab8:	81a3      	strh	r3, [r4, #12]
 8052aba:	9b00      	ldr	r3, [sp, #0]
 8052abc:	6163      	str	r3, [r4, #20]
 8052abe:	9b01      	ldr	r3, [sp, #4]
 8052ac0:	6120      	str	r0, [r4, #16]
 8052ac2:	b15b      	cbz	r3, 8052adc <__smakebuf_r+0x74>
 8052ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8052ac8:	4630      	mov	r0, r6
 8052aca:	f000 fedf 	bl	805388c <_isatty_r>
 8052ace:	b128      	cbz	r0, 8052adc <__smakebuf_r+0x74>
 8052ad0:	89a3      	ldrh	r3, [r4, #12]
 8052ad2:	f023 0303 	bic.w	r3, r3, #3
 8052ad6:	f043 0301 	orr.w	r3, r3, #1
 8052ada:	81a3      	strh	r3, [r4, #12]
 8052adc:	89a3      	ldrh	r3, [r4, #12]
 8052ade:	431d      	orrs	r5, r3
 8052ae0:	81a5      	strh	r5, [r4, #12]
 8052ae2:	e7cd      	b.n	8052a80 <__smakebuf_r+0x18>
 8052ae4:	080528b1 	.word	0x080528b1

08052ae8 <malloc>:
 8052ae8:	4b02      	ldr	r3, [pc, #8]	; (8052af4 <malloc+0xc>)
 8052aea:	4601      	mov	r1, r0
 8052aec:	6818      	ldr	r0, [r3, #0]
 8052aee:	f000 bb4d 	b.w	805318c <_malloc_r>
 8052af2:	bf00      	nop
 8052af4:	20001210 	.word	0x20001210

08052af8 <__ascii_mbtowc>:
 8052af8:	b082      	sub	sp, #8
 8052afa:	b901      	cbnz	r1, 8052afe <__ascii_mbtowc+0x6>
 8052afc:	a901      	add	r1, sp, #4
 8052afe:	b142      	cbz	r2, 8052b12 <__ascii_mbtowc+0x1a>
 8052b00:	b14b      	cbz	r3, 8052b16 <__ascii_mbtowc+0x1e>
 8052b02:	7813      	ldrb	r3, [r2, #0]
 8052b04:	600b      	str	r3, [r1, #0]
 8052b06:	7812      	ldrb	r2, [r2, #0]
 8052b08:	1c10      	adds	r0, r2, #0
 8052b0a:	bf18      	it	ne
 8052b0c:	2001      	movne	r0, #1
 8052b0e:	b002      	add	sp, #8
 8052b10:	4770      	bx	lr
 8052b12:	4610      	mov	r0, r2
 8052b14:	e7fb      	b.n	8052b0e <__ascii_mbtowc+0x16>
 8052b16:	f06f 0001 	mvn.w	r0, #1
 8052b1a:	e7f8      	b.n	8052b0e <__ascii_mbtowc+0x16>

08052b1c <_Balloc>:
 8052b1c:	b570      	push	{r4, r5, r6, lr}
 8052b1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8052b20:	4604      	mov	r4, r0
 8052b22:	460e      	mov	r6, r1
 8052b24:	b93d      	cbnz	r5, 8052b36 <_Balloc+0x1a>
 8052b26:	2010      	movs	r0, #16
 8052b28:	f7ff ffde 	bl	8052ae8 <malloc>
 8052b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8052b2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8052b32:	6005      	str	r5, [r0, #0]
 8052b34:	60c5      	str	r5, [r0, #12]
 8052b36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8052b38:	68eb      	ldr	r3, [r5, #12]
 8052b3a:	b183      	cbz	r3, 8052b5e <_Balloc+0x42>
 8052b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8052b3e:	68db      	ldr	r3, [r3, #12]
 8052b40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8052b44:	b9b8      	cbnz	r0, 8052b76 <_Balloc+0x5a>
 8052b46:	2101      	movs	r1, #1
 8052b48:	fa01 f506 	lsl.w	r5, r1, r6
 8052b4c:	1d6a      	adds	r2, r5, #5
 8052b4e:	0092      	lsls	r2, r2, #2
 8052b50:	4620      	mov	r0, r4
 8052b52:	f000 fabf 	bl	80530d4 <_calloc_r>
 8052b56:	b160      	cbz	r0, 8052b72 <_Balloc+0x56>
 8052b58:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8052b5c:	e00e      	b.n	8052b7c <_Balloc+0x60>
 8052b5e:	2221      	movs	r2, #33	; 0x21
 8052b60:	2104      	movs	r1, #4
 8052b62:	4620      	mov	r0, r4
 8052b64:	f000 fab6 	bl	80530d4 <_calloc_r>
 8052b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8052b6a:	60e8      	str	r0, [r5, #12]
 8052b6c:	68db      	ldr	r3, [r3, #12]
 8052b6e:	2b00      	cmp	r3, #0
 8052b70:	d1e4      	bne.n	8052b3c <_Balloc+0x20>
 8052b72:	2000      	movs	r0, #0
 8052b74:	bd70      	pop	{r4, r5, r6, pc}
 8052b76:	6802      	ldr	r2, [r0, #0]
 8052b78:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8052b7c:	2300      	movs	r3, #0
 8052b7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8052b82:	e7f7      	b.n	8052b74 <_Balloc+0x58>

08052b84 <_Bfree>:
 8052b84:	b570      	push	{r4, r5, r6, lr}
 8052b86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8052b88:	4606      	mov	r6, r0
 8052b8a:	460d      	mov	r5, r1
 8052b8c:	b93c      	cbnz	r4, 8052b9e <_Bfree+0x1a>
 8052b8e:	2010      	movs	r0, #16
 8052b90:	f7ff ffaa 	bl	8052ae8 <malloc>
 8052b94:	6270      	str	r0, [r6, #36]	; 0x24
 8052b96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8052b9a:	6004      	str	r4, [r0, #0]
 8052b9c:	60c4      	str	r4, [r0, #12]
 8052b9e:	b13d      	cbz	r5, 8052bb0 <_Bfree+0x2c>
 8052ba0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8052ba2:	686a      	ldr	r2, [r5, #4]
 8052ba4:	68db      	ldr	r3, [r3, #12]
 8052ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8052baa:	6029      	str	r1, [r5, #0]
 8052bac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8052bb0:	bd70      	pop	{r4, r5, r6, pc}

08052bb2 <__multadd>:
 8052bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052bb6:	690d      	ldr	r5, [r1, #16]
 8052bb8:	461f      	mov	r7, r3
 8052bba:	4606      	mov	r6, r0
 8052bbc:	460c      	mov	r4, r1
 8052bbe:	f101 0c14 	add.w	ip, r1, #20
 8052bc2:	2300      	movs	r3, #0
 8052bc4:	f8dc 0000 	ldr.w	r0, [ip]
 8052bc8:	b281      	uxth	r1, r0
 8052bca:	fb02 7101 	mla	r1, r2, r1, r7
 8052bce:	0c0f      	lsrs	r7, r1, #16
 8052bd0:	0c00      	lsrs	r0, r0, #16
 8052bd2:	fb02 7000 	mla	r0, r2, r0, r7
 8052bd6:	b289      	uxth	r1, r1
 8052bd8:	3301      	adds	r3, #1
 8052bda:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8052bde:	429d      	cmp	r5, r3
 8052be0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8052be4:	f84c 1b04 	str.w	r1, [ip], #4
 8052be8:	dcec      	bgt.n	8052bc4 <__multadd+0x12>
 8052bea:	b1d7      	cbz	r7, 8052c22 <__multadd+0x70>
 8052bec:	68a3      	ldr	r3, [r4, #8]
 8052bee:	42ab      	cmp	r3, r5
 8052bf0:	dc12      	bgt.n	8052c18 <__multadd+0x66>
 8052bf2:	6861      	ldr	r1, [r4, #4]
 8052bf4:	4630      	mov	r0, r6
 8052bf6:	3101      	adds	r1, #1
 8052bf8:	f7ff ff90 	bl	8052b1c <_Balloc>
 8052bfc:	6922      	ldr	r2, [r4, #16]
 8052bfe:	3202      	adds	r2, #2
 8052c00:	f104 010c 	add.w	r1, r4, #12
 8052c04:	4680      	mov	r8, r0
 8052c06:	0092      	lsls	r2, r2, #2
 8052c08:	300c      	adds	r0, #12
 8052c0a:	f7fd ffdb 	bl	8050bc4 <memcpy>
 8052c0e:	4621      	mov	r1, r4
 8052c10:	4630      	mov	r0, r6
 8052c12:	f7ff ffb7 	bl	8052b84 <_Bfree>
 8052c16:	4644      	mov	r4, r8
 8052c18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8052c1c:	3501      	adds	r5, #1
 8052c1e:	615f      	str	r7, [r3, #20]
 8052c20:	6125      	str	r5, [r4, #16]
 8052c22:	4620      	mov	r0, r4
 8052c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08052c28 <__hi0bits>:
 8052c28:	0c02      	lsrs	r2, r0, #16
 8052c2a:	0412      	lsls	r2, r2, #16
 8052c2c:	4603      	mov	r3, r0
 8052c2e:	b9b2      	cbnz	r2, 8052c5e <__hi0bits+0x36>
 8052c30:	0403      	lsls	r3, r0, #16
 8052c32:	2010      	movs	r0, #16
 8052c34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8052c38:	bf04      	itt	eq
 8052c3a:	021b      	lsleq	r3, r3, #8
 8052c3c:	3008      	addeq	r0, #8
 8052c3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8052c42:	bf04      	itt	eq
 8052c44:	011b      	lsleq	r3, r3, #4
 8052c46:	3004      	addeq	r0, #4
 8052c48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8052c4c:	bf04      	itt	eq
 8052c4e:	009b      	lsleq	r3, r3, #2
 8052c50:	3002      	addeq	r0, #2
 8052c52:	2b00      	cmp	r3, #0
 8052c54:	db06      	blt.n	8052c64 <__hi0bits+0x3c>
 8052c56:	005b      	lsls	r3, r3, #1
 8052c58:	d503      	bpl.n	8052c62 <__hi0bits+0x3a>
 8052c5a:	3001      	adds	r0, #1
 8052c5c:	4770      	bx	lr
 8052c5e:	2000      	movs	r0, #0
 8052c60:	e7e8      	b.n	8052c34 <__hi0bits+0xc>
 8052c62:	2020      	movs	r0, #32
 8052c64:	4770      	bx	lr

08052c66 <__lo0bits>:
 8052c66:	6803      	ldr	r3, [r0, #0]
 8052c68:	f013 0207 	ands.w	r2, r3, #7
 8052c6c:	4601      	mov	r1, r0
 8052c6e:	d00b      	beq.n	8052c88 <__lo0bits+0x22>
 8052c70:	07da      	lsls	r2, r3, #31
 8052c72:	d423      	bmi.n	8052cbc <__lo0bits+0x56>
 8052c74:	0798      	lsls	r0, r3, #30
 8052c76:	bf49      	itett	mi
 8052c78:	085b      	lsrmi	r3, r3, #1
 8052c7a:	089b      	lsrpl	r3, r3, #2
 8052c7c:	2001      	movmi	r0, #1
 8052c7e:	600b      	strmi	r3, [r1, #0]
 8052c80:	bf5c      	itt	pl
 8052c82:	600b      	strpl	r3, [r1, #0]
 8052c84:	2002      	movpl	r0, #2
 8052c86:	4770      	bx	lr
 8052c88:	b298      	uxth	r0, r3
 8052c8a:	b9a8      	cbnz	r0, 8052cb8 <__lo0bits+0x52>
 8052c8c:	0c1b      	lsrs	r3, r3, #16
 8052c8e:	2010      	movs	r0, #16
 8052c90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8052c94:	bf04      	itt	eq
 8052c96:	0a1b      	lsreq	r3, r3, #8
 8052c98:	3008      	addeq	r0, #8
 8052c9a:	071a      	lsls	r2, r3, #28
 8052c9c:	bf04      	itt	eq
 8052c9e:	091b      	lsreq	r3, r3, #4
 8052ca0:	3004      	addeq	r0, #4
 8052ca2:	079a      	lsls	r2, r3, #30
 8052ca4:	bf04      	itt	eq
 8052ca6:	089b      	lsreq	r3, r3, #2
 8052ca8:	3002      	addeq	r0, #2
 8052caa:	07da      	lsls	r2, r3, #31
 8052cac:	d402      	bmi.n	8052cb4 <__lo0bits+0x4e>
 8052cae:	085b      	lsrs	r3, r3, #1
 8052cb0:	d006      	beq.n	8052cc0 <__lo0bits+0x5a>
 8052cb2:	3001      	adds	r0, #1
 8052cb4:	600b      	str	r3, [r1, #0]
 8052cb6:	4770      	bx	lr
 8052cb8:	4610      	mov	r0, r2
 8052cba:	e7e9      	b.n	8052c90 <__lo0bits+0x2a>
 8052cbc:	2000      	movs	r0, #0
 8052cbe:	4770      	bx	lr
 8052cc0:	2020      	movs	r0, #32
 8052cc2:	4770      	bx	lr

08052cc4 <__i2b>:
 8052cc4:	b510      	push	{r4, lr}
 8052cc6:	460c      	mov	r4, r1
 8052cc8:	2101      	movs	r1, #1
 8052cca:	f7ff ff27 	bl	8052b1c <_Balloc>
 8052cce:	2201      	movs	r2, #1
 8052cd0:	6144      	str	r4, [r0, #20]
 8052cd2:	6102      	str	r2, [r0, #16]
 8052cd4:	bd10      	pop	{r4, pc}

08052cd6 <__multiply>:
 8052cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8052cda:	4614      	mov	r4, r2
 8052cdc:	690a      	ldr	r2, [r1, #16]
 8052cde:	6923      	ldr	r3, [r4, #16]
 8052ce0:	429a      	cmp	r2, r3
 8052ce2:	bfb8      	it	lt
 8052ce4:	460b      	movlt	r3, r1
 8052ce6:	4688      	mov	r8, r1
 8052ce8:	bfbc      	itt	lt
 8052cea:	46a0      	movlt	r8, r4
 8052cec:	461c      	movlt	r4, r3
 8052cee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8052cf2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8052cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8052cfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8052cfe:	eb07 0609 	add.w	r6, r7, r9
 8052d02:	42b3      	cmp	r3, r6
 8052d04:	bfb8      	it	lt
 8052d06:	3101      	addlt	r1, #1
 8052d08:	f7ff ff08 	bl	8052b1c <_Balloc>
 8052d0c:	f100 0514 	add.w	r5, r0, #20
 8052d10:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8052d14:	462b      	mov	r3, r5
 8052d16:	2200      	movs	r2, #0
 8052d18:	4573      	cmp	r3, lr
 8052d1a:	d316      	bcc.n	8052d4a <__multiply+0x74>
 8052d1c:	f104 0214 	add.w	r2, r4, #20
 8052d20:	f108 0114 	add.w	r1, r8, #20
 8052d24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8052d28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8052d2c:	9300      	str	r3, [sp, #0]
 8052d2e:	9b00      	ldr	r3, [sp, #0]
 8052d30:	9201      	str	r2, [sp, #4]
 8052d32:	4293      	cmp	r3, r2
 8052d34:	d80c      	bhi.n	8052d50 <__multiply+0x7a>
 8052d36:	2e00      	cmp	r6, #0
 8052d38:	dd03      	ble.n	8052d42 <__multiply+0x6c>
 8052d3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8052d3e:	2b00      	cmp	r3, #0
 8052d40:	d05d      	beq.n	8052dfe <__multiply+0x128>
 8052d42:	6106      	str	r6, [r0, #16]
 8052d44:	b003      	add	sp, #12
 8052d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8052d4a:	f843 2b04 	str.w	r2, [r3], #4
 8052d4e:	e7e3      	b.n	8052d18 <__multiply+0x42>
 8052d50:	f8b2 b000 	ldrh.w	fp, [r2]
 8052d54:	f1bb 0f00 	cmp.w	fp, #0
 8052d58:	d023      	beq.n	8052da2 <__multiply+0xcc>
 8052d5a:	4689      	mov	r9, r1
 8052d5c:	46ac      	mov	ip, r5
 8052d5e:	f04f 0800 	mov.w	r8, #0
 8052d62:	f859 4b04 	ldr.w	r4, [r9], #4
 8052d66:	f8dc a000 	ldr.w	sl, [ip]
 8052d6a:	b2a3      	uxth	r3, r4
 8052d6c:	fa1f fa8a 	uxth.w	sl, sl
 8052d70:	fb0b a303 	mla	r3, fp, r3, sl
 8052d74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8052d78:	f8dc 4000 	ldr.w	r4, [ip]
 8052d7c:	4443      	add	r3, r8
 8052d7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8052d82:	fb0b 840a 	mla	r4, fp, sl, r8
 8052d86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8052d8a:	46e2      	mov	sl, ip
 8052d8c:	b29b      	uxth	r3, r3
 8052d8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8052d92:	454f      	cmp	r7, r9
 8052d94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8052d98:	f84a 3b04 	str.w	r3, [sl], #4
 8052d9c:	d82b      	bhi.n	8052df6 <__multiply+0x120>
 8052d9e:	f8cc 8004 	str.w	r8, [ip, #4]
 8052da2:	9b01      	ldr	r3, [sp, #4]
 8052da4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8052da8:	3204      	adds	r2, #4
 8052daa:	f1ba 0f00 	cmp.w	sl, #0
 8052dae:	d020      	beq.n	8052df2 <__multiply+0x11c>
 8052db0:	682b      	ldr	r3, [r5, #0]
 8052db2:	4689      	mov	r9, r1
 8052db4:	46a8      	mov	r8, r5
 8052db6:	f04f 0b00 	mov.w	fp, #0
 8052dba:	f8b9 c000 	ldrh.w	ip, [r9]
 8052dbe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8052dc2:	fb0a 440c 	mla	r4, sl, ip, r4
 8052dc6:	445c      	add	r4, fp
 8052dc8:	46c4      	mov	ip, r8
 8052dca:	b29b      	uxth	r3, r3
 8052dcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8052dd0:	f84c 3b04 	str.w	r3, [ip], #4
 8052dd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8052dd8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8052ddc:	0c1b      	lsrs	r3, r3, #16
 8052dde:	fb0a b303 	mla	r3, sl, r3, fp
 8052de2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8052de6:	454f      	cmp	r7, r9
 8052de8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8052dec:	d805      	bhi.n	8052dfa <__multiply+0x124>
 8052dee:	f8c8 3004 	str.w	r3, [r8, #4]
 8052df2:	3504      	adds	r5, #4
 8052df4:	e79b      	b.n	8052d2e <__multiply+0x58>
 8052df6:	46d4      	mov	ip, sl
 8052df8:	e7b3      	b.n	8052d62 <__multiply+0x8c>
 8052dfa:	46e0      	mov	r8, ip
 8052dfc:	e7dd      	b.n	8052dba <__multiply+0xe4>
 8052dfe:	3e01      	subs	r6, #1
 8052e00:	e799      	b.n	8052d36 <__multiply+0x60>
	...

08052e04 <__pow5mult>:
 8052e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8052e08:	4615      	mov	r5, r2
 8052e0a:	f012 0203 	ands.w	r2, r2, #3
 8052e0e:	4606      	mov	r6, r0
 8052e10:	460f      	mov	r7, r1
 8052e12:	d007      	beq.n	8052e24 <__pow5mult+0x20>
 8052e14:	3a01      	subs	r2, #1
 8052e16:	4c21      	ldr	r4, [pc, #132]	; (8052e9c <__pow5mult+0x98>)
 8052e18:	2300      	movs	r3, #0
 8052e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8052e1e:	f7ff fec8 	bl	8052bb2 <__multadd>
 8052e22:	4607      	mov	r7, r0
 8052e24:	10ad      	asrs	r5, r5, #2
 8052e26:	d035      	beq.n	8052e94 <__pow5mult+0x90>
 8052e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8052e2a:	b93c      	cbnz	r4, 8052e3c <__pow5mult+0x38>
 8052e2c:	2010      	movs	r0, #16
 8052e2e:	f7ff fe5b 	bl	8052ae8 <malloc>
 8052e32:	6270      	str	r0, [r6, #36]	; 0x24
 8052e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8052e38:	6004      	str	r4, [r0, #0]
 8052e3a:	60c4      	str	r4, [r0, #12]
 8052e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8052e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8052e44:	b94c      	cbnz	r4, 8052e5a <__pow5mult+0x56>
 8052e46:	f240 2171 	movw	r1, #625	; 0x271
 8052e4a:	4630      	mov	r0, r6
 8052e4c:	f7ff ff3a 	bl	8052cc4 <__i2b>
 8052e50:	2300      	movs	r3, #0
 8052e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8052e56:	4604      	mov	r4, r0
 8052e58:	6003      	str	r3, [r0, #0]
 8052e5a:	f04f 0800 	mov.w	r8, #0
 8052e5e:	07eb      	lsls	r3, r5, #31
 8052e60:	d50a      	bpl.n	8052e78 <__pow5mult+0x74>
 8052e62:	4639      	mov	r1, r7
 8052e64:	4622      	mov	r2, r4
 8052e66:	4630      	mov	r0, r6
 8052e68:	f7ff ff35 	bl	8052cd6 <__multiply>
 8052e6c:	4639      	mov	r1, r7
 8052e6e:	4681      	mov	r9, r0
 8052e70:	4630      	mov	r0, r6
 8052e72:	f7ff fe87 	bl	8052b84 <_Bfree>
 8052e76:	464f      	mov	r7, r9
 8052e78:	106d      	asrs	r5, r5, #1
 8052e7a:	d00b      	beq.n	8052e94 <__pow5mult+0x90>
 8052e7c:	6820      	ldr	r0, [r4, #0]
 8052e7e:	b938      	cbnz	r0, 8052e90 <__pow5mult+0x8c>
 8052e80:	4622      	mov	r2, r4
 8052e82:	4621      	mov	r1, r4
 8052e84:	4630      	mov	r0, r6
 8052e86:	f7ff ff26 	bl	8052cd6 <__multiply>
 8052e8a:	6020      	str	r0, [r4, #0]
 8052e8c:	f8c0 8000 	str.w	r8, [r0]
 8052e90:	4604      	mov	r4, r0
 8052e92:	e7e4      	b.n	8052e5e <__pow5mult+0x5a>
 8052e94:	4638      	mov	r0, r7
 8052e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8052e9a:	bf00      	nop
 8052e9c:	080550e0 	.word	0x080550e0

08052ea0 <__lshift>:
 8052ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8052ea4:	460c      	mov	r4, r1
 8052ea6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8052eaa:	6923      	ldr	r3, [r4, #16]
 8052eac:	6849      	ldr	r1, [r1, #4]
 8052eae:	eb0a 0903 	add.w	r9, sl, r3
 8052eb2:	68a3      	ldr	r3, [r4, #8]
 8052eb4:	4607      	mov	r7, r0
 8052eb6:	4616      	mov	r6, r2
 8052eb8:	f109 0501 	add.w	r5, r9, #1
 8052ebc:	42ab      	cmp	r3, r5
 8052ebe:	db32      	blt.n	8052f26 <__lshift+0x86>
 8052ec0:	4638      	mov	r0, r7
 8052ec2:	f7ff fe2b 	bl	8052b1c <_Balloc>
 8052ec6:	2300      	movs	r3, #0
 8052ec8:	4680      	mov	r8, r0
 8052eca:	f100 0114 	add.w	r1, r0, #20
 8052ece:	461a      	mov	r2, r3
 8052ed0:	4553      	cmp	r3, sl
 8052ed2:	db2b      	blt.n	8052f2c <__lshift+0x8c>
 8052ed4:	6920      	ldr	r0, [r4, #16]
 8052ed6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8052eda:	f104 0314 	add.w	r3, r4, #20
 8052ede:	f016 021f 	ands.w	r2, r6, #31
 8052ee2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8052ee6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8052eea:	d025      	beq.n	8052f38 <__lshift+0x98>
 8052eec:	f1c2 0e20 	rsb	lr, r2, #32
 8052ef0:	2000      	movs	r0, #0
 8052ef2:	681e      	ldr	r6, [r3, #0]
 8052ef4:	468a      	mov	sl, r1
 8052ef6:	4096      	lsls	r6, r2
 8052ef8:	4330      	orrs	r0, r6
 8052efa:	f84a 0b04 	str.w	r0, [sl], #4
 8052efe:	f853 0b04 	ldr.w	r0, [r3], #4
 8052f02:	459c      	cmp	ip, r3
 8052f04:	fa20 f00e 	lsr.w	r0, r0, lr
 8052f08:	d814      	bhi.n	8052f34 <__lshift+0x94>
 8052f0a:	6048      	str	r0, [r1, #4]
 8052f0c:	b108      	cbz	r0, 8052f12 <__lshift+0x72>
 8052f0e:	f109 0502 	add.w	r5, r9, #2
 8052f12:	3d01      	subs	r5, #1
 8052f14:	4638      	mov	r0, r7
 8052f16:	f8c8 5010 	str.w	r5, [r8, #16]
 8052f1a:	4621      	mov	r1, r4
 8052f1c:	f7ff fe32 	bl	8052b84 <_Bfree>
 8052f20:	4640      	mov	r0, r8
 8052f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8052f26:	3101      	adds	r1, #1
 8052f28:	005b      	lsls	r3, r3, #1
 8052f2a:	e7c7      	b.n	8052ebc <__lshift+0x1c>
 8052f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8052f30:	3301      	adds	r3, #1
 8052f32:	e7cd      	b.n	8052ed0 <__lshift+0x30>
 8052f34:	4651      	mov	r1, sl
 8052f36:	e7dc      	b.n	8052ef2 <__lshift+0x52>
 8052f38:	3904      	subs	r1, #4
 8052f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8052f3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8052f42:	459c      	cmp	ip, r3
 8052f44:	d8f9      	bhi.n	8052f3a <__lshift+0x9a>
 8052f46:	e7e4      	b.n	8052f12 <__lshift+0x72>

08052f48 <__mcmp>:
 8052f48:	6903      	ldr	r3, [r0, #16]
 8052f4a:	690a      	ldr	r2, [r1, #16]
 8052f4c:	1a9b      	subs	r3, r3, r2
 8052f4e:	b530      	push	{r4, r5, lr}
 8052f50:	d10c      	bne.n	8052f6c <__mcmp+0x24>
 8052f52:	0092      	lsls	r2, r2, #2
 8052f54:	3014      	adds	r0, #20
 8052f56:	3114      	adds	r1, #20
 8052f58:	1884      	adds	r4, r0, r2
 8052f5a:	4411      	add	r1, r2
 8052f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8052f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8052f64:	4295      	cmp	r5, r2
 8052f66:	d003      	beq.n	8052f70 <__mcmp+0x28>
 8052f68:	d305      	bcc.n	8052f76 <__mcmp+0x2e>
 8052f6a:	2301      	movs	r3, #1
 8052f6c:	4618      	mov	r0, r3
 8052f6e:	bd30      	pop	{r4, r5, pc}
 8052f70:	42a0      	cmp	r0, r4
 8052f72:	d3f3      	bcc.n	8052f5c <__mcmp+0x14>
 8052f74:	e7fa      	b.n	8052f6c <__mcmp+0x24>
 8052f76:	f04f 33ff 	mov.w	r3, #4294967295
 8052f7a:	e7f7      	b.n	8052f6c <__mcmp+0x24>

08052f7c <__mdiff>:
 8052f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8052f80:	460d      	mov	r5, r1
 8052f82:	4607      	mov	r7, r0
 8052f84:	4611      	mov	r1, r2
 8052f86:	4628      	mov	r0, r5
 8052f88:	4614      	mov	r4, r2
 8052f8a:	f7ff ffdd 	bl	8052f48 <__mcmp>
 8052f8e:	1e06      	subs	r6, r0, #0
 8052f90:	d108      	bne.n	8052fa4 <__mdiff+0x28>
 8052f92:	4631      	mov	r1, r6
 8052f94:	4638      	mov	r0, r7
 8052f96:	f7ff fdc1 	bl	8052b1c <_Balloc>
 8052f9a:	2301      	movs	r3, #1
 8052f9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8052fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8052fa4:	bfa4      	itt	ge
 8052fa6:	4623      	movge	r3, r4
 8052fa8:	462c      	movge	r4, r5
 8052faa:	4638      	mov	r0, r7
 8052fac:	6861      	ldr	r1, [r4, #4]
 8052fae:	bfa6      	itte	ge
 8052fb0:	461d      	movge	r5, r3
 8052fb2:	2600      	movge	r6, #0
 8052fb4:	2601      	movlt	r6, #1
 8052fb6:	f7ff fdb1 	bl	8052b1c <_Balloc>
 8052fba:	692b      	ldr	r3, [r5, #16]
 8052fbc:	60c6      	str	r6, [r0, #12]
 8052fbe:	6926      	ldr	r6, [r4, #16]
 8052fc0:	f105 0914 	add.w	r9, r5, #20
 8052fc4:	f104 0214 	add.w	r2, r4, #20
 8052fc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8052fcc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8052fd0:	f100 0514 	add.w	r5, r0, #20
 8052fd4:	f04f 0e00 	mov.w	lr, #0
 8052fd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8052fdc:	f859 4b04 	ldr.w	r4, [r9], #4
 8052fe0:	fa1e f18a 	uxtah	r1, lr, sl
 8052fe4:	b2a3      	uxth	r3, r4
 8052fe6:	1ac9      	subs	r1, r1, r3
 8052fe8:	0c23      	lsrs	r3, r4, #16
 8052fea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8052fee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8052ff2:	b289      	uxth	r1, r1
 8052ff4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8052ff8:	45c8      	cmp	r8, r9
 8052ffa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8052ffe:	4694      	mov	ip, r2
 8053000:	f845 3b04 	str.w	r3, [r5], #4
 8053004:	d8e8      	bhi.n	8052fd8 <__mdiff+0x5c>
 8053006:	45bc      	cmp	ip, r7
 8053008:	d304      	bcc.n	8053014 <__mdiff+0x98>
 805300a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 805300e:	b183      	cbz	r3, 8053032 <__mdiff+0xb6>
 8053010:	6106      	str	r6, [r0, #16]
 8053012:	e7c5      	b.n	8052fa0 <__mdiff+0x24>
 8053014:	f85c 1b04 	ldr.w	r1, [ip], #4
 8053018:	fa1e f381 	uxtah	r3, lr, r1
 805301c:	141a      	asrs	r2, r3, #16
 805301e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8053022:	b29b      	uxth	r3, r3
 8053024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8053028:	ea4f 4e22 	mov.w	lr, r2, asr #16
 805302c:	f845 3b04 	str.w	r3, [r5], #4
 8053030:	e7e9      	b.n	8053006 <__mdiff+0x8a>
 8053032:	3e01      	subs	r6, #1
 8053034:	e7e9      	b.n	805300a <__mdiff+0x8e>

08053036 <__d2b>:
 8053036:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 805303a:	460e      	mov	r6, r1
 805303c:	2101      	movs	r1, #1
 805303e:	ec59 8b10 	vmov	r8, r9, d0
 8053042:	4615      	mov	r5, r2
 8053044:	f7ff fd6a 	bl	8052b1c <_Balloc>
 8053048:	f3c9 540a 	ubfx	r4, r9, #20, #11
 805304c:	4607      	mov	r7, r0
 805304e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8053052:	bb34      	cbnz	r4, 80530a2 <__d2b+0x6c>
 8053054:	9301      	str	r3, [sp, #4]
 8053056:	f1b8 0300 	subs.w	r3, r8, #0
 805305a:	d027      	beq.n	80530ac <__d2b+0x76>
 805305c:	a802      	add	r0, sp, #8
 805305e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8053062:	f7ff fe00 	bl	8052c66 <__lo0bits>
 8053066:	9900      	ldr	r1, [sp, #0]
 8053068:	b1f0      	cbz	r0, 80530a8 <__d2b+0x72>
 805306a:	9a01      	ldr	r2, [sp, #4]
 805306c:	f1c0 0320 	rsb	r3, r0, #32
 8053070:	fa02 f303 	lsl.w	r3, r2, r3
 8053074:	430b      	orrs	r3, r1
 8053076:	40c2      	lsrs	r2, r0
 8053078:	617b      	str	r3, [r7, #20]
 805307a:	9201      	str	r2, [sp, #4]
 805307c:	9b01      	ldr	r3, [sp, #4]
 805307e:	61bb      	str	r3, [r7, #24]
 8053080:	2b00      	cmp	r3, #0
 8053082:	bf14      	ite	ne
 8053084:	2102      	movne	r1, #2
 8053086:	2101      	moveq	r1, #1
 8053088:	6139      	str	r1, [r7, #16]
 805308a:	b1c4      	cbz	r4, 80530be <__d2b+0x88>
 805308c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8053090:	4404      	add	r4, r0
 8053092:	6034      	str	r4, [r6, #0]
 8053094:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8053098:	6028      	str	r0, [r5, #0]
 805309a:	4638      	mov	r0, r7
 805309c:	b003      	add	sp, #12
 805309e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80530a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80530a6:	e7d5      	b.n	8053054 <__d2b+0x1e>
 80530a8:	6179      	str	r1, [r7, #20]
 80530aa:	e7e7      	b.n	805307c <__d2b+0x46>
 80530ac:	a801      	add	r0, sp, #4
 80530ae:	f7ff fdda 	bl	8052c66 <__lo0bits>
 80530b2:	9b01      	ldr	r3, [sp, #4]
 80530b4:	617b      	str	r3, [r7, #20]
 80530b6:	2101      	movs	r1, #1
 80530b8:	6139      	str	r1, [r7, #16]
 80530ba:	3020      	adds	r0, #32
 80530bc:	e7e5      	b.n	805308a <__d2b+0x54>
 80530be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80530c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80530c6:	6030      	str	r0, [r6, #0]
 80530c8:	6918      	ldr	r0, [r3, #16]
 80530ca:	f7ff fdad 	bl	8052c28 <__hi0bits>
 80530ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80530d2:	e7e1      	b.n	8053098 <__d2b+0x62>

080530d4 <_calloc_r>:
 80530d4:	b538      	push	{r3, r4, r5, lr}
 80530d6:	fb02 f401 	mul.w	r4, r2, r1
 80530da:	4621      	mov	r1, r4
 80530dc:	f000 f856 	bl	805318c <_malloc_r>
 80530e0:	4605      	mov	r5, r0
 80530e2:	b118      	cbz	r0, 80530ec <_calloc_r+0x18>
 80530e4:	4622      	mov	r2, r4
 80530e6:	2100      	movs	r1, #0
 80530e8:	f7fd fd77 	bl	8050bda <memset>
 80530ec:	4628      	mov	r0, r5
 80530ee:	bd38      	pop	{r3, r4, r5, pc}

080530f0 <_free_r>:
 80530f0:	b538      	push	{r3, r4, r5, lr}
 80530f2:	4605      	mov	r5, r0
 80530f4:	2900      	cmp	r1, #0
 80530f6:	d045      	beq.n	8053184 <_free_r+0x94>
 80530f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80530fc:	1f0c      	subs	r4, r1, #4
 80530fe:	2b00      	cmp	r3, #0
 8053100:	bfb8      	it	lt
 8053102:	18e4      	addlt	r4, r4, r3
 8053104:	f000 fbfd 	bl	8053902 <__malloc_lock>
 8053108:	4a1f      	ldr	r2, [pc, #124]	; (8053188 <_free_r+0x98>)
 805310a:	6813      	ldr	r3, [r2, #0]
 805310c:	4610      	mov	r0, r2
 805310e:	b933      	cbnz	r3, 805311e <_free_r+0x2e>
 8053110:	6063      	str	r3, [r4, #4]
 8053112:	6014      	str	r4, [r2, #0]
 8053114:	4628      	mov	r0, r5
 8053116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 805311a:	f000 bbf3 	b.w	8053904 <__malloc_unlock>
 805311e:	42a3      	cmp	r3, r4
 8053120:	d90c      	bls.n	805313c <_free_r+0x4c>
 8053122:	6821      	ldr	r1, [r4, #0]
 8053124:	1862      	adds	r2, r4, r1
 8053126:	4293      	cmp	r3, r2
 8053128:	bf04      	itt	eq
 805312a:	681a      	ldreq	r2, [r3, #0]
 805312c:	685b      	ldreq	r3, [r3, #4]
 805312e:	6063      	str	r3, [r4, #4]
 8053130:	bf04      	itt	eq
 8053132:	1852      	addeq	r2, r2, r1
 8053134:	6022      	streq	r2, [r4, #0]
 8053136:	6004      	str	r4, [r0, #0]
 8053138:	e7ec      	b.n	8053114 <_free_r+0x24>
 805313a:	4613      	mov	r3, r2
 805313c:	685a      	ldr	r2, [r3, #4]
 805313e:	b10a      	cbz	r2, 8053144 <_free_r+0x54>
 8053140:	42a2      	cmp	r2, r4
 8053142:	d9fa      	bls.n	805313a <_free_r+0x4a>
 8053144:	6819      	ldr	r1, [r3, #0]
 8053146:	1858      	adds	r0, r3, r1
 8053148:	42a0      	cmp	r0, r4
 805314a:	d10b      	bne.n	8053164 <_free_r+0x74>
 805314c:	6820      	ldr	r0, [r4, #0]
 805314e:	4401      	add	r1, r0
 8053150:	1858      	adds	r0, r3, r1
 8053152:	4282      	cmp	r2, r0
 8053154:	6019      	str	r1, [r3, #0]
 8053156:	d1dd      	bne.n	8053114 <_free_r+0x24>
 8053158:	6810      	ldr	r0, [r2, #0]
 805315a:	6852      	ldr	r2, [r2, #4]
 805315c:	605a      	str	r2, [r3, #4]
 805315e:	4401      	add	r1, r0
 8053160:	6019      	str	r1, [r3, #0]
 8053162:	e7d7      	b.n	8053114 <_free_r+0x24>
 8053164:	d902      	bls.n	805316c <_free_r+0x7c>
 8053166:	230c      	movs	r3, #12
 8053168:	602b      	str	r3, [r5, #0]
 805316a:	e7d3      	b.n	8053114 <_free_r+0x24>
 805316c:	6820      	ldr	r0, [r4, #0]
 805316e:	1821      	adds	r1, r4, r0
 8053170:	428a      	cmp	r2, r1
 8053172:	bf04      	itt	eq
 8053174:	6811      	ldreq	r1, [r2, #0]
 8053176:	6852      	ldreq	r2, [r2, #4]
 8053178:	6062      	str	r2, [r4, #4]
 805317a:	bf04      	itt	eq
 805317c:	1809      	addeq	r1, r1, r0
 805317e:	6021      	streq	r1, [r4, #0]
 8053180:	605c      	str	r4, [r3, #4]
 8053182:	e7c7      	b.n	8053114 <_free_r+0x24>
 8053184:	bd38      	pop	{r3, r4, r5, pc}
 8053186:	bf00      	nop
 8053188:	20003db8 	.word	0x20003db8

0805318c <_malloc_r>:
 805318c:	b570      	push	{r4, r5, r6, lr}
 805318e:	1ccd      	adds	r5, r1, #3
 8053190:	f025 0503 	bic.w	r5, r5, #3
 8053194:	3508      	adds	r5, #8
 8053196:	2d0c      	cmp	r5, #12
 8053198:	bf38      	it	cc
 805319a:	250c      	movcc	r5, #12
 805319c:	2d00      	cmp	r5, #0
 805319e:	4606      	mov	r6, r0
 80531a0:	db01      	blt.n	80531a6 <_malloc_r+0x1a>
 80531a2:	42a9      	cmp	r1, r5
 80531a4:	d903      	bls.n	80531ae <_malloc_r+0x22>
 80531a6:	230c      	movs	r3, #12
 80531a8:	6033      	str	r3, [r6, #0]
 80531aa:	2000      	movs	r0, #0
 80531ac:	bd70      	pop	{r4, r5, r6, pc}
 80531ae:	f000 fba8 	bl	8053902 <__malloc_lock>
 80531b2:	4a21      	ldr	r2, [pc, #132]	; (8053238 <_malloc_r+0xac>)
 80531b4:	6814      	ldr	r4, [r2, #0]
 80531b6:	4621      	mov	r1, r4
 80531b8:	b991      	cbnz	r1, 80531e0 <_malloc_r+0x54>
 80531ba:	4c20      	ldr	r4, [pc, #128]	; (805323c <_malloc_r+0xb0>)
 80531bc:	6823      	ldr	r3, [r4, #0]
 80531be:	b91b      	cbnz	r3, 80531c8 <_malloc_r+0x3c>
 80531c0:	4630      	mov	r0, r6
 80531c2:	f000 facf 	bl	8053764 <_sbrk_r>
 80531c6:	6020      	str	r0, [r4, #0]
 80531c8:	4629      	mov	r1, r5
 80531ca:	4630      	mov	r0, r6
 80531cc:	f000 faca 	bl	8053764 <_sbrk_r>
 80531d0:	1c43      	adds	r3, r0, #1
 80531d2:	d124      	bne.n	805321e <_malloc_r+0x92>
 80531d4:	230c      	movs	r3, #12
 80531d6:	6033      	str	r3, [r6, #0]
 80531d8:	4630      	mov	r0, r6
 80531da:	f000 fb93 	bl	8053904 <__malloc_unlock>
 80531de:	e7e4      	b.n	80531aa <_malloc_r+0x1e>
 80531e0:	680b      	ldr	r3, [r1, #0]
 80531e2:	1b5b      	subs	r3, r3, r5
 80531e4:	d418      	bmi.n	8053218 <_malloc_r+0x8c>
 80531e6:	2b0b      	cmp	r3, #11
 80531e8:	d90f      	bls.n	805320a <_malloc_r+0x7e>
 80531ea:	600b      	str	r3, [r1, #0]
 80531ec:	50cd      	str	r5, [r1, r3]
 80531ee:	18cc      	adds	r4, r1, r3
 80531f0:	4630      	mov	r0, r6
 80531f2:	f000 fb87 	bl	8053904 <__malloc_unlock>
 80531f6:	f104 000b 	add.w	r0, r4, #11
 80531fa:	1d23      	adds	r3, r4, #4
 80531fc:	f020 0007 	bic.w	r0, r0, #7
 8053200:	1ac3      	subs	r3, r0, r3
 8053202:	d0d3      	beq.n	80531ac <_malloc_r+0x20>
 8053204:	425a      	negs	r2, r3
 8053206:	50e2      	str	r2, [r4, r3]
 8053208:	e7d0      	b.n	80531ac <_malloc_r+0x20>
 805320a:	428c      	cmp	r4, r1
 805320c:	684b      	ldr	r3, [r1, #4]
 805320e:	bf16      	itet	ne
 8053210:	6063      	strne	r3, [r4, #4]
 8053212:	6013      	streq	r3, [r2, #0]
 8053214:	460c      	movne	r4, r1
 8053216:	e7eb      	b.n	80531f0 <_malloc_r+0x64>
 8053218:	460c      	mov	r4, r1
 805321a:	6849      	ldr	r1, [r1, #4]
 805321c:	e7cc      	b.n	80531b8 <_malloc_r+0x2c>
 805321e:	1cc4      	adds	r4, r0, #3
 8053220:	f024 0403 	bic.w	r4, r4, #3
 8053224:	42a0      	cmp	r0, r4
 8053226:	d005      	beq.n	8053234 <_malloc_r+0xa8>
 8053228:	1a21      	subs	r1, r4, r0
 805322a:	4630      	mov	r0, r6
 805322c:	f000 fa9a 	bl	8053764 <_sbrk_r>
 8053230:	3001      	adds	r0, #1
 8053232:	d0cf      	beq.n	80531d4 <_malloc_r+0x48>
 8053234:	6025      	str	r5, [r4, #0]
 8053236:	e7db      	b.n	80531f0 <_malloc_r+0x64>
 8053238:	20003db8 	.word	0x20003db8
 805323c:	20003dbc 	.word	0x20003dbc

08053240 <__ssputs_r>:
 8053240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8053244:	688e      	ldr	r6, [r1, #8]
 8053246:	429e      	cmp	r6, r3
 8053248:	4682      	mov	sl, r0
 805324a:	460c      	mov	r4, r1
 805324c:	4690      	mov	r8, r2
 805324e:	4699      	mov	r9, r3
 8053250:	d837      	bhi.n	80532c2 <__ssputs_r+0x82>
 8053252:	898a      	ldrh	r2, [r1, #12]
 8053254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8053258:	d031      	beq.n	80532be <__ssputs_r+0x7e>
 805325a:	6825      	ldr	r5, [r4, #0]
 805325c:	6909      	ldr	r1, [r1, #16]
 805325e:	1a6f      	subs	r7, r5, r1
 8053260:	6965      	ldr	r5, [r4, #20]
 8053262:	2302      	movs	r3, #2
 8053264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8053268:	fb95 f5f3 	sdiv	r5, r5, r3
 805326c:	f109 0301 	add.w	r3, r9, #1
 8053270:	443b      	add	r3, r7
 8053272:	429d      	cmp	r5, r3
 8053274:	bf38      	it	cc
 8053276:	461d      	movcc	r5, r3
 8053278:	0553      	lsls	r3, r2, #21
 805327a:	d530      	bpl.n	80532de <__ssputs_r+0x9e>
 805327c:	4629      	mov	r1, r5
 805327e:	f7ff ff85 	bl	805318c <_malloc_r>
 8053282:	4606      	mov	r6, r0
 8053284:	b950      	cbnz	r0, 805329c <__ssputs_r+0x5c>
 8053286:	230c      	movs	r3, #12
 8053288:	f8ca 3000 	str.w	r3, [sl]
 805328c:	89a3      	ldrh	r3, [r4, #12]
 805328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8053292:	81a3      	strh	r3, [r4, #12]
 8053294:	f04f 30ff 	mov.w	r0, #4294967295
 8053298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805329c:	463a      	mov	r2, r7
 805329e:	6921      	ldr	r1, [r4, #16]
 80532a0:	f7fd fc90 	bl	8050bc4 <memcpy>
 80532a4:	89a3      	ldrh	r3, [r4, #12]
 80532a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80532aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80532ae:	81a3      	strh	r3, [r4, #12]
 80532b0:	6126      	str	r6, [r4, #16]
 80532b2:	6165      	str	r5, [r4, #20]
 80532b4:	443e      	add	r6, r7
 80532b6:	1bed      	subs	r5, r5, r7
 80532b8:	6026      	str	r6, [r4, #0]
 80532ba:	60a5      	str	r5, [r4, #8]
 80532bc:	464e      	mov	r6, r9
 80532be:	454e      	cmp	r6, r9
 80532c0:	d900      	bls.n	80532c4 <__ssputs_r+0x84>
 80532c2:	464e      	mov	r6, r9
 80532c4:	4632      	mov	r2, r6
 80532c6:	4641      	mov	r1, r8
 80532c8:	6820      	ldr	r0, [r4, #0]
 80532ca:	f000 fb01 	bl	80538d0 <memmove>
 80532ce:	68a3      	ldr	r3, [r4, #8]
 80532d0:	1b9b      	subs	r3, r3, r6
 80532d2:	60a3      	str	r3, [r4, #8]
 80532d4:	6823      	ldr	r3, [r4, #0]
 80532d6:	441e      	add	r6, r3
 80532d8:	6026      	str	r6, [r4, #0]
 80532da:	2000      	movs	r0, #0
 80532dc:	e7dc      	b.n	8053298 <__ssputs_r+0x58>
 80532de:	462a      	mov	r2, r5
 80532e0:	f000 fb11 	bl	8053906 <_realloc_r>
 80532e4:	4606      	mov	r6, r0
 80532e6:	2800      	cmp	r0, #0
 80532e8:	d1e2      	bne.n	80532b0 <__ssputs_r+0x70>
 80532ea:	6921      	ldr	r1, [r4, #16]
 80532ec:	4650      	mov	r0, sl
 80532ee:	f7ff feff 	bl	80530f0 <_free_r>
 80532f2:	e7c8      	b.n	8053286 <__ssputs_r+0x46>

080532f4 <_svfiprintf_r>:
 80532f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80532f8:	461d      	mov	r5, r3
 80532fa:	898b      	ldrh	r3, [r1, #12]
 80532fc:	061f      	lsls	r7, r3, #24
 80532fe:	b09d      	sub	sp, #116	; 0x74
 8053300:	4680      	mov	r8, r0
 8053302:	460c      	mov	r4, r1
 8053304:	4616      	mov	r6, r2
 8053306:	d50f      	bpl.n	8053328 <_svfiprintf_r+0x34>
 8053308:	690b      	ldr	r3, [r1, #16]
 805330a:	b96b      	cbnz	r3, 8053328 <_svfiprintf_r+0x34>
 805330c:	2140      	movs	r1, #64	; 0x40
 805330e:	f7ff ff3d 	bl	805318c <_malloc_r>
 8053312:	6020      	str	r0, [r4, #0]
 8053314:	6120      	str	r0, [r4, #16]
 8053316:	b928      	cbnz	r0, 8053324 <_svfiprintf_r+0x30>
 8053318:	230c      	movs	r3, #12
 805331a:	f8c8 3000 	str.w	r3, [r8]
 805331e:	f04f 30ff 	mov.w	r0, #4294967295
 8053322:	e0c8      	b.n	80534b6 <_svfiprintf_r+0x1c2>
 8053324:	2340      	movs	r3, #64	; 0x40
 8053326:	6163      	str	r3, [r4, #20]
 8053328:	2300      	movs	r3, #0
 805332a:	9309      	str	r3, [sp, #36]	; 0x24
 805332c:	2320      	movs	r3, #32
 805332e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8053332:	2330      	movs	r3, #48	; 0x30
 8053334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8053338:	9503      	str	r5, [sp, #12]
 805333a:	f04f 0b01 	mov.w	fp, #1
 805333e:	4637      	mov	r7, r6
 8053340:	463d      	mov	r5, r7
 8053342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8053346:	b10b      	cbz	r3, 805334c <_svfiprintf_r+0x58>
 8053348:	2b25      	cmp	r3, #37	; 0x25
 805334a:	d13e      	bne.n	80533ca <_svfiprintf_r+0xd6>
 805334c:	ebb7 0a06 	subs.w	sl, r7, r6
 8053350:	d00b      	beq.n	805336a <_svfiprintf_r+0x76>
 8053352:	4653      	mov	r3, sl
 8053354:	4632      	mov	r2, r6
 8053356:	4621      	mov	r1, r4
 8053358:	4640      	mov	r0, r8
 805335a:	f7ff ff71 	bl	8053240 <__ssputs_r>
 805335e:	3001      	adds	r0, #1
 8053360:	f000 80a4 	beq.w	80534ac <_svfiprintf_r+0x1b8>
 8053364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8053366:	4453      	add	r3, sl
 8053368:	9309      	str	r3, [sp, #36]	; 0x24
 805336a:	783b      	ldrb	r3, [r7, #0]
 805336c:	2b00      	cmp	r3, #0
 805336e:	f000 809d 	beq.w	80534ac <_svfiprintf_r+0x1b8>
 8053372:	2300      	movs	r3, #0
 8053374:	f04f 32ff 	mov.w	r2, #4294967295
 8053378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 805337c:	9304      	str	r3, [sp, #16]
 805337e:	9307      	str	r3, [sp, #28]
 8053380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8053384:	931a      	str	r3, [sp, #104]	; 0x68
 8053386:	462f      	mov	r7, r5
 8053388:	2205      	movs	r2, #5
 805338a:	f817 1b01 	ldrb.w	r1, [r7], #1
 805338e:	4850      	ldr	r0, [pc, #320]	; (80534d0 <_svfiprintf_r+0x1dc>)
 8053390:	f7ed f85e 	bl	8040450 <memchr>
 8053394:	9b04      	ldr	r3, [sp, #16]
 8053396:	b9d0      	cbnz	r0, 80533ce <_svfiprintf_r+0xda>
 8053398:	06d9      	lsls	r1, r3, #27
 805339a:	bf44      	itt	mi
 805339c:	2220      	movmi	r2, #32
 805339e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80533a2:	071a      	lsls	r2, r3, #28
 80533a4:	bf44      	itt	mi
 80533a6:	222b      	movmi	r2, #43	; 0x2b
 80533a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80533ac:	782a      	ldrb	r2, [r5, #0]
 80533ae:	2a2a      	cmp	r2, #42	; 0x2a
 80533b0:	d015      	beq.n	80533de <_svfiprintf_r+0xea>
 80533b2:	9a07      	ldr	r2, [sp, #28]
 80533b4:	462f      	mov	r7, r5
 80533b6:	2000      	movs	r0, #0
 80533b8:	250a      	movs	r5, #10
 80533ba:	4639      	mov	r1, r7
 80533bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80533c0:	3b30      	subs	r3, #48	; 0x30
 80533c2:	2b09      	cmp	r3, #9
 80533c4:	d94d      	bls.n	8053462 <_svfiprintf_r+0x16e>
 80533c6:	b1b8      	cbz	r0, 80533f8 <_svfiprintf_r+0x104>
 80533c8:	e00f      	b.n	80533ea <_svfiprintf_r+0xf6>
 80533ca:	462f      	mov	r7, r5
 80533cc:	e7b8      	b.n	8053340 <_svfiprintf_r+0x4c>
 80533ce:	4a40      	ldr	r2, [pc, #256]	; (80534d0 <_svfiprintf_r+0x1dc>)
 80533d0:	1a80      	subs	r0, r0, r2
 80533d2:	fa0b f000 	lsl.w	r0, fp, r0
 80533d6:	4318      	orrs	r0, r3
 80533d8:	9004      	str	r0, [sp, #16]
 80533da:	463d      	mov	r5, r7
 80533dc:	e7d3      	b.n	8053386 <_svfiprintf_r+0x92>
 80533de:	9a03      	ldr	r2, [sp, #12]
 80533e0:	1d11      	adds	r1, r2, #4
 80533e2:	6812      	ldr	r2, [r2, #0]
 80533e4:	9103      	str	r1, [sp, #12]
 80533e6:	2a00      	cmp	r2, #0
 80533e8:	db01      	blt.n	80533ee <_svfiprintf_r+0xfa>
 80533ea:	9207      	str	r2, [sp, #28]
 80533ec:	e004      	b.n	80533f8 <_svfiprintf_r+0x104>
 80533ee:	4252      	negs	r2, r2
 80533f0:	f043 0302 	orr.w	r3, r3, #2
 80533f4:	9207      	str	r2, [sp, #28]
 80533f6:	9304      	str	r3, [sp, #16]
 80533f8:	783b      	ldrb	r3, [r7, #0]
 80533fa:	2b2e      	cmp	r3, #46	; 0x2e
 80533fc:	d10c      	bne.n	8053418 <_svfiprintf_r+0x124>
 80533fe:	787b      	ldrb	r3, [r7, #1]
 8053400:	2b2a      	cmp	r3, #42	; 0x2a
 8053402:	d133      	bne.n	805346c <_svfiprintf_r+0x178>
 8053404:	9b03      	ldr	r3, [sp, #12]
 8053406:	1d1a      	adds	r2, r3, #4
 8053408:	681b      	ldr	r3, [r3, #0]
 805340a:	9203      	str	r2, [sp, #12]
 805340c:	2b00      	cmp	r3, #0
 805340e:	bfb8      	it	lt
 8053410:	f04f 33ff 	movlt.w	r3, #4294967295
 8053414:	3702      	adds	r7, #2
 8053416:	9305      	str	r3, [sp, #20]
 8053418:	4d2e      	ldr	r5, [pc, #184]	; (80534d4 <_svfiprintf_r+0x1e0>)
 805341a:	7839      	ldrb	r1, [r7, #0]
 805341c:	2203      	movs	r2, #3
 805341e:	4628      	mov	r0, r5
 8053420:	f7ed f816 	bl	8040450 <memchr>
 8053424:	b138      	cbz	r0, 8053436 <_svfiprintf_r+0x142>
 8053426:	2340      	movs	r3, #64	; 0x40
 8053428:	1b40      	subs	r0, r0, r5
 805342a:	fa03 f000 	lsl.w	r0, r3, r0
 805342e:	9b04      	ldr	r3, [sp, #16]
 8053430:	4303      	orrs	r3, r0
 8053432:	3701      	adds	r7, #1
 8053434:	9304      	str	r3, [sp, #16]
 8053436:	7839      	ldrb	r1, [r7, #0]
 8053438:	4827      	ldr	r0, [pc, #156]	; (80534d8 <_svfiprintf_r+0x1e4>)
 805343a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805343e:	2206      	movs	r2, #6
 8053440:	1c7e      	adds	r6, r7, #1
 8053442:	f7ed f805 	bl	8040450 <memchr>
 8053446:	2800      	cmp	r0, #0
 8053448:	d038      	beq.n	80534bc <_svfiprintf_r+0x1c8>
 805344a:	4b24      	ldr	r3, [pc, #144]	; (80534dc <_svfiprintf_r+0x1e8>)
 805344c:	bb13      	cbnz	r3, 8053494 <_svfiprintf_r+0x1a0>
 805344e:	9b03      	ldr	r3, [sp, #12]
 8053450:	3307      	adds	r3, #7
 8053452:	f023 0307 	bic.w	r3, r3, #7
 8053456:	3308      	adds	r3, #8
 8053458:	9303      	str	r3, [sp, #12]
 805345a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805345c:	444b      	add	r3, r9
 805345e:	9309      	str	r3, [sp, #36]	; 0x24
 8053460:	e76d      	b.n	805333e <_svfiprintf_r+0x4a>
 8053462:	fb05 3202 	mla	r2, r5, r2, r3
 8053466:	2001      	movs	r0, #1
 8053468:	460f      	mov	r7, r1
 805346a:	e7a6      	b.n	80533ba <_svfiprintf_r+0xc6>
 805346c:	2300      	movs	r3, #0
 805346e:	3701      	adds	r7, #1
 8053470:	9305      	str	r3, [sp, #20]
 8053472:	4619      	mov	r1, r3
 8053474:	250a      	movs	r5, #10
 8053476:	4638      	mov	r0, r7
 8053478:	f810 2b01 	ldrb.w	r2, [r0], #1
 805347c:	3a30      	subs	r2, #48	; 0x30
 805347e:	2a09      	cmp	r2, #9
 8053480:	d903      	bls.n	805348a <_svfiprintf_r+0x196>
 8053482:	2b00      	cmp	r3, #0
 8053484:	d0c8      	beq.n	8053418 <_svfiprintf_r+0x124>
 8053486:	9105      	str	r1, [sp, #20]
 8053488:	e7c6      	b.n	8053418 <_svfiprintf_r+0x124>
 805348a:	fb05 2101 	mla	r1, r5, r1, r2
 805348e:	2301      	movs	r3, #1
 8053490:	4607      	mov	r7, r0
 8053492:	e7f0      	b.n	8053476 <_svfiprintf_r+0x182>
 8053494:	ab03      	add	r3, sp, #12
 8053496:	9300      	str	r3, [sp, #0]
 8053498:	4622      	mov	r2, r4
 805349a:	4b11      	ldr	r3, [pc, #68]	; (80534e0 <_svfiprintf_r+0x1ec>)
 805349c:	a904      	add	r1, sp, #16
 805349e:	4640      	mov	r0, r8
 80534a0:	f7fd fc38 	bl	8050d14 <_printf_float>
 80534a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80534a8:	4681      	mov	r9, r0
 80534aa:	d1d6      	bne.n	805345a <_svfiprintf_r+0x166>
 80534ac:	89a3      	ldrh	r3, [r4, #12]
 80534ae:	065b      	lsls	r3, r3, #25
 80534b0:	f53f af35 	bmi.w	805331e <_svfiprintf_r+0x2a>
 80534b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80534b6:	b01d      	add	sp, #116	; 0x74
 80534b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80534bc:	ab03      	add	r3, sp, #12
 80534be:	9300      	str	r3, [sp, #0]
 80534c0:	4622      	mov	r2, r4
 80534c2:	4b07      	ldr	r3, [pc, #28]	; (80534e0 <_svfiprintf_r+0x1ec>)
 80534c4:	a904      	add	r1, sp, #16
 80534c6:	4640      	mov	r0, r8
 80534c8:	f7fd feda 	bl	8051280 <_printf_i>
 80534cc:	e7ea      	b.n	80534a4 <_svfiprintf_r+0x1b0>
 80534ce:	bf00      	nop
 80534d0:	080550ec 	.word	0x080550ec
 80534d4:	080550f2 	.word	0x080550f2
 80534d8:	080550f6 	.word	0x080550f6
 80534dc:	08050d15 	.word	0x08050d15
 80534e0:	08053241 	.word	0x08053241

080534e4 <__sfputc_r>:
 80534e4:	6893      	ldr	r3, [r2, #8]
 80534e6:	3b01      	subs	r3, #1
 80534e8:	2b00      	cmp	r3, #0
 80534ea:	b410      	push	{r4}
 80534ec:	6093      	str	r3, [r2, #8]
 80534ee:	da08      	bge.n	8053502 <__sfputc_r+0x1e>
 80534f0:	6994      	ldr	r4, [r2, #24]
 80534f2:	42a3      	cmp	r3, r4
 80534f4:	db01      	blt.n	80534fa <__sfputc_r+0x16>
 80534f6:	290a      	cmp	r1, #10
 80534f8:	d103      	bne.n	8053502 <__sfputc_r+0x1e>
 80534fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80534fe:	f7fe b9fd 	b.w	80518fc <__swbuf_r>
 8053502:	6813      	ldr	r3, [r2, #0]
 8053504:	1c58      	adds	r0, r3, #1
 8053506:	6010      	str	r0, [r2, #0]
 8053508:	7019      	strb	r1, [r3, #0]
 805350a:	4608      	mov	r0, r1
 805350c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8053510:	4770      	bx	lr

08053512 <__sfputs_r>:
 8053512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053514:	4606      	mov	r6, r0
 8053516:	460f      	mov	r7, r1
 8053518:	4614      	mov	r4, r2
 805351a:	18d5      	adds	r5, r2, r3
 805351c:	42ac      	cmp	r4, r5
 805351e:	d101      	bne.n	8053524 <__sfputs_r+0x12>
 8053520:	2000      	movs	r0, #0
 8053522:	e007      	b.n	8053534 <__sfputs_r+0x22>
 8053524:	463a      	mov	r2, r7
 8053526:	f814 1b01 	ldrb.w	r1, [r4], #1
 805352a:	4630      	mov	r0, r6
 805352c:	f7ff ffda 	bl	80534e4 <__sfputc_r>
 8053530:	1c43      	adds	r3, r0, #1
 8053532:	d1f3      	bne.n	805351c <__sfputs_r+0xa>
 8053534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08053538 <_vfiprintf_r>:
 8053538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805353c:	460c      	mov	r4, r1
 805353e:	b09d      	sub	sp, #116	; 0x74
 8053540:	4617      	mov	r7, r2
 8053542:	461d      	mov	r5, r3
 8053544:	4606      	mov	r6, r0
 8053546:	b118      	cbz	r0, 8053550 <_vfiprintf_r+0x18>
 8053548:	6983      	ldr	r3, [r0, #24]
 805354a:	b90b      	cbnz	r3, 8053550 <_vfiprintf_r+0x18>
 805354c:	f7ff f9cc 	bl	80528e8 <__sinit>
 8053550:	4b7c      	ldr	r3, [pc, #496]	; (8053744 <_vfiprintf_r+0x20c>)
 8053552:	429c      	cmp	r4, r3
 8053554:	d158      	bne.n	8053608 <_vfiprintf_r+0xd0>
 8053556:	6874      	ldr	r4, [r6, #4]
 8053558:	89a3      	ldrh	r3, [r4, #12]
 805355a:	0718      	lsls	r0, r3, #28
 805355c:	d55e      	bpl.n	805361c <_vfiprintf_r+0xe4>
 805355e:	6923      	ldr	r3, [r4, #16]
 8053560:	2b00      	cmp	r3, #0
 8053562:	d05b      	beq.n	805361c <_vfiprintf_r+0xe4>
 8053564:	2300      	movs	r3, #0
 8053566:	9309      	str	r3, [sp, #36]	; 0x24
 8053568:	2320      	movs	r3, #32
 805356a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 805356e:	2330      	movs	r3, #48	; 0x30
 8053570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8053574:	9503      	str	r5, [sp, #12]
 8053576:	f04f 0b01 	mov.w	fp, #1
 805357a:	46b8      	mov	r8, r7
 805357c:	4645      	mov	r5, r8
 805357e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8053582:	b10b      	cbz	r3, 8053588 <_vfiprintf_r+0x50>
 8053584:	2b25      	cmp	r3, #37	; 0x25
 8053586:	d154      	bne.n	8053632 <_vfiprintf_r+0xfa>
 8053588:	ebb8 0a07 	subs.w	sl, r8, r7
 805358c:	d00b      	beq.n	80535a6 <_vfiprintf_r+0x6e>
 805358e:	4653      	mov	r3, sl
 8053590:	463a      	mov	r2, r7
 8053592:	4621      	mov	r1, r4
 8053594:	4630      	mov	r0, r6
 8053596:	f7ff ffbc 	bl	8053512 <__sfputs_r>
 805359a:	3001      	adds	r0, #1
 805359c:	f000 80c2 	beq.w	8053724 <_vfiprintf_r+0x1ec>
 80535a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80535a2:	4453      	add	r3, sl
 80535a4:	9309      	str	r3, [sp, #36]	; 0x24
 80535a6:	f898 3000 	ldrb.w	r3, [r8]
 80535aa:	2b00      	cmp	r3, #0
 80535ac:	f000 80ba 	beq.w	8053724 <_vfiprintf_r+0x1ec>
 80535b0:	2300      	movs	r3, #0
 80535b2:	f04f 32ff 	mov.w	r2, #4294967295
 80535b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80535ba:	9304      	str	r3, [sp, #16]
 80535bc:	9307      	str	r3, [sp, #28]
 80535be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80535c2:	931a      	str	r3, [sp, #104]	; 0x68
 80535c4:	46a8      	mov	r8, r5
 80535c6:	2205      	movs	r2, #5
 80535c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80535cc:	485e      	ldr	r0, [pc, #376]	; (8053748 <_vfiprintf_r+0x210>)
 80535ce:	f7ec ff3f 	bl	8040450 <memchr>
 80535d2:	9b04      	ldr	r3, [sp, #16]
 80535d4:	bb78      	cbnz	r0, 8053636 <_vfiprintf_r+0xfe>
 80535d6:	06d9      	lsls	r1, r3, #27
 80535d8:	bf44      	itt	mi
 80535da:	2220      	movmi	r2, #32
 80535dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80535e0:	071a      	lsls	r2, r3, #28
 80535e2:	bf44      	itt	mi
 80535e4:	222b      	movmi	r2, #43	; 0x2b
 80535e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80535ea:	782a      	ldrb	r2, [r5, #0]
 80535ec:	2a2a      	cmp	r2, #42	; 0x2a
 80535ee:	d02a      	beq.n	8053646 <_vfiprintf_r+0x10e>
 80535f0:	9a07      	ldr	r2, [sp, #28]
 80535f2:	46a8      	mov	r8, r5
 80535f4:	2000      	movs	r0, #0
 80535f6:	250a      	movs	r5, #10
 80535f8:	4641      	mov	r1, r8
 80535fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80535fe:	3b30      	subs	r3, #48	; 0x30
 8053600:	2b09      	cmp	r3, #9
 8053602:	d969      	bls.n	80536d8 <_vfiprintf_r+0x1a0>
 8053604:	b360      	cbz	r0, 8053660 <_vfiprintf_r+0x128>
 8053606:	e024      	b.n	8053652 <_vfiprintf_r+0x11a>
 8053608:	4b50      	ldr	r3, [pc, #320]	; (805374c <_vfiprintf_r+0x214>)
 805360a:	429c      	cmp	r4, r3
 805360c:	d101      	bne.n	8053612 <_vfiprintf_r+0xda>
 805360e:	68b4      	ldr	r4, [r6, #8]
 8053610:	e7a2      	b.n	8053558 <_vfiprintf_r+0x20>
 8053612:	4b4f      	ldr	r3, [pc, #316]	; (8053750 <_vfiprintf_r+0x218>)
 8053614:	429c      	cmp	r4, r3
 8053616:	bf08      	it	eq
 8053618:	68f4      	ldreq	r4, [r6, #12]
 805361a:	e79d      	b.n	8053558 <_vfiprintf_r+0x20>
 805361c:	4621      	mov	r1, r4
 805361e:	4630      	mov	r0, r6
 8053620:	f7fe f9be 	bl	80519a0 <__swsetup_r>
 8053624:	2800      	cmp	r0, #0
 8053626:	d09d      	beq.n	8053564 <_vfiprintf_r+0x2c>
 8053628:	f04f 30ff 	mov.w	r0, #4294967295
 805362c:	b01d      	add	sp, #116	; 0x74
 805362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8053632:	46a8      	mov	r8, r5
 8053634:	e7a2      	b.n	805357c <_vfiprintf_r+0x44>
 8053636:	4a44      	ldr	r2, [pc, #272]	; (8053748 <_vfiprintf_r+0x210>)
 8053638:	1a80      	subs	r0, r0, r2
 805363a:	fa0b f000 	lsl.w	r0, fp, r0
 805363e:	4318      	orrs	r0, r3
 8053640:	9004      	str	r0, [sp, #16]
 8053642:	4645      	mov	r5, r8
 8053644:	e7be      	b.n	80535c4 <_vfiprintf_r+0x8c>
 8053646:	9a03      	ldr	r2, [sp, #12]
 8053648:	1d11      	adds	r1, r2, #4
 805364a:	6812      	ldr	r2, [r2, #0]
 805364c:	9103      	str	r1, [sp, #12]
 805364e:	2a00      	cmp	r2, #0
 8053650:	db01      	blt.n	8053656 <_vfiprintf_r+0x11e>
 8053652:	9207      	str	r2, [sp, #28]
 8053654:	e004      	b.n	8053660 <_vfiprintf_r+0x128>
 8053656:	4252      	negs	r2, r2
 8053658:	f043 0302 	orr.w	r3, r3, #2
 805365c:	9207      	str	r2, [sp, #28]
 805365e:	9304      	str	r3, [sp, #16]
 8053660:	f898 3000 	ldrb.w	r3, [r8]
 8053664:	2b2e      	cmp	r3, #46	; 0x2e
 8053666:	d10e      	bne.n	8053686 <_vfiprintf_r+0x14e>
 8053668:	f898 3001 	ldrb.w	r3, [r8, #1]
 805366c:	2b2a      	cmp	r3, #42	; 0x2a
 805366e:	d138      	bne.n	80536e2 <_vfiprintf_r+0x1aa>
 8053670:	9b03      	ldr	r3, [sp, #12]
 8053672:	1d1a      	adds	r2, r3, #4
 8053674:	681b      	ldr	r3, [r3, #0]
 8053676:	9203      	str	r2, [sp, #12]
 8053678:	2b00      	cmp	r3, #0
 805367a:	bfb8      	it	lt
 805367c:	f04f 33ff 	movlt.w	r3, #4294967295
 8053680:	f108 0802 	add.w	r8, r8, #2
 8053684:	9305      	str	r3, [sp, #20]
 8053686:	4d33      	ldr	r5, [pc, #204]	; (8053754 <_vfiprintf_r+0x21c>)
 8053688:	f898 1000 	ldrb.w	r1, [r8]
 805368c:	2203      	movs	r2, #3
 805368e:	4628      	mov	r0, r5
 8053690:	f7ec fede 	bl	8040450 <memchr>
 8053694:	b140      	cbz	r0, 80536a8 <_vfiprintf_r+0x170>
 8053696:	2340      	movs	r3, #64	; 0x40
 8053698:	1b40      	subs	r0, r0, r5
 805369a:	fa03 f000 	lsl.w	r0, r3, r0
 805369e:	9b04      	ldr	r3, [sp, #16]
 80536a0:	4303      	orrs	r3, r0
 80536a2:	f108 0801 	add.w	r8, r8, #1
 80536a6:	9304      	str	r3, [sp, #16]
 80536a8:	f898 1000 	ldrb.w	r1, [r8]
 80536ac:	482a      	ldr	r0, [pc, #168]	; (8053758 <_vfiprintf_r+0x220>)
 80536ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80536b2:	2206      	movs	r2, #6
 80536b4:	f108 0701 	add.w	r7, r8, #1
 80536b8:	f7ec feca 	bl	8040450 <memchr>
 80536bc:	2800      	cmp	r0, #0
 80536be:	d037      	beq.n	8053730 <_vfiprintf_r+0x1f8>
 80536c0:	4b26      	ldr	r3, [pc, #152]	; (805375c <_vfiprintf_r+0x224>)
 80536c2:	bb1b      	cbnz	r3, 805370c <_vfiprintf_r+0x1d4>
 80536c4:	9b03      	ldr	r3, [sp, #12]
 80536c6:	3307      	adds	r3, #7
 80536c8:	f023 0307 	bic.w	r3, r3, #7
 80536cc:	3308      	adds	r3, #8
 80536ce:	9303      	str	r3, [sp, #12]
 80536d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80536d2:	444b      	add	r3, r9
 80536d4:	9309      	str	r3, [sp, #36]	; 0x24
 80536d6:	e750      	b.n	805357a <_vfiprintf_r+0x42>
 80536d8:	fb05 3202 	mla	r2, r5, r2, r3
 80536dc:	2001      	movs	r0, #1
 80536de:	4688      	mov	r8, r1
 80536e0:	e78a      	b.n	80535f8 <_vfiprintf_r+0xc0>
 80536e2:	2300      	movs	r3, #0
 80536e4:	f108 0801 	add.w	r8, r8, #1
 80536e8:	9305      	str	r3, [sp, #20]
 80536ea:	4619      	mov	r1, r3
 80536ec:	250a      	movs	r5, #10
 80536ee:	4640      	mov	r0, r8
 80536f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80536f4:	3a30      	subs	r2, #48	; 0x30
 80536f6:	2a09      	cmp	r2, #9
 80536f8:	d903      	bls.n	8053702 <_vfiprintf_r+0x1ca>
 80536fa:	2b00      	cmp	r3, #0
 80536fc:	d0c3      	beq.n	8053686 <_vfiprintf_r+0x14e>
 80536fe:	9105      	str	r1, [sp, #20]
 8053700:	e7c1      	b.n	8053686 <_vfiprintf_r+0x14e>
 8053702:	fb05 2101 	mla	r1, r5, r1, r2
 8053706:	2301      	movs	r3, #1
 8053708:	4680      	mov	r8, r0
 805370a:	e7f0      	b.n	80536ee <_vfiprintf_r+0x1b6>
 805370c:	ab03      	add	r3, sp, #12
 805370e:	9300      	str	r3, [sp, #0]
 8053710:	4622      	mov	r2, r4
 8053712:	4b13      	ldr	r3, [pc, #76]	; (8053760 <_vfiprintf_r+0x228>)
 8053714:	a904      	add	r1, sp, #16
 8053716:	4630      	mov	r0, r6
 8053718:	f7fd fafc 	bl	8050d14 <_printf_float>
 805371c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8053720:	4681      	mov	r9, r0
 8053722:	d1d5      	bne.n	80536d0 <_vfiprintf_r+0x198>
 8053724:	89a3      	ldrh	r3, [r4, #12]
 8053726:	065b      	lsls	r3, r3, #25
 8053728:	f53f af7e 	bmi.w	8053628 <_vfiprintf_r+0xf0>
 805372c:	9809      	ldr	r0, [sp, #36]	; 0x24
 805372e:	e77d      	b.n	805362c <_vfiprintf_r+0xf4>
 8053730:	ab03      	add	r3, sp, #12
 8053732:	9300      	str	r3, [sp, #0]
 8053734:	4622      	mov	r2, r4
 8053736:	4b0a      	ldr	r3, [pc, #40]	; (8053760 <_vfiprintf_r+0x228>)
 8053738:	a904      	add	r1, sp, #16
 805373a:	4630      	mov	r0, r6
 805373c:	f7fd fda0 	bl	8051280 <_printf_i>
 8053740:	e7ec      	b.n	805371c <_vfiprintf_r+0x1e4>
 8053742:	bf00      	nop
 8053744:	08054fa4 	.word	0x08054fa4
 8053748:	080550ec 	.word	0x080550ec
 805374c:	08054fc4 	.word	0x08054fc4
 8053750:	08054f84 	.word	0x08054f84
 8053754:	080550f2 	.word	0x080550f2
 8053758:	080550f6 	.word	0x080550f6
 805375c:	08050d15 	.word	0x08050d15
 8053760:	08053513 	.word	0x08053513

08053764 <_sbrk_r>:
 8053764:	b538      	push	{r3, r4, r5, lr}
 8053766:	4c06      	ldr	r4, [pc, #24]	; (8053780 <_sbrk_r+0x1c>)
 8053768:	2300      	movs	r3, #0
 805376a:	4605      	mov	r5, r0
 805376c:	4608      	mov	r0, r1
 805376e:	6023      	str	r3, [r4, #0]
 8053770:	f000 fa80 	bl	8053c74 <_sbrk>
 8053774:	1c43      	adds	r3, r0, #1
 8053776:	d102      	bne.n	805377e <_sbrk_r+0x1a>
 8053778:	6823      	ldr	r3, [r4, #0]
 805377a:	b103      	cbz	r3, 805377e <_sbrk_r+0x1a>
 805377c:	602b      	str	r3, [r5, #0]
 805377e:	bd38      	pop	{r3, r4, r5, pc}
 8053780:	200063b0 	.word	0x200063b0

08053784 <__sread>:
 8053784:	b510      	push	{r4, lr}
 8053786:	460c      	mov	r4, r1
 8053788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805378c:	f000 f8e2 	bl	8053954 <_read_r>
 8053790:	2800      	cmp	r0, #0
 8053792:	bfab      	itete	ge
 8053794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8053796:	89a3      	ldrhlt	r3, [r4, #12]
 8053798:	181b      	addge	r3, r3, r0
 805379a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 805379e:	bfac      	ite	ge
 80537a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80537a2:	81a3      	strhlt	r3, [r4, #12]
 80537a4:	bd10      	pop	{r4, pc}

080537a6 <__swrite>:
 80537a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80537aa:	461f      	mov	r7, r3
 80537ac:	898b      	ldrh	r3, [r1, #12]
 80537ae:	05db      	lsls	r3, r3, #23
 80537b0:	4605      	mov	r5, r0
 80537b2:	460c      	mov	r4, r1
 80537b4:	4616      	mov	r6, r2
 80537b6:	d505      	bpl.n	80537c4 <__swrite+0x1e>
 80537b8:	2302      	movs	r3, #2
 80537ba:	2200      	movs	r2, #0
 80537bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80537c0:	f000 f874 	bl	80538ac <_lseek_r>
 80537c4:	89a3      	ldrh	r3, [r4, #12]
 80537c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80537ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80537ce:	81a3      	strh	r3, [r4, #12]
 80537d0:	4632      	mov	r2, r6
 80537d2:	463b      	mov	r3, r7
 80537d4:	4628      	mov	r0, r5
 80537d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80537da:	f000 b823 	b.w	8053824 <_write_r>

080537de <__sseek>:
 80537de:	b510      	push	{r4, lr}
 80537e0:	460c      	mov	r4, r1
 80537e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80537e6:	f000 f861 	bl	80538ac <_lseek_r>
 80537ea:	1c43      	adds	r3, r0, #1
 80537ec:	89a3      	ldrh	r3, [r4, #12]
 80537ee:	bf15      	itete	ne
 80537f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80537f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80537f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80537fa:	81a3      	strheq	r3, [r4, #12]
 80537fc:	bf18      	it	ne
 80537fe:	81a3      	strhne	r3, [r4, #12]
 8053800:	bd10      	pop	{r4, pc}

08053802 <__sclose>:
 8053802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8053806:	f000 b81f 	b.w	8053848 <_close_r>

0805380a <__ascii_wctomb>:
 805380a:	b149      	cbz	r1, 8053820 <__ascii_wctomb+0x16>
 805380c:	2aff      	cmp	r2, #255	; 0xff
 805380e:	bf85      	ittet	hi
 8053810:	238a      	movhi	r3, #138	; 0x8a
 8053812:	6003      	strhi	r3, [r0, #0]
 8053814:	700a      	strbls	r2, [r1, #0]
 8053816:	f04f 30ff 	movhi.w	r0, #4294967295
 805381a:	bf98      	it	ls
 805381c:	2001      	movls	r0, #1
 805381e:	4770      	bx	lr
 8053820:	4608      	mov	r0, r1
 8053822:	4770      	bx	lr

08053824 <_write_r>:
 8053824:	b538      	push	{r3, r4, r5, lr}
 8053826:	4c07      	ldr	r4, [pc, #28]	; (8053844 <_write_r+0x20>)
 8053828:	4605      	mov	r5, r0
 805382a:	4608      	mov	r0, r1
 805382c:	4611      	mov	r1, r2
 805382e:	2200      	movs	r2, #0
 8053830:	6022      	str	r2, [r4, #0]
 8053832:	461a      	mov	r2, r3
 8053834:	f000 fa2c 	bl	8053c90 <_write>
 8053838:	1c43      	adds	r3, r0, #1
 805383a:	d102      	bne.n	8053842 <_write_r+0x1e>
 805383c:	6823      	ldr	r3, [r4, #0]
 805383e:	b103      	cbz	r3, 8053842 <_write_r+0x1e>
 8053840:	602b      	str	r3, [r5, #0]
 8053842:	bd38      	pop	{r3, r4, r5, pc}
 8053844:	200063b0 	.word	0x200063b0

08053848 <_close_r>:
 8053848:	b538      	push	{r3, r4, r5, lr}
 805384a:	4c06      	ldr	r4, [pc, #24]	; (8053864 <_close_r+0x1c>)
 805384c:	2300      	movs	r3, #0
 805384e:	4605      	mov	r5, r0
 8053850:	4608      	mov	r0, r1
 8053852:	6023      	str	r3, [r4, #0]
 8053854:	f000 f9e6 	bl	8053c24 <_close>
 8053858:	1c43      	adds	r3, r0, #1
 805385a:	d102      	bne.n	8053862 <_close_r+0x1a>
 805385c:	6823      	ldr	r3, [r4, #0]
 805385e:	b103      	cbz	r3, 8053862 <_close_r+0x1a>
 8053860:	602b      	str	r3, [r5, #0]
 8053862:	bd38      	pop	{r3, r4, r5, pc}
 8053864:	200063b0 	.word	0x200063b0

08053868 <_fstat_r>:
 8053868:	b538      	push	{r3, r4, r5, lr}
 805386a:	4c07      	ldr	r4, [pc, #28]	; (8053888 <_fstat_r+0x20>)
 805386c:	2300      	movs	r3, #0
 805386e:	4605      	mov	r5, r0
 8053870:	4608      	mov	r0, r1
 8053872:	4611      	mov	r1, r2
 8053874:	6023      	str	r3, [r4, #0]
 8053876:	f000 f9dd 	bl	8053c34 <_fstat>
 805387a:	1c43      	adds	r3, r0, #1
 805387c:	d102      	bne.n	8053884 <_fstat_r+0x1c>
 805387e:	6823      	ldr	r3, [r4, #0]
 8053880:	b103      	cbz	r3, 8053884 <_fstat_r+0x1c>
 8053882:	602b      	str	r3, [r5, #0]
 8053884:	bd38      	pop	{r3, r4, r5, pc}
 8053886:	bf00      	nop
 8053888:	200063b0 	.word	0x200063b0

0805388c <_isatty_r>:
 805388c:	b538      	push	{r3, r4, r5, lr}
 805388e:	4c06      	ldr	r4, [pc, #24]	; (80538a8 <_isatty_r+0x1c>)
 8053890:	2300      	movs	r3, #0
 8053892:	4605      	mov	r5, r0
 8053894:	4608      	mov	r0, r1
 8053896:	6023      	str	r3, [r4, #0]
 8053898:	f000 f9d4 	bl	8053c44 <_isatty>
 805389c:	1c43      	adds	r3, r0, #1
 805389e:	d102      	bne.n	80538a6 <_isatty_r+0x1a>
 80538a0:	6823      	ldr	r3, [r4, #0]
 80538a2:	b103      	cbz	r3, 80538a6 <_isatty_r+0x1a>
 80538a4:	602b      	str	r3, [r5, #0]
 80538a6:	bd38      	pop	{r3, r4, r5, pc}
 80538a8:	200063b0 	.word	0x200063b0

080538ac <_lseek_r>:
 80538ac:	b538      	push	{r3, r4, r5, lr}
 80538ae:	4c07      	ldr	r4, [pc, #28]	; (80538cc <_lseek_r+0x20>)
 80538b0:	4605      	mov	r5, r0
 80538b2:	4608      	mov	r0, r1
 80538b4:	4611      	mov	r1, r2
 80538b6:	2200      	movs	r2, #0
 80538b8:	6022      	str	r2, [r4, #0]
 80538ba:	461a      	mov	r2, r3
 80538bc:	f000 f9ca 	bl	8053c54 <_lseek>
 80538c0:	1c43      	adds	r3, r0, #1
 80538c2:	d102      	bne.n	80538ca <_lseek_r+0x1e>
 80538c4:	6823      	ldr	r3, [r4, #0]
 80538c6:	b103      	cbz	r3, 80538ca <_lseek_r+0x1e>
 80538c8:	602b      	str	r3, [r5, #0]
 80538ca:	bd38      	pop	{r3, r4, r5, pc}
 80538cc:	200063b0 	.word	0x200063b0

080538d0 <memmove>:
 80538d0:	4288      	cmp	r0, r1
 80538d2:	b510      	push	{r4, lr}
 80538d4:	eb01 0302 	add.w	r3, r1, r2
 80538d8:	d807      	bhi.n	80538ea <memmove+0x1a>
 80538da:	1e42      	subs	r2, r0, #1
 80538dc:	4299      	cmp	r1, r3
 80538de:	d00a      	beq.n	80538f6 <memmove+0x26>
 80538e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80538e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80538e8:	e7f8      	b.n	80538dc <memmove+0xc>
 80538ea:	4283      	cmp	r3, r0
 80538ec:	d9f5      	bls.n	80538da <memmove+0xa>
 80538ee:	1881      	adds	r1, r0, r2
 80538f0:	1ad2      	subs	r2, r2, r3
 80538f2:	42d3      	cmn	r3, r2
 80538f4:	d100      	bne.n	80538f8 <memmove+0x28>
 80538f6:	bd10      	pop	{r4, pc}
 80538f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80538fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8053900:	e7f7      	b.n	80538f2 <memmove+0x22>

08053902 <__malloc_lock>:
 8053902:	4770      	bx	lr

08053904 <__malloc_unlock>:
 8053904:	4770      	bx	lr

08053906 <_realloc_r>:
 8053906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053908:	4607      	mov	r7, r0
 805390a:	4614      	mov	r4, r2
 805390c:	460e      	mov	r6, r1
 805390e:	b921      	cbnz	r1, 805391a <_realloc_r+0x14>
 8053910:	4611      	mov	r1, r2
 8053912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8053916:	f7ff bc39 	b.w	805318c <_malloc_r>
 805391a:	b922      	cbnz	r2, 8053926 <_realloc_r+0x20>
 805391c:	f7ff fbe8 	bl	80530f0 <_free_r>
 8053920:	4625      	mov	r5, r4
 8053922:	4628      	mov	r0, r5
 8053924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8053926:	f000 f827 	bl	8053978 <_malloc_usable_size_r>
 805392a:	42a0      	cmp	r0, r4
 805392c:	d20f      	bcs.n	805394e <_realloc_r+0x48>
 805392e:	4621      	mov	r1, r4
 8053930:	4638      	mov	r0, r7
 8053932:	f7ff fc2b 	bl	805318c <_malloc_r>
 8053936:	4605      	mov	r5, r0
 8053938:	2800      	cmp	r0, #0
 805393a:	d0f2      	beq.n	8053922 <_realloc_r+0x1c>
 805393c:	4631      	mov	r1, r6
 805393e:	4622      	mov	r2, r4
 8053940:	f7fd f940 	bl	8050bc4 <memcpy>
 8053944:	4631      	mov	r1, r6
 8053946:	4638      	mov	r0, r7
 8053948:	f7ff fbd2 	bl	80530f0 <_free_r>
 805394c:	e7e9      	b.n	8053922 <_realloc_r+0x1c>
 805394e:	4635      	mov	r5, r6
 8053950:	e7e7      	b.n	8053922 <_realloc_r+0x1c>
	...

08053954 <_read_r>:
 8053954:	b538      	push	{r3, r4, r5, lr}
 8053956:	4c07      	ldr	r4, [pc, #28]	; (8053974 <_read_r+0x20>)
 8053958:	4605      	mov	r5, r0
 805395a:	4608      	mov	r0, r1
 805395c:	4611      	mov	r1, r2
 805395e:	2200      	movs	r2, #0
 8053960:	6022      	str	r2, [r4, #0]
 8053962:	461a      	mov	r2, r3
 8053964:	f000 f97e 	bl	8053c64 <_read>
 8053968:	1c43      	adds	r3, r0, #1
 805396a:	d102      	bne.n	8053972 <_read_r+0x1e>
 805396c:	6823      	ldr	r3, [r4, #0]
 805396e:	b103      	cbz	r3, 8053972 <_read_r+0x1e>
 8053970:	602b      	str	r3, [r5, #0]
 8053972:	bd38      	pop	{r3, r4, r5, pc}
 8053974:	200063b0 	.word	0x200063b0

08053978 <_malloc_usable_size_r>:
 8053978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 805397c:	1f18      	subs	r0, r3, #4
 805397e:	2b00      	cmp	r3, #0
 8053980:	bfbc      	itt	lt
 8053982:	580b      	ldrlt	r3, [r1, r0]
 8053984:	18c0      	addlt	r0, r0, r3
 8053986:	4770      	bx	lr

08053988 <ceil>:
 8053988:	ec51 0b10 	vmov	r0, r1, d0
 805398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8053990:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8053994:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8053998:	2e13      	cmp	r6, #19
 805399a:	460c      	mov	r4, r1
 805399c:	ee10 5a10 	vmov	r5, s0
 80539a0:	4680      	mov	r8, r0
 80539a2:	dc30      	bgt.n	8053a06 <ceil+0x7e>
 80539a4:	2e00      	cmp	r6, #0
 80539a6:	da12      	bge.n	80539ce <ceil+0x46>
 80539a8:	a333      	add	r3, pc, #204	; (adr r3, 8053a78 <ceil+0xf0>)
 80539aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80539ae:	f7ec fda5 	bl	80404fc <__adddf3>
 80539b2:	2200      	movs	r2, #0
 80539b4:	2300      	movs	r3, #0
 80539b6:	f7ed f9e7 	bl	8040d88 <__aeabi_dcmpgt>
 80539ba:	b128      	cbz	r0, 80539c8 <ceil+0x40>
 80539bc:	2c00      	cmp	r4, #0
 80539be:	db55      	blt.n	8053a6c <ceil+0xe4>
 80539c0:	432c      	orrs	r4, r5
 80539c2:	d057      	beq.n	8053a74 <ceil+0xec>
 80539c4:	4c2e      	ldr	r4, [pc, #184]	; (8053a80 <ceil+0xf8>)
 80539c6:	2500      	movs	r5, #0
 80539c8:	4621      	mov	r1, r4
 80539ca:	4628      	mov	r0, r5
 80539cc:	e025      	b.n	8053a1a <ceil+0x92>
 80539ce:	4f2d      	ldr	r7, [pc, #180]	; (8053a84 <ceil+0xfc>)
 80539d0:	4137      	asrs	r7, r6
 80539d2:	ea01 0307 	and.w	r3, r1, r7
 80539d6:	4303      	orrs	r3, r0
 80539d8:	d01f      	beq.n	8053a1a <ceil+0x92>
 80539da:	a327      	add	r3, pc, #156	; (adr r3, 8053a78 <ceil+0xf0>)
 80539dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80539e0:	f7ec fd8c 	bl	80404fc <__adddf3>
 80539e4:	2200      	movs	r2, #0
 80539e6:	2300      	movs	r3, #0
 80539e8:	f7ed f9ce 	bl	8040d88 <__aeabi_dcmpgt>
 80539ec:	2800      	cmp	r0, #0
 80539ee:	d0eb      	beq.n	80539c8 <ceil+0x40>
 80539f0:	2c00      	cmp	r4, #0
 80539f2:	bfc2      	ittt	gt
 80539f4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80539f8:	fa43 f606 	asrgt.w	r6, r3, r6
 80539fc:	19a4      	addgt	r4, r4, r6
 80539fe:	ea24 0407 	bic.w	r4, r4, r7
 8053a02:	2500      	movs	r5, #0
 8053a04:	e7e0      	b.n	80539c8 <ceil+0x40>
 8053a06:	2e33      	cmp	r6, #51	; 0x33
 8053a08:	dd0b      	ble.n	8053a22 <ceil+0x9a>
 8053a0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8053a0e:	d104      	bne.n	8053a1a <ceil+0x92>
 8053a10:	ee10 2a10 	vmov	r2, s0
 8053a14:	460b      	mov	r3, r1
 8053a16:	f7ec fd71 	bl	80404fc <__adddf3>
 8053a1a:	ec41 0b10 	vmov	d0, r0, r1
 8053a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8053a22:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8053a26:	f04f 33ff 	mov.w	r3, #4294967295
 8053a2a:	fa23 f707 	lsr.w	r7, r3, r7
 8053a2e:	4207      	tst	r7, r0
 8053a30:	d0f3      	beq.n	8053a1a <ceil+0x92>
 8053a32:	a311      	add	r3, pc, #68	; (adr r3, 8053a78 <ceil+0xf0>)
 8053a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8053a38:	f7ec fd60 	bl	80404fc <__adddf3>
 8053a3c:	2200      	movs	r2, #0
 8053a3e:	2300      	movs	r3, #0
 8053a40:	f7ed f9a2 	bl	8040d88 <__aeabi_dcmpgt>
 8053a44:	2800      	cmp	r0, #0
 8053a46:	d0bf      	beq.n	80539c8 <ceil+0x40>
 8053a48:	2c00      	cmp	r4, #0
 8053a4a:	dd02      	ble.n	8053a52 <ceil+0xca>
 8053a4c:	2e14      	cmp	r6, #20
 8053a4e:	d103      	bne.n	8053a58 <ceil+0xd0>
 8053a50:	3401      	adds	r4, #1
 8053a52:	ea25 0507 	bic.w	r5, r5, r7
 8053a56:	e7b7      	b.n	80539c8 <ceil+0x40>
 8053a58:	2301      	movs	r3, #1
 8053a5a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8053a5e:	fa03 f606 	lsl.w	r6, r3, r6
 8053a62:	4435      	add	r5, r6
 8053a64:	4545      	cmp	r5, r8
 8053a66:	bf38      	it	cc
 8053a68:	18e4      	addcc	r4, r4, r3
 8053a6a:	e7f2      	b.n	8053a52 <ceil+0xca>
 8053a6c:	2500      	movs	r5, #0
 8053a6e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8053a72:	e7a9      	b.n	80539c8 <ceil+0x40>
 8053a74:	4625      	mov	r5, r4
 8053a76:	e7a7      	b.n	80539c8 <ceil+0x40>
 8053a78:	8800759c 	.word	0x8800759c
 8053a7c:	7e37e43c 	.word	0x7e37e43c
 8053a80:	3ff00000 	.word	0x3ff00000
 8053a84:	000fffff 	.word	0x000fffff

08053a88 <floor>:
 8053a88:	ec51 0b10 	vmov	r0, r1, d0
 8053a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8053a90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8053a94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8053a98:	2e13      	cmp	r6, #19
 8053a9a:	460c      	mov	r4, r1
 8053a9c:	ee10 5a10 	vmov	r5, s0
 8053aa0:	4680      	mov	r8, r0
 8053aa2:	dc34      	bgt.n	8053b0e <floor+0x86>
 8053aa4:	2e00      	cmp	r6, #0
 8053aa6:	da16      	bge.n	8053ad6 <floor+0x4e>
 8053aa8:	a335      	add	r3, pc, #212	; (adr r3, 8053b80 <floor+0xf8>)
 8053aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8053aae:	f7ec fd25 	bl	80404fc <__adddf3>
 8053ab2:	2200      	movs	r2, #0
 8053ab4:	2300      	movs	r3, #0
 8053ab6:	f7ed f967 	bl	8040d88 <__aeabi_dcmpgt>
 8053aba:	b148      	cbz	r0, 8053ad0 <floor+0x48>
 8053abc:	2c00      	cmp	r4, #0
 8053abe:	da59      	bge.n	8053b74 <floor+0xec>
 8053ac0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8053ac4:	4a30      	ldr	r2, [pc, #192]	; (8053b88 <floor+0x100>)
 8053ac6:	432b      	orrs	r3, r5
 8053ac8:	2500      	movs	r5, #0
 8053aca:	42ab      	cmp	r3, r5
 8053acc:	bf18      	it	ne
 8053ace:	4614      	movne	r4, r2
 8053ad0:	4621      	mov	r1, r4
 8053ad2:	4628      	mov	r0, r5
 8053ad4:	e025      	b.n	8053b22 <floor+0x9a>
 8053ad6:	4f2d      	ldr	r7, [pc, #180]	; (8053b8c <floor+0x104>)
 8053ad8:	4137      	asrs	r7, r6
 8053ada:	ea01 0307 	and.w	r3, r1, r7
 8053ade:	4303      	orrs	r3, r0
 8053ae0:	d01f      	beq.n	8053b22 <floor+0x9a>
 8053ae2:	a327      	add	r3, pc, #156	; (adr r3, 8053b80 <floor+0xf8>)
 8053ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8053ae8:	f7ec fd08 	bl	80404fc <__adddf3>
 8053aec:	2200      	movs	r2, #0
 8053aee:	2300      	movs	r3, #0
 8053af0:	f7ed f94a 	bl	8040d88 <__aeabi_dcmpgt>
 8053af4:	2800      	cmp	r0, #0
 8053af6:	d0eb      	beq.n	8053ad0 <floor+0x48>
 8053af8:	2c00      	cmp	r4, #0
 8053afa:	bfbe      	ittt	lt
 8053afc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8053b00:	fa43 f606 	asrlt.w	r6, r3, r6
 8053b04:	19a4      	addlt	r4, r4, r6
 8053b06:	ea24 0407 	bic.w	r4, r4, r7
 8053b0a:	2500      	movs	r5, #0
 8053b0c:	e7e0      	b.n	8053ad0 <floor+0x48>
 8053b0e:	2e33      	cmp	r6, #51	; 0x33
 8053b10:	dd0b      	ble.n	8053b2a <floor+0xa2>
 8053b12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8053b16:	d104      	bne.n	8053b22 <floor+0x9a>
 8053b18:	ee10 2a10 	vmov	r2, s0
 8053b1c:	460b      	mov	r3, r1
 8053b1e:	f7ec fced 	bl	80404fc <__adddf3>
 8053b22:	ec41 0b10 	vmov	d0, r0, r1
 8053b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8053b2a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8053b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8053b32:	fa23 f707 	lsr.w	r7, r3, r7
 8053b36:	4207      	tst	r7, r0
 8053b38:	d0f3      	beq.n	8053b22 <floor+0x9a>
 8053b3a:	a311      	add	r3, pc, #68	; (adr r3, 8053b80 <floor+0xf8>)
 8053b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8053b40:	f7ec fcdc 	bl	80404fc <__adddf3>
 8053b44:	2200      	movs	r2, #0
 8053b46:	2300      	movs	r3, #0
 8053b48:	f7ed f91e 	bl	8040d88 <__aeabi_dcmpgt>
 8053b4c:	2800      	cmp	r0, #0
 8053b4e:	d0bf      	beq.n	8053ad0 <floor+0x48>
 8053b50:	2c00      	cmp	r4, #0
 8053b52:	da02      	bge.n	8053b5a <floor+0xd2>
 8053b54:	2e14      	cmp	r6, #20
 8053b56:	d103      	bne.n	8053b60 <floor+0xd8>
 8053b58:	3401      	adds	r4, #1
 8053b5a:	ea25 0507 	bic.w	r5, r5, r7
 8053b5e:	e7b7      	b.n	8053ad0 <floor+0x48>
 8053b60:	2301      	movs	r3, #1
 8053b62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8053b66:	fa03 f606 	lsl.w	r6, r3, r6
 8053b6a:	4435      	add	r5, r6
 8053b6c:	4545      	cmp	r5, r8
 8053b6e:	bf38      	it	cc
 8053b70:	18e4      	addcc	r4, r4, r3
 8053b72:	e7f2      	b.n	8053b5a <floor+0xd2>
 8053b74:	2500      	movs	r5, #0
 8053b76:	462c      	mov	r4, r5
 8053b78:	e7aa      	b.n	8053ad0 <floor+0x48>
 8053b7a:	bf00      	nop
 8053b7c:	f3af 8000 	nop.w
 8053b80:	8800759c 	.word	0x8800759c
 8053b84:	7e37e43c 	.word	0x7e37e43c
 8053b88:	bff00000 	.word	0xbff00000
 8053b8c:	000fffff 	.word	0x000fffff

08053b90 <round>:
 8053b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053b92:	ec57 6b10 	vmov	r6, r7, d0
 8053b96:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8053b9a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8053b9e:	2c13      	cmp	r4, #19
 8053ba0:	463b      	mov	r3, r7
 8053ba2:	463d      	mov	r5, r7
 8053ba4:	dc17      	bgt.n	8053bd6 <round+0x46>
 8053ba6:	2c00      	cmp	r4, #0
 8053ba8:	da09      	bge.n	8053bbe <round+0x2e>
 8053baa:	3401      	adds	r4, #1
 8053bac:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8053bb0:	d103      	bne.n	8053bba <round+0x2a>
 8053bb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8053bb6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8053bba:	2100      	movs	r1, #0
 8053bbc:	e02c      	b.n	8053c18 <round+0x88>
 8053bbe:	4a18      	ldr	r2, [pc, #96]	; (8053c20 <round+0x90>)
 8053bc0:	4122      	asrs	r2, r4
 8053bc2:	4217      	tst	r7, r2
 8053bc4:	d100      	bne.n	8053bc8 <round+0x38>
 8053bc6:	b19e      	cbz	r6, 8053bf0 <round+0x60>
 8053bc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8053bcc:	4123      	asrs	r3, r4
 8053bce:	442b      	add	r3, r5
 8053bd0:	ea23 0302 	bic.w	r3, r3, r2
 8053bd4:	e7f1      	b.n	8053bba <round+0x2a>
 8053bd6:	2c33      	cmp	r4, #51	; 0x33
 8053bd8:	dd0d      	ble.n	8053bf6 <round+0x66>
 8053bda:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8053bde:	d107      	bne.n	8053bf0 <round+0x60>
 8053be0:	4630      	mov	r0, r6
 8053be2:	4639      	mov	r1, r7
 8053be4:	ee10 2a10 	vmov	r2, s0
 8053be8:	f7ec fc88 	bl	80404fc <__adddf3>
 8053bec:	4606      	mov	r6, r0
 8053bee:	460f      	mov	r7, r1
 8053bf0:	ec47 6b10 	vmov	d0, r6, r7
 8053bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8053bf6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8053bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8053bfe:	40d0      	lsrs	r0, r2
 8053c00:	4206      	tst	r6, r0
 8053c02:	d0f5      	beq.n	8053bf0 <round+0x60>
 8053c04:	2201      	movs	r2, #1
 8053c06:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8053c0a:	fa02 f404 	lsl.w	r4, r2, r4
 8053c0e:	1931      	adds	r1, r6, r4
 8053c10:	bf28      	it	cs
 8053c12:	189b      	addcs	r3, r3, r2
 8053c14:	ea21 0100 	bic.w	r1, r1, r0
 8053c18:	461f      	mov	r7, r3
 8053c1a:	460e      	mov	r6, r1
 8053c1c:	e7e8      	b.n	8053bf0 <round+0x60>
 8053c1e:	bf00      	nop
 8053c20:	000fffff 	.word	0x000fffff

08053c24 <_close>:
 8053c24:	4b02      	ldr	r3, [pc, #8]	; (8053c30 <_close+0xc>)
 8053c26:	2258      	movs	r2, #88	; 0x58
 8053c28:	601a      	str	r2, [r3, #0]
 8053c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8053c2e:	4770      	bx	lr
 8053c30:	200063b0 	.word	0x200063b0

08053c34 <_fstat>:
 8053c34:	4b02      	ldr	r3, [pc, #8]	; (8053c40 <_fstat+0xc>)
 8053c36:	2258      	movs	r2, #88	; 0x58
 8053c38:	601a      	str	r2, [r3, #0]
 8053c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8053c3e:	4770      	bx	lr
 8053c40:	200063b0 	.word	0x200063b0

08053c44 <_isatty>:
 8053c44:	4b02      	ldr	r3, [pc, #8]	; (8053c50 <_isatty+0xc>)
 8053c46:	2258      	movs	r2, #88	; 0x58
 8053c48:	601a      	str	r2, [r3, #0]
 8053c4a:	2000      	movs	r0, #0
 8053c4c:	4770      	bx	lr
 8053c4e:	bf00      	nop
 8053c50:	200063b0 	.word	0x200063b0

08053c54 <_lseek>:
 8053c54:	4b02      	ldr	r3, [pc, #8]	; (8053c60 <_lseek+0xc>)
 8053c56:	2258      	movs	r2, #88	; 0x58
 8053c58:	601a      	str	r2, [r3, #0]
 8053c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8053c5e:	4770      	bx	lr
 8053c60:	200063b0 	.word	0x200063b0

08053c64 <_read>:
 8053c64:	4b02      	ldr	r3, [pc, #8]	; (8053c70 <_read+0xc>)
 8053c66:	2258      	movs	r2, #88	; 0x58
 8053c68:	601a      	str	r2, [r3, #0]
 8053c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8053c6e:	4770      	bx	lr
 8053c70:	200063b0 	.word	0x200063b0

08053c74 <_sbrk>:
 8053c74:	4b04      	ldr	r3, [pc, #16]	; (8053c88 <_sbrk+0x14>)
 8053c76:	6819      	ldr	r1, [r3, #0]
 8053c78:	4602      	mov	r2, r0
 8053c7a:	b909      	cbnz	r1, 8053c80 <_sbrk+0xc>
 8053c7c:	4903      	ldr	r1, [pc, #12]	; (8053c8c <_sbrk+0x18>)
 8053c7e:	6019      	str	r1, [r3, #0]
 8053c80:	6818      	ldr	r0, [r3, #0]
 8053c82:	4402      	add	r2, r0
 8053c84:	601a      	str	r2, [r3, #0]
 8053c86:	4770      	bx	lr
 8053c88:	20003dc0 	.word	0x20003dc0
 8053c8c:	200063b8 	.word	0x200063b8

08053c90 <_write>:
 8053c90:	4b02      	ldr	r3, [pc, #8]	; (8053c9c <_write+0xc>)
 8053c92:	2258      	movs	r2, #88	; 0x58
 8053c94:	601a      	str	r2, [r3, #0]
 8053c96:	f04f 30ff 	mov.w	r0, #4294967295
 8053c9a:	4770      	bx	lr
 8053c9c:	200063b0 	.word	0x200063b0

08053ca0 <_init>:
 8053ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053ca2:	bf00      	nop
 8053ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8053ca6:	bc08      	pop	{r3}
 8053ca8:	469e      	mov	lr, r3
 8053caa:	4770      	bx	lr

08053cac <_fini>:
 8053cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8053cae:	bf00      	nop
 8053cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8053cb2:	bc08      	pop	{r3}
 8053cb4:	469e      	mov	lr, r3
 8053cb6:	4770      	bx	lr
