
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08040200  08040200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c28  08040400  08040400  00000400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  08052028  08052028  00012028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080532e0  080532e0  00023580  2**0
                  CONTENTS
  4 .ARM          00000008  080532e0  080532e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080532e8  080532e8  00023580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080532e8  080532e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080532f0  080532f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20001000  080532f8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  08053570  08053570  00023570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004f64  20001278  20001278  00031278  2**3
                  ALLOC
 11 ._user_heap_stack 00001204  200061dc  200061dc  00031278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023580  2**0
                  CONTENTS, READONLY
 13 .debug_info   00077fe5  00000000  00000000  000235b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000e2a3  00000000  00000000  0009b595  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023f52  00000000  00000000  000a9838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000028e8  00000000  00000000  000cd790  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003ec8  00000000  00000000  000d0078  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037006  00000000  00000000  000d3f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0004011b  00000000  00000000  0010af46  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00100538  00000000  00000000  0014b061  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024b599  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008808  00000000  00000000  0024b614  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         0000009c  00000000  00000000  00253e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000014d  00000000  00000000  00253eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040400 <__do_global_dtors_aux>:
 8040400:	b510      	push	{r4, lr}
 8040402:	4c05      	ldr	r4, [pc, #20]	; (8040418 <__do_global_dtors_aux+0x18>)
 8040404:	7823      	ldrb	r3, [r4, #0]
 8040406:	b933      	cbnz	r3, 8040416 <__do_global_dtors_aux+0x16>
 8040408:	4b04      	ldr	r3, [pc, #16]	; (804041c <__do_global_dtors_aux+0x1c>)
 804040a:	b113      	cbz	r3, 8040412 <__do_global_dtors_aux+0x12>
 804040c:	4804      	ldr	r0, [pc, #16]	; (8040420 <__do_global_dtors_aux+0x20>)
 804040e:	f3af 8000 	nop.w
 8040412:	2301      	movs	r3, #1
 8040414:	7023      	strb	r3, [r4, #0]
 8040416:	bd10      	pop	{r4, pc}
 8040418:	20001278 	.word	0x20001278
 804041c:	00000000 	.word	0x00000000
 8040420:	08052010 	.word	0x08052010

08040424 <frame_dummy>:
 8040424:	b508      	push	{r3, lr}
 8040426:	4b03      	ldr	r3, [pc, #12]	; (8040434 <frame_dummy+0x10>)
 8040428:	b11b      	cbz	r3, 8040432 <frame_dummy+0xe>
 804042a:	4903      	ldr	r1, [pc, #12]	; (8040438 <frame_dummy+0x14>)
 804042c:	4803      	ldr	r0, [pc, #12]	; (804043c <frame_dummy+0x18>)
 804042e:	f3af 8000 	nop.w
 8040432:	bd08      	pop	{r3, pc}
 8040434:	00000000 	.word	0x00000000
 8040438:	2000127c 	.word	0x2000127c
 804043c:	08052010 	.word	0x08052010

08040440 <memchr>:
 8040440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040444:	2a10      	cmp	r2, #16
 8040446:	db2b      	blt.n	80404a0 <memchr+0x60>
 8040448:	f010 0f07 	tst.w	r0, #7
 804044c:	d008      	beq.n	8040460 <memchr+0x20>
 804044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040452:	3a01      	subs	r2, #1
 8040454:	428b      	cmp	r3, r1
 8040456:	d02d      	beq.n	80404b4 <memchr+0x74>
 8040458:	f010 0f07 	tst.w	r0, #7
 804045c:	b342      	cbz	r2, 80404b0 <memchr+0x70>
 804045e:	d1f6      	bne.n	804044e <memchr+0xe>
 8040460:	b4f0      	push	{r4, r5, r6, r7}
 8040462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804046a:	f022 0407 	bic.w	r4, r2, #7
 804046e:	f07f 0700 	mvns.w	r7, #0
 8040472:	2300      	movs	r3, #0
 8040474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040478:	3c08      	subs	r4, #8
 804047a:	ea85 0501 	eor.w	r5, r5, r1
 804047e:	ea86 0601 	eor.w	r6, r6, r1
 8040482:	fa85 f547 	uadd8	r5, r5, r7
 8040486:	faa3 f587 	sel	r5, r3, r7
 804048a:	fa86 f647 	uadd8	r6, r6, r7
 804048e:	faa5 f687 	sel	r6, r5, r7
 8040492:	b98e      	cbnz	r6, 80404b8 <memchr+0x78>
 8040494:	d1ee      	bne.n	8040474 <memchr+0x34>
 8040496:	bcf0      	pop	{r4, r5, r6, r7}
 8040498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804049c:	f002 0207 	and.w	r2, r2, #7
 80404a0:	b132      	cbz	r2, 80404b0 <memchr+0x70>
 80404a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80404a6:	3a01      	subs	r2, #1
 80404a8:	ea83 0301 	eor.w	r3, r3, r1
 80404ac:	b113      	cbz	r3, 80404b4 <memchr+0x74>
 80404ae:	d1f8      	bne.n	80404a2 <memchr+0x62>
 80404b0:	2000      	movs	r0, #0
 80404b2:	4770      	bx	lr
 80404b4:	3801      	subs	r0, #1
 80404b6:	4770      	bx	lr
 80404b8:	2d00      	cmp	r5, #0
 80404ba:	bf06      	itte	eq
 80404bc:	4635      	moveq	r5, r6
 80404be:	3803      	subeq	r0, #3
 80404c0:	3807      	subne	r0, #7
 80404c2:	f015 0f01 	tst.w	r5, #1
 80404c6:	d107      	bne.n	80404d8 <memchr+0x98>
 80404c8:	3001      	adds	r0, #1
 80404ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80404ce:	bf02      	ittt	eq
 80404d0:	3001      	addeq	r0, #1
 80404d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80404d6:	3001      	addeq	r0, #1
 80404d8:	bcf0      	pop	{r4, r5, r6, r7}
 80404da:	3801      	subs	r0, #1
 80404dc:	4770      	bx	lr
 80404de:	bf00      	nop

080404e0 <__aeabi_drsub>:
 80404e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80404e4:	e002      	b.n	80404ec <__adddf3>
 80404e6:	bf00      	nop

080404e8 <__aeabi_dsub>:
 80404e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080404ec <__adddf3>:
 80404ec:	b530      	push	{r4, r5, lr}
 80404ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80404f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80404f6:	ea94 0f05 	teq	r4, r5
 80404fa:	bf08      	it	eq
 80404fc:	ea90 0f02 	teqeq	r0, r2
 8040500:	bf1f      	itttt	ne
 8040502:	ea54 0c00 	orrsne.w	ip, r4, r0
 8040506:	ea55 0c02 	orrsne.w	ip, r5, r2
 804050a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 804050e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040512:	f000 80e2 	beq.w	80406da <__adddf3+0x1ee>
 8040516:	ea4f 5454 	mov.w	r4, r4, lsr #21
 804051a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 804051e:	bfb8      	it	lt
 8040520:	426d      	neglt	r5, r5
 8040522:	dd0c      	ble.n	804053e <__adddf3+0x52>
 8040524:	442c      	add	r4, r5
 8040526:	ea80 0202 	eor.w	r2, r0, r2
 804052a:	ea81 0303 	eor.w	r3, r1, r3
 804052e:	ea82 0000 	eor.w	r0, r2, r0
 8040532:	ea83 0101 	eor.w	r1, r3, r1
 8040536:	ea80 0202 	eor.w	r2, r0, r2
 804053a:	ea81 0303 	eor.w	r3, r1, r3
 804053e:	2d36      	cmp	r5, #54	; 0x36
 8040540:	bf88      	it	hi
 8040542:	bd30      	pophi	{r4, r5, pc}
 8040544:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040548:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804054c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040550:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040554:	d002      	beq.n	804055c <__adddf3+0x70>
 8040556:	4240      	negs	r0, r0
 8040558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804055c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040560:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040564:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040568:	d002      	beq.n	8040570 <__adddf3+0x84>
 804056a:	4252      	negs	r2, r2
 804056c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040570:	ea94 0f05 	teq	r4, r5
 8040574:	f000 80a7 	beq.w	80406c6 <__adddf3+0x1da>
 8040578:	f1a4 0401 	sub.w	r4, r4, #1
 804057c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040580:	db0d      	blt.n	804059e <__adddf3+0xb2>
 8040582:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040586:	fa22 f205 	lsr.w	r2, r2, r5
 804058a:	1880      	adds	r0, r0, r2
 804058c:	f141 0100 	adc.w	r1, r1, #0
 8040590:	fa03 f20e 	lsl.w	r2, r3, lr
 8040594:	1880      	adds	r0, r0, r2
 8040596:	fa43 f305 	asr.w	r3, r3, r5
 804059a:	4159      	adcs	r1, r3
 804059c:	e00e      	b.n	80405bc <__adddf3+0xd0>
 804059e:	f1a5 0520 	sub.w	r5, r5, #32
 80405a2:	f10e 0e20 	add.w	lr, lr, #32
 80405a6:	2a01      	cmp	r2, #1
 80405a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80405ac:	bf28      	it	cs
 80405ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80405b2:	fa43 f305 	asr.w	r3, r3, r5
 80405b6:	18c0      	adds	r0, r0, r3
 80405b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80405bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405c0:	d507      	bpl.n	80405d2 <__adddf3+0xe6>
 80405c2:	f04f 0e00 	mov.w	lr, #0
 80405c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80405ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80405ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80405d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80405d6:	d31b      	bcc.n	8040610 <__adddf3+0x124>
 80405d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80405dc:	d30c      	bcc.n	80405f8 <__adddf3+0x10c>
 80405de:	0849      	lsrs	r1, r1, #1
 80405e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80405e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80405e8:	f104 0401 	add.w	r4, r4, #1
 80405ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80405f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80405f4:	f080 809a 	bcs.w	804072c <__adddf3+0x240>
 80405f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80405fc:	bf08      	it	eq
 80405fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040602:	f150 0000 	adcs.w	r0, r0, #0
 8040606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804060a:	ea41 0105 	orr.w	r1, r1, r5
 804060e:	bd30      	pop	{r4, r5, pc}
 8040610:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8040614:	4140      	adcs	r0, r0
 8040616:	eb41 0101 	adc.w	r1, r1, r1
 804061a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804061e:	f1a4 0401 	sub.w	r4, r4, #1
 8040622:	d1e9      	bne.n	80405f8 <__adddf3+0x10c>
 8040624:	f091 0f00 	teq	r1, #0
 8040628:	bf04      	itt	eq
 804062a:	4601      	moveq	r1, r0
 804062c:	2000      	moveq	r0, #0
 804062e:	fab1 f381 	clz	r3, r1
 8040632:	bf08      	it	eq
 8040634:	3320      	addeq	r3, #32
 8040636:	f1a3 030b 	sub.w	r3, r3, #11
 804063a:	f1b3 0220 	subs.w	r2, r3, #32
 804063e:	da0c      	bge.n	804065a <__adddf3+0x16e>
 8040640:	320c      	adds	r2, #12
 8040642:	dd08      	ble.n	8040656 <__adddf3+0x16a>
 8040644:	f102 0c14 	add.w	ip, r2, #20
 8040648:	f1c2 020c 	rsb	r2, r2, #12
 804064c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040650:	fa21 f102 	lsr.w	r1, r1, r2
 8040654:	e00c      	b.n	8040670 <__adddf3+0x184>
 8040656:	f102 0214 	add.w	r2, r2, #20
 804065a:	bfd8      	it	le
 804065c:	f1c2 0c20 	rsble	ip, r2, #32
 8040660:	fa01 f102 	lsl.w	r1, r1, r2
 8040664:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040668:	bfdc      	itt	le
 804066a:	ea41 010c 	orrle.w	r1, r1, ip
 804066e:	4090      	lslle	r0, r2
 8040670:	1ae4      	subs	r4, r4, r3
 8040672:	bfa2      	ittt	ge
 8040674:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040678:	4329      	orrge	r1, r5
 804067a:	bd30      	popge	{r4, r5, pc}
 804067c:	ea6f 0404 	mvn.w	r4, r4
 8040680:	3c1f      	subs	r4, #31
 8040682:	da1c      	bge.n	80406be <__adddf3+0x1d2>
 8040684:	340c      	adds	r4, #12
 8040686:	dc0e      	bgt.n	80406a6 <__adddf3+0x1ba>
 8040688:	f104 0414 	add.w	r4, r4, #20
 804068c:	f1c4 0220 	rsb	r2, r4, #32
 8040690:	fa20 f004 	lsr.w	r0, r0, r4
 8040694:	fa01 f302 	lsl.w	r3, r1, r2
 8040698:	ea40 0003 	orr.w	r0, r0, r3
 804069c:	fa21 f304 	lsr.w	r3, r1, r4
 80406a0:	ea45 0103 	orr.w	r1, r5, r3
 80406a4:	bd30      	pop	{r4, r5, pc}
 80406a6:	f1c4 040c 	rsb	r4, r4, #12
 80406aa:	f1c4 0220 	rsb	r2, r4, #32
 80406ae:	fa20 f002 	lsr.w	r0, r0, r2
 80406b2:	fa01 f304 	lsl.w	r3, r1, r4
 80406b6:	ea40 0003 	orr.w	r0, r0, r3
 80406ba:	4629      	mov	r1, r5
 80406bc:	bd30      	pop	{r4, r5, pc}
 80406be:	fa21 f004 	lsr.w	r0, r1, r4
 80406c2:	4629      	mov	r1, r5
 80406c4:	bd30      	pop	{r4, r5, pc}
 80406c6:	f094 0f00 	teq	r4, #0
 80406ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80406ce:	bf06      	itte	eq
 80406d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80406d4:	3401      	addeq	r4, #1
 80406d6:	3d01      	subne	r5, #1
 80406d8:	e74e      	b.n	8040578 <__adddf3+0x8c>
 80406da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80406de:	bf18      	it	ne
 80406e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80406e4:	d029      	beq.n	804073a <__adddf3+0x24e>
 80406e6:	ea94 0f05 	teq	r4, r5
 80406ea:	bf08      	it	eq
 80406ec:	ea90 0f02 	teqeq	r0, r2
 80406f0:	d005      	beq.n	80406fe <__adddf3+0x212>
 80406f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80406f6:	bf04      	itt	eq
 80406f8:	4619      	moveq	r1, r3
 80406fa:	4610      	moveq	r0, r2
 80406fc:	bd30      	pop	{r4, r5, pc}
 80406fe:	ea91 0f03 	teq	r1, r3
 8040702:	bf1e      	ittt	ne
 8040704:	2100      	movne	r1, #0
 8040706:	2000      	movne	r0, #0
 8040708:	bd30      	popne	{r4, r5, pc}
 804070a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 804070e:	d105      	bne.n	804071c <__adddf3+0x230>
 8040710:	0040      	lsls	r0, r0, #1
 8040712:	4149      	adcs	r1, r1
 8040714:	bf28      	it	cs
 8040716:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 804071a:	bd30      	pop	{r4, r5, pc}
 804071c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040720:	bf3c      	itt	cc
 8040722:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8040726:	bd30      	popcc	{r4, r5, pc}
 8040728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804072c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040734:	f04f 0000 	mov.w	r0, #0
 8040738:	bd30      	pop	{r4, r5, pc}
 804073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804073e:	bf1a      	itte	ne
 8040740:	4619      	movne	r1, r3
 8040742:	4610      	movne	r0, r2
 8040744:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040748:	bf1c      	itt	ne
 804074a:	460b      	movne	r3, r1
 804074c:	4602      	movne	r2, r0
 804074e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040752:	bf06      	itte	eq
 8040754:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040758:	ea91 0f03 	teqeq	r1, r3
 804075c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040760:	bd30      	pop	{r4, r5, pc}
 8040762:	bf00      	nop

08040764 <__aeabi_ui2d>:
 8040764:	f090 0f00 	teq	r0, #0
 8040768:	bf04      	itt	eq
 804076a:	2100      	moveq	r1, #0
 804076c:	4770      	bxeq	lr
 804076e:	b530      	push	{r4, r5, lr}
 8040770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040778:	f04f 0500 	mov.w	r5, #0
 804077c:	f04f 0100 	mov.w	r1, #0
 8040780:	e750      	b.n	8040624 <__adddf3+0x138>
 8040782:	bf00      	nop

08040784 <__aeabi_i2d>:
 8040784:	f090 0f00 	teq	r0, #0
 8040788:	bf04      	itt	eq
 804078a:	2100      	moveq	r1, #0
 804078c:	4770      	bxeq	lr
 804078e:	b530      	push	{r4, r5, lr}
 8040790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040798:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804079c:	bf48      	it	mi
 804079e:	4240      	negmi	r0, r0
 80407a0:	f04f 0100 	mov.w	r1, #0
 80407a4:	e73e      	b.n	8040624 <__adddf3+0x138>
 80407a6:	bf00      	nop

080407a8 <__aeabi_f2d>:
 80407a8:	0042      	lsls	r2, r0, #1
 80407aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80407ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80407b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80407b6:	bf1f      	itttt	ne
 80407b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80407bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80407c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80407c4:	4770      	bxne	lr
 80407c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80407ca:	bf08      	it	eq
 80407cc:	4770      	bxeq	lr
 80407ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80407d2:	bf04      	itt	eq
 80407d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80407d8:	4770      	bxeq	lr
 80407da:	b530      	push	{r4, r5, lr}
 80407dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80407e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80407e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80407e8:	e71c      	b.n	8040624 <__adddf3+0x138>
 80407ea:	bf00      	nop

080407ec <__aeabi_ul2d>:
 80407ec:	ea50 0201 	orrs.w	r2, r0, r1
 80407f0:	bf08      	it	eq
 80407f2:	4770      	bxeq	lr
 80407f4:	b530      	push	{r4, r5, lr}
 80407f6:	f04f 0500 	mov.w	r5, #0
 80407fa:	e00a      	b.n	8040812 <__aeabi_l2d+0x16>

080407fc <__aeabi_l2d>:
 80407fc:	ea50 0201 	orrs.w	r2, r0, r1
 8040800:	bf08      	it	eq
 8040802:	4770      	bxeq	lr
 8040804:	b530      	push	{r4, r5, lr}
 8040806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 804080a:	d502      	bpl.n	8040812 <__aeabi_l2d+0x16>
 804080c:	4240      	negs	r0, r0
 804080e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040812:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040816:	f104 0432 	add.w	r4, r4, #50	; 0x32
 804081a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 804081e:	f43f aed8 	beq.w	80405d2 <__adddf3+0xe6>
 8040822:	f04f 0203 	mov.w	r2, #3
 8040826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804082a:	bf18      	it	ne
 804082c:	3203      	addne	r2, #3
 804082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040832:	bf18      	it	ne
 8040834:	3203      	addne	r2, #3
 8040836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 804083a:	f1c2 0320 	rsb	r3, r2, #32
 804083e:	fa00 fc03 	lsl.w	ip, r0, r3
 8040842:	fa20 f002 	lsr.w	r0, r0, r2
 8040846:	fa01 fe03 	lsl.w	lr, r1, r3
 804084a:	ea40 000e 	orr.w	r0, r0, lr
 804084e:	fa21 f102 	lsr.w	r1, r1, r2
 8040852:	4414      	add	r4, r2
 8040854:	e6bd      	b.n	80405d2 <__adddf3+0xe6>
 8040856:	bf00      	nop

08040858 <__aeabi_dmul>:
 8040858:	b570      	push	{r4, r5, r6, lr}
 804085a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804085e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040866:	bf1d      	ittte	ne
 8040868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804086c:	ea94 0f0c 	teqne	r4, ip
 8040870:	ea95 0f0c 	teqne	r5, ip
 8040874:	f000 f8de 	bleq	8040a34 <__aeabi_dmul+0x1dc>
 8040878:	442c      	add	r4, r5
 804087a:	ea81 0603 	eor.w	r6, r1, r3
 804087e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804088a:	bf18      	it	ne
 804088c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040898:	d038      	beq.n	804090c <__aeabi_dmul+0xb4>
 804089a:	fba0 ce02 	umull	ip, lr, r0, r2
 804089e:	f04f 0500 	mov.w	r5, #0
 80408a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80408a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80408aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80408ae:	f04f 0600 	mov.w	r6, #0
 80408b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80408b6:	f09c 0f00 	teq	ip, #0
 80408ba:	bf18      	it	ne
 80408bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80408c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80408c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80408c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80408cc:	d204      	bcs.n	80408d8 <__aeabi_dmul+0x80>
 80408ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80408d2:	416d      	adcs	r5, r5
 80408d4:	eb46 0606 	adc.w	r6, r6, r6
 80408d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80408dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80408e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80408e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80408e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80408ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80408f0:	bf88      	it	hi
 80408f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80408f6:	d81e      	bhi.n	8040936 <__aeabi_dmul+0xde>
 80408f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80408fc:	bf08      	it	eq
 80408fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8040902:	f150 0000 	adcs.w	r0, r0, #0
 8040906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804090a:	bd70      	pop	{r4, r5, r6, pc}
 804090c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040910:	ea46 0101 	orr.w	r1, r6, r1
 8040914:	ea40 0002 	orr.w	r0, r0, r2
 8040918:	ea81 0103 	eor.w	r1, r1, r3
 804091c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040920:	bfc2      	ittt	gt
 8040922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804092a:	bd70      	popgt	{r4, r5, r6, pc}
 804092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040930:	f04f 0e00 	mov.w	lr, #0
 8040934:	3c01      	subs	r4, #1
 8040936:	f300 80ab 	bgt.w	8040a90 <__aeabi_dmul+0x238>
 804093a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 804093e:	bfde      	ittt	le
 8040940:	2000      	movle	r0, #0
 8040942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040946:	bd70      	pople	{r4, r5, r6, pc}
 8040948:	f1c4 0400 	rsb	r4, r4, #0
 804094c:	3c20      	subs	r4, #32
 804094e:	da35      	bge.n	80409bc <__aeabi_dmul+0x164>
 8040950:	340c      	adds	r4, #12
 8040952:	dc1b      	bgt.n	804098c <__aeabi_dmul+0x134>
 8040954:	f104 0414 	add.w	r4, r4, #20
 8040958:	f1c4 0520 	rsb	r5, r4, #32
 804095c:	fa00 f305 	lsl.w	r3, r0, r5
 8040960:	fa20 f004 	lsr.w	r0, r0, r4
 8040964:	fa01 f205 	lsl.w	r2, r1, r5
 8040968:	ea40 0002 	orr.w	r0, r0, r2
 804096c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040978:	fa21 f604 	lsr.w	r6, r1, r4
 804097c:	eb42 0106 	adc.w	r1, r2, r6
 8040980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040984:	bf08      	it	eq
 8040986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804098a:	bd70      	pop	{r4, r5, r6, pc}
 804098c:	f1c4 040c 	rsb	r4, r4, #12
 8040990:	f1c4 0520 	rsb	r5, r4, #32
 8040994:	fa00 f304 	lsl.w	r3, r0, r4
 8040998:	fa20 f005 	lsr.w	r0, r0, r5
 804099c:	fa01 f204 	lsl.w	r2, r1, r4
 80409a0:	ea40 0002 	orr.w	r0, r0, r2
 80409a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80409ac:	f141 0100 	adc.w	r1, r1, #0
 80409b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409b4:	bf08      	it	eq
 80409b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409ba:	bd70      	pop	{r4, r5, r6, pc}
 80409bc:	f1c4 0520 	rsb	r5, r4, #32
 80409c0:	fa00 f205 	lsl.w	r2, r0, r5
 80409c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80409c8:	fa20 f304 	lsr.w	r3, r0, r4
 80409cc:	fa01 f205 	lsl.w	r2, r1, r5
 80409d0:	ea43 0302 	orr.w	r3, r3, r2
 80409d4:	fa21 f004 	lsr.w	r0, r1, r4
 80409d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80409dc:	fa21 f204 	lsr.w	r2, r1, r4
 80409e0:	ea20 0002 	bic.w	r0, r0, r2
 80409e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80409e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80409ec:	bf08      	it	eq
 80409ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80409f2:	bd70      	pop	{r4, r5, r6, pc}
 80409f4:	f094 0f00 	teq	r4, #0
 80409f8:	d10f      	bne.n	8040a1a <__aeabi_dmul+0x1c2>
 80409fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80409fe:	0040      	lsls	r0, r0, #1
 8040a00:	eb41 0101 	adc.w	r1, r1, r1
 8040a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040a08:	bf08      	it	eq
 8040a0a:	3c01      	subeq	r4, #1
 8040a0c:	d0f7      	beq.n	80409fe <__aeabi_dmul+0x1a6>
 8040a0e:	ea41 0106 	orr.w	r1, r1, r6
 8040a12:	f095 0f00 	teq	r5, #0
 8040a16:	bf18      	it	ne
 8040a18:	4770      	bxne	lr
 8040a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040a1e:	0052      	lsls	r2, r2, #1
 8040a20:	eb43 0303 	adc.w	r3, r3, r3
 8040a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040a28:	bf08      	it	eq
 8040a2a:	3d01      	subeq	r5, #1
 8040a2c:	d0f7      	beq.n	8040a1e <__aeabi_dmul+0x1c6>
 8040a2e:	ea43 0306 	orr.w	r3, r3, r6
 8040a32:	4770      	bx	lr
 8040a34:	ea94 0f0c 	teq	r4, ip
 8040a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040a3c:	bf18      	it	ne
 8040a3e:	ea95 0f0c 	teqne	r5, ip
 8040a42:	d00c      	beq.n	8040a5e <__aeabi_dmul+0x206>
 8040a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a48:	bf18      	it	ne
 8040a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a4e:	d1d1      	bne.n	80409f4 <__aeabi_dmul+0x19c>
 8040a50:	ea81 0103 	eor.w	r1, r1, r3
 8040a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a58:	f04f 0000 	mov.w	r0, #0
 8040a5c:	bd70      	pop	{r4, r5, r6, pc}
 8040a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a62:	bf06      	itte	eq
 8040a64:	4610      	moveq	r0, r2
 8040a66:	4619      	moveq	r1, r3
 8040a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a6c:	d019      	beq.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a6e:	ea94 0f0c 	teq	r4, ip
 8040a72:	d102      	bne.n	8040a7a <__aeabi_dmul+0x222>
 8040a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040a78:	d113      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a7a:	ea95 0f0c 	teq	r5, ip
 8040a7e:	d105      	bne.n	8040a8c <__aeabi_dmul+0x234>
 8040a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040a84:	bf1c      	itt	ne
 8040a86:	4610      	movne	r0, r2
 8040a88:	4619      	movne	r1, r3
 8040a8a:	d10a      	bne.n	8040aa2 <__aeabi_dmul+0x24a>
 8040a8c:	ea81 0103 	eor.w	r1, r1, r3
 8040a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040a9c:	f04f 0000 	mov.w	r0, #0
 8040aa0:	bd70      	pop	{r4, r5, r6, pc}
 8040aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040aaa:	bd70      	pop	{r4, r5, r6, pc}

08040aac <__aeabi_ddiv>:
 8040aac:	b570      	push	{r4, r5, r6, lr}
 8040aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040aba:	bf1d      	ittte	ne
 8040abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040ac0:	ea94 0f0c 	teqne	r4, ip
 8040ac4:	ea95 0f0c 	teqne	r5, ip
 8040ac8:	f000 f8a7 	bleq	8040c1a <__aeabi_ddiv+0x16e>
 8040acc:	eba4 0405 	sub.w	r4, r4, r5
 8040ad0:	ea81 0e03 	eor.w	lr, r1, r3
 8040ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040adc:	f000 8088 	beq.w	8040bf0 <__aeabi_ddiv+0x144>
 8040ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8040b04:	429d      	cmp	r5, r3
 8040b06:	bf08      	it	eq
 8040b08:	4296      	cmpeq	r6, r2
 8040b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8040b12:	d202      	bcs.n	8040b1a <__aeabi_ddiv+0x6e>
 8040b14:	085b      	lsrs	r3, r3, #1
 8040b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b1a:	1ab6      	subs	r6, r6, r2
 8040b1c:	eb65 0503 	sbc.w	r5, r5, r3
 8040b20:	085b      	lsrs	r3, r3, #1
 8040b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b36:	bf22      	ittt	cs
 8040b38:	1ab6      	subcs	r6, r6, r2
 8040b3a:	4675      	movcs	r5, lr
 8040b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040b40:	085b      	lsrs	r3, r3, #1
 8040b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b4e:	bf22      	ittt	cs
 8040b50:	1ab6      	subcs	r6, r6, r2
 8040b52:	4675      	movcs	r5, lr
 8040b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040b58:	085b      	lsrs	r3, r3, #1
 8040b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b66:	bf22      	ittt	cs
 8040b68:	1ab6      	subcs	r6, r6, r2
 8040b6a:	4675      	movcs	r5, lr
 8040b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040b70:	085b      	lsrs	r3, r3, #1
 8040b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8040b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8040b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040b7e:	bf22      	ittt	cs
 8040b80:	1ab6      	subcs	r6, r6, r2
 8040b82:	4675      	movcs	r5, lr
 8040b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040b88:	ea55 0e06 	orrs.w	lr, r5, r6
 8040b8c:	d018      	beq.n	8040bc0 <__aeabi_ddiv+0x114>
 8040b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040baa:	d1c0      	bne.n	8040b2e <__aeabi_ddiv+0x82>
 8040bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bb0:	d10b      	bne.n	8040bca <__aeabi_ddiv+0x11e>
 8040bb2:	ea41 0100 	orr.w	r1, r1, r0
 8040bb6:	f04f 0000 	mov.w	r0, #0
 8040bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040bbe:	e7b6      	b.n	8040b2e <__aeabi_ddiv+0x82>
 8040bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040bc4:	bf04      	itt	eq
 8040bc6:	4301      	orreq	r1, r0
 8040bc8:	2000      	moveq	r0, #0
 8040bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040bce:	bf88      	it	hi
 8040bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040bd4:	f63f aeaf 	bhi.w	8040936 <__aeabi_dmul+0xde>
 8040bd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8040bdc:	bf04      	itt	eq
 8040bde:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040be6:	f150 0000 	adcs.w	r0, r0, #0
 8040bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040bee:	bd70      	pop	{r4, r5, r6, pc}
 8040bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040bfc:	bfc2      	ittt	gt
 8040bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8040c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040c06:	bd70      	popgt	{r4, r5, r6, pc}
 8040c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c0c:	f04f 0e00 	mov.w	lr, #0
 8040c10:	3c01      	subs	r4, #1
 8040c12:	e690      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c14:	ea45 0e06 	orr.w	lr, r5, r6
 8040c18:	e68d      	b.n	8040936 <__aeabi_dmul+0xde>
 8040c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040c1e:	ea94 0f0c 	teq	r4, ip
 8040c22:	bf08      	it	eq
 8040c24:	ea95 0f0c 	teqeq	r5, ip
 8040c28:	f43f af3b 	beq.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c2c:	ea94 0f0c 	teq	r4, ip
 8040c30:	d10a      	bne.n	8040c48 <__aeabi_ddiv+0x19c>
 8040c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040c36:	f47f af34 	bne.w	8040aa2 <__aeabi_dmul+0x24a>
 8040c3a:	ea95 0f0c 	teq	r5, ip
 8040c3e:	f47f af25 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c42:	4610      	mov	r0, r2
 8040c44:	4619      	mov	r1, r3
 8040c46:	e72c      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c48:	ea95 0f0c 	teq	r5, ip
 8040c4c:	d106      	bne.n	8040c5c <__aeabi_ddiv+0x1b0>
 8040c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040c52:	f43f aefd 	beq.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c56:	4610      	mov	r0, r2
 8040c58:	4619      	mov	r1, r3
 8040c5a:	e722      	b.n	8040aa2 <__aeabi_dmul+0x24a>
 8040c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040c60:	bf18      	it	ne
 8040c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040c66:	f47f aec5 	bne.w	80409f4 <__aeabi_dmul+0x19c>
 8040c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040c6e:	f47f af0d 	bne.w	8040a8c <__aeabi_dmul+0x234>
 8040c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040c76:	f47f aeeb 	bne.w	8040a50 <__aeabi_dmul+0x1f8>
 8040c7a:	e712      	b.n	8040aa2 <__aeabi_dmul+0x24a>

08040c7c <__gedf2>:
 8040c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8040c80:	e006      	b.n	8040c90 <__cmpdf2+0x4>
 8040c82:	bf00      	nop

08040c84 <__ledf2>:
 8040c84:	f04f 0c01 	mov.w	ip, #1
 8040c88:	e002      	b.n	8040c90 <__cmpdf2+0x4>
 8040c8a:	bf00      	nop

08040c8c <__cmpdf2>:
 8040c8c:	f04f 0c01 	mov.w	ip, #1
 8040c90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ca0:	bf18      	it	ne
 8040ca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040ca6:	d01b      	beq.n	8040ce0 <__cmpdf2+0x54>
 8040ca8:	b001      	add	sp, #4
 8040caa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040cae:	bf0c      	ite	eq
 8040cb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040cb4:	ea91 0f03 	teqne	r1, r3
 8040cb8:	bf02      	ittt	eq
 8040cba:	ea90 0f02 	teqeq	r0, r2
 8040cbe:	2000      	moveq	r0, #0
 8040cc0:	4770      	bxeq	lr
 8040cc2:	f110 0f00 	cmn.w	r0, #0
 8040cc6:	ea91 0f03 	teq	r1, r3
 8040cca:	bf58      	it	pl
 8040ccc:	4299      	cmppl	r1, r3
 8040cce:	bf08      	it	eq
 8040cd0:	4290      	cmpeq	r0, r2
 8040cd2:	bf2c      	ite	cs
 8040cd4:	17d8      	asrcs	r0, r3, #31
 8040cd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040cda:	f040 0001 	orr.w	r0, r0, #1
 8040cde:	4770      	bx	lr
 8040ce0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ce8:	d102      	bne.n	8040cf0 <__cmpdf2+0x64>
 8040cea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040cee:	d107      	bne.n	8040d00 <__cmpdf2+0x74>
 8040cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040cf8:	d1d6      	bne.n	8040ca8 <__cmpdf2+0x1c>
 8040cfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040cfe:	d0d3      	beq.n	8040ca8 <__cmpdf2+0x1c>
 8040d00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040d04:	4770      	bx	lr
 8040d06:	bf00      	nop

08040d08 <__aeabi_cdrcmple>:
 8040d08:	4684      	mov	ip, r0
 8040d0a:	4610      	mov	r0, r2
 8040d0c:	4662      	mov	r2, ip
 8040d0e:	468c      	mov	ip, r1
 8040d10:	4619      	mov	r1, r3
 8040d12:	4663      	mov	r3, ip
 8040d14:	e000      	b.n	8040d18 <__aeabi_cdcmpeq>
 8040d16:	bf00      	nop

08040d18 <__aeabi_cdcmpeq>:
 8040d18:	b501      	push	{r0, lr}
 8040d1a:	f7ff ffb7 	bl	8040c8c <__cmpdf2>
 8040d1e:	2800      	cmp	r0, #0
 8040d20:	bf48      	it	mi
 8040d22:	f110 0f00 	cmnmi.w	r0, #0
 8040d26:	bd01      	pop	{r0, pc}

08040d28 <__aeabi_dcmpeq>:
 8040d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d2c:	f7ff fff4 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d30:	bf0c      	ite	eq
 8040d32:	2001      	moveq	r0, #1
 8040d34:	2000      	movne	r0, #0
 8040d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d3a:	bf00      	nop

08040d3c <__aeabi_dcmplt>:
 8040d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d40:	f7ff ffea 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d44:	bf34      	ite	cc
 8040d46:	2001      	movcc	r0, #1
 8040d48:	2000      	movcs	r0, #0
 8040d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d4e:	bf00      	nop

08040d50 <__aeabi_dcmple>:
 8040d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d54:	f7ff ffe0 	bl	8040d18 <__aeabi_cdcmpeq>
 8040d58:	bf94      	ite	ls
 8040d5a:	2001      	movls	r0, #1
 8040d5c:	2000      	movhi	r0, #0
 8040d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d62:	bf00      	nop

08040d64 <__aeabi_dcmpge>:
 8040d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d68:	f7ff ffce 	bl	8040d08 <__aeabi_cdrcmple>
 8040d6c:	bf94      	ite	ls
 8040d6e:	2001      	movls	r0, #1
 8040d70:	2000      	movhi	r0, #0
 8040d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d76:	bf00      	nop

08040d78 <__aeabi_dcmpgt>:
 8040d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040d7c:	f7ff ffc4 	bl	8040d08 <__aeabi_cdrcmple>
 8040d80:	bf34      	ite	cc
 8040d82:	2001      	movcc	r0, #1
 8040d84:	2000      	movcs	r0, #0
 8040d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8040d8a:	bf00      	nop

08040d8c <__aeabi_d2iz>:
 8040d8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040d90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040d94:	d215      	bcs.n	8040dc2 <__aeabi_d2iz+0x36>
 8040d96:	d511      	bpl.n	8040dbc <__aeabi_d2iz+0x30>
 8040d98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040d9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040da0:	d912      	bls.n	8040dc8 <__aeabi_d2iz+0x3c>
 8040da2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040daa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040db2:	fa23 f002 	lsr.w	r0, r3, r2
 8040db6:	bf18      	it	ne
 8040db8:	4240      	negne	r0, r0
 8040dba:	4770      	bx	lr
 8040dbc:	f04f 0000 	mov.w	r0, #0
 8040dc0:	4770      	bx	lr
 8040dc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040dc6:	d105      	bne.n	8040dd4 <__aeabi_d2iz+0x48>
 8040dc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040dcc:	bf08      	it	eq
 8040dce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040dd2:	4770      	bx	lr
 8040dd4:	f04f 0000 	mov.w	r0, #0
 8040dd8:	4770      	bx	lr
 8040dda:	bf00      	nop

08040ddc <__aeabi_d2uiz>:
 8040ddc:	004a      	lsls	r2, r1, #1
 8040dde:	d211      	bcs.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040de4:	d211      	bcs.n	8040e0a <__aeabi_d2uiz+0x2e>
 8040de6:	d50d      	bpl.n	8040e04 <__aeabi_d2uiz+0x28>
 8040de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040df0:	d40e      	bmi.n	8040e10 <__aeabi_d2uiz+0x34>
 8040df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8040e02:	4770      	bx	lr
 8040e04:	f04f 0000 	mov.w	r0, #0
 8040e08:	4770      	bx	lr
 8040e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040e0e:	d102      	bne.n	8040e16 <__aeabi_d2uiz+0x3a>
 8040e10:	f04f 30ff 	mov.w	r0, #4294967295
 8040e14:	4770      	bx	lr
 8040e16:	f04f 0000 	mov.w	r0, #0
 8040e1a:	4770      	bx	lr

08040e1c <__aeabi_ldivmod>:
 8040e1c:	b97b      	cbnz	r3, 8040e3e <__aeabi_ldivmod+0x22>
 8040e1e:	b972      	cbnz	r2, 8040e3e <__aeabi_ldivmod+0x22>
 8040e20:	2900      	cmp	r1, #0
 8040e22:	bfbe      	ittt	lt
 8040e24:	2000      	movlt	r0, #0
 8040e26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8040e2a:	e006      	blt.n	8040e3a <__aeabi_ldivmod+0x1e>
 8040e2c:	bf08      	it	eq
 8040e2e:	2800      	cmpeq	r0, #0
 8040e30:	bf1c      	itt	ne
 8040e32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8040e36:	f04f 30ff 	movne.w	r0, #4294967295
 8040e3a:	f000 b9bd 	b.w	80411b8 <__aeabi_idiv0>
 8040e3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8040e42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040e46:	2900      	cmp	r1, #0
 8040e48:	db09      	blt.n	8040e5e <__aeabi_ldivmod+0x42>
 8040e4a:	2b00      	cmp	r3, #0
 8040e4c:	db1a      	blt.n	8040e84 <__aeabi_ldivmod+0x68>
 8040e4e:	f000 f84d 	bl	8040eec <__udivmoddi4>
 8040e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e5a:	b004      	add	sp, #16
 8040e5c:	4770      	bx	lr
 8040e5e:	4240      	negs	r0, r0
 8040e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040e64:	2b00      	cmp	r3, #0
 8040e66:	db1b      	blt.n	8040ea0 <__aeabi_ldivmod+0x84>
 8040e68:	f000 f840 	bl	8040eec <__udivmoddi4>
 8040e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e74:	b004      	add	sp, #16
 8040e76:	4240      	negs	r0, r0
 8040e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040e7c:	4252      	negs	r2, r2
 8040e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040e82:	4770      	bx	lr
 8040e84:	4252      	negs	r2, r2
 8040e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040e8a:	f000 f82f 	bl	8040eec <__udivmoddi4>
 8040e8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040e96:	b004      	add	sp, #16
 8040e98:	4240      	negs	r0, r0
 8040e9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040e9e:	4770      	bx	lr
 8040ea0:	4252      	negs	r2, r2
 8040ea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040ea6:	f000 f821 	bl	8040eec <__udivmoddi4>
 8040eaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040eb2:	b004      	add	sp, #16
 8040eb4:	4252      	negs	r2, r2
 8040eb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040eba:	4770      	bx	lr

08040ebc <__aeabi_uldivmod>:
 8040ebc:	b953      	cbnz	r3, 8040ed4 <__aeabi_uldivmod+0x18>
 8040ebe:	b94a      	cbnz	r2, 8040ed4 <__aeabi_uldivmod+0x18>
 8040ec0:	2900      	cmp	r1, #0
 8040ec2:	bf08      	it	eq
 8040ec4:	2800      	cmpeq	r0, #0
 8040ec6:	bf1c      	itt	ne
 8040ec8:	f04f 31ff 	movne.w	r1, #4294967295
 8040ecc:	f04f 30ff 	movne.w	r0, #4294967295
 8040ed0:	f000 b972 	b.w	80411b8 <__aeabi_idiv0>
 8040ed4:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ed8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040edc:	f000 f806 	bl	8040eec <__udivmoddi4>
 8040ee0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040ee8:	b004      	add	sp, #16
 8040eea:	4770      	bx	lr

08040eec <__udivmoddi4>:
 8040eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040ef0:	9e08      	ldr	r6, [sp, #32]
 8040ef2:	4604      	mov	r4, r0
 8040ef4:	4688      	mov	r8, r1
 8040ef6:	2b00      	cmp	r3, #0
 8040ef8:	d14b      	bne.n	8040f92 <__udivmoddi4+0xa6>
 8040efa:	428a      	cmp	r2, r1
 8040efc:	4615      	mov	r5, r2
 8040efe:	d967      	bls.n	8040fd0 <__udivmoddi4+0xe4>
 8040f00:	fab2 f282 	clz	r2, r2
 8040f04:	b14a      	cbz	r2, 8040f1a <__udivmoddi4+0x2e>
 8040f06:	f1c2 0720 	rsb	r7, r2, #32
 8040f0a:	fa01 f302 	lsl.w	r3, r1, r2
 8040f0e:	fa20 f707 	lsr.w	r7, r0, r7
 8040f12:	4095      	lsls	r5, r2
 8040f14:	ea47 0803 	orr.w	r8, r7, r3
 8040f18:	4094      	lsls	r4, r2
 8040f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040f1e:	0c23      	lsrs	r3, r4, #16
 8040f20:	fbb8 f7fe 	udiv	r7, r8, lr
 8040f24:	fa1f fc85 	uxth.w	ip, r5
 8040f28:	fb0e 8817 	mls	r8, lr, r7, r8
 8040f2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040f30:	fb07 f10c 	mul.w	r1, r7, ip
 8040f34:	4299      	cmp	r1, r3
 8040f36:	d909      	bls.n	8040f4c <__udivmoddi4+0x60>
 8040f38:	18eb      	adds	r3, r5, r3
 8040f3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8040f3e:	f080 811b 	bcs.w	8041178 <__udivmoddi4+0x28c>
 8040f42:	4299      	cmp	r1, r3
 8040f44:	f240 8118 	bls.w	8041178 <__udivmoddi4+0x28c>
 8040f48:	3f02      	subs	r7, #2
 8040f4a:	442b      	add	r3, r5
 8040f4c:	1a5b      	subs	r3, r3, r1
 8040f4e:	b2a4      	uxth	r4, r4
 8040f50:	fbb3 f0fe 	udiv	r0, r3, lr
 8040f54:	fb0e 3310 	mls	r3, lr, r0, r3
 8040f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040f5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8040f60:	45a4      	cmp	ip, r4
 8040f62:	d909      	bls.n	8040f78 <__udivmoddi4+0x8c>
 8040f64:	192c      	adds	r4, r5, r4
 8040f66:	f100 33ff 	add.w	r3, r0, #4294967295
 8040f6a:	f080 8107 	bcs.w	804117c <__udivmoddi4+0x290>
 8040f6e:	45a4      	cmp	ip, r4
 8040f70:	f240 8104 	bls.w	804117c <__udivmoddi4+0x290>
 8040f74:	3802      	subs	r0, #2
 8040f76:	442c      	add	r4, r5
 8040f78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8040f7c:	eba4 040c 	sub.w	r4, r4, ip
 8040f80:	2700      	movs	r7, #0
 8040f82:	b11e      	cbz	r6, 8040f8c <__udivmoddi4+0xa0>
 8040f84:	40d4      	lsrs	r4, r2
 8040f86:	2300      	movs	r3, #0
 8040f88:	e9c6 4300 	strd	r4, r3, [r6]
 8040f8c:	4639      	mov	r1, r7
 8040f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f92:	428b      	cmp	r3, r1
 8040f94:	d909      	bls.n	8040faa <__udivmoddi4+0xbe>
 8040f96:	2e00      	cmp	r6, #0
 8040f98:	f000 80eb 	beq.w	8041172 <__udivmoddi4+0x286>
 8040f9c:	2700      	movs	r7, #0
 8040f9e:	e9c6 0100 	strd	r0, r1, [r6]
 8040fa2:	4638      	mov	r0, r7
 8040fa4:	4639      	mov	r1, r7
 8040fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040faa:	fab3 f783 	clz	r7, r3
 8040fae:	2f00      	cmp	r7, #0
 8040fb0:	d147      	bne.n	8041042 <__udivmoddi4+0x156>
 8040fb2:	428b      	cmp	r3, r1
 8040fb4:	d302      	bcc.n	8040fbc <__udivmoddi4+0xd0>
 8040fb6:	4282      	cmp	r2, r0
 8040fb8:	f200 80fa 	bhi.w	80411b0 <__udivmoddi4+0x2c4>
 8040fbc:	1a84      	subs	r4, r0, r2
 8040fbe:	eb61 0303 	sbc.w	r3, r1, r3
 8040fc2:	2001      	movs	r0, #1
 8040fc4:	4698      	mov	r8, r3
 8040fc6:	2e00      	cmp	r6, #0
 8040fc8:	d0e0      	beq.n	8040f8c <__udivmoddi4+0xa0>
 8040fca:	e9c6 4800 	strd	r4, r8, [r6]
 8040fce:	e7dd      	b.n	8040f8c <__udivmoddi4+0xa0>
 8040fd0:	b902      	cbnz	r2, 8040fd4 <__udivmoddi4+0xe8>
 8040fd2:	deff      	udf	#255	; 0xff
 8040fd4:	fab2 f282 	clz	r2, r2
 8040fd8:	2a00      	cmp	r2, #0
 8040fda:	f040 808f 	bne.w	80410fc <__udivmoddi4+0x210>
 8040fde:	1b49      	subs	r1, r1, r5
 8040fe0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040fe4:	fa1f f885 	uxth.w	r8, r5
 8040fe8:	2701      	movs	r7, #1
 8040fea:	fbb1 fcfe 	udiv	ip, r1, lr
 8040fee:	0c23      	lsrs	r3, r4, #16
 8040ff0:	fb0e 111c 	mls	r1, lr, ip, r1
 8040ff4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040ff8:	fb08 f10c 	mul.w	r1, r8, ip
 8040ffc:	4299      	cmp	r1, r3
 8040ffe:	d907      	bls.n	8041010 <__udivmoddi4+0x124>
 8041000:	18eb      	adds	r3, r5, r3
 8041002:	f10c 30ff 	add.w	r0, ip, #4294967295
 8041006:	d202      	bcs.n	804100e <__udivmoddi4+0x122>
 8041008:	4299      	cmp	r1, r3
 804100a:	f200 80cd 	bhi.w	80411a8 <__udivmoddi4+0x2bc>
 804100e:	4684      	mov	ip, r0
 8041010:	1a59      	subs	r1, r3, r1
 8041012:	b2a3      	uxth	r3, r4
 8041014:	fbb1 f0fe 	udiv	r0, r1, lr
 8041018:	fb0e 1410 	mls	r4, lr, r0, r1
 804101c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8041020:	fb08 f800 	mul.w	r8, r8, r0
 8041024:	45a0      	cmp	r8, r4
 8041026:	d907      	bls.n	8041038 <__udivmoddi4+0x14c>
 8041028:	192c      	adds	r4, r5, r4
 804102a:	f100 33ff 	add.w	r3, r0, #4294967295
 804102e:	d202      	bcs.n	8041036 <__udivmoddi4+0x14a>
 8041030:	45a0      	cmp	r8, r4
 8041032:	f200 80b6 	bhi.w	80411a2 <__udivmoddi4+0x2b6>
 8041036:	4618      	mov	r0, r3
 8041038:	eba4 0408 	sub.w	r4, r4, r8
 804103c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8041040:	e79f      	b.n	8040f82 <__udivmoddi4+0x96>
 8041042:	f1c7 0c20 	rsb	ip, r7, #32
 8041046:	40bb      	lsls	r3, r7
 8041048:	fa22 fe0c 	lsr.w	lr, r2, ip
 804104c:	ea4e 0e03 	orr.w	lr, lr, r3
 8041050:	fa01 f407 	lsl.w	r4, r1, r7
 8041054:	fa20 f50c 	lsr.w	r5, r0, ip
 8041058:	fa21 f30c 	lsr.w	r3, r1, ip
 804105c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8041060:	4325      	orrs	r5, r4
 8041062:	fbb3 f9f8 	udiv	r9, r3, r8
 8041066:	0c2c      	lsrs	r4, r5, #16
 8041068:	fb08 3319 	mls	r3, r8, r9, r3
 804106c:	fa1f fa8e 	uxth.w	sl, lr
 8041070:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8041074:	fb09 f40a 	mul.w	r4, r9, sl
 8041078:	429c      	cmp	r4, r3
 804107a:	fa02 f207 	lsl.w	r2, r2, r7
 804107e:	fa00 f107 	lsl.w	r1, r0, r7
 8041082:	d90b      	bls.n	804109c <__udivmoddi4+0x1b0>
 8041084:	eb1e 0303 	adds.w	r3, lr, r3
 8041088:	f109 30ff 	add.w	r0, r9, #4294967295
 804108c:	f080 8087 	bcs.w	804119e <__udivmoddi4+0x2b2>
 8041090:	429c      	cmp	r4, r3
 8041092:	f240 8084 	bls.w	804119e <__udivmoddi4+0x2b2>
 8041096:	f1a9 0902 	sub.w	r9, r9, #2
 804109a:	4473      	add	r3, lr
 804109c:	1b1b      	subs	r3, r3, r4
 804109e:	b2ad      	uxth	r5, r5
 80410a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80410a4:	fb08 3310 	mls	r3, r8, r0, r3
 80410a8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80410ac:	fb00 fa0a 	mul.w	sl, r0, sl
 80410b0:	45a2      	cmp	sl, r4
 80410b2:	d908      	bls.n	80410c6 <__udivmoddi4+0x1da>
 80410b4:	eb1e 0404 	adds.w	r4, lr, r4
 80410b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80410bc:	d26b      	bcs.n	8041196 <__udivmoddi4+0x2aa>
 80410be:	45a2      	cmp	sl, r4
 80410c0:	d969      	bls.n	8041196 <__udivmoddi4+0x2aa>
 80410c2:	3802      	subs	r0, #2
 80410c4:	4474      	add	r4, lr
 80410c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80410ca:	fba0 8902 	umull	r8, r9, r0, r2
 80410ce:	eba4 040a 	sub.w	r4, r4, sl
 80410d2:	454c      	cmp	r4, r9
 80410d4:	46c2      	mov	sl, r8
 80410d6:	464b      	mov	r3, r9
 80410d8:	d354      	bcc.n	8041184 <__udivmoddi4+0x298>
 80410da:	d051      	beq.n	8041180 <__udivmoddi4+0x294>
 80410dc:	2e00      	cmp	r6, #0
 80410de:	d069      	beq.n	80411b4 <__udivmoddi4+0x2c8>
 80410e0:	ebb1 050a 	subs.w	r5, r1, sl
 80410e4:	eb64 0403 	sbc.w	r4, r4, r3
 80410e8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80410ec:	40fd      	lsrs	r5, r7
 80410ee:	40fc      	lsrs	r4, r7
 80410f0:	ea4c 0505 	orr.w	r5, ip, r5
 80410f4:	e9c6 5400 	strd	r5, r4, [r6]
 80410f8:	2700      	movs	r7, #0
 80410fa:	e747      	b.n	8040f8c <__udivmoddi4+0xa0>
 80410fc:	f1c2 0320 	rsb	r3, r2, #32
 8041100:	fa20 f703 	lsr.w	r7, r0, r3
 8041104:	4095      	lsls	r5, r2
 8041106:	fa01 f002 	lsl.w	r0, r1, r2
 804110a:	fa21 f303 	lsr.w	r3, r1, r3
 804110e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8041112:	4338      	orrs	r0, r7
 8041114:	0c01      	lsrs	r1, r0, #16
 8041116:	fbb3 f7fe 	udiv	r7, r3, lr
 804111a:	fa1f f885 	uxth.w	r8, r5
 804111e:	fb0e 3317 	mls	r3, lr, r7, r3
 8041122:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041126:	fb07 f308 	mul.w	r3, r7, r8
 804112a:	428b      	cmp	r3, r1
 804112c:	fa04 f402 	lsl.w	r4, r4, r2
 8041130:	d907      	bls.n	8041142 <__udivmoddi4+0x256>
 8041132:	1869      	adds	r1, r5, r1
 8041134:	f107 3cff 	add.w	ip, r7, #4294967295
 8041138:	d22f      	bcs.n	804119a <__udivmoddi4+0x2ae>
 804113a:	428b      	cmp	r3, r1
 804113c:	d92d      	bls.n	804119a <__udivmoddi4+0x2ae>
 804113e:	3f02      	subs	r7, #2
 8041140:	4429      	add	r1, r5
 8041142:	1acb      	subs	r3, r1, r3
 8041144:	b281      	uxth	r1, r0
 8041146:	fbb3 f0fe 	udiv	r0, r3, lr
 804114a:	fb0e 3310 	mls	r3, lr, r0, r3
 804114e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8041152:	fb00 f308 	mul.w	r3, r0, r8
 8041156:	428b      	cmp	r3, r1
 8041158:	d907      	bls.n	804116a <__udivmoddi4+0x27e>
 804115a:	1869      	adds	r1, r5, r1
 804115c:	f100 3cff 	add.w	ip, r0, #4294967295
 8041160:	d217      	bcs.n	8041192 <__udivmoddi4+0x2a6>
 8041162:	428b      	cmp	r3, r1
 8041164:	d915      	bls.n	8041192 <__udivmoddi4+0x2a6>
 8041166:	3802      	subs	r0, #2
 8041168:	4429      	add	r1, r5
 804116a:	1ac9      	subs	r1, r1, r3
 804116c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8041170:	e73b      	b.n	8040fea <__udivmoddi4+0xfe>
 8041172:	4637      	mov	r7, r6
 8041174:	4630      	mov	r0, r6
 8041176:	e709      	b.n	8040f8c <__udivmoddi4+0xa0>
 8041178:	4607      	mov	r7, r0
 804117a:	e6e7      	b.n	8040f4c <__udivmoddi4+0x60>
 804117c:	4618      	mov	r0, r3
 804117e:	e6fb      	b.n	8040f78 <__udivmoddi4+0x8c>
 8041180:	4541      	cmp	r1, r8
 8041182:	d2ab      	bcs.n	80410dc <__udivmoddi4+0x1f0>
 8041184:	ebb8 0a02 	subs.w	sl, r8, r2
 8041188:	eb69 020e 	sbc.w	r2, r9, lr
 804118c:	3801      	subs	r0, #1
 804118e:	4613      	mov	r3, r2
 8041190:	e7a4      	b.n	80410dc <__udivmoddi4+0x1f0>
 8041192:	4660      	mov	r0, ip
 8041194:	e7e9      	b.n	804116a <__udivmoddi4+0x27e>
 8041196:	4618      	mov	r0, r3
 8041198:	e795      	b.n	80410c6 <__udivmoddi4+0x1da>
 804119a:	4667      	mov	r7, ip
 804119c:	e7d1      	b.n	8041142 <__udivmoddi4+0x256>
 804119e:	4681      	mov	r9, r0
 80411a0:	e77c      	b.n	804109c <__udivmoddi4+0x1b0>
 80411a2:	3802      	subs	r0, #2
 80411a4:	442c      	add	r4, r5
 80411a6:	e747      	b.n	8041038 <__udivmoddi4+0x14c>
 80411a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80411ac:	442b      	add	r3, r5
 80411ae:	e72f      	b.n	8041010 <__udivmoddi4+0x124>
 80411b0:	4638      	mov	r0, r7
 80411b2:	e708      	b.n	8040fc6 <__udivmoddi4+0xda>
 80411b4:	4637      	mov	r7, r6
 80411b6:	e6e9      	b.n	8040f8c <__udivmoddi4+0xa0>

080411b8 <__aeabi_idiv0>:
 80411b8:	4770      	bx	lr
 80411ba:	bf00      	nop

080411bc <init_battery_monitor>:

static ADC_HandleTypeDef hadc_bat_monitor;

// starts and configures the peripherals that are to be used
void init_battery_monitor(ADC_HandleTypeDef *hadc_batt)
{
 80411bc:	b530      	push	{r4, r5, lr}
	hadc_bat_monitor = *hadc_batt;
 80411be:	4c18      	ldr	r4, [pc, #96]	; (8041220 <init_battery_monitor+0x64>)
{
 80411c0:	b085      	sub	sp, #20
	hadc_bat_monitor = *hadc_batt;
 80411c2:	4601      	mov	r1, r0
 80411c4:	2248      	movs	r2, #72	; 0x48
 80411c6:	4620      	mov	r0, r4
 80411c8:	f00f fbb0 	bl	805092c <memcpy>
  VBAT (PC14) peripheral initialization
  */
static void config_vbat_reader(void)
{

  ADC_ChannelConfTypeDef sConfig = {0};
 80411cc:	2210      	movs	r2, #16
 80411ce:	2100      	movs	r1, #0
 80411d0:	4668      	mov	r0, sp
 80411d2:	f00f fbb6 	bl	8050942 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc_bat_monitor.Instance = ADC1;
  hadc_bat_monitor.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80411d6:	4a13      	ldr	r2, [pc, #76]	; (8041224 <init_battery_monitor+0x68>)
 80411d8:	2300      	movs	r3, #0
  hadc_bat_monitor.Init.Resolution = ADC_RESOLUTION_12B;
  hadc_bat_monitor.Init.ScanConvMode = DISABLE;
  hadc_bat_monitor.Init.ContinuousConvMode = ENABLE;
 80411da:	2501      	movs	r5, #1
  hadc_bat_monitor.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80411dc:	e9c4 2300 	strd	r2, r3, [r4]
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc_bat_monitor.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc_bat_monitor.Init.NbrOfConversion = 1;
  hadc_bat_monitor.Init.DMAContinuousRequests = DISABLE;
  hadc_bat_monitor.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc_bat_monitor) != HAL_OK)
 80411e0:	4620      	mov	r0, r4
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80411e2:	4a11      	ldr	r2, [pc, #68]	; (8041228 <init_battery_monitor+0x6c>)
  hadc_bat_monitor.Init.Resolution = ADC_RESOLUTION_12B;
 80411e4:	60a3      	str	r3, [r4, #8]
  hadc_bat_monitor.Init.ScanConvMode = DISABLE;
 80411e6:	6123      	str	r3, [r4, #16]
  hadc_bat_monitor.Init.ContinuousConvMode = ENABLE;
 80411e8:	7625      	strb	r5, [r4, #24]
  hadc_bat_monitor.Init.DiscontinuousConvMode = DISABLE;
 80411ea:	f884 3020 	strb.w	r3, [r4, #32]
  hadc_bat_monitor.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80411ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc_bat_monitor.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80411f0:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc_bat_monitor.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80411f2:	60e3      	str	r3, [r4, #12]
  hadc_bat_monitor.Init.NbrOfConversion = 1;
 80411f4:	61e5      	str	r5, [r4, #28]
  hadc_bat_monitor.Init.DMAContinuousRequests = DISABLE;
 80411f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc_bat_monitor.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80411fa:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc_bat_monitor) != HAL_OK)
 80411fc:	f002 fb02 	bl	8043804 <HAL_ADC_Init>
 8041200:	b100      	cbz	r0, 8041204 <init_battery_monitor+0x48>
 8041202:	e7fe      	b.n	8041202 <init_battery_monitor+0x46>
  {
    while(1);
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8041204:	230e      	movs	r3, #14
  sConfig.Rank = 1;
 8041206:	e9cd 3500 	strd	r3, r5, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 804120a:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 804120c:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 804120e:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8041210:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc_bat_monitor, &sConfig) != HAL_OK)
 8041212:	f002 fc85 	bl	8043b20 <HAL_ADC_ConfigChannel>
 8041216:	b100      	cbz	r0, 804121a <init_battery_monitor+0x5e>
 8041218:	e7fe      	b.n	8041218 <init_battery_monitor+0x5c>
}
 804121a:	b005      	add	sp, #20
 804121c:	bd30      	pop	{r4, r5, pc}
 804121e:	bf00      	nop
 8041220:	20001294 	.word	0x20001294
 8041224:	40012000 	.word	0x40012000
 8041228:	0f000001 	.word	0x0f000001
 804122c:	00000000 	.word	0x00000000

08041230 <get_battery_voltage>:
{
 8041230:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc_bat_monitor);
 8041232:	4c1b      	ldr	r4, [pc, #108]	; (80412a0 <get_battery_voltage+0x70>)
 8041234:	4620      	mov	r0, r4
 8041236:	f002 fb8b 	bl	8043950 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc_bat_monitor, HAL_MAX_DELAY);
 804123a:	f04f 31ff 	mov.w	r1, #4294967295
 804123e:	4620      	mov	r0, r4
 8041240:	f002 fc1a 	bl	8043a78 <HAL_ADC_PollForConversion>
	uint16_t adc_return_value = HAL_ADC_GetValue(&hadc_bat_monitor);
 8041244:	4620      	mov	r0, r4
 8041246:	f002 fc67 	bl	8043b18 <HAL_ADC_GetValue>
	double voltage_on_adc_pin = adc_return_value *  MAX_INPUT_VOLTAGE_ON_ADC / MAX_RESOLUTION_ADC;
 804124a:	b280      	uxth	r0, r0
 804124c:	f7ff fa9a 	bl	8040784 <__aeabi_i2d>
 8041250:	a30b      	add	r3, pc, #44	; (adr r3, 8041280 <get_battery_voltage+0x50>)
 8041252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041256:	f7ff faff 	bl	8040858 <__aeabi_dmul>
 804125a:	a30b      	add	r3, pc, #44	; (adr r3, 8041288 <get_battery_voltage+0x58>)
 804125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041260:	f7ff fc24 	bl	8040aac <__aeabi_ddiv>
	double battery_voltage = (VOLTAGE_DIVIDER_RATIO * voltage_on_adc_pin) - OFFSET;
 8041264:	a30a      	add	r3, pc, #40	; (adr r3, 8041290 <get_battery_voltage+0x60>)
 8041266:	e9d3 2300 	ldrd	r2, r3, [r3]
 804126a:	f7ff faf5 	bl	8040858 <__aeabi_dmul>
 804126e:	a30a      	add	r3, pc, #40	; (adr r3, 8041298 <get_battery_voltage+0x68>)
 8041270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041274:	f7ff f938 	bl	80404e8 <__aeabi_dsub>
}
 8041278:	ec41 0b10 	vmov	d0, r0, r1
 804127c:	bd10      	pop	{r4, pc}
 804127e:	bf00      	nop
 8041280:	66666666 	.word	0x66666666
 8041284:	400a6666 	.word	0x400a6666
 8041288:	00000000 	.word	0x00000000
 804128c:	40affe00 	.word	0x40affe00
 8041290:	b851eb85 	.word	0xb851eb85
 8041294:	3ff7851e 	.word	0x3ff7851e
 8041298:	9999999a 	.word	0x9999999a
 804129c:	3fb99999 	.word	0x3fb99999
 80412a0:	20001294 	.word	0x20001294

080412a4 <assert_version>:
		return true;
	return false;
}

bool assert_version(uint8_t major_version, uint8_t minor_version, uint8_t patch_version){
	if(MAJOR_FIRMWARE_VERSION == major_version){ // Criar define para posições da versão
 80412a4:	2801      	cmp	r0, #1
 80412a6:	d106      	bne.n	80412b6 <assert_version+0x12>
		if (MINOR_FIRMWARE_VERSION == minor_version){
 80412a8:	2901      	cmp	r1, #1
 80412aa:	d104      	bne.n	80412b6 <assert_version+0x12>
			if (PATCH_FIRMWARE_VERSION < patch_version){
 80412ac:	2a01      	cmp	r2, #1
 80412ae:	bf94      	ite	ls
 80412b0:	2000      	movls	r0, #0
 80412b2:	2001      	movhi	r0, #1
 80412b4:	4770      	bx	lr
		}
		else if(MINOR_FIRMWARE_VERSION < minor_version){
			return true;
		}
	}
	else if (MAJOR_FIRMWARE_VERSION < major_version){
 80412b6:	bf8c      	ite	hi
 80412b8:	2001      	movhi	r0, #1
 80412ba:	2000      	movls	r0, #0
		return true;
	}
	return false;
}
 80412bc:	4770      	bx	lr
	...

080412c0 <ble_handler>:


int ble_handler(uint8_t *message)
{
 80412c0:	b508      	push	{r3, lr}
	switch (message[1]) {
 80412c2:	7842      	ldrb	r2, [r0, #1]
 80412c4:	2a21      	cmp	r2, #33	; 0x21
{
 80412c6:	4603      	mov	r3, r0
	switch (message[1]) {
 80412c8:	d007      	beq.n	80412da <ble_handler+0x1a>
 80412ca:	2a22      	cmp	r2, #34	; 0x22
 80412cc:	d00d      	beq.n	80412ea <ble_handler+0x2a>
 80412ce:	2a20      	cmp	r2, #32
 80412d0:	d109      	bne.n	80412e6 <ble_handler+0x26>
		case REQUEST_DEVICE_TYPE:
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
			break;

		case REQUEST_FIRMWARE_VERSION:
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_firmware_version_buffer, sizeof(answer_firmware_version_buffer), 100);
 80412d2:	2364      	movs	r3, #100	; 0x64
 80412d4:	2206      	movs	r2, #6
 80412d6:	4912      	ldr	r1, [pc, #72]	; (8041320 <ble_handler+0x60>)
 80412d8:	e002      	b.n	80412e0 <ble_handler+0x20>
			HAL_UART_Transmit(&huart1, (uint8_t *) &answer_device_type,sizeof(answer_device_type),100);
 80412da:	4912      	ldr	r1, [pc, #72]	; (8041324 <ble_handler+0x64>)
 80412dc:	2364      	movs	r3, #100	; 0x64
 80412de:	2204      	movs	r2, #4
				{
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
				}
			}
			else{
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 80412e0:	4811      	ldr	r0, [pc, #68]	; (8041328 <ble_handler+0x68>)
 80412e2:	f005 feb9 	bl	8047058 <HAL_UART_Transmit>
			break;
/*********************************************************************************************************************************/
	}

	return 0;
}
 80412e6:	2000      	movs	r0, #0
 80412e8:	bd08      	pop	{r3, pc}
			if(assert_version(message[2], message[3], message[4])){
 80412ea:	7902      	ldrb	r2, [r0, #4]
 80412ec:	78c1      	ldrb	r1, [r0, #3]
 80412ee:	7880      	ldrb	r0, [r0, #2]
 80412f0:	f7ff ffd8 	bl	80412a4 <assert_version>
 80412f4:	b178      	cbz	r0, 8041316 <ble_handler+0x56>
	if (DEVICE_TYPE == device_type)
 80412f6:	795b      	ldrb	r3, [r3, #5]
 80412f8:	2b01      	cmp	r3, #1
 80412fa:	d108      	bne.n	804130e <ble_handler+0x4e>
					flags_ble.update_mode = SET;
 80412fc:	4a0b      	ldr	r2, [pc, #44]	; (804132c <ble_handler+0x6c>)
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 80412fe:	490c      	ldr	r1, [pc, #48]	; (8041330 <ble_handler+0x70>)
					flags_ble.update_mode = SET;
 8041300:	7813      	ldrb	r3, [r2, #0]
 8041302:	f043 0310 	orr.w	r3, r3, #16
 8041306:	7013      	strb	r3, [r2, #0]
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_execute_update_buffer, sizeof(answer_execute_update_buffer), 100);
 8041308:	2364      	movs	r3, #100	; 0x64
 804130a:	2203      	movs	r2, #3
 804130c:	e7e8      	b.n	80412e0 <ble_handler+0x20>
					HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_device_type, sizeof(answer_wrong_device_type),100);
 804130e:	2364      	movs	r3, #100	; 0x64
 8041310:	2203      	movs	r2, #3
 8041312:	4908      	ldr	r1, [pc, #32]	; (8041334 <ble_handler+0x74>)
 8041314:	e7e4      	b.n	80412e0 <ble_handler+0x20>
				HAL_UART_Transmit(&huart1, (uint8_t *) &answer_wrong_file_buffer, sizeof(answer_wrong_file_buffer), 100);
 8041316:	2364      	movs	r3, #100	; 0x64
 8041318:	2203      	movs	r2, #3
 804131a:	4907      	ldr	r1, [pc, #28]	; (8041338 <ble_handler+0x78>)
 804131c:	e7e0      	b.n	80412e0 <ble_handler+0x20>
 804131e:	bf00      	nop
 8041320:	20001004 	.word	0x20001004
 8041324:	20001000 	.word	0x20001000
 8041328:	20003c3c 	.word	0x20003c3c
 804132c:	20003c38 	.word	0x20003c38
 8041330:	2000100a 	.word	0x2000100a
 8041334:	2000100d 	.word	0x2000100d
 8041338:	20001010 	.word	0x20001010

0804133c <MX_USART1_UART_Init>:
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 804133c:	480b      	ldr	r0, [pc, #44]	; (804136c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 804133e:	4a0c      	ldr	r2, [pc, #48]	; (8041370 <MX_USART1_UART_Init+0x34>)
{
 8041340:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 8041342:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8041346:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804134a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 804134c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 804134e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8041352:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041354:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041358:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 804135a:	f005 fe37 	bl	8046fcc <HAL_UART_Init>
 804135e:	b118      	cbz	r0, 8041368 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8041360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8041364:	f00d b9e2 	b.w	804e72c <Error_Handler>
}
 8041368:	bd08      	pop	{r3, pc}
 804136a:	bf00      	nop
 804136c:	20003c3c 	.word	0x20003c3c
 8041370:	40011000 	.word	0x40011000

08041374 <Ble_Init_GPIO>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Ble_Init_GPIO(void)
{
 8041374:	b530      	push	{r4, r5, lr}
 8041376:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041378:	2214      	movs	r2, #20
 804137a:	2100      	movs	r1, #0
 804137c:	a803      	add	r0, sp, #12
 804137e:	f00f fae0 	bl	8050942 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041382:	2400      	movs	r4, #0
 8041384:	4b18      	ldr	r3, [pc, #96]	; (80413e8 <Ble_Init_GPIO+0x74>)
 8041386:	9401      	str	r4, [sp, #4]
 8041388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 804138a:	4d18      	ldr	r5, [pc, #96]	; (80413ec <Ble_Init_GPIO+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804138c:	f042 0201 	orr.w	r2, r2, #1
 8041390:	631a      	str	r2, [r3, #48]	; 0x30
 8041392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041394:	f002 0201 	and.w	r2, r2, #1
 8041398:	9201      	str	r2, [sp, #4]
 804139a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804139c:	9402      	str	r4, [sp, #8]
 804139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80413a0:	f042 0202 	orr.w	r2, r2, #2
 80413a4:	631a      	str	r2, [r3, #48]	; 0x30
 80413a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80413a8:	f003 0302 	and.w	r3, r3, #2
 80413ac:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80413ae:	4628      	mov	r0, r5
 80413b0:	2201      	movs	r2, #1
 80413b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80413b6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLE_BRK_GPIO_Port, BLE_BRK_Pin, GPIO_PIN_SET);
 80413b8:	f003 f9c2 	bl	8044740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_BRK_Pin */
  GPIO_InitStruct.Pin = BLE_BRK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80413bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80413c0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 80413c2:	a903      	add	r1, sp, #12
 80413c4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80413c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80413ca:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(BLE_BRK_GPIO_Port, &GPIO_InitStruct);
 80413ce:	f003 f843 	bl	8044458 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 80413d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 80413d6:	a903      	add	r1, sp, #12
 80413d8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80413da:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 80413e0:	f003 f83a 	bl	8044458 <HAL_GPIO_Init>

}
 80413e4:	b009      	add	sp, #36	; 0x24
 80413e6:	bd30      	pop	{r4, r5, pc}
 80413e8:	40023800 	.word	0x40023800
 80413ec:	40020000 	.word	0x40020000

080413f0 <read_data>:
		return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80413f0:	b530      	push	{r4, r5, lr}
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80413f2:	8c84      	ldrh	r4, [r0, #36]	; 0x24
		uint8_t len) {
 80413f4:	b085      	sub	sp, #20
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80413f6:	f241 3588 	movw	r5, #5000	; 0x1388
 80413fa:	e9cd 3501 	strd	r3, r5, [sp, #4]
	tx_buff = (dev->addr << 1);
 80413fe:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8041400:	9200      	str	r2, [sp, #0]
 8041402:	b2a4      	uxth	r4, r4
 8041404:	460a      	mov	r2, r1
 8041406:	2301      	movs	r3, #1
 8041408:	4621      	mov	r1, r4
 804140a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 804140c:	f003 fcba 	bl	8044d84 <HAL_I2C_Mem_Read>
		return 0;
	else
		return 1;

}
 8041410:	3000      	adds	r0, #0
 8041412:	bf18      	it	ne
 8041414:	2001      	movne	r0, #1
 8041416:	b005      	add	sp, #20
 8041418:	bd30      	pop	{r4, r5, pc}

0804141a <read_register16>:
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 804141a:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 804141c:	2302      	movs	r3, #2
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 804141e:	b087      	sub	sp, #28
	tx_buff = (dev->addr << 1);
 8041420:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8041422:	4615      	mov	r5, r2
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8041424:	f241 3288 	movw	r2, #5000	; 0x1388
 8041428:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 804142c:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 804142e:	ab05      	add	r3, sp, #20
 8041430:	9300      	str	r3, [sp, #0]
 8041432:	b2a4      	uxth	r4, r4
 8041434:	460a      	mov	r2, r1
 8041436:	2301      	movs	r3, #1
 8041438:	4621      	mov	r1, r4
 804143a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 804143c:	f003 fca2 	bl	8044d84 <HAL_I2C_Mem_Read>
 8041440:	b948      	cbnz	r0, 8041456 <read_register16+0x3c>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8041442:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8041446:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804144a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804144e:	802b      	strh	r3, [r5, #0]
		return true;
 8041450:	2001      	movs	r0, #1
}
 8041452:	b007      	add	sp, #28
 8041454:	bd30      	pop	{r4, r5, pc}
		return false;
 8041456:	2000      	movs	r0, #0
 8041458:	e7fb      	b.n	8041452 <read_register16+0x38>

0804145a <write_register8>:
	}

	return false;
}

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 804145a:	b530      	push	{r4, r5, lr}
 804145c:	b087      	sub	sp, #28
 804145e:	ad06      	add	r5, sp, #24
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8041460:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8041462:	f805 2d01 	strb.w	r2, [r5, #-1]!

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8041466:	2301      	movs	r3, #1
 8041468:	f242 7210 	movw	r2, #10000	; 0x2710
 804146c:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 8041470:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8041472:	9500      	str	r5, [sp, #0]
 8041474:	b2a4      	uxth	r4, r4
 8041476:	460a      	mov	r2, r1
 8041478:	6a80      	ldr	r0, [r0, #40]	; 0x28
 804147a:	4621      	mov	r1, r4
 804147c:	f003 fbf2 	bl	8044c64 <HAL_I2C_Mem_Write>
		return false;
	else
		return true;
}
 8041480:	3000      	adds	r0, #0
 8041482:	bf18      	it	ne
 8041484:	2001      	movne	r0, #1
 8041486:	b007      	add	sp, #28
 8041488:	bd30      	pop	{r4, r5, pc}

0804148a <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 804148a:	2303      	movs	r3, #3
	params->filter = BMP280_FILTER_OFF;
 804148c:	2200      	movs	r2, #0
	params->mode = BMP280_MODE_NORMAL;
 804148e:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 8041490:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8041492:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8041494:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8041496:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8041498:	7143      	strb	r3, [r0, #5]
}
 804149a:	4770      	bx	lr

0804149c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {

	if (dev->addr != BMP280_I2C_ADDRESS_0
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 804149c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	if (dev->addr != BMP280_I2C_ADDRESS_0
 804149e:	3b76      	subs	r3, #118	; 0x76
 80414a0:	2b01      	cmp	r3, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80414a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80414a4:	4604      	mov	r4, r0
 80414a6:	460e      	mov	r6, r1
	if (dev->addr != BMP280_I2C_ADDRESS_0
 80414a8:	d902      	bls.n	80414b0 <bmp280_init+0x14>
	if (!read_calibration_data(dev)) {
		return false;
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
		return false;
 80414aa:	2000      	movs	r0, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 80414ac:	b002      	add	sp, #8
 80414ae:	bd70      	pop	{r4, r5, r6, pc}
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80414b0:	2301      	movs	r3, #1
 80414b2:	f100 0232 	add.w	r2, r0, #50	; 0x32
 80414b6:	21d0      	movs	r1, #208	; 0xd0
 80414b8:	f7ff ff9a 	bl	80413f0 <read_data>
 80414bc:	2800      	cmp	r0, #0
 80414be:	d1f4      	bne.n	80414aa <bmp280_init+0xe>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80414c0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80414c4:	2b58      	cmp	r3, #88	; 0x58
 80414c6:	d001      	beq.n	80414cc <bmp280_init+0x30>
 80414c8:	2b60      	cmp	r3, #96	; 0x60
 80414ca:	d1ee      	bne.n	80414aa <bmp280_init+0xe>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80414cc:	22b6      	movs	r2, #182	; 0xb6
 80414ce:	21e0      	movs	r1, #224	; 0xe0
 80414d0:	4620      	mov	r0, r4
 80414d2:	f7ff ffc2 	bl	804145a <write_register8>
 80414d6:	2800      	cmp	r0, #0
 80414d8:	d1e7      	bne.n	80414aa <bmp280_init+0xe>
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80414da:	2301      	movs	r3, #1
 80414dc:	f10d 0206 	add.w	r2, sp, #6
 80414e0:	21f3      	movs	r1, #243	; 0xf3
 80414e2:	4620      	mov	r0, r4
 80414e4:	f7ff ff84 	bl	80413f0 <read_data>
 80414e8:	2800      	cmp	r0, #0
 80414ea:	d1f6      	bne.n	80414da <bmp280_init+0x3e>
				&& (status & 1) == 0)
 80414ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80414f0:	07db      	lsls	r3, r3, #31
 80414f2:	d4f2      	bmi.n	80414da <bmp280_init+0x3e>
	if (read_register16(dev, 0x88, &dev->dig_T1)
 80414f4:	4622      	mov	r2, r4
 80414f6:	2188      	movs	r1, #136	; 0x88
 80414f8:	4620      	mov	r0, r4
 80414fa:	f7ff ff8e 	bl	804141a <read_register16>
 80414fe:	2800      	cmp	r0, #0
 8041500:	d0d3      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8041502:	1ca2      	adds	r2, r4, #2
 8041504:	218a      	movs	r1, #138	; 0x8a
 8041506:	4620      	mov	r0, r4
 8041508:	f7ff ff87 	bl	804141a <read_register16>
 804150c:	2800      	cmp	r0, #0
 804150e:	d0cc      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8041510:	1d22      	adds	r2, r4, #4
 8041512:	218c      	movs	r1, #140	; 0x8c
 8041514:	4620      	mov	r0, r4
 8041516:	f7ff ff80 	bl	804141a <read_register16>
 804151a:	2800      	cmp	r0, #0
 804151c:	d0c5      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 804151e:	1da2      	adds	r2, r4, #6
 8041520:	218e      	movs	r1, #142	; 0x8e
 8041522:	4620      	mov	r0, r4
 8041524:	f7ff ff79 	bl	804141a <read_register16>
 8041528:	2800      	cmp	r0, #0
 804152a:	d0be      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 804152c:	f104 0208 	add.w	r2, r4, #8
 8041530:	2190      	movs	r1, #144	; 0x90
 8041532:	4620      	mov	r0, r4
 8041534:	f7ff ff71 	bl	804141a <read_register16>
 8041538:	2800      	cmp	r0, #0
 804153a:	d0b6      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 804153c:	f104 020a 	add.w	r2, r4, #10
 8041540:	2192      	movs	r1, #146	; 0x92
 8041542:	4620      	mov	r0, r4
 8041544:	f7ff ff69 	bl	804141a <read_register16>
 8041548:	2800      	cmp	r0, #0
 804154a:	d0ae      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 804154c:	f104 020c 	add.w	r2, r4, #12
 8041550:	2194      	movs	r1, #148	; 0x94
 8041552:	4620      	mov	r0, r4
 8041554:	f7ff ff61 	bl	804141a <read_register16>
 8041558:	2800      	cmp	r0, #0
 804155a:	d0a6      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 804155c:	f104 020e 	add.w	r2, r4, #14
 8041560:	2196      	movs	r1, #150	; 0x96
 8041562:	4620      	mov	r0, r4
 8041564:	f7ff ff59 	bl	804141a <read_register16>
 8041568:	2800      	cmp	r0, #0
 804156a:	d09e      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 804156c:	f104 0210 	add.w	r2, r4, #16
 8041570:	2198      	movs	r1, #152	; 0x98
 8041572:	4620      	mov	r0, r4
 8041574:	f7ff ff51 	bl	804141a <read_register16>
 8041578:	2800      	cmp	r0, #0
 804157a:	d096      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 804157c:	f104 0212 	add.w	r2, r4, #18
 8041580:	219a      	movs	r1, #154	; 0x9a
 8041582:	4620      	mov	r0, r4
 8041584:	f7ff ff49 	bl	804141a <read_register16>
 8041588:	2800      	cmp	r0, #0
 804158a:	d08e      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 804158c:	f104 0214 	add.w	r2, r4, #20
 8041590:	219c      	movs	r1, #156	; 0x9c
 8041592:	4620      	mov	r0, r4
 8041594:	f7ff ff41 	bl	804141a <read_register16>
 8041598:	2800      	cmp	r0, #0
 804159a:	d086      	beq.n	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0x9e,
 804159c:	f104 0216 	add.w	r2, r4, #22
 80415a0:	219e      	movs	r1, #158	; 0x9e
 80415a2:	4620      	mov	r0, r4
 80415a4:	f7ff ff39 	bl	804141a <read_register16>
 80415a8:	2800      	cmp	r0, #0
 80415aa:	f43f af7e 	beq.w	80414aa <bmp280_init+0xe>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80415ae:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80415b2:	2b60      	cmp	r3, #96	; 0x60
 80415b4:	d144      	bne.n	8041640 <bmp280_init+0x1a4>
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80415b6:	2301      	movs	r3, #1
 80415b8:	f104 0218 	add.w	r2, r4, #24
 80415bc:	21a1      	movs	r1, #161	; 0xa1
 80415be:	4620      	mov	r0, r4
 80415c0:	f7ff ff16 	bl	80413f0 <read_data>
 80415c4:	2800      	cmp	r0, #0
 80415c6:	f47f af70 	bne.w	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80415ca:	f104 021a 	add.w	r2, r4, #26
 80415ce:	21e1      	movs	r1, #225	; 0xe1
 80415d0:	4620      	mov	r0, r4
 80415d2:	f7ff ff22 	bl	804141a <read_register16>
 80415d6:	2800      	cmp	r0, #0
 80415d8:	f43f af67 	beq.w	80414aa <bmp280_init+0xe>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80415dc:	2301      	movs	r3, #1
 80415de:	f104 021c 	add.w	r2, r4, #28
 80415e2:	21e3      	movs	r1, #227	; 0xe3
 80415e4:	4620      	mov	r0, r4
 80415e6:	f7ff ff03 	bl	80413f0 <read_data>
 80415ea:	2800      	cmp	r0, #0
 80415ec:	f47f af5d 	bne.w	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0xe4, &h4)
 80415f0:	aa01      	add	r2, sp, #4
 80415f2:	21e4      	movs	r1, #228	; 0xe4
 80415f4:	4620      	mov	r0, r4
 80415f6:	f7ff ff10 	bl	804141a <read_register16>
 80415fa:	2800      	cmp	r0, #0
 80415fc:	f43f af55 	beq.w	80414aa <bmp280_init+0xe>
			&& read_register16(dev, 0xe5, &h5)
 8041600:	f10d 0206 	add.w	r2, sp, #6
 8041604:	21e5      	movs	r1, #229	; 0xe5
 8041606:	4620      	mov	r0, r4
 8041608:	f7ff ff07 	bl	804141a <read_register16>
 804160c:	2800      	cmp	r0, #0
 804160e:	f43f af4c 	beq.w	80414aa <bmp280_init+0xe>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8041612:	2301      	movs	r3, #1
 8041614:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8041618:	21e7      	movs	r1, #231	; 0xe7
 804161a:	4620      	mov	r0, r4
 804161c:	f7ff fee8 	bl	80413f0 <read_data>
 8041620:	2800      	cmp	r0, #0
 8041622:	f47f af42 	bne.w	80414aa <bmp280_init+0xe>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8041626:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804162a:	0113      	lsls	r3, r2, #4
 804162c:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8041630:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8041634:	4313      	orrs	r3, r2
 8041636:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 8041638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 804163c:	091b      	lsrs	r3, r3, #4
 804163e:	8423      	strh	r3, [r4, #32]
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8041640:	7872      	ldrb	r2, [r6, #1]
 8041642:	7973      	ldrb	r3, [r6, #5]
 8041644:	0092      	lsls	r2, r2, #2
 8041646:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 804164a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 804164e:	21f5      	movs	r1, #245	; 0xf5
 8041650:	4620      	mov	r0, r4
 8041652:	f7ff ff02 	bl	804145a <write_register8>
 8041656:	2800      	cmp	r0, #0
 8041658:	f47f af27 	bne.w	80414aa <bmp280_init+0xe>
	if (params->mode == BMP280_MODE_FORCED) {
 804165c:	7833      	ldrb	r3, [r6, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 804165e:	78b5      	ldrb	r5, [r6, #2]
	if (params->mode == BMP280_MODE_FORCED) {
 8041660:	2b01      	cmp	r3, #1
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8041662:	78f3      	ldrb	r3, [r6, #3]
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8041664:	bf08      	it	eq
 8041666:	7030      	strbeq	r0, [r6, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8041668:	00ad      	lsls	r5, r5, #2
 804166a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 804166e:	7833      	ldrb	r3, [r6, #0]
 8041670:	431d      	orrs	r5, r3
	if (dev->id == BME280_CHIP_ID) {
 8041672:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8041676:	2b60      	cmp	r3, #96	; 0x60
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8041678:	b2ed      	uxtb	r5, r5
	if (dev->id == BME280_CHIP_ID) {
 804167a:	d008      	beq.n	804168e <bmp280_init+0x1f2>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 804167c:	462a      	mov	r2, r5
 804167e:	21f4      	movs	r1, #244	; 0xf4
 8041680:	4620      	mov	r0, r4
 8041682:	f7ff feea 	bl	804145a <write_register8>
 8041686:	fab0 f080 	clz	r0, r0
 804168a:	0940      	lsrs	r0, r0, #5
 804168c:	e70e      	b.n	80414ac <bmp280_init+0x10>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 804168e:	7932      	ldrb	r2, [r6, #4]
 8041690:	21f2      	movs	r1, #242	; 0xf2
 8041692:	4620      	mov	r0, r4
 8041694:	f7ff fee1 	bl	804145a <write_register8>
 8041698:	2800      	cmp	r0, #0
 804169a:	d0ef      	beq.n	804167c <bmp280_init+0x1e0>
 804169c:	e705      	b.n	80414aa <bmp280_init+0xe>

0804169e <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 804169e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80416a2:	461d      	mov	r5, r3
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80416a4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
		uint32_t *humidity) {
 80416a8:	b08b      	sub	sp, #44	; 0x2c
	if (dev->id != BME280_CHIP_ID) {
 80416aa:	2b60      	cmp	r3, #96	; 0x60
		uint32_t *humidity) {
 80416ac:	4604      	mov	r4, r0
 80416ae:	460e      	mov	r6, r1
 80416b0:	9207      	str	r2, [sp, #28]
	if (dev->id != BME280_CHIP_ID) {
 80416b2:	d005      	beq.n	80416c0 <bmp280_read_fixed+0x22>
		if (humidity)
 80416b4:	b115      	cbz	r5, 80416bc <bmp280_read_fixed+0x1e>
			*humidity = 0;
 80416b6:	2300      	movs	r3, #0
 80416b8:	602b      	str	r3, [r5, #0]
		humidity = NULL;
 80416ba:	461d      	mov	r5, r3
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80416bc:	2306      	movs	r3, #6
 80416be:	e003      	b.n	80416c8 <bmp280_read_fixed+0x2a>
 80416c0:	2d00      	cmp	r5, #0
 80416c2:	bf0c      	ite	eq
 80416c4:	2306      	moveq	r3, #6
 80416c6:	2308      	movne	r3, #8
	if (read_data(dev, 0xf7, data, size)) {
 80416c8:	aa08      	add	r2, sp, #32
 80416ca:	21f7      	movs	r1, #247	; 0xf7
 80416cc:	4620      	mov	r0, r4
 80416ce:	f7ff fe8f 	bl	80413f0 <read_data>
 80416d2:	4684      	mov	ip, r0
 80416d4:	2800      	cmp	r0, #0
 80416d6:	f040 812f 	bne.w	8041938 <bmp280_read_fixed+0x29a>
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80416da:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80416de:	9305      	str	r3, [sp, #20]
 80416e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80416e4:	9306      	str	r3, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80416e6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80416ea:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80416ee:	8821      	ldrh	r1, [r4, #0]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80416f0:	f89d e022 	ldrb.w	lr, [sp, #34]	; 0x22
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80416f4:	011b      	lsls	r3, r3, #4
 80416f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80416fa:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80416fe:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8041702:	ebc1 1213 	rsb	r2, r1, r3, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8041706:	0049      	lsls	r1, r1, #1
 8041708:	ebc1 03d3 	rsb	r3, r1, r3, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 804170c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8041710:	4352      	muls	r2, r2
			* (int32_t) dev->dig_T2) >> 11;
 8041712:	434b      	muls	r3, r1
			* (int32_t) dev->dig_T3) >> 14;
 8041714:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8041718:	1312      	asrs	r2, r2, #12
			* (int32_t) dev->dig_T3) >> 14;
 804171a:	434a      	muls	r2, r1
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 804171c:	1392      	asrs	r2, r2, #14
	*fine_temp = var1 + var2;
 804171e:	eb02 23e3 	add.w	r3, r2, r3, asr #11
 8041722:	9304      	str	r3, [sp, #16]
	return (*fine_temp * 5 + 128) >> 8;
 8041724:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8041728:	3380      	adds	r3, #128	; 0x80
 804172a:	121b      	asrs	r3, r3, #8

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 804172c:	6033      	str	r3, [r6, #0]
	var1 = (int64_t) fine_temp - 128000;
 804172e:	9b04      	ldr	r3, [sp, #16]
 8041730:	f5b3 32fa 	subs.w	r2, r3, #128000	; 0x1f400
 8041734:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8041738:	f14b 33ff 	adc.w	r3, fp, #4294967295
 804173c:	e9cd 2300 	strd	r2, r3, [sp]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041740:	e9dd 3200 	ldrd	r3, r2, [sp]
 8041744:	4353      	muls	r3, r2
 8041746:	9a00      	ldr	r2, [sp, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041748:	9901      	ldr	r1, [sp, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 804174a:	fba2 ab02 	umull	sl, fp, r2, r2
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 804174e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8041752:	fb02 f601 	mul.w	r6, r2, r1
 8041756:	9900      	ldr	r1, [sp, #0]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8041758:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 804175c:	17d3      	asrs	r3, r2, #31
 804175e:	fb01 6603 	mla	r6, r1, r3, r6
 8041762:	fba2 2301 	umull	r2, r3, r2, r1
 8041766:	4433      	add	r3, r6
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041768:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 804176c:	ea4f 3903 	mov.w	r9, r3, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041770:	17f7      	asrs	r7, r6, #31
 8041772:	fb06 f30b 	mul.w	r3, r6, fp
 8041776:	fb0a 3307 	mla	r3, sl, r7, r3
 804177a:	fba6 670a 	umull	r6, r7, r6, sl
 804177e:	441f      	add	r7, r3
 8041780:	0a30      	lsrs	r0, r6, #8
 8041782:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8041786:	ea4f 3802 	mov.w	r8, r2, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 804178a:	1239      	asrs	r1, r7, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 804178c:	ea49 5912 	orr.w	r9, r9, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041790:	eb10 0208 	adds.w	r2, r0, r8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8041794:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8041798:	eb41 0309 	adc.w	r3, r1, r9
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 804179c:	1c10      	adds	r0, r2, #0
 804179e:	f543 4100 	adc.w	r1, r3, #32768	; 0x8000
 80417a2:	fba0 6708 	umull	r6, r7, r0, r8
 80417a6:	fb08 7701 	mla	r7, r8, r1, r7
 80417aa:	107b      	asrs	r3, r7, #1
 80417ac:	9302      	str	r3, [sp, #8]
 80417ae:	17fb      	asrs	r3, r7, #31
 80417b0:	9303      	str	r3, [sp, #12]
	if (var1 == 0) {
 80417b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80417b6:	4313      	orrs	r3, r2
 80417b8:	f000 80bc 	beq.w	8041934 <bmp280_read_fixed+0x296>
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80417bc:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80417c0:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 80417c4:	9800      	ldr	r0, [sp, #0]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80417c6:	fb02 f10b 	mul.w	r1, r2, fp
 80417ca:	17d3      	asrs	r3, r2, #31
 80417cc:	fb0a 1103 	mla	r1, sl, r3, r1
 80417d0:	fba2 230a 	umull	r2, r3, r2, sl
 80417d4:	440b      	add	r3, r1
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80417d6:	9901      	ldr	r1, [sp, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80417d8:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80417dc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80417e0:	fb08 f101 	mul.w	r1, r8, r1
 80417e4:	fb00 1109 	mla	r1, r0, r9, r1
 80417e8:	fba8 8900 	umull	r8, r9, r8, r0
 80417ec:	4489      	add	r9, r1
 80417ee:	ea4f 4648 	mov.w	r6, r8, lsl #17
 80417f2:	ea4f 4749 	mov.w	r7, r9, lsl #17
 80417f6:	18b0      	adds	r0, r6, r2
 80417f8:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 80417fc:	eb47 0103 	adc.w	r1, r7, r3
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8041800:	9b06      	ldr	r3, [sp, #24]
 8041802:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8041806:	ea4e 1e03 	orr.w	lr, lr, r3, lsl #4
 804180a:	9b05      	ldr	r3, [sp, #20]
 804180c:	ea4e 3e03 	orr.w	lr, lr, r3, lsl #12
	p = 1048576 - adc_press;
 8041810:	f5ce 1e80 	rsb	lr, lr, #1048576	; 0x100000
 8041814:	ea4f 79ee 	mov.w	r9, lr, asr #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8041818:	eb10 060c 	adds.w	r6, r0, ip
	p = (((p << 31) - var2) * 3125) / var1;
 804181c:	ea4f 73c9 	mov.w	r3, r9, lsl #31
 8041820:	ea4f 72ce 	mov.w	r2, lr, lsl #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8041824:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 8041828:	eb41 0709 	adc.w	r7, r1, r9
	p = (((p << 31) - var2) * 3125) / var1;
 804182c:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
 8041830:	1b92      	subs	r2, r2, r6
 8041832:	eb63 0307 	sbc.w	r3, r3, r7
 8041836:	4699      	mov	r9, r3
 8041838:	f640 4335 	movw	r3, #3125	; 0xc35
 804183c:	fba2 0103 	umull	r0, r1, r2, r3
 8041840:	fb03 1109 	mla	r1, r3, r9, r1
 8041844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8041848:	f7ff fae8 	bl	8040e1c <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 804184c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8041850:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8041854:	134e      	asrs	r6, r1, #13
 8041856:	0b47      	lsrs	r7, r0, #13
 8041858:	ea47 47c1 	orr.w	r7, r7, r1, lsl #19
 804185c:	fb02 fc06 	mul.w	ip, r2, r6
 8041860:	17d3      	asrs	r3, r2, #31
 8041862:	fb07 cc03 	mla	ip, r7, r3, ip
 8041866:	fba2 2307 	umull	r2, r3, r2, r7
 804186a:	4463      	add	r3, ip
 804186c:	4356      	muls	r6, r2
 804186e:	fb07 6603 	mla	r6, r7, r3, r6
 8041872:	fba2 2307 	umull	r2, r3, r2, r7
 8041876:	4433      	add	r3, r6
 8041878:	0e56      	lsrs	r6, r2, #25
 804187a:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 804187e:	1832      	adds	r2, r6, r0
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8041880:	ea4f 6763 	mov.w	r7, r3, asr #25
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8041884:	eb47 0301 	adc.w	r3, r7, r1
	p = (((p << 31) - var2) * 3125) / var1;
 8041888:	4680      	mov	r8, r0
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 804188a:	fb0a f101 	mul.w	r1, sl, r1
 804188e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8041892:	fb08 170b 	mla	r7, r8, fp, r1
 8041896:	fbaa 0108 	umull	r0, r1, sl, r8
 804189a:	4439      	add	r1, r7
 804189c:	0cc6      	lsrs	r6, r0, #19
 804189e:	ea46 3641 	orr.w	r6, r6, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80418a2:	1990      	adds	r0, r2, r6
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80418a4:	ea4f 47e1 	mov.w	r7, r1, asr #19
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80418a8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80418ac:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80418b0:	eb43 0107 	adc.w	r1, r3, r7
 80418b4:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 80418b8:	0110      	lsls	r0, r2, #4
	return p;
 80418ba:	4460      	add	r0, ip
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80418bc:	9b07      	ldr	r3, [sp, #28]
 80418be:	6018      	str	r0, [r3, #0]

	if (humidity) {
 80418c0:	b3b5      	cbz	r5, 8041930 <bmp280_read_fixed+0x292>
	v_x1_u32r = fine_temp - (int32_t) 76800;
 80418c2:	9b04      	ldr	r3, [sp, #16]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80418c4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
	v_x1_u32r = fine_temp - (int32_t) 76800;
 80418c8:	f5a3 3296 	sub.w	r2, r3, #76800	; 0x12c00
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80418cc:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 80418d0:	ba49      	rev16	r1, r1
 80418d2:	051b      	lsls	r3, r3, #20
 80418d4:	b289      	uxth	r1, r1
 80418d6:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80418da:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80418de:	fb02 1313 	mls	r3, r2, r3, r1
 80418e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80418e6:	13d9      	asrs	r1, r3, #15
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80418e8:	7f23      	ldrb	r3, [r4, #28]
 80418ea:	4353      	muls	r3, r2
 80418ec:	12db      	asrs	r3, r3, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80418ee:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80418f2:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 80418f6:	4353      	muls	r3, r2
 80418f8:	129b      	asrs	r3, r3, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80418fa:	4343      	muls	r3, r0
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80418fc:	129b      	asrs	r3, r3, #10
 80418fe:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8041902:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8041906:	4353      	muls	r3, r2
 8041908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 804190c:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 804190e:	434b      	muls	r3, r1
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8041910:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 8041912:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8041914:	4352      	muls	r2, r2
 8041916:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 8041918:	434a      	muls	r2, r1
	v_x1_u32r = v_x1_u32r
 804191a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 804191e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8041922:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8041926:	bfa8      	it	ge
 8041928:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 804192c:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 804192e:	602b      	str	r3, [r5, #0]
	}

	return true;
 8041930:	2001      	movs	r0, #1
 8041932:	e002      	b.n	804193a <bmp280_read_fixed+0x29c>
		return 0;  // avoid exception caused by division by zero
 8041934:	4660      	mov	r0, ip
 8041936:	e7c1      	b.n	80418bc <bmp280_read_fixed+0x21e>
		return false;
 8041938:	2000      	movs	r0, #0
}
 804193a:	b00b      	add	sp, #44	; 0x2c
 804193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08041940 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure, float *humidity)
{
 8041940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8041942:	460e      	mov	r6, r1
 8041944:	4615      	mov	r5, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, humidity ? &fixed_humidity : NULL)) {
 8041946:	461c      	mov	r4, r3
 8041948:	b9eb      	cbnz	r3, 8041986 <bmp280_read_float+0x46>
 804194a:	aa02      	add	r2, sp, #8
 804194c:	a901      	add	r1, sp, #4
 804194e:	f7ff fea6 	bl	804169e <bmp280_read_fixed>
 8041952:	b1b0      	cbz	r0, 8041982 <bmp280_read_float+0x42>
		*temperature = (float) fixed_temperature / 100;
 8041954:	eddd 7a01 	vldr	s15, [sp, #4]
 8041958:	eddf 6a0c 	vldr	s13, [pc, #48]	; 804198c <bmp280_read_float+0x4c>
 804195c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8041960:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 8041964:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 8041968:	ed86 7a00 	vstr	s14, [r6]
		*pressure = (float) fixed_pressure / 256;
 804196c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8041970:	edc5 7a00 	vstr	s15, [r5]
		if (humidity)
 8041974:	b12c      	cbz	r4, 8041982 <bmp280_read_float+0x42>
			*humidity = (float) fixed_humidity / 1024;
 8041976:	eddd 7a03 	vldr	s15, [sp, #12]
 804197a:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
 804197e:	edc4 7a00 	vstr	s15, [r4]
		return true;
	}

	return false;
}
 8041982:	b004      	add	sp, #16
 8041984:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure, humidity ? &fixed_humidity : NULL)) {
 8041986:	ab03      	add	r3, sp, #12
 8041988:	e7df      	b.n	804194a <bmp280_read_float+0xa>
 804198a:	bf00      	nop
 804198c:	42c80000 	.word	0x42c80000

08041990 <mede_mm_chuva>:
{
	memcpy(AppData->Buff,Buffer_to_send,sizeof(Estation_Parameters));
}

void mede_mm_chuva(){
	pluviometer_count++;
 8041990:	4a04      	ldr	r2, [pc, #16]	; (80419a4 <mede_mm_chuva+0x14>)
 8041992:	8813      	ldrh	r3, [r2, #0]
 8041994:	3301      	adds	r3, #1
 8041996:	8013      	strh	r3, [r2, #0]
	flagsStation.pluviometer=1;
 8041998:	4a03      	ldr	r2, [pc, #12]	; (80419a8 <mede_mm_chuva+0x18>)
 804199a:	7813      	ldrb	r3, [r2, #0]
 804199c:	f043 0301 	orr.w	r3, r3, #1
 80419a0:	7013      	strb	r3, [r2, #0]
}
 80419a2:	4770      	bx	lr
 80419a4:	20002318 	.word	0x20002318
 80419a8:	20003c8c 	.word	0x20003c8c

080419ac <mede_velocidade_vento>:

void mede_velocidade_vento(){
	aux_count_velo++;
 80419ac:	4a02      	ldr	r2, [pc, #8]	; (80419b8 <mede_velocidade_vento+0xc>)
 80419ae:	6853      	ldr	r3, [r2, #4]
 80419b0:	3301      	adds	r3, #1
 80419b2:	6053      	str	r3, [r2, #4]
}
 80419b4:	4770      	bx	lr
 80419b6:	bf00      	nop
 80419b8:	20002318 	.word	0x20002318

080419bc <init_station>:
{
 80419bc:	b510      	push	{r4, lr}
	bmp280_init_default_params(&bmp280.params);
 80419be:	481d      	ldr	r0, [pc, #116]	; (8041a34 <init_station+0x78>)
{
 80419c0:	b086      	sub	sp, #24
	bmp280_init_default_params(&bmp280.params);
 80419c2:	f7ff fd62 	bl	804148a <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80419c6:	481c      	ldr	r0, [pc, #112]	; (8041a38 <init_station+0x7c>)
 80419c8:	2376      	movs	r3, #118	; 0x76
 80419ca:	8483      	strh	r3, [r0, #36]	; 0x24
	if (!bmp280_init(&bmp280, &bmp280.params)) {
 80419cc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	bmp280.i2c = &hi2c1;
 80419d0:	4b1a      	ldr	r3, [pc, #104]	; (8041a3c <init_station+0x80>)
 80419d2:	6283      	str	r3, [r0, #40]	; 0x28
	if (!bmp280_init(&bmp280, &bmp280.params)) {
 80419d4:	f7ff fd62 	bl	804149c <bmp280_init>
 80419d8:	b920      	cbnz	r0, 80419e4 <init_station+0x28>
		flagsStation.bmp_failed=1;
 80419da:	4a19      	ldr	r2, [pc, #100]	; (8041a40 <init_station+0x84>)
 80419dc:	7813      	ldrb	r3, [r2, #0]
 80419de:	f043 0302 	orr.w	r3, r3, #2
 80419e2:	7013      	strb	r3, [r2, #0]
	initStruct.Pull = GPIO_PULLUP;
 80419e4:	4c17      	ldr	r4, [pc, #92]	; (8041a44 <init_station+0x88>)
	GPIO_InitTypeDef initStruct={0};
 80419e6:	2214      	movs	r2, #20
 80419e8:	2100      	movs	r1, #0
 80419ea:	a801      	add	r0, sp, #4
 80419ec:	f00e ffa9 	bl	8050942 <memset>
	initStruct.Pull = GPIO_PULLUP;
 80419f0:	2301      	movs	r3, #1
	HW_GPIO_Init(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, &initStruct);
 80419f2:	aa01      	add	r2, sp, #4
 80419f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80419f8:	4813      	ldr	r0, [pc, #76]	; (8041a48 <init_station+0x8c>)
	initStruct.Pull = GPIO_PULLUP;
 80419fa:	e9cd 4302 	strd	r4, r3, [sp, #8]
	HW_GPIO_Init(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, &initStruct);
 80419fe:	f00d f87d 	bl	804eafc <HW_GPIO_Init>
	HW_GPIO_SetIrq(ANEMOMETRO_GPIO_Port, ANEMOMETRO_Pin, 0, mede_velocidade_vento);
 8041a02:	4b12      	ldr	r3, [pc, #72]	; (8041a4c <init_station+0x90>)
 8041a04:	4810      	ldr	r0, [pc, #64]	; (8041a48 <init_station+0x8c>)
 8041a06:	2200      	movs	r2, #0
 8041a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041a0c:	f00d f8d0 	bl	804ebb0 <HW_GPIO_SetIrq>
	initStruct.Pull = GPIO_PULLDOWN;
 8041a10:	2302      	movs	r3, #2
	HW_GPIO_Init(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, &initStruct);
 8041a12:	aa01      	add	r2, sp, #4
 8041a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8041a18:	480b      	ldr	r0, [pc, #44]	; (8041a48 <init_station+0x8c>)
	initStruct.Pull = GPIO_PULLDOWN;
 8041a1a:	9303      	str	r3, [sp, #12]
	initStruct.Mode = GPIO_MODE_IT_RISING;
 8041a1c:	9402      	str	r4, [sp, #8]
	HW_GPIO_Init(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, &initStruct);
 8041a1e:	f00d f86d 	bl	804eafc <HW_GPIO_Init>
	HW_GPIO_SetIrq(PLUVIOMETRO_GPIO_Port, PLUVIOMETRO_Pin, 0, mede_mm_chuva);
 8041a22:	4b0b      	ldr	r3, [pc, #44]	; (8041a50 <init_station+0x94>)
 8041a24:	4808      	ldr	r0, [pc, #32]	; (8041a48 <init_station+0x8c>)
 8041a26:	2200      	movs	r2, #0
 8041a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8041a2c:	f00d f8c0 	bl	804ebb0 <HW_GPIO_SetIrq>
}
 8041a30:	b006      	add	sp, #24
 8041a32:	bd10      	pop	{r4, pc}
 8041a34:	20003cc8 	.word	0x20003cc8
 8041a38:	20003c9c 	.word	0x20003c9c
 8041a3c:	20005e60 	.word	0x20005e60
 8041a40:	20003c8c 	.word	0x20003c8c
 8041a44:	10110000 	.word	0x10110000
 8041a48:	40021000 	.word	0x40021000
 8041a4c:	080419ad 	.word	0x080419ad
 8041a50:	08041991 	.word	0x08041991
 8041a54:	00000000 	.word	0x00000000

08041a58 <read_sensors>:
{
 8041a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(!flagsStation.bmp_failed){
 8041a5c:	4b70      	ldr	r3, [pc, #448]	; (8041c20 <read_sensors+0x1c8>)
{
 8041a5e:	ed2d 8b02 	vpush	{d8}
	if(!flagsStation.bmp_failed){
 8041a62:	781b      	ldrb	r3, [r3, #0]
 8041a64:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 8041c24 <read_sensors+0x1cc>
 8041a68:	f013 0f02 	tst.w	r3, #2
{
 8041a6c:	b084      	sub	sp, #16
 8041a6e:	4604      	mov	r4, r0
	if(!flagsStation.bmp_failed){
 8041a70:	d115      	bne.n	8041a9e <read_sensors+0x46>
		if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 8041a72:	4d6d      	ldr	r5, [pc, #436]	; (8041c28 <read_sensors+0x1d0>)
 8041a74:	4e6d      	ldr	r6, [pc, #436]	; (8041c2c <read_sensors+0x1d4>)
 8041a76:	4f6e      	ldr	r7, [pc, #440]	; (8041c30 <read_sensors+0x1d8>)
 8041a78:	486e      	ldr	r0, [pc, #440]	; (8041c34 <read_sensors+0x1dc>)
 8041a7a:	462b      	mov	r3, r5
 8041a7c:	4632      	mov	r2, r6
 8041a7e:	4639      	mov	r1, r7
 8041a80:	f7ff ff5e 	bl	8041940 <bmp280_read_float>
 8041a84:	2800      	cmp	r0, #0
 8041a86:	f040 80a0 	bne.w	8041bca <read_sensors+0x172>
			Parameters->temperatura = 0xFF;
 8041a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8041a8e:	7023      	strb	r3, [r4, #0]
 8041a90:	7060      	strb	r0, [r4, #1]
			Parameters->pressao = 0xFF;
 8041a92:	70a3      	strb	r3, [r4, #2]
 8041a94:	70e0      	strb	r0, [r4, #3]
 8041a96:	7120      	strb	r0, [r4, #4]
 8041a98:	7160      	strb	r0, [r4, #5]
			Parameters->humidade = 0xFF;
 8041a9a:	71a3      	strb	r3, [r4, #6]
 8041a9c:	71e0      	strb	r0, [r4, #7]
	Parameters->pluviometria = ((double)(pluviometer_count/4))*1000;
 8041a9e:	4d66      	ldr	r5, [pc, #408]	; (8041c38 <read_sensors+0x1e0>)
 8041aa0:	882e      	ldrh	r6, [r5, #0]
 8041aa2:	08b0      	lsrs	r0, r6, #2
 8041aa4:	f7fe fe6e 	bl	8040784 <__aeabi_i2d>
 8041aa8:	2200      	movs	r2, #0
 8041aaa:	4b64      	ldr	r3, [pc, #400]	; (8041c3c <read_sensors+0x1e4>)
 8041aac:	f7fe fed4 	bl	8040858 <__aeabi_dmul>
 8041ab0:	f7ff f994 	bl	8040ddc <__aeabi_d2uiz>
	PRINTF("Pluvi %d\r\n", pluviometer_count);
 8041ab4:	4631      	mov	r1, r6
	Parameters->pluviometria = ((double)(pluviometer_count/4))*1000;
 8041ab6:	8120      	strh	r0, [r4, #8]
	PRINTF("Pluvi %d\r\n", pluviometer_count);
 8041ab8:	4861      	ldr	r0, [pc, #388]	; (8041c40 <read_sensors+0x1e8>)
 8041aba:	f00c fd33 	bl	804e524 <TraceSend>
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041abe:	68a9      	ldr	r1, [r5, #8]
 8041ac0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8041c44 <read_sensors+0x1ec>
	PRINTF("Contador Vento %d\r\n", count_velo);
 8041ac4:	4860      	ldr	r0, [pc, #384]	; (8041c48 <read_sensors+0x1f0>)
		HAL_ADC_Start(&hadc2);
 8041ac6:	4d61      	ldr	r5, [pc, #388]	; (8041c4c <read_sensors+0x1f4>)
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041ac8:	ee07 1a90 	vmov	s15, r1
 8041acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8041ad0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8041ad4:	ee27 7a26 	vmul.f32	s14, s14, s13
		raw2 = GET_RAW_VOLTAGE(raw);
 8041ad8:	f20f 193c 	addw	r9, pc, #316	; 0x13c
 8041adc:	e9d9 8900 	ldrd	r8, r9, [r9]
	float RPM = (float)count_velo*60/PERIOD;		// Rotações por Minuto
 8041ae0:	eec7 7a06 	vdiv.f32	s15, s14, s12
    HAL_ADC_ConfigChannel(&hadc2, &adcConf);
 8041ae4:	f04f 0a64 	mov.w	sl, #100	; 0x64
	double tensao_de_posicao = 0;
 8041ae8:	2600      	movs	r6, #0
 8041aea:	2700      	movs	r7, #0
	float Velo_mps = ((float)4*PI_NUMBER*RADIUS_ANEMOMETER_MM*RPM/60)/1000.0;	// Comprimento da circunferência em milimetros.
 8041aec:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8041c50 <read_sensors+0x1f8>
 8041af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8041af4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8041c54 <read_sensors+0x1fc>
 8041af8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8041afc:	eec6 7a07 	vdiv.f32	s15, s12, s14
	Parameters->velocidade_vento = Velo_mps*100;
 8041b00:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041b08:	ee17 3a90 	vmov	r3, s15
 8041b0c:	f8a4 300b 	strh.w	r3, [r4, #11]
	PRINTF("Contador Vento %d\r\n", count_velo);
 8041b10:	f00c fd08 	bl	804e524 <TraceSend>
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8041b14:	2303      	movs	r3, #3
 8041b16:	2200      	movs	r2, #0
 8041b18:	e9cd 3202 	strd	r3, r2, [sp, #8]
    adcConf.Rank = 1;
 8041b1c:	2107      	movs	r1, #7
 8041b1e:	2301      	movs	r3, #1
 8041b20:	e9cd 1300 	strd	r1, r3, [sp]
    HAL_ADC_ConfigChannel(&hadc2, &adcConf);
 8041b24:	4849      	ldr	r0, [pc, #292]	; (8041c4c <read_sensors+0x1f4>)
 8041b26:	4669      	mov	r1, sp
 8041b28:	f001 fffa 	bl	8043b20 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc2);
 8041b2c:	4628      	mov	r0, r5
 8041b2e:	f001 ff0f 	bl	8043950 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8041b32:	f04f 31ff 	mov.w	r1, #4294967295
 8041b36:	4628      	mov	r0, r5
 8041b38:	f001 ff9e 	bl	8043a78 <HAL_ADC_PollForConversion>
		raw = (double) HAL_ADC_GetValue(&hadc2);
 8041b3c:	4628      	mov	r0, r5
 8041b3e:	f001 ffeb 	bl	8043b18 <HAL_ADC_GetValue>
 8041b42:	f7fe fe0f 	bl	8040764 <__aeabi_ui2d>
		raw2 = GET_RAW_VOLTAGE(raw);
 8041b46:	4642      	mov	r2, r8
 8041b48:	464b      	mov	r3, r9
 8041b4a:	f7fe fe85 	bl	8040858 <__aeabi_dmul>
		tensao_de_posicao += raw2/MAX_READINGS;
 8041b4e:	2200      	movs	r2, #0
 8041b50:	4b41      	ldr	r3, [pc, #260]	; (8041c58 <read_sensors+0x200>)
 8041b52:	f7fe ffab 	bl	8040aac <__aeabi_ddiv>
 8041b56:	4602      	mov	r2, r0
 8041b58:	460b      	mov	r3, r1
 8041b5a:	4630      	mov	r0, r6
 8041b5c:	4639      	mov	r1, r7
 8041b5e:	f7fe fcc5 	bl	80404ec <__adddf3>
 8041b62:	4606      	mov	r6, r0
		HAL_ADC_Stop(&hadc2);
 8041b64:	4628      	mov	r0, r5
		tensao_de_posicao += raw2/MAX_READINGS;
 8041b66:	460f      	mov	r7, r1
		HAL_ADC_Stop(&hadc2);
 8041b68:	f001 ff68 	bl	8043a3c <HAL_ADC_Stop>
	for(int i = 0;i<MAX_READINGS;i++)
 8041b6c:	f1ba 0a01 	subs.w	sl, sl, #1
 8041b70:	d1dc      	bne.n	8041b2c <read_sensors+0xd4>
 8041b72:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8041c64 <read_sensors+0x20c>
	for(int i=TOTAL_WIND_POSITION-1; i>=0; i--){
 8041b76:	2507      	movs	r5, #7
		if (tensao_de_posicao <= MAX_VAL(tensao[i])){
 8041b78:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 8041b7c:	f7fe fe14 	bl	80407a8 <__aeabi_f2d>
 8041b80:	4602      	mov	r2, r0
 8041b82:	460b      	mov	r3, r1
 8041b84:	4630      	mov	r0, r6
 8041b86:	4639      	mov	r1, r7
 8041b88:	f7ff f8e2 	bl	8040d50 <__aeabi_dcmple>
 8041b8c:	2800      	cmp	r0, #0
 8041b8e:	d03f      	beq.n	8041c10 <read_sensors+0x1b8>
			Parameters->direcao_vento = i;
 8041b90:	72a5      	strb	r5, [r4, #10]
 8041b92:	4b32      	ldr	r3, [pc, #200]	; (8041c5c <read_sensors+0x204>)
 8041b94:	f103 020e 	add.w	r2, r3, #14
 8041b98:	1d99      	adds	r1, r3, #6
		char temp = Buffer_to_send[j];
 8041b9a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		Buffer_to_send[j] = Buffer_to_send[i];
 8041b9e:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
 8041ba2:	701d      	strb	r5, [r3, #0]
	for(int k = i/2;k>0;k--)
 8041ba4:	4299      	cmp	r1, r3
		Buffer_to_send[i] = temp;
 8041ba6:	7010      	strb	r0, [r2, #0]
	for(int k = i/2;k>0;k--)
 8041ba8:	d1f7      	bne.n	8041b9a <read_sensors+0x142>
	memcpy(Buffer_to_send,Parameters,sizeof(Estation_Parameters));
 8041baa:	4b2d      	ldr	r3, [pc, #180]	; (8041c60 <read_sensors+0x208>)
 8041bac:	f104 020c 	add.w	r2, r4, #12
 8041bb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8041bb4:	f843 1b04 	str.w	r1, [r3], #4
 8041bb8:	4294      	cmp	r4, r2
 8041bba:	d1f9      	bne.n	8041bb0 <read_sensors+0x158>
 8041bbc:	7822      	ldrb	r2, [r4, #0]
 8041bbe:	701a      	strb	r2, [r3, #0]
}
 8041bc0:	b004      	add	sp, #16
 8041bc2:	ecbd 8b02 	vpop	{d8}
 8041bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8041bca:	462b      	mov	r3, r5
 8041bcc:	4632      	mov	r2, r6
 8041bce:	4639      	mov	r1, r7
 8041bd0:	4818      	ldr	r0, [pc, #96]	; (8041c34 <read_sensors+0x1dc>)
 8041bd2:	f7ff feb5 	bl	8041940 <bmp280_read_float>
		Parameters->temperatura = (float)temperature*100;
 8041bd6:	edd7 7a00 	vldr	s15, [r7]
 8041bda:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041be2:	ee17 3a90 	vmov	r3, s15
		Parameters->pressao = (float)pressure*100;
 8041be6:	edd6 7a00 	vldr	s15, [r6]
		Parameters->temperatura = (float)temperature*100;
 8041bea:	8023      	strh	r3, [r4, #0]
		Parameters->pressao = (float)pressure*100;
 8041bec:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041bf4:	ee17 3a90 	vmov	r3, s15
		Parameters->humidade = (float)humidity*100;
 8041bf8:	edd5 7a00 	vldr	s15, [r5]
		Parameters->pressao = (float)pressure*100;
 8041bfc:	f8c4 3002 	str.w	r3, [r4, #2]
		Parameters->humidade = (float)humidity*100;
 8041c00:	ee67 7a88 	vmul.f32	s15, s15, s16
 8041c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041c08:	ee17 3a90 	vmov	r3, s15
 8041c0c:	80e3      	strh	r3, [r4, #6]
 8041c0e:	e746      	b.n	8041a9e <read_sensors+0x46>
	for(int i=TOTAL_WIND_POSITION-1; i>=0; i--){
 8041c10:	f115 35ff 	adds.w	r5, r5, #4294967295
 8041c14:	d2b0      	bcs.n	8041b78 <read_sensors+0x120>
 8041c16:	e7bc      	b.n	8041b92 <read_sensors+0x13a>
 8041c18:	70a3d70a 	.word	0x70a3d70a
 8041c1c:	3f4a0a3d 	.word	0x3f4a0a3d
 8041c20:	20003c8c 	.word	0x20003c8c
 8041c24:	42c80000 	.word	0x42c80000
 8041c28:	20003c88 	.word	0x20003c88
 8041c2c:	20003c84 	.word	0x20003c84
 8041c30:	20003c80 	.word	0x20003c80
 8041c34:	20003c9c 	.word	0x20003c9c
 8041c38:	20002318 	.word	0x20002318
 8041c3c:	408f4000 	.word	0x408f4000
 8041c40:	08052648 	.word	0x08052648
 8041c44:	42700000 	.word	0x42700000
 8041c48:	08052653 	.word	0x08052653
 8041c4c:	200060f8 	.word	0x200060f8
 8041c50:	44e6e836 	.word	0x44e6e836
 8041c54:	447a0000 	.word	0x447a0000
 8041c58:	40590000 	.word	0x40590000
 8041c5c:	20003760 	.word	0x20003760
 8041c60:	20003761 	.word	0x20003761
 8041c64:	08052048 	.word	0x08052048

08041c68 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8041c68:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041c6a:	4909      	ldr	r1, [pc, #36]	; (8041c90 <GetFskBandwidthRegValue+0x28>)
{
 8041c6c:	2300      	movs	r3, #0
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8041c6e:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8041c72:	4284      	cmp	r4, r0
 8041c74:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8041c78:	d803      	bhi.n	8041c82 <GetFskBandwidthRegValue+0x1a>
 8041c7a:	440a      	add	r2, r1
 8041c7c:	6894      	ldr	r4, [r2, #8]
 8041c7e:	4284      	cmp	r4, r0
 8041c80:	d803      	bhi.n	8041c8a <GetFskBandwidthRegValue+0x22>
 8041c82:	3301      	adds	r3, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8041c84:	2b15      	cmp	r3, #21
 8041c86:	d1f2      	bne.n	8041c6e <GetFskBandwidthRegValue+0x6>
 8041c88:	e7fe      	b.n	8041c88 <GetFskBandwidthRegValue+0x20>
        {
            return FskBandwidths[i].RegValue;
 8041c8a:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8041c8c:	bd10      	pop	{r4, pc}
 8041c8e:	bf00      	nop
 8041c90:	08052048 	.word	0x08052048

08041c94 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8041c94:	4b04      	ldr	r3, [pc, #16]	; (8041ca8 <SX1276OnDio4Irq+0x14>)
 8041c96:	795a      	ldrb	r2, [r3, #5]
 8041c98:	b92a      	cbnz	r2, 8041ca6 <SX1276OnDio4Irq+0x12>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8041c9a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8041c9e:	b912      	cbnz	r2, 8041ca6 <SX1276OnDio4Irq+0x12>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8041ca0:	2201      	movs	r2, #1
 8041ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8041ca6:	4770      	bx	lr
 8041ca8:	20003d00 	.word	0x20003d00

08041cac <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8041cac:	4b01      	ldr	r3, [pc, #4]	; (8041cb4 <SX1276BoardInit+0x8>)
 8041cae:	6018      	str	r0, [r3, #0]
}
 8041cb0:	4770      	bx	lr
 8041cb2:	bf00      	nop
 8041cb4:	20002324 	.word	0x20002324

08041cb8 <SX1276GetStatus>:
}
 8041cb8:	4b01      	ldr	r3, [pc, #4]	; (8041cc0 <SX1276GetStatus+0x8>)
 8041cba:	7918      	ldrb	r0, [r3, #4]
 8041cbc:	4770      	bx	lr
 8041cbe:	bf00      	nop
 8041cc0:	20003d00 	.word	0x20003d00

08041cc4 <SX1276Reset>:
{
 8041cc4:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041cc6:	4d12      	ldr	r5, [pc, #72]	; (8041d10 <SX1276Reset+0x4c>)
{
 8041cc8:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8041cca:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8041ccc:	2214      	movs	r2, #20
 8041cce:	2100      	movs	r1, #0
 8041cd0:	a801      	add	r0, sp, #4
 8041cd2:	f00e fe36 	bl	8050942 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8041cd6:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041cd8:	aa01      	add	r2, sp, #4
 8041cda:	4621      	mov	r1, r4
 8041cdc:	4628      	mov	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8041cde:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8041ce0:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041ce2:	f00c ff0b 	bl	804eafc <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8041ce6:	4621      	mov	r1, r4
 8041ce8:	2200      	movs	r2, #0
 8041cea:	4628      	mov	r0, r5
 8041cec:	f00c ff88 	bl	804ec00 <HW_GPIO_Write>
    DelayMs( 1 );
 8041cf0:	4620      	mov	r0, r4
 8041cf2:	f00d ff1f 	bl	804fb34 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8041cf6:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041cf8:	aa01      	add	r2, sp, #4
 8041cfa:	4621      	mov	r1, r4
 8041cfc:	4628      	mov	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8041cfe:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8041d00:	f00c fefc 	bl	804eafc <HW_GPIO_Init>
    DelayMs( 6 );
 8041d04:	2006      	movs	r0, #6
 8041d06:	f00d ff15 	bl	804fb34 <HAL_Delay>
}
 8041d0a:	b007      	add	sp, #28
 8041d0c:	bd30      	pop	{r4, r5, pc}
 8041d0e:	bf00      	nop
 8041d10:	40020400 	.word	0x40020400

08041d14 <SX1276WriteBuffer>:
{
 8041d14:	b570      	push	{r4, r5, r6, lr}
 8041d16:	4606      	mov	r6, r0
 8041d18:	460c      	mov	r4, r1
 8041d1a:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041d1c:	2102      	movs	r1, #2
 8041d1e:	2200      	movs	r2, #0
 8041d20:	480b      	ldr	r0, [pc, #44]	; (8041d50 <SX1276WriteBuffer+0x3c>)
 8041d22:	f00c ff6d 	bl	804ec00 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8041d26:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8041d2a:	f00d fa7f 	bl	804f22c <HW_SPI_InOut>
 8041d2e:	3c01      	subs	r4, #1
 8041d30:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 8041d32:	42ac      	cmp	r4, r5
 8041d34:	d106      	bne.n	8041d44 <SX1276WriteBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041d36:	2201      	movs	r2, #1
 8041d38:	2102      	movs	r1, #2
 8041d3a:	4805      	ldr	r0, [pc, #20]	; (8041d50 <SX1276WriteBuffer+0x3c>)
}
 8041d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041d40:	f00c bf5e 	b.w	804ec00 <HW_GPIO_Write>
        HW_SPI_InOut( buffer[i] );
 8041d44:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8041d48:	f00d fa70 	bl	804f22c <HW_SPI_InOut>
 8041d4c:	e7f1      	b.n	8041d32 <SX1276WriteBuffer+0x1e>
 8041d4e:	bf00      	nop
 8041d50:	40020400 	.word	0x40020400

08041d54 <SX1276Write>:
{
 8041d54:	b507      	push	{r0, r1, r2, lr}
 8041d56:	ab02      	add	r3, sp, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8041d58:	2201      	movs	r2, #1
{
 8041d5a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    SX1276WriteBuffer( addr, &data, 1 );
 8041d5e:	4619      	mov	r1, r3
 8041d60:	f7ff ffd8 	bl	8041d14 <SX1276WriteBuffer>
}
 8041d64:	b003      	add	sp, #12
 8041d66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041d6c <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8041d6c:	4b10      	ldr	r3, [pc, #64]	; (8041db0 <SX1276SetChannel+0x44>)
{
 8041d6e:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
 8041d70:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8041d72:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041d76:	f641 6484 	movw	r4, #7812	; 0x1e84
 8041d7a:	fbb0 f2f3 	udiv	r2, r0, r3
 8041d7e:	fb03 0012 	mls	r0, r3, r2, r0
 8041d82:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8041d86:	fbb4 f4f3 	udiv	r4, r4, r3
 8041d8a:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8041d8e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8041d92:	2006      	movs	r0, #6
 8041d94:	f7ff ffde 	bl	8041d54 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8041d98:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8041d9c:	2007      	movs	r0, #7
 8041d9e:	f7ff ffd9 	bl	8041d54 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8041da2:	b2e1      	uxtb	r1, r4
 8041da4:	2008      	movs	r0, #8
}
 8041da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8041daa:	f7ff bfd3 	b.w	8041d54 <SX1276Write>
 8041dae:	bf00      	nop
 8041db0:	20003d00 	.word	0x20003d00

08041db4 <SX1276ReadBuffer>:
{
 8041db4:	b570      	push	{r4, r5, r6, lr}
 8041db6:	4606      	mov	r6, r0
 8041db8:	460c      	mov	r4, r1
 8041dba:	4615      	mov	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8041dbc:	2102      	movs	r1, #2
 8041dbe:	2200      	movs	r2, #0
 8041dc0:	480b      	ldr	r0, [pc, #44]	; (8041df0 <SX1276ReadBuffer+0x3c>)
 8041dc2:	f00c ff1d 	bl	804ec00 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8041dc6:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8041dca:	f00d fa2f 	bl	804f22c <HW_SPI_InOut>
 8041dce:	3c01      	subs	r4, #1
 8041dd0:	4425      	add	r5, r4
    for( i = 0; i < size; i++ )
 8041dd2:	42ac      	cmp	r4, r5
 8041dd4:	d106      	bne.n	8041de4 <SX1276ReadBuffer+0x30>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041dd6:	2201      	movs	r2, #1
 8041dd8:	2102      	movs	r1, #2
 8041dda:	4805      	ldr	r0, [pc, #20]	; (8041df0 <SX1276ReadBuffer+0x3c>)
}
 8041ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8041de0:	f00c bf0e 	b.w	804ec00 <HW_GPIO_Write>
        buffer[i] = HW_SPI_InOut( 0 );
 8041de4:	2000      	movs	r0, #0
 8041de6:	f00d fa21 	bl	804f22c <HW_SPI_InOut>
 8041dea:	f804 0f01 	strb.w	r0, [r4, #1]!
 8041dee:	e7f0      	b.n	8041dd2 <SX1276ReadBuffer+0x1e>
 8041df0:	40020400 	.word	0x40020400

08041df4 <SX1276Read>:
{
 8041df4:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8041df6:	2201      	movs	r2, #1
 8041df8:	f10d 0107 	add.w	r1, sp, #7
 8041dfc:	f7ff ffda 	bl	8041db4 <SX1276ReadBuffer>
}
 8041e00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8041e04:	b003      	add	sp, #12
 8041e06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08041e0c <RxChainCalibration>:
{
 8041e0c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8041e0e:	2009      	movs	r0, #9
 8041e10:	f7ff fff0 	bl	8041df4 <SX1276Read>
 8041e14:	4605      	mov	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041e16:	2006      	movs	r0, #6
 8041e18:	f7ff ffec 	bl	8041df4 <SX1276Read>
 8041e1c:	4604      	mov	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8041e1e:	2007      	movs	r0, #7
 8041e20:	f7ff ffe8 	bl	8041df4 <SX1276Read>
 8041e24:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041e26:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8041e2a:	2008      	movs	r0, #8
 8041e2c:	f7ff ffe2 	bl	8041df4 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8041e30:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8041e32:	f643 5309 	movw	r3, #15625	; 0x3d09
 8041e36:	b2c4      	uxtb	r4, r0
 8041e38:	435c      	muls	r4, r3
 8041e3a:	0a00      	lsrs	r0, r0, #8
 8041e3c:	4358      	muls	r0, r3
 8041e3e:	3480      	adds	r4, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
 8041e40:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8041e42:	eb00 2414 	add.w	r4, r0, r4, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8041e46:	2009      	movs	r0, #9
 8041e48:	f7ff ff84 	bl	8041d54 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8041e4c:	203b      	movs	r0, #59	; 0x3b
 8041e4e:	f7ff ffd1 	bl	8041df4 <SX1276Read>
 8041e52:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041e56:	b2c9      	uxtb	r1, r1
 8041e58:	203b      	movs	r0, #59	; 0x3b
 8041e5a:	f7ff ff7b 	bl	8041d54 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8041e5e:	203b      	movs	r0, #59	; 0x3b
 8041e60:	f7ff ffc8 	bl	8041df4 <SX1276Read>
 8041e64:	0682      	lsls	r2, r0, #26
 8041e66:	d4fa      	bmi.n	8041e5e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8041e68:	480c      	ldr	r0, [pc, #48]	; (8041e9c <RxChainCalibration+0x90>)
 8041e6a:	f7ff ff7f 	bl	8041d6c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8041e6e:	203b      	movs	r0, #59	; 0x3b
 8041e70:	f7ff ffc0 	bl	8041df4 <SX1276Read>
 8041e74:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8041e78:	b2c9      	uxtb	r1, r1
 8041e7a:	203b      	movs	r0, #59	; 0x3b
 8041e7c:	f7ff ff6a 	bl	8041d54 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8041e80:	203b      	movs	r0, #59	; 0x3b
 8041e82:	f7ff ffb7 	bl	8041df4 <SX1276Read>
 8041e86:	0683      	lsls	r3, r0, #26
 8041e88:	d4fa      	bmi.n	8041e80 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8041e8a:	4629      	mov	r1, r5
 8041e8c:	2009      	movs	r0, #9
 8041e8e:	f7ff ff61 	bl	8041d54 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8041e92:	4620      	mov	r0, r4
}
 8041e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SX1276SetChannel( initialFreq );
 8041e98:	f7ff bf68 	b.w	8041d6c <SX1276SetChannel>
 8041e9c:	33bca100 	.word	0x33bca100

08041ea0 <SX1276GetTimeOnAir>:
{
 8041ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041ea4:	4688      	mov	r8, r1
    switch( modem )
 8041ea6:	b118      	cbz	r0, 8041eb0 <SX1276GetTimeOnAir+0x10>
 8041ea8:	2801      	cmp	r0, #1
 8041eaa:	d058      	beq.n	8041f5e <SX1276GetTimeOnAir+0xbe>
    uint32_t airTime = 0;
 8041eac:	2000      	movs	r0, #0
    return airTime;
 8041eae:	e04e      	b.n	8041f4e <SX1276GetTimeOnAir+0xae>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041eb0:	4c75      	ldr	r4, [pc, #468]	; (8042088 <SX1276GetTimeOnAir+0x1e8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041eb2:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041eb4:	8c25      	ldrh	r5, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041eb6:	f7ff ff9d 	bl	8041df4 <SX1276Read>
 8041eba:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8041ebe:	3001      	adds	r0, #1
 8041ec0:	4428      	add	r0, r5
 8041ec2:	f7fe fc5f 	bl	8040784 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041ec6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8041eca:	2200      	movs	r2, #0
 8041ecc:	2b00      	cmp	r3, #0
 8041ece:	d141      	bne.n	8041f54 <SX1276GetTimeOnAir+0xb4>
 8041ed0:	4b6e      	ldr	r3, [pc, #440]	; (804208c <SX1276GetTimeOnAir+0x1ec>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041ed2:	f7fe fb0b 	bl	80404ec <__adddf3>
 8041ed6:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041ed8:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8041eda:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041edc:	f7ff ff8a 	bl	8041df4 <SX1276Read>
 8041ee0:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
 8041ee4:	bf0c      	ite	eq
 8041ee6:	2300      	moveq	r3, #0
 8041ee8:	4b68      	ldrne	r3, [pc, #416]	; (804208c <SX1276GetTimeOnAir+0x1ec>)
 8041eea:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041eec:	4630      	mov	r0, r6
 8041eee:	4639      	mov	r1, r7
 8041ef0:	f7fe fafc 	bl	80404ec <__adddf3>
 8041ef4:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041ef6:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041ef8:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8041efa:	f7fe fc43 	bl	8040784 <__aeabi_i2d>
 8041efe:	4602      	mov	r2, r0
 8041f00:	460b      	mov	r3, r1
 8041f02:	4630      	mov	r0, r6
 8041f04:	4639      	mov	r1, r7
 8041f06:	f7fe faf1 	bl	80404ec <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041f0a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8041f0e:	2200      	movs	r2, #0
 8041f10:	bb13      	cbnz	r3, 8041f58 <SX1276GetTimeOnAir+0xb8>
 8041f12:	2300      	movs	r3, #0
                                     pktLen +
 8041f14:	f7fe faea 	bl	80404ec <__adddf3>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041f18:	2200      	movs	r2, #0
 8041f1a:	4b5d      	ldr	r3, [pc, #372]	; (8042090 <SX1276GetTimeOnAir+0x1f0>)
 8041f1c:	f7fe fc9c 	bl	8040858 <__aeabi_dmul>
 8041f20:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041f22:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041f24:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041f26:	f7fe fc1d 	bl	8040764 <__aeabi_ui2d>
 8041f2a:	4602      	mov	r2, r0
 8041f2c:	460b      	mov	r3, r1
 8041f2e:	4630      	mov	r0, r6
 8041f30:	4639      	mov	r1, r7
 8041f32:	f7fe fdbb 	bl	8040aac <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8041f36:	2200      	movs	r2, #0
 8041f38:	4b56      	ldr	r3, [pc, #344]	; (8042094 <SX1276GetTimeOnAir+0x1f4>)
 8041f3a:	f7fe fc8d 	bl	8040858 <__aeabi_dmul>
 8041f3e:	ec41 0b10 	vmov	d0, r0, r1
 8041f42:	f00f ffdd 	bl	8051f00 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8041f46:	ec51 0b10 	vmov	r0, r1, d0
 8041f4a:	f7fe ff47 	bl	8040ddc <__aeabi_d2uiz>
}
 8041f4e:	b003      	add	sp, #12
 8041f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8041f54:	2300      	movs	r3, #0
 8041f56:	e7bc      	b.n	8041ed2 <SX1276GetTimeOnAir+0x32>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8041f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8041f5c:	e7da      	b.n	8041f14 <SX1276GetTimeOnAir+0x74>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8041f5e:	4a4a      	ldr	r2, [pc, #296]	; (8042088 <SX1276GetTimeOnAir+0x1e8>)
 8041f60:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8041f62:	3b07      	subs	r3, #7
 8041f64:	2b02      	cmp	r3, #2
 8041f66:	4692      	mov	sl, r2
 8041f68:	f200 8082 	bhi.w	8042070 <SX1276GetTimeOnAir+0x1d0>
 8041f6c:	4a4a      	ldr	r2, [pc, #296]	; (8042098 <SX1276GetTimeOnAir+0x1f8>)
 8041f6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8041f72:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8041f76:	f8da b048 	ldr.w	fp, [sl, #72]	; 0x48
 8041f7a:	2001      	movs	r0, #1
 8041f7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8041f80:	f7fe fc00 	bl	8040784 <__aeabi_i2d>
 8041f84:	4602      	mov	r2, r0
 8041f86:	460b      	mov	r3, r1
 8041f88:	4620      	mov	r0, r4
 8041f8a:	4629      	mov	r1, r5
 8041f8c:	f7fe fd8e 	bl	8040aac <__aeabi_ddiv>
            double ts = 1 / rs;
 8041f90:	4602      	mov	r2, r0
 8041f92:	460b      	mov	r3, r1
 8041f94:	2000      	movs	r0, #0
 8041f96:	493d      	ldr	r1, [pc, #244]	; (804208c <SX1276GetTimeOnAir+0x1ec>)
 8041f98:	f7fe fd88 	bl	8040aac <__aeabi_ddiv>
 8041f9c:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8041f9e:	f8ba 004e 	ldrh.w	r0, [sl, #78]	; 0x4e
            double ts = 1 / rs;
 8041fa2:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8041fa4:	f7fe fbee 	bl	8040784 <__aeabi_i2d>
 8041fa8:	2200      	movs	r2, #0
 8041faa:	4b3c      	ldr	r3, [pc, #240]	; (804209c <SX1276GetTimeOnAir+0x1fc>)
 8041fac:	f7fe fa9e 	bl	80404ec <__adddf3>
 8041fb0:	4622      	mov	r2, r4
 8041fb2:	462b      	mov	r3, r5
 8041fb4:	f7fe fc50 	bl	8040858 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8041fb8:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8041fbc:	4606      	mov	r6, r0
 8041fbe:	460f      	mov	r7, r1
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8041fc0:	f89a 0052 	ldrb.w	r0, [sl, #82]	; 0x52
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041fc4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8041fc8:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8041fcc:	2b00      	cmp	r3, #0
 8041fce:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8041fd2:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8041fd6:	bf14      	ite	ne
 8041fd8:	2014      	movne	r0, #20
 8041fda:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041fdc:	1a08      	subs	r0, r1, r0
 8041fde:	f7fe fbc1 	bl	8040764 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8041fe2:	f89a 304c 	ldrb.w	r3, [sl, #76]	; 0x4c
 8041fe6:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041fe8:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8041fea:	bf14      	ite	ne
 8041fec:	2002      	movne	r0, #2
 8041fee:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8041ff0:	ebab 0000 	sub.w	r0, fp, r0
 8041ff4:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041ff6:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8041ff8:	f7fe fbb4 	bl	8040764 <__aeabi_ui2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8041ffc:	4602      	mov	r2, r0
 8041ffe:	460b      	mov	r3, r1
 8042000:	4640      	mov	r0, r8
 8042002:	4649      	mov	r1, r9
 8042004:	f7fe fd52 	bl	8040aac <__aeabi_ddiv>
 8042008:	ec41 0b10 	vmov	d0, r0, r1
 804200c:	f00f fe74 	bl	8051cf8 <ceil>
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8042010:	f89a 004d 	ldrb.w	r0, [sl, #77]	; 0x4d
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8042014:	ec53 2b10 	vmov	r2, r3, d0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8042018:	3004      	adds	r0, #4
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804201a:	e9cd 2300 	strd	r2, r3, [sp]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 804201e:	f7fe fbb1 	bl	8040784 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8042022:	e9dd 2300 	ldrd	r2, r3, [sp]
 8042026:	f7fe fc17 	bl	8040858 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 804202a:	2200      	movs	r2, #0
 804202c:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 804202e:	4680      	mov	r8, r0
 8042030:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8042032:	f7fe fea1 	bl	8040d78 <__aeabi_dcmpgt>
 8042036:	b1f0      	cbz	r0, 8042076 <SX1276GetTimeOnAir+0x1d6>
 8042038:	2200      	movs	r2, #0
 804203a:	4b15      	ldr	r3, [pc, #84]	; (8042090 <SX1276GetTimeOnAir+0x1f0>)
 804203c:	4640      	mov	r0, r8
 804203e:	4649      	mov	r1, r9
 8042040:	f7fe fa54 	bl	80404ec <__adddf3>
            double tPayload = nPayload * ts;
 8042044:	4622      	mov	r2, r4
 8042046:	462b      	mov	r3, r5
 8042048:	f7fe fc06 	bl	8040858 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 804204c:	4632      	mov	r2, r6
 804204e:	463b      	mov	r3, r7
 8042050:	f7fe fa4c 	bl	80404ec <__adddf3>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8042054:	2200      	movs	r2, #0
 8042056:	4b0f      	ldr	r3, [pc, #60]	; (8042094 <SX1276GetTimeOnAir+0x1f4>)
 8042058:	f7fe fbfe 	bl	8040858 <__aeabi_dmul>
 804205c:	a308      	add	r3, pc, #32	; (adr r3, 8042080 <SX1276GetTimeOnAir+0x1e0>)
 804205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042062:	f7fe fa43 	bl	80404ec <__adddf3>
 8042066:	ec41 0b10 	vmov	d0, r0, r1
 804206a:	f00f fec5 	bl	8051df8 <floor>
 804206e:	e76a      	b.n	8041f46 <SX1276GetTimeOnAir+0xa6>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8042070:	2400      	movs	r4, #0
 8042072:	2500      	movs	r5, #0
 8042074:	e77f      	b.n	8041f76 <SX1276GetTimeOnAir+0xd6>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8042076:	2000      	movs	r0, #0
 8042078:	4905      	ldr	r1, [pc, #20]	; (8042090 <SX1276GetTimeOnAir+0x1f0>)
 804207a:	e7e3      	b.n	8042044 <SX1276GetTimeOnAir+0x1a4>
 804207c:	f3af 8000 	nop.w
 8042080:	d916872b 	.word	0xd916872b
 8042084:	3feff7ce 	.word	0x3feff7ce
 8042088:	20003d00 	.word	0x20003d00
 804208c:	3ff00000 	.word	0x3ff00000
 8042090:	40200000 	.word	0x40200000
 8042094:	408f4000 	.word	0x408f4000
 8042098:	08052048 	.word	0x08052048
 804209c:	40110000 	.word	0x40110000

080420a0 <SX1276ReadRssi>:
{
 80420a0:	b508      	push	{r3, lr}
    switch( modem )
 80420a2:	b120      	cbz	r0, 80420ae <SX1276ReadRssi+0xe>
 80420a4:	2801      	cmp	r0, #1
 80420a6:	d00a      	beq.n	80420be <SX1276ReadRssi+0x1e>
        rssi = -1;
 80420a8:	f04f 30ff 	mov.w	r0, #4294967295
 80420ac:	e006      	b.n	80420bc <SX1276ReadRssi+0x1c>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80420ae:	2011      	movs	r0, #17
 80420b0:	f7ff fea0 	bl	8041df4 <SX1276Read>
 80420b4:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80420b8:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80420ba:	b200      	sxth	r0, r0
}
 80420bc:	bd08      	pop	{r3, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80420be:	4b07      	ldr	r3, [pc, #28]	; (80420dc <SX1276ReadRssi+0x3c>)
 80420c0:	689a      	ldr	r2, [r3, #8]
 80420c2:	4b07      	ldr	r3, [pc, #28]	; (80420e0 <SX1276ReadRssi+0x40>)
 80420c4:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80420c6:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80420ca:	d903      	bls.n	80420d4 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80420cc:	f7ff fe92 	bl	8041df4 <SX1276Read>
 80420d0:	389d      	subs	r0, #157	; 0x9d
 80420d2:	e7f2      	b.n	80420ba <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80420d4:	f7ff fe8e 	bl	8041df4 <SX1276Read>
 80420d8:	38a4      	subs	r0, #164	; 0xa4
 80420da:	e7ee      	b.n	80420ba <SX1276ReadRssi+0x1a>
 80420dc:	20003d00 	.word	0x20003d00
 80420e0:	1f4add40 	.word	0x1f4add40

080420e4 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 80420e4:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80420e6:	2001      	movs	r0, #1
 80420e8:	f7ff fe84 	bl	8041df4 <SX1276Read>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80420ec:	4c07      	ldr	r4, [pc, #28]	; (804210c <SX1276SetOpMode.part.2+0x28>)
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80420ee:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 80420f2:	2001      	movs	r0, #1
 80420f4:	f7ff fe2e 	bl	8041d54 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80420f8:	6823      	ldr	r3, [r4, #0]
 80420fa:	2001      	movs	r0, #1
 80420fc:	691b      	ldr	r3, [r3, #16]
 80420fe:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8042100:	6823      	ldr	r3, [r4, #0]
 8042102:	2000      	movs	r0, #0
 8042104:	681b      	ldr	r3, [r3, #0]
}
 8042106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 804210a:	4718      	bx	r3
 804210c:	20002324 	.word	0x20002324

08042110 <SX1276SetSleep>:
{
 8042110:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8042112:	480a      	ldr	r0, [pc, #40]	; (804213c <SX1276SetSleep+0x2c>)
 8042114:	f00c f97c 	bl	804e410 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8042118:	4809      	ldr	r0, [pc, #36]	; (8042140 <SX1276SetSleep+0x30>)
 804211a:	f00c f979 	bl	804e410 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 804211e:	4809      	ldr	r0, [pc, #36]	; (8042144 <SX1276SetSleep+0x34>)
 8042120:	f00c f976 	bl	804e410 <TimerStop>
 8042124:	f7ff ffde 	bl	80420e4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8042128:	4b07      	ldr	r3, [pc, #28]	; (8042148 <SX1276SetSleep+0x38>)
 804212a:	681b      	ldr	r3, [r3, #0]
 804212c:	2000      	movs	r0, #0
 804212e:	681b      	ldr	r3, [r3, #0]
 8042130:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8042132:	4b06      	ldr	r3, [pc, #24]	; (804214c <SX1276SetSleep+0x3c>)
 8042134:	2200      	movs	r2, #0
 8042136:	711a      	strb	r2, [r3, #4]
}
 8042138:	bd08      	pop	{r3, pc}
 804213a:	bf00      	nop
 804213c:	20003d68 	.word	0x20003d68
 8042140:	20003cd0 	.word	0x20003cd0
 8042144:	20003ce8 	.word	0x20003ce8
 8042148:	20002324 	.word	0x20002324
 804214c:	20003d00 	.word	0x20003d00

08042150 <SX1276SetOpMode>:
{
 8042150:	b538      	push	{r3, r4, r5, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8042152:	4604      	mov	r4, r0
 8042154:	b918      	cbnz	r0, 804215e <SX1276SetOpMode+0xe>
}
 8042156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804215a:	f7ff bfc3 	b.w	80420e4 <SX1276SetOpMode.part.2>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 804215e:	4d0c      	ldr	r5, [pc, #48]	; (8042190 <SX1276SetOpMode+0x40>)
 8042160:	682b      	ldr	r3, [r5, #0]
 8042162:	2001      	movs	r0, #1
 8042164:	681b      	ldr	r3, [r3, #0]
 8042166:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8042168:	682b      	ldr	r3, [r5, #0]
 804216a:	2000      	movs	r0, #0
 804216c:	691b      	ldr	r3, [r3, #16]
 804216e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8042170:	682b      	ldr	r3, [r5, #0]
 8042172:	4620      	mov	r0, r4
 8042174:	695b      	ldr	r3, [r3, #20]
 8042176:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8042178:	2001      	movs	r0, #1
 804217a:	f7ff fe3b 	bl	8041df4 <SX1276Read>
 804217e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
 8042182:	4321      	orrs	r1, r4
 8042184:	2001      	movs	r0, #1
}
 8042186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 804218a:	f7ff bde3 	b.w	8041d54 <SX1276Write>
 804218e:	bf00      	nop
 8042190:	20002324 	.word	0x20002324

08042194 <SX1276SetStby>:
{
 8042194:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8042196:	4808      	ldr	r0, [pc, #32]	; (80421b8 <SX1276SetStby+0x24>)
 8042198:	f00c f93a 	bl	804e410 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 804219c:	4807      	ldr	r0, [pc, #28]	; (80421bc <SX1276SetStby+0x28>)
 804219e:	f00c f937 	bl	804e410 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80421a2:	4807      	ldr	r0, [pc, #28]	; (80421c0 <SX1276SetStby+0x2c>)
 80421a4:	f00c f934 	bl	804e410 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80421a8:	2001      	movs	r0, #1
 80421aa:	f7ff ffd1 	bl	8042150 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80421ae:	4b05      	ldr	r3, [pc, #20]	; (80421c4 <SX1276SetStby+0x30>)
 80421b0:	2200      	movs	r2, #0
 80421b2:	711a      	strb	r2, [r3, #4]
}
 80421b4:	bd08      	pop	{r3, pc}
 80421b6:	bf00      	nop
 80421b8:	20003d68 	.word	0x20003d68
 80421bc:	20003cd0 	.word	0x20003cd0
 80421c0:	20003ce8 	.word	0x20003ce8
 80421c4:	20003d00 	.word	0x20003d00

080421c8 <SX1276SetRx>:
{
 80421c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 80421ca:	4c79      	ldr	r4, [pc, #484]	; (80423b0 <SX1276SetRx+0x1e8>)
{
 80421cc:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
 80421ce:	4879      	ldr	r0, [pc, #484]	; (80423b4 <SX1276SetRx+0x1ec>)
 80421d0:	f00c f91e 	bl	804e410 <TimerStop>
    switch( SX1276.Settings.Modem )
 80421d4:	7965      	ldrb	r5, [r4, #5]
 80421d6:	b11d      	cbz	r5, 80421e0 <SX1276SetRx+0x18>
 80421d8:	2d01      	cmp	r5, #1
 80421da:	d044      	beq.n	8042266 <SX1276SetRx+0x9e>
    bool rxContinuous = false;
 80421dc:	2600      	movs	r6, #0
 80421de:	e022      	b.n	8042226 <SX1276SetRx+0x5e>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80421e0:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80421e2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80421e6:	f7ff fe05 	bl	8041df4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80421ea:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80421ee:	f041 010c 	orr.w	r1, r1, #12
 80421f2:	2040      	movs	r0, #64	; 0x40
 80421f4:	f7ff fdae 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80421f8:	2041      	movs	r0, #65	; 0x41
 80421fa:	f7ff fdfb 	bl	8041df4 <SX1276Read>
 80421fe:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8042202:	b2c9      	uxtb	r1, r1
 8042204:	2041      	movs	r0, #65	; 0x41
 8042206:	f7ff fda5 	bl	8041d54 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 804220a:	2035      	movs	r0, #53	; 0x35
 804220c:	f7ff fdf2 	bl	8041df4 <SX1276Read>
 8042210:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8042214:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8042218:	211e      	movs	r1, #30
 804221a:	200d      	movs	r0, #13
 804221c:	f7ff fd9a 	bl	8041d54 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042220:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042222:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8042224:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8042226:	f44f 7280 	mov.w	r2, #256	; 0x100
 804222a:	2100      	movs	r1, #0
 804222c:	4862      	ldr	r0, [pc, #392]	; (80423b8 <SX1276SetRx+0x1f0>)
 804222e:	f00e fb88 	bl	8050942 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8042232:	2301      	movs	r3, #1
 8042234:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8042236:	b137      	cbz	r7, 8042246 <SX1276SetRx+0x7e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8042238:	4860      	ldr	r0, [pc, #384]	; (80423bc <SX1276SetRx+0x1f4>)
 804223a:	4639      	mov	r1, r7
 804223c:	f00c f910 	bl	804e460 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8042240:	485e      	ldr	r0, [pc, #376]	; (80423bc <SX1276SetRx+0x1f4>)
 8042242:	f00c f873 	bl	804e32c <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8042246:	7963      	ldrb	r3, [r4, #5]
 8042248:	2b00      	cmp	r3, #0
 804224a:	f040 80a9 	bne.w	80423a0 <SX1276SetRx+0x1d8>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 804224e:	2005      	movs	r0, #5
 8042250:	f7ff ff7e 	bl	8042150 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8042254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8042256:	485a      	ldr	r0, [pc, #360]	; (80423c0 <SX1276SetRx+0x1f8>)
 8042258:	f00c f902 	bl	804e460 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 804225c:	4858      	ldr	r0, [pc, #352]	; (80423c0 <SX1276SetRx+0x1f8>)
}
 804225e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
 8042262:	f00c b863 	b.w	804e32c <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042266:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 804226a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 804226c:	b32b      	cbz	r3, 80422ba <SX1276SetRx+0xf2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 804226e:	f7ff fdc1 	bl	8041df4 <SX1276Read>
 8042272:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8042276:	b2c9      	uxtb	r1, r1
 8042278:	2033      	movs	r0, #51	; 0x33
 804227a:	f7ff fd6b 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 804227e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042280:	203b      	movs	r0, #59	; 0x3b
 8042282:	f7ff fd67 	bl	8041d54 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8042286:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042288:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 804228a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 804228e:	d876      	bhi.n	804237e <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8042290:	f7ff fdb0 	bl	8041df4 <SX1276Read>
 8042294:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8042298:	2031      	movs	r0, #49	; 0x31
 804229a:	f7ff fd5b 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 804229e:	2100      	movs	r1, #0
 80422a0:	2030      	movs	r0, #48	; 0x30
 80422a2:	f7ff fd57 	bl	8041d54 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80422a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80422a8:	2b08      	cmp	r3, #8
 80422aa:	d81b      	bhi.n	80422e4 <SX1276SetRx+0x11c>
 80422ac:	e8df f003 	tbb	[pc, r3]
 80422b0:	473e3510 	.word	0x473e3510
 80422b4:	62625950 	.word	0x62625950
 80422b8:	62          	.byte	0x62
 80422b9:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80422ba:	f7ff fd9b 	bl	8041df4 <SX1276Read>
 80422be:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80422c2:	f041 0101 	orr.w	r1, r1, #1
 80422c6:	2033      	movs	r0, #51	; 0x33
 80422c8:	f7ff fd44 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80422cc:	211d      	movs	r1, #29
 80422ce:	e7d7      	b.n	8042280 <SX1276SetRx+0xb8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80422d0:	202f      	movs	r0, #47	; 0x2f
 80422d2:	2148      	movs	r1, #72	; 0x48
 80422d4:	f7ff fd3e 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80422d8:	68a0      	ldr	r0, [r4, #8]
 80422da:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 80422de:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80422e0:	f7ff fd44 	bl	8041d6c <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80422e4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80422e8:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80422ec:	2b00      	cmp	r3, #0
 80422ee:	d04d      	beq.n	804238c <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80422f0:	211d      	movs	r1, #29
 80422f2:	2011      	movs	r0, #17
 80422f4:	f7ff fd2e 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80422f8:	2040      	movs	r0, #64	; 0x40
 80422fa:	f7ff fd7b 	bl	8041df4 <SX1276Read>
 80422fe:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8042302:	2040      	movs	r0, #64	; 0x40
 8042304:	f7ff fd26 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8042308:	2100      	movs	r1, #0
 804230a:	200f      	movs	r0, #15
 804230c:	f7ff fd22 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042310:	2100      	movs	r1, #0
 8042312:	200d      	movs	r0, #13
 8042314:	f7ff fd1e 	bl	8041d54 <SX1276Write>
        break;
 8042318:	e785      	b.n	8042226 <SX1276SetRx+0x5e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804231a:	202f      	movs	r0, #47	; 0x2f
 804231c:	2144      	movs	r1, #68	; 0x44
 804231e:	f7ff fd19 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8042322:	68a0      	ldr	r0, [r4, #8]
 8042324:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8042328:	3034      	adds	r0, #52	; 0x34
 804232a:	e7d9      	b.n	80422e0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804232c:	202f      	movs	r0, #47	; 0x2f
 804232e:	2144      	movs	r1, #68	; 0x44
 8042330:	f7ff fd10 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8042334:	68a0      	ldr	r0, [r4, #8]
 8042336:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 804233a:	3004      	adds	r0, #4
 804233c:	e7d0      	b.n	80422e0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 804233e:	202f      	movs	r0, #47	; 0x2f
 8042340:	2144      	movs	r1, #68	; 0x44
 8042342:	f7ff fd07 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8042346:	68a0      	ldr	r0, [r4, #8]
 8042348:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 804234c:	305e      	adds	r0, #94	; 0x5e
 804234e:	e7c7      	b.n	80422e0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8042350:	202f      	movs	r0, #47	; 0x2f
 8042352:	2144      	movs	r1, #68	; 0x44
 8042354:	f7ff fcfe 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8042358:	68a0      	ldr	r0, [r4, #8]
 804235a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 804235e:	3012      	adds	r0, #18
 8042360:	e7be      	b.n	80422e0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8042362:	202f      	movs	r0, #47	; 0x2f
 8042364:	2144      	movs	r1, #68	; 0x44
 8042366:	f7ff fcf5 	bl	8041d54 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 804236a:	68a0      	ldr	r0, [r4, #8]
 804236c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8042370:	30c6      	adds	r0, #198	; 0xc6
 8042372:	e7b5      	b.n	80422e0 <SX1276SetRx+0x118>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8042374:	2140      	movs	r1, #64	; 0x40
 8042376:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8042378:	f7ff fcec 	bl	8041d54 <SX1276Write>
 804237c:	e7b2      	b.n	80422e4 <SX1276SetRx+0x11c>
 804237e:	f7ff fd39 	bl	8041df4 <SX1276Read>
 8042382:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042386:	b2c9      	uxtb	r1, r1
 8042388:	2031      	movs	r0, #49	; 0x31
 804238a:	e7f5      	b.n	8042378 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 804238c:	211f      	movs	r1, #31
 804238e:	2011      	movs	r0, #17
 8042390:	f7ff fce0 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8042394:	2040      	movs	r0, #64	; 0x40
 8042396:	f7ff fd2d 	bl	8041df4 <SX1276Read>
 804239a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 804239e:	e7b0      	b.n	8042302 <SX1276SetRx+0x13a>
        if( rxContinuous == true )
 80423a0:	b126      	cbz	r6, 80423ac <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80423a2:	2005      	movs	r0, #5
}
 80423a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80423a8:	f7ff bed2 	b.w	8042150 <SX1276SetOpMode>
 80423ac:	2006      	movs	r0, #6
 80423ae:	e7f9      	b.n	80423a4 <SX1276SetRx+0x1dc>
 80423b0:	20003d00 	.word	0x20003d00
 80423b4:	20003cd0 	.word	0x20003cd0
 80423b8:	20002328 	.word	0x20002328
 80423bc:	20003d68 	.word	0x20003d68
 80423c0:	20003ce8 	.word	0x20003ce8

080423c4 <SX1276SetTx>:
{
 80423c4:	b510      	push	{r4, lr}
 80423c6:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 80423c8:	4825      	ldr	r0, [pc, #148]	; (8042460 <SX1276SetTx+0x9c>)
 80423ca:	f00c f821 	bl	804e410 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80423ce:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
 80423d0:	4c24      	ldr	r4, [pc, #144]	; (8042464 <SX1276SetTx+0xa0>)
    TimerSetValue( &TxTimeoutTimer, timeout );
 80423d2:	4825      	ldr	r0, [pc, #148]	; (8042468 <SX1276SetTx+0xa4>)
 80423d4:	f00c f844 	bl	804e460 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80423d8:	7963      	ldrb	r3, [r4, #5]
 80423da:	b15b      	cbz	r3, 80423f4 <SX1276SetTx+0x30>
 80423dc:	2b01      	cmp	r3, #1
 80423de:	d023      	beq.n	8042428 <SX1276SetTx+0x64>
    SX1276.Settings.State = RF_TX_RUNNING;
 80423e0:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80423e2:	4821      	ldr	r0, [pc, #132]	; (8042468 <SX1276SetTx+0xa4>)
    SX1276.Settings.State = RF_TX_RUNNING;
 80423e4:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80423e6:	f00b ffa1 	bl	804e32c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80423ea:	2003      	movs	r0, #3
}
 80423ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80423f0:	f7ff beae 	b.w	8042150 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80423f4:	2040      	movs	r0, #64	; 0x40
 80423f6:	f7ff fcfd 	bl	8041df4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80423fa:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80423fe:	f041 0110 	orr.w	r1, r1, #16
 8042402:	2040      	movs	r0, #64	; 0x40
 8042404:	f7ff fca6 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8042408:	2041      	movs	r0, #65	; 0x41
 804240a:	f7ff fcf3 	bl	8041df4 <SX1276Read>
 804240e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8042412:	2041      	movs	r0, #65	; 0x41
 8042414:	f7ff fc9e 	bl	8041d54 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8042418:	2035      	movs	r0, #53	; 0x35
 804241a:	f7ff fceb 	bl	8041df4 <SX1276Read>
 804241e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8042422:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        break;
 8042426:	e7db      	b.n	80423e0 <SX1276SetTx+0x1c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042428:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 804242c:	b173      	cbz	r3, 804244c <SX1276SetTx+0x88>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 804242e:	21f5      	movs	r1, #245	; 0xf5
 8042430:	2011      	movs	r0, #17
 8042432:	f7ff fc8f 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8042436:	2040      	movs	r0, #64	; 0x40
 8042438:	f7ff fcdc 	bl	8041df4 <SX1276Read>
 804243c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8042440:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8042444:	2040      	movs	r0, #64	; 0x40
 8042446:	f7ff fc85 	bl	8041d54 <SX1276Write>
 804244a:	e7c9      	b.n	80423e0 <SX1276SetTx+0x1c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 804244c:	21f7      	movs	r1, #247	; 0xf7
 804244e:	2011      	movs	r0, #17
 8042450:	f7ff fc80 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8042454:	2040      	movs	r0, #64	; 0x40
 8042456:	f7ff fccd 	bl	8041df4 <SX1276Read>
 804245a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 804245e:	e7ef      	b.n	8042440 <SX1276SetTx+0x7c>
 8042460:	20003d68 	.word	0x20003d68
 8042464:	20003d00 	.word	0x20003d00
 8042468:	20003cd0 	.word	0x20003cd0

0804246c <SX1276StartCad>:
{
 804246c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 804246e:	4c0c      	ldr	r4, [pc, #48]	; (80424a0 <SX1276StartCad+0x34>)
 8042470:	7963      	ldrb	r3, [r4, #5]
 8042472:	2b01      	cmp	r3, #1
 8042474:	d112      	bne.n	804249c <SX1276StartCad+0x30>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8042476:	21fa      	movs	r1, #250	; 0xfa
 8042478:	2011      	movs	r0, #17
 804247a:	f7ff fc6b 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 804247e:	2040      	movs	r0, #64	; 0x40
 8042480:	f7ff fcb8 	bl	8041df4 <SX1276Read>
 8042484:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8042488:	2040      	movs	r0, #64	; 0x40
 804248a:	f7ff fc63 	bl	8041d54 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 804248e:	2303      	movs	r3, #3
 8042490:	7123      	strb	r3, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8042492:	2007      	movs	r0, #7
}
 8042494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8042498:	f7ff be5a 	b.w	8042150 <SX1276SetOpMode>
}
 804249c:	bd10      	pop	{r4, pc}
 804249e:	bf00      	nop
 80424a0:	20003d00 	.word	0x20003d00

080424a4 <SX1276SetModem>:
{
 80424a4:	b510      	push	{r4, lr}
 80424a6:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80424a8:	2001      	movs	r0, #1
 80424aa:	f7ff fca3 	bl	8041df4 <SX1276Read>
 80424ae:	4b19      	ldr	r3, [pc, #100]	; (8042514 <SX1276SetModem+0x70>)
 80424b0:	f010 0f80 	tst.w	r0, #128	; 0x80
        SX1276.Settings.Modem = MODEM_LORA;
 80424b4:	bf14      	ite	ne
 80424b6:	2201      	movne	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 80424b8:	2200      	moveq	r2, #0
 80424ba:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 80424bc:	795a      	ldrb	r2, [r3, #5]
 80424be:	42a2      	cmp	r2, r4
 80424c0:	d027      	beq.n	8042512 <SX1276SetModem+0x6e>
    switch( SX1276.Settings.Modem )
 80424c2:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 80424c4:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80424c6:	d013      	beq.n	80424f0 <SX1276SetModem+0x4c>
 80424c8:	f7ff fe0c 	bl	80420e4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80424cc:	2001      	movs	r0, #1
 80424ce:	f7ff fc91 	bl	8041df4 <SX1276Read>
 80424d2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80424d6:	2001      	movs	r0, #1
 80424d8:	f7ff fc3c 	bl	8041d54 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80424dc:	2100      	movs	r1, #0
 80424de:	2040      	movs	r0, #64	; 0x40
 80424e0:	f7ff fc38 	bl	8041d54 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80424e4:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80424e6:	2041      	movs	r0, #65	; 0x41
}
 80424e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80424ec:	f7ff bc32 	b.w	8041d54 <SX1276Write>
 80424f0:	f7ff fdf8 	bl	80420e4 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80424f4:	4620      	mov	r0, r4
 80424f6:	f7ff fc7d 	bl	8041df4 <SX1276Read>
 80424fa:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80424fe:	b2c9      	uxtb	r1, r1
 8042500:	4620      	mov	r0, r4
 8042502:	f7ff fc27 	bl	8041d54 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8042506:	2100      	movs	r1, #0
 8042508:	2040      	movs	r0, #64	; 0x40
 804250a:	f7ff fc23 	bl	8041d54 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 804250e:	2100      	movs	r1, #0
 8042510:	e7e9      	b.n	80424e6 <SX1276SetModem+0x42>
}
 8042512:	bd10      	pop	{r4, pc}
 8042514:	20003d00 	.word	0x20003d00

08042518 <SX1276Init>:
{
 8042518:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 804251a:	4d1b      	ldr	r5, [pc, #108]	; (8042588 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 804251c:	491b      	ldr	r1, [pc, #108]	; (804258c <SX1276Init+0x74>)
    RadioEvents = events;
 804251e:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8042522:	481b      	ldr	r0, [pc, #108]	; (8042590 <SX1276Init+0x78>)
 8042524:	4c1b      	ldr	r4, [pc, #108]	; (8042594 <SX1276Init+0x7c>)
 8042526:	f00b fef7 	bl	804e318 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 804252a:	4918      	ldr	r1, [pc, #96]	; (804258c <SX1276Init+0x74>)
 804252c:	481a      	ldr	r0, [pc, #104]	; (8042598 <SX1276Init+0x80>)
 804252e:	f00b fef3 	bl	804e318 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8042532:	4916      	ldr	r1, [pc, #88]	; (804258c <SX1276Init+0x74>)
 8042534:	4819      	ldr	r0, [pc, #100]	; (804259c <SX1276Init+0x84>)
 8042536:	f00b feef 	bl	804e318 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 804253a:	682b      	ldr	r3, [r5, #0]
 804253c:	2001      	movs	r0, #1
 804253e:	681b      	ldr	r3, [r3, #0]
 8042540:	4798      	blx	r3
    SX1276Reset( );
 8042542:	f7ff fbbf 	bl	8041cc4 <SX1276Reset>
    RxChainCalibration( );
 8042546:	f7ff fc61 	bl	8041e0c <RxChainCalibration>
 804254a:	f7ff fdcb 	bl	80420e4 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 804254e:	682b      	ldr	r3, [r5, #0]
 8042550:	4813      	ldr	r0, [pc, #76]	; (80425a0 <SX1276Init+0x88>)
 8042552:	689b      	ldr	r3, [r3, #8]
 8042554:	4798      	blx	r3
 8042556:	f104 0630 	add.w	r6, r4, #48	; 0x30
        SX1276SetModem( RadioRegsInit[i].Modem );
 804255a:	7820      	ldrb	r0, [r4, #0]
 804255c:	f7ff ffa2 	bl	80424a4 <SX1276SetModem>
 8042560:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8042562:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8042566:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 804256a:	f7ff fbf3 	bl	8041d54 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 804256e:	42b4      	cmp	r4, r6
 8042570:	d1f3      	bne.n	804255a <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8042572:	2000      	movs	r0, #0
 8042574:	f7ff ff96 	bl	80424a4 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8042578:	4b0a      	ldr	r3, [pc, #40]	; (80425a4 <SX1276Init+0x8c>)
 804257a:	2200      	movs	r2, #0
 804257c:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 804257e:	682b      	ldr	r3, [r5, #0]
 8042580:	685b      	ldr	r3, [r3, #4]
 8042582:	4798      	blx	r3
}
 8042584:	3002      	adds	r0, #2
 8042586:	bd70      	pop	{r4, r5, r6, pc}
 8042588:	20002324 	.word	0x20002324
 804258c:	080431b1 	.word	0x080431b1
 8042590:	20003cd0 	.word	0x20003cd0
 8042594:	08052110 	.word	0x08052110
 8042598:	20003d68 	.word	0x20003d68
 804259c:	20003ce8 	.word	0x20003ce8
 80425a0:	20001018 	.word	0x20001018
 80425a4:	20003d00 	.word	0x20003d00

080425a8 <SX1276IsChannelFree>:
{
 80425a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80425aa:	461c      	mov	r4, r3
    return SX1276.Settings.State;
 80425ac:	4b13      	ldr	r3, [pc, #76]	; (80425fc <SX1276IsChannelFree+0x54>)
    if( SX1276GetStatus( ) != RF_IDLE )
 80425ae:	791b      	ldrb	r3, [r3, #4]
{
 80425b0:	4606      	mov	r6, r0
 80425b2:	460d      	mov	r5, r1
 80425b4:	4617      	mov	r7, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 80425b6:	b9f3      	cbnz	r3, 80425f6 <SX1276IsChannelFree+0x4e>
    SX1276SetModem( modem );
 80425b8:	f7ff ff74 	bl	80424a4 <SX1276SetModem>
    SX1276SetChannel( freq );
 80425bc:	4628      	mov	r0, r5
 80425be:	f7ff fbd5 	bl	8041d6c <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80425c2:	2005      	movs	r0, #5
 80425c4:	f7ff fdc4 	bl	8042150 <SX1276SetOpMode>
    DelayMs( 1 );
 80425c8:	2001      	movs	r0, #1
 80425ca:	f00d fab3 	bl	804fb34 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80425ce:	f00b ff58 	bl	804e482 <TimerGetCurrentTime>
 80425d2:	4605      	mov	r5, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80425d4:	4628      	mov	r0, r5
 80425d6:	f00b ff5b 	bl	804e490 <TimerGetElapsedTime>
 80425da:	42a0      	cmp	r0, r4
 80425dc:	d304      	bcc.n	80425e8 <SX1276IsChannelFree+0x40>
    bool status = true;
 80425de:	2401      	movs	r4, #1
    SX1276SetSleep( );
 80425e0:	f7ff fd96 	bl	8042110 <SX1276SetSleep>
}
 80425e4:	4620      	mov	r0, r4
 80425e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 80425e8:	4630      	mov	r0, r6
 80425ea:	f7ff fd59 	bl	80420a0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80425ee:	42b8      	cmp	r0, r7
 80425f0:	ddf0      	ble.n	80425d4 <SX1276IsChannelFree+0x2c>
            status = false;
 80425f2:	2400      	movs	r4, #0
 80425f4:	e7f4      	b.n	80425e0 <SX1276IsChannelFree+0x38>
        return false;
 80425f6:	2400      	movs	r4, #0
 80425f8:	e7f4      	b.n	80425e4 <SX1276IsChannelFree+0x3c>
 80425fa:	bf00      	nop
 80425fc:	20003d00 	.word	0x20003d00

08042600 <SX1276Random>:
{
 8042600:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8042602:	2001      	movs	r0, #1
 8042604:	f7ff ff4e 	bl	80424a4 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8042608:	21ff      	movs	r1, #255	; 0xff
 804260a:	2011      	movs	r0, #17
 804260c:	f7ff fba2 	bl	8041d54 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8042610:	2005      	movs	r0, #5
 8042612:	f7ff fd9d 	bl	8042150 <SX1276SetOpMode>
 8042616:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 8042618:	4625      	mov	r5, r4
        DelayMs( 1 );
 804261a:	2001      	movs	r0, #1
 804261c:	f00d fa8a 	bl	804fb34 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8042620:	202c      	movs	r0, #44	; 0x2c
 8042622:	f7ff fbe7 	bl	8041df4 <SX1276Read>
 8042626:	f000 0001 	and.w	r0, r0, #1
 804262a:	40a0      	lsls	r0, r4
 804262c:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
 804262e:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8042630:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
 8042634:	d1f1      	bne.n	804261a <SX1276Random+0x1a>
    SX1276SetSleep( );
 8042636:	f7ff fd6b 	bl	8042110 <SX1276SetSleep>
}
 804263a:	4628      	mov	r0, r5
 804263c:	bd38      	pop	{r3, r4, r5, pc}
	...

08042640 <SX1276SetRxConfig>:
{
 8042640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042644:	b089      	sub	sp, #36	; 0x24
 8042646:	4604      	mov	r4, r0
 8042648:	9300      	str	r3, [sp, #0]
 804264a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 804264e:	9304      	str	r3, [sp, #16]
 8042650:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8042654:	9302      	str	r3, [sp, #8]
 8042656:	468a      	mov	sl, r1
 8042658:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 804265c:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8042660:	9305      	str	r3, [sp, #20]
 8042662:	4615      	mov	r5, r2
 8042664:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8042668:	9206      	str	r2, [sp, #24]
 804266a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 804266e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8042672:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
 8042676:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 804267a:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
 804267e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
 8042680:	f7ff ff10 	bl	80424a4 <SX1276SetModem>
    switch( modem )
 8042684:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8042688:	b134      	cbz	r4, 8042698 <SX1276SetRxConfig+0x58>
 804268a:	2c01      	cmp	r4, #1
 804268c:	9907      	ldr	r1, [sp, #28]
 804268e:	f000 8083 	beq.w	8042798 <SX1276SetRxConfig+0x158>
}
 8042692:	b009      	add	sp, #36	; 0x24
 8042694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8042698:	4ca1      	ldr	r4, [pc, #644]	; (8042920 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 804269a:	4628      	mov	r0, r5
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 804269c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80426a0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80426a4:	f8c4 a014 	str.w	sl, [r4, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80426a8:	e9c4 9506 	strd	r9, r5, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80426ac:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80426b0:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80426b4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80426b8:	8427      	strh	r7, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80426ba:	f7fe f853 	bl	8040764 <__aeabi_ui2d>
 80426be:	e9cd 0100 	strd	r0, r1, [sp]
 80426c2:	4602      	mov	r2, r0
 80426c4:	460b      	mov	r3, r1
 80426c6:	2000      	movs	r0, #0
 80426c8:	4996      	ldr	r1, [pc, #600]	; (8042924 <SX1276SetRxConfig+0x2e4>)
 80426ca:	f7fe f9ef 	bl	8040aac <__aeabi_ddiv>
 80426ce:	2200      	movs	r2, #0
 80426d0:	4b95      	ldr	r3, [pc, #596]	; (8042928 <SX1276SetRxConfig+0x2e8>)
 80426d2:	f7fe f8c1 	bl	8040858 <__aeabi_dmul>
 80426d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80426da:	9804      	ldr	r0, [sp, #16]
 80426dc:	f7fe f852 	bl	8040784 <__aeabi_i2d>
 80426e0:	4602      	mov	r2, r0
 80426e2:	460b      	mov	r3, r1
 80426e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80426e8:	f7fe f8b6 	bl	8040858 <__aeabi_dmul>
 80426ec:	2200      	movs	r2, #0
 80426ee:	4b8f      	ldr	r3, [pc, #572]	; (804292c <SX1276SetRxConfig+0x2ec>)
 80426f0:	f7fe f8b2 	bl	8040858 <__aeabi_dmul>
 80426f4:	f7fe fb72 	bl	8040ddc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80426f8:	e9dd 2300 	ldrd	r2, r3, [sp]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80426fc:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80426fe:	a186      	add	r1, pc, #536	; (adr r1, 8042918 <SX1276SetRxConfig+0x2d8>)
 8042700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8042704:	f7fe f9d2 	bl	8040aac <__aeabi_ddiv>
 8042708:	f7fe fb68 	bl	8040ddc <__aeabi_d2uiz>
 804270c:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 804270e:	0a21      	lsrs	r1, r4, #8
 8042710:	2002      	movs	r0, #2
 8042712:	f7ff fb1f 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8042716:	b2e1      	uxtb	r1, r4
 8042718:	2003      	movs	r0, #3
 804271a:	f7ff fb1b 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 804271e:	4650      	mov	r0, sl
 8042720:	f7ff faa2 	bl	8041c68 <GetFskBandwidthRegValue>
 8042724:	4601      	mov	r1, r0
 8042726:	2012      	movs	r0, #18
 8042728:	f7ff fb14 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 804272c:	4648      	mov	r0, r9
 804272e:	f7ff fa9b 	bl	8041c68 <GetFskBandwidthRegValue>
 8042732:	4601      	mov	r1, r0
 8042734:	2013      	movs	r0, #19
 8042736:	f7ff fb0d 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 804273a:	0a39      	lsrs	r1, r7, #8
 804273c:	2025      	movs	r0, #37	; 0x25
 804273e:	f7ff fb09 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042742:	b2f9      	uxtb	r1, r7
 8042744:	2026      	movs	r0, #38	; 0x26
 8042746:	f7ff fb05 	bl	8041d54 <SX1276Write>
            if( fixLen == 1 )
 804274a:	f1b8 0f00 	cmp.w	r8, #0
 804274e:	d021      	beq.n	8042794 <SX1276SetRxConfig+0x154>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8042750:	4659      	mov	r1, fp
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042752:	2032      	movs	r0, #50	; 0x32
 8042754:	f7ff fafe 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042758:	2030      	movs	r0, #48	; 0x30
 804275a:	f7ff fb4b 	bl	8041df4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 804275e:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042762:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042766:	bf14      	ite	ne
 8042768:	2100      	movne	r1, #0
 804276a:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 804276e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 8042772:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8042774:	b2c9      	uxtb	r1, r1
 8042776:	2030      	movs	r0, #48	; 0x30
 8042778:	f7ff faec 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 804277c:	2031      	movs	r0, #49	; 0x31
 804277e:	f7ff fb39 	bl	8041df4 <SX1276Read>
 8042782:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042786:	b2c9      	uxtb	r1, r1
 8042788:	2031      	movs	r0, #49	; 0x31
}
 804278a:	b009      	add	sp, #36	; 0x24
 804278c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042790:	f7ff bae0 	b.w	8041d54 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8042794:	21ff      	movs	r1, #255	; 0xff
 8042796:	e7dc      	b.n	8042752 <SX1276SetRxConfig+0x112>
            if( bandwidth > 2 )
 8042798:	f1ba 0f02 	cmp.w	sl, #2
 804279c:	d900      	bls.n	80427a0 <SX1276SetRxConfig+0x160>
 804279e:	e7fe      	b.n	804279e <SX1276SetRxConfig+0x15e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80427a0:	4c5f      	ldr	r4, [pc, #380]	; (8042920 <SX1276SetRxConfig+0x2e0>)
            SX1276.Settings.LoRa.Coderate = coderate;
 80427a2:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80427a4:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
            bandwidth += 7;
 80427a8:	f10a 0907 	add.w	r9, sl, #7
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80427ac:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
 80427ae:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
            if( datarate > 12 )
 80427b2:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.Datarate = datarate;
 80427b4:	e9c4 9511 	strd	r9, r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80427b8:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 80427bc:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80427c0:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80427c4:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80427c8:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80427cc:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80427d0:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
            if( datarate > 12 )
 80427d4:	f200 8098 	bhi.w	8042908 <SX1276SetRxConfig+0x2c8>
            else if( datarate < 6 )
 80427d8:	2d05      	cmp	r5, #5
 80427da:	f240 8081 	bls.w	80428e0 <SX1276SetRxConfig+0x2a0>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80427de:	f1b9 0f07 	cmp.w	r9, #7
 80427e2:	d176      	bne.n	80428d2 <SX1276SetRxConfig+0x292>
 80427e4:	f1a5 030b 	sub.w	r3, r5, #11
 80427e8:	2b01      	cmp	r3, #1
 80427ea:	d877      	bhi.n	80428dc <SX1276SetRxConfig+0x29c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80427ec:	2301      	movs	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80427ee:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80427f0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80427f4:	f7ff fafe 	bl	8041df4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80427f8:	9b00      	ldr	r3, [sp, #0]
 80427fa:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
 80427fe:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042802:	b2c9      	uxtb	r1, r1
 8042804:	201d      	movs	r0, #29
 8042806:	f7ff faa5 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 804280a:	201e      	movs	r0, #30
 804280c:	f7ff faf2 	bl	8041df4 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8042810:	9b04      	ldr	r3, [sp, #16]
 8042812:	f3c3 2101 	ubfx	r1, r3, #8, #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8042816:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
 804281a:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 804281e:	4301      	orrs	r1, r0
 8042820:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8042824:	b2c9      	uxtb	r1, r1
 8042826:	201e      	movs	r0, #30
 8042828:	f7ff fa94 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 804282c:	2026      	movs	r0, #38	; 0x26
 804282e:	f7ff fae1 	bl	8041df4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042832:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042836:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 804283a:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 804283e:	b2c9      	uxtb	r1, r1
 8042840:	2026      	movs	r0, #38	; 0x26
 8042842:	f7ff fa87 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8042846:	f89d 1010 	ldrb.w	r1, [sp, #16]
 804284a:	201f      	movs	r0, #31
 804284c:	f7ff fa82 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8042850:	0a39      	lsrs	r1, r7, #8
 8042852:	2020      	movs	r0, #32
 8042854:	f7ff fa7e 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8042858:	b2f9      	uxtb	r1, r7
 804285a:	2021      	movs	r0, #33	; 0x21
 804285c:	f7ff fa7a 	bl	8041d54 <SX1276Write>
            if( fixLen == 1 )
 8042860:	f1b8 0f00 	cmp.w	r8, #0
 8042864:	d003      	beq.n	804286e <SX1276SetRxConfig+0x22e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8042866:	4659      	mov	r1, fp
 8042868:	2022      	movs	r0, #34	; 0x22
 804286a:	f7ff fa73 	bl	8041d54 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 804286e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042872:	b16b      	cbz	r3, 8042890 <SX1276SetRxConfig+0x250>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042874:	2044      	movs	r0, #68	; 0x44
 8042876:	f7ff fabd 	bl	8041df4 <SX1276Read>
 804287a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 804287e:	b2c9      	uxtb	r1, r1
 8042880:	2044      	movs	r0, #68	; 0x44
 8042882:	f7ff fa67 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042886:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 804288a:	2024      	movs	r0, #36	; 0x24
 804288c:	f7ff fa62 	bl	8041d54 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8042890:	f1b9 0f09 	cmp.w	r9, #9
 8042894:	d12a      	bne.n	80428ec <SX1276SetRxConfig+0x2ac>
 8042896:	68a2      	ldr	r2, [r4, #8]
 8042898:	4b25      	ldr	r3, [pc, #148]	; (8042930 <SX1276SetRxConfig+0x2f0>)
 804289a:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 804289c:	f04f 0102 	mov.w	r1, #2
 80428a0:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80428a4:	d91e      	bls.n	80428e4 <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80428a6:	f7ff fa55 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80428aa:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80428ac:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80428ae:	f7ff fa51 	bl	8041d54 <SX1276Write>
            if( datarate == 6 )
 80428b2:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80428b4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 80428b8:	d11b      	bne.n	80428f2 <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80428ba:	f7ff fa9b 	bl	8041df4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80428be:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80428c2:	f041 0105 	orr.w	r1, r1, #5
 80428c6:	2031      	movs	r0, #49	; 0x31
 80428c8:	f7ff fa44 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80428cc:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80428ce:	2037      	movs	r0, #55	; 0x37
 80428d0:	e75b      	b.n	804278a <SX1276SetRxConfig+0x14a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80428d2:	f1b9 0f08 	cmp.w	r9, #8
 80428d6:	d101      	bne.n	80428dc <SX1276SetRxConfig+0x29c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80428d8:	2d0c      	cmp	r5, #12
 80428da:	d087      	beq.n	80427ec <SX1276SetRxConfig+0x1ac>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80428dc:	2300      	movs	r3, #0
 80428de:	e786      	b.n	80427ee <SX1276SetRxConfig+0x1ae>
                datarate = 6;
 80428e0:	2506      	movs	r5, #6
 80428e2:	e7fb      	b.n	80428dc <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80428e4:	f7ff fa36 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80428e8:	217f      	movs	r1, #127	; 0x7f
 80428ea:	e7df      	b.n	80428ac <SX1276SetRxConfig+0x26c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80428ec:	2103      	movs	r1, #3
 80428ee:	2036      	movs	r0, #54	; 0x36
 80428f0:	e7dd      	b.n	80428ae <SX1276SetRxConfig+0x26e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80428f2:	f7ff fa7f 	bl	8041df4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80428f6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80428fa:	f041 0103 	orr.w	r1, r1, #3
 80428fe:	2031      	movs	r0, #49	; 0x31
 8042900:	f7ff fa28 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042904:	210a      	movs	r1, #10
 8042906:	e7e2      	b.n	80428ce <SX1276SetRxConfig+0x28e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042908:	f1ba 0f02 	cmp.w	sl, #2
 804290c:	f04f 050c 	mov.w	r5, #12
 8042910:	d0e4      	beq.n	80428dc <SX1276SetRxConfig+0x29c>
 8042912:	e76b      	b.n	80427ec <SX1276SetRxConfig+0x1ac>
 8042914:	f3af 8000 	nop.w
 8042918:	00000000 	.word	0x00000000
 804291c:	417e8480 	.word	0x417e8480
 8042920:	20003d00 	.word	0x20003d00
 8042924:	3ff00000 	.word	0x3ff00000
 8042928:	40200000 	.word	0x40200000
 804292c:	408f4000 	.word	0x408f4000
 8042930:	1f4add40 	.word	0x1f4add40
 8042934:	00000000 	.word	0x00000000

08042938 <SX1276SetTxConfig>:
{
 8042938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804293c:	b087      	sub	sp, #28
 804293e:	4698      	mov	r8, r3
 8042940:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8042944:	9301      	str	r3, [sp, #4]
 8042946:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 804294a:	9303      	str	r3, [sp, #12]
 804294c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8042950:	9304      	str	r3, [sp, #16]
 8042952:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8042954:	9205      	str	r2, [sp, #20]
 8042956:	4689      	mov	r9, r1
 8042958:	9302      	str	r3, [sp, #8]
 804295a:	4683      	mov	fp, r0
 804295c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 804295e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8042962:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8042966:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 804296a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    SX1276SetModem( modem );
 804296e:	f7ff fd99 	bl	80424a4 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8042972:	4985      	ldr	r1, [pc, #532]	; (8042b88 <SX1276SetTxConfig+0x250>)
 8042974:	6809      	ldr	r1, [r1, #0]
 8042976:	4648      	mov	r0, r9
 8042978:	68c9      	ldr	r1, [r1, #12]
 804297a:	4788      	blx	r1
    switch( modem )
 804297c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8042980:	f1bb 0f00 	cmp.w	fp, #0
 8042984:	d005      	beq.n	8042992 <SX1276SetTxConfig+0x5a>
 8042986:	f1bb 0f01 	cmp.w	fp, #1
 804298a:	d061      	beq.n	8042a50 <SX1276SetTxConfig+0x118>
}
 804298c:	b007      	add	sp, #28
 804298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8042992:	497e      	ldr	r1, [pc, #504]	; (8042b8c <SX1276SetTxConfig+0x254>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8042994:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8042998:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.Fsk.Datarate = datarate;
 804299a:	61cc      	str	r4, [r1, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 804299c:	e9c1 2804 	strd	r2, r8, [r1, #16]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80429a0:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80429a4:	628b      	str	r3, [r1, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80429a6:	4610      	mov	r0, r2
            SX1276.Settings.Fsk.Power = power;
 80429a8:	f881 900c 	strb.w	r9, [r1, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80429ac:	840f      	strh	r7, [r1, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80429ae:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80429b2:	f7fd fed7 	bl	8040764 <__aeabi_ui2d>
 80429b6:	a370      	add	r3, pc, #448	; (adr r3, 8042b78 <SX1276SetTxConfig+0x240>)
 80429b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429bc:	f7fe f876 	bl	8040aac <__aeabi_ddiv>
 80429c0:	f7fe fa0c 	bl	8040ddc <__aeabi_d2uiz>
 80429c4:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80429c8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80429cc:	2004      	movs	r0, #4
 80429ce:	f7ff f9c1 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80429d2:	fa5f f188 	uxtb.w	r1, r8
 80429d6:	2005      	movs	r0, #5
 80429d8:	f7ff f9bc 	bl	8041d54 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80429dc:	4620      	mov	r0, r4
 80429de:	f7fd fec1 	bl	8040764 <__aeabi_ui2d>
 80429e2:	4602      	mov	r2, r0
 80429e4:	460b      	mov	r3, r1
 80429e6:	a166      	add	r1, pc, #408	; (adr r1, 8042b80 <SX1276SetTxConfig+0x248>)
 80429e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80429ec:	f7fe f85e 	bl	8040aac <__aeabi_ddiv>
 80429f0:	f7fe f9f4 	bl	8040ddc <__aeabi_d2uiz>
 80429f4:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80429f6:	0a21      	lsrs	r1, r4, #8
 80429f8:	2002      	movs	r0, #2
 80429fa:	f7ff f9ab 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80429fe:	b2e1      	uxtb	r1, r4
 8042a00:	2003      	movs	r0, #3
 8042a02:	f7ff f9a7 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042a06:	0a39      	lsrs	r1, r7, #8
 8042a08:	2025      	movs	r0, #37	; 0x25
 8042a0a:	f7ff f9a3 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8042a0e:	b2f9      	uxtb	r1, r7
 8042a10:	2026      	movs	r0, #38	; 0x26
 8042a12:	f7ff f99f 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8042a16:	2030      	movs	r0, #48	; 0x30
 8042a18:	f7ff f9ec 	bl	8041df4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042a1c:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 8042a1e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8042a22:	bf14      	ite	ne
 8042a24:	2100      	movne	r1, #0
 8042a26:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8042a2a:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
 8042a2e:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 8042a30:	b2c9      	uxtb	r1, r1
 8042a32:	2030      	movs	r0, #48	; 0x30
 8042a34:	f7ff f98e 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8042a38:	2031      	movs	r0, #49	; 0x31
 8042a3a:	f7ff f9db 	bl	8041df4 <SX1276Read>
 8042a3e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042a42:	b2c9      	uxtb	r1, r1
 8042a44:	2031      	movs	r0, #49	; 0x31
}
 8042a46:	b007      	add	sp, #28
 8042a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042a4c:	f7ff b982 	b.w	8041d54 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
 8042a50:	4a4e      	ldr	r2, [pc, #312]	; (8042b8c <SX1276SetTxConfig+0x254>)
            if( bandwidth > 2 )
 8042a52:	f1b8 0f02 	cmp.w	r8, #2
            SX1276.Settings.LoRa.Power = power;
 8042a56:	f882 9040 	strb.w	r9, [r2, #64]	; 0x40
 8042a5a:	4691      	mov	r9, r2
            if( bandwidth > 2 )
 8042a5c:	d900      	bls.n	8042a60 <SX1276SetTxConfig+0x128>
 8042a5e:	e7fe      	b.n	8042a5e <SX1276SetTxConfig+0x126>
            bandwidth += 7;
 8042a60:	f108 0b07 	add.w	fp, r8, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8042a64:	e9c2 b411 	strd	fp, r4, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8042a68:	f882 a04d 	strb.w	sl, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8042a6c:	f8a2 704e 	strh.w	r7, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8042a70:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8042a74:	9a01      	ldr	r2, [sp, #4]
 8042a76:	f889 2053 	strb.w	r2, [r9, #83]	; 0x53
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8042a7a:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042a7e:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042a80:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8042a82:	f889 2054 	strb.w	r2, [r9, #84]	; 0x54
            if( datarate > 12 )
 8042a86:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8042a88:	f889 5052 	strb.w	r5, [r9, #82]	; 0x52
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8042a8c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
            if( datarate > 12 )
 8042a90:	d86c      	bhi.n	8042b6c <SX1276SetTxConfig+0x234>
            else if( datarate < 6 )
 8042a92:	2c05      	cmp	r4, #5
 8042a94:	d95d      	bls.n	8042b52 <SX1276SetTxConfig+0x21a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042a96:	f1bb 0f07 	cmp.w	fp, #7
 8042a9a:	d153      	bne.n	8042b44 <SX1276SetTxConfig+0x20c>
 8042a9c:	f1a4 030b 	sub.w	r3, r4, #11
 8042aa0:	2b01      	cmp	r3, #1
 8042aa2:	d854      	bhi.n	8042b4e <SX1276SetTxConfig+0x216>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8042aa4:	2301      	movs	r3, #1
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042aa6:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042aaa:	9b01      	ldr	r3, [sp, #4]
 8042aac:	b16b      	cbz	r3, 8042aca <SX1276SetTxConfig+0x192>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8042aae:	2044      	movs	r0, #68	; 0x44
 8042ab0:	f7ff f9a0 	bl	8041df4 <SX1276Read>
 8042ab4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8042ab8:	b2c9      	uxtb	r1, r1
 8042aba:	2044      	movs	r0, #68	; 0x44
 8042abc:	f7ff f94a 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8042ac0:	f899 1054 	ldrb.w	r1, [r9, #84]	; 0x54
 8042ac4:	2024      	movs	r0, #36	; 0x24
 8042ac6:	f7ff f945 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042aca:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042acc:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8042ad0:	f7ff f990 	bl	8041df4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8042ad4:	ea46 110b 	orr.w	r1, r6, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
 8042ad8:	b2c9      	uxtb	r1, r1
 8042ada:	201d      	movs	r0, #29
 8042adc:	f7ff f93a 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8042ae0:	201e      	movs	r0, #30
 8042ae2:	f7ff f987 	bl	8041df4 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8042ae6:	00ad      	lsls	r5, r5, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
 8042ae8:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 8042aec:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8042af0:	4305      	orrs	r5, r0
 8042af2:	b2e9      	uxtb	r1, r5
 8042af4:	201e      	movs	r0, #30
 8042af6:	f7ff f92d 	bl	8041d54 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042afa:	2026      	movs	r0, #38	; 0x26
 8042afc:	f7ff f97a 	bl	8041df4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8042b00:	f899 104c 	ldrb.w	r1, [r9, #76]	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8042b04:	f020 0008 	bic.w	r0, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8042b08:	ea40 01c1 	orr.w	r1, r0, r1, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8042b0c:	b2c9      	uxtb	r1, r1
 8042b0e:	2026      	movs	r0, #38	; 0x26
 8042b10:	f7ff f920 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8042b14:	0a39      	lsrs	r1, r7, #8
 8042b16:	2020      	movs	r0, #32
 8042b18:	f7ff f91c 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8042b1c:	2021      	movs	r0, #33	; 0x21
 8042b1e:	b2f9      	uxtb	r1, r7
 8042b20:	f7ff f918 	bl	8041d54 <SX1276Write>
            if( datarate == 6 )
 8042b24:	2c06      	cmp	r4, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042b26:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
 8042b2a:	d114      	bne.n	8042b56 <SX1276SetTxConfig+0x21e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042b2c:	f7ff f962 	bl	8041df4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042b30:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042b34:	f041 0105 	orr.w	r1, r1, #5
 8042b38:	2031      	movs	r0, #49	; 0x31
 8042b3a:	f7ff f90b 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042b3e:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042b40:	2037      	movs	r0, #55	; 0x37
 8042b42:	e780      	b.n	8042a46 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042b44:	f1bb 0f08 	cmp.w	fp, #8
 8042b48:	d101      	bne.n	8042b4e <SX1276SetTxConfig+0x216>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8042b4a:	2c0c      	cmp	r4, #12
 8042b4c:	d0aa      	beq.n	8042aa4 <SX1276SetTxConfig+0x16c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8042b4e:	2300      	movs	r3, #0
 8042b50:	e7a9      	b.n	8042aa6 <SX1276SetTxConfig+0x16e>
                datarate = 6;
 8042b52:	2406      	movs	r4, #6
 8042b54:	e7fb      	b.n	8042b4e <SX1276SetTxConfig+0x216>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8042b56:	f7ff f94d 	bl	8041df4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8042b5a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8042b5e:	f041 0103 	orr.w	r1, r1, #3
 8042b62:	2031      	movs	r0, #49	; 0x31
 8042b64:	f7ff f8f6 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8042b68:	210a      	movs	r1, #10
 8042b6a:	e7e9      	b.n	8042b40 <SX1276SetTxConfig+0x208>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8042b6c:	f1b8 0f02 	cmp.w	r8, #2
 8042b70:	f04f 040c 	mov.w	r4, #12
 8042b74:	d0eb      	beq.n	8042b4e <SX1276SetTxConfig+0x216>
 8042b76:	e795      	b.n	8042aa4 <SX1276SetTxConfig+0x16c>
 8042b78:	00000000 	.word	0x00000000
 8042b7c:	404e8480 	.word	0x404e8480
 8042b80:	00000000 	.word	0x00000000
 8042b84:	417e8480 	.word	0x417e8480
 8042b88:	20002324 	.word	0x20002324
 8042b8c:	20003d00 	.word	0x20003d00

08042b90 <SX1276SetTxContinuousWave>:
{
 8042b90:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042b92:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8042b96:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8042b98:	4354      	muls	r4, r2
{
 8042b9a:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
 8042b9c:	f7ff f8e6 	bl	8041d6c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8042ba0:	2300      	movs	r3, #0
 8042ba2:	2205      	movs	r2, #5
 8042ba4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8042ba8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8042bac:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8042bb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8042bb4:	9303      	str	r3, [sp, #12]
 8042bb6:	4618      	mov	r0, r3
 8042bb8:	4629      	mov	r1, r5
 8042bba:	9200      	str	r2, [sp, #0]
 8042bbc:	9408      	str	r4, [sp, #32]
 8042bbe:	461a      	mov	r2, r3
 8042bc0:	f7ff feba 	bl	8042938 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8042bc4:	2031      	movs	r0, #49	; 0x31
 8042bc6:	f7ff f915 	bl	8041df4 <SX1276Read>
 8042bca:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8042bce:	2031      	movs	r0, #49	; 0x31
 8042bd0:	f7ff f8c0 	bl	8041d54 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042bd4:	4d0c      	ldr	r5, [pc, #48]	; (8042c08 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8042bd6:	21f0      	movs	r1, #240	; 0xf0
 8042bd8:	2040      	movs	r0, #64	; 0x40
 8042bda:	f7ff f8bb 	bl	8041d54 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8042bde:	21a0      	movs	r1, #160	; 0xa0
 8042be0:	2041      	movs	r0, #65	; 0x41
 8042be2:	f7ff f8b7 	bl	8041d54 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8042be6:	4621      	mov	r1, r4
 8042be8:	4628      	mov	r0, r5
 8042bea:	f00b fc39 	bl	804e460 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8042bee:	4b07      	ldr	r3, [pc, #28]	; (8042c0c <SX1276SetTxContinuousWave+0x7c>)
 8042bf0:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
 8042bf2:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8042bf4:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8042bf6:	f00b fb99 	bl	804e32c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042bfa:	2003      	movs	r0, #3
}
 8042bfc:	b00b      	add	sp, #44	; 0x2c
 8042bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8042c02:	f7ff baa5 	b.w	8042150 <SX1276SetOpMode>
 8042c06:	bf00      	nop
 8042c08:	20003cd0 	.word	0x20003cd0
 8042c0c:	20003d00 	.word	0x20003d00

08042c10 <SX1276OnDio2Irq>:
{
 8042c10:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042c12:	4c2b      	ldr	r4, [pc, #172]	; (8042cc0 <SX1276OnDio2Irq+0xb0>)
 8042c14:	7921      	ldrb	r1, [r4, #4]
 8042c16:	2901      	cmp	r1, #1
 8042c18:	d002      	beq.n	8042c20 <SX1276OnDio2Irq+0x10>
 8042c1a:	2902      	cmp	r1, #2
 8042c1c:	d048      	beq.n	8042cb0 <SX1276OnDio2Irq+0xa0>
}
 8042c1e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042c20:	7963      	ldrb	r3, [r4, #5]
 8042c22:	b1d3      	cbz	r3, 8042c5a <SX1276OnDio2Irq+0x4a>
 8042c24:	2b01      	cmp	r3, #1
 8042c26:	d1fa      	bne.n	8042c1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042c28:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042c2c:	2b00      	cmp	r3, #0
 8042c2e:	d0f6      	beq.n	8042c1e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042c30:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8042c32:	2012      	movs	r0, #18
 8042c34:	f7ff f88e 	bl	8041d54 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8042c38:	4b22      	ldr	r3, [pc, #136]	; (8042cc4 <SX1276OnDio2Irq+0xb4>)
 8042c3a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8042c3e:	2b00      	cmp	r3, #0
 8042c40:	d0ed      	beq.n	8042c1e <SX1276OnDio2Irq+0xe>
 8042c42:	695c      	ldr	r4, [r3, #20]
 8042c44:	2c00      	cmp	r4, #0
 8042c46:	d0ea      	beq.n	8042c1e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042c48:	201c      	movs	r0, #28
 8042c4a:	f7ff f8d3 	bl	8041df4 <SX1276Read>
 8042c4e:	4623      	mov	r3, r4
 8042c50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8042c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8042c58:	4718      	bx	r3
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8042c5a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8042c5e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8042c60:	2d01      	cmp	r5, #1
 8042c62:	d1dc      	bne.n	8042c1e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8042c64:	4818      	ldr	r0, [pc, #96]	; (8042cc8 <SX1276OnDio2Irq+0xb8>)
 8042c66:	f00b fbd3 	bl	804e410 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042c6a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8042c6c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8042c70:	f7ff f8c0 	bl	8041df4 <SX1276Read>
 8042c74:	0840      	lsrs	r0, r0, #1
 8042c76:	4240      	negs	r0, r0
 8042c78:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8042c7c:	201b      	movs	r0, #27
 8042c7e:	f7ff f8b9 	bl	8041df4 <SX1276Read>
 8042c82:	4605      	mov	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8042c84:	201c      	movs	r0, #28
 8042c86:	f7ff f8b5 	bl	8041df4 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8042c8a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8042c8e:	b2c2      	uxtb	r2, r0
 8042c90:	f643 5309 	movw	r3, #15625	; 0x3d09
 8042c94:	435a      	muls	r2, r3
 8042c96:	0a00      	lsrs	r0, r0, #8
 8042c98:	3280      	adds	r2, #128	; 0x80
 8042c9a:	4343      	muls	r3, r0
 8042c9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042ca0:	200c      	movs	r0, #12
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8042ca2:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8042ca4:	f7ff f8a6 	bl	8041df4 <SX1276Read>
 8042ca8:	0940      	lsrs	r0, r0, #5
 8042caa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8042cae:	e7b6      	b.n	8042c1e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8042cb0:	7963      	ldrb	r3, [r4, #5]
 8042cb2:	2b01      	cmp	r3, #1
 8042cb4:	d1b3      	bne.n	8042c1e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8042cb6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8042cba:	2b00      	cmp	r3, #0
 8042cbc:	d0af      	beq.n	8042c1e <SX1276OnDio2Irq+0xe>
 8042cbe:	e7b8      	b.n	8042c32 <SX1276OnDio2Irq+0x22>
 8042cc0:	20003d00 	.word	0x20003d00
 8042cc4:	20002324 	.word	0x20002324
 8042cc8:	20003ce8 	.word	0x20003ce8

08042ccc <SX1276OnDio3Irq>:
    switch( SX1276.Settings.Modem )
 8042ccc:	4b12      	ldr	r3, [pc, #72]	; (8042d18 <SX1276OnDio3Irq+0x4c>)
{
 8042cce:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8042cd0:	795d      	ldrb	r5, [r3, #5]
 8042cd2:	2d01      	cmp	r5, #1
 8042cd4:	d11e      	bne.n	8042d14 <SX1276OnDio3Irq+0x48>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8042cd6:	2012      	movs	r0, #18
 8042cd8:	f7ff f88c 	bl	8041df4 <SX1276Read>
 8042cdc:	f010 0601 	ands.w	r6, r0, #1
 8042ce0:	4c0e      	ldr	r4, [pc, #56]	; (8042d1c <SX1276OnDio3Irq+0x50>)
 8042ce2:	d00c      	beq.n	8042cfe <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8042ce4:	2105      	movs	r1, #5
 8042ce6:	2012      	movs	r0, #18
 8042ce8:	f7ff f834 	bl	8041d54 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042cec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8042cf0:	b183      	cbz	r3, 8042d14 <SX1276OnDio3Irq+0x48>
 8042cf2:	699b      	ldr	r3, [r3, #24]
 8042cf4:	b173      	cbz	r3, 8042d14 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( true );
 8042cf6:	4628      	mov	r0, r5
}
 8042cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
 8042cfc:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8042cfe:	2104      	movs	r1, #4
 8042d00:	2012      	movs	r0, #18
 8042d02:	f7ff f827 	bl	8041d54 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8042d06:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8042d0a:	b11b      	cbz	r3, 8042d14 <SX1276OnDio3Irq+0x48>
 8042d0c:	699b      	ldr	r3, [r3, #24]
 8042d0e:	b10b      	cbz	r3, 8042d14 <SX1276OnDio3Irq+0x48>
                RadioEvents->CadDone( false );
 8042d10:	4630      	mov	r0, r6
 8042d12:	e7f1      	b.n	8042cf8 <SX1276OnDio3Irq+0x2c>
}
 8042d14:	bd70      	pop	{r4, r5, r6, pc}
 8042d16:	bf00      	nop
 8042d18:	20003d00 	.word	0x20003d00
 8042d1c:	20002324 	.word	0x20002324

08042d20 <SX1276WriteFifo>:
    SX1276WriteBuffer( 0, buffer, size );
 8042d20:	460a      	mov	r2, r1
 8042d22:	4601      	mov	r1, r0
 8042d24:	2000      	movs	r0, #0
 8042d26:	f7fe bff5 	b.w	8041d14 <SX1276WriteBuffer>
	...

08042d2c <SX1276Send>:
{
 8042d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8042d2e:	4c39      	ldr	r4, [pc, #228]	; (8042e14 <SX1276Send+0xe8>)
{
 8042d30:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8042d34:	7963      	ldrb	r3, [r4, #5]
{
 8042d36:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
 8042d38:	b11b      	cbz	r3, 8042d42 <SX1276Send+0x16>
 8042d3a:	2b01      	cmp	r3, #1
 8042d3c:	d02f      	beq.n	8042d9e <SX1276Send+0x72>
    uint32_t txTimeout = 0;
 8042d3e:	2000      	movs	r0, #0
 8042d40:	e01d      	b.n	8042d7e <SX1276Send+0x52>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042d42:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if( SX1276.Settings.Fsk.FixLen == false )
 8042d44:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            SX1276.Settings.FskPacketHandler.Size = size;
 8042d48:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042d4c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8042d4e:	b9d3      	cbnz	r3, 8042d86 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8042d50:	2101      	movs	r1, #1
 8042d52:	f10d 0007 	add.w	r0, sp, #7
 8042d56:	f7ff ffe3 	bl	8042d20 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8042d5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8042d5e:	1e53      	subs	r3, r2, #1
 8042d60:	2b3f      	cmp	r3, #63	; 0x3f
 8042d62:	d814      	bhi.n	8042d8e <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8042d64:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8042d68:	4628      	mov	r0, r5
 8042d6a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8042d6e:	f7ff ffd7 	bl	8042d20 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042d72:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8042d74:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8042d78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8042d7a:	4413      	add	r3, r2
 8042d7c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8042d7e:	f7ff fb21 	bl	80423c4 <SX1276SetTx>
}
 8042d82:	b003      	add	sp, #12
 8042d84:	bd30      	pop	{r4, r5, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8042d86:	2032      	movs	r0, #50	; 0x32
 8042d88:	f7fe ffe4 	bl	8041d54 <SX1276Write>
 8042d8c:	e7e5      	b.n	8042d5a <SX1276Send+0x2e>
                memcpy1( RxTxBuffer, buffer, size );
 8042d8e:	4629      	mov	r1, r5
 8042d90:	4821      	ldr	r0, [pc, #132]	; (8042e18 <SX1276Send+0xec>)
 8042d92:	f00b fc2c 	bl	804e5ee <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8042d96:	2320      	movs	r3, #32
 8042d98:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8042d9c:	e7e4      	b.n	8042d68 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042d9e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042da2:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8042da4:	b35b      	cbz	r3, 8042dfe <SX1276Send+0xd2>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8042da6:	f7ff f825 	bl	8041df4 <SX1276Read>
 8042daa:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8042dae:	2033      	movs	r0, #51	; 0x33
 8042db0:	f7fe ffd0 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8042db4:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042db6:	203b      	movs	r0, #59	; 0x3b
 8042db8:	f7fe ffcc 	bl	8041d54 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8042dbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042dc0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8042dc4:	2022      	movs	r0, #34	; 0x22
 8042dc6:	f7fe ffc5 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8042dca:	2100      	movs	r1, #0
 8042dcc:	200e      	movs	r0, #14
 8042dce:	f7fe ffc1 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8042dd2:	2100      	movs	r1, #0
 8042dd4:	200d      	movs	r0, #13
 8042dd6:	f7fe ffbd 	bl	8041d54 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8042dda:	2001      	movs	r0, #1
 8042ddc:	f7ff f80a 	bl	8041df4 <SX1276Read>
 8042de0:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8042de4:	d104      	bne.n	8042df0 <SX1276Send+0xc4>
                SX1276SetStby( );
 8042de6:	f7ff f9d5 	bl	8042194 <SX1276SetStby>
                DelayMs( 1 );
 8042dea:	2001      	movs	r0, #1
 8042dec:	f00c fea2 	bl	804fb34 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8042df0:	4628      	mov	r0, r5
 8042df2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8042df6:	f7ff ff93 	bl	8042d20 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8042dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 8042dfc:	e7bf      	b.n	8042d7e <SX1276Send+0x52>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8042dfe:	f7fe fff9 	bl	8041df4 <SX1276Read>
 8042e02:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8042e06:	f041 0101 	orr.w	r1, r1, #1
 8042e0a:	2033      	movs	r0, #51	; 0x33
 8042e0c:	f7fe ffa2 	bl	8041d54 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8042e10:	211d      	movs	r1, #29
 8042e12:	e7d0      	b.n	8042db6 <SX1276Send+0x8a>
 8042e14:	20003d00 	.word	0x20003d00
 8042e18:	20002328 	.word	0x20002328

08042e1c <SX1276ReadFifo>:
    SX1276ReadBuffer( 0, buffer, size );
 8042e1c:	460a      	mov	r2, r1
 8042e1e:	4601      	mov	r1, r0
 8042e20:	2000      	movs	r0, #0
 8042e22:	f7fe bfc7 	b.w	8041db4 <SX1276ReadBuffer>
	...

08042e28 <SX1276OnDio0Irq>:
{
 8042e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8042e2a:	4e89      	ldr	r6, [pc, #548]	; (8043050 <SX1276OnDio0Irq+0x228>)
    volatile uint8_t irqFlags = 0;
 8042e2c:	2300      	movs	r3, #0
 8042e2e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8042e32:	7933      	ldrb	r3, [r6, #4]
 8042e34:	2b01      	cmp	r3, #1
 8042e36:	4634      	mov	r4, r6
 8042e38:	d004      	beq.n	8042e44 <SX1276OnDio0Irq+0x1c>
 8042e3a:	2b02      	cmp	r3, #2
 8042e3c:	f000 80f4 	beq.w	8043028 <SX1276OnDio0Irq+0x200>
}
 8042e40:	b002      	add	sp, #8
 8042e42:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8042e44:	7973      	ldrb	r3, [r6, #5]
 8042e46:	b33b      	cbz	r3, 8042e98 <SX1276OnDio0Irq+0x70>
 8042e48:	2b01      	cmp	r3, #1
 8042e4a:	d1f9      	bne.n	8042e40 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8042e4c:	2140      	movs	r1, #64	; 0x40
 8042e4e:	2012      	movs	r0, #18
 8042e50:	f7fe ff80 	bl	8041d54 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8042e54:	2012      	movs	r0, #18
 8042e56:	f7fe ffcd 	bl	8041df4 <SX1276Read>
 8042e5a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8042e5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8042e62:	4d7c      	ldr	r5, [pc, #496]	; (8043054 <SX1276OnDio0Irq+0x22c>)
 8042e64:	f013 0f20 	tst.w	r3, #32
 8042e68:	f000 808d 	beq.w	8042f86 <SX1276OnDio0Irq+0x15e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8042e6c:	2120      	movs	r1, #32
 8042e6e:	2012      	movs	r0, #18
 8042e70:	f7fe ff70 	bl	8041d54 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8042e74:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 8042e78:	b903      	cbnz	r3, 8042e7c <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8042e7a:	7133      	strb	r3, [r6, #4]
                        TimerStop( &RxTimeoutTimer );
 8042e7c:	4876      	ldr	r0, [pc, #472]	; (8043058 <SX1276OnDio0Irq+0x230>)
 8042e7e:	f00b fac7 	bl	804e410 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042e82:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042e86:	2b00      	cmp	r3, #0
 8042e88:	d0da      	beq.n	8042e40 <SX1276OnDio0Irq+0x18>
 8042e8a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8042e8c:	2b00      	cmp	r3, #0
 8042e8e:	d0d7      	beq.n	8042e40 <SX1276OnDio0Irq+0x18>
}
 8042e90:	b002      	add	sp, #8
 8042e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 8042e96:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
 8042e98:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8042e9c:	4d6d      	ldr	r5, [pc, #436]	; (8043054 <SX1276OnDio0Irq+0x22c>)
 8042e9e:	b393      	cbz	r3, 8042f06 <SX1276OnDio0Irq+0xde>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8042ea0:	203f      	movs	r0, #63	; 0x3f
 8042ea2:	f7fe ffa7 	bl	8041df4 <SX1276Read>
 8042ea6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8042eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8042eae:	079b      	lsls	r3, r3, #30
 8042eb0:	d429      	bmi.n	8042f06 <SX1276OnDio0Irq+0xde>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8042eb2:	210b      	movs	r1, #11
 8042eb4:	203e      	movs	r0, #62	; 0x3e
 8042eb6:	f7fe ff4d 	bl	8041d54 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8042eba:	2110      	movs	r1, #16
 8042ebc:	203f      	movs	r0, #63	; 0x3f
 8042ebe:	f7fe ff49 	bl	8041d54 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8042ec2:	4865      	ldr	r0, [pc, #404]	; (8043058 <SX1276OnDio0Irq+0x230>)
 8042ec4:	f00b faa4 	bl	804e410 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8042ec8:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
 8042ecc:	b976      	cbnz	r6, 8042eec <SX1276OnDio0Irq+0xc4>
                            TimerStop( &RxTimeoutSyncWord );
 8042ece:	4863      	ldr	r0, [pc, #396]	; (804305c <SX1276OnDio0Irq+0x234>)
 8042ed0:	f00b fa9e 	bl	804e410 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8042ed4:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8042ed6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042eda:	b113      	cbz	r3, 8042ee2 <SX1276OnDio0Irq+0xba>
 8042edc:	691b      	ldr	r3, [r3, #16]
 8042ede:	b103      	cbz	r3, 8042ee2 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 8042ee0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8042ee2:	2300      	movs	r3, #0
 8042ee4:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8042ee6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8042ee8:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8042eea:	e7a9      	b.n	8042e40 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042eec:	200d      	movs	r0, #13
 8042eee:	f7fe ff81 	bl	8041df4 <SX1276Read>
 8042ef2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042ef6:	b2c9      	uxtb	r1, r1
 8042ef8:	200d      	movs	r0, #13
 8042efa:	f7fe ff2b 	bl	8041d54 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8042efe:	4857      	ldr	r0, [pc, #348]	; (804305c <SX1276OnDio0Irq+0x234>)
 8042f00:	f00b fa14 	bl	804e32c <TimerStart>
 8042f04:	e7e7      	b.n	8042ed6 <SX1276OnDio0Irq+0xae>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8042f06:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8042f08:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8042f0a:	4e55      	ldr	r6, [pc, #340]	; (8043060 <SX1276OnDio0Irq+0x238>)
 8042f0c:	b951      	cbnz	r1, 8042f24 <SX1276OnDio0Irq+0xfc>
 8042f0e:	b948      	cbnz	r0, 8042f24 <SX1276OnDio0Irq+0xfc>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8042f10:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8042f14:	bb2b      	cbnz	r3, 8042f62 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8042f16:	2101      	movs	r1, #1
 8042f18:	4852      	ldr	r0, [pc, #328]	; (8043064 <SX1276OnDio0Irq+0x23c>)
 8042f1a:	f7ff ff7f 	bl	8042e1c <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042f1e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8042f20:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042f24:	1a09      	subs	r1, r1, r0
 8042f26:	b2c9      	uxtb	r1, r1
 8042f28:	4430      	add	r0, r6
 8042f2a:	f7ff ff77 	bl	8042e1c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042f2e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8042f30:	4849      	ldr	r0, [pc, #292]	; (8043058 <SX1276OnDio0Irq+0x230>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8042f32:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8042f34:	f00b fa6c 	bl	804e410 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8042f38:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8042f3c:	b9b3      	cbnz	r3, 8042f6c <SX1276OnDio0Irq+0x144>
                    TimerStop( &RxTimeoutSyncWord );
 8042f3e:	4847      	ldr	r0, [pc, #284]	; (804305c <SX1276OnDio0Irq+0x234>)
                    SX1276.Settings.State = RF_IDLE;
 8042f40:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8042f42:	f00b fa65 	bl	804e410 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8042f46:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042f4a:	2b00      	cmp	r3, #0
 8042f4c:	d0c9      	beq.n	8042ee2 <SX1276OnDio0Irq+0xba>
 8042f4e:	689d      	ldr	r5, [r3, #8]
 8042f50:	2d00      	cmp	r5, #0
 8042f52:	d0c6      	beq.n	8042ee2 <SX1276OnDio0Irq+0xba>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8042f54:	2300      	movs	r3, #0
 8042f56:	f994 2032 	ldrsb.w	r2, [r4, #50]	; 0x32
 8042f5a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8042f5c:	4840      	ldr	r0, [pc, #256]	; (8043060 <SX1276OnDio0Irq+0x238>)
 8042f5e:	47a8      	blx	r5
 8042f60:	e7bf      	b.n	8042ee2 <SX1276OnDio0Irq+0xba>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8042f62:	2032      	movs	r0, #50	; 0x32
 8042f64:	f7fe ff46 	bl	8041df4 <SX1276Read>
 8042f68:	8760      	strh	r0, [r4, #58]	; 0x3a
 8042f6a:	e7d8      	b.n	8042f1e <SX1276OnDio0Irq+0xf6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8042f6c:	200d      	movs	r0, #13
 8042f6e:	f7fe ff41 	bl	8041df4 <SX1276Read>
 8042f72:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8042f76:	b2c9      	uxtb	r1, r1
 8042f78:	200d      	movs	r0, #13
 8042f7a:	f7fe feeb 	bl	8041d54 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8042f7e:	4837      	ldr	r0, [pc, #220]	; (804305c <SX1276OnDio0Irq+0x234>)
 8042f80:	f00b f9d4 	bl	804e32c <TimerStart>
 8042f84:	e7df      	b.n	8042f46 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8042f86:	2019      	movs	r0, #25
 8042f88:	f7fe ff34 	bl	8041df4 <SX1276Read>
 8042f8c:	b240      	sxtb	r0, r0
 8042f8e:	3002      	adds	r0, #2
 8042f90:	1080      	asrs	r0, r0, #2
 8042f92:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8042f96:	201a      	movs	r0, #26
 8042f98:	f7fe ff2c 	bl	8041df4 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8042f9c:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8042fa0:	4931      	ldr	r1, [pc, #196]	; (8043068 <SX1276OnDio0Irq+0x240>)
 8042fa2:	f340 120b 	sbfx	r2, r0, #4, #12
 8042fa6:	2b00      	cmp	r3, #0
 8042fa8:	b292      	uxth	r2, r2
 8042faa:	b280      	uxth	r0, r0
 8042fac:	da36      	bge.n	804301c <SX1276OnDio0Irq+0x1f4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8042fae:	68b6      	ldr	r6, [r6, #8]
 8042fb0:	b29b      	uxth	r3, r3
 8042fb2:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8042fb4:	bf8c      	ite	hi
 8042fb6:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8042fb8:	3ba4      	subls	r3, #164	; 0xa4
 8042fba:	4418      	add	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8042fbc:	4410      	add	r0, r2
 8042fbe:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8042fc2:	2013      	movs	r0, #19
 8042fc4:	f7fe ff16 	bl	8041df4 <SX1276Read>
 8042fc8:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8042fcc:	2010      	movs	r0, #16
 8042fce:	f7fe ff11 	bl	8041df4 <SX1276Read>
 8042fd2:	4601      	mov	r1, r0
 8042fd4:	200d      	movs	r0, #13
 8042fd6:	f7fe febd 	bl	8041d54 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8042fda:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8042fde:	4820      	ldr	r0, [pc, #128]	; (8043060 <SX1276OnDio0Irq+0x238>)
 8042fe0:	f7ff ff1c 	bl	8042e1c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8042fe4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8042fe8:	b903      	cbnz	r3, 8042fec <SX1276OnDio0Irq+0x1c4>
                        SX1276.Settings.State = RF_IDLE;
 8042fea:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8042fec:	481a      	ldr	r0, [pc, #104]	; (8043058 <SX1276OnDio0Irq+0x230>)
 8042fee:	f00b fa0f 	bl	804e410 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8042ff2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8042ff6:	2b00      	cmp	r3, #0
 8042ff8:	f43f af22 	beq.w	8042e40 <SX1276OnDio0Irq+0x18>
 8042ffc:	689d      	ldr	r5, [r3, #8]
 8042ffe:	2d00      	cmp	r5, #0
 8043000:	f43f af1e 	beq.w	8042e40 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8043004:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8043008:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 804300c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8043010:	4813      	ldr	r0, [pc, #76]	; (8043060 <SX1276OnDio0Irq+0x238>)
 8043012:	46ac      	mov	ip, r5
}
 8043014:	b002      	add	sp, #8
 8043016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 804301a:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 804301c:	68b3      	ldr	r3, [r6, #8]
 804301e:	428b      	cmp	r3, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8043020:	bf8c      	ite	hi
 8043022:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8043024:	38a4      	subls	r0, #164	; 0xa4
 8043026:	e7c9      	b.n	8042fbc <SX1276OnDio0Irq+0x194>
            TimerStop( &TxTimeoutTimer );
 8043028:	4810      	ldr	r0, [pc, #64]	; (804306c <SX1276OnDio0Irq+0x244>)
 804302a:	f00b f9f1 	bl	804e410 <TimerStop>
            switch( SX1276.Settings.Modem )
 804302e:	7973      	ldrb	r3, [r6, #5]
 8043030:	2b01      	cmp	r3, #1
 8043032:	d103      	bne.n	804303c <SX1276OnDio0Irq+0x214>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8043034:	2108      	movs	r1, #8
 8043036:	2012      	movs	r0, #18
 8043038:	f7fe fe8c 	bl	8041d54 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 804303c:	2300      	movs	r3, #0
 804303e:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8043040:	4b04      	ldr	r3, [pc, #16]	; (8043054 <SX1276OnDio0Irq+0x22c>)
 8043042:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8043046:	2b00      	cmp	r3, #0
 8043048:	f43f aefa 	beq.w	8042e40 <SX1276OnDio0Irq+0x18>
 804304c:	681b      	ldr	r3, [r3, #0]
 804304e:	e71d      	b.n	8042e8c <SX1276OnDio0Irq+0x64>
 8043050:	20003d00 	.word	0x20003d00
 8043054:	20002324 	.word	0x20002324
 8043058:	20003d68 	.word	0x20003d68
 804305c:	20003ce8 	.word	0x20003ce8
 8043060:	20002328 	.word	0x20002328
 8043064:	20003d3a 	.word	0x20003d3a
 8043068:	1f4add40 	.word	0x1f4add40
 804306c:	20003cd0 	.word	0x20003cd0

08043070 <SX1276OnDio1Irq>:
{
 8043070:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8043072:	4c33      	ldr	r4, [pc, #204]	; (8043140 <SX1276OnDio1Irq+0xd0>)
 8043074:	7926      	ldrb	r6, [r4, #4]
 8043076:	2e01      	cmp	r6, #1
 8043078:	4625      	mov	r5, r4
 804307a:	d002      	beq.n	8043082 <SX1276OnDio1Irq+0x12>
 804307c:	2e02      	cmp	r6, #2
 804307e:	d045      	beq.n	804310c <SX1276OnDio1Irq+0x9c>
}
 8043080:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8043082:	7963      	ldrb	r3, [r4, #5]
 8043084:	b1ab      	cbz	r3, 80430b2 <SX1276OnDio1Irq+0x42>
 8043086:	2b01      	cmp	r3, #1
 8043088:	d1fa      	bne.n	8043080 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 804308a:	482e      	ldr	r0, [pc, #184]	; (8043144 <SX1276OnDio1Irq+0xd4>)
 804308c:	f00b f9c0 	bl	804e410 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8043090:	2180      	movs	r1, #128	; 0x80
 8043092:	2012      	movs	r0, #18
 8043094:	f7fe fe5e 	bl	8041d54 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8043098:	2300      	movs	r3, #0
 804309a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804309c:	4b2a      	ldr	r3, [pc, #168]	; (8043148 <SX1276OnDio1Irq+0xd8>)
 804309e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80430a2:	2b00      	cmp	r3, #0
 80430a4:	d0ec      	beq.n	8043080 <SX1276OnDio1Irq+0x10>
 80430a6:	68db      	ldr	r3, [r3, #12]
 80430a8:	2b00      	cmp	r3, #0
 80430aa:	d0e9      	beq.n	8043080 <SX1276OnDio1Irq+0x10>
}
 80430ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 80430b0:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 80430b2:	4826      	ldr	r0, [pc, #152]	; (804314c <SX1276OnDio1Irq+0xdc>)
 80430b4:	f00b f9ac 	bl	804e410 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80430b8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80430ba:	b94b      	cbnz	r3, 80430d0 <SX1276OnDio1Irq+0x60>
 80430bc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80430be:	b93b      	cbnz	r3, 80430d0 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80430c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80430c4:	b9c3      	cbnz	r3, 80430f8 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80430c6:	4631      	mov	r1, r6
 80430c8:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80430cc:	f7ff fea6 	bl	8042e1c <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80430d0:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 80430d2:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 80430d4:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80430d8:	481d      	ldr	r0, [pc, #116]	; (8043150 <SX1276OnDio1Irq+0xe0>)
 80430da:	1a89      	subs	r1, r1, r2
 80430dc:	4299      	cmp	r1, r3
 80430de:	4410      	add	r0, r2
 80430e0:	db0f      	blt.n	8043102 <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80430e2:	1e59      	subs	r1, r3, #1
 80430e4:	b2c9      	uxtb	r1, r1
 80430e6:	f7ff fe99 	bl	8042e1c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80430ea:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80430ec:	1e5a      	subs	r2, r3, #1
 80430ee:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80430f2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80430f4:	87ab      	strh	r3, [r5, #60]	; 0x3c
 80430f6:	e7c3      	b.n	8043080 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80430f8:	2032      	movs	r0, #50	; 0x32
 80430fa:	f7fe fe7b 	bl	8041df4 <SX1276Read>
 80430fe:	8760      	strh	r0, [r4, #58]	; 0x3a
 8043100:	e7e6      	b.n	80430d0 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043102:	b2c9      	uxtb	r1, r1
 8043104:	f7ff fe8a 	bl	8042e1c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043108:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 804310a:	e7f3      	b.n	80430f4 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 804310c:	7963      	ldrb	r3, [r4, #5]
 804310e:	2b00      	cmp	r3, #0
 8043110:	d1b6      	bne.n	8043080 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8043112:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8043114:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8043116:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 804311a:	480d      	ldr	r0, [pc, #52]	; (8043150 <SX1276OnDio1Irq+0xe0>)
 804311c:	1a9b      	subs	r3, r3, r2
 804311e:	428b      	cmp	r3, r1
 8043120:	4410      	add	r0, r2
 8043122:	dd07      	ble.n	8043134 <SX1276OnDio1Irq+0xc4>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8043124:	f7ff fdfc 	bl	8042d20 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8043128:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 804312c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 804312e:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8043130:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8043132:	e7a5      	b.n	8043080 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8043134:	b2d9      	uxtb	r1, r3
 8043136:	f7ff fdf3 	bl	8042d20 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 804313a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 804313c:	e7f8      	b.n	8043130 <SX1276OnDio1Irq+0xc0>
 804313e:	bf00      	nop
 8043140:	20003d00 	.word	0x20003d00
 8043144:	20003d68 	.word	0x20003d68
 8043148:	20002324 	.word	0x20002324
 804314c:	20003ce8 	.word	0x20003ce8
 8043150:	20002328 	.word	0x20002328

08043154 <SX1276SetMaxPayloadLength>:
{
 8043154:	b538      	push	{r3, r4, r5, lr}
 8043156:	4605      	mov	r5, r0
 8043158:	460c      	mov	r4, r1
    SX1276SetModem( modem );
 804315a:	f7ff f9a3 	bl	80424a4 <SX1276SetModem>
    switch( modem )
 804315e:	b115      	cbz	r5, 8043166 <SX1276SetMaxPayloadLength+0x12>
 8043160:	2d01      	cmp	r5, #1
 8043162:	d00b      	beq.n	804317c <SX1276SetMaxPayloadLength+0x28>
}
 8043164:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8043166:	4b07      	ldr	r3, [pc, #28]	; (8043184 <SX1276SetMaxPayloadLength+0x30>)
 8043168:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 804316c:	2b00      	cmp	r3, #0
 804316e:	d1f9      	bne.n	8043164 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8043170:	4621      	mov	r1, r4
 8043172:	2032      	movs	r0, #50	; 0x32
}
 8043174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8043178:	f7fe bdec 	b.w	8041d54 <SX1276Write>
 804317c:	4621      	mov	r1, r4
 804317e:	2023      	movs	r0, #35	; 0x23
 8043180:	e7f8      	b.n	8043174 <SX1276SetMaxPayloadLength+0x20>
 8043182:	bf00      	nop
 8043184:	20003d00 	.word	0x20003d00

08043188 <SX1276SetPublicNetwork>:
{
 8043188:	b510      	push	{r4, lr}
 804318a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 804318c:	2001      	movs	r0, #1
 804318e:	f7ff f989 	bl	80424a4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8043192:	4b06      	ldr	r3, [pc, #24]	; (80431ac <SX1276SetPublicNetwork+0x24>)
 8043194:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
    if( enable == true )
 8043198:	b12c      	cbz	r4, 80431a6 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 804319a:	2134      	movs	r1, #52	; 0x34
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 804319c:	2039      	movs	r0, #57	; 0x39
}
 804319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80431a2:	f7fe bdd7 	b.w	8041d54 <SX1276Write>
 80431a6:	2112      	movs	r1, #18
 80431a8:	e7f8      	b.n	804319c <SX1276SetPublicNetwork+0x14>
 80431aa:	bf00      	nop
 80431ac:	20003d00 	.word	0x20003d00

080431b0 <SX1276OnTimeoutIrq>:
{
 80431b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80431b2:	4c2c      	ldr	r4, [pc, #176]	; (8043264 <SX1276OnTimeoutIrq+0xb4>)
 80431b4:	7923      	ldrb	r3, [r4, #4]
 80431b6:	2b01      	cmp	r3, #1
 80431b8:	4625      	mov	r5, r4
 80431ba:	d002      	beq.n	80431c2 <SX1276OnTimeoutIrq+0x12>
 80431bc:	2b02      	cmp	r3, #2
 80431be:	d02c      	beq.n	804321a <SX1276OnTimeoutIrq+0x6a>
}
 80431c0:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80431c2:	7963      	ldrb	r3, [r4, #5]
 80431c4:	b9cb      	cbnz	r3, 80431fa <SX1276OnTimeoutIrq+0x4a>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80431c6:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80431c8:	210b      	movs	r1, #11
 80431ca:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80431cc:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80431ce:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80431d0:	f7fe fdc0 	bl	8041d54 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80431d4:	2110      	movs	r1, #16
 80431d6:	203f      	movs	r0, #63	; 0x3f
 80431d8:	f7fe fdbc 	bl	8041d54 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80431dc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80431e0:	b1b3      	cbz	r3, 8043210 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80431e2:	200d      	movs	r0, #13
 80431e4:	f7fe fe06 	bl	8041df4 <SX1276Read>
 80431e8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80431ec:	b2c9      	uxtb	r1, r1
 80431ee:	200d      	movs	r0, #13
 80431f0:	f7fe fdb0 	bl	8041d54 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80431f4:	481c      	ldr	r0, [pc, #112]	; (8043268 <SX1276OnTimeoutIrq+0xb8>)
 80431f6:	f00b f899 	bl	804e32c <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80431fa:	4b1c      	ldr	r3, [pc, #112]	; (804326c <SX1276OnTimeoutIrq+0xbc>)
 80431fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8043200:	2b00      	cmp	r3, #0
 8043202:	d0dd      	beq.n	80431c0 <SX1276OnTimeoutIrq+0x10>
 8043204:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8043206:	2b00      	cmp	r3, #0
 8043208:	d0da      	beq.n	80431c0 <SX1276OnTimeoutIrq+0x10>
}
 804320a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 804320e:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
 8043210:	4815      	ldr	r0, [pc, #84]	; (8043268 <SX1276OnTimeoutIrq+0xb8>)
                SX1276.Settings.State = RF_IDLE;
 8043212:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8043214:	f00b f8fc 	bl	804e410 <TimerStop>
 8043218:	e7ef      	b.n	80431fa <SX1276OnTimeoutIrq+0x4a>
        SX1276Reset( );
 804321a:	f7fe fd53 	bl	8041cc4 <SX1276Reset>
 804321e:	4c14      	ldr	r4, [pc, #80]	; (8043270 <SX1276OnTimeoutIrq+0xc0>)
        RxChainCalibration( );
 8043220:	f7fe fdf4 	bl	8041e0c <RxChainCalibration>
 8043224:	f7fe ff5e 	bl	80420e4 <SX1276SetOpMode.part.2>
 8043228:	f104 0630 	add.w	r6, r4, #48	; 0x30
            SX1276SetModem( RadioRegsInit[i].Modem );
 804322c:	7820      	ldrb	r0, [r4, #0]
 804322e:	f7ff f939 	bl	80424a4 <SX1276SetModem>
 8043232:	3403      	adds	r4, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8043234:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8043238:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 804323c:	f7fe fd8a 	bl	8041d54 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8043240:	42b4      	cmp	r4, r6
 8043242:	d1f3      	bne.n	804322c <SX1276OnTimeoutIrq+0x7c>
        SX1276SetModem( MODEM_FSK );
 8043244:	2000      	movs	r0, #0
 8043246:	f7ff f92d 	bl	80424a4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 804324a:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 804324e:	f7ff ff9b 	bl	8043188 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8043252:	2300      	movs	r3, #0
 8043254:	712b      	strb	r3, [r5, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8043256:	4b05      	ldr	r3, [pc, #20]	; (804326c <SX1276OnTimeoutIrq+0xbc>)
 8043258:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804325c:	2b00      	cmp	r3, #0
 804325e:	d0af      	beq.n	80431c0 <SX1276OnTimeoutIrq+0x10>
 8043260:	685b      	ldr	r3, [r3, #4]
 8043262:	e7d0      	b.n	8043206 <SX1276OnTimeoutIrq+0x56>
 8043264:	20003d00 	.word	0x20003d00
 8043268:	20003ce8 	.word	0x20003ce8
 804326c:	20002324 	.word	0x20002324
 8043270:	08052110 	.word	0x08052110

08043274 <SX1276GetWakeupTime>:
{
 8043274:	b508      	push	{r3, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8043276:	4b03      	ldr	r3, [pc, #12]	; (8043284 <SX1276GetWakeupTime+0x10>)
 8043278:	681b      	ldr	r3, [r3, #0]
 804327a:	685b      	ldr	r3, [r3, #4]
 804327c:	4798      	blx	r3
}
 804327e:	3002      	adds	r0, #2
 8043280:	bd08      	pop	{r3, pc}
 8043282:	bf00      	nop
 8043284:	20002324 	.word	0x20002324

08043288 <HAL_TIM_PeriodElapsedCallback>:
#include "station.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2)
 8043288:	6803      	ldr	r3, [r0, #0]
 804328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804328e:	d105      	bne.n	804329c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		//Timeouts
		flagsStation.pluviometer = 1;
 8043290:	4a09      	ldr	r2, [pc, #36]	; (80432b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8043292:	7813      	ldrb	r3, [r2, #0]
 8043294:	f043 0301 	orr.w	r3, r3, #1
	if (htim->Instance == TIM3)
	{
		// Quando estourar o timer de 5 segundos exporta o numero de ciclos
		count_velo = aux_count_velo;
		aux_count_velo = 0;
		flagsStation.read_sensors=1;
 8043298:	7013      	strb	r3, [r2, #0]
	}
}
 804329a:	4770      	bx	lr
	if (htim->Instance == TIM3)
 804329c:	4a07      	ldr	r2, [pc, #28]	; (80432bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 804329e:	4293      	cmp	r3, r2
 80432a0:	d1fb      	bne.n	804329a <HAL_TIM_PeriodElapsedCallback+0x12>
		count_velo = aux_count_velo;
 80432a2:	4b07      	ldr	r3, [pc, #28]	; (80432c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80432a4:	4a07      	ldr	r2, [pc, #28]	; (80432c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80432a6:	6819      	ldr	r1, [r3, #0]
 80432a8:	6011      	str	r1, [r2, #0]
		aux_count_velo = 0;
 80432aa:	2200      	movs	r2, #0
 80432ac:	601a      	str	r2, [r3, #0]
		flagsStation.read_sensors=1;
 80432ae:	4a02      	ldr	r2, [pc, #8]	; (80432b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80432b0:	7813      	ldrb	r3, [r2, #0]
 80432b2:	f043 0310 	orr.w	r3, r3, #16
 80432b6:	e7ef      	b.n	8043298 <HAL_TIM_PeriodElapsedCallback+0x10>
 80432b8:	20003c8c 	.word	0x20003c8c
 80432bc:	40000400 	.word	0x40000400
 80432c0:	2000231c 	.word	0x2000231c
 80432c4:	20002320 	.word	0x20002320

080432c8 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80432c8:	2000      	movs	r0, #0
 80432ca:	4770      	bx	lr

080432cc <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
}
 80432cc:	4770      	bx	lr

080432ce <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80432ce:	2001      	movs	r0, #1
 80432d0:	4770      	bx	lr
	...

080432d4 <SX1276IoInit>:
{
 80432d4:	b510      	push	{r4, lr}
 80432d6:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80432d8:	2214      	movs	r2, #20
 80432da:	2100      	movs	r1, #0
 80432dc:	a801      	add	r0, sp, #4
 80432de:	f00d fb30 	bl	8050942 <memset>
  SX1276BoardInit( &BoardCallbacks );
 80432e2:	4811      	ldr	r0, [pc, #68]	; (8043328 <SX1276IoInit+0x54>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80432e4:	4c11      	ldr	r4, [pc, #68]	; (804332c <SX1276IoInit+0x58>)
  SX1276BoardInit( &BoardCallbacks );
 80432e6:	f7fe fce1 	bl	8041cac <SX1276BoardInit>
  initStruct.Pull = GPIO_PULLDOWN;
 80432ea:	4a11      	ldr	r2, [pc, #68]	; (8043330 <SX1276IoInit+0x5c>)
 80432ec:	2302      	movs	r3, #2
 80432ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80432f2:	4620      	mov	r0, r4
  initStruct.Speed = GPIO_SPEED_HIGH;
 80432f4:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80432f6:	aa01      	add	r2, sp, #4
 80432f8:	f44f 7100 	mov.w	r1, #512	; 0x200
  initStruct.Speed = GPIO_SPEED_HIGH;
 80432fc:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80432fe:	f00b fbfd 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8043302:	aa01      	add	r2, sp, #4
 8043304:	4620      	mov	r0, r4
 8043306:	f44f 7180 	mov.w	r1, #256	; 0x100
 804330a:	f00b fbf7 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 804330e:	aa01      	add	r2, sp, #4
 8043310:	4620      	mov	r0, r4
 8043312:	2180      	movs	r1, #128	; 0x80
 8043314:	f00b fbf2 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8043318:	aa01      	add	r2, sp, #4
 804331a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 804331e:	4620      	mov	r0, r4
 8043320:	f00b fbec 	bl	804eafc <HW_GPIO_Init>
}
 8043324:	b006      	add	sp, #24
 8043326:	bd10      	pop	{r4, pc}
 8043328:	20001030 	.word	0x20001030
 804332c:	40021000 	.word	0x40021000
 8043330:	10110000 	.word	0x10110000

08043334 <SX1276IoDeInit>:
{
 8043334:	b510      	push	{r4, lr}
 8043336:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8043338:	2214      	movs	r2, #20
 804333a:	2100      	movs	r1, #0
 804333c:	a801      	add	r0, sp, #4
 804333e:	f00d fb00 	bl	8050942 <memset>
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8043342:	4c0f      	ldr	r4, [pc, #60]	; (8043380 <SX1276IoDeInit+0x4c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8043344:	4a0f      	ldr	r2, [pc, #60]	; (8043384 <SX1276IoDeInit+0x50>)
 8043346:	2302      	movs	r3, #2
 8043348:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 804334c:	4620      	mov	r0, r4
 804334e:	aa01      	add	r2, sp, #4
 8043350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8043354:	f00b fbd2 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8043358:	aa01      	add	r2, sp, #4
 804335a:	4620      	mov	r0, r4
 804335c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8043360:	f00b fbcc 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8043364:	aa01      	add	r2, sp, #4
 8043366:	4620      	mov	r0, r4
 8043368:	2180      	movs	r1, #128	; 0x80
 804336a:	f00b fbc7 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 804336e:	aa01      	add	r2, sp, #4
 8043370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8043374:	4620      	mov	r0, r4
 8043376:	f00b fbc1 	bl	804eafc <HW_GPIO_Init>
}
 804337a:	b006      	add	sp, #24
 804337c:	bd10      	pop	{r4, pc}
 804337e:	bf00      	nop
 8043380:	40021000 	.word	0x40021000
 8043384:	10110000 	.word	0x10110000

08043388 <SX1276IoIrqInit>:
{
 8043388:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 804338a:	4c0f      	ldr	r4, [pc, #60]	; (80433c8 <SX1276IoIrqInit+0x40>)
 804338c:	6803      	ldr	r3, [r0, #0]
{
 804338e:	4605      	mov	r5, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8043390:	2200      	movs	r2, #0
 8043392:	4620      	mov	r0, r4
 8043394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8043398:	f00b fc0a 	bl	804ebb0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 804339c:	686b      	ldr	r3, [r5, #4]
 804339e:	4620      	mov	r0, r4
 80433a0:	2200      	movs	r2, #0
 80433a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80433a6:	f00b fc03 	bl	804ebb0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80433aa:	68ab      	ldr	r3, [r5, #8]
 80433ac:	4620      	mov	r0, r4
 80433ae:	2200      	movs	r2, #0
 80433b0:	2180      	movs	r1, #128	; 0x80
 80433b2:	f00b fbfd 	bl	804ebb0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80433b6:	68eb      	ldr	r3, [r5, #12]
 80433b8:	4620      	mov	r0, r4
 80433ba:	2200      	movs	r2, #0
 80433bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 80433c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80433c4:	f00b bbf4 	b.w	804ebb0 <HW_GPIO_SetIrq>
 80433c8:	40021000 	.word	0x40021000

080433cc <SX1276SetRfTxPower>:
{
 80433cc:	b570      	push	{r4, r5, r6, lr}
 80433ce:	4606      	mov	r6, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80433d0:	2009      	movs	r0, #9
 80433d2:	f7fe fd0f 	bl	8041df4 <SX1276Read>
 80433d6:	4604      	mov	r4, r0
    paDac = SX1276Read( REG_PADAC );
 80433d8:	204d      	movs	r0, #77	; 0x4d
 80433da:	f7fe fd0b 	bl	8041df4 <SX1276Read>
        if( power > 17 )
 80433de:	2e11      	cmp	r6, #17
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80433e0:	bfcb      	itete	gt
 80433e2:	f040 0507 	orrgt.w	r5, r0, #7
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80433e6:	f000 05f8 	andle.w	r5, r0, #248	; 0xf8
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80433ea:	b2ed      	uxtbgt	r5, r5
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80433ec:	f045 0504 	orrle.w	r5, r5, #4
    paConfig |= RF_PACONFIG_PASELECT_PABOOST;
 80433f0:	f064 047f 	orn	r4, r4, #127	; 0x7f
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80433f4:	f005 0307 	and.w	r3, r5, #7
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80433f8:	b264      	sxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80433fa:	2b07      	cmp	r3, #7
 80433fc:	f024 040f 	bic.w	r4, r4, #15
 8043400:	d115      	bne.n	804342e <SX1276SetRfTxPower+0x62>
            if( power < 5 )
 8043402:	2e04      	cmp	r6, #4
 8043404:	dd11      	ble.n	804342a <SX1276SetRfTxPower+0x5e>
            if( power > 20 )
 8043406:	2e14      	cmp	r6, #20
 8043408:	dd03      	ble.n	8043412 <SX1276SetRfTxPower+0x46>
            	PRINTF("Full Power 20\r\n");
 804340a:	480d      	ldr	r0, [pc, #52]	; (8043440 <SX1276SetRfTxPower+0x74>)
 804340c:	f00b f88a 	bl	804e524 <TraceSend>
                power = 20;
 8043410:	2614      	movs	r6, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8043412:	1f71      	subs	r1, r6, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8043414:	430c      	orrs	r4, r1
 8043416:	b2e1      	uxtb	r1, r4
    SX1276Write( REG_PACONFIG, paConfig );
 8043418:	2009      	movs	r0, #9
 804341a:	f7fe fc9b 	bl	8041d54 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 804341e:	4629      	mov	r1, r5
 8043420:	204d      	movs	r0, #77	; 0x4d
}
 8043422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276Write( REG_PADAC, paDac );
 8043426:	f7fe bc95 	b.w	8041d54 <SX1276Write>
                power = 5;
 804342a:	2605      	movs	r6, #5
 804342c:	e7f1      	b.n	8043412 <SX1276SetRfTxPower+0x46>
 804342e:	2e11      	cmp	r6, #17
 8043430:	bfa8      	it	ge
 8043432:	2611      	movge	r6, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8043434:	2e02      	cmp	r6, #2
 8043436:	bfb8      	it	lt
 8043438:	2602      	movlt	r6, #2
 804343a:	1eb1      	subs	r1, r6, #2
 804343c:	e7ea      	b.n	8043414 <SX1276SetRfTxPower+0x48>
 804343e:	bf00      	nop
 8043440:	08052667 	.word	0x08052667

08043444 <SX1276SetAntSwLowPower>:
{
 8043444:	b510      	push	{r4, lr}
    if( RadioIsActive != status )
 8043446:	4b14      	ldr	r3, [pc, #80]	; (8043498 <SX1276SetAntSwLowPower+0x54>)
 8043448:	781a      	ldrb	r2, [r3, #0]
 804344a:	4282      	cmp	r2, r0
{
 804344c:	b086      	sub	sp, #24
    if( RadioIsActive != status )
 804344e:	d017      	beq.n	8043480 <SX1276SetAntSwLowPower+0x3c>
        RadioIsActive = status;
 8043450:	7018      	strb	r0, [r3, #0]
  GPIO_InitTypeDef initStruct={0};
 8043452:	2214      	movs	r2, #20
        if( status == false )
 8043454:	b9b0      	cbnz	r0, 8043484 <SX1276SetAntSwLowPower+0x40>
  GPIO_InitTypeDef initStruct={0};
 8043456:	4601      	mov	r1, r0
 8043458:	a801      	add	r0, sp, #4
 804345a:	f00d fa72 	bl	8050942 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 804345e:	2301      	movs	r3, #1
 8043460:	9302      	str	r3, [sp, #8]
  PRINTF("Antenna Init\r\n");
 8043462:	480e      	ldr	r0, [pc, #56]	; (804349c <SX1276SetAntSwLowPower+0x58>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 8043464:	2303      	movs	r3, #3
 8043466:	9304      	str	r3, [sp, #16]
  PRINTF("Antenna Init\r\n");
 8043468:	f00b f85c 	bl	804e524 <TraceSend>
  HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct ); 
 804346c:	aa01      	add	r2, sp, #4
 804346e:	2102      	movs	r1, #2
 8043470:	480b      	ldr	r0, [pc, #44]	; (80434a0 <SX1276SetAntSwLowPower+0x5c>)
 8043472:	f00b fb43 	bl	804eafc <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 8043476:	2200      	movs	r2, #0
 8043478:	2102      	movs	r1, #2
 804347a:	4809      	ldr	r0, [pc, #36]	; (80434a0 <SX1276SetAntSwLowPower+0x5c>)
 804347c:	f00b fbc0 	bl	804ec00 <HW_GPIO_Write>
}
 8043480:	b006      	add	sp, #24
 8043482:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8043484:	2100      	movs	r1, #0
 8043486:	a801      	add	r0, sp, #4
 8043488:	f00d fa5b 	bl	8050942 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP ;
 804348c:	2301      	movs	r3, #1
 804348e:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8043490:	2303      	movs	r3, #3
 8043492:	9304      	str	r3, [sp, #16]
 8043494:	e7ea      	b.n	804346c <SX1276SetAntSwLowPower+0x28>
 8043496:	bf00      	nop
 8043498:	2000242c 	.word	0x2000242c
 804349c:	08052677 	.word	0x08052677
 80434a0:	40020800 	.word	0x40020800

080434a4 <SX1276SetAntSw>:
{
 80434a4:	b510      	push	{r4, lr}
	PRINTF("opMode = %d\r\n", opMode);
 80434a6:	4601      	mov	r1, r0
{
 80434a8:	4604      	mov	r4, r0
	PRINTF("opMode = %d\r\n", opMode);
 80434aa:	4806      	ldr	r0, [pc, #24]	; (80434c4 <SX1276SetAntSw+0x20>)
 80434ac:	f00b f83a 	bl	804e524 <TraceSend>
    switch( opMode )
 80434b0:	2c03      	cmp	r4, #3
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 80434b2:	bf0c      	ite	eq
 80434b4:	2201      	moveq	r2, #1
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80434b6:	2200      	movne	r2, #0
 80434b8:	2102      	movs	r1, #2
 80434ba:	4803      	ldr	r0, [pc, #12]	; (80434c8 <SX1276SetAntSw+0x24>)
}
 80434bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 80434c0:	f00b bb9e 	b.w	804ec00 <HW_GPIO_Write>
 80434c4:	08052686 	.word	0x08052686
 80434c8:	40020800 	.word	0x40020800

080434cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80434cc:	490e      	ldr	r1, [pc, #56]	; (8043508 <SystemInit+0x3c>)
 80434ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80434d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80434d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80434da:	4b0c      	ldr	r3, [pc, #48]	; (804350c <SystemInit+0x40>)
 80434dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80434de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80434e0:	f042 0201 	orr.w	r2, r2, #1
 80434e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80434e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80434e8:	681a      	ldr	r2, [r3, #0]
 80434ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80434ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80434f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80434f4:	4a06      	ldr	r2, [pc, #24]	; (8043510 <SystemInit+0x44>)
 80434f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80434f8:	681a      	ldr	r2, [r3, #0]
 80434fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80434fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8043500:	60d8      	str	r0, [r3, #12]
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  SCB->VTOR = INTVECT_START;
 8043502:	4b04      	ldr	r3, [pc, #16]	; (8043514 <SystemInit+0x48>)
 8043504:	608b      	str	r3, [r1, #8]
}
 8043506:	4770      	bx	lr
 8043508:	e000ed00 	.word	0xe000ed00
 804350c:	40023800 	.word	0x40023800
 8043510:	24003010 	.word	0x24003010
 8043514:	08040200 	.word	0x08040200

08043518 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8043518:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 804351a:	4613      	mov	r3, r2
 804351c:	460a      	mov	r2, r1
 804351e:	4601      	mov	r1, r0
 8043520:	4803      	ldr	r0, [pc, #12]	; (8043530 <BSP_SD_ReadBlocks_DMA+0x18>)
 8043522:	f002 fbb9 	bl	8045c98 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8043526:	3000      	adds	r0, #0
 8043528:	bf18      	it	ne
 804352a:	2001      	movne	r0, #1
 804352c:	bd08      	pop	{r3, pc}
 804352e:	bf00      	nop
 8043530:	20006074 	.word	0x20006074

08043534 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8043534:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8043536:	4613      	mov	r3, r2
 8043538:	460a      	mov	r2, r1
 804353a:	4601      	mov	r1, r0
 804353c:	4803      	ldr	r0, [pc, #12]	; (804354c <BSP_SD_WriteBlocks_DMA+0x18>)
 804353e:	f002 fc41 	bl	8045dc4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8043542:	3000      	adds	r0, #0
 8043544:	bf18      	it	ne
 8043546:	2001      	movne	r0, #1
 8043548:	bd08      	pop	{r3, pc}
 804354a:	bf00      	nop
 804354c:	20006074 	.word	0x20006074

08043550 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8043550:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8043552:	4803      	ldr	r0, [pc, #12]	; (8043560 <BSP_SD_GetCardState+0x10>)
 8043554:	f002 ff4c 	bl	80463f0 <HAL_SD_GetCardState>
}
 8043558:	3804      	subs	r0, #4
 804355a:	bf18      	it	ne
 804355c:	2001      	movne	r0, #1
 804355e:	bd08      	pop	{r3, pc}
 8043560:	20006074 	.word	0x20006074

08043564 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8043564:	4601      	mov	r1, r0
 8043566:	4801      	ldr	r0, [pc, #4]	; (804356c <BSP_SD_GetCardInfo+0x8>)
 8043568:	f002 beab 	b.w	80462c2 <HAL_SD_GetCardInfo>
 804356c:	20006074 	.word	0x20006074

08043570 <BSP_SD_AbortCallback>:
 8043570:	4770      	bx	lr

08043572 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8043572:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8043574:	f7ff fffc 	bl	8043570 <BSP_SD_AbortCallback>
}
 8043578:	bd08      	pop	{r3, pc}

0804357a <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 804357a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 804357c:	f000 f90a 	bl	8043794 <BSP_SD_WriteCpltCallback>
}
 8043580:	bd08      	pop	{r3, pc}

08043582 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8043582:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8043584:	f000 f90c 	bl	80437a0 <BSP_SD_ReadCpltCallback>
}
 8043588:	bd08      	pop	{r3, pc}

0804358a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 804358a:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 804358c:	2301      	movs	r3, #1
 804358e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8043592:	f000 f82d 	bl	80435f0 <BSP_PlatformIsDetected>
 8043596:	b908      	cbnz	r0, 804359c <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8043598:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 804359c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80435a0:	b003      	add	sp, #12
 80435a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080435a8 <BSP_SD_Init>:
{
 80435a8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80435aa:	f7ff ffee 	bl	804358a <BSP_SD_IsDetected>
 80435ae:	2801      	cmp	r0, #1
 80435b0:	d10c      	bne.n	80435cc <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd);
 80435b2:	4807      	ldr	r0, [pc, #28]	; (80435d0 <BSP_SD_Init+0x28>)
 80435b4:	f002 fe6a 	bl	804628c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80435b8:	b938      	cbnz	r0, 80435ca <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80435ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80435be:	4804      	ldr	r0, [pc, #16]	; (80435d0 <BSP_SD_Init+0x28>)
 80435c0:	f002 fe92 	bl	80462e8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 80435c4:	3000      	adds	r0, #0
 80435c6:	bf18      	it	ne
 80435c8:	2001      	movne	r0, #1
}
 80435ca:	bd08      	pop	{r3, pc}
    return MSD_ERROR;
 80435cc:	2001      	movs	r0, #1
 80435ce:	e7fc      	b.n	80435ca <BSP_SD_Init+0x22>
 80435d0:	20006074 	.word	0x20006074

080435d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80435d4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80435d6:	4903      	ldr	r1, [pc, #12]	; (80435e4 <MX_FATFS_Init+0x10>)
 80435d8:	4803      	ldr	r0, [pc, #12]	; (80435e8 <MX_FATFS_Init+0x14>)
 80435da:	f004 fe29 	bl	8048230 <FATFS_LinkDriver>
 80435de:	4b03      	ldr	r3, [pc, #12]	; (80435ec <MX_FATFS_Init+0x18>)
 80435e0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80435e2:	bd08      	pop	{r3, pc}
 80435e4:	20003d81 	.word	0x20003d81
 80435e8:	080521cc 	.word	0x080521cc
 80435ec:	20003d80 	.word	0x20003d80

080435f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80435f0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80435f2:	2180      	movs	r1, #128	; 0x80
 80435f4:	4803      	ldr	r0, [pc, #12]	; (8043604 <BSP_PlatformIsDetected+0x14>)
 80435f6:	f001 f89d 	bl	8044734 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80435fa:	fab0 f080 	clz	r0, r0
 80435fe:	0940      	lsrs	r0, r0, #5
 8043600:	bd08      	pop	{r3, pc}
 8043602:	bf00      	nop
 8043604:	40020800 	.word	0x40020800

08043608 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8043608:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 804360a:	4c06      	ldr	r4, [pc, #24]	; (8043624 <SD_CheckStatus.isra.0+0x1c>)
 804360c:	2301      	movs	r3, #1
 804360e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8043610:	f7ff ff9e 	bl	8043550 <BSP_SD_GetCardState>
 8043614:	4623      	mov	r3, r4
 8043616:	b918      	cbnz	r0, 8043620 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8043618:	7822      	ldrb	r2, [r4, #0]
 804361a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 804361e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8043620:	7818      	ldrb	r0, [r3, #0]
}
 8043622:	bd10      	pop	{r4, pc}
 8043624:	2000104c 	.word	0x2000104c

08043628 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8043628:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 804362a:	f7ff ffbd 	bl	80435a8 <BSP_SD_Init>
 804362e:	4c03      	ldr	r4, [pc, #12]	; (804363c <SD_initialize+0x14>)
 8043630:	b910      	cbnz	r0, 8043638 <SD_initialize+0x10>
  {
    Stat = SD_CheckStatus(lun);
 8043632:	f7ff ffe9 	bl	8043608 <SD_CheckStatus.isra.0>
 8043636:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8043638:	7820      	ldrb	r0, [r4, #0]
}
 804363a:	bd10      	pop	{r4, pc}
 804363c:	2000104c 	.word	0x2000104c

08043640 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8043640:	f7ff bfe2 	b.w	8043608 <SD_CheckStatus.isra.0>

08043644 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8043644:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8043646:	4b12      	ldr	r3, [pc, #72]	; (8043690 <SD_ioctl+0x4c>)
 8043648:	781b      	ldrb	r3, [r3, #0]
 804364a:	07db      	lsls	r3, r3, #31
{
 804364c:	b088      	sub	sp, #32
 804364e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8043650:	d41b      	bmi.n	804368a <SD_ioctl+0x46>

  switch (cmd)
 8043652:	2903      	cmp	r1, #3
 8043654:	d803      	bhi.n	804365e <SD_ioctl+0x1a>
 8043656:	e8df f001 	tbb	[pc, r1]
 804365a:	0510      	.short	0x0510
 804365c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 804365e:	2004      	movs	r0, #4
  }

  return res;
}
 8043660:	b008      	add	sp, #32
 8043662:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8043664:	4668      	mov	r0, sp
 8043666:	f7ff ff7d 	bl	8043564 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 804366a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 804366c:	6023      	str	r3, [r4, #0]
 804366e:	e004      	b.n	804367a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8043670:	4668      	mov	r0, sp
 8043672:	f7ff ff77 	bl	8043564 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8043676:	9b07      	ldr	r3, [sp, #28]
 8043678:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 804367a:	2000      	movs	r0, #0
 804367c:	e7f0      	b.n	8043660 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 804367e:	4668      	mov	r0, sp
 8043680:	f7ff ff70 	bl	8043564 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8043684:	9b07      	ldr	r3, [sp, #28]
 8043686:	0a5b      	lsrs	r3, r3, #9
 8043688:	e7f0      	b.n	804366c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 804368a:	2003      	movs	r0, #3
 804368c:	e7e8      	b.n	8043660 <SD_ioctl+0x1c>
 804368e:	bf00      	nop
 8043690:	2000104c 	.word	0x2000104c

08043694 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8043694:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = HAL_GetTick();
 8043696:	f000 f8af 	bl	80437f8 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 804369a:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = HAL_GetTick();
 804369e:	4605      	mov	r5, r0
  while(HAL_GetTick() - timer < timeout)
 80436a0:	f000 f8aa 	bl	80437f8 <HAL_GetTick>
 80436a4:	1b40      	subs	r0, r0, r5
 80436a6:	42a0      	cmp	r0, r4
 80436a8:	d902      	bls.n	80436b0 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 80436aa:	f04f 30ff 	mov.w	r0, #4294967295
 80436ae:	e003      	b.n	80436b8 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80436b0:	f7ff ff4e 	bl	8043550 <BSP_SD_GetCardState>
 80436b4:	2800      	cmp	r0, #0
 80436b6:	d1f3      	bne.n	80436a0 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 80436b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080436bc <SD_write>:
{
 80436bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   WriteStatus = 0;
 80436be:	4c19      	ldr	r4, [pc, #100]	; (8043724 <SD_write+0x68>)
{
 80436c0:	461f      	mov	r7, r3
   WriteStatus = 0;
 80436c2:	2300      	movs	r3, #0
{
 80436c4:	460d      	mov	r5, r1
 80436c6:	4616      	mov	r6, r2
   WriteStatus = 0;
 80436c8:	6023      	str	r3, [r4, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80436ca:	f7ff ffe3 	bl	8043694 <SD_CheckStatusWithTimeout.constprop.4>
 80436ce:	2800      	cmp	r0, #0
 80436d0:	da01      	bge.n	80436d6 <SD_write+0x1a>
    return res;
 80436d2:	2001      	movs	r0, #1
}
 80436d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80436d6:	463a      	mov	r2, r7
 80436d8:	4631      	mov	r1, r6
 80436da:	4628      	mov	r0, r5
 80436dc:	f7ff ff2a 	bl	8043534 <BSP_SD_WriteBlocks_DMA>
 80436e0:	2800      	cmp	r0, #0
 80436e2:	d1f6      	bne.n	80436d2 <SD_write+0x16>
      timeout = HAL_GetTick();
 80436e4:	f000 f888 	bl	80437f8 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80436e8:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 80436ec:	4606      	mov	r6, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80436ee:	6823      	ldr	r3, [r4, #0]
 80436f0:	b923      	cbnz	r3, 80436fc <SD_write+0x40>
 80436f2:	f000 f881 	bl	80437f8 <HAL_GetTick>
 80436f6:	1b80      	subs	r0, r0, r6
 80436f8:	42a8      	cmp	r0, r5
 80436fa:	d9f8      	bls.n	80436ee <SD_write+0x32>
      if (WriteStatus == 0)
 80436fc:	6823      	ldr	r3, [r4, #0]
 80436fe:	2b00      	cmp	r3, #0
 8043700:	d0e7      	beq.n	80436d2 <SD_write+0x16>
        WriteStatus = 0;
 8043702:	2300      	movs	r3, #0
 8043704:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 8043706:	f000 f877 	bl	80437f8 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 804370a:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 804370e:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8043710:	f000 f872 	bl	80437f8 <HAL_GetTick>
 8043714:	1b40      	subs	r0, r0, r5
 8043716:	42a0      	cmp	r0, r4
 8043718:	d8db      	bhi.n	80436d2 <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 804371a:	f7ff ff19 	bl	8043550 <BSP_SD_GetCardState>
 804371e:	2800      	cmp	r0, #0
 8043720:	d1f6      	bne.n	8043710 <SD_write+0x54>
 8043722:	e7d7      	b.n	80436d4 <SD_write+0x18>
 8043724:	20002430 	.word	0x20002430

08043728 <SD_read>:
{
 8043728:	b570      	push	{r4, r5, r6, lr}
 804372a:	460c      	mov	r4, r1
 804372c:	4615      	mov	r5, r2
 804372e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8043730:	f7ff ffb0 	bl	8043694 <SD_CheckStatusWithTimeout.constprop.4>
 8043734:	2800      	cmp	r0, #0
 8043736:	da01      	bge.n	804373c <SD_read+0x14>
    return res;
 8043738:	2001      	movs	r0, #1
}
 804373a:	bd70      	pop	{r4, r5, r6, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 804373c:	4632      	mov	r2, r6
 804373e:	4629      	mov	r1, r5
 8043740:	4620      	mov	r0, r4
 8043742:	f7ff fee9 	bl	8043518 <BSP_SD_ReadBlocks_DMA>
 8043746:	2800      	cmp	r0, #0
 8043748:	d1f6      	bne.n	8043738 <SD_read+0x10>
      ReadStatus = 0;
 804374a:	4c11      	ldr	r4, [pc, #68]	; (8043790 <SD_read+0x68>)
 804374c:	6060      	str	r0, [r4, #4]
      timeout = HAL_GetTick();
 804374e:	f000 f853 	bl	80437f8 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8043752:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8043756:	4606      	mov	r6, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8043758:	6863      	ldr	r3, [r4, #4]
 804375a:	b923      	cbnz	r3, 8043766 <SD_read+0x3e>
 804375c:	f000 f84c 	bl	80437f8 <HAL_GetTick>
 8043760:	1b80      	subs	r0, r0, r6
 8043762:	42a8      	cmp	r0, r5
 8043764:	d9f8      	bls.n	8043758 <SD_read+0x30>
      if (ReadStatus == 0)
 8043766:	6863      	ldr	r3, [r4, #4]
 8043768:	2b00      	cmp	r3, #0
 804376a:	d0e5      	beq.n	8043738 <SD_read+0x10>
        ReadStatus = 0;
 804376c:	2300      	movs	r3, #0
 804376e:	6063      	str	r3, [r4, #4]
        timeout = HAL_GetTick();
 8043770:	f000 f842 	bl	80437f8 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8043774:	f247 542f 	movw	r4, #29999	; 0x752f
        timeout = HAL_GetTick();
 8043778:	4605      	mov	r5, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 804377a:	f000 f83d 	bl	80437f8 <HAL_GetTick>
 804377e:	1b40      	subs	r0, r0, r5
 8043780:	42a0      	cmp	r0, r4
 8043782:	d8d9      	bhi.n	8043738 <SD_read+0x10>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8043784:	f7ff fee4 	bl	8043550 <BSP_SD_GetCardState>
 8043788:	2800      	cmp	r0, #0
 804378a:	d1f6      	bne.n	804377a <SD_read+0x52>
 804378c:	e7d5      	b.n	804373a <SD_read+0x12>
 804378e:	bf00      	nop
 8043790:	20002430 	.word	0x20002430

08043794 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8043794:	4b01      	ldr	r3, [pc, #4]	; (804379c <BSP_SD_WriteCpltCallback+0x8>)
 8043796:	2201      	movs	r2, #1
 8043798:	601a      	str	r2, [r3, #0]
}
 804379a:	4770      	bx	lr
 804379c:	20002430 	.word	0x20002430

080437a0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80437a0:	4b01      	ldr	r3, [pc, #4]	; (80437a8 <BSP_SD_ReadCpltCallback+0x8>)
 80437a2:	2201      	movs	r2, #1
 80437a4:	605a      	str	r2, [r3, #4]
}
 80437a6:	4770      	bx	lr
 80437a8:	20002430 	.word	0x20002430

080437ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80437ac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80437ae:	4b0b      	ldr	r3, [pc, #44]	; (80437dc <HAL_Init+0x30>)
 80437b0:	681a      	ldr	r2, [r3, #0]
 80437b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80437b6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80437b8:	681a      	ldr	r2, [r3, #0]
 80437ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80437be:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80437c0:	681a      	ldr	r2, [r3, #0]
 80437c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80437c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80437c8:	2003      	movs	r0, #3
 80437ca:	f000 fa39 	bl	8043c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80437ce:	2000      	movs	r0, #0
 80437d0:	f00c f9ae 	bl	804fb30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80437d4:	f00c f9b4 	bl	804fb40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80437d8:	2000      	movs	r0, #0
 80437da:	bd08      	pop	{r3, pc}
 80437dc:	40023c00 	.word	0x40023c00

080437e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80437e0:	4a03      	ldr	r2, [pc, #12]	; (80437f0 <HAL_IncTick+0x10>)
 80437e2:	4b04      	ldr	r3, [pc, #16]	; (80437f4 <HAL_IncTick+0x14>)
 80437e4:	6811      	ldr	r1, [r2, #0]
 80437e6:	781b      	ldrb	r3, [r3, #0]
 80437e8:	440b      	add	r3, r1
 80437ea:	6013      	str	r3, [r2, #0]
}
 80437ec:	4770      	bx	lr
 80437ee:	bf00      	nop
 80437f0:	20005df0 	.word	0x20005df0
 80437f4:	20001050 	.word	0x20001050

080437f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80437f8:	4b01      	ldr	r3, [pc, #4]	; (8043800 <HAL_GetTick+0x8>)
 80437fa:	6818      	ldr	r0, [r3, #0]
}
 80437fc:	4770      	bx	lr
 80437fe:	bf00      	nop
 8043800:	20005df0 	.word	0x20005df0

08043804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8043804:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8043806:	4604      	mov	r4, r0
 8043808:	2800      	cmp	r0, #0
 804380a:	f000 809b 	beq.w	8043944 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 804380e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8043810:	b925      	cbnz	r5, 804381c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8043812:	f00c f8af 	bl	804f974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8043816:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8043818:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 804381c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804381e:	06db      	lsls	r3, r3, #27
 8043820:	f100 808e 	bmi.w	8043940 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8043824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804382a:	f023 0302 	bic.w	r3, r3, #2
 804382e:	f043 0302 	orr.w	r3, r3, #2
 8043832:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8043834:	4b44      	ldr	r3, [pc, #272]	; (8043948 <HAL_ADC_Init+0x144>)
 8043836:	685a      	ldr	r2, [r3, #4]
 8043838:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 804383c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 804383e:	685a      	ldr	r2, [r3, #4]
 8043840:	6861      	ldr	r1, [r4, #4]
 8043842:	430a      	orrs	r2, r1
 8043844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8043846:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8043848:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 804384a:	685a      	ldr	r2, [r3, #4]
 804384c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8043852:	685a      	ldr	r2, [r3, #4]
 8043854:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8043858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 804385a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 804385c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 804385e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8043862:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8043864:	685a      	ldr	r2, [r3, #4]
 8043866:	430a      	orrs	r2, r1
 8043868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 804386a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 804386c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 804386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8043874:	689a      	ldr	r2, [r3, #8]
 8043876:	430a      	orrs	r2, r1
 8043878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 804387a:	4934      	ldr	r1, [pc, #208]	; (804394c <HAL_ADC_Init+0x148>)
 804387c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 804387e:	428a      	cmp	r2, r1
 8043880:	d052      	beq.n	8043928 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8043882:	6899      	ldr	r1, [r3, #8]
 8043884:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8043888:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 804388a:	6899      	ldr	r1, [r3, #8]
 804388c:	430a      	orrs	r2, r1
 804388e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043890:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8043892:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8043898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 804389a:	689a      	ldr	r2, [r3, #8]
 804389c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 804389e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80438a0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80438a2:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80438a4:	f022 0202 	bic.w	r2, r2, #2
 80438a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80438aa:	689a      	ldr	r2, [r3, #8]
 80438ac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80438b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80438b2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80438b6:	2a00      	cmp	r2, #0
 80438b8:	d03e      	beq.n	8043938 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80438ba:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80438bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80438be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80438c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80438c4:	685a      	ldr	r2, [r3, #4]
 80438c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80438ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80438cc:	685a      	ldr	r2, [r3, #4]
 80438ce:	3901      	subs	r1, #1
 80438d0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80438d4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80438d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80438d8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80438da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80438de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80438e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80438e2:	3901      	subs	r1, #1
 80438e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80438e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80438ea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80438ec:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80438f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80438f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80438f6:	689a      	ldr	r2, [r3, #8]
 80438f8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80438fc:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80438fe:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8043900:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8043902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8043908:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 804390a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 804390c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8043910:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8043912:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8043914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043916:	f023 0303 	bic.w	r3, r3, #3
 804391a:	f043 0301 	orr.w	r3, r3, #1
 804391e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8043920:	2300      	movs	r3, #0
 8043922:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8043926:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8043928:	689a      	ldr	r2, [r3, #8]
 804392a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 804392e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8043930:	689a      	ldr	r2, [r3, #8]
 8043932:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8043936:	e7b2      	b.n	804389e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8043938:	685a      	ldr	r2, [r3, #4]
 804393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804393e:	e7c9      	b.n	80438d4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8043940:	2001      	movs	r0, #1
 8043942:	e7ed      	b.n	8043920 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8043944:	2001      	movs	r0, #1
 8043946:	e7ee      	b.n	8043926 <HAL_ADC_Init+0x122>
 8043948:	40012300 	.word	0x40012300
 804394c:	0f000001 	.word	0x0f000001

08043950 <HAL_ADC_Start>:
{
 8043950:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8043952:	2300      	movs	r3, #0
 8043954:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8043956:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 804395a:	2b01      	cmp	r3, #1
 804395c:	d061      	beq.n	8043a22 <HAL_ADC_Start+0xd2>
 804395e:	2301      	movs	r3, #1
 8043960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8043964:	6803      	ldr	r3, [r0, #0]
 8043966:	689a      	ldr	r2, [r3, #8]
 8043968:	07d1      	lsls	r1, r2, #31
 804396a:	d505      	bpl.n	8043978 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 804396c:	689a      	ldr	r2, [r3, #8]
 804396e:	07d2      	lsls	r2, r2, #31
 8043970:	d414      	bmi.n	804399c <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8043972:	2000      	movs	r0, #0
}
 8043974:	b002      	add	sp, #8
 8043976:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8043978:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 804397a:	492b      	ldr	r1, [pc, #172]	; (8043a28 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 804397c:	f042 0201 	orr.w	r2, r2, #1
 8043980:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8043982:	4a2a      	ldr	r2, [pc, #168]	; (8043a2c <HAL_ADC_Start+0xdc>)
 8043984:	6812      	ldr	r2, [r2, #0]
 8043986:	fbb2 f2f1 	udiv	r2, r2, r1
 804398a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 804398e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8043990:	9a01      	ldr	r2, [sp, #4]
 8043992:	2a00      	cmp	r2, #0
 8043994:	d0ea      	beq.n	804396c <HAL_ADC_Start+0x1c>
      counter--;
 8043996:	9a01      	ldr	r2, [sp, #4]
 8043998:	3a01      	subs	r2, #1
 804399a:	e7f8      	b.n	804398e <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 804399c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 804399e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80439a2:	f022 0201 	bic.w	r2, r2, #1
 80439a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80439aa:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80439ac:	685a      	ldr	r2, [r3, #4]
 80439ae:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80439b0:	bf41      	itttt	mi
 80439b2:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80439b4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80439b8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80439bc:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80439be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80439c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80439c4:	bf1c      	itt	ne
 80439c6:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80439c8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80439cc:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80439ce:	2200      	movs	r2, #0
 80439d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80439d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80439d8:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80439da:	4a15      	ldr	r2, [pc, #84]	; (8043a30 <HAL_ADC_Start+0xe0>)
 80439dc:	6851      	ldr	r1, [r2, #4]
 80439de:	f011 0f1f 	tst.w	r1, #31
 80439e2:	4914      	ldr	r1, [pc, #80]	; (8043a34 <HAL_ADC_Start+0xe4>)
 80439e4:	d11a      	bne.n	8043a1c <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80439e6:	428b      	cmp	r3, r1
 80439e8:	d006      	beq.n	80439f8 <HAL_ADC_Start+0xa8>
 80439ea:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80439ee:	428b      	cmp	r3, r1
 80439f0:	d10b      	bne.n	8043a0a <HAL_ADC_Start+0xba>
 80439f2:	6852      	ldr	r2, [r2, #4]
 80439f4:	06d2      	lsls	r2, r2, #27
 80439f6:	d1bc      	bne.n	8043972 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80439f8:	6898      	ldr	r0, [r3, #8]
 80439fa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80439fe:	d1b8      	bne.n	8043972 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8043a00:	689a      	ldr	r2, [r3, #8]
 8043a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8043a06:	609a      	str	r2, [r3, #8]
 8043a08:	e7b4      	b.n	8043974 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8043a0a:	490b      	ldr	r1, [pc, #44]	; (8043a38 <HAL_ADC_Start+0xe8>)
 8043a0c:	428b      	cmp	r3, r1
 8043a0e:	d1b0      	bne.n	8043972 <HAL_ADC_Start+0x22>
 8043a10:	6852      	ldr	r2, [r2, #4]
 8043a12:	f002 021f 	and.w	r2, r2, #31
 8043a16:	2a0f      	cmp	r2, #15
 8043a18:	d9ee      	bls.n	80439f8 <HAL_ADC_Start+0xa8>
 8043a1a:	e7aa      	b.n	8043972 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8043a1c:	428b      	cmp	r3, r1
 8043a1e:	d1a8      	bne.n	8043972 <HAL_ADC_Start+0x22>
 8043a20:	e7ea      	b.n	80439f8 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 8043a22:	2002      	movs	r0, #2
 8043a24:	e7a6      	b.n	8043974 <HAL_ADC_Start+0x24>
 8043a26:	bf00      	nop
 8043a28:	000f4240 	.word	0x000f4240
 8043a2c:	20001048 	.word	0x20001048
 8043a30:	40012300 	.word	0x40012300
 8043a34:	40012000 	.word	0x40012000
 8043a38:	40012200 	.word	0x40012200

08043a3c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8043a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8043a40:	2b01      	cmp	r3, #1
 8043a42:	d017      	beq.n	8043a74 <HAL_ADC_Stop+0x38>
 8043a44:	2301      	movs	r3, #1
 8043a46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8043a4a:	6803      	ldr	r3, [r0, #0]
 8043a4c:	689a      	ldr	r2, [r3, #8]
 8043a4e:	f022 0201 	bic.w	r2, r2, #1
 8043a52:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8043a54:	689b      	ldr	r3, [r3, #8]
 8043a56:	07db      	lsls	r3, r3, #31
 8043a58:	d407      	bmi.n	8043a6a <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8043a5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8043a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8043a60:	f023 0301 	bic.w	r3, r3, #1
 8043a64:	f043 0301 	orr.w	r3, r3, #1
 8043a68:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8043a6a:	2300      	movs	r3, #0
 8043a6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8043a70:	4618      	mov	r0, r3
 8043a72:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8043a74:	2002      	movs	r0, #2
}
 8043a76:	4770      	bx	lr

08043a78 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043a78:	6803      	ldr	r3, [r0, #0]
 8043a7a:	689a      	ldr	r2, [r3, #8]
{
 8043a7c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043a7e:	0556      	lsls	r6, r2, #21
{
 8043a80:	4604      	mov	r4, r0
 8043a82:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043a84:	d50b      	bpl.n	8043a9e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8043a86:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8043a88:	05d8      	lsls	r0, r3, #23
 8043a8a:	d508      	bpl.n	8043a9e <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043a8e:	f043 0320 	orr.w	r3, r3, #32
 8043a92:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8043a94:	2300      	movs	r3, #0
 8043a96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8043a9a:	2001      	movs	r0, #1
}
 8043a9c:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8043a9e:	f7ff feab 	bl	80437f8 <HAL_GetTick>
 8043aa2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8043aa4:	6823      	ldr	r3, [r4, #0]
 8043aa6:	681a      	ldr	r2, [r3, #0]
 8043aa8:	0792      	lsls	r2, r2, #30
 8043aaa:	d50c      	bpl.n	8043ac6 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8043aac:	f06f 0212 	mvn.w	r2, #18
 8043ab0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8043ab2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8043ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043ab8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043aba:	689a      	ldr	r2, [r3, #8]
 8043abc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8043ac0:	d013      	beq.n	8043aea <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8043ac2:	2000      	movs	r0, #0
 8043ac4:	e7ea      	b.n	8043a9c <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8043ac6:	1c69      	adds	r1, r5, #1
 8043ac8:	d0ed      	beq.n	8043aa6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043aca:	b945      	cbnz	r5, 8043ade <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8043acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043ace:	f043 0304 	orr.w	r3, r3, #4
 8043ad2:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8043ad4:	2300      	movs	r3, #0
 8043ad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8043ada:	2003      	movs	r0, #3
 8043adc:	e7de      	b.n	8043a9c <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8043ade:	f7ff fe8b 	bl	80437f8 <HAL_GetTick>
 8043ae2:	1b80      	subs	r0, r0, r6
 8043ae4:	42a8      	cmp	r0, r5
 8043ae6:	d9dd      	bls.n	8043aa4 <HAL_ADC_PollForConversion+0x2c>
 8043ae8:	e7f0      	b.n	8043acc <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8043aea:	7e22      	ldrb	r2, [r4, #24]
 8043aec:	2a00      	cmp	r2, #0
 8043aee:	d1e8      	bne.n	8043ac2 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8043af2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8043af6:	d002      	beq.n	8043afe <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8043af8:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8043afa:	055b      	lsls	r3, r3, #21
 8043afc:	d4e1      	bmi.n	8043ac2 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8043afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8043b04:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8043b06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8043b08:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8043b0c:	d1d9      	bne.n	8043ac2 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8043b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043b10:	f043 0301 	orr.w	r3, r3, #1
 8043b14:	6423      	str	r3, [r4, #64]	; 0x40
 8043b16:	e7c1      	b.n	8043a9c <HAL_ADC_PollForConversion+0x24>

08043b18 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8043b18:	6803      	ldr	r3, [r0, #0]
 8043b1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8043b1c:	4770      	bx	lr
	...

08043b20 <HAL_ADC_ConfigChannel>:
{
 8043b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8043b22:	2300      	movs	r3, #0
 8043b24:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8043b26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8043b2a:	2b01      	cmp	r3, #1
 8043b2c:	d07e      	beq.n	8043c2c <HAL_ADC_ConfigChannel+0x10c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043b2e:	680d      	ldr	r5, [r1, #0]
 8043b30:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 8043b32:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043b34:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8043b36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8043b3a:	b2ac      	uxth	r4, r5
 8043b3c:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8043b3e:	d929      	bls.n	8043b94 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8043b40:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8043b44:	68df      	ldr	r7, [r3, #12]
 8043b46:	3a1e      	subs	r2, #30
 8043b48:	f04f 0c07 	mov.w	ip, #7
 8043b4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8043b50:	ea27 070c 	bic.w	r7, r7, ip
 8043b54:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8043b56:	68df      	ldr	r7, [r3, #12]
 8043b58:	fa06 f202 	lsl.w	r2, r6, r2
 8043b5c:	433a      	orrs	r2, r7
 8043b5e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8043b60:	6849      	ldr	r1, [r1, #4]
 8043b62:	2906      	cmp	r1, #6
 8043b64:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8043b68:	d824      	bhi.n	8043bb4 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8043b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8043b6c:	3a05      	subs	r2, #5
 8043b6e:	261f      	movs	r6, #31
 8043b70:	4096      	lsls	r6, r2
 8043b72:	ea21 0106 	bic.w	r1, r1, r6
 8043b76:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8043b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8043b7a:	fa04 f202 	lsl.w	r2, r4, r2
 8043b7e:	430a      	orrs	r2, r1
 8043b80:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8043b82:	4a2b      	ldr	r2, [pc, #172]	; (8043c30 <HAL_ADC_ConfigChannel+0x110>)
 8043b84:	4293      	cmp	r3, r2
 8043b86:	d031      	beq.n	8043bec <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8043b88:	2300      	movs	r3, #0
 8043b8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8043b8e:	4618      	mov	r0, r3
}
 8043b90:	b003      	add	sp, #12
 8043b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8043b94:	691f      	ldr	r7, [r3, #16]
 8043b96:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8043b9a:	f04f 0c07 	mov.w	ip, #7
 8043b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8043ba2:	ea27 070c 	bic.w	r7, r7, ip
 8043ba6:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8043ba8:	691f      	ldr	r7, [r3, #16]
 8043baa:	fa06 f202 	lsl.w	r2, r6, r2
 8043bae:	433a      	orrs	r2, r7
 8043bb0:	611a      	str	r2, [r3, #16]
 8043bb2:	e7d5      	b.n	8043b60 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8043bb4:	290c      	cmp	r1, #12
 8043bb6:	f04f 011f 	mov.w	r1, #31
 8043bba:	d80b      	bhi.n	8043bd4 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8043bbc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8043bbe:	3a23      	subs	r2, #35	; 0x23
 8043bc0:	4091      	lsls	r1, r2
 8043bc2:	ea26 0101 	bic.w	r1, r6, r1
 8043bc6:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8043bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043bca:	fa04 f202 	lsl.w	r2, r4, r2
 8043bce:	430a      	orrs	r2, r1
 8043bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8043bd2:	e7d6      	b.n	8043b82 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8043bd4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8043bd6:	3a41      	subs	r2, #65	; 0x41
 8043bd8:	4091      	lsls	r1, r2
 8043bda:	ea26 0101 	bic.w	r1, r6, r1
 8043bde:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8043be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8043be2:	fa04 f202 	lsl.w	r2, r4, r2
 8043be6:	430a      	orrs	r2, r1
 8043be8:	62da      	str	r2, [r3, #44]	; 0x2c
 8043bea:	e7ca      	b.n	8043b82 <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8043bec:	2d12      	cmp	r5, #18
 8043bee:	d104      	bne.n	8043bfa <HAL_ADC_ConfigChannel+0xda>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8043bf0:	4a10      	ldr	r2, [pc, #64]	; (8043c34 <HAL_ADC_ConfigChannel+0x114>)
 8043bf2:	6853      	ldr	r3, [r2, #4]
 8043bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043bf8:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8043bfa:	f1a5 0310 	sub.w	r3, r5, #16
 8043bfe:	2b01      	cmp	r3, #1
 8043c00:	d8c2      	bhi.n	8043b88 <HAL_ADC_ConfigChannel+0x68>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8043c02:	4a0c      	ldr	r2, [pc, #48]	; (8043c34 <HAL_ADC_ConfigChannel+0x114>)
 8043c04:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8043c06:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8043c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043c0c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8043c0e:	d1bb      	bne.n	8043b88 <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8043c10:	4b09      	ldr	r3, [pc, #36]	; (8043c38 <HAL_ADC_ConfigChannel+0x118>)
 8043c12:	4a0a      	ldr	r2, [pc, #40]	; (8043c3c <HAL_ADC_ConfigChannel+0x11c>)
 8043c14:	681b      	ldr	r3, [r3, #0]
 8043c16:	fbb3 f2f2 	udiv	r2, r3, r2
 8043c1a:	230a      	movs	r3, #10
 8043c1c:	4353      	muls	r3, r2
        counter--;
 8043c1e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8043c20:	9b01      	ldr	r3, [sp, #4]
 8043c22:	2b00      	cmp	r3, #0
 8043c24:	d0b0      	beq.n	8043b88 <HAL_ADC_ConfigChannel+0x68>
        counter--;
 8043c26:	9b01      	ldr	r3, [sp, #4]
 8043c28:	3b01      	subs	r3, #1
 8043c2a:	e7f8      	b.n	8043c1e <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8043c2c:	2002      	movs	r0, #2
 8043c2e:	e7af      	b.n	8043b90 <HAL_ADC_ConfigChannel+0x70>
 8043c30:	40012000 	.word	0x40012000
 8043c34:	40012300 	.word	0x40012300
 8043c38:	20001048 	.word	0x20001048
 8043c3c:	000f4240 	.word	0x000f4240

08043c40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043c40:	4a07      	ldr	r2, [pc, #28]	; (8043c60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8043c42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8043c44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8043c48:	041b      	lsls	r3, r3, #16
 8043c4a:	0c1b      	lsrs	r3, r3, #16
 8043c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043c50:	0200      	lsls	r0, r0, #8
 8043c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043c56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8043c5a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8043c5c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8043c5e:	4770      	bx	lr
 8043c60:	e000ed00 	.word	0xe000ed00

08043c64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8043c64:	4b17      	ldr	r3, [pc, #92]	; (8043cc4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8043c66:	b570      	push	{r4, r5, r6, lr}
 8043c68:	68dc      	ldr	r4, [r3, #12]
 8043c6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043c6e:	f1c4 0507 	rsb	r5, r4, #7
 8043c72:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043c74:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043c78:	bf28      	it	cs
 8043c7a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043c7c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043c80:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043c82:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043c86:	bf8c      	ite	hi
 8043c88:	3c03      	subhi	r4, #3
 8043c8a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043c8c:	ea21 0303 	bic.w	r3, r1, r3
 8043c90:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8043c92:	fa06 f404 	lsl.w	r4, r6, r4
 8043c96:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8043c9a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043c9c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043ca0:	bfa8      	it	ge
 8043ca2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8043ca6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043caa:	bfbc      	itt	lt
 8043cac:	f000 000f 	andlt.w	r0, r0, #15
 8043cb0:	4a05      	ldrlt	r2, [pc, #20]	; (8043cc8 <HAL_NVIC_SetPriority+0x64>)
 8043cb2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043cb4:	bfaa      	itet	ge
 8043cb6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043cba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043cbc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8043cc0:	bd70      	pop	{r4, r5, r6, pc}
 8043cc2:	bf00      	nop
 8043cc4:	e000ed00 	.word	0xe000ed00
 8043cc8:	e000ed14 	.word	0xe000ed14

08043ccc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043ccc:	2800      	cmp	r0, #0
 8043cce:	db08      	blt.n	8043ce2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043cd0:	0942      	lsrs	r2, r0, #5
 8043cd2:	2301      	movs	r3, #1
 8043cd4:	f000 001f 	and.w	r0, r0, #31
 8043cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8043cdc:	4b01      	ldr	r3, [pc, #4]	; (8043ce4 <HAL_NVIC_EnableIRQ+0x18>)
 8043cde:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8043ce2:	4770      	bx	lr
 8043ce4:	e000e100 	.word	0xe000e100

08043ce8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043ce8:	2800      	cmp	r0, #0
 8043cea:	db0d      	blt.n	8043d08 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043cec:	0943      	lsrs	r3, r0, #5
 8043cee:	2201      	movs	r2, #1
 8043cf0:	f000 001f 	and.w	r0, r0, #31
 8043cf4:	fa02 f000 	lsl.w	r0, r2, r0
 8043cf8:	3320      	adds	r3, #32
 8043cfa:	4a04      	ldr	r2, [pc, #16]	; (8043d0c <HAL_NVIC_DisableIRQ+0x24>)
 8043cfc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8043d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8043d04:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8043d08:	4770      	bx	lr
 8043d0a:	bf00      	nop
 8043d0c:	e000e100 	.word	0xe000e100

08043d10 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8043d10:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043d14:	4905      	ldr	r1, [pc, #20]	; (8043d2c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043d16:	4b06      	ldr	r3, [pc, #24]	; (8043d30 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043d18:	68ca      	ldr	r2, [r1, #12]
 8043d1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043d1e:	4313      	orrs	r3, r2
 8043d20:	60cb      	str	r3, [r1, #12]
 8043d22:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8043d26:	bf00      	nop
 8043d28:	e7fd      	b.n	8043d26 <HAL_NVIC_SystemReset+0x16>
 8043d2a:	bf00      	nop
 8043d2c:	e000ed00 	.word	0xe000ed00
 8043d30:	05fa0004 	.word	0x05fa0004

08043d34 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8043d34:	2800      	cmp	r0, #0
 8043d36:	db09      	blt.n	8043d4c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043d38:	0943      	lsrs	r3, r0, #5
 8043d3a:	2201      	movs	r2, #1
 8043d3c:	f000 001f 	and.w	r0, r0, #31
 8043d40:	fa02 f000 	lsl.w	r0, r2, r0
 8043d44:	3360      	adds	r3, #96	; 0x60
 8043d46:	4a02      	ldr	r2, [pc, #8]	; (8043d50 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8043d48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8043d4c:	4770      	bx	lr
 8043d4e:	bf00      	nop
 8043d50:	e000e100 	.word	0xe000e100

08043d54 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043d54:	6803      	ldr	r3, [r0, #0]
 8043d56:	b2da      	uxtb	r2, r3
 8043d58:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043d5c:	f023 0303 	bic.w	r3, r3, #3
 8043d60:	2118      	movs	r1, #24
 8043d62:	3a10      	subs	r2, #16
 8043d64:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043d68:	4904      	ldr	r1, [pc, #16]	; (8043d7c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8043d6a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8043d6c:	bf88      	it	hi
 8043d6e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043d70:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8043d72:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043d74:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8043d76:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8043d78:	4770      	bx	lr
 8043d7a:	bf00      	nop
 8043d7c:	080521e0 	.word	0x080521e0

08043d80 <HAL_DMA_Init>:
{
 8043d80:	b570      	push	{r4, r5, r6, lr}
 8043d82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8043d84:	f7ff fd38 	bl	80437f8 <HAL_GetTick>
 8043d88:	4605      	mov	r5, r0
  if(hdma == NULL)
 8043d8a:	2c00      	cmp	r4, #0
 8043d8c:	d071      	beq.n	8043e72 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8043d8e:	2300      	movs	r3, #0
 8043d90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8043d94:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8043d96:	2302      	movs	r3, #2
 8043d98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8043d9c:	6813      	ldr	r3, [r2, #0]
 8043d9e:	f023 0301 	bic.w	r3, r3, #1
 8043da2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8043da4:	6821      	ldr	r1, [r4, #0]
 8043da6:	680b      	ldr	r3, [r1, #0]
 8043da8:	07d8      	lsls	r0, r3, #31
 8043daa:	d43c      	bmi.n	8043e26 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8043dac:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043dae:	4d32      	ldr	r5, [pc, #200]	; (8043e78 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043db0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043db2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043db4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8043db8:	4313      	orrs	r3, r2
 8043dba:	68e2      	ldr	r2, [r4, #12]
 8043dbc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043dbe:	6922      	ldr	r2, [r4, #16]
 8043dc0:	4313      	orrs	r3, r2
 8043dc2:	6962      	ldr	r2, [r4, #20]
 8043dc4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043dc6:	69e2      	ldr	r2, [r4, #28]
 8043dc8:	4303      	orrs	r3, r0
 8043dca:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8043dcc:	6a22      	ldr	r2, [r4, #32]
 8043dce:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8043dd2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043dd4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8043dd8:	bf02      	ittt	eq
 8043dda:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8043dde:	4335      	orreq	r5, r6
 8043de0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8043de2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8043de4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043de6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8043de8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8043dec:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043df0:	d10b      	bne.n	8043e0a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8043df2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043df4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8043df6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043df8:	b13d      	cbz	r5, 8043e0a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8043dfa:	b9f8      	cbnz	r0, 8043e3c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8043dfc:	2a01      	cmp	r2, #1
 8043dfe:	d02d      	beq.n	8043e5c <HAL_DMA_Init+0xdc>
 8043e00:	d301      	bcc.n	8043e06 <HAL_DMA_Init+0x86>
 8043e02:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8043e04:	d101      	bne.n	8043e0a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043e06:	01ea      	lsls	r2, r5, #7
 8043e08:	d42b      	bmi.n	8043e62 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8043e0a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043e0c:	4620      	mov	r0, r4
 8043e0e:	f7ff ffa1 	bl	8043d54 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043e12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8043e14:	233f      	movs	r3, #63	; 0x3f
 8043e16:	4093      	lsls	r3, r2
 8043e18:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043e1a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8043e1c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043e1e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8043e20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8043e24:	e009      	b.n	8043e3a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8043e26:	f7ff fce7 	bl	80437f8 <HAL_GetTick>
 8043e2a:	1b40      	subs	r0, r0, r5
 8043e2c:	2805      	cmp	r0, #5
 8043e2e:	d9b9      	bls.n	8043da4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8043e30:	2320      	movs	r3, #32
 8043e32:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8043e34:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8043e36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8043e3a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8043e3c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8043e40:	d113      	bne.n	8043e6a <HAL_DMA_Init+0xea>
    switch (tmp)
 8043e42:	2a03      	cmp	r2, #3
 8043e44:	d8e1      	bhi.n	8043e0a <HAL_DMA_Init+0x8a>
 8043e46:	a001      	add	r0, pc, #4	; (adr r0, 8043e4c <HAL_DMA_Init+0xcc>)
 8043e48:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8043e4c:	08043e63 	.word	0x08043e63
 8043e50:	08043e07 	.word	0x08043e07
 8043e54:	08043e63 	.word	0x08043e63
 8043e58:	08043e5d 	.word	0x08043e5d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043e5c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8043e60:	d1d3      	bne.n	8043e0a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043e62:	2340      	movs	r3, #64	; 0x40
 8043e64:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8043e66:	2001      	movs	r0, #1
 8043e68:	e7e5      	b.n	8043e36 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8043e6a:	2a02      	cmp	r2, #2
 8043e6c:	d9f9      	bls.n	8043e62 <HAL_DMA_Init+0xe2>
 8043e6e:	2a03      	cmp	r2, #3
 8043e70:	e7c8      	b.n	8043e04 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8043e72:	2001      	movs	r0, #1
 8043e74:	e7e1      	b.n	8043e3a <HAL_DMA_Init+0xba>
 8043e76:	bf00      	nop
 8043e78:	f010803f 	.word	0xf010803f

08043e7c <HAL_DMA_DeInit>:
{
 8043e7c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8043e7e:	4605      	mov	r5, r0
 8043e80:	b320      	cbz	r0, 8043ecc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8043e82:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8043e86:	b2e4      	uxtb	r4, r4
 8043e88:	2c02      	cmp	r4, #2
 8043e8a:	d01d      	beq.n	8043ec8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8043e8c:	6803      	ldr	r3, [r0, #0]
 8043e8e:	681a      	ldr	r2, [r3, #0]
 8043e90:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8043e94:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8043e96:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8043e98:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8043e9a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8043e9c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8043e9e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8043ea0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8043ea2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8043ea4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043ea6:	f7ff ff55 	bl	8043d54 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043eaa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8043eac:	233f      	movs	r3, #63	; 0x3f
 8043eae:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8043eb0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8043eb4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8043eb8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043ebc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043ebe:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8043ec0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8043ec4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8043ec8:	4620      	mov	r0, r4
 8043eca:	e000      	b.n	8043ece <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8043ecc:	2001      	movs	r0, #1
}
 8043ece:	bd38      	pop	{r3, r4, r5, pc}

08043ed0 <HAL_DMA_Start_IT>:
{
 8043ed0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8043ed2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8043ed6:	2c01      	cmp	r4, #1
 8043ed8:	d032      	beq.n	8043f40 <HAL_DMA_Start_IT+0x70>
 8043eda:	2401      	movs	r4, #1
 8043edc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8043ee0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043ee4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8043ee6:	2c01      	cmp	r4, #1
 8043ee8:	f04f 0500 	mov.w	r5, #0
 8043eec:	f04f 0402 	mov.w	r4, #2
 8043ef0:	d124      	bne.n	8043f3c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8043ef2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8043ef6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043ef8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8043efa:	6825      	ldr	r5, [r4, #0]
 8043efc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8043f00:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8043f02:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8043f04:	6883      	ldr	r3, [r0, #8]
 8043f06:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8043f08:	bf0e      	itee	eq
 8043f0a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8043f0c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8043f0e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043f10:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8043f12:	bf08      	it	eq
 8043f14:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043f16:	233f      	movs	r3, #63	; 0x3f
 8043f18:	4093      	lsls	r3, r2
 8043f1a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8043f1c:	6823      	ldr	r3, [r4, #0]
 8043f1e:	f043 0316 	orr.w	r3, r3, #22
 8043f22:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8043f24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8043f26:	b11b      	cbz	r3, 8043f30 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8043f28:	6823      	ldr	r3, [r4, #0]
 8043f2a:	f043 0308 	orr.w	r3, r3, #8
 8043f2e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8043f30:	6823      	ldr	r3, [r4, #0]
 8043f32:	f043 0301 	orr.w	r3, r3, #1
 8043f36:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8043f38:	2000      	movs	r0, #0
}
 8043f3a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8043f3c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8043f40:	2002      	movs	r0, #2
 8043f42:	e7fa      	b.n	8043f3a <HAL_DMA_Start_IT+0x6a>

08043f44 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8043f44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8043f48:	2b02      	cmp	r3, #2
 8043f4a:	d003      	beq.n	8043f54 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8043f4c:	2380      	movs	r3, #128	; 0x80
 8043f4e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8043f50:	2001      	movs	r0, #1
 8043f52:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8043f54:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8043f56:	2305      	movs	r3, #5
 8043f58:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8043f5c:	6813      	ldr	r3, [r2, #0]
 8043f5e:	f023 0301 	bic.w	r3, r3, #1
 8043f62:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8043f64:	2000      	movs	r0, #0
}
 8043f66:	4770      	bx	lr

08043f68 <HAL_DMA_IRQHandler>:
{
 8043f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8043f6a:	2300      	movs	r3, #0
 8043f6c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8043f6e:	4b5c      	ldr	r3, [pc, #368]	; (80440e0 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043f70:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8043f72:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043f74:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8043f76:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043f78:	2208      	movs	r2, #8
 8043f7a:	409a      	lsls	r2, r3
 8043f7c:	4232      	tst	r2, r6
{
 8043f7e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8043f80:	d00c      	beq.n	8043f9c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8043f82:	6801      	ldr	r1, [r0, #0]
 8043f84:	6808      	ldr	r0, [r1, #0]
 8043f86:	0740      	lsls	r0, r0, #29
 8043f88:	d508      	bpl.n	8043f9c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8043f8a:	6808      	ldr	r0, [r1, #0]
 8043f8c:	f020 0004 	bic.w	r0, r0, #4
 8043f90:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8043f92:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8043f94:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8043f96:	f042 0201 	orr.w	r2, r2, #1
 8043f9a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8043f9c:	2201      	movs	r2, #1
 8043f9e:	409a      	lsls	r2, r3
 8043fa0:	4232      	tst	r2, r6
 8043fa2:	d008      	beq.n	8043fb6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8043fa4:	6821      	ldr	r1, [r4, #0]
 8043fa6:	6949      	ldr	r1, [r1, #20]
 8043fa8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8043faa:	bf41      	itttt	mi
 8043fac:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8043fae:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043fb0:	f042 0202 	orrmi.w	r2, r2, #2
 8043fb4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8043fb6:	2204      	movs	r2, #4
 8043fb8:	409a      	lsls	r2, r3
 8043fba:	4232      	tst	r2, r6
 8043fbc:	d008      	beq.n	8043fd0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8043fbe:	6821      	ldr	r1, [r4, #0]
 8043fc0:	6809      	ldr	r1, [r1, #0]
 8043fc2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8043fc4:	bf41      	itttt	mi
 8043fc6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8043fc8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8043fca:	f042 0204 	orrmi.w	r2, r2, #4
 8043fce:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8043fd0:	2210      	movs	r2, #16
 8043fd2:	409a      	lsls	r2, r3
 8043fd4:	4232      	tst	r2, r6
 8043fd6:	d010      	beq.n	8043ffa <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8043fd8:	6823      	ldr	r3, [r4, #0]
 8043fda:	6819      	ldr	r1, [r3, #0]
 8043fdc:	0709      	lsls	r1, r1, #28
 8043fde:	d50c      	bpl.n	8043ffa <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8043fe0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8043fe2:	681a      	ldr	r2, [r3, #0]
 8043fe4:	0350      	lsls	r0, r2, #13
 8043fe6:	d537      	bpl.n	8044058 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8043fe8:	681b      	ldr	r3, [r3, #0]
 8043fea:	0319      	lsls	r1, r3, #12
 8043fec:	d401      	bmi.n	8043ff2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8043fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043ff0:	e000      	b.n	8043ff4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8043ff2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8043ff4:	b10b      	cbz	r3, 8043ffa <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8043ff6:	4620      	mov	r0, r4
 8043ff8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8043ffa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8043ffc:	2220      	movs	r2, #32
 8043ffe:	408a      	lsls	r2, r1
 8044000:	4232      	tst	r2, r6
 8044002:	d03a      	beq.n	804407a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8044004:	6823      	ldr	r3, [r4, #0]
 8044006:	6818      	ldr	r0, [r3, #0]
 8044008:	06c6      	lsls	r6, r0, #27
 804400a:	d536      	bpl.n	804407a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 804400c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 804400e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8044012:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8044014:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8044016:	d127      	bne.n	8044068 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8044018:	f022 0216 	bic.w	r2, r2, #22
 804401c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 804401e:	695a      	ldr	r2, [r3, #20]
 8044020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8044024:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8044026:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8044028:	b90a      	cbnz	r2, 804402e <HAL_DMA_IRQHandler+0xc6>
 804402a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 804402c:	b11a      	cbz	r2, 8044036 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 804402e:	681a      	ldr	r2, [r3, #0]
 8044030:	f022 0208 	bic.w	r2, r2, #8
 8044034:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8044036:	233f      	movs	r3, #63	; 0x3f
 8044038:	408b      	lsls	r3, r1
 804403a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 804403c:	2300      	movs	r3, #0
 804403e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8044042:	2301      	movs	r3, #1
 8044044:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8044048:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 804404a:	2b00      	cmp	r3, #0
 804404c:	d045      	beq.n	80440da <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 804404e:	4620      	mov	r0, r4
}
 8044050:	b003      	add	sp, #12
 8044052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8044056:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8044058:	681a      	ldr	r2, [r3, #0]
 804405a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 804405c:	bf5e      	ittt	pl
 804405e:	681a      	ldrpl	r2, [r3, #0]
 8044060:	f022 0208 	bicpl.w	r2, r2, #8
 8044064:	601a      	strpl	r2, [r3, #0]
 8044066:	e7c2      	b.n	8043fee <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8044068:	0350      	lsls	r0, r2, #13
 804406a:	d527      	bpl.n	80440bc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 804406c:	681b      	ldr	r3, [r3, #0]
 804406e:	0319      	lsls	r1, r3, #12
 8044070:	d431      	bmi.n	80440d6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8044072:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8044074:	b10b      	cbz	r3, 804407a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8044076:	4620      	mov	r0, r4
 8044078:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 804407a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804407c:	b36b      	cbz	r3, 80440da <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 804407e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8044080:	07da      	lsls	r2, r3, #31
 8044082:	d519      	bpl.n	80440b8 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8044084:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8044086:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8044088:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 804408c:	6813      	ldr	r3, [r2, #0]
 804408e:	f023 0301 	bic.w	r3, r3, #1
 8044092:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8044094:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8044098:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 804409c:	9b01      	ldr	r3, [sp, #4]
 804409e:	3301      	adds	r3, #1
 80440a0:	42bb      	cmp	r3, r7
 80440a2:	9301      	str	r3, [sp, #4]
 80440a4:	d802      	bhi.n	80440ac <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80440a6:	6813      	ldr	r3, [r2, #0]
 80440a8:	07db      	lsls	r3, r3, #31
 80440aa:	d4f7      	bmi.n	804409c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80440ac:	2300      	movs	r3, #0
 80440ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80440b2:	2301      	movs	r3, #1
 80440b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80440b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80440ba:	e7c6      	b.n	804404a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80440bc:	681a      	ldr	r2, [r3, #0]
 80440be:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80440c2:	d108      	bne.n	80440d6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80440c4:	6819      	ldr	r1, [r3, #0]
 80440c6:	f021 0110 	bic.w	r1, r1, #16
 80440ca:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80440cc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80440ce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80440d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80440d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80440d8:	e7cc      	b.n	8044074 <HAL_DMA_IRQHandler+0x10c>
}
 80440da:	b003      	add	sp, #12
 80440dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80440de:	bf00      	nop
 80440e0:	20001048 	.word	0x20001048

080440e4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80440e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80440e6:	4770      	bx	lr

080440e8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80440e8:	4909      	ldr	r1, [pc, #36]	; (8044110 <FLASH_Program_DoubleWord+0x28>)
{
 80440ea:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80440ec:	690c      	ldr	r4, [r1, #16]
 80440ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80440f2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80440f4:	690c      	ldr	r4, [r1, #16]
 80440f6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80440fa:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80440fc:	690c      	ldr	r4, [r1, #16]
 80440fe:	f044 0401 	orr.w	r4, r4, #1
 8044102:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8044104:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8044106:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 804410a:	6043      	str	r3, [r0, #4]
}
 804410c:	bd10      	pop	{r4, pc}
 804410e:	bf00      	nop
 8044110:	40023c00 	.word	0x40023c00

08044114 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044114:	4b07      	ldr	r3, [pc, #28]	; (8044134 <FLASH_Program_Word+0x20>)
 8044116:	691a      	ldr	r2, [r3, #16]
 8044118:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 804411c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 804411e:	691a      	ldr	r2, [r3, #16]
 8044120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044124:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044126:	691a      	ldr	r2, [r3, #16]
 8044128:	f042 0201 	orr.w	r2, r2, #1
 804412c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 804412e:	6001      	str	r1, [r0, #0]
}
 8044130:	4770      	bx	lr
 8044132:	bf00      	nop
 8044134:	40023c00 	.word	0x40023c00

08044138 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044138:	4b07      	ldr	r3, [pc, #28]	; (8044158 <FLASH_Program_HalfWord+0x20>)
 804413a:	691a      	ldr	r2, [r3, #16]
 804413c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8044140:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8044142:	691a      	ldr	r2, [r3, #16]
 8044144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8044148:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 804414a:	691a      	ldr	r2, [r3, #16]
 804414c:	f042 0201 	orr.w	r2, r2, #1
 8044150:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8044152:	8001      	strh	r1, [r0, #0]
}
 8044154:	4770      	bx	lr
 8044156:	bf00      	nop
 8044158:	40023c00 	.word	0x40023c00

0804415c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 804415c:	4b1a      	ldr	r3, [pc, #104]	; (80441c8 <FLASH_SetErrorCode+0x6c>)
 804415e:	68da      	ldr	r2, [r3, #12]
 8044160:	06d2      	lsls	r2, r2, #27
 8044162:	d506      	bpl.n	8044172 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8044164:	4919      	ldr	r1, [pc, #100]	; (80441cc <FLASH_SetErrorCode+0x70>)
 8044166:	69ca      	ldr	r2, [r1, #28]
 8044168:	f042 0210 	orr.w	r2, r2, #16
 804416c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 804416e:	2210      	movs	r2, #16
 8044170:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8044172:	68da      	ldr	r2, [r3, #12]
 8044174:	0690      	lsls	r0, r2, #26
 8044176:	d506      	bpl.n	8044186 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8044178:	4914      	ldr	r1, [pc, #80]	; (80441cc <FLASH_SetErrorCode+0x70>)
 804417a:	69ca      	ldr	r2, [r1, #28]
 804417c:	f042 0208 	orr.w	r2, r2, #8
 8044180:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8044182:	2220      	movs	r2, #32
 8044184:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8044186:	4b10      	ldr	r3, [pc, #64]	; (80441c8 <FLASH_SetErrorCode+0x6c>)
 8044188:	68da      	ldr	r2, [r3, #12]
 804418a:	0651      	lsls	r1, r2, #25
 804418c:	d506      	bpl.n	804419c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 804418e:	490f      	ldr	r1, [pc, #60]	; (80441cc <FLASH_SetErrorCode+0x70>)
 8044190:	69ca      	ldr	r2, [r1, #28]
 8044192:	f042 0204 	orr.w	r2, r2, #4
 8044196:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8044198:	2240      	movs	r2, #64	; 0x40
 804419a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 804419c:	68da      	ldr	r2, [r3, #12]
 804419e:	0612      	lsls	r2, r2, #24
 80441a0:	d506      	bpl.n	80441b0 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80441a2:	490a      	ldr	r1, [pc, #40]	; (80441cc <FLASH_SetErrorCode+0x70>)
 80441a4:	69ca      	ldr	r2, [r1, #28]
 80441a6:	f042 0202 	orr.w	r2, r2, #2
 80441aa:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80441ac:	2280      	movs	r2, #128	; 0x80
 80441ae:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80441b0:	4a05      	ldr	r2, [pc, #20]	; (80441c8 <FLASH_SetErrorCode+0x6c>)
 80441b2:	68d3      	ldr	r3, [r2, #12]
 80441b4:	079b      	lsls	r3, r3, #30
 80441b6:	d506      	bpl.n	80441c6 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80441b8:	4904      	ldr	r1, [pc, #16]	; (80441cc <FLASH_SetErrorCode+0x70>)
 80441ba:	69cb      	ldr	r3, [r1, #28]
 80441bc:	f043 0320 	orr.w	r3, r3, #32
 80441c0:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80441c2:	2302      	movs	r3, #2
 80441c4:	60d3      	str	r3, [r2, #12]
  }
}
 80441c6:	4770      	bx	lr
 80441c8:	40023c00 	.word	0x40023c00
 80441cc:	20005df4 	.word	0x20005df4

080441d0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80441d0:	4b06      	ldr	r3, [pc, #24]	; (80441ec <HAL_FLASH_Unlock+0x1c>)
 80441d2:	691a      	ldr	r2, [r3, #16]
 80441d4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80441d6:	bfbf      	itttt	lt
 80441d8:	4a05      	ldrlt	r2, [pc, #20]	; (80441f0 <HAL_FLASH_Unlock+0x20>)
 80441da:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80441dc:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80441e0:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80441e2:	bfba      	itte	lt
 80441e4:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80441e6:	0fc0      	lsrlt	r0, r0, #31
 80441e8:	2000      	movge	r0, #0
}
 80441ea:	4770      	bx	lr
 80441ec:	40023c00 	.word	0x40023c00
 80441f0:	45670123 	.word	0x45670123

080441f4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80441f4:	4a03      	ldr	r2, [pc, #12]	; (8044204 <HAL_FLASH_Lock+0x10>)
 80441f6:	6913      	ldr	r3, [r2, #16]
 80441f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80441fc:	6113      	str	r3, [r2, #16]
}
 80441fe:	2000      	movs	r0, #0
 8044200:	4770      	bx	lr
 8044202:	bf00      	nop
 8044204:	40023c00 	.word	0x40023c00

08044208 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8044208:	4b01      	ldr	r3, [pc, #4]	; (8044210 <HAL_FLASH_GetError+0x8>)
 804420a:	69d8      	ldr	r0, [r3, #28]
}  
 804420c:	4770      	bx	lr
 804420e:	bf00      	nop
 8044210:	20005df4 	.word	0x20005df4

08044214 <FLASH_WaitForLastOperation>:
{ 
 8044214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8044216:	4b12      	ldr	r3, [pc, #72]	; (8044260 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044218:	4c12      	ldr	r4, [pc, #72]	; (8044264 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804421a:	2200      	movs	r2, #0
{ 
 804421c:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804421e:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8044220:	f7ff faea 	bl	80437f8 <HAL_GetTick>
 8044224:	4626      	mov	r6, r4
 8044226:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044228:	68e3      	ldr	r3, [r4, #12]
 804422a:	03da      	lsls	r2, r3, #15
 804422c:	d40c      	bmi.n	8044248 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 804422e:	68e3      	ldr	r3, [r4, #12]
 8044230:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8044232:	bf44      	itt	mi
 8044234:	2301      	movmi	r3, #1
 8044236:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8044238:	68f0      	ldr	r0, [r6, #12]
 804423a:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 804423e:	d007      	beq.n	8044250 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8044240:	f7ff ff8c 	bl	804415c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8044244:	2001      	movs	r0, #1
 8044246:	e003      	b.n	8044250 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8044248:	1c69      	adds	r1, r5, #1
 804424a:	d0ed      	beq.n	8044228 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 804424c:	b90d      	cbnz	r5, 8044252 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 804424e:	2003      	movs	r0, #3
}  
 8044250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8044252:	f7ff fad1 	bl	80437f8 <HAL_GetTick>
 8044256:	1bc0      	subs	r0, r0, r7
 8044258:	42a8      	cmp	r0, r5
 804425a:	d9e5      	bls.n	8044228 <FLASH_WaitForLastOperation+0x14>
 804425c:	e7f7      	b.n	804424e <FLASH_WaitForLastOperation+0x3a>
 804425e:	bf00      	nop
 8044260:	20005df4 	.word	0x20005df4
 8044264:	40023c00 	.word	0x40023c00

08044268 <HAL_FLASH_Program>:
{
 8044268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 804426c:	4d1f      	ldr	r5, [pc, #124]	; (80442ec <HAL_FLASH_Program+0x84>)
{
 804426e:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8044270:	7e2b      	ldrb	r3, [r5, #24]
 8044272:	2b01      	cmp	r3, #1
{
 8044274:	4607      	mov	r7, r0
 8044276:	460e      	mov	r6, r1
 8044278:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 804427a:	d035      	beq.n	80442e8 <HAL_FLASH_Program+0x80>
 804427c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804427e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8044282:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044284:	f7ff ffc6 	bl	8044214 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8044288:	b9b0      	cbnz	r0, 80442b8 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 804428a:	b9cf      	cbnz	r7, 80442c0 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804428c:	4b18      	ldr	r3, [pc, #96]	; (80442f0 <HAL_FLASH_Program+0x88>)
 804428e:	691a      	ldr	r2, [r3, #16]
 8044290:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8044294:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8044296:	691a      	ldr	r2, [r3, #16]
 8044298:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 804429a:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 804429c:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 804429e:	f042 0201 	orr.w	r2, r2, #1
 80442a2:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80442a4:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80442a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80442aa:	f7ff ffb3 	bl	8044214 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80442ae:	4a10      	ldr	r2, [pc, #64]	; (80442f0 <HAL_FLASH_Program+0x88>)
 80442b0:	6913      	ldr	r3, [r2, #16]
 80442b2:	f023 0301 	bic.w	r3, r3, #1
 80442b6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80442b8:	2300      	movs	r3, #0
 80442ba:	762b      	strb	r3, [r5, #24]
}
 80442bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80442c0:	2f01      	cmp	r7, #1
 80442c2:	d104      	bne.n	80442ce <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80442c4:	b2a1      	uxth	r1, r4
 80442c6:	4630      	mov	r0, r6
 80442c8:	f7ff ff36 	bl	8044138 <FLASH_Program_HalfWord>
 80442cc:	e7eb      	b.n	80442a6 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80442ce:	2f02      	cmp	r7, #2
 80442d0:	d104      	bne.n	80442dc <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80442d2:	4621      	mov	r1, r4
 80442d4:	4630      	mov	r0, r6
 80442d6:	f7ff ff1d 	bl	8044114 <FLASH_Program_Word>
 80442da:	e7e4      	b.n	80442a6 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80442dc:	4622      	mov	r2, r4
 80442de:	4643      	mov	r3, r8
 80442e0:	4630      	mov	r0, r6
 80442e2:	f7ff ff01 	bl	80440e8 <FLASH_Program_DoubleWord>
 80442e6:	e7de      	b.n	80442a6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80442e8:	2002      	movs	r0, #2
 80442ea:	e7e7      	b.n	80442bc <HAL_FLASH_Program+0x54>
 80442ec:	20005df4 	.word	0x20005df4
 80442f0:	40023c00 	.word	0x40023c00

080442f4 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80442f4:	4b07      	ldr	r3, [pc, #28]	; (8044314 <FLASH_MassErase.isra.0+0x20>)
 80442f6:	691a      	ldr	r2, [r3, #16]
 80442f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80442fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80442fe:	691a      	ldr	r2, [r3, #16]
 8044300:	f042 0204 	orr.w	r2, r2, #4
 8044304:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8044306:	691a      	ldr	r2, [r3, #16]
 8044308:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 804430c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8044310:	6118      	str	r0, [r3, #16]
}
 8044312:	4770      	bx	lr
 8044314:	40023c00 	.word	0x40023c00

08044318 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8044318:	b139      	cbz	r1, 804432a <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 804431a:	2901      	cmp	r1, #1
 804431c:	d01c      	beq.n	8044358 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 804431e:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8044320:	bf0c      	ite	eq
 8044322:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8044326:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804432a:	4b0d      	ldr	r3, [pc, #52]	; (8044360 <FLASH_Erase_Sector+0x48>)
 804432c:	691a      	ldr	r2, [r3, #16]
 804432e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8044332:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8044334:	691a      	ldr	r2, [r3, #16]
 8044336:	4311      	orrs	r1, r2
 8044338:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 804433a:	691a      	ldr	r2, [r3, #16]
 804433c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8044340:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8044342:	691a      	ldr	r2, [r3, #16]
 8044344:	f042 0202 	orr.w	r2, r2, #2
 8044348:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 804434c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 804434e:	691a      	ldr	r2, [r3, #16]
 8044350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8044354:	611a      	str	r2, [r3, #16]
}
 8044356:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8044358:	f44f 7180 	mov.w	r1, #256	; 0x100
 804435c:	e7e5      	b.n	804432a <FLASH_Erase_Sector+0x12>
 804435e:	bf00      	nop
 8044360:	40023c00 	.word	0x40023c00

08044364 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8044364:	4b14      	ldr	r3, [pc, #80]	; (80443b8 <FLASH_FlushCaches+0x54>)
 8044366:	681a      	ldr	r2, [r3, #0]
 8044368:	0591      	lsls	r1, r2, #22
 804436a:	d50f      	bpl.n	804438c <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 804436c:	681a      	ldr	r2, [r3, #0]
 804436e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8044372:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8044374:	681a      	ldr	r2, [r3, #0]
 8044376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804437a:	601a      	str	r2, [r3, #0]
 804437c:	681a      	ldr	r2, [r3, #0]
 804437e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044382:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044384:	681a      	ldr	r2, [r3, #0]
 8044386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804438a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804438c:	4b0a      	ldr	r3, [pc, #40]	; (80443b8 <FLASH_FlushCaches+0x54>)
 804438e:	681a      	ldr	r2, [r3, #0]
 8044390:	0552      	lsls	r2, r2, #21
 8044392:	d50f      	bpl.n	80443b4 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8044394:	681a      	ldr	r2, [r3, #0]
 8044396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 804439a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 804439c:	681a      	ldr	r2, [r3, #0]
 804439e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80443a2:	601a      	str	r2, [r3, #0]
 80443a4:	681a      	ldr	r2, [r3, #0]
 80443a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80443aa:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80443ac:	681a      	ldr	r2, [r3, #0]
 80443ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80443b2:	601a      	str	r2, [r3, #0]
  }
}
 80443b4:	4770      	bx	lr
 80443b6:	bf00      	nop
 80443b8:	40023c00 	.word	0x40023c00

080443bc <HAL_FLASHEx_Erase>:
{
 80443bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80443c0:	4e23      	ldr	r6, [pc, #140]	; (8044450 <HAL_FLASHEx_Erase+0x94>)
 80443c2:	7e33      	ldrb	r3, [r6, #24]
 80443c4:	2b01      	cmp	r3, #1
{
 80443c6:	4604      	mov	r4, r0
 80443c8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80443ca:	d03f      	beq.n	804444c <HAL_FLASHEx_Erase+0x90>
 80443cc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80443ce:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80443d2:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80443d4:	f7ff ff1e 	bl	8044214 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80443d8:	4605      	mov	r5, r0
 80443da:	b9a8      	cbnz	r0, 8044408 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80443dc:	f04f 33ff 	mov.w	r3, #4294967295
 80443e0:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80443e4:	6823      	ldr	r3, [r4, #0]
 80443e6:	2b01      	cmp	r3, #1
 80443e8:	d113      	bne.n	8044412 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80443ea:	7c20      	ldrb	r0, [r4, #16]
 80443ec:	f7ff ff82 	bl	80442f4 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80443f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80443f4:	f7ff ff0e 	bl	8044214 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80443f8:	4a16      	ldr	r2, [pc, #88]	; (8044454 <HAL_FLASHEx_Erase+0x98>)
 80443fa:	6913      	ldr	r3, [r2, #16]
 80443fc:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044400:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8044402:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8044404:	f7ff ffae 	bl	8044364 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8044408:	2300      	movs	r3, #0
 804440a:	7633      	strb	r3, [r6, #24]
}
 804440c:	4628      	mov	r0, r5
 804440e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044412:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044414:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8044454 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044418:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 804441c:	4413      	add	r3, r2
 804441e:	42bb      	cmp	r3, r7
 8044420:	d9f0      	bls.n	8044404 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8044422:	7c21      	ldrb	r1, [r4, #16]
 8044424:	4638      	mov	r0, r7
 8044426:	f7ff ff77 	bl	8044318 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804442a:	f24c 3050 	movw	r0, #50000	; 0xc350
 804442e:	f7ff fef1 	bl	8044214 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044432:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8044436:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804443a:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 804443e:	b118      	cbz	r0, 8044448 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8044440:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044444:	4605      	mov	r5, r0
          break;
 8044446:	e7dd      	b.n	8044404 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044448:	3701      	adds	r7, #1
 804444a:	e7e5      	b.n	8044418 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 804444c:	2502      	movs	r5, #2
 804444e:	e7dd      	b.n	804440c <HAL_FLASHEx_Erase+0x50>
 8044450:	20005df4 	.word	0x20005df4
 8044454:	40023c00 	.word	0x40023c00

08044458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804445c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804445e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044460:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8044610 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044464:	4a68      	ldr	r2, [pc, #416]	; (8044608 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044466:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8044614 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804446a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804446c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 804446e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044470:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8044472:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044474:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8044476:	42ac      	cmp	r4, r5
 8044478:	f040 80b0 	bne.w	80445dc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804447c:	684c      	ldr	r4, [r1, #4]
 804447e:	f024 0c10 	bic.w	ip, r4, #16
 8044482:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8044486:	2603      	movs	r6, #3
 8044488:	f10c 37ff 	add.w	r7, ip, #4294967295
 804448c:	fa06 f60e 	lsl.w	r6, r6, lr
 8044490:	2f01      	cmp	r7, #1
 8044492:	ea6f 0606 	mvn.w	r6, r6
 8044496:	d811      	bhi.n	80444bc <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8044498:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 804449a:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 804449e:	68cf      	ldr	r7, [r1, #12]
 80444a0:	fa07 f70e 	lsl.w	r7, r7, lr
 80444a4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80444a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80444aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80444ac:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80444b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80444b4:	409f      	lsls	r7, r3
 80444b6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80444ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80444bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80444be:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80444c2:	688f      	ldr	r7, [r1, #8]
 80444c4:	fa07 f70e 	lsl.w	r7, r7, lr
 80444c8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80444cc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80444d0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80444d2:	d116      	bne.n	8044502 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80444d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80444d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80444dc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80444e0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80444e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80444e8:	f04f 0c0f 	mov.w	ip, #15
 80444ec:	fa0c fc0b 	lsl.w	ip, ip, fp
 80444f0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80444f4:	690f      	ldr	r7, [r1, #16]
 80444f6:	fa07 f70b 	lsl.w	r7, r7, fp
 80444fa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80444fe:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8044502:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8044504:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044506:	f004 0703 	and.w	r7, r4, #3
 804450a:	fa07 fe0e 	lsl.w	lr, r7, lr
 804450e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8044512:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8044514:	00e6      	lsls	r6, r4, #3
 8044516:	d561      	bpl.n	80445dc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044518:	f04f 0b00 	mov.w	fp, #0
 804451c:	f8cd b00c 	str.w	fp, [sp, #12]
 8044520:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044524:	4e39      	ldr	r6, [pc, #228]	; (804460c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044526:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 804452a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 804452e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8044532:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8044536:	9703      	str	r7, [sp, #12]
 8044538:	9f03      	ldr	r7, [sp, #12]
 804453a:	f023 0703 	bic.w	r7, r3, #3
 804453e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8044542:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8044546:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 804454a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 804454e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8044552:	f04f 0c0f 	mov.w	ip, #15
 8044556:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804455a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 804455c:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044560:	d043      	beq.n	80445ea <HAL_GPIO_Init+0x192>
 8044562:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8044566:	42b0      	cmp	r0, r6
 8044568:	d041      	beq.n	80445ee <HAL_GPIO_Init+0x196>
 804456a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804456e:	42b0      	cmp	r0, r6
 8044570:	d03f      	beq.n	80445f2 <HAL_GPIO_Init+0x19a>
 8044572:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8044576:	42b0      	cmp	r0, r6
 8044578:	d03d      	beq.n	80445f6 <HAL_GPIO_Init+0x19e>
 804457a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 804457e:	42b0      	cmp	r0, r6
 8044580:	d03b      	beq.n	80445fa <HAL_GPIO_Init+0x1a2>
 8044582:	4548      	cmp	r0, r9
 8044584:	d03b      	beq.n	80445fe <HAL_GPIO_Init+0x1a6>
 8044586:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 804458a:	42b0      	cmp	r0, r6
 804458c:	d039      	beq.n	8044602 <HAL_GPIO_Init+0x1aa>
 804458e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8044592:	42b0      	cmp	r0, r6
 8044594:	bf14      	ite	ne
 8044596:	2608      	movne	r6, #8
 8044598:	2607      	moveq	r6, #7
 804459a:	fa06 f60e 	lsl.w	r6, r6, lr
 804459e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80445a2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80445a4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80445a6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80445a8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80445ac:	bf0c      	ite	eq
 80445ae:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80445b0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80445b2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80445b4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80445b6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80445ba:	bf0c      	ite	eq
 80445bc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80445be:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80445c0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80445c2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80445c4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80445c8:	bf0c      	ite	eq
 80445ca:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80445cc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80445ce:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80445d0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80445d2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80445d4:	bf54      	ite	pl
 80445d6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80445d8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80445da:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80445dc:	3301      	adds	r3, #1
 80445de:	2b10      	cmp	r3, #16
 80445e0:	f47f af45 	bne.w	804446e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80445e4:	b005      	add	sp, #20
 80445e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80445ea:	465e      	mov	r6, fp
 80445ec:	e7d5      	b.n	804459a <HAL_GPIO_Init+0x142>
 80445ee:	2601      	movs	r6, #1
 80445f0:	e7d3      	b.n	804459a <HAL_GPIO_Init+0x142>
 80445f2:	2602      	movs	r6, #2
 80445f4:	e7d1      	b.n	804459a <HAL_GPIO_Init+0x142>
 80445f6:	2603      	movs	r6, #3
 80445f8:	e7cf      	b.n	804459a <HAL_GPIO_Init+0x142>
 80445fa:	2604      	movs	r6, #4
 80445fc:	e7cd      	b.n	804459a <HAL_GPIO_Init+0x142>
 80445fe:	2605      	movs	r6, #5
 8044600:	e7cb      	b.n	804459a <HAL_GPIO_Init+0x142>
 8044602:	2606      	movs	r6, #6
 8044604:	e7c9      	b.n	804459a <HAL_GPIO_Init+0x142>
 8044606:	bf00      	nop
 8044608:	40013c00 	.word	0x40013c00
 804460c:	40020000 	.word	0x40020000
 8044610:	40023800 	.word	0x40023800
 8044614:	40021400 	.word	0x40021400

08044618 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8044618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 804461c:	4d40      	ldr	r5, [pc, #256]	; (8044720 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804461e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8044728 <HAL_GPIO_DeInit+0x110>
 8044622:	f8df a108 	ldr.w	sl, [pc, #264]	; 804472c <HAL_GPIO_DeInit+0x114>
 8044626:	f8df b108 	ldr.w	fp, [pc, #264]	; 8044730 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 804462a:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 804462c:	2301      	movs	r3, #1
 804462e:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8044632:	ea0e 0401 	and.w	r4, lr, r1
    if(iocurrent == ioposition)
 8044636:	45a6      	cmp	lr, r4
 8044638:	d15f      	bne.n	80446fa <HAL_GPIO_DeInit+0xe2>
 804463a:	f022 0603 	bic.w	r6, r2, #3
 804463e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8044642:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044646:	f002 0c03 	and.w	ip, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804464a:	4b36      	ldr	r3, [pc, #216]	; (8044724 <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 804464c:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044650:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8044654:	270f      	movs	r7, #15
 8044656:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804465a:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 804465c:	ea07 0808 	and.w	r8, r7, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8044660:	d050      	beq.n	8044704 <HAL_GPIO_DeInit+0xec>
 8044662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8044666:	4298      	cmp	r0, r3
 8044668:	d04e      	beq.n	8044708 <HAL_GPIO_DeInit+0xf0>
 804466a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804466e:	4298      	cmp	r0, r3
 8044670:	d04c      	beq.n	804470c <HAL_GPIO_DeInit+0xf4>
 8044672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8044676:	4298      	cmp	r0, r3
 8044678:	d04a      	beq.n	8044710 <HAL_GPIO_DeInit+0xf8>
 804467a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804467e:	4298      	cmp	r0, r3
 8044680:	d048      	beq.n	8044714 <HAL_GPIO_DeInit+0xfc>
 8044682:	4548      	cmp	r0, r9
 8044684:	d048      	beq.n	8044718 <HAL_GPIO_DeInit+0x100>
 8044686:	4550      	cmp	r0, sl
 8044688:	d048      	beq.n	804471c <HAL_GPIO_DeInit+0x104>
 804468a:	4558      	cmp	r0, fp
 804468c:	bf0c      	ite	eq
 804468e:	2307      	moveq	r3, #7
 8044690:	2308      	movne	r3, #8
 8044692:	fa03 f30c 	lsl.w	r3, r3, ip
 8044696:	4543      	cmp	r3, r8
 8044698:	d110      	bne.n	80446bc <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 804469a:	682b      	ldr	r3, [r5, #0]
 804469c:	43e4      	mvns	r4, r4
 804469e:	4023      	ands	r3, r4
 80446a0:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80446a2:	686b      	ldr	r3, [r5, #4]
 80446a4:	4023      	ands	r3, r4
 80446a6:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80446a8:	68ab      	ldr	r3, [r5, #8]
 80446aa:	4023      	ands	r3, r4
 80446ac:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80446ae:	68eb      	ldr	r3, [r5, #12]
 80446b0:	401c      	ands	r4, r3
 80446b2:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80446b4:	68b3      	ldr	r3, [r6, #8]
 80446b6:	ea23 0707 	bic.w	r7, r3, r7
 80446ba:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80446bc:	0056      	lsls	r6, r2, #1
 80446be:	2303      	movs	r3, #3
 80446c0:	6804      	ldr	r4, [r0, #0]
 80446c2:	40b3      	lsls	r3, r6
 80446c4:	43db      	mvns	r3, r3
 80446c6:	401c      	ands	r4, r3
 80446c8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80446ca:	08d4      	lsrs	r4, r2, #3
 80446cc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80446d0:	f002 0c07 	and.w	ip, r2, #7
 80446d4:	6a26      	ldr	r6, [r4, #32]
 80446d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80446da:	270f      	movs	r7, #15
 80446dc:	fa07 f70c 	lsl.w	r7, r7, ip
 80446e0:	ea26 0707 	bic.w	r7, r6, r7
 80446e4:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80446e6:	68c4      	ldr	r4, [r0, #12]
 80446e8:	401c      	ands	r4, r3
 80446ea:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80446ec:	6844      	ldr	r4, [r0, #4]
 80446ee:	ea24 040e 	bic.w	r4, r4, lr
 80446f2:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80446f4:	6884      	ldr	r4, [r0, #8]
 80446f6:	4023      	ands	r3, r4
 80446f8:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80446fa:	3201      	adds	r2, #1
 80446fc:	2a10      	cmp	r2, #16
 80446fe:	d195      	bne.n	804462c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8044700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8044704:	2300      	movs	r3, #0
 8044706:	e7c4      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 8044708:	2301      	movs	r3, #1
 804470a:	e7c2      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 804470c:	2302      	movs	r3, #2
 804470e:	e7c0      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 8044710:	2303      	movs	r3, #3
 8044712:	e7be      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 8044714:	2304      	movs	r3, #4
 8044716:	e7bc      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 8044718:	2305      	movs	r3, #5
 804471a:	e7ba      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 804471c:	2306      	movs	r3, #6
 804471e:	e7b8      	b.n	8044692 <HAL_GPIO_DeInit+0x7a>
 8044720:	40013c00 	.word	0x40013c00
 8044724:	40020000 	.word	0x40020000
 8044728:	40021400 	.word	0x40021400
 804472c:	40021800 	.word	0x40021800
 8044730:	40021c00 	.word	0x40021c00

08044734 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8044734:	6903      	ldr	r3, [r0, #16]
 8044736:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8044738:	bf14      	ite	ne
 804473a:	2001      	movne	r0, #1
 804473c:	2000      	moveq	r0, #0
 804473e:	4770      	bx	lr

08044740 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044740:	b10a      	cbz	r2, 8044746 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044742:	6181      	str	r1, [r0, #24]
  }
}
 8044744:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044746:	0409      	lsls	r1, r1, #16
 8044748:	e7fb      	b.n	8044742 <HAL_GPIO_WritePin+0x2>
	...

0804474c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 804474c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 804474e:	4b04      	ldr	r3, [pc, #16]	; (8044760 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8044750:	6959      	ldr	r1, [r3, #20]
 8044752:	4201      	tst	r1, r0
 8044754:	d002      	beq.n	804475c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8044756:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8044758:	f00b fa38 	bl	804fbcc <HAL_GPIO_EXTI_Callback>
  }
}
 804475c:	bd08      	pop	{r3, pc}
 804475e:	bf00      	nop
 8044760:	40013c00 	.word	0x40013c00

08044764 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8044764:	6801      	ldr	r1, [r0, #0]
 8044766:	694b      	ldr	r3, [r1, #20]
 8044768:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 804476c:	f04f 0200 	mov.w	r2, #0
 8044770:	d010      	beq.n	8044794 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8044772:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8044776:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8044778:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 804477a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 804477c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044780:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8044784:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8044786:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 804478a:	f043 0304 	orr.w	r3, r3, #4
 804478e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8044790:	2001      	movs	r0, #1
 8044792:	4770      	bx	lr
  }
  return HAL_OK;
 8044794:	4618      	mov	r0, r3
}
 8044796:	4770      	bx	lr

08044798 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8044798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804479c:	4604      	mov	r4, r0
 804479e:	4616      	mov	r6, r2
 80447a0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80447a2:	b28f      	uxth	r7, r1
 80447a4:	6825      	ldr	r5, [r4, #0]
 80447a6:	6968      	ldr	r0, [r5, #20]
 80447a8:	ea37 0000 	bics.w	r0, r7, r0
 80447ac:	d017      	beq.n	80447de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80447ae:	696b      	ldr	r3, [r5, #20]
 80447b0:	055a      	lsls	r2, r3, #21
 80447b2:	d516      	bpl.n	80447e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80447b4:	682b      	ldr	r3, [r5, #0]
 80447b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80447ba:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80447bc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80447c0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80447c2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80447c4:	2300      	movs	r3, #0
 80447c6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80447c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80447cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80447d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80447d2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80447d6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80447d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80447dc:	2001      	movs	r0, #1
}
 80447de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80447e2:	1c73      	adds	r3, r6, #1
 80447e4:	d0df      	beq.n	80447a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80447e6:	f7ff f807 	bl	80437f8 <HAL_GetTick>
 80447ea:	eba0 0008 	sub.w	r0, r0, r8
 80447ee:	42b0      	cmp	r0, r6
 80447f0:	d801      	bhi.n	80447f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80447f2:	2e00      	cmp	r6, #0
 80447f4:	d1d6      	bne.n	80447a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80447f6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80447f8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80447fa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80447fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044800:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8044804:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8044806:	f042 0220 	orr.w	r2, r2, #32
 804480a:	e7e4      	b.n	80447d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0804480c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 804480c:	b570      	push	{r4, r5, r6, lr}
 804480e:	4604      	mov	r4, r0
 8044810:	460d      	mov	r5, r1
 8044812:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8044814:	6823      	ldr	r3, [r4, #0]
 8044816:	695b      	ldr	r3, [r3, #20]
 8044818:	075b      	lsls	r3, r3, #29
 804481a:	d501      	bpl.n	8044820 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 804481c:	2000      	movs	r0, #0
}
 804481e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8044820:	4620      	mov	r0, r4
 8044822:	f7ff ff9f 	bl	8044764 <I2C_IsAcknowledgeFailed>
 8044826:	b9a8      	cbnz	r0, 8044854 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8044828:	1c6a      	adds	r2, r5, #1
 804482a:	d0f3      	beq.n	8044814 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804482c:	f7fe ffe4 	bl	80437f8 <HAL_GetTick>
 8044830:	1b80      	subs	r0, r0, r6
 8044832:	42a8      	cmp	r0, r5
 8044834:	d801      	bhi.n	804483a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8044836:	2d00      	cmp	r5, #0
 8044838:	d1ec      	bne.n	8044814 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 804483a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 804483c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 804483e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8044840:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044844:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044848:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 804484a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 804484e:	f042 0220 	orr.w	r2, r2, #32
 8044852:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8044854:	2001      	movs	r0, #1
 8044856:	e7e2      	b.n	804481e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08044858 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8044858:	b570      	push	{r4, r5, r6, lr}
 804485a:	4604      	mov	r4, r0
 804485c:	460d      	mov	r5, r1
 804485e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8044860:	6820      	ldr	r0, [r4, #0]
 8044862:	6943      	ldr	r3, [r0, #20]
 8044864:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8044868:	d001      	beq.n	804486e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 804486a:	2000      	movs	r0, #0
 804486c:	e010      	b.n	8044890 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 804486e:	6942      	ldr	r2, [r0, #20]
 8044870:	06d2      	lsls	r2, r2, #27
 8044872:	d50e      	bpl.n	8044892 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8044874:	f06f 0210 	mvn.w	r2, #16
 8044878:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 804487a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 804487c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 804487e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8044882:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8044886:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044888:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 804488a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 804488e:	2001      	movs	r0, #1
}
 8044890:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044892:	f7fe ffb1 	bl	80437f8 <HAL_GetTick>
 8044896:	1b80      	subs	r0, r0, r6
 8044898:	42a8      	cmp	r0, r5
 804489a:	d801      	bhi.n	80448a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 804489c:	2d00      	cmp	r5, #0
 804489e:	d1df      	bne.n	8044860 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80448a0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80448a2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80448a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80448a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80448aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80448ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80448b0:	f042 0220 	orr.w	r2, r2, #32
 80448b4:	e7e8      	b.n	8044888 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080448b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80448b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80448ba:	9e08      	ldr	r6, [sp, #32]
 80448bc:	4604      	mov	r4, r0
 80448be:	4690      	mov	r8, r2
 80448c0:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80448c2:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80448c6:	b28d      	uxth	r5, r1
 80448c8:	6821      	ldr	r1, [r4, #0]
 80448ca:	f1b9 0f01 	cmp.w	r9, #1
 80448ce:	bf0c      	ite	eq
 80448d0:	694b      	ldreq	r3, [r1, #20]
 80448d2:	698b      	ldrne	r3, [r1, #24]
 80448d4:	ea35 0303 	bics.w	r3, r5, r3
 80448d8:	bf0c      	ite	eq
 80448da:	2301      	moveq	r3, #1
 80448dc:	2300      	movne	r3, #0
 80448de:	4598      	cmp	r8, r3
 80448e0:	d001      	beq.n	80448e6 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80448e2:	2000      	movs	r0, #0
 80448e4:	e016      	b.n	8044914 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80448e6:	1c7b      	adds	r3, r7, #1
 80448e8:	d0ef      	beq.n	80448ca <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80448ea:	f7fe ff85 	bl	80437f8 <HAL_GetTick>
 80448ee:	1b80      	subs	r0, r0, r6
 80448f0:	42b8      	cmp	r0, r7
 80448f2:	d801      	bhi.n	80448f8 <I2C_WaitOnFlagUntilTimeout+0x42>
 80448f4:	2f00      	cmp	r7, #0
 80448f6:	d1e7      	bne.n	80448c8 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80448f8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80448fa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80448fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80448fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044902:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044906:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044908:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 804490c:	f042 0220 	orr.w	r2, r2, #32
 8044910:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044912:	2001      	movs	r0, #1
}
 8044914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08044918 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8044918:	b570      	push	{r4, r5, r6, lr}
 804491a:	4604      	mov	r4, r0
 804491c:	460d      	mov	r5, r1
 804491e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8044920:	6823      	ldr	r3, [r4, #0]
 8044922:	695b      	ldr	r3, [r3, #20]
 8044924:	061b      	lsls	r3, r3, #24
 8044926:	d501      	bpl.n	804492c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8044928:	2000      	movs	r0, #0
}
 804492a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 804492c:	4620      	mov	r0, r4
 804492e:	f7ff ff19 	bl	8044764 <I2C_IsAcknowledgeFailed>
 8044932:	b9a8      	cbnz	r0, 8044960 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8044934:	1c6a      	adds	r2, r5, #1
 8044936:	d0f3      	beq.n	8044920 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8044938:	f7fe ff5e 	bl	80437f8 <HAL_GetTick>
 804493c:	1b80      	subs	r0, r0, r6
 804493e:	42a8      	cmp	r0, r5
 8044940:	d801      	bhi.n	8044946 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8044942:	2d00      	cmp	r5, #0
 8044944:	d1ec      	bne.n	8044920 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8044946:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8044948:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 804494a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 804494c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8044950:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8044954:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8044956:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 804495a:	f042 0220 	orr.w	r2, r2, #32
 804495e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8044960:	2001      	movs	r0, #1
 8044962:	e7e2      	b.n	804492a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08044964 <I2C_RequestMemoryWrite>:
{
 8044964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8044968:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 804496a:	6802      	ldr	r2, [r0, #0]
{
 804496c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 804496e:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044970:	6813      	ldr	r3, [r2, #0]
 8044972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044976:	6013      	str	r3, [r2, #0]
{
 8044978:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 804497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804497c:	9600      	str	r6, [sp, #0]
 804497e:	2200      	movs	r2, #0
 8044980:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8044984:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044986:	f7ff ff96 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 804498a:	6823      	ldr	r3, [r4, #0]
 804498c:	b138      	cbz	r0, 804499e <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 804498e:	681b      	ldr	r3, [r3, #0]
 8044990:	05db      	lsls	r3, r3, #23
 8044992:	d502      	bpl.n	804499a <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8044994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044998:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 804499a:	2003      	movs	r0, #3
 804499c:	e00a      	b.n	80449b4 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 804499e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80449a2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80449a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80449a6:	4919      	ldr	r1, [pc, #100]	; (8044a0c <I2C_RequestMemoryWrite+0xa8>)
 80449a8:	4633      	mov	r3, r6
 80449aa:	4620      	mov	r0, r4
 80449ac:	f7ff fef4 	bl	8044798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80449b0:	b118      	cbz	r0, 80449ba <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 80449b2:	2001      	movs	r0, #1
}
 80449b4:	b004      	add	sp, #16
 80449b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80449ba:	6823      	ldr	r3, [r4, #0]
 80449bc:	9003      	str	r0, [sp, #12]
 80449be:	695a      	ldr	r2, [r3, #20]
 80449c0:	9203      	str	r2, [sp, #12]
 80449c2:	699b      	ldr	r3, [r3, #24]
 80449c4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80449c6:	4632      	mov	r2, r6
 80449c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80449ca:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80449cc:	4620      	mov	r0, r4
 80449ce:	f7ff ffa3 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 80449d2:	b140      	cbz	r0, 80449e6 <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80449d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80449d6:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80449d8:	bf01      	itttt	eq
 80449da:	6822      	ldreq	r2, [r4, #0]
 80449dc:	6813      	ldreq	r3, [r2, #0]
 80449de:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80449e2:	6013      	streq	r3, [r2, #0]
 80449e4:	e7e5      	b.n	80449b2 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80449e6:	f1b8 0f01 	cmp.w	r8, #1
 80449ea:	6823      	ldr	r3, [r4, #0]
 80449ec:	d102      	bne.n	80449f4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80449ee:	b2ed      	uxtb	r5, r5
 80449f0:	611d      	str	r5, [r3, #16]
 80449f2:	e7df      	b.n	80449b4 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80449f4:	0a2a      	lsrs	r2, r5, #8
 80449f6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80449f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80449fa:	4632      	mov	r2, r6
 80449fc:	4620      	mov	r0, r4
 80449fe:	f7ff ff8b 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 8044a02:	2800      	cmp	r0, #0
 8044a04:	d1e6      	bne.n	80449d4 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044a06:	6823      	ldr	r3, [r4, #0]
 8044a08:	e7f1      	b.n	80449ee <I2C_RequestMemoryWrite+0x8a>
 8044a0a:	bf00      	nop
 8044a0c:	00010002 	.word	0x00010002

08044a10 <I2C_RequestMemoryRead>:
{
 8044a10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8044a14:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044a16:	6803      	ldr	r3, [r0, #0]
{
 8044a18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8044a1a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044a1c:	681a      	ldr	r2, [r3, #0]
 8044a1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8044a22:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044a24:	681a      	ldr	r2, [r3, #0]
 8044a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8044a2a:	601a      	str	r2, [r3, #0]
{
 8044a2c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044a30:	9500      	str	r5, [sp, #0]
 8044a32:	2200      	movs	r2, #0
 8044a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8044a38:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044a3a:	f7ff ff3c 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044a3e:	6823      	ldr	r3, [r4, #0]
 8044a40:	b148      	cbz	r0, 8044a56 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8044a42:	681b      	ldr	r3, [r3, #0]
 8044a44:	05db      	lsls	r3, r3, #23
 8044a46:	d502      	bpl.n	8044a4e <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8044a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044a4c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8044a4e:	2003      	movs	r0, #3
}
 8044a50:	b004      	add	sp, #16
 8044a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8044a56:	b2ff      	uxtb	r7, r7
 8044a58:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8044a5c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8044a5e:	492a      	ldr	r1, [pc, #168]	; (8044b08 <I2C_RequestMemoryRead+0xf8>)
 8044a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044a62:	462b      	mov	r3, r5
 8044a64:	4620      	mov	r0, r4
 8044a66:	f7ff fe97 	bl	8044798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8044a6a:	b108      	cbz	r0, 8044a70 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8044a6c:	2001      	movs	r0, #1
 8044a6e:	e7ef      	b.n	8044a50 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044a70:	6823      	ldr	r3, [r4, #0]
 8044a72:	9003      	str	r0, [sp, #12]
 8044a74:	695a      	ldr	r2, [r3, #20]
 8044a76:	9203      	str	r2, [sp, #12]
 8044a78:	699b      	ldr	r3, [r3, #24]
 8044a7a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044a7c:	462a      	mov	r2, r5
 8044a7e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044a80:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044a82:	4620      	mov	r0, r4
 8044a84:	f7ff ff48 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 8044a88:	b140      	cbz	r0, 8044a9c <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8044a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044a8c:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044a8e:	bf01      	itttt	eq
 8044a90:	6822      	ldreq	r2, [r4, #0]
 8044a92:	6813      	ldreq	r3, [r2, #0]
 8044a94:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8044a98:	6013      	streq	r3, [r2, #0]
 8044a9a:	e7e7      	b.n	8044a6c <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8044a9c:	f1b8 0f01 	cmp.w	r8, #1
 8044aa0:	6823      	ldr	r3, [r4, #0]
 8044aa2:	d125      	bne.n	8044af0 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044aa4:	b2f6      	uxtb	r6, r6
 8044aa6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044aa8:	462a      	mov	r2, r5
 8044aaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044aac:	4620      	mov	r0, r4
 8044aae:	f7ff ff33 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 8044ab2:	4602      	mov	r2, r0
 8044ab4:	2800      	cmp	r0, #0
 8044ab6:	d1e8      	bne.n	8044a8a <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8044ab8:	6821      	ldr	r1, [r4, #0]
 8044aba:	680b      	ldr	r3, [r1, #0]
 8044abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044ac0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8044ac2:	4620      	mov	r0, r4
 8044ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044ac6:	9500      	str	r5, [sp, #0]
 8044ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8044acc:	f7ff fef3 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044ad0:	6823      	ldr	r3, [r4, #0]
 8044ad2:	2800      	cmp	r0, #0
 8044ad4:	d1b5      	bne.n	8044a42 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8044ad6:	f047 0701 	orr.w	r7, r7, #1
 8044ada:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8044adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044ade:	490a      	ldr	r1, [pc, #40]	; (8044b08 <I2C_RequestMemoryRead+0xf8>)
 8044ae0:	462b      	mov	r3, r5
 8044ae2:	4620      	mov	r0, r4
 8044ae4:	f7ff fe58 	bl	8044798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8044ae8:	3000      	adds	r0, #0
 8044aea:	bf18      	it	ne
 8044aec:	2001      	movne	r0, #1
 8044aee:	e7af      	b.n	8044a50 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8044af0:	0a32      	lsrs	r2, r6, #8
 8044af2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8044af4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044af6:	462a      	mov	r2, r5
 8044af8:	4620      	mov	r0, r4
 8044afa:	f7ff ff0d 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 8044afe:	2800      	cmp	r0, #0
 8044b00:	d1c3      	bne.n	8044a8a <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8044b02:	6823      	ldr	r3, [r4, #0]
 8044b04:	e7ce      	b.n	8044aa4 <I2C_RequestMemoryRead+0x94>
 8044b06:	bf00      	nop
 8044b08:	00010002 	.word	0x00010002

08044b0c <HAL_I2C_Init>:
{
 8044b0c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8044b0e:	4604      	mov	r4, r0
 8044b10:	b908      	cbnz	r0, 8044b16 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8044b12:	2001      	movs	r0, #1
}
 8044b14:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8044b16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8044b1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8044b1e:	b91b      	cbnz	r3, 8044b28 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8044b20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8044b24:	f00a ff7e 	bl	804fa24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8044b28:	2324      	movs	r3, #36	; 0x24
 8044b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8044b2e:	6823      	ldr	r3, [r4, #0]
 8044b30:	681a      	ldr	r2, [r3, #0]
 8044b32:	f022 0201 	bic.w	r2, r2, #1
 8044b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8044b38:	681a      	ldr	r2, [r3, #0]
 8044b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8044b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8044b40:	681a      	ldr	r2, [r3, #0]
 8044b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8044b46:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8044b48:	f000 fcbe 	bl	80454c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044b4c:	6863      	ldr	r3, [r4, #4]
 8044b4e:	4a41      	ldr	r2, [pc, #260]	; (8044c54 <HAL_I2C_Init+0x148>)
 8044b50:	4293      	cmp	r3, r2
 8044b52:	d84d      	bhi.n	8044bf0 <HAL_I2C_Init+0xe4>
 8044b54:	4a40      	ldr	r2, [pc, #256]	; (8044c58 <HAL_I2C_Init+0x14c>)
 8044b56:	4290      	cmp	r0, r2
 8044b58:	d9db      	bls.n	8044b12 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044b5a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8044b5c:	493f      	ldr	r1, [pc, #252]	; (8044c5c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044b5e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8044b60:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044b64:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044b68:	430d      	orrs	r5, r1
 8044b6a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044b6c:	6a15      	ldr	r5, [r2, #32]
 8044b6e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044b72:	3101      	adds	r1, #1
 8044b74:	4329      	orrs	r1, r5
 8044b76:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044b78:	69d1      	ldr	r1, [r2, #28]
 8044b7a:	4d36      	ldr	r5, [pc, #216]	; (8044c54 <HAL_I2C_Init+0x148>)
 8044b7c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8044b80:	42ab      	cmp	r3, r5
 8044b82:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044b86:	f100 30ff 	add.w	r0, r0, #4294967295
 8044b8a:	d848      	bhi.n	8044c1e <HAL_I2C_Init+0x112>
 8044b8c:	005b      	lsls	r3, r3, #1
 8044b8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8044b92:	1c43      	adds	r3, r0, #1
 8044b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044b98:	2b04      	cmp	r3, #4
 8044b9a:	bf38      	it	cc
 8044b9c:	2304      	movcc	r3, #4
 8044b9e:	430b      	orrs	r3, r1
 8044ba0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8044ba2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8044ba6:	6811      	ldr	r1, [r2, #0]
 8044ba8:	4303      	orrs	r3, r0
 8044baa:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8044bae:	430b      	orrs	r3, r1
 8044bb0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8044bb2:	6891      	ldr	r1, [r2, #8]
 8044bb4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8044bb8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8044bbc:	4303      	orrs	r3, r0
 8044bbe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044bc2:	430b      	orrs	r3, r1
 8044bc4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8044bc6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8044bca:	68d1      	ldr	r1, [r2, #12]
 8044bcc:	4303      	orrs	r3, r0
 8044bce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8044bd2:	430b      	orrs	r3, r1
 8044bd4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8044bd6:	6813      	ldr	r3, [r2, #0]
 8044bd8:	f043 0301 	orr.w	r3, r3, #1
 8044bdc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044bde:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8044be0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044be2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8044be4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8044be8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8044bea:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8044bee:	e791      	b.n	8044b14 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044bf0:	4a1b      	ldr	r2, [pc, #108]	; (8044c60 <HAL_I2C_Init+0x154>)
 8044bf2:	4290      	cmp	r0, r2
 8044bf4:	d98d      	bls.n	8044b12 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044bf6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8044bf8:	4e18      	ldr	r6, [pc, #96]	; (8044c5c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044bfa:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8044bfc:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044c00:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044c04:	4335      	orrs	r5, r6
 8044c06:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044c08:	6a15      	ldr	r5, [r2, #32]
 8044c0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8044c0e:	4371      	muls	r1, r6
 8044c10:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8044c14:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8044c18:	fbb1 f1f6 	udiv	r1, r1, r6
 8044c1c:	e7a9      	b.n	8044b72 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044c1e:	68a5      	ldr	r5, [r4, #8]
 8044c20:	b955      	cbnz	r5, 8044c38 <HAL_I2C_Init+0x12c>
 8044c22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8044c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8044c2a:	1c43      	adds	r3, r0, #1
 8044c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044c30:	b16b      	cbz	r3, 8044c4e <HAL_I2C_Init+0x142>
 8044c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8044c36:	e7b2      	b.n	8044b9e <HAL_I2C_Init+0x92>
 8044c38:	2519      	movs	r5, #25
 8044c3a:	436b      	muls	r3, r5
 8044c3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8044c40:	1c43      	adds	r3, r0, #1
 8044c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044c46:	b113      	cbz	r3, 8044c4e <HAL_I2C_Init+0x142>
 8044c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8044c4c:	e7a7      	b.n	8044b9e <HAL_I2C_Init+0x92>
 8044c4e:	2301      	movs	r3, #1
 8044c50:	e7a5      	b.n	8044b9e <HAL_I2C_Init+0x92>
 8044c52:	bf00      	nop
 8044c54:	000186a0 	.word	0x000186a0
 8044c58:	001e847f 	.word	0x001e847f
 8044c5c:	000f4240 	.word	0x000f4240
 8044c60:	003d08ff 	.word	0x003d08ff

08044c64 <HAL_I2C_Mem_Write>:
{
 8044c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8044c68:	4604      	mov	r4, r0
 8044c6a:	4699      	mov	r9, r3
 8044c6c:	460f      	mov	r7, r1
 8044c6e:	4690      	mov	r8, r2
 8044c70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8044c72:	f7fe fdc1 	bl	80437f8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044c76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8044c7a:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8044c7c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044c7e:	d003      	beq.n	8044c88 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8044c80:	2002      	movs	r0, #2
}
 8044c82:	b003      	add	sp, #12
 8044c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8044c88:	9000      	str	r0, [sp, #0]
 8044c8a:	2319      	movs	r3, #25
 8044c8c:	2201      	movs	r2, #1
 8044c8e:	493b      	ldr	r1, [pc, #236]	; (8044d7c <HAL_I2C_Mem_Write+0x118>)
 8044c90:	4620      	mov	r0, r4
 8044c92:	f7ff fe10 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044c96:	2800      	cmp	r0, #0
 8044c98:	d1f2      	bne.n	8044c80 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8044c9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8044c9e:	2b01      	cmp	r3, #1
 8044ca0:	d0ee      	beq.n	8044c80 <HAL_I2C_Mem_Write+0x1c>
 8044ca2:	2301      	movs	r3, #1
 8044ca4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8044ca8:	6823      	ldr	r3, [r4, #0]
 8044caa:	681a      	ldr	r2, [r3, #0]
 8044cac:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8044cae:	bf5e      	ittt	pl
 8044cb0:	681a      	ldrpl	r2, [r3, #0]
 8044cb2:	f042 0201 	orrpl.w	r2, r2, #1
 8044cb6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8044cb8:	681a      	ldr	r2, [r3, #0]
 8044cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044cbe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8044cc0:	2321      	movs	r3, #33	; 0x21
 8044cc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8044cc6:	2340      	movs	r3, #64	; 0x40
 8044cc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044ccc:	2300      	movs	r3, #0
 8044cce:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8044cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044cd2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8044cd4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8044cd8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8044cda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044cdc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8044cde:	4b28      	ldr	r3, [pc, #160]	; (8044d80 <HAL_I2C_Mem_Write+0x11c>)
 8044ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8044ce2:	e9cd 6500 	strd	r6, r5, [sp]
 8044ce6:	464b      	mov	r3, r9
 8044ce8:	4642      	mov	r2, r8
 8044cea:	4639      	mov	r1, r7
 8044cec:	4620      	mov	r0, r4
 8044cee:	f7ff fe39 	bl	8044964 <I2C_RequestMemoryWrite>
 8044cf2:	2800      	cmp	r0, #0
 8044cf4:	d02a      	beq.n	8044d4c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8044cf6:	2001      	movs	r0, #1
 8044cf8:	e7c3      	b.n	8044c82 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044cfa:	f7ff fe0d 	bl	8044918 <I2C_WaitOnTXEFlagUntilTimeout>
 8044cfe:	b140      	cbz	r0, 8044d12 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8044d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044d02:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044d04:	bf01      	itttt	eq
 8044d06:	6822      	ldreq	r2, [r4, #0]
 8044d08:	6813      	ldreq	r3, [r2, #0]
 8044d0a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8044d0e:	6013      	streq	r3, [r2, #0]
 8044d10:	e7f1      	b.n	8044cf6 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8044d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044d14:	6827      	ldr	r7, [r4, #0]
 8044d16:	461a      	mov	r2, r3
 8044d18:	f812 1b01 	ldrb.w	r1, [r2], #1
 8044d1c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8044d1e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8044d20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8044d22:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8044d24:	3a01      	subs	r2, #1
 8044d26:	b292      	uxth	r2, r2
 8044d28:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044d2a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8044d2c:	1e48      	subs	r0, r1, #1
 8044d2e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044d30:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8044d32:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8044d34:	d50a      	bpl.n	8044d4c <HAL_I2C_Mem_Write+0xe8>
 8044d36:	b148      	cbz	r0, 8044d4c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8044d38:	785a      	ldrb	r2, [r3, #1]
 8044d3a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8044d3c:	3302      	adds	r3, #2
 8044d3e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8044d40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044d42:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8044d44:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8044d46:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8044d48:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8044d4a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8044d4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044d4e:	462a      	mov	r2, r5
 8044d50:	4631      	mov	r1, r6
 8044d52:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8044d54:	2b00      	cmp	r3, #0
 8044d56:	d1d0      	bne.n	8044cfa <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044d58:	f7ff fd58 	bl	804480c <I2C_WaitOnBTFFlagUntilTimeout>
 8044d5c:	2800      	cmp	r0, #0
 8044d5e:	d1cf      	bne.n	8044d00 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044d60:	6822      	ldr	r2, [r4, #0]
 8044d62:	6813      	ldr	r3, [r2, #0]
 8044d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044d68:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8044d6a:	2320      	movs	r3, #32
 8044d6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8044d70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8044d74:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8044d78:	e783      	b.n	8044c82 <HAL_I2C_Mem_Write+0x1e>
 8044d7a:	bf00      	nop
 8044d7c:	00100002 	.word	0x00100002
 8044d80:	ffff0000 	.word	0xffff0000

08044d84 <HAL_I2C_Mem_Read>:
{
 8044d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044d88:	4604      	mov	r4, r0
 8044d8a:	b087      	sub	sp, #28
 8044d8c:	4699      	mov	r9, r3
 8044d8e:	460d      	mov	r5, r1
 8044d90:	4690      	mov	r8, r2
 8044d92:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8044d94:	f7fe fd30 	bl	80437f8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044d98:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8044d9c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8044d9e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8044da0:	d004      	beq.n	8044dac <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8044da2:	2502      	movs	r5, #2
}
 8044da4:	4628      	mov	r0, r5
 8044da6:	b007      	add	sp, #28
 8044da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8044dac:	9000      	str	r0, [sp, #0]
 8044dae:	2319      	movs	r3, #25
 8044db0:	2201      	movs	r2, #1
 8044db2:	4977      	ldr	r1, [pc, #476]	; (8044f90 <HAL_I2C_Mem_Read+0x20c>)
 8044db4:	4620      	mov	r0, r4
 8044db6:	f7ff fd7e 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044dba:	2800      	cmp	r0, #0
 8044dbc:	d1f1      	bne.n	8044da2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8044dbe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8044dc2:	2b01      	cmp	r3, #1
 8044dc4:	d0ed      	beq.n	8044da2 <HAL_I2C_Mem_Read+0x1e>
 8044dc6:	2301      	movs	r3, #1
 8044dc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8044dcc:	6823      	ldr	r3, [r4, #0]
 8044dce:	681a      	ldr	r2, [r3, #0]
 8044dd0:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8044dd2:	bf5e      	ittt	pl
 8044dd4:	681a      	ldrpl	r2, [r3, #0]
 8044dd6:	f042 0201 	orrpl.w	r2, r2, #1
 8044dda:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8044ddc:	681a      	ldr	r2, [r3, #0]
 8044dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8044de2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8044de4:	2322      	movs	r3, #34	; 0x22
 8044de6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8044dea:	2340      	movs	r3, #64	; 0x40
 8044dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044df0:	2300      	movs	r3, #0
 8044df2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8044df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8044df6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8044df8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8044dfc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8044dfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044e00:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8044e02:	4b64      	ldr	r3, [pc, #400]	; (8044f94 <HAL_I2C_Mem_Read+0x210>)
 8044e04:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8044e06:	4629      	mov	r1, r5
 8044e08:	e9cd 7600 	strd	r7, r6, [sp]
 8044e0c:	464b      	mov	r3, r9
 8044e0e:	4642      	mov	r2, r8
 8044e10:	4620      	mov	r0, r4
 8044e12:	f7ff fdfd 	bl	8044a10 <I2C_RequestMemoryRead>
 8044e16:	4605      	mov	r5, r0
 8044e18:	b108      	cbz	r0, 8044e1e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8044e1a:	2501      	movs	r5, #1
 8044e1c:	e7c2      	b.n	8044da4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8044e1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8044e20:	6823      	ldr	r3, [r4, #0]
 8044e22:	b992      	cbnz	r2, 8044e4a <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044e24:	9002      	str	r0, [sp, #8]
 8044e26:	695a      	ldr	r2, [r3, #20]
 8044e28:	9202      	str	r2, [sp, #8]
 8044e2a:	699a      	ldr	r2, [r3, #24]
 8044e2c:	9202      	str	r2, [sp, #8]
 8044e2e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044e30:	681a      	ldr	r2, [r3, #0]
 8044e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044e36:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8044e38:	2320      	movs	r3, #32
 8044e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8044e3e:	2300      	movs	r3, #0
 8044e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8044e44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8044e48:	e7ac      	b.n	8044da4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8044e4a:	2a01      	cmp	r2, #1
 8044e4c:	d12c      	bne.n	8044ea8 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044e4e:	681a      	ldr	r2, [r3, #0]
 8044e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8044e54:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044e56:	9003      	str	r0, [sp, #12]
 8044e58:	695a      	ldr	r2, [r3, #20]
 8044e5a:	9203      	str	r2, [sp, #12]
 8044e5c:	699a      	ldr	r2, [r3, #24]
 8044e5e:	9203      	str	r2, [sp, #12]
 8044e60:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044e62:	681a      	ldr	r2, [r3, #0]
 8044e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044e68:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044e6a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8044f98 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8044e6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8044e70:	2b00      	cmp	r3, #0
 8044e72:	d0e1      	beq.n	8044e38 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8044e74:	2b03      	cmp	r3, #3
 8044e76:	d86e      	bhi.n	8044f56 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8044e78:	2b01      	cmp	r3, #1
 8044e7a:	d12d      	bne.n	8044ed8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044e7c:	4632      	mov	r2, r6
 8044e7e:	4639      	mov	r1, r7
 8044e80:	4620      	mov	r0, r4
 8044e82:	f7ff fce9 	bl	8044858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8044e86:	2800      	cmp	r0, #0
 8044e88:	d1c7      	bne.n	8044e1a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044e8a:	6823      	ldr	r3, [r4, #0]
 8044e8c:	691a      	ldr	r2, [r3, #16]
 8044e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044e90:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8044e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044e94:	3301      	adds	r3, #1
 8044e96:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8044e98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8044e9a:	3b01      	subs	r3, #1
 8044e9c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8044e9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044ea0:	3b01      	subs	r3, #1
 8044ea2:	b29b      	uxth	r3, r3
 8044ea4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8044ea6:	e7e2      	b.n	8044e6e <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8044ea8:	2a02      	cmp	r2, #2
 8044eaa:	d10e      	bne.n	8044eca <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044eac:	681a      	ldr	r2, [r3, #0]
 8044eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8044eb2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8044eb4:	681a      	ldr	r2, [r3, #0]
 8044eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8044eba:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044ebc:	9004      	str	r0, [sp, #16]
 8044ebe:	695a      	ldr	r2, [r3, #20]
 8044ec0:	9204      	str	r2, [sp, #16]
 8044ec2:	699b      	ldr	r3, [r3, #24]
 8044ec4:	9304      	str	r3, [sp, #16]
 8044ec6:	9b04      	ldr	r3, [sp, #16]
 8044ec8:	e7cf      	b.n	8044e6a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8044eca:	9005      	str	r0, [sp, #20]
 8044ecc:	695a      	ldr	r2, [r3, #20]
 8044ece:	9205      	str	r2, [sp, #20]
 8044ed0:	699b      	ldr	r3, [r3, #24]
 8044ed2:	9305      	str	r3, [sp, #20]
 8044ed4:	9b05      	ldr	r3, [sp, #20]
 8044ed6:	e7c8      	b.n	8044e6a <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8044ed8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044eda:	9600      	str	r6, [sp, #0]
 8044edc:	463b      	mov	r3, r7
 8044ede:	f04f 0200 	mov.w	r2, #0
 8044ee2:	4641      	mov	r1, r8
 8044ee4:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8044ee6:	d119      	bne.n	8044f1c <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044ee8:	f7ff fce5 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044eec:	2800      	cmp	r0, #0
 8044eee:	d194      	bne.n	8044e1a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8044ef0:	6823      	ldr	r3, [r4, #0]
 8044ef2:	681a      	ldr	r2, [r3, #0]
 8044ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044ef8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044efa:	691a      	ldr	r2, [r3, #16]
 8044efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044efe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8044f00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8044f02:	1c53      	adds	r3, r2, #1
 8044f04:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8044f06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8044f08:	3b01      	subs	r3, #1
 8044f0a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8044f0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044f0e:	3b01      	subs	r3, #1
 8044f10:	b29b      	uxth	r3, r3
 8044f12:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044f14:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044f16:	691b      	ldr	r3, [r3, #16]
 8044f18:	7053      	strb	r3, [r2, #1]
 8044f1a:	e7ba      	b.n	8044e92 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044f1c:	f7ff fccb 	bl	80448b6 <I2C_WaitOnFlagUntilTimeout>
 8044f20:	4602      	mov	r2, r0
 8044f22:	2800      	cmp	r0, #0
 8044f24:	f47f af79 	bne.w	8044e1a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8044f28:	6823      	ldr	r3, [r4, #0]
 8044f2a:	6819      	ldr	r1, [r3, #0]
 8044f2c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8044f30:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044f32:	6919      	ldr	r1, [r3, #16]
 8044f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044f36:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8044f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044f3a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8044f3c:	3301      	adds	r3, #1
 8044f3e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8044f40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8044f42:	3b01      	subs	r3, #1
 8044f44:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8044f46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044f48:	3b01      	subs	r3, #1
 8044f4a:	b29b      	uxth	r3, r3
 8044f4c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8044f4e:	4641      	mov	r1, r8
 8044f50:	463b      	mov	r3, r7
 8044f52:	4620      	mov	r0, r4
 8044f54:	e7c8      	b.n	8044ee8 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8044f56:	4632      	mov	r2, r6
 8044f58:	4639      	mov	r1, r7
 8044f5a:	4620      	mov	r0, r4
 8044f5c:	f7ff fc7c 	bl	8044858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8044f60:	2800      	cmp	r0, #0
 8044f62:	f47f af5a 	bne.w	8044e1a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8044f66:	6823      	ldr	r3, [r4, #0]
 8044f68:	691a      	ldr	r2, [r3, #16]
 8044f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8044f6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8044f6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8044f70:	1c53      	adds	r3, r2, #1
 8044f72:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8044f74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8044f76:	3b01      	subs	r3, #1
 8044f78:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8044f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8044f7c:	3b01      	subs	r3, #1
 8044f7e:	b29b      	uxth	r3, r3
 8044f80:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8044f82:	6823      	ldr	r3, [r4, #0]
 8044f84:	6959      	ldr	r1, [r3, #20]
 8044f86:	0749      	lsls	r1, r1, #29
 8044f88:	f57f af71 	bpl.w	8044e6e <HAL_I2C_Mem_Read+0xea>
 8044f8c:	e7c3      	b.n	8044f16 <HAL_I2C_Mem_Read+0x192>
 8044f8e:	bf00      	nop
 8044f90:	00100002 	.word	0x00100002
 8044f94:	ffff0000 	.word	0xffff0000
 8044f98:	00010004 	.word	0x00010004

08044f9c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8044f9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8044f9e:	4604      	mov	r4, r0
 8044fa0:	b1d8      	cbz	r0, 8044fda <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8044fa2:	6803      	ldr	r3, [r0, #0]
 8044fa4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8044fa8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8044faa:	f245 5255 	movw	r2, #21845	; 0x5555
 8044fae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8044fb0:	6842      	ldr	r2, [r0, #4]
 8044fb2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8044fb4:	6882      	ldr	r2, [r0, #8]
 8044fb6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8044fb8:	f7fe fc1e 	bl	80437f8 <HAL_GetTick>
 8044fbc:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8044fbe:	6823      	ldr	r3, [r4, #0]
 8044fc0:	68d8      	ldr	r0, [r3, #12]
 8044fc2:	b918      	cbnz	r0, 8044fcc <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8044fc4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8044fc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8044fca:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8044fcc:	f7fe fc14 	bl	80437f8 <HAL_GetTick>
 8044fd0:	1b40      	subs	r0, r0, r5
 8044fd2:	2830      	cmp	r0, #48	; 0x30
 8044fd4:	d9f3      	bls.n	8044fbe <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8044fd6:	2003      	movs	r0, #3
 8044fd8:	e7f7      	b.n	8044fca <HAL_IWDG_Init+0x2e>
    return HAL_ERROR;
 8044fda:	2001      	movs	r0, #1
 8044fdc:	e7f5      	b.n	8044fca <HAL_IWDG_Init+0x2e>

08044fde <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8044fde:	6803      	ldr	r3, [r0, #0]
 8044fe0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8044fe4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8044fe6:	2000      	movs	r0, #0
 8044fe8:	4770      	bx	lr
	...

08044fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8044fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8044ff0:	4604      	mov	r4, r0
 8044ff2:	b908      	cbnz	r0, 8044ff8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8044ff4:	2001      	movs	r0, #1
 8044ff6:	e03f      	b.n	8045078 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8044ff8:	6803      	ldr	r3, [r0, #0]
 8044ffa:	07dd      	lsls	r5, r3, #31
 8044ffc:	d410      	bmi.n	8045020 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8044ffe:	6823      	ldr	r3, [r4, #0]
 8045000:	0798      	lsls	r0, r3, #30
 8045002:	d45a      	bmi.n	80450ba <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8045004:	6823      	ldr	r3, [r4, #0]
 8045006:	071a      	lsls	r2, r3, #28
 8045008:	f100 809c 	bmi.w	8045144 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804500c:	6823      	ldr	r3, [r4, #0]
 804500e:	075b      	lsls	r3, r3, #29
 8045010:	f100 80ba 	bmi.w	8045188 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8045014:	69a0      	ldr	r0, [r4, #24]
 8045016:	2800      	cmp	r0, #0
 8045018:	f040 811b 	bne.w	8045252 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 804501c:	2000      	movs	r0, #0
 804501e:	e02b      	b.n	8045078 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8045020:	4ba7      	ldr	r3, [pc, #668]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 8045022:	689a      	ldr	r2, [r3, #8]
 8045024:	f002 020c 	and.w	r2, r2, #12
 8045028:	2a04      	cmp	r2, #4
 804502a:	d007      	beq.n	804503c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804502c:	689a      	ldr	r2, [r3, #8]
 804502e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8045032:	2a08      	cmp	r2, #8
 8045034:	d10a      	bne.n	804504c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8045036:	685b      	ldr	r3, [r3, #4]
 8045038:	0259      	lsls	r1, r3, #9
 804503a:	d507      	bpl.n	804504c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804503c:	4ba0      	ldr	r3, [pc, #640]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 804503e:	681b      	ldr	r3, [r3, #0]
 8045040:	039a      	lsls	r2, r3, #14
 8045042:	d5dc      	bpl.n	8044ffe <HAL_RCC_OscConfig+0x12>
 8045044:	6863      	ldr	r3, [r4, #4]
 8045046:	2b00      	cmp	r3, #0
 8045048:	d1d9      	bne.n	8044ffe <HAL_RCC_OscConfig+0x12>
 804504a:	e7d3      	b.n	8044ff4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804504c:	6863      	ldr	r3, [r4, #4]
 804504e:	4d9c      	ldr	r5, [pc, #624]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 8045050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8045054:	d113      	bne.n	804507e <HAL_RCC_OscConfig+0x92>
 8045056:	682b      	ldr	r3, [r5, #0]
 8045058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804505c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 804505e:	f7fe fbcb 	bl	80437f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045062:	4d97      	ldr	r5, [pc, #604]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8045064:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045066:	682b      	ldr	r3, [r5, #0]
 8045068:	039b      	lsls	r3, r3, #14
 804506a:	d4c8      	bmi.n	8044ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804506c:	f7fe fbc4 	bl	80437f8 <HAL_GetTick>
 8045070:	1b80      	subs	r0, r0, r6
 8045072:	2864      	cmp	r0, #100	; 0x64
 8045074:	d9f7      	bls.n	8045066 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8045076:	2003      	movs	r0, #3
}
 8045078:	b002      	add	sp, #8
 804507a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804507e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8045082:	d104      	bne.n	804508e <HAL_RCC_OscConfig+0xa2>
 8045084:	682b      	ldr	r3, [r5, #0]
 8045086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804508a:	602b      	str	r3, [r5, #0]
 804508c:	e7e3      	b.n	8045056 <HAL_RCC_OscConfig+0x6a>
 804508e:	682a      	ldr	r2, [r5, #0]
 8045090:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8045094:	602a      	str	r2, [r5, #0]
 8045096:	682a      	ldr	r2, [r5, #0]
 8045098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 804509c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804509e:	2b00      	cmp	r3, #0
 80450a0:	d1dd      	bne.n	804505e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80450a2:	f7fe fba9 	bl	80437f8 <HAL_GetTick>
 80450a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80450a8:	682b      	ldr	r3, [r5, #0]
 80450aa:	039f      	lsls	r7, r3, #14
 80450ac:	d5a7      	bpl.n	8044ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80450ae:	f7fe fba3 	bl	80437f8 <HAL_GetTick>
 80450b2:	1b80      	subs	r0, r0, r6
 80450b4:	2864      	cmp	r0, #100	; 0x64
 80450b6:	d9f7      	bls.n	80450a8 <HAL_RCC_OscConfig+0xbc>
 80450b8:	e7dd      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80450ba:	4b81      	ldr	r3, [pc, #516]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 80450bc:	689a      	ldr	r2, [r3, #8]
 80450be:	f012 0f0c 	tst.w	r2, #12
 80450c2:	d007      	beq.n	80450d4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80450c4:	689a      	ldr	r2, [r3, #8]
 80450c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80450ca:	2a08      	cmp	r2, #8
 80450cc:	d111      	bne.n	80450f2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80450ce:	685b      	ldr	r3, [r3, #4]
 80450d0:	025e      	lsls	r6, r3, #9
 80450d2:	d40e      	bmi.n	80450f2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80450d4:	4b7a      	ldr	r3, [pc, #488]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 80450d6:	681a      	ldr	r2, [r3, #0]
 80450d8:	0795      	lsls	r5, r2, #30
 80450da:	d502      	bpl.n	80450e2 <HAL_RCC_OscConfig+0xf6>
 80450dc:	68e2      	ldr	r2, [r4, #12]
 80450de:	2a01      	cmp	r2, #1
 80450e0:	d188      	bne.n	8044ff4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80450e2:	681a      	ldr	r2, [r3, #0]
 80450e4:	6921      	ldr	r1, [r4, #16]
 80450e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80450ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80450ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80450f0:	e788      	b.n	8045004 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80450f2:	68e2      	ldr	r2, [r4, #12]
 80450f4:	4b73      	ldr	r3, [pc, #460]	; (80452c4 <HAL_RCC_OscConfig+0x2d8>)
 80450f6:	b1b2      	cbz	r2, 8045126 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80450f8:	2201      	movs	r2, #1
 80450fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80450fc:	f7fe fb7c 	bl	80437f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045100:	4d6f      	ldr	r5, [pc, #444]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8045102:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045104:	682b      	ldr	r3, [r5, #0]
 8045106:	0798      	lsls	r0, r3, #30
 8045108:	d507      	bpl.n	804511a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804510a:	682b      	ldr	r3, [r5, #0]
 804510c:	6922      	ldr	r2, [r4, #16]
 804510e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8045112:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8045116:	602b      	str	r3, [r5, #0]
 8045118:	e774      	b.n	8045004 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804511a:	f7fe fb6d 	bl	80437f8 <HAL_GetTick>
 804511e:	1b80      	subs	r0, r0, r6
 8045120:	2802      	cmp	r0, #2
 8045122:	d9ef      	bls.n	8045104 <HAL_RCC_OscConfig+0x118>
 8045124:	e7a7      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8045126:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8045128:	f7fe fb66 	bl	80437f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804512c:	4d64      	ldr	r5, [pc, #400]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 804512e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8045130:	682b      	ldr	r3, [r5, #0]
 8045132:	0799      	lsls	r1, r3, #30
 8045134:	f57f af66 	bpl.w	8045004 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8045138:	f7fe fb5e 	bl	80437f8 <HAL_GetTick>
 804513c:	1b80      	subs	r0, r0, r6
 804513e:	2802      	cmp	r0, #2
 8045140:	d9f6      	bls.n	8045130 <HAL_RCC_OscConfig+0x144>
 8045142:	e798      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8045144:	6962      	ldr	r2, [r4, #20]
 8045146:	4b60      	ldr	r3, [pc, #384]	; (80452c8 <HAL_RCC_OscConfig+0x2dc>)
 8045148:	b17a      	cbz	r2, 804516a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 804514a:	2201      	movs	r2, #1
 804514c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804514e:	f7fe fb53 	bl	80437f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8045152:	4d5b      	ldr	r5, [pc, #364]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8045154:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8045156:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8045158:	079f      	lsls	r7, r3, #30
 804515a:	f53f af57 	bmi.w	804500c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804515e:	f7fe fb4b 	bl	80437f8 <HAL_GetTick>
 8045162:	1b80      	subs	r0, r0, r6
 8045164:	2802      	cmp	r0, #2
 8045166:	d9f6      	bls.n	8045156 <HAL_RCC_OscConfig+0x16a>
 8045168:	e785      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 804516a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 804516c:	f7fe fb44 	bl	80437f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8045170:	4d53      	ldr	r5, [pc, #332]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8045172:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8045174:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8045176:	0798      	lsls	r0, r3, #30
 8045178:	f57f af48 	bpl.w	804500c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804517c:	f7fe fb3c 	bl	80437f8 <HAL_GetTick>
 8045180:	1b80      	subs	r0, r0, r6
 8045182:	2802      	cmp	r0, #2
 8045184:	d9f6      	bls.n	8045174 <HAL_RCC_OscConfig+0x188>
 8045186:	e776      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8045188:	4b4d      	ldr	r3, [pc, #308]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 804518a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804518c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8045190:	d128      	bne.n	80451e4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8045192:	9201      	str	r2, [sp, #4]
 8045194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8045196:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804519a:	641a      	str	r2, [r3, #64]	; 0x40
 804519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80451a2:	9301      	str	r3, [sp, #4]
 80451a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80451a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80451a8:	4d48      	ldr	r5, [pc, #288]	; (80452cc <HAL_RCC_OscConfig+0x2e0>)
 80451aa:	682b      	ldr	r3, [r5, #0]
 80451ac:	05d9      	lsls	r1, r3, #23
 80451ae:	d51b      	bpl.n	80451e8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80451b0:	68a3      	ldr	r3, [r4, #8]
 80451b2:	4d43      	ldr	r5, [pc, #268]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 80451b4:	2b01      	cmp	r3, #1
 80451b6:	d127      	bne.n	8045208 <HAL_RCC_OscConfig+0x21c>
 80451b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80451ba:	f043 0301 	orr.w	r3, r3, #1
 80451be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80451c0:	f7fe fb1a 	bl	80437f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80451c4:	4d3e      	ldr	r5, [pc, #248]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80451c6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80451c8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80451cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80451ce:	079b      	lsls	r3, r3, #30
 80451d0:	d539      	bpl.n	8045246 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80451d2:	2e00      	cmp	r6, #0
 80451d4:	f43f af1e 	beq.w	8045014 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80451d8:	4a39      	ldr	r2, [pc, #228]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 80451da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80451dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80451e0:	6413      	str	r3, [r2, #64]	; 0x40
 80451e2:	e717      	b.n	8045014 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80451e4:	2600      	movs	r6, #0
 80451e6:	e7df      	b.n	80451a8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80451e8:	682b      	ldr	r3, [r5, #0]
 80451ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80451ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80451f0:	f7fe fb02 	bl	80437f8 <HAL_GetTick>
 80451f4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80451f6:	682b      	ldr	r3, [r5, #0]
 80451f8:	05da      	lsls	r2, r3, #23
 80451fa:	d4d9      	bmi.n	80451b0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80451fc:	f7fe fafc 	bl	80437f8 <HAL_GetTick>
 8045200:	1bc0      	subs	r0, r0, r7
 8045202:	2802      	cmp	r0, #2
 8045204:	d9f7      	bls.n	80451f6 <HAL_RCC_OscConfig+0x20a>
 8045206:	e736      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8045208:	2b05      	cmp	r3, #5
 804520a:	d104      	bne.n	8045216 <HAL_RCC_OscConfig+0x22a>
 804520c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 804520e:	f043 0304 	orr.w	r3, r3, #4
 8045212:	672b      	str	r3, [r5, #112]	; 0x70
 8045214:	e7d0      	b.n	80451b8 <HAL_RCC_OscConfig+0x1cc>
 8045216:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8045218:	f022 0201 	bic.w	r2, r2, #1
 804521c:	672a      	str	r2, [r5, #112]	; 0x70
 804521e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8045220:	f022 0204 	bic.w	r2, r2, #4
 8045224:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8045226:	2b00      	cmp	r3, #0
 8045228:	d1ca      	bne.n	80451c0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 804522a:	f7fe fae5 	bl	80437f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804522e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8045232:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8045234:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8045236:	0798      	lsls	r0, r3, #30
 8045238:	d5cb      	bpl.n	80451d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804523a:	f7fe fadd 	bl	80437f8 <HAL_GetTick>
 804523e:	1bc0      	subs	r0, r0, r7
 8045240:	4540      	cmp	r0, r8
 8045242:	d9f7      	bls.n	8045234 <HAL_RCC_OscConfig+0x248>
 8045244:	e717      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045246:	f7fe fad7 	bl	80437f8 <HAL_GetTick>
 804524a:	1bc0      	subs	r0, r0, r7
 804524c:	4540      	cmp	r0, r8
 804524e:	d9bd      	bls.n	80451cc <HAL_RCC_OscConfig+0x1e0>
 8045250:	e711      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8045252:	4d1b      	ldr	r5, [pc, #108]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
 8045254:	68ab      	ldr	r3, [r5, #8]
 8045256:	f003 030c 	and.w	r3, r3, #12
 804525a:	2b08      	cmp	r3, #8
 804525c:	d047      	beq.n	80452ee <HAL_RCC_OscConfig+0x302>
 804525e:	4e1c      	ldr	r6, [pc, #112]	; (80452d0 <HAL_RCC_OscConfig+0x2e4>)
 8045260:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8045262:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8045264:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8045266:	d135      	bne.n	80452d4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8045268:	f7fe fac6 	bl	80437f8 <HAL_GetTick>
 804526c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804526e:	682b      	ldr	r3, [r5, #0]
 8045270:	0199      	lsls	r1, r3, #6
 8045272:	d41e      	bmi.n	80452b2 <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8045274:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8045278:	4313      	orrs	r3, r2
 804527a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804527c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8045280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8045282:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8045286:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045288:	4c0d      	ldr	r4, [pc, #52]	; (80452c0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804528a:	0852      	lsrs	r2, r2, #1
 804528c:	3a01      	subs	r2, #1
 804528e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8045292:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8045294:	2301      	movs	r3, #1
 8045296:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8045298:	f7fe faae 	bl	80437f8 <HAL_GetTick>
 804529c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804529e:	6823      	ldr	r3, [r4, #0]
 80452a0:	019a      	lsls	r2, r3, #6
 80452a2:	f53f aebb 	bmi.w	804501c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80452a6:	f7fe faa7 	bl	80437f8 <HAL_GetTick>
 80452aa:	1b40      	subs	r0, r0, r5
 80452ac:	2802      	cmp	r0, #2
 80452ae:	d9f6      	bls.n	804529e <HAL_RCC_OscConfig+0x2b2>
 80452b0:	e6e1      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80452b2:	f7fe faa1 	bl	80437f8 <HAL_GetTick>
 80452b6:	1bc0      	subs	r0, r0, r7
 80452b8:	2802      	cmp	r0, #2
 80452ba:	d9d8      	bls.n	804526e <HAL_RCC_OscConfig+0x282>
 80452bc:	e6db      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
 80452be:	bf00      	nop
 80452c0:	40023800 	.word	0x40023800
 80452c4:	42470000 	.word	0x42470000
 80452c8:	42470e80 	.word	0x42470e80
 80452cc:	40007000 	.word	0x40007000
 80452d0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80452d4:	f7fe fa90 	bl	80437f8 <HAL_GetTick>
 80452d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80452da:	682b      	ldr	r3, [r5, #0]
 80452dc:	019b      	lsls	r3, r3, #6
 80452de:	f57f ae9d 	bpl.w	804501c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80452e2:	f7fe fa89 	bl	80437f8 <HAL_GetTick>
 80452e6:	1b00      	subs	r0, r0, r4
 80452e8:	2802      	cmp	r0, #2
 80452ea:	d9f6      	bls.n	80452da <HAL_RCC_OscConfig+0x2ee>
 80452ec:	e6c3      	b.n	8045076 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80452ee:	2801      	cmp	r0, #1
 80452f0:	f43f aec2 	beq.w	8045078 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 80452f4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80452f6:	69e3      	ldr	r3, [r4, #28]
 80452f8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80452fc:	429a      	cmp	r2, r3
 80452fe:	f47f ae79 	bne.w	8044ff4 <HAL_RCC_OscConfig+0x8>
 8045302:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8045304:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045308:	4293      	cmp	r3, r2
 804530a:	f47f ae73 	bne.w	8044ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804530e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8045310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8045314:	4003      	ands	r3, r0
 8045316:	4293      	cmp	r3, r2
 8045318:	f47f ae6c 	bne.w	8044ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 804531c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 804531e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8045322:	4293      	cmp	r3, r2
 8045324:	f47f ae66 	bne.w	8044ff4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8045328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 804532a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 804532e:	1ac0      	subs	r0, r0, r3
 8045330:	bf18      	it	ne
 8045332:	2001      	movne	r0, #1
 8045334:	e6a0      	b.n	8045078 <HAL_RCC_OscConfig+0x8c>
 8045336:	bf00      	nop

08045338 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8045338:	4913      	ldr	r1, [pc, #76]	; (8045388 <HAL_RCC_GetSysClockFreq+0x50>)
{
 804533a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804533c:	688b      	ldr	r3, [r1, #8]
 804533e:	f003 030c 	and.w	r3, r3, #12
 8045342:	2b04      	cmp	r3, #4
 8045344:	d003      	beq.n	804534e <HAL_RCC_GetSysClockFreq+0x16>
 8045346:	2b08      	cmp	r3, #8
 8045348:	d003      	beq.n	8045352 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804534a:	4810      	ldr	r0, [pc, #64]	; (804538c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 804534c:	e000      	b.n	8045350 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 804534e:	4810      	ldr	r0, [pc, #64]	; (8045390 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8045350:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8045352:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8045354:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045356:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8045358:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804535c:	bf14      	ite	ne
 804535e:	480c      	ldrne	r0, [pc, #48]	; (8045390 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045360:	480a      	ldreq	r0, [pc, #40]	; (804538c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045362:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8045366:	bf18      	it	ne
 8045368:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804536a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804536e:	fba1 0100 	umull	r0, r1, r1, r0
 8045372:	f7fb fda3 	bl	8040ebc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8045376:	4b04      	ldr	r3, [pc, #16]	; (8045388 <HAL_RCC_GetSysClockFreq+0x50>)
 8045378:	685b      	ldr	r3, [r3, #4]
 804537a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 804537e:	3301      	adds	r3, #1
 8045380:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8045382:	fbb0 f0f3 	udiv	r0, r0, r3
 8045386:	e7e3      	b.n	8045350 <HAL_RCC_GetSysClockFreq+0x18>
 8045388:	40023800 	.word	0x40023800
 804538c:	00f42400 	.word	0x00f42400
 8045390:	007a1200 	.word	0x007a1200

08045394 <HAL_RCC_ClockConfig>:
{
 8045394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045398:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 804539a:	4604      	mov	r4, r0
 804539c:	b910      	cbnz	r0, 80453a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 804539e:	2001      	movs	r0, #1
}
 80453a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80453a4:	4b43      	ldr	r3, [pc, #268]	; (80454b4 <HAL_RCC_ClockConfig+0x120>)
 80453a6:	681a      	ldr	r2, [r3, #0]
 80453a8:	f002 020f 	and.w	r2, r2, #15
 80453ac:	428a      	cmp	r2, r1
 80453ae:	d328      	bcc.n	8045402 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80453b0:	6821      	ldr	r1, [r4, #0]
 80453b2:	078f      	lsls	r7, r1, #30
 80453b4:	d42d      	bmi.n	8045412 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80453b6:	07c8      	lsls	r0, r1, #31
 80453b8:	d440      	bmi.n	804543c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80453ba:	4b3e      	ldr	r3, [pc, #248]	; (80454b4 <HAL_RCC_ClockConfig+0x120>)
 80453bc:	681a      	ldr	r2, [r3, #0]
 80453be:	f002 020f 	and.w	r2, r2, #15
 80453c2:	42aa      	cmp	r2, r5
 80453c4:	d865      	bhi.n	8045492 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80453c6:	6822      	ldr	r2, [r4, #0]
 80453c8:	0751      	lsls	r1, r2, #29
 80453ca:	d46b      	bmi.n	80454a4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80453cc:	0713      	lsls	r3, r2, #28
 80453ce:	d507      	bpl.n	80453e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80453d0:	4a39      	ldr	r2, [pc, #228]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
 80453d2:	6921      	ldr	r1, [r4, #16]
 80453d4:	6893      	ldr	r3, [r2, #8]
 80453d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80453da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80453de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80453e0:	f7ff ffaa 	bl	8045338 <HAL_RCC_GetSysClockFreq>
 80453e4:	4b34      	ldr	r3, [pc, #208]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
 80453e6:	4a35      	ldr	r2, [pc, #212]	; (80454bc <HAL_RCC_ClockConfig+0x128>)
 80453e8:	689b      	ldr	r3, [r3, #8]
 80453ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80453ee:	5cd3      	ldrb	r3, [r2, r3]
 80453f0:	40d8      	lsrs	r0, r3
 80453f2:	4b33      	ldr	r3, [pc, #204]	; (80454c0 <HAL_RCC_ClockConfig+0x12c>)
 80453f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80453f6:	4b33      	ldr	r3, [pc, #204]	; (80454c4 <HAL_RCC_ClockConfig+0x130>)
 80453f8:	6818      	ldr	r0, [r3, #0]
 80453fa:	f00a fb99 	bl	804fb30 <HAL_InitTick>
  return HAL_OK;
 80453fe:	2000      	movs	r0, #0
 8045400:	e7ce      	b.n	80453a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8045402:	b2ca      	uxtb	r2, r1
 8045404:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8045406:	681b      	ldr	r3, [r3, #0]
 8045408:	f003 030f 	and.w	r3, r3, #15
 804540c:	428b      	cmp	r3, r1
 804540e:	d1c6      	bne.n	804539e <HAL_RCC_ClockConfig+0xa>
 8045410:	e7ce      	b.n	80453b0 <HAL_RCC_ClockConfig+0x1c>
 8045412:	4b29      	ldr	r3, [pc, #164]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8045414:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8045418:	bf1e      	ittt	ne
 804541a:	689a      	ldrne	r2, [r3, #8]
 804541c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8045420:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8045422:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8045424:	bf42      	ittt	mi
 8045426:	689a      	ldrmi	r2, [r3, #8]
 8045428:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 804542c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804542e:	689a      	ldr	r2, [r3, #8]
 8045430:	68a0      	ldr	r0, [r4, #8]
 8045432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8045436:	4302      	orrs	r2, r0
 8045438:	609a      	str	r2, [r3, #8]
 804543a:	e7bc      	b.n	80453b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804543c:	6862      	ldr	r2, [r4, #4]
 804543e:	4b1e      	ldr	r3, [pc, #120]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
 8045440:	2a01      	cmp	r2, #1
 8045442:	d11c      	bne.n	804547e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045444:	681b      	ldr	r3, [r3, #0]
 8045446:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804544a:	d0a8      	beq.n	804539e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804544c:	4e1a      	ldr	r6, [pc, #104]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
 804544e:	68b3      	ldr	r3, [r6, #8]
 8045450:	f023 0303 	bic.w	r3, r3, #3
 8045454:	4313      	orrs	r3, r2
 8045456:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8045458:	f7fe f9ce 	bl	80437f8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804545c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8045460:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8045462:	68b3      	ldr	r3, [r6, #8]
 8045464:	6862      	ldr	r2, [r4, #4]
 8045466:	f003 030c 	and.w	r3, r3, #12
 804546a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 804546e:	d0a4      	beq.n	80453ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8045470:	f7fe f9c2 	bl	80437f8 <HAL_GetTick>
 8045474:	1bc0      	subs	r0, r0, r7
 8045476:	4540      	cmp	r0, r8
 8045478:	d9f3      	bls.n	8045462 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 804547a:	2003      	movs	r0, #3
 804547c:	e790      	b.n	80453a0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804547e:	1e91      	subs	r1, r2, #2
 8045480:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045482:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8045484:	d802      	bhi.n	804548c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 804548a:	e7de      	b.n	804544a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804548c:	f013 0f02 	tst.w	r3, #2
 8045490:	e7db      	b.n	804544a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8045492:	b2ea      	uxtb	r2, r5
 8045494:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8045496:	681b      	ldr	r3, [r3, #0]
 8045498:	f003 030f 	and.w	r3, r3, #15
 804549c:	42ab      	cmp	r3, r5
 804549e:	f47f af7e 	bne.w	804539e <HAL_RCC_ClockConfig+0xa>
 80454a2:	e790      	b.n	80453c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80454a4:	4904      	ldr	r1, [pc, #16]	; (80454b8 <HAL_RCC_ClockConfig+0x124>)
 80454a6:	68e0      	ldr	r0, [r4, #12]
 80454a8:	688b      	ldr	r3, [r1, #8]
 80454aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80454ae:	4303      	orrs	r3, r0
 80454b0:	608b      	str	r3, [r1, #8]
 80454b2:	e78b      	b.n	80453cc <HAL_RCC_ClockConfig+0x38>
 80454b4:	40023c00 	.word	0x40023c00
 80454b8:	40023800 	.word	0x40023800
 80454bc:	080521b4 	.word	0x080521b4
 80454c0:	20001048 	.word	0x20001048
 80454c4:	20001054 	.word	0x20001054

080454c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80454c8:	4b04      	ldr	r3, [pc, #16]	; (80454dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80454ca:	4a05      	ldr	r2, [pc, #20]	; (80454e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80454cc:	689b      	ldr	r3, [r3, #8]
 80454ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80454d2:	5cd3      	ldrb	r3, [r2, r3]
 80454d4:	4a03      	ldr	r2, [pc, #12]	; (80454e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80454d6:	6810      	ldr	r0, [r2, #0]
}
 80454d8:	40d8      	lsrs	r0, r3
 80454da:	4770      	bx	lr
 80454dc:	40023800 	.word	0x40023800
 80454e0:	080521c4 	.word	0x080521c4
 80454e4:	20001048 	.word	0x20001048

080454e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80454e8:	4b04      	ldr	r3, [pc, #16]	; (80454fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80454ea:	4a05      	ldr	r2, [pc, #20]	; (8045500 <HAL_RCC_GetPCLK2Freq+0x18>)
 80454ec:	689b      	ldr	r3, [r3, #8]
 80454ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80454f2:	5cd3      	ldrb	r3, [r2, r3]
 80454f4:	4a03      	ldr	r2, [pc, #12]	; (8045504 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80454f6:	6810      	ldr	r0, [r2, #0]
}
 80454f8:	40d8      	lsrs	r0, r3
 80454fa:	4770      	bx	lr
 80454fc:	40023800 	.word	0x40023800
 8045500:	080521c4 	.word	0x080521c4
 8045504:	20001048 	.word	0x20001048

08045508 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8045508:	6803      	ldr	r3, [r0, #0]
 804550a:	f013 0f05 	tst.w	r3, #5
{
 804550e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8045510:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8045512:	d105      	bne.n	8045520 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8045514:	6828      	ldr	r0, [r5, #0]
 8045516:	f010 0002 	ands.w	r0, r0, #2
 804551a:	d128      	bne.n	804556e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 804551c:	b003      	add	sp, #12
 804551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8045520:	4c41      	ldr	r4, [pc, #260]	; (8045628 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8045522:	4e42      	ldr	r6, [pc, #264]	; (804562c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8045524:	2300      	movs	r3, #0
 8045526:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8045528:	f7fe f966 	bl	80437f8 <HAL_GetTick>
 804552c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 804552e:	6833      	ldr	r3, [r6, #0]
 8045530:	011b      	lsls	r3, r3, #4
 8045532:	d415      	bmi.n	8045560 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8045534:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8045538:	071b      	lsls	r3, r3, #28
 804553a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 804553e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8045542:	2301      	movs	r3, #1
 8045544:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8045546:	f7fe f957 	bl	80437f8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804554a:	4c38      	ldr	r4, [pc, #224]	; (804562c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 804554c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804554e:	6823      	ldr	r3, [r4, #0]
 8045550:	0118      	lsls	r0, r3, #4
 8045552:	d4df      	bmi.n	8045514 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8045554:	f7fe f950 	bl	80437f8 <HAL_GetTick>
 8045558:	1b80      	subs	r0, r0, r6
 804555a:	2802      	cmp	r0, #2
 804555c:	d9f7      	bls.n	804554e <HAL_RCCEx_PeriphCLKConfig+0x46>
 804555e:	e004      	b.n	804556a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8045560:	f7fe f94a 	bl	80437f8 <HAL_GetTick>
 8045564:	1bc0      	subs	r0, r0, r7
 8045566:	2802      	cmp	r0, #2
 8045568:	d9e1      	bls.n	804552e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 804556a:	2003      	movs	r0, #3
 804556c:	e7d6      	b.n	804551c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 804556e:	2300      	movs	r3, #0
 8045570:	9301      	str	r3, [sp, #4]
 8045572:	4b2e      	ldr	r3, [pc, #184]	; (804562c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8045574:	4c2e      	ldr	r4, [pc, #184]	; (8045630 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8045576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8045578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804557c:	641a      	str	r2, [r3, #64]	; 0x40
 804557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8045584:	9301      	str	r3, [sp, #4]
 8045586:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8045588:	6823      	ldr	r3, [r4, #0]
 804558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804558e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8045590:	f7fe f932 	bl	80437f8 <HAL_GetTick>
 8045594:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8045596:	6823      	ldr	r3, [r4, #0]
 8045598:	05d9      	lsls	r1, r3, #23
 804559a:	d51b      	bpl.n	80455d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 804559c:	4c23      	ldr	r4, [pc, #140]	; (804562c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 804559e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80455a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80455a4:	d11c      	bne.n	80455e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80455a6:	68eb      	ldr	r3, [r5, #12]
 80455a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80455ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80455b0:	4a1e      	ldr	r2, [pc, #120]	; (804562c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80455b2:	d134      	bne.n	804561e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80455b4:	6891      	ldr	r1, [r2, #8]
 80455b6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80455ba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80455be:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80455c2:	4301      	orrs	r1, r0
 80455c4:	6091      	str	r1, [r2, #8]
 80455c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80455c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80455cc:	430b      	orrs	r3, r1
 80455ce:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80455d0:	2000      	movs	r0, #0
 80455d2:	e7a3      	b.n	804551c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80455d4:	f7fe f910 	bl	80437f8 <HAL_GetTick>
 80455d8:	1b80      	subs	r0, r0, r6
 80455da:	2802      	cmp	r0, #2
 80455dc:	d9db      	bls.n	8045596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80455de:	e7c4      	b.n	804556a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80455e0:	68ea      	ldr	r2, [r5, #12]
 80455e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80455e6:	4293      	cmp	r3, r2
 80455e8:	d0dd      	beq.n	80455a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80455ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80455ec:	4a11      	ldr	r2, [pc, #68]	; (8045634 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80455ee:	2101      	movs	r1, #1
 80455f0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80455f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80455f6:	2100      	movs	r1, #0
 80455f8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80455fa:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80455fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80455fe:	07da      	lsls	r2, r3, #31
 8045600:	d5d1      	bpl.n	80455a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8045602:	f7fe f8f9 	bl	80437f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045606:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 804560a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804560c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804560e:	079b      	lsls	r3, r3, #30
 8045610:	d4c9      	bmi.n	80455a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045612:	f7fe f8f1 	bl	80437f8 <HAL_GetTick>
 8045616:	1b80      	subs	r0, r0, r6
 8045618:	42b8      	cmp	r0, r7
 804561a:	d9f7      	bls.n	804560c <HAL_RCCEx_PeriphCLKConfig+0x104>
 804561c:	e7a5      	b.n	804556a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804561e:	6891      	ldr	r1, [r2, #8]
 8045620:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8045624:	e7ce      	b.n	80455c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8045626:	bf00      	nop
 8045628:	42470068 	.word	0x42470068
 804562c:	40023800 	.word	0x40023800
 8045630:	40007000 	.word	0x40007000
 8045634:	42470e40 	.word	0x42470e40

08045638 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8045638:	7f03      	ldrb	r3, [r0, #28]
 804563a:	2b01      	cmp	r3, #1
{
 804563c:	b570      	push	{r4, r5, r6, lr}
 804563e:	4604      	mov	r4, r0
 8045640:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8045644:	d021      	beq.n	804568a <HAL_RTC_DeactivateAlarm+0x52>
 8045646:	2301      	movs	r3, #1
 8045648:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804564a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 804564c:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804564e:	22ca      	movs	r2, #202	; 0xca
 8045650:	625a      	str	r2, [r3, #36]	; 0x24
 8045652:	2253      	movs	r2, #83	; 0x53
 8045654:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8045656:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804565a:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 804565c:	d123      	bne.n	80456a6 <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 804565e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8045662:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8045664:	689a      	ldr	r2, [r3, #8]
 8045666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804566a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 804566c:	f7fe f8c4 	bl	80437f8 <HAL_GetTick>
 8045670:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8045672:	6823      	ldr	r3, [r4, #0]
 8045674:	68dd      	ldr	r5, [r3, #12]
 8045676:	f015 0501 	ands.w	r5, r5, #1
 804567a:	d007      	beq.n	804568c <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804567c:	6823      	ldr	r3, [r4, #0]
 804567e:	22ff      	movs	r2, #255	; 0xff
 8045680:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8045682:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8045684:	2301      	movs	r3, #1
 8045686:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8045688:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
}
 804568a:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 804568c:	f7fe f8b4 	bl	80437f8 <HAL_GetTick>
 8045690:	1b80      	subs	r0, r0, r6
 8045692:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8045696:	d9ec      	bls.n	8045672 <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045698:	6823      	ldr	r3, [r4, #0]
 804569a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804569c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804569e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80456a0:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80456a2:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 80456a4:	e7f1      	b.n	804568a <HAL_RTC_DeactivateAlarm+0x52>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80456a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80456aa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80456ac:	689a      	ldr	r2, [r3, #8]
 80456ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80456b2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80456b4:	f7fe f8a0 	bl	80437f8 <HAL_GetTick>
 80456b8:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80456ba:	6823      	ldr	r3, [r4, #0]
 80456bc:	68dd      	ldr	r5, [r3, #12]
 80456be:	f015 0502 	ands.w	r5, r5, #2
 80456c2:	d1db      	bne.n	804567c <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80456c4:	f7fe f898 	bl	80437f8 <HAL_GetTick>
 80456c8:	1b80      	subs	r0, r0, r6
 80456ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80456ce:	d9f4      	bls.n	80456ba <HAL_RTC_DeactivateAlarm+0x82>
 80456d0:	e7e2      	b.n	8045698 <HAL_RTC_DeactivateAlarm+0x60>

080456d2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80456d2:	6802      	ldr	r2, [r0, #0]
{
 80456d4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80456d6:	68d3      	ldr	r3, [r2, #12]
 80456d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80456dc:	60d3      	str	r3, [r2, #12]
{
 80456de:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 80456e0:	f7fe f88a 	bl	80437f8 <HAL_GetTick>
 80456e4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80456e6:	6823      	ldr	r3, [r4, #0]
 80456e8:	68db      	ldr	r3, [r3, #12]
 80456ea:	069b      	lsls	r3, r3, #26
 80456ec:	d501      	bpl.n	80456f2 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80456ee:	2000      	movs	r0, #0
}
 80456f0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80456f2:	f7fe f881 	bl	80437f8 <HAL_GetTick>
 80456f6:	1b40      	subs	r0, r0, r5
 80456f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80456fc:	d9f3      	bls.n	80456e6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80456fe:	2003      	movs	r0, #3
 8045700:	e7f6      	b.n	80456f0 <HAL_RTC_WaitForSynchro+0x1e>

08045702 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8045702:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8045704:	6803      	ldr	r3, [r0, #0]
 8045706:	68da      	ldr	r2, [r3, #12]
 8045708:	0652      	lsls	r2, r2, #25
{
 804570a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804570c:	d501      	bpl.n	8045712 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 804570e:	2000      	movs	r0, #0
}
 8045710:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8045712:	f04f 32ff 	mov.w	r2, #4294967295
 8045716:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8045718:	f7fe f86e 	bl	80437f8 <HAL_GetTick>
 804571c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 804571e:	6823      	ldr	r3, [r4, #0]
 8045720:	68db      	ldr	r3, [r3, #12]
 8045722:	065b      	lsls	r3, r3, #25
 8045724:	d4f3      	bmi.n	804570e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8045726:	f7fe f867 	bl	80437f8 <HAL_GetTick>
 804572a:	1b40      	subs	r0, r0, r5
 804572c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8045730:	d9f5      	bls.n	804571e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8045732:	2003      	movs	r0, #3
 8045734:	e7ec      	b.n	8045710 <RTC_EnterInitMode+0xe>

08045736 <HAL_RTC_Init>:
{
 8045736:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8045738:	4604      	mov	r4, r0
 804573a:	b1b8      	cbz	r0, 804576c <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 804573c:	7f43      	ldrb	r3, [r0, #29]
 804573e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8045742:	b913      	cbnz	r3, 804574a <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8045744:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8045746:	f00a fa0d 	bl	804fb64 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 804574a:	2302      	movs	r3, #2
 804574c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804574e:	6823      	ldr	r3, [r4, #0]
 8045750:	22ca      	movs	r2, #202	; 0xca
 8045752:	625a      	str	r2, [r3, #36]	; 0x24
 8045754:	2253      	movs	r2, #83	; 0x53
 8045756:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8045758:	4620      	mov	r0, r4
 804575a:	f7ff ffd2 	bl	8045702 <RTC_EnterInitMode>
 804575e:	6823      	ldr	r3, [r4, #0]
 8045760:	4605      	mov	r5, r0
 8045762:	b128      	cbz	r0, 8045770 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045764:	22ff      	movs	r2, #255	; 0xff
 8045766:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8045768:	2304      	movs	r3, #4
 804576a:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 804576c:	2501      	movs	r5, #1
 804576e:	e02e      	b.n	80457ce <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8045770:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8045772:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8045774:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8045778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804577c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 804577e:	6862      	ldr	r2, [r4, #4]
 8045780:	6899      	ldr	r1, [r3, #8]
 8045782:	4302      	orrs	r2, r0
 8045784:	6960      	ldr	r0, [r4, #20]
 8045786:	4302      	orrs	r2, r0
 8045788:	430a      	orrs	r2, r1
 804578a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 804578c:	68e2      	ldr	r2, [r4, #12]
 804578e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8045790:	691a      	ldr	r2, [r3, #16]
 8045792:	68a1      	ldr	r1, [r4, #8]
 8045794:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8045798:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 804579a:	68da      	ldr	r2, [r3, #12]
 804579c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80457a0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80457a2:	689b      	ldr	r3, [r3, #8]
 80457a4:	069b      	lsls	r3, r3, #26
 80457a6:	d405      	bmi.n	80457b4 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80457a8:	4620      	mov	r0, r4
 80457aa:	f7ff ff92 	bl	80456d2 <HAL_RTC_WaitForSynchro>
 80457ae:	b108      	cbz	r0, 80457b4 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80457b0:	6823      	ldr	r3, [r4, #0]
 80457b2:	e7d7      	b.n	8045764 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80457b4:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80457b6:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80457b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80457ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80457be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80457c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80457c2:	430a      	orrs	r2, r1
 80457c4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80457c6:	22ff      	movs	r2, #255	; 0xff
 80457c8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80457ca:	2301      	movs	r3, #1
 80457cc:	7763      	strb	r3, [r4, #29]
}
 80457ce:	4628      	mov	r0, r5
 80457d0:	bd38      	pop	{r3, r4, r5, pc}

080457d2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80457d2:	2300      	movs	r3, #0

  while(Value >= 10U)
 80457d4:	2809      	cmp	r0, #9
 80457d6:	d803      	bhi.n	80457e0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80457d8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80457dc:	b2c0      	uxtb	r0, r0
 80457de:	4770      	bx	lr
    Value -= 10U;
 80457e0:	380a      	subs	r0, #10
    bcdhigh++;
 80457e2:	3301      	adds	r3, #1
    Value -= 10U;
 80457e4:	b2c0      	uxtb	r0, r0
 80457e6:	e7f5      	b.n	80457d4 <RTC_ByteToBcd2+0x2>

080457e8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80457e8:	7f03      	ldrb	r3, [r0, #28]
 80457ea:	2b01      	cmp	r3, #1
{
 80457ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80457f0:	4606      	mov	r6, r0
 80457f2:	460f      	mov	r7, r1
 80457f4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80457f8:	d02e      	beq.n	8045858 <HAL_RTC_SetTime+0x70>
 80457fa:	2301      	movs	r3, #1
 80457fc:	6801      	ldr	r1, [r0, #0]
 80457fe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8045800:	7745      	strb	r5, [r0, #29]
 8045802:	7838      	ldrb	r0, [r7, #0]
 8045804:	787d      	ldrb	r5, [r7, #1]
 8045806:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045808:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 804580a:	bb42      	cbnz	r2, 804585e <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804580c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8045810:	bf08      	it	eq
 8045812:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8045814:	f7ff ffdd 	bl	80457d2 <RTC_ByteToBcd2>
 8045818:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 804581a:	4628      	mov	r0, r5
 804581c:	f7ff ffd9 	bl	80457d2 <RTC_ByteToBcd2>
 8045820:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8045822:	4620      	mov	r0, r4
 8045824:	f7ff ffd5 	bl	80457d2 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8045828:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 804582a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804582e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8045832:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045836:	23ca      	movs	r3, #202	; 0xca
 8045838:	624b      	str	r3, [r1, #36]	; 0x24
 804583a:	2353      	movs	r3, #83	; 0x53
 804583c:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 804583e:	4630      	mov	r0, r6
 8045840:	f7ff ff5f 	bl	8045702 <RTC_EnterInitMode>
 8045844:	6833      	ldr	r3, [r6, #0]
 8045846:	4605      	mov	r5, r0
 8045848:	b1b0      	cbz	r0, 8045878 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804584a:	22ff      	movs	r2, #255	; 0xff
 804584c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 804584e:	2304      	movs	r3, #4
 8045850:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045852:	2300      	movs	r3, #0
 8045854:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8045856:	2501      	movs	r5, #1
}
 8045858:	4628      	mov	r0, r5
 804585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 804585e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8045862:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8045866:	bf08      	it	eq
 8045868:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 804586a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 804586e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8045870:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8045872:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8045876:	e7de      	b.n	8045836 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8045878:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 804587c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8045880:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8045882:	689a      	ldr	r2, [r3, #8]
 8045884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8045888:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 804588a:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 804588e:	6899      	ldr	r1, [r3, #8]
 8045890:	4302      	orrs	r2, r0
 8045892:	430a      	orrs	r2, r1
 8045894:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8045896:	68da      	ldr	r2, [r3, #12]
 8045898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804589c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 804589e:	689b      	ldr	r3, [r3, #8]
 80458a0:	069b      	lsls	r3, r3, #26
 80458a2:	d40a      	bmi.n	80458ba <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80458a4:	4630      	mov	r0, r6
 80458a6:	f7ff ff14 	bl	80456d2 <HAL_RTC_WaitForSynchro>
 80458aa:	b130      	cbz	r0, 80458ba <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80458ac:	6833      	ldr	r3, [r6, #0]
 80458ae:	22ff      	movs	r2, #255	; 0xff
 80458b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80458b2:	2304      	movs	r3, #4
 80458b4:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80458b6:	7735      	strb	r5, [r6, #28]
 80458b8:	e7cd      	b.n	8045856 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80458ba:	6833      	ldr	r3, [r6, #0]
 80458bc:	22ff      	movs	r2, #255	; 0xff
 80458be:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80458c0:	2301      	movs	r3, #1
 80458c2:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80458c4:	2300      	movs	r3, #0
 80458c6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 80458c8:	e7c6      	b.n	8045858 <HAL_RTC_SetTime+0x70>

080458ca <HAL_RTC_SetDate>:
{
 80458ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80458cc:	7f03      	ldrb	r3, [r0, #28]
 80458ce:	2b01      	cmp	r3, #1
{
 80458d0:	4606      	mov	r6, r0
 80458d2:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 80458d6:	d030      	beq.n	804593a <HAL_RTC_SetDate+0x70>
 80458d8:	2301      	movs	r3, #1
 80458da:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80458dc:	7745      	strb	r5, [r0, #29]
 80458de:	780d      	ldrb	r5, [r1, #0]
 80458e0:	78c8      	ldrb	r0, [r1, #3]
 80458e2:	784c      	ldrb	r4, [r1, #1]
 80458e4:	788f      	ldrb	r7, [r1, #2]
 80458e6:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80458e8:	2a00      	cmp	r2, #0
 80458ea:	d147      	bne.n	804597c <HAL_RTC_SetDate+0xb2>
 80458ec:	06e2      	lsls	r2, r4, #27
 80458ee:	d503      	bpl.n	80458f8 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80458f0:	f024 0410 	bic.w	r4, r4, #16
 80458f4:	340a      	adds	r4, #10
 80458f6:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80458f8:	f7ff ff6b 	bl	80457d2 <RTC_ByteToBcd2>
 80458fc:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80458fe:	7848      	ldrb	r0, [r1, #1]
 8045900:	f7ff ff67 	bl	80457d2 <RTC_ByteToBcd2>
 8045904:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8045906:	4638      	mov	r0, r7
 8045908:	f7ff ff63 	bl	80457d2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 804590c:	4328      	orrs	r0, r5
 804590e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045912:	6833      	ldr	r3, [r6, #0]
 8045914:	22ca      	movs	r2, #202	; 0xca
 8045916:	625a      	str	r2, [r3, #36]	; 0x24
 8045918:	2253      	movs	r2, #83	; 0x53
 804591a:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804591c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8045920:	4630      	mov	r0, r6
 8045922:	f7ff feee 	bl	8045702 <RTC_EnterInitMode>
 8045926:	6833      	ldr	r3, [r6, #0]
 8045928:	4605      	mov	r5, r0
 804592a:	b140      	cbz	r0, 804593e <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804592c:	22ff      	movs	r2, #255	; 0xff
 804592e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8045930:	2304      	movs	r3, #4
 8045932:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045934:	2300      	movs	r3, #0
 8045936:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8045938:	2501      	movs	r5, #1
}
 804593a:	4628      	mov	r0, r5
 804593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 804593e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8045942:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8045946:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8045948:	68da      	ldr	r2, [r3, #12]
 804594a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804594e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8045950:	689b      	ldr	r3, [r3, #8]
 8045952:	069b      	lsls	r3, r3, #26
 8045954:	d40a      	bmi.n	804596c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8045956:	4630      	mov	r0, r6
 8045958:	f7ff febb 	bl	80456d2 <HAL_RTC_WaitForSynchro>
 804595c:	b130      	cbz	r0, 804596c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804595e:	6833      	ldr	r3, [r6, #0]
 8045960:	22ff      	movs	r2, #255	; 0xff
 8045962:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8045964:	2304      	movs	r3, #4
 8045966:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8045968:	7735      	strb	r5, [r6, #28]
 804596a:	e7e5      	b.n	8045938 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804596c:	6833      	ldr	r3, [r6, #0]
 804596e:	22ff      	movs	r2, #255	; 0xff
 8045970:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8045972:	2301      	movs	r3, #1
 8045974:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8045976:	2300      	movs	r3, #0
 8045978:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 804597a:	e7de      	b.n	804593a <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 804597c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8045980:	4338      	orrs	r0, r7
 8045982:	e7c6      	b.n	8045912 <HAL_RTC_SetDate+0x48>

08045984 <HAL_RTC_SetAlarm_IT>:
{
 8045984:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8045988:	4b53      	ldr	r3, [pc, #332]	; (8045ad8 <HAL_RTC_SetAlarm_IT+0x154>)
{
 804598a:	4606      	mov	r6, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 804598c:	681b      	ldr	r3, [r3, #0]
 804598e:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8045992:	fbb3 f0f0 	udiv	r0, r3, r0
 8045996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804599a:	4343      	muls	r3, r0
 804599c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 804599e:	7f33      	ldrb	r3, [r6, #28]
 80459a0:	2b01      	cmp	r3, #1
 80459a2:	f04f 0002 	mov.w	r0, #2
 80459a6:	d04a      	beq.n	8045a3e <HAL_RTC_SetAlarm_IT+0xba>
 80459a8:	2301      	movs	r3, #1
 80459aa:	6834      	ldr	r4, [r6, #0]
 80459ac:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80459ae:	7770      	strb	r0, [r6, #29]
 80459b0:	7808      	ldrb	r0, [r1, #0]
 80459b2:	f891 9001 	ldrb.w	r9, [r1, #1]
 80459b6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80459ba:	f891 7020 	ldrb.w	r7, [r1, #32]
 80459be:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80459c0:	68a3      	ldr	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80459c2:	2a00      	cmp	r2, #0
 80459c4:	d13e      	bne.n	8045a44 <HAL_RTC_SetAlarm_IT+0xc0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80459c6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80459ca:	bf08      	it	eq
 80459cc:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80459ce:	f7ff ff00 	bl	80457d2 <RTC_ByteToBcd2>
 80459d2:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80459d4:	4648      	mov	r0, r9
 80459d6:	f7ff fefc 	bl	80457d2 <RTC_ByteToBcd2>
 80459da:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80459dc:	4650      	mov	r0, sl
 80459de:	f7ff fef8 	bl	80457d2 <RTC_ByteToBcd2>
 80459e2:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80459e4:	4638      	mov	r0, r7
 80459e6:	f7ff fef4 	bl	80457d2 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80459ea:	694b      	ldr	r3, [r1, #20]
 80459ec:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80459ee:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80459f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80459f4:	ea43 0309 	orr.w	r3, r3, r9
 80459f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80459fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8045a00:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8045a04:	698b      	ldr	r3, [r1, #24]
 8045a06:	684a      	ldr	r2, [r1, #4]
 8045a08:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045a0a:	23ca      	movs	r3, #202	; 0xca
 8045a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8045a0e:	2353      	movs	r3, #83	; 0x53
 8045a10:	6263      	str	r3, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8045a12:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8045a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8045a18:	68a3      	ldr	r3, [r4, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8045a1a:	d142      	bne.n	8045aa2 <HAL_RTC_SetAlarm_IT+0x11e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8045a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8045a20:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8045a22:	68e3      	ldr	r3, [r4, #12]
 8045a24:	b2db      	uxtb	r3, r3
 8045a26:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8045a2a:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8045a2c:	9b01      	ldr	r3, [sp, #4]
 8045a2e:	1e59      	subs	r1, r3, #1
 8045a30:	9101      	str	r1, [sp, #4]
 8045a32:	b9cb      	cbnz	r3, 8045a68 <HAL_RTC_SetAlarm_IT+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045a34:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8045a36:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045a38:	6262      	str	r2, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8045a3a:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8045a3c:	7733      	strb	r3, [r6, #28]
}
 8045a3e:	b002      	add	sp, #8
 8045a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8045a44:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8045a48:	bf08      	it	eq
 8045a4a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8045a4c:	694b      	ldr	r3, [r1, #20]
 8045a4e:	431d      	orrs	r5, r3
 8045a50:	ea45 050a 	orr.w	r5, r5, sl
 8045a54:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8045a58:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8045a5a:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8045a5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8045a62:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 8045a66:	e7cd      	b.n	8045a04 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8045a68:	68e3      	ldr	r3, [r4, #12]
 8045a6a:	07d9      	lsls	r1, r3, #31
 8045a6c:	d5de      	bpl.n	8045a2c <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8045a6e:	61e0      	str	r0, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8045a70:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8045a72:	68a3      	ldr	r3, [r4, #8]
 8045a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045a78:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8045a7a:	68a3      	ldr	r3, [r4, #8]
 8045a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8045a80:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8045a82:	4b16      	ldr	r3, [pc, #88]	; (8045adc <HAL_RTC_SetAlarm_IT+0x158>)
 8045a84:	681a      	ldr	r2, [r3, #0]
 8045a86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8045a8a:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8045a8c:	689a      	ldr	r2, [r3, #8]
 8045a8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8045a92:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045a94:	23ff      	movs	r3, #255	; 0xff
 8045a96:	6263      	str	r3, [r4, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8045a98:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8045a9a:	2301      	movs	r3, #1
 8045a9c:	7773      	strb	r3, [r6, #29]
  __HAL_UNLOCK(hrtc);
 8045a9e:	7730      	strb	r0, [r6, #28]
  return HAL_OK;
 8045aa0:	e7cd      	b.n	8045a3e <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8045aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8045aa6:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8045aa8:	68e3      	ldr	r3, [r4, #12]
 8045aaa:	b2db      	uxtb	r3, r3
 8045aac:	f463 7320 	orn	r3, r3, #640	; 0x280
 8045ab0:	60e3      	str	r3, [r4, #12]
      if (count-- == 0U)
 8045ab2:	9b01      	ldr	r3, [sp, #4]
 8045ab4:	1e59      	subs	r1, r3, #1
 8045ab6:	9101      	str	r1, [sp, #4]
 8045ab8:	2b00      	cmp	r3, #0
 8045aba:	d0bb      	beq.n	8045a34 <HAL_RTC_SetAlarm_IT+0xb0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8045abc:	68e3      	ldr	r3, [r4, #12]
 8045abe:	079b      	lsls	r3, r3, #30
 8045ac0:	d5f7      	bpl.n	8045ab2 <HAL_RTC_SetAlarm_IT+0x12e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8045ac2:	6220      	str	r0, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8045ac4:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8045ac6:	68a3      	ldr	r3, [r4, #8]
 8045ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8045acc:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8045ace:	68a3      	ldr	r3, [r4, #8]
 8045ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8045ad4:	e7d4      	b.n	8045a80 <HAL_RTC_SetAlarm_IT+0xfc>
 8045ad6:	bf00      	nop
 8045ad8:	20001048 	.word	0x20001048
 8045adc:	40013c00 	.word	0x40013c00

08045ae0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8045ae0:	0903      	lsrs	r3, r0, #4
 8045ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8045ae6:	f000 000f 	and.w	r0, r0, #15
 8045aea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8045aee:	b2c0      	uxtb	r0, r0
 8045af0:	4770      	bx	lr

08045af2 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8045af2:	6803      	ldr	r3, [r0, #0]
 8045af4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8045af6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045af8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8045afa:	681b      	ldr	r3, [r3, #0]
 8045afc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8045b00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8045b04:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045b06:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045b0a:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8045b0c:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8045b0e:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045b12:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8045b16:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8045b18:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8045b1c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8045b1e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8045b20:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8045b22:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8045b24:	b952      	cbnz	r2, 8045b3c <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8045b26:	f7ff ffdb 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b2a:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8045b2c:	4630      	mov	r0, r6
 8045b2e:	f7ff ffd7 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b32:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8045b34:	4620      	mov	r0, r4
 8045b36:	f7ff ffd3 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b3a:	7088      	strb	r0, [r1, #2]
}
 8045b3c:	2000      	movs	r0, #0
 8045b3e:	bd70      	pop	{r4, r5, r6, pc}

08045b40 <HAL_RTC_GetDate>:
{
 8045b40:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8045b42:	6803      	ldr	r3, [r0, #0]
 8045b44:	685b      	ldr	r3, [r3, #4]
 8045b46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8045b4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8045b4e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8045b50:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8045b54:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8045b56:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8045b5a:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8045b5c:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8045b5e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8045b60:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8045b62:	b952      	cbnz	r2, 8045b7a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8045b64:	f7ff ffbc 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b68:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8045b6a:	4628      	mov	r0, r5
 8045b6c:	f7ff ffb8 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b70:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8045b72:	4620      	mov	r0, r4
 8045b74:	f7ff ffb4 	bl	8045ae0 <RTC_Bcd2ToByte>
 8045b78:	7088      	strb	r0, [r1, #2]
}
 8045b7a:	2000      	movs	r0, #0
 8045b7c:	bd38      	pop	{r3, r4, r5, pc}

08045b7e <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8045b7e:	6803      	ldr	r3, [r0, #0]
 8045b80:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8045b82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8045b86:	4770      	bx	lr

08045b88 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8045b88:	6803      	ldr	r3, [r0, #0]
 8045b8a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8045b8c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8045b90:	4770      	bx	lr

08045b92 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8045b92:	7f03      	ldrb	r3, [r0, #28]
 8045b94:	2b01      	cmp	r3, #1
 8045b96:	f04f 0302 	mov.w	r3, #2
 8045b9a:	d00f      	beq.n	8045bbc <HAL_RTCEx_EnableBypassShadow+0x2a>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8045b9c:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8045b9e:	6803      	ldr	r3, [r0, #0]
 8045ba0:	22ca      	movs	r2, #202	; 0xca
 8045ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8045ba4:	2253      	movs	r2, #83	; 0x53
 8045ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8045ba8:	689a      	ldr	r2, [r3, #8]
 8045baa:	f042 0220 	orr.w	r2, r2, #32
 8045bae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8045bb0:	22ff      	movs	r2, #255	; 0xff
 8045bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8045bb4:	2301      	movs	r3, #1
 8045bb6:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8045bb8:	2300      	movs	r3, #0
 8045bba:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8045bbc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8045bbe:	4770      	bx	lr

08045bc0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8045bc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045bc2:	681a      	ldr	r2, [r3, #0]
 8045bc4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8045bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045bca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8045bcc:	4770      	bx	lr

08045bce <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8045bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045bd2:	b089      	sub	sp, #36	; 0x24
 8045bd4:	4605      	mov	r5, r0
 8045bd6:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8045bd8:	f7fd fe0e 	bl	80437f8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8045bdc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8045bde:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8045be0:	2108      	movs	r1, #8
 8045be2:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8045be4:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8045be8:	f001 fe67 	bl	80478ba <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045bec:	4604      	mov	r4, r0
 8045bee:	bb40      	cbnz	r0, 8045c42 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8045bf0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8045bf2:	6828      	ldr	r0, [r5, #0]
 8045bf4:	0409      	lsls	r1, r1, #16
 8045bf6:	f001 ff73 	bl	8047ae0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045bfa:	4604      	mov	r4, r0
 8045bfc:	bb08      	cbnz	r0, 8045c42 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8045bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8045c02:	2308      	movs	r3, #8
 8045c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8045c08:	2130      	movs	r1, #48	; 0x30
 8045c0a:	2302      	movs	r3, #2
 8045c0c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8045c10:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8045c12:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8045c14:	a902      	add	r1, sp, #8
 8045c16:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8045c18:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8045c1a:	f001 fe3b 	bl	8047894 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8045c1e:	6828      	ldr	r0, [r5, #0]
 8045c20:	f001 ffa7 	bl	8047b72 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8045c24:	4604      	mov	r4, r0
 8045c26:	b960      	cbnz	r0, 8045c42 <SD_FindSCR+0x74>
  uint32_t index = 0U;
 8045c28:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8045c2a:	f240 482a 	movw	r8, #1066	; 0x42a
 8045c2e:	6828      	ldr	r0, [r5, #0]
 8045c30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045c32:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8045c36:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8045c38:	d007      	beq.n	8045c4a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8045c3a:	0719      	lsls	r1, r3, #28
 8045c3c:	d518      	bpl.n	8045c70 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8045c3e:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8045c40:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8045c42:	4620      	mov	r0, r4
 8045c44:	b009      	add	sp, #36	; 0x24
 8045c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8045c4a:	029b      	lsls	r3, r3, #10
 8045c4c:	d507      	bpl.n	8045c5e <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8045c4e:	f001 fdf7 	bl	8047840 <SDIO_ReadFIFO>
 8045c52:	ab08      	add	r3, sp, #32
 8045c54:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8045c58:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8045c5a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8045c5e:	f7fd fdcb 	bl	80437f8 <HAL_GetTick>
 8045c62:	eba0 0009 	sub.w	r0, r0, r9
 8045c66:	3001      	adds	r0, #1
 8045c68:	d1e1      	bne.n	8045c2e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8045c6a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8045c6e:	e7e8      	b.n	8045c42 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8045c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045c72:	079a      	lsls	r2, r3, #30
 8045c74:	d501      	bpl.n	8045c7a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8045c76:	2402      	movs	r4, #2
 8045c78:	e7e2      	b.n	8045c40 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8045c7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8045c7c:	069b      	lsls	r3, r3, #26
 8045c7e:	d501      	bpl.n	8045c84 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8045c80:	2420      	movs	r4, #32
 8045c82:	e7dd      	b.n	8045c40 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045c84:	f240 533a 	movw	r3, #1338	; 0x53a
 8045c88:	6383      	str	r3, [r0, #56]	; 0x38
 8045c8a:	9b01      	ldr	r3, [sp, #4]
 8045c8c:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8045c8e:	6033      	str	r3, [r6, #0]
 8045c90:	9b00      	ldr	r3, [sp, #0]
 8045c92:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8045c94:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8045c96:	e7d4      	b.n	8045c42 <SD_FindSCR+0x74>

08045c98 <HAL_SD_ReadBlocks_DMA>:
{
 8045c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045c9c:	4604      	mov	r4, r0
 8045c9e:	b087      	sub	sp, #28
 8045ca0:	4617      	mov	r7, r2
 8045ca2:	4698      	mov	r8, r3
  if(NULL == pData)
 8045ca4:	b941      	cbnz	r1, 8045cb8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8045ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8045cac:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8045cae:	2501      	movs	r5, #1
}
 8045cb0:	4628      	mov	r0, r5
 8045cb2:	b007      	add	sp, #28
 8045cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8045cb8:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8045cbc:	b2f6      	uxtb	r6, r6
 8045cbe:	2e01      	cmp	r6, #1
 8045cc0:	d176      	bne.n	8045db0 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8045cc2:	2200      	movs	r2, #0
 8045cc4:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8045cc6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8045cc8:	18fb      	adds	r3, r7, r3
 8045cca:	4283      	cmp	r3, r0
 8045ccc:	d903      	bls.n	8045cd6 <HAL_SD_ReadBlocks_DMA+0x3e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8045cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8045cd4:	e7ea      	b.n	8045cac <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8045cd6:	6825      	ldr	r5, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8045cd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    hsd->State = HAL_SD_STATE_BUSY;
 8045cda:	2303      	movs	r3, #3
 8045cdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8045ce0:	62ea      	str	r2, [r5, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8045ce2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8045ce4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8045ce8:	f043 0302 	orr.w	r3, r3, #2
 8045cec:	63eb      	str	r3, [r5, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8045cee:	4b31      	ldr	r3, [pc, #196]	; (8045db4 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8045cf0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8045cf2:	4b31      	ldr	r3, [pc, #196]	; (8045db8 <HAL_SD_ReadBlocks_DMA+0x120>)
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045cf4:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferAbortCallback = NULL;
 8045cf8:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045cfc:	460a      	mov	r2, r1
 8045cfe:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8045d02:	f105 0180 	add.w	r1, r5, #128	; 0x80
 8045d06:	f7fe f8e3 	bl	8043ed0 <HAL_DMA_Start_IT>
 8045d0a:	4605      	mov	r5, r0
 8045d0c:	b168      	cbz	r0, 8045d2a <HAL_SD_ReadBlocks_DMA+0x92>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8045d0e:	6823      	ldr	r3, [r4, #0]
 8045d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8045d12:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8045d16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045d18:	4a28      	ldr	r2, [pc, #160]	; (8045dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8045d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8045d22:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045d24:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 8045d28:	e7c1      	b.n	8045cae <HAL_SD_ReadBlocks_DMA+0x16>
      __HAL_SD_DMA_ENABLE(hsd);
 8045d2a:	4b25      	ldr	r3, [pc, #148]	; (8045dc0 <HAL_SD_ReadBlocks_DMA+0x128>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045d2c:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 8045d2e:	601e      	str	r6, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045d32:	f44f 7100 	mov.w	r1, #512	; 0x200
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045d36:	2b01      	cmp	r3, #1
        add *= 512U;
 8045d38:	bf18      	it	ne
 8045d3a:	027f      	lslne	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045d3c:	f001 fdbd 	bl	80478ba <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8045d40:	b148      	cbz	r0, 8045d56 <HAL_SD_ReadBlocks_DMA+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045d42:	6823      	ldr	r3, [r4, #0]
 8045d44:	4a1d      	ldr	r2, [pc, #116]	; (8045dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045d46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8045d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045d4a:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8045d4c:	4318      	orrs	r0, r3
 8045d4e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045d50:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 8045d54:	e7ac      	b.n	8045cb0 <HAL_SD_ReadBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8045d56:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8045d5a:	e9cd 3900 	strd	r3, r9, [sp]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8045d5e:	2290      	movs	r2, #144	; 0x90
 8045d60:	2302      	movs	r3, #2
 8045d62:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8045d66:	9004      	str	r0, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8045d68:	2301      	movs	r3, #1
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045d6a:	4669      	mov	r1, sp
 8045d6c:	6820      	ldr	r0, [r4, #0]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8045d6e:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045d70:	f001 fd90 	bl	8047894 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8045d74:	f1b8 0f01 	cmp.w	r8, #1
 8045d78:	d913      	bls.n	8045da2 <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8045d7a:	2382      	movs	r3, #130	; 0x82
 8045d7c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8045d7e:	4639      	mov	r1, r7
 8045d80:	6820      	ldr	r0, [r4, #0]
 8045d82:	f001 fdca 	bl	804791a <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8045d86:	2800      	cmp	r0, #0
 8045d88:	d092      	beq.n	8045cb0 <HAL_SD_ReadBlocks_DMA+0x18>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045d8a:	6823      	ldr	r3, [r4, #0]
 8045d8c:	4a0b      	ldr	r2, [pc, #44]	; (8045dbc <HAL_SD_ReadBlocks_DMA+0x124>)
 8045d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8045d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045d92:	2501      	movs	r5, #1
        hsd->ErrorCode |= errorstate;
 8045d94:	4318      	orrs	r0, r3
        hsd->Context = SD_CONTEXT_NONE;
 8045d96:	2300      	movs	r3, #0
        hsd->ErrorCode |= errorstate;
 8045d98:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8045d9a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8045d9e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8045da0:	e786      	b.n	8045cb0 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8045da2:	2381      	movs	r3, #129	; 0x81
 8045da4:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8045da6:	4639      	mov	r1, r7
 8045da8:	6820      	ldr	r0, [r4, #0]
 8045daa:	f001 fd9e 	bl	80478ea <SDMMC_CmdReadSingleBlock>
 8045dae:	e7ea      	b.n	8045d86 <HAL_SD_ReadBlocks_DMA+0xee>
    return HAL_BUSY;
 8045db0:	2502      	movs	r5, #2
 8045db2:	e77d      	b.n	8045cb0 <HAL_SD_ReadBlocks_DMA+0x18>
 8045db4:	08045ef7 	.word	0x08045ef7
 8045db8:	08046419 	.word	0x08046419
 8045dbc:	004005ff 	.word	0x004005ff
 8045dc0:	4225858c 	.word	0x4225858c

08045dc4 <HAL_SD_WriteBlocks_DMA>:
{
 8045dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8045dc8:	4604      	mov	r4, r0
 8045dca:	b087      	sub	sp, #28
 8045dcc:	4616      	mov	r6, r2
 8045dce:	461f      	mov	r7, r3
  if(NULL == pData)
 8045dd0:	4689      	mov	r9, r1
 8045dd2:	b941      	cbnz	r1, 8045de6 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8045dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8045dda:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8045ddc:	2501      	movs	r5, #1
}
 8045dde:	4628      	mov	r0, r5
 8045de0:	b007      	add	sp, #28
 8045de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8045de6:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8045dea:	b2ed      	uxtb	r5, r5
 8045dec:	2d01      	cmp	r5, #1
 8045dee:	d177      	bne.n	8045ee0 <HAL_SD_WriteBlocks_DMA+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8045df0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8045df2:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8045df4:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8045df6:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8045df8:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8045dfa:	d904      	bls.n	8045e06 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8045dfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8045dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8045e02:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8045e04:	e7eb      	b.n	8045dde <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8045e06:	2303      	movs	r3, #3
 8045e08:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8045e0c:	6800      	ldr	r0, [r0, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8045e0e:	4935      	ldr	r1, [pc, #212]	; (8045ee4 <HAL_SD_WriteBlocks_DMA+0x120>)
    hsd->Instance->DCTRL = 0U;
 8045e10:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8045e12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8045e14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8045e18:	f043 0302 	orr.w	r3, r3, #2
 8045e1c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8045e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8045e20:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8045e22:	4931      	ldr	r1, [pc, #196]	; (8045ee8 <HAL_SD_WriteBlocks_DMA+0x124>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8045e24:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8045e2e:	2b01      	cmp	r3, #1
      add *= 512U;
 8045e30:	bf18      	it	ne
 8045e32:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8045e34:	f001 fd41 	bl	80478ba <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045e38:	4602      	mov	r2, r0
 8045e3a:	6820      	ldr	r0, [r4, #0]
 8045e3c:	b142      	cbz	r2, 8045e50 <HAL_SD_WriteBlocks_DMA+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045e3e:	4b2b      	ldr	r3, [pc, #172]	; (8045eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8045e40:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8045e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045e44:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8045e46:	4313      	orrs	r3, r2
 8045e48:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045e4a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8045e4e:	e7c6      	b.n	8045dde <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8045e50:	2f01      	cmp	r7, #1
 8045e52:	d912      	bls.n	8045e7a <HAL_SD_WriteBlocks_DMA+0xb6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8045e54:	23a0      	movs	r3, #160	; 0xa0
 8045e56:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8045e58:	4631      	mov	r1, r6
 8045e5a:	f001 fd8e 	bl	804797a <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8045e5e:	4606      	mov	r6, r0
 8045e60:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8045e62:	b180      	cbz	r0, 8045e86 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045e64:	4b21      	ldr	r3, [pc, #132]	; (8045eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8045e66:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8045e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045e6a:	2501      	movs	r5, #1
      hsd->ErrorCode |= errorstate;
 8045e6c:	431e      	orrs	r6, r3
      hsd->Context = SD_CONTEXT_NONE;
 8045e6e:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8045e70:	63a6      	str	r6, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045e72:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8045e76:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8045e78:	e7b1      	b.n	8045dde <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8045e7a:	2390      	movs	r3, #144	; 0x90
 8045e7c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8045e7e:	4631      	mov	r1, r6
 8045e80:	f001 fd63 	bl	804794a <SDMMC_CmdWriteSingleBlock>
 8045e84:	e7eb      	b.n	8045e5e <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 8045e86:	4b1a      	ldr	r3, [pc, #104]	; (8045ef0 <HAL_SD_WriteBlocks_DMA+0x12c>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045e88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8045e8a:	f04f 0801 	mov.w	r8, #1
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045e8e:	027f      	lsls	r7, r7, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8045e90:	f8c3 8000 	str.w	r8, [r3]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8045e94:	3280      	adds	r2, #128	; 0x80
 8045e96:	08bb      	lsrs	r3, r7, #2
 8045e98:	4649      	mov	r1, r9
 8045e9a:	f7fe f819 	bl	8043ed0 <HAL_DMA_Start_IT>
 8045e9e:	4605      	mov	r5, r0
 8045ea0:	b180      	cbz	r0, 8045ec4 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8045ea2:	6822      	ldr	r2, [r4, #0]
 8045ea4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8045ea6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8045eaa:	f023 0302 	bic.w	r3, r3, #2
 8045eae:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8045eb0:	4b0e      	ldr	r3, [pc, #56]	; (8045eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8045eb2:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8045eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8045eba:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8045ebc:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8045ec0:	6326      	str	r6, [r4, #48]	; 0x30
 8045ec2:	e78b      	b.n	8045ddc <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8045ec4:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8045ec8:	e9cd 3700 	strd	r3, r7, [sp]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045ecc:	4669      	mov	r1, sp
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8045ece:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045ed0:	6820      	ldr	r0, [r4, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8045ed2:	e9cd 3602 	strd	r3, r6, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8045ed6:	e9cd 6804 	strd	r6, r8, [sp, #16]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8045eda:	f001 fcdb 	bl	8047894 <SDIO_ConfigData>
      return HAL_OK;
 8045ede:	e77e      	b.n	8045dde <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8045ee0:	2502      	movs	r5, #2
 8045ee2:	e77c      	b.n	8045dde <HAL_SD_WriteBlocks_DMA+0x1a>
 8045ee4:	08045bc1 	.word	0x08045bc1
 8045ee8:	08046419 	.word	0x08046419
 8045eec:	004005ff 	.word	0x004005ff
 8045ef0:	4225858c 	.word	0x4225858c

08045ef4 <HAL_SD_ErrorCallback>:
 8045ef4:	4770      	bx	lr

08045ef6 <SD_DMAReceiveCplt>:
{
 8045ef6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8045ef8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8045efa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8045efc:	2b82      	cmp	r3, #130	; 0x82
 8045efe:	d109      	bne.n	8045f14 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8045f00:	6820      	ldr	r0, [r4, #0]
 8045f02:	f001 fd53 	bl	80479ac <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8045f06:	b128      	cbz	r0, 8045f14 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8045f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045f0a:	4318      	orrs	r0, r3
 8045f0c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8045f0e:	4620      	mov	r0, r4
 8045f10:	f7ff fff0 	bl	8045ef4 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8045f14:	6823      	ldr	r3, [r4, #0]
 8045f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045f18:	f022 0208 	bic.w	r2, r2, #8
 8045f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8045f1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8045f22:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8045f24:	2301      	movs	r3, #1
 8045f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8045f2a:	2300      	movs	r3, #0
 8045f2c:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8045f2e:	4620      	mov	r0, r4
 8045f30:	f7fd fb27 	bl	8043582 <HAL_SD_RxCpltCallback>
}
 8045f34:	bd10      	pop	{r4, pc}
	...

08045f38 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8045f38:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8045f3a:	0f9a      	lsrs	r2, r3, #30
 8045f3c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8045f3e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8045f42:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8045f44:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8045f48:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8045f4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8045f4e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8045f50:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8045f54:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8045f56:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8045f58:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8045f5a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8045f5c:	0d1a      	lsrs	r2, r3, #20
 8045f5e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8045f60:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8045f64:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8045f66:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8045f6a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8045f6c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8045f70:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8045f72:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8045f76:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8045f78:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8045f7c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8045f7e:	2200      	movs	r2, #0
 8045f80:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8045f82:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8045f84:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8045f86:	2a00      	cmp	r2, #0
 8045f88:	d16b      	bne.n	8046062 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8045f8a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8045f8c:	f640 74fc 	movw	r4, #4092	; 0xffc
 8045f90:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8045f94:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8045f98:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8045f9a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8045f9e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8045fa0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8045fa4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8045fa6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8045faa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8045fac:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8045fb0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8045fb4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8045fb6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8045fb8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8045fba:	7e0a      	ldrb	r2, [r1, #24]
 8045fbc:	f002 0207 	and.w	r2, r2, #7
 8045fc0:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8045fc2:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8045fc4:	4093      	lsls	r3, r2
 8045fc6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8045fc8:	7a0a      	ldrb	r2, [r1, #8]
 8045fca:	f002 040f 	and.w	r4, r2, #15
 8045fce:	2201      	movs	r2, #1
 8045fd0:	40a2      	lsls	r2, r4
 8045fd2:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8045fd4:	0a52      	lsrs	r2, r2, #9
 8045fd6:	4353      	muls	r3, r2
 8045fd8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8045fda:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8045fde:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8045fe0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8045fe2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8045fe6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8045fe8:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8045fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8045ff0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8045ff2:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8045ff4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8045ff6:	0fda      	lsrs	r2, r3, #31
 8045ff8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8045ffa:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8045ffe:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8046000:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8046004:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8046006:	f3c3 5283 	ubfx	r2, r3, #22, #4
 804600a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 804600c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8046010:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8046014:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8046016:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 804601a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 804601e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8046022:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8046026:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 804602a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 804602e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8046032:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8046036:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 804603a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 804603e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8046042:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8046046:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 804604a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 804604e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8046052:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8046056:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 804605a:	2301      	movs	r3, #1
 804605c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8046060:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8046062:	2a01      	cmp	r2, #1
 8046064:	d10f      	bne.n	8046086 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8046066:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 804606a:	041b      	lsls	r3, r3, #16
 804606c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8046070:	4313      	orrs	r3, r2
 8046072:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8046074:	690b      	ldr	r3, [r1, #16]
 8046076:	3301      	adds	r3, #1
 8046078:	029b      	lsls	r3, r3, #10
 804607a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 804607c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 804607e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8046082:	6583      	str	r3, [r0, #88]	; 0x58
 8046084:	e7ab      	b.n	8045fde <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046086:	6803      	ldr	r3, [r0, #0]
 8046088:	4a05      	ldr	r2, [pc, #20]	; (80460a0 <HAL_SD_GetCardCSD+0x168>)
 804608a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804608c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 804608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046092:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8046094:	2301      	movs	r3, #1
 8046096:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 804609a:	4618      	mov	r0, r3
 804609c:	e7e0      	b.n	8046060 <HAL_SD_GetCardCSD+0x128>
 804609e:	bf00      	nop
 80460a0:	004005ff 	.word	0x004005ff

080460a4 <HAL_SD_InitCard>:
{
 80460a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80460a8:	2300      	movs	r3, #0
{
 80460aa:	b099      	sub	sp, #100	; 0x64
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80460ac:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80460b0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80460b4:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80460b6:	2376      	movs	r3, #118	; 0x76
 80460b8:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80460ba:	ab0a      	add	r3, sp, #40	; 0x28
{
 80460bc:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 80460be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80460c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80460c6:	ab07      	add	r3, sp, #28
 80460c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80460ca:	6820      	ldr	r0, [r4, #0]
 80460cc:	f001 fb9c 	bl	8047808 <SDIO_Init>
  if(status != HAL_OK)
 80460d0:	4605      	mov	r5, r0
 80460d2:	2800      	cmp	r0, #0
 80460d4:	f040 80d4 	bne.w	8046280 <HAL_SD_InitCard+0x1dc>
  __HAL_SD_DISABLE(hsd);
 80460d8:	4f6a      	ldr	r7, [pc, #424]	; (8046284 <HAL_SD_InitCard+0x1e0>)
  __HAL_SD_ENABLE(hsd);
 80460da:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80460dc:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80460de:	6820      	ldr	r0, [r4, #0]
 80460e0:	f001 fbb6 	bl	8047850 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80460e4:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80460e6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80460e8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80460ea:	f001 fc91 	bl	8047a10 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80460ee:	4605      	mov	r5, r0
 80460f0:	b940      	cbnz	r0, 8046104 <HAL_SD_InitCard+0x60>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80460f2:	6820      	ldr	r0, [r4, #0]
 80460f4:	f001 fcb4 	bl	8047a60 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80460f8:	b158      	cbz	r0, 8046112 <HAL_SD_InitCard+0x6e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80460fa:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80460fc:	6820      	ldr	r0, [r4, #0]
 80460fe:	f001 fc87 	bl	8047a10 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046102:	b138      	cbz	r0, 8046114 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8046104:	2501      	movs	r5, #1
 8046106:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 804610a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804610c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 804610e:	63a0      	str	r0, [r4, #56]	; 0x38
 8046110:	e084      	b.n	804621c <HAL_SD_InitCard+0x178>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8046112:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8046114:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8046116:	2b01      	cmp	r3, #1
 8046118:	d134      	bne.n	8046184 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804611a:	2100      	movs	r1, #0
 804611c:	6820      	ldr	r0, [r4, #0]
 804611e:	f001 fcdf 	bl	8047ae0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046122:	b378      	cbz	r0, 8046184 <HAL_SD_InitCard+0xe0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046124:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8046128:	e7ec      	b.n	8046104 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 804612a:	4631      	mov	r1, r6
 804612c:	6820      	ldr	r0, [r4, #0]
 804612e:	f001 fcd7 	bl	8047ae0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046132:	2800      	cmp	r0, #0
 8046134:	d1e6      	bne.n	8046104 <HAL_SD_InitCard+0x60>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8046136:	4649      	mov	r1, r9
 8046138:	6820      	ldr	r0, [r4, #0]
 804613a:	f001 fce9 	bl	8047b10 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804613e:	2800      	cmp	r0, #0
 8046140:	d1f0      	bne.n	8046124 <HAL_SD_InitCard+0x80>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046142:	4631      	mov	r1, r6
 8046144:	6820      	ldr	r0, [r4, #0]
 8046146:	f001 fba2 	bl	804788e <SDIO_GetResponse>
    count++;
 804614a:	9b06      	ldr	r3, [sp, #24]
 804614c:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804614e:	4605      	mov	r5, r0
    count++;
 8046150:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8046152:	0fc6      	lsrs	r6, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8046154:	9b06      	ldr	r3, [sp, #24]
 8046156:	42bb      	cmp	r3, r7
 8046158:	d801      	bhi.n	804615e <HAL_SD_InitCard+0xba>
 804615a:	2e00      	cmp	r6, #0
 804615c:	d0e5      	beq.n	804612a <HAL_SD_InitCard+0x86>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 804615e:	9b06      	ldr	r3, [sp, #24]
 8046160:	4543      	cmp	r3, r8
 8046162:	d816      	bhi.n	8046192 <HAL_SD_InitCard+0xee>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8046164:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8046168:	f04f 0301 	mov.w	r3, #1
 804616c:	bf18      	it	ne
 804616e:	461d      	movne	r5, r3
 8046170:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8046172:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8046174:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8046178:	f001 fb72 	bl	8047860 <SDIO_GetPowerState>
 804617c:	b960      	cbnz	r0, 8046198 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 804617e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8046182:	e056      	b.n	8046232 <HAL_SD_InitCard+0x18e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8046184:	f64f 77fe 	movw	r7, #65534	; 0xfffe
{
 8046188:	2600      	movs	r6, #0
 804618a:	46b8      	mov	r8, r7
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 804618c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8046288 <HAL_SD_InitCard+0x1e4>
 8046190:	e7e0      	b.n	8046154 <HAL_SD_InitCard+0xb0>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8046192:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8046196:	e7b5      	b.n	8046104 <HAL_SD_InitCard+0x60>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8046198:	6c63      	ldr	r3, [r4, #68]	; 0x44
 804619a:	2b03      	cmp	r3, #3
 804619c:	d019      	beq.n	80461d2 <HAL_SD_InitCard+0x12e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 804619e:	6820      	ldr	r0, [r4, #0]
 80461a0:	f001 fcff 	bl	8047ba2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80461a4:	2800      	cmp	r0, #0
 80461a6:	d144      	bne.n	8046232 <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80461a8:	4601      	mov	r1, r0
 80461aa:	6820      	ldr	r0, [r4, #0]
 80461ac:	f001 fb6f 	bl	804788e <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80461b0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80461b2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80461b4:	6820      	ldr	r0, [r4, #0]
 80461b6:	f001 fb6a 	bl	804788e <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80461ba:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80461bc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80461be:	6820      	ldr	r0, [r4, #0]
 80461c0:	f001 fb65 	bl	804788e <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80461c4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80461c6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80461c8:	6820      	ldr	r0, [r4, #0]
 80461ca:	f001 fb60 	bl	804788e <SDIO_GetResponse>
 80461ce:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80461d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80461d4:	2b03      	cmp	r3, #3
 80461d6:	d125      	bne.n	8046224 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80461d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80461da:	2b03      	cmp	r3, #3
 80461dc:	d12f      	bne.n	804623e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80461de:	2104      	movs	r1, #4
 80461e0:	6820      	ldr	r0, [r4, #0]
 80461e2:	f001 fb54 	bl	804788e <SDIO_GetResponse>
 80461e6:	0d00      	lsrs	r0, r0, #20
 80461e8:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80461ea:	a90d      	add	r1, sp, #52	; 0x34
 80461ec:	4620      	mov	r0, r4
 80461ee:	f7ff fea3 	bl	8045f38 <HAL_SD_GetCardCSD>
 80461f2:	4605      	mov	r5, r0
 80461f4:	2800      	cmp	r0, #0
 80461f6:	d140      	bne.n	804627a <HAL_SD_InitCard+0x1d6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80461f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80461fa:	4603      	mov	r3, r0
 80461fc:	0412      	lsls	r2, r2, #16
 80461fe:	6820      	ldr	r0, [r4, #0]
 8046200:	f001 fbee 	bl	80479e0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8046204:	b9a8      	cbnz	r0, 8046232 <HAL_SD_InitCard+0x18e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8046206:	f104 0310 	add.w	r3, r4, #16
 804620a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 804620e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8046212:	1d23      	adds	r3, r4, #4
 8046214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8046216:	6820      	ldr	r0, [r4, #0]
 8046218:	f001 faf6 	bl	8047808 <SDIO_Init>
}
 804621c:	4628      	mov	r0, r5
 804621e:	b019      	add	sp, #100	; 0x64
 8046220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8046224:	f10d 0116 	add.w	r1, sp, #22
 8046228:	6820      	ldr	r0, [r4, #0]
 804622a:	f001 fce5 	bl	8047bf8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 804622e:	2800      	cmp	r0, #0
 8046230:	d0d2      	beq.n	80461d8 <HAL_SD_InitCard+0x134>
    hsd->State = HAL_SD_STATE_READY;
 8046232:	2501      	movs	r5, #1
 8046234:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8046238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804623a:	4308      	orrs	r0, r1
 804623c:	e767      	b.n	804610e <HAL_SD_InitCard+0x6a>
    hsd->SdCard.RelCardAdd = sd_rca;
 804623e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8046242:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046244:	6820      	ldr	r0, [r4, #0]
 8046246:	0409      	lsls	r1, r1, #16
 8046248:	f001 fcc0 	bl	8047bcc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 804624c:	2800      	cmp	r0, #0
 804624e:	d1f0      	bne.n	8046232 <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046250:	4601      	mov	r1, r0
 8046252:	6820      	ldr	r0, [r4, #0]
 8046254:	f001 fb1b 	bl	804788e <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8046258:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 804625a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 804625c:	6820      	ldr	r0, [r4, #0]
 804625e:	f001 fb16 	bl	804788e <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8046262:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8046264:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8046266:	6820      	ldr	r0, [r4, #0]
 8046268:	f001 fb11 	bl	804788e <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 804626c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 804626e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8046270:	6820      	ldr	r0, [r4, #0]
 8046272:	f001 fb0c 	bl	804788e <SDIO_GetResponse>
 8046276:	6720      	str	r0, [r4, #112]	; 0x70
 8046278:	e7b1      	b.n	80461de <HAL_SD_InitCard+0x13a>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 804627a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 804627e:	e7d8      	b.n	8046232 <HAL_SD_InitCard+0x18e>
    return HAL_ERROR;
 8046280:	2501      	movs	r5, #1
 8046282:	e7cb      	b.n	804621c <HAL_SD_InitCard+0x178>
 8046284:	422580a0 	.word	0x422580a0
 8046288:	c1100000 	.word	0xc1100000

0804628c <HAL_SD_Init>:
{
 804628c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 804628e:	4604      	mov	r4, r0
 8046290:	b908      	cbnz	r0, 8046296 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8046292:	2001      	movs	r0, #1
}
 8046294:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8046296:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 804629a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 804629e:	b913      	cbnz	r3, 80462a6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80462a0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80462a2:	f009 fa85 	bl	804f7b0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80462a6:	2303      	movs	r3, #3
 80462a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80462ac:	4620      	mov	r0, r4
 80462ae:	f7ff fef9 	bl	80460a4 <HAL_SD_InitCard>
 80462b2:	2800      	cmp	r0, #0
 80462b4:	d1ed      	bne.n	8046292 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80462b6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80462b8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80462ba:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80462bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80462c0:	e7e8      	b.n	8046294 <HAL_SD_Init+0x8>

080462c2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80462c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80462c4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80462c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80462c8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80462ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80462cc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80462ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80462d0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80462d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80462d4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80462d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80462d8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80462da:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80462dc:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80462de:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80462e0:	61cb      	str	r3, [r1, #28]
}
 80462e2:	2000      	movs	r0, #0
 80462e4:	4770      	bx	lr
	...

080462e8 <HAL_SD_ConfigWideBusOperation>:
{
 80462e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80462ea:	2303      	movs	r3, #3
 80462ec:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80462f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80462f2:	2b03      	cmp	r3, #3
{
 80462f4:	b08b      	sub	sp, #44	; 0x2c
 80462f6:	4604      	mov	r4, r0
 80462f8:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80462fa:	d002      	beq.n	8046302 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80462fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8046300:	d103      	bne.n	804630a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046308:	e053      	b.n	80463b2 <HAL_SD_ConfigWideBusOperation+0xca>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 804630a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 804630e:	6800      	ldr	r0, [r0, #0]
 8046310:	d12a      	bne.n	8046368 <HAL_SD_ConfigWideBusOperation+0x80>
  uint32_t scr[2U] = {0U, 0U};
 8046312:	2100      	movs	r1, #0
 8046314:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8046318:	f001 fab9 	bl	804788e <SDIO_GetResponse>
 804631c:	0180      	lsls	r0, r0, #6
 804631e:	d41e      	bmi.n	804635e <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8046320:	a904      	add	r1, sp, #16
 8046322:	4620      	mov	r0, r4
 8046324:	f7ff fc53 	bl	8045bce <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8046328:	b960      	cbnz	r0, 8046344 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 804632a:	9b05      	ldr	r3, [sp, #20]
 804632c:	0359      	lsls	r1, r3, #13
 804632e:	d518      	bpl.n	8046362 <HAL_SD_ConfigWideBusOperation+0x7a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046330:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8046332:	6820      	ldr	r0, [r4, #0]
 8046334:	0409      	lsls	r1, r1, #16
 8046336:	f001 fbd3 	bl	8047ae0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 804633a:	b918      	cbnz	r0, 8046344 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 804633c:	2102      	movs	r1, #2
 804633e:	6820      	ldr	r0, [r4, #0]
 8046340:	f001 fbff 	bl	8047b42 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8046344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046346:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8046348:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 804634a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 804634c:	6827      	ldr	r7, [r4, #0]
 804634e:	b395      	cbz	r5, 80463b6 <HAL_SD_ConfigWideBusOperation+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046350:	4b26      	ldr	r3, [pc, #152]	; (80463ec <HAL_SD_ConfigWideBusOperation+0x104>)
 8046352:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8046354:	2001      	movs	r0, #1
 8046356:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 804635a:	b00b      	add	sp, #44	; 0x2c
 804635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 804635e:	4630      	mov	r0, r6
 8046360:	e7f0      	b.n	8046344 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8046362:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8046366:	e7ed      	b.n	8046344 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8046368:	bb01      	cbnz	r1, 80463ac <HAL_SD_ConfigWideBusOperation+0xc4>
  uint32_t scr[2U] = {0U, 0U};
 804636a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 804636e:	f001 fa8e 	bl	804788e <SDIO_GetResponse>
 8046372:	0182      	lsls	r2, r0, #6
 8046374:	d414      	bmi.n	80463a0 <HAL_SD_ConfigWideBusOperation+0xb8>
  errorstate = SD_FindSCR(hsd, scr);
 8046376:	a904      	add	r1, sp, #16
 8046378:	4620      	mov	r0, r4
 804637a:	f7ff fc28 	bl	8045bce <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 804637e:	b960      	cbnz	r0, 804639a <HAL_SD_ConfigWideBusOperation+0xb2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8046380:	9b05      	ldr	r3, [sp, #20]
 8046382:	03db      	lsls	r3, r3, #15
 8046384:	d50f      	bpl.n	80463a6 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046386:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8046388:	6820      	ldr	r0, [r4, #0]
 804638a:	0409      	lsls	r1, r1, #16
 804638c:	f001 fba8 	bl	8047ae0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8046390:	b918      	cbnz	r0, 804639a <HAL_SD_ConfigWideBusOperation+0xb2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8046392:	4601      	mov	r1, r0
 8046394:	6820      	ldr	r0, [r4, #0]
 8046396:	f001 fbd4 	bl	8047b42 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 804639a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804639c:	4308      	orrs	r0, r1
 804639e:	e7d3      	b.n	8046348 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80463a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80463a4:	e7f9      	b.n	804639a <HAL_SD_ConfigWideBusOperation+0xb2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80463a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80463aa:	e7f6      	b.n	804639a <HAL_SD_ConfigWideBusOperation+0xb2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80463ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80463ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80463b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80463b4:	e7c9      	b.n	804634a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80463b6:	6863      	ldr	r3, [r4, #4]
 80463b8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80463ba:	68a3      	ldr	r3, [r4, #8]
 80463bc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80463be:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80463c0:	e9cd 3606 	strd	r3, r6, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80463c4:	6963      	ldr	r3, [r4, #20]
 80463c6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80463c8:	69a3      	ldr	r3, [r4, #24]
 80463ca:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80463cc:	ab0a      	add	r3, sp, #40	; 0x28
 80463ce:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80463d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80463d6:	ab04      	add	r3, sp, #16
 80463d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80463da:	4638      	mov	r0, r7
 80463dc:	f001 fa14 	bl	8047808 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80463e0:	2301      	movs	r3, #1
 80463e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80463e6:	4628      	mov	r0, r5
 80463e8:	e7b7      	b.n	804635a <HAL_SD_ConfigWideBusOperation+0x72>
 80463ea:	bf00      	nop
 80463ec:	004005ff 	.word	0x004005ff

080463f0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80463f0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80463f2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80463f4:	0409      	lsls	r1, r1, #16
{
 80463f6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80463f8:	6800      	ldr	r0, [r0, #0]
 80463fa:	f001 fc4d 	bl	8047c98 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80463fe:	4601      	mov	r1, r0
 8046400:	b928      	cbnz	r0, 804640e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8046402:	6820      	ldr	r0, [r4, #0]
 8046404:	f001 fa43 	bl	804788e <SDIO_GetResponse>
}
 8046408:	f3c0 2043 	ubfx	r0, r0, #9, #4
 804640c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 804640e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046410:	4319      	orrs	r1, r3
 8046412:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8046414:	2000      	movs	r0, #0
 8046416:	e7f7      	b.n	8046408 <HAL_SD_GetCardState+0x18>

08046418 <SD_DMAError>:
{
 8046418:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804641a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 804641c:	f7fd fe62 	bl	80440e4 <HAL_DMA_GetError>
 8046420:	2802      	cmp	r0, #2
 8046422:	d026      	beq.n	8046472 <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8046424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8046426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8046428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804642a:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 804642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 804642e:	d001      	beq.n	8046434 <SD_DMAError+0x1c>
 8046430:	2b01      	cmp	r3, #1
 8046432:	d11b      	bne.n	804646c <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8046434:	6823      	ldr	r3, [r4, #0]
 8046436:	4a0f      	ldr	r2, [pc, #60]	; (8046474 <SD_DMAError+0x5c>)
 8046438:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 804643a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804643c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8046440:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8046442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8046448:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 804644a:	4620      	mov	r0, r4
 804644c:	f7ff ffd0 	bl	80463f0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8046450:	3805      	subs	r0, #5
 8046452:	2801      	cmp	r0, #1
 8046454:	d805      	bhi.n	8046462 <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8046456:	6820      	ldr	r0, [r4, #0]
 8046458:	f001 faa8 	bl	80479ac <SDMMC_CmdStopTransfer>
 804645c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804645e:	4318      	orrs	r0, r3
 8046460:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8046462:	2301      	movs	r3, #1
 8046464:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8046468:	2300      	movs	r3, #0
 804646a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 804646c:	4620      	mov	r0, r4
 804646e:	f7ff fd41 	bl	8045ef4 <HAL_SD_ErrorCallback>
}
 8046472:	bd10      	pop	{r4, pc}
 8046474:	004005ff 	.word	0x004005ff

08046478 <SD_DMATxAbort>:
{
 8046478:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 804647a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 804647c:	6823      	ldr	r3, [r4, #0]
 804647e:	f240 523a 	movw	r2, #1338	; 0x53a
 8046482:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8046484:	4620      	mov	r0, r4
 8046486:	f7ff ffb3 	bl	80463f0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 804648a:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804648c:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 804648e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8046492:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8046494:	f04f 0300 	mov.w	r3, #0
 8046498:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 804649a:	d805      	bhi.n	80464a8 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804649c:	6820      	ldr	r0, [r4, #0]
 804649e:	f001 fa85 	bl	80479ac <SDMMC_CmdStopTransfer>
 80464a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80464a4:	4318      	orrs	r0, r3
 80464a6:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80464a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 80464aa:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80464ac:	b913      	cbnz	r3, 80464b4 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80464ae:	f7fd f860 	bl	8043572 <HAL_SD_AbortCallback>
}
 80464b2:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 80464b4:	f7ff fd1e 	bl	8045ef4 <HAL_SD_ErrorCallback>
}
 80464b8:	e7fb      	b.n	80464b2 <SD_DMATxAbort+0x3a>
	...

080464bc <HAL_SD_IRQHandler>:
{
 80464bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 80464c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 80464c2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80464c4:	6800      	ldr	r0, [r0, #0]
 80464c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80464c8:	041a      	lsls	r2, r3, #16
 80464ca:	d51f      	bpl.n	804650c <HAL_SD_IRQHandler+0x50>
 80464cc:	072b      	lsls	r3, r5, #28
 80464ce:	d51d      	bpl.n	804650c <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80464d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 80464d2:	b1c7      	cbz	r7, 8046506 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 80464d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80464d6:	1d35      	adds	r5, r6, #4
 80464d8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80464dc:	6820      	ldr	r0, [r4, #0]
 80464de:	f001 f9af 	bl	8047840 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80464e2:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 80464e4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80464e8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80464ec:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80464ee:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80464f0:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80464f4:	f805 0c01 	strb.w	r0, [r5, #-1]
 80464f8:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 80464fa:	4545      	cmp	r5, r8
 80464fc:	d1ee      	bne.n	80464dc <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 80464fe:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8046500:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 8046502:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8046504:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8046506:	b002      	add	sp, #8
 8046508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 804650c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804650e:	05df      	lsls	r7, r3, #23
 8046510:	d545      	bpl.n	804659e <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8046512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8046516:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8046518:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804651a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 804651e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8046522:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8046524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8046526:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8046528:	f023 0301 	bic.w	r3, r3, #1
 804652c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 804652e:	d51b      	bpl.n	8046568 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8046530:	f015 0f22 	tst.w	r5, #34	; 0x22
 8046534:	d008      	beq.n	8046548 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8046536:	f001 fa39 	bl	80479ac <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 804653a:	b128      	cbz	r0, 8046548 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 804653c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804653e:	4318      	orrs	r0, r3
 8046540:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8046542:	4620      	mov	r0, r4
 8046544:	f7ff fcd6 	bl	8045ef4 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8046548:	6823      	ldr	r3, [r4, #0]
 804654a:	f240 523a 	movw	r2, #1338	; 0x53a
 804654e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8046550:	2301      	movs	r3, #1
 8046552:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8046556:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8046558:	f04f 0300 	mov.w	r3, #0
 804655c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 804655e:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8046560:	d01a      	beq.n	8046598 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 8046562:	f7fd f80e 	bl	8043582 <HAL_SD_RxCpltCallback>
 8046566:	e7ce      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8046568:	062a      	lsls	r2, r5, #24
 804656a:	d5cc      	bpl.n	8046506 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 804656c:	06ab      	lsls	r3, r5, #26
 804656e:	d508      	bpl.n	8046582 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8046570:	f001 fa1c 	bl	80479ac <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8046574:	b128      	cbz	r0, 8046582 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 8046576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046578:	4318      	orrs	r0, r3
 804657a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 804657c:	4620      	mov	r0, r4
 804657e:	f7ff fcb9 	bl	8045ef4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8046582:	07af      	lsls	r7, r5, #30
 8046584:	d1bf      	bne.n	8046506 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8046586:	6822      	ldr	r2, [r4, #0]
 8046588:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 804658a:	f023 0308 	bic.w	r3, r3, #8
 804658e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8046590:	2301      	movs	r3, #1
 8046592:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8046596:	4620      	mov	r0, r4
 8046598:	f7fc ffef 	bl	804357a <HAL_SD_TxCpltCallback>
 804659c:	e7b3      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 804659e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80465a0:	045e      	lsls	r6, r3, #17
 80465a2:	d526      	bpl.n	80465f2 <HAL_SD_IRQHandler+0x136>
 80465a4:	0729      	lsls	r1, r5, #28
 80465a6:	d524      	bpl.n	80465f2 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80465a8:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80465aa:	2f00      	cmp	r7, #0
 80465ac:	d0ab      	beq.n	8046506 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80465ae:	6a26      	ldr	r6, [r4, #32]
 80465b0:	1d35      	adds	r5, r6, #4
 80465b2:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80465b6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80465ba:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80465bc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80465c0:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 80465c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80465c6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80465c8:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80465cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80465d0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80465d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80465d6:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80465d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80465dc:	3504      	adds	r5, #4
 80465de:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80465e0:	f001 f931 	bl	8047846 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80465e4:	4545      	cmp	r5, r8
 80465e6:	d1e6      	bne.n	80465b6 <HAL_SD_IRQHandler+0xfa>
    }

    hsd->pTxBuffPtr = tmp;
 80465e8:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 80465ea:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 80465ec:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 80465ee:	6267      	str	r7, [r4, #36]	; 0x24
 80465f0:	e789      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80465f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80465f4:	f240 233a 	movw	r3, #570	; 0x23a
 80465f8:	421a      	tst	r2, r3
 80465fa:	d084      	beq.n	8046506 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80465fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80465fe:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8046600:	bf42      	ittt	mi
 8046602:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046604:	f043 0302 	orrmi.w	r3, r3, #2
 8046608:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 804660a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804660c:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 804660e:	bf42      	ittt	mi
 8046610:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046612:	f043 0308 	orrmi.w	r3, r3, #8
 8046616:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8046618:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804661a:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 804661c:	bf42      	ittt	mi
 804661e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8046620:	f043 0320 	orrmi.w	r3, r3, #32
 8046624:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8046626:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046628:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 804662a:	bf42      	ittt	mi
 804662c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804662e:	f043 0310 	orrmi.w	r3, r3, #16
 8046632:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8046634:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8046636:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8046638:	bf42      	ittt	mi
 804663a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 804663c:	f043 0308 	orrmi.w	r3, r3, #8
 8046640:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8046642:	f240 733a 	movw	r3, #1850	; 0x73a
 8046646:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8046648:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804664a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 804664e:	f023 0302 	bic.w	r3, r3, #2
 8046652:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8046654:	f001 f9aa 	bl	80479ac <SDMMC_CmdStopTransfer>
 8046658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 804665a:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 804665c:	ea40 0003 	orr.w	r0, r0, r3
 8046660:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8046662:	d508      	bpl.n	8046676 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8046664:	2301      	movs	r3, #1
 8046666:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 804666a:	2300      	movs	r3, #0
 804666c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 804666e:	4620      	mov	r0, r4
 8046670:	f7ff fc40 	bl	8045ef4 <HAL_SD_ErrorCallback>
 8046674:	e747      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8046676:	062b      	lsls	r3, r5, #24
 8046678:	f57f af45 	bpl.w	8046506 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 804667c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8046680:	d00b      	beq.n	804669a <HAL_SD_IRQHandler+0x1de>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8046682:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8046684:	4b10      	ldr	r3, [pc, #64]	; (80466c8 <HAL_SD_IRQHandler+0x20c>)
 8046686:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8046688:	f7fd fc5c 	bl	8043f44 <HAL_DMA_Abort_IT>
 804668c:	2800      	cmp	r0, #0
 804668e:	f43f af3a 	beq.w	8046506 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8046692:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          SD_DMARxAbort(hsd->hdmarx);
 8046694:	f7ff fef0 	bl	8046478 <SD_DMATxAbort>
 8046698:	e735      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 804669a:	f015 0503 	ands.w	r5, r5, #3
 804669e:	d009      	beq.n	80466b4 <HAL_SD_IRQHandler+0x1f8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80466a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80466a2:	4b0a      	ldr	r3, [pc, #40]	; (80466cc <HAL_SD_IRQHandler+0x210>)
 80466a4:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80466a6:	f7fd fc4d 	bl	8043f44 <HAL_DMA_Abort_IT>
 80466aa:	2800      	cmp	r0, #0
 80466ac:	f43f af2b 	beq.w	8046506 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80466b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80466b2:	e7ef      	b.n	8046694 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 80466b4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80466b6:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80466b8:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80466ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80466be:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80466c0:	f7fc ff57 	bl	8043572 <HAL_SD_AbortCallback>
}
 80466c4:	e71f      	b.n	8046506 <HAL_SD_IRQHandler+0x4a>
 80466c6:	bf00      	nop
 80466c8:	08046479 	.word	0x08046479
 80466cc:	080466d1 	.word	0x080466d1

080466d0 <SD_DMARxAbort>:
 80466d0:	f7ff bed2 	b.w	8046478 <SD_DMATxAbort>

080466d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80466d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80466d6:	4604      	mov	r4, r0
 80466d8:	460e      	mov	r6, r1
 80466da:	4615      	mov	r5, r2
 80466dc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80466de:	6821      	ldr	r1, [r4, #0]
 80466e0:	688a      	ldr	r2, [r1, #8]
 80466e2:	ea36 0302 	bics.w	r3, r6, r2
 80466e6:	d001      	beq.n	80466ec <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80466e8:	2000      	movs	r0, #0
 80466ea:	e02d      	b.n	8046748 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80466ec:	1c6b      	adds	r3, r5, #1
 80466ee:	d0f7      	beq.n	80466e0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80466f0:	f7fd f882 	bl	80437f8 <HAL_GetTick>
 80466f4:	1bc0      	subs	r0, r0, r7
 80466f6:	4285      	cmp	r5, r0
 80466f8:	d8f1      	bhi.n	80466de <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80466fa:	6823      	ldr	r3, [r4, #0]
 80466fc:	685a      	ldr	r2, [r3, #4]
 80466fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8046702:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8046704:	6862      	ldr	r2, [r4, #4]
 8046706:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804670a:	d10a      	bne.n	8046722 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 804670c:	68a2      	ldr	r2, [r4, #8]
 804670e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8046712:	d002      	beq.n	804671a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8046714:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8046718:	d103      	bne.n	8046722 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 804671a:	681a      	ldr	r2, [r3, #0]
 804671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046720:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8046722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8046724:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8046728:	d107      	bne.n	804673a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 804672a:	681a      	ldr	r2, [r3, #0]
 804672c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8046730:	601a      	str	r2, [r3, #0]
 8046732:	681a      	ldr	r2, [r3, #0]
 8046734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8046738:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 804673a:	2301      	movs	r3, #1
 804673c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8046740:	2300      	movs	r3, #0
 8046742:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8046746:	2003      	movs	r0, #3
}
 8046748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804674c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804674c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804674e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046750:	4a12      	ldr	r2, [pc, #72]	; (804679c <SPI_EndRxTxTransaction+0x50>)
 8046752:	4e13      	ldr	r6, [pc, #76]	; (80467a0 <SPI_EndRxTxTransaction+0x54>)
 8046754:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046756:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046758:	fbb5 f6f6 	udiv	r6, r5, r6
 804675c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8046760:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046762:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8046766:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8046768:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804676a:	d10b      	bne.n	8046784 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804676c:	460a      	mov	r2, r1
 804676e:	2180      	movs	r1, #128	; 0x80
 8046770:	f7ff ffb0 	bl	80466d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8046774:	b178      	cbz	r0, 8046796 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8046776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8046778:	f043 0320 	orr.w	r3, r3, #32
 804677c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 804677e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8046780:	b002      	add	sp, #8
 8046782:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8046784:	9b01      	ldr	r3, [sp, #4]
 8046786:	b133      	cbz	r3, 8046796 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8046788:	9b01      	ldr	r3, [sp, #4]
 804678a:	3b01      	subs	r3, #1
 804678c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804678e:	6823      	ldr	r3, [r4, #0]
 8046790:	689b      	ldr	r3, [r3, #8]
 8046792:	061b      	lsls	r3, r3, #24
 8046794:	d4f6      	bmi.n	8046784 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8046796:	2000      	movs	r0, #0
 8046798:	e7f2      	b.n	8046780 <SPI_EndRxTxTransaction+0x34>
 804679a:	bf00      	nop
 804679c:	20001048 	.word	0x20001048
 80467a0:	016e3600 	.word	0x016e3600

080467a4 <HAL_SPI_Init>:
{
 80467a4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80467a6:	4604      	mov	r4, r0
 80467a8:	2800      	cmp	r0, #0
 80467aa:	d036      	beq.n	804681a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80467ac:	2300      	movs	r3, #0
 80467ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80467b0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80467b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80467b8:	b91b      	cbnz	r3, 80467c2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80467ba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80467be:	f009 f969 	bl	804fa94 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80467c2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80467c4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80467c6:	2302      	movs	r3, #2
 80467c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80467cc:	680b      	ldr	r3, [r1, #0]
 80467ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80467d2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80467d4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80467d8:	4303      	orrs	r3, r0
 80467da:	68e0      	ldr	r0, [r4, #12]
 80467dc:	4303      	orrs	r3, r0
 80467de:	6920      	ldr	r0, [r4, #16]
 80467e0:	4303      	orrs	r3, r0
 80467e2:	6960      	ldr	r0, [r4, #20]
 80467e4:	4303      	orrs	r3, r0
 80467e6:	69e0      	ldr	r0, [r4, #28]
 80467e8:	4303      	orrs	r3, r0
 80467ea:	6a20      	ldr	r0, [r4, #32]
 80467ec:	4303      	orrs	r3, r0
 80467ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80467f0:	4303      	orrs	r3, r0
 80467f2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80467f6:	4303      	orrs	r3, r0
 80467f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80467fa:	0c12      	lsrs	r2, r2, #16
 80467fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80467fe:	f002 0204 	and.w	r2, r2, #4
 8046802:	431a      	orrs	r2, r3
 8046804:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8046806:	69cb      	ldr	r3, [r1, #28]
 8046808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804680c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804680e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8046810:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8046812:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8046814:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8046818:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 804681a:	2001      	movs	r0, #1
 804681c:	e7fc      	b.n	8046818 <HAL_SPI_Init+0x74>

0804681e <HAL_SPI_TransmitReceive>:
{
 804681e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8046822:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8046824:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8046828:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 804682a:	2b01      	cmp	r3, #1
{
 804682c:	4604      	mov	r4, r0
 804682e:	460d      	mov	r5, r1
 8046830:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8046832:	f000 80e2 	beq.w	80469fa <HAL_SPI_TransmitReceive+0x1dc>
 8046836:	2301      	movs	r3, #1
 8046838:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 804683c:	f7fc ffdc 	bl	80437f8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8046840:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8046844:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8046846:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8046848:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 804684a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804684c:	d00a      	beq.n	8046864 <HAL_SPI_TransmitReceive+0x46>
 804684e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8046852:	f040 80d0 	bne.w	80469f6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8046856:	68a0      	ldr	r0, [r4, #8]
 8046858:	2800      	cmp	r0, #0
 804685a:	f040 80cc 	bne.w	80469f6 <HAL_SPI_TransmitReceive+0x1d8>
 804685e:	2b04      	cmp	r3, #4
 8046860:	f040 80c9 	bne.w	80469f6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8046864:	2d00      	cmp	r5, #0
 8046866:	f000 80c4 	beq.w	80469f2 <HAL_SPI_TransmitReceive+0x1d4>
 804686a:	f1b9 0f00 	cmp.w	r9, #0
 804686e:	f000 80c0 	beq.w	80469f2 <HAL_SPI_TransmitReceive+0x1d4>
 8046872:	2e00      	cmp	r6, #0
 8046874:	f000 80bd 	beq.w	80469f2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8046878:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804687c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8046880:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8046882:	bf1c      	itt	ne
 8046884:	2305      	movne	r3, #5
 8046886:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804688a:	2300      	movs	r3, #0
 804688c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 804688e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046892:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8046894:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8046896:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046898:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 804689a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804689c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 804689e:	bf58      	it	pl
 80468a0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80468a2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80468a4:	bf58      	it	pl
 80468a6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80468aa:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80468ac:	bf58      	it	pl
 80468ae:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80468b0:	68e2      	ldr	r2, [r4, #12]
 80468b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80468b6:	d158      	bne.n	804696a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80468b8:	b109      	cbz	r1, 80468be <HAL_SPI_TransmitReceive+0xa0>
 80468ba:	2e01      	cmp	r6, #1
 80468bc:	d107      	bne.n	80468ce <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80468be:	f835 2b02 	ldrh.w	r2, [r5], #2
 80468c2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80468c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80468c6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80468c8:	3b01      	subs	r3, #1
 80468ca:	b29b      	uxth	r3, r3
 80468cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80468ce:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80468d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80468d2:	b29b      	uxth	r3, r3
 80468d4:	b9ab      	cbnz	r3, 8046902 <HAL_SPI_TransmitReceive+0xe4>
 80468d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80468d8:	b29b      	uxth	r3, r3
 80468da:	b993      	cbnz	r3, 8046902 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80468dc:	4642      	mov	r2, r8
 80468de:	4639      	mov	r1, r7
 80468e0:	4620      	mov	r0, r4
 80468e2:	f7ff ff33 	bl	804674c <SPI_EndRxTxTransaction>
 80468e6:	2800      	cmp	r0, #0
 80468e8:	f040 8081 	bne.w	80469ee <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80468ec:	68a3      	ldr	r3, [r4, #8]
 80468ee:	2b00      	cmp	r3, #0
 80468f0:	d132      	bne.n	8046958 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80468f2:	6823      	ldr	r3, [r4, #0]
 80468f4:	9001      	str	r0, [sp, #4]
 80468f6:	68da      	ldr	r2, [r3, #12]
 80468f8:	9201      	str	r2, [sp, #4]
 80468fa:	689b      	ldr	r3, [r3, #8]
 80468fc:	9301      	str	r3, [sp, #4]
 80468fe:	9b01      	ldr	r3, [sp, #4]
 8046900:	e02a      	b.n	8046958 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046902:	6822      	ldr	r2, [r4, #0]
 8046904:	6893      	ldr	r3, [r2, #8]
 8046906:	0799      	lsls	r1, r3, #30
 8046908:	d50d      	bpl.n	8046926 <HAL_SPI_TransmitReceive+0x108>
 804690a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804690c:	b29b      	uxth	r3, r3
 804690e:	b153      	cbz	r3, 8046926 <HAL_SPI_TransmitReceive+0x108>
 8046910:	b14d      	cbz	r5, 8046926 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8046912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046914:	f833 1b02 	ldrh.w	r1, [r3], #2
 8046918:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804691a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 804691c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804691e:	3b01      	subs	r3, #1
 8046920:	b29b      	uxth	r3, r3
 8046922:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8046924:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8046926:	6893      	ldr	r3, [r2, #8]
 8046928:	07db      	lsls	r3, r3, #31
 804692a:	d50c      	bpl.n	8046946 <HAL_SPI_TransmitReceive+0x128>
 804692c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804692e:	b29b      	uxth	r3, r3
 8046930:	b14b      	cbz	r3, 8046946 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8046932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8046934:	68d2      	ldr	r2, [r2, #12]
 8046936:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804693a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 804693c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804693e:	3b01      	subs	r3, #1
 8046940:	b29b      	uxth	r3, r3
 8046942:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8046944:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8046946:	f7fc ff57 	bl	80437f8 <HAL_GetTick>
 804694a:	eba0 0008 	sub.w	r0, r0, r8
 804694e:	4287      	cmp	r7, r0
 8046950:	d8be      	bhi.n	80468d0 <HAL_SPI_TransmitReceive+0xb2>
 8046952:	1c7e      	adds	r6, r7, #1
 8046954:	d0bc      	beq.n	80468d0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8046956:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8046958:	2301      	movs	r3, #1
 804695a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804695e:	2300      	movs	r3, #0
 8046960:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8046964:	b003      	add	sp, #12
 8046966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804696a:	b109      	cbz	r1, 8046970 <HAL_SPI_TransmitReceive+0x152>
 804696c:	2e01      	cmp	r6, #1
 804696e:	d108      	bne.n	8046982 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8046970:	782a      	ldrb	r2, [r5, #0]
 8046972:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8046974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8046976:	3301      	adds	r3, #1
 8046978:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 804697a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804697c:	3b01      	subs	r3, #1
 804697e:	b29b      	uxth	r3, r3
 8046980:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8046982:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8046986:	b29b      	uxth	r3, r3
 8046988:	b91b      	cbnz	r3, 8046992 <HAL_SPI_TransmitReceive+0x174>
 804698a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804698c:	b29b      	uxth	r3, r3
 804698e:	2b00      	cmp	r3, #0
 8046990:	d0a4      	beq.n	80468dc <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046992:	6822      	ldr	r2, [r4, #0]
 8046994:	6893      	ldr	r3, [r2, #8]
 8046996:	0798      	lsls	r0, r3, #30
 8046998:	d50e      	bpl.n	80469b8 <HAL_SPI_TransmitReceive+0x19a>
 804699a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 804699c:	b29b      	uxth	r3, r3
 804699e:	b15b      	cbz	r3, 80469b8 <HAL_SPI_TransmitReceive+0x19a>
 80469a0:	b155      	cbz	r5, 80469b8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80469a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80469a4:	781b      	ldrb	r3, [r3, #0]
 80469a6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80469a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80469aa:	3301      	adds	r3, #1
 80469ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80469ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80469b0:	3b01      	subs	r3, #1
 80469b2:	b29b      	uxth	r3, r3
 80469b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80469b6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80469b8:	6822      	ldr	r2, [r4, #0]
 80469ba:	6893      	ldr	r3, [r2, #8]
 80469bc:	07d9      	lsls	r1, r3, #31
 80469be:	d50d      	bpl.n	80469dc <HAL_SPI_TransmitReceive+0x1be>
 80469c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80469c2:	b29b      	uxth	r3, r3
 80469c4:	b153      	cbz	r3, 80469dc <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80469c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80469c8:	68d2      	ldr	r2, [r2, #12]
 80469ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80469cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80469ce:	3301      	adds	r3, #1
 80469d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80469d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80469d4:	3b01      	subs	r3, #1
 80469d6:	b29b      	uxth	r3, r3
 80469d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80469da:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80469dc:	f7fc ff0c 	bl	80437f8 <HAL_GetTick>
 80469e0:	eba0 0008 	sub.w	r0, r0, r8
 80469e4:	4287      	cmp	r7, r0
 80469e6:	d8cd      	bhi.n	8046984 <HAL_SPI_TransmitReceive+0x166>
 80469e8:	1c7b      	adds	r3, r7, #1
 80469ea:	d0cb      	beq.n	8046984 <HAL_SPI_TransmitReceive+0x166>
 80469ec:	e7b3      	b.n	8046956 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80469ee:	2320      	movs	r3, #32
 80469f0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80469f2:	2001      	movs	r0, #1
 80469f4:	e7b0      	b.n	8046958 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80469f6:	2002      	movs	r0, #2
 80469f8:	e7ae      	b.n	8046958 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80469fa:	2002      	movs	r0, #2
 80469fc:	e7b2      	b.n	8046964 <HAL_SPI_TransmitReceive+0x146>

080469fe <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80469fe:	2302      	movs	r3, #2
 8046a00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046a04:	6803      	ldr	r3, [r0, #0]
 8046a06:	689a      	ldr	r2, [r3, #8]
 8046a08:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046a0c:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8046a0e:	bf1e      	ittt	ne
 8046a10:	681a      	ldrne	r2, [r3, #0]
 8046a12:	f042 0201 	orrne.w	r2, r2, #1
 8046a16:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046a18:	2301      	movs	r3, #1
 8046a1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8046a1e:	2000      	movs	r0, #0
 8046a20:	4770      	bx	lr

08046a22 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046a22:	2302      	movs	r3, #2
 8046a24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8046a28:	6803      	ldr	r3, [r0, #0]
 8046a2a:	6a19      	ldr	r1, [r3, #32]
 8046a2c:	f241 1211 	movw	r2, #4369	; 0x1111
 8046a30:	4211      	tst	r1, r2
 8046a32:	d108      	bne.n	8046a46 <HAL_TIM_Base_Stop+0x24>
 8046a34:	6a19      	ldr	r1, [r3, #32]
 8046a36:	f240 4244 	movw	r2, #1092	; 0x444
 8046a3a:	4211      	tst	r1, r2
 8046a3c:	bf02      	ittt	eq
 8046a3e:	681a      	ldreq	r2, [r3, #0]
 8046a40:	f022 0201 	biceq.w	r2, r2, #1
 8046a44:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046a46:	2301      	movs	r3, #1
 8046a48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8046a4c:	2000      	movs	r0, #0
 8046a4e:	4770      	bx	lr

08046a50 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8046a50:	6803      	ldr	r3, [r0, #0]
 8046a52:	68da      	ldr	r2, [r3, #12]
 8046a54:	f042 0201 	orr.w	r2, r2, #1
 8046a58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046a5a:	689a      	ldr	r2, [r3, #8]
 8046a5c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046a60:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8046a62:	bf1e      	ittt	ne
 8046a64:	681a      	ldrne	r2, [r3, #0]
 8046a66:	f042 0201 	orrne.w	r2, r2, #1
 8046a6a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8046a6c:	2000      	movs	r0, #0
 8046a6e:	4770      	bx	lr

08046a70 <HAL_TIM_OC_DelayElapsedCallback>:
 8046a70:	4770      	bx	lr

08046a72 <HAL_TIM_IC_CaptureCallback>:
 8046a72:	4770      	bx	lr

08046a74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8046a74:	4770      	bx	lr

08046a76 <HAL_TIM_TriggerCallback>:
 8046a76:	4770      	bx	lr

08046a78 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8046a78:	6803      	ldr	r3, [r0, #0]
 8046a7a:	691a      	ldr	r2, [r3, #16]
 8046a7c:	0791      	lsls	r1, r2, #30
{
 8046a7e:	b510      	push	{r4, lr}
 8046a80:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8046a82:	d50e      	bpl.n	8046aa2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8046a84:	68da      	ldr	r2, [r3, #12]
 8046a86:	0792      	lsls	r2, r2, #30
 8046a88:	d50b      	bpl.n	8046aa2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8046a8a:	f06f 0202 	mvn.w	r2, #2
 8046a8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046a90:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8046a92:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046a94:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8046a96:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8046a98:	d077      	beq.n	8046b8a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8046a9a:	f7ff ffea 	bl	8046a72 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046a9e:	2300      	movs	r3, #0
 8046aa0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8046aa2:	6823      	ldr	r3, [r4, #0]
 8046aa4:	691a      	ldr	r2, [r3, #16]
 8046aa6:	0750      	lsls	r0, r2, #29
 8046aa8:	d510      	bpl.n	8046acc <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8046aaa:	68da      	ldr	r2, [r3, #12]
 8046aac:	0751      	lsls	r1, r2, #29
 8046aae:	d50d      	bpl.n	8046acc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8046ab0:	f06f 0204 	mvn.w	r2, #4
 8046ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046ab6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8046ab8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046aba:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8046abe:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046ac0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8046ac2:	d068      	beq.n	8046b96 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8046ac4:	f7ff ffd5 	bl	8046a72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046ac8:	2300      	movs	r3, #0
 8046aca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8046acc:	6823      	ldr	r3, [r4, #0]
 8046ace:	691a      	ldr	r2, [r3, #16]
 8046ad0:	0712      	lsls	r2, r2, #28
 8046ad2:	d50f      	bpl.n	8046af4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8046ad4:	68da      	ldr	r2, [r3, #12]
 8046ad6:	0710      	lsls	r0, r2, #28
 8046ad8:	d50c      	bpl.n	8046af4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8046ada:	f06f 0208 	mvn.w	r2, #8
 8046ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046ae0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8046ae2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046ae4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8046ae6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046ae8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8046aea:	d05a      	beq.n	8046ba2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8046aec:	f7ff ffc1 	bl	8046a72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046af0:	2300      	movs	r3, #0
 8046af2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8046af4:	6823      	ldr	r3, [r4, #0]
 8046af6:	691a      	ldr	r2, [r3, #16]
 8046af8:	06d2      	lsls	r2, r2, #27
 8046afa:	d510      	bpl.n	8046b1e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8046afc:	68da      	ldr	r2, [r3, #12]
 8046afe:	06d0      	lsls	r0, r2, #27
 8046b00:	d50d      	bpl.n	8046b1e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8046b02:	f06f 0210 	mvn.w	r2, #16
 8046b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046b08:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8046b0a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046b0c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8046b10:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8046b12:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8046b14:	d04b      	beq.n	8046bae <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8046b16:	f7ff ffac 	bl	8046a72 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8046b1a:	2300      	movs	r3, #0
 8046b1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8046b1e:	6823      	ldr	r3, [r4, #0]
 8046b20:	691a      	ldr	r2, [r3, #16]
 8046b22:	07d1      	lsls	r1, r2, #31
 8046b24:	d508      	bpl.n	8046b38 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8046b26:	68da      	ldr	r2, [r3, #12]
 8046b28:	07d2      	lsls	r2, r2, #31
 8046b2a:	d505      	bpl.n	8046b38 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8046b2c:	f06f 0201 	mvn.w	r2, #1
 8046b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8046b32:	4620      	mov	r0, r4
 8046b34:	f7fc fba8 	bl	8043288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8046b38:	6823      	ldr	r3, [r4, #0]
 8046b3a:	691a      	ldr	r2, [r3, #16]
 8046b3c:	0610      	lsls	r0, r2, #24
 8046b3e:	d508      	bpl.n	8046b52 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8046b40:	68da      	ldr	r2, [r3, #12]
 8046b42:	0611      	lsls	r1, r2, #24
 8046b44:	d505      	bpl.n	8046b52 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8046b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8046b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8046b4c:	4620      	mov	r0, r4
 8046b4e:	f000 f996 	bl	8046e7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8046b52:	6823      	ldr	r3, [r4, #0]
 8046b54:	691a      	ldr	r2, [r3, #16]
 8046b56:	0652      	lsls	r2, r2, #25
 8046b58:	d508      	bpl.n	8046b6c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8046b5a:	68da      	ldr	r2, [r3, #12]
 8046b5c:	0650      	lsls	r0, r2, #25
 8046b5e:	d505      	bpl.n	8046b6c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8046b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8046b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8046b66:	4620      	mov	r0, r4
 8046b68:	f7ff ff85 	bl	8046a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8046b6c:	6823      	ldr	r3, [r4, #0]
 8046b6e:	691a      	ldr	r2, [r3, #16]
 8046b70:	0691      	lsls	r1, r2, #26
 8046b72:	d522      	bpl.n	8046bba <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8046b74:	68da      	ldr	r2, [r3, #12]
 8046b76:	0692      	lsls	r2, r2, #26
 8046b78:	d51f      	bpl.n	8046bba <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8046b7a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8046b7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8046b80:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8046b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8046b86:	f000 b979 	b.w	8046e7c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8046b8a:	f7ff ff71 	bl	8046a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046b8e:	4620      	mov	r0, r4
 8046b90:	f7ff ff70 	bl	8046a74 <HAL_TIM_PWM_PulseFinishedCallback>
 8046b94:	e783      	b.n	8046a9e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046b96:	f7ff ff6b 	bl	8046a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046b9a:	4620      	mov	r0, r4
 8046b9c:	f7ff ff6a 	bl	8046a74 <HAL_TIM_PWM_PulseFinishedCallback>
 8046ba0:	e792      	b.n	8046ac8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046ba2:	f7ff ff65 	bl	8046a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046ba6:	4620      	mov	r0, r4
 8046ba8:	f7ff ff64 	bl	8046a74 <HAL_TIM_PWM_PulseFinishedCallback>
 8046bac:	e7a0      	b.n	8046af0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8046bae:	f7ff ff5f 	bl	8046a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8046bb2:	4620      	mov	r0, r4
 8046bb4:	f7ff ff5e 	bl	8046a74 <HAL_TIM_PWM_PulseFinishedCallback>
 8046bb8:	e7af      	b.n	8046b1a <HAL_TIM_IRQHandler+0xa2>
}
 8046bba:	bd10      	pop	{r4, pc}

08046bbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8046bbc:	4a30      	ldr	r2, [pc, #192]	; (8046c80 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8046bbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8046bc0:	4290      	cmp	r0, r2
 8046bc2:	d012      	beq.n	8046bea <TIM_Base_SetConfig+0x2e>
 8046bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8046bc8:	d00f      	beq.n	8046bea <TIM_Base_SetConfig+0x2e>
 8046bca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8046bce:	4290      	cmp	r0, r2
 8046bd0:	d00b      	beq.n	8046bea <TIM_Base_SetConfig+0x2e>
 8046bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046bd6:	4290      	cmp	r0, r2
 8046bd8:	d007      	beq.n	8046bea <TIM_Base_SetConfig+0x2e>
 8046bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046bde:	4290      	cmp	r0, r2
 8046be0:	d003      	beq.n	8046bea <TIM_Base_SetConfig+0x2e>
 8046be2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8046be6:	4290      	cmp	r0, r2
 8046be8:	d119      	bne.n	8046c1e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8046bea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8046bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8046bf0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8046bf2:	4a23      	ldr	r2, [pc, #140]	; (8046c80 <TIM_Base_SetConfig+0xc4>)
 8046bf4:	4290      	cmp	r0, r2
 8046bf6:	d029      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8046bfc:	d026      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046bfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8046c02:	4290      	cmp	r0, r2
 8046c04:	d022      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c0a:	4290      	cmp	r0, r2
 8046c0c:	d01e      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c12:	4290      	cmp	r0, r2
 8046c14:	d01a      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8046c1a:	4290      	cmp	r0, r2
 8046c1c:	d016      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c1e:	4a19      	ldr	r2, [pc, #100]	; (8046c84 <TIM_Base_SetConfig+0xc8>)
 8046c20:	4290      	cmp	r0, r2
 8046c22:	d013      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c28:	4290      	cmp	r0, r2
 8046c2a:	d00f      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c30:	4290      	cmp	r0, r2
 8046c32:	d00b      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c34:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8046c38:	4290      	cmp	r0, r2
 8046c3a:	d007      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c40:	4290      	cmp	r0, r2
 8046c42:	d003      	beq.n	8046c4c <TIM_Base_SetConfig+0x90>
 8046c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046c48:	4290      	cmp	r0, r2
 8046c4a:	d103      	bne.n	8046c54 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8046c4c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8046c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8046c52:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8046c54:	694a      	ldr	r2, [r1, #20]
 8046c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8046c5a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8046c5c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8046c5e:	688b      	ldr	r3, [r1, #8]
 8046c60:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8046c62:	680b      	ldr	r3, [r1, #0]
 8046c64:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8046c66:	4b06      	ldr	r3, [pc, #24]	; (8046c80 <TIM_Base_SetConfig+0xc4>)
 8046c68:	4298      	cmp	r0, r3
 8046c6a:	d003      	beq.n	8046c74 <TIM_Base_SetConfig+0xb8>
 8046c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046c70:	4298      	cmp	r0, r3
 8046c72:	d101      	bne.n	8046c78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8046c74:	690b      	ldr	r3, [r1, #16]
 8046c76:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8046c78:	2301      	movs	r3, #1
 8046c7a:	6143      	str	r3, [r0, #20]
}
 8046c7c:	4770      	bx	lr
 8046c7e:	bf00      	nop
 8046c80:	40010000 	.word	0x40010000
 8046c84:	40014000 	.word	0x40014000

08046c88 <HAL_TIM_Base_Init>:
{
 8046c88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8046c8a:	4604      	mov	r4, r0
 8046c8c:	b1a0      	cbz	r0, 8046cb8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8046c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8046c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8046c96:	b91b      	cbnz	r3, 8046ca0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8046c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8046c9c:	f008 fb46 	bl	804f32c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8046ca0:	2302      	movs	r3, #2
 8046ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8046ca6:	6820      	ldr	r0, [r4, #0]
 8046ca8:	1d21      	adds	r1, r4, #4
 8046caa:	f7ff ff87 	bl	8046bbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8046cae:	2301      	movs	r3, #1
 8046cb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8046cb4:	2000      	movs	r0, #0
}
 8046cb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8046cb8:	2001      	movs	r0, #1
 8046cba:	e7fc      	b.n	8046cb6 <HAL_TIM_Base_Init+0x2e>

08046cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8046cbc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8046cbe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8046cc0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8046cc2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8046cc6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8046cca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8046ccc:	6083      	str	r3, [r0, #8]
}
 8046cce:	bd10      	pop	{r4, pc}

08046cd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8046cd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8046cd4:	2b01      	cmp	r3, #1
{
 8046cd6:	b570      	push	{r4, r5, r6, lr}
 8046cd8:	4604      	mov	r4, r0
 8046cda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8046cde:	d019      	beq.n	8046d14 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8046ce0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8046ce4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8046ce6:	2301      	movs	r3, #1
 8046ce8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8046cec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8046cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8046cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8046cf6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8046cf8:	680b      	ldr	r3, [r1, #0]
 8046cfa:	2b40      	cmp	r3, #64	; 0x40
 8046cfc:	d065      	beq.n	8046dca <HAL_TIM_ConfigClockSource+0xfa>
 8046cfe:	d815      	bhi.n	8046d2c <HAL_TIM_ConfigClockSource+0x5c>
 8046d00:	2b10      	cmp	r3, #16
 8046d02:	d00c      	beq.n	8046d1e <HAL_TIM_ConfigClockSource+0x4e>
 8046d04:	d807      	bhi.n	8046d16 <HAL_TIM_ConfigClockSource+0x46>
 8046d06:	b153      	cbz	r3, 8046d1e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8046d08:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8046d0a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8046d0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8046d10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8046d14:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8046d16:	2b20      	cmp	r3, #32
 8046d18:	d001      	beq.n	8046d1e <HAL_TIM_ConfigClockSource+0x4e>
 8046d1a:	2b30      	cmp	r3, #48	; 0x30
 8046d1c:	d1f4      	bne.n	8046d08 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8046d1e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046d20:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8046d24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046d28:	4313      	orrs	r3, r2
 8046d2a:	e01a      	b.n	8046d62 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8046d2c:	2b60      	cmp	r3, #96	; 0x60
 8046d2e:	d034      	beq.n	8046d9a <HAL_TIM_ConfigClockSource+0xca>
 8046d30:	d819      	bhi.n	8046d66 <HAL_TIM_ConfigClockSource+0x96>
 8046d32:	2b50      	cmp	r3, #80	; 0x50
 8046d34:	d1e8      	bne.n	8046d08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8046d36:	684a      	ldr	r2, [r1, #4]
 8046d38:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8046d3a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8046d3c:	6a05      	ldr	r5, [r0, #32]
 8046d3e:	f025 0501 	bic.w	r5, r5, #1
 8046d42:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046d44:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8046d46:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8046d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8046d4e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8046d52:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8046d54:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8046d56:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046d58:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046d5e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8046d62:	6083      	str	r3, [r0, #8]
 8046d64:	e7d0      	b.n	8046d08 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8046d66:	2b70      	cmp	r3, #112	; 0x70
 8046d68:	d00c      	beq.n	8046d84 <HAL_TIM_ConfigClockSource+0xb4>
 8046d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046d6e:	d1cb      	bne.n	8046d08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8046d70:	68cb      	ldr	r3, [r1, #12]
 8046d72:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8046d76:	f7ff ffa1 	bl	8046cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8046d7a:	6822      	ldr	r2, [r4, #0]
 8046d7c:	6893      	ldr	r3, [r2, #8]
 8046d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8046d82:	e008      	b.n	8046d96 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8046d84:	68cb      	ldr	r3, [r1, #12]
 8046d86:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8046d8a:	f7ff ff97 	bl	8046cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8046d8e:	6822      	ldr	r2, [r4, #0]
 8046d90:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8046d92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8046d96:	6093      	str	r3, [r2, #8]
      break;
 8046d98:	e7b6      	b.n	8046d08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8046d9a:	684d      	ldr	r5, [r1, #4]
 8046d9c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8046d9e:	6a01      	ldr	r1, [r0, #32]
 8046da0:	f021 0110 	bic.w	r1, r1, #16
 8046da4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046da6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8046da8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8046daa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8046dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8046db2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8046db6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8046dba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8046dbc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046dbe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046dc4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8046dc8:	e7cb      	b.n	8046d62 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8046dca:	684a      	ldr	r2, [r1, #4]
 8046dcc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8046dce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8046dd0:	6a05      	ldr	r5, [r0, #32]
 8046dd2:	f025 0501 	bic.w	r5, r5, #1
 8046dd6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8046dd8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8046dda:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8046dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8046de2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8046de6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8046de8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8046dea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8046dec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8046dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8046df2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8046df6:	e7b4      	b.n	8046d62 <HAL_TIM_ConfigClockSource+0x92>

08046df8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8046df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8046dfc:	2b01      	cmp	r3, #1
{
 8046dfe:	b530      	push	{r4, r5, lr}
 8046e00:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8046e04:	d035      	beq.n	8046e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046e06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8046e0a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8046e0c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8046e0e:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8046e10:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8046e14:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8046e16:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8046e18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8046e1c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8046e1e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8046e20:	4c15      	ldr	r4, [pc, #84]	; (8046e78 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8046e22:	42a3      	cmp	r3, r4
 8046e24:	d01a      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8046e2a:	d017      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e2c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8046e30:	42a3      	cmp	r3, r4
 8046e32:	d013      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8046e38:	42a3      	cmp	r3, r4
 8046e3a:	d00f      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8046e40:	42a3      	cmp	r3, r4
 8046e42:	d00b      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e44:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8046e48:	42a3      	cmp	r3, r4
 8046e4a:	d007      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e4c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8046e50:	42a3      	cmp	r3, r4
 8046e52:	d003      	beq.n	8046e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8046e54:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8046e58:	42a3      	cmp	r3, r4
 8046e5a:	d104      	bne.n	8046e66 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8046e5c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8046e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8046e62:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8046e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8046e66:	2301      	movs	r3, #1
 8046e68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8046e6c:	2300      	movs	r3, #0
 8046e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8046e72:	4618      	mov	r0, r3

  return HAL_OK;
}
 8046e74:	bd30      	pop	{r4, r5, pc}
 8046e76:	bf00      	nop
 8046e78:	40010000 	.word	0x40010000

08046e7c <HAL_TIMEx_CommutCallback>:
 8046e7c:	4770      	bx	lr

08046e7e <HAL_TIMEx_BreakCallback>:
 8046e7e:	4770      	bx	lr

08046e80 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8046e80:	6803      	ldr	r3, [r0, #0]
 8046e82:	68da      	ldr	r2, [r3, #12]
 8046e84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8046e88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046e8a:	695a      	ldr	r2, [r3, #20]
 8046e8c:	f022 0201 	bic.w	r2, r2, #1
 8046e90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046e92:	2320      	movs	r3, #32
 8046e94:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8046e98:	4770      	bx	lr
	...

08046e9c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8046e9c:	6803      	ldr	r3, [r0, #0]
 8046e9e:	68c1      	ldr	r1, [r0, #12]
 8046ea0:	691a      	ldr	r2, [r3, #16]
{
 8046ea2:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8046ea4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 8046ea8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8046eaa:	430a      	orrs	r2, r1
 8046eac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8046eae:	6925      	ldr	r5, [r4, #16]
 8046eb0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8046eb2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8046eb4:	69c0      	ldr	r0, [r0, #28]
 8046eb6:	432a      	orrs	r2, r5
 8046eb8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8046eba:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8046ebe:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8046ec0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8046ec4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8046ec6:	430a      	orrs	r2, r1
 8046ec8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8046eca:	695a      	ldr	r2, [r3, #20]
 8046ecc:	69a1      	ldr	r1, [r4, #24]
 8046ece:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8046ed2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8046ed4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8046ed8:	615a      	str	r2, [r3, #20]
 8046eda:	4a26      	ldr	r2, [pc, #152]	; (8046f74 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8046edc:	d129      	bne.n	8046f32 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8046ede:	4293      	cmp	r3, r2
 8046ee0:	d003      	beq.n	8046eea <UART_SetConfig+0x4e>
 8046ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8046ee6:	4293      	cmp	r3, r2
 8046ee8:	d120      	bne.n	8046f2c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8046eea:	f7fe fafd 	bl	80454e8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8046eee:	6862      	ldr	r2, [r4, #4]
 8046ef0:	2600      	movs	r6, #0
 8046ef2:	1892      	adds	r2, r2, r2
 8046ef4:	f04f 0119 	mov.w	r1, #25
 8046ef8:	eb46 0306 	adc.w	r3, r6, r6
 8046efc:	fba0 0101 	umull	r0, r1, r0, r1
 8046f00:	f7f9 ffdc 	bl	8040ebc <__aeabi_uldivmod>
 8046f04:	2164      	movs	r1, #100	; 0x64
 8046f06:	fbb0 f5f1 	udiv	r5, r0, r1
 8046f0a:	fb01 0315 	mls	r3, r1, r5, r0
 8046f0e:	00db      	lsls	r3, r3, #3
 8046f10:	3332      	adds	r3, #50	; 0x32
 8046f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8046f16:	f003 0207 	and.w	r2, r3, #7
 8046f1a:	005b      	lsls	r3, r3, #1
 8046f1c:	6821      	ldr	r1, [r4, #0]
 8046f1e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8046f22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8046f26:	4413      	add	r3, r2
 8046f28:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8046f2a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8046f2c:	f7fe facc 	bl	80454c8 <HAL_RCC_GetPCLK1Freq>
 8046f30:	e7dd      	b.n	8046eee <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8046f32:	4293      	cmp	r3, r2
 8046f34:	d002      	beq.n	8046f3c <UART_SetConfig+0xa0>
 8046f36:	4a10      	ldr	r2, [pc, #64]	; (8046f78 <UART_SetConfig+0xdc>)
 8046f38:	4293      	cmp	r3, r2
 8046f3a:	d117      	bne.n	8046f6c <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8046f3c:	f7fe fad4 	bl	80454e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8046f40:	6863      	ldr	r3, [r4, #4]
 8046f42:	2119      	movs	r1, #25
 8046f44:	009a      	lsls	r2, r3, #2
 8046f46:	fba0 0101 	umull	r0, r1, r0, r1
 8046f4a:	0f9b      	lsrs	r3, r3, #30
 8046f4c:	f7f9 ffb6 	bl	8040ebc <__aeabi_uldivmod>
 8046f50:	2264      	movs	r2, #100	; 0x64
 8046f52:	fbb0 f1f2 	udiv	r1, r0, r2
 8046f56:	fb02 0311 	mls	r3, r2, r1, r0
 8046f5a:	6824      	ldr	r4, [r4, #0]
 8046f5c:	011b      	lsls	r3, r3, #4
 8046f5e:	3332      	adds	r3, #50	; 0x32
 8046f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8046f64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8046f68:	60a3      	str	r3, [r4, #8]
}
 8046f6a:	e7de      	b.n	8046f2a <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8046f6c:	f7fe faac 	bl	80454c8 <HAL_RCC_GetPCLK1Freq>
 8046f70:	e7e6      	b.n	8046f40 <UART_SetConfig+0xa4>
 8046f72:	bf00      	nop
 8046f74:	40011000 	.word	0x40011000
 8046f78:	40011400 	.word	0x40011400

08046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8046f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046f7e:	4604      	mov	r4, r0
 8046f80:	460e      	mov	r6, r1
 8046f82:	4617      	mov	r7, r2
 8046f84:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046f86:	6821      	ldr	r1, [r4, #0]
 8046f88:	680b      	ldr	r3, [r1, #0]
 8046f8a:	ea36 0303 	bics.w	r3, r6, r3
 8046f8e:	d101      	bne.n	8046f94 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8046f90:	2000      	movs	r0, #0
 8046f92:	e014      	b.n	8046fbe <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8046f94:	1c6b      	adds	r3, r5, #1
 8046f96:	d0f7      	beq.n	8046f88 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8046f98:	b995      	cbnz	r5, 8046fc0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8046f9a:	6823      	ldr	r3, [r4, #0]
 8046f9c:	68da      	ldr	r2, [r3, #12]
 8046f9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8046fa2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046fa4:	695a      	ldr	r2, [r3, #20]
 8046fa6:	f022 0201 	bic.w	r2, r2, #1
 8046faa:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8046fac:	2320      	movs	r3, #32
 8046fae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8046fb2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8046fb6:	2300      	movs	r3, #0
 8046fb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8046fbc:	2003      	movs	r0, #3
}
 8046fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8046fc0:	f7fc fc1a 	bl	80437f8 <HAL_GetTick>
 8046fc4:	1bc0      	subs	r0, r0, r7
 8046fc6:	4285      	cmp	r5, r0
 8046fc8:	d2dd      	bcs.n	8046f86 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8046fca:	e7e6      	b.n	8046f9a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08046fcc <HAL_UART_Init>:
{
 8046fcc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8046fce:	4604      	mov	r4, r0
 8046fd0:	b340      	cbz	r0, 8047024 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8046fd2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8046fd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8046fda:	b91b      	cbnz	r3, 8046fe4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8046fdc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8046fe0:	f009 f9b8 	bl	8050354 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8046fe4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8046fe6:	2324      	movs	r3, #36	; 0x24
 8046fe8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8046fec:	68d3      	ldr	r3, [r2, #12]
 8046fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8046ff2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8046ff4:	4620      	mov	r0, r4
 8046ff6:	f7ff ff51 	bl	8046e9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8046ffa:	6823      	ldr	r3, [r4, #0]
 8046ffc:	691a      	ldr	r2, [r3, #16]
 8046ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8047002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8047004:	695a      	ldr	r2, [r3, #20]
 8047006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804700a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 804700c:	68da      	ldr	r2, [r3, #12]
 804700e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047012:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047014:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8047016:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047018:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 804701a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 804701e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8047022:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8047024:	2001      	movs	r0, #1
 8047026:	e7fc      	b.n	8047022 <HAL_UART_Init+0x56>

08047028 <HAL_UART_DeInit>:
{
 8047028:	b510      	push	{r4, lr}
  if (huart == NULL)
 804702a:	4604      	mov	r4, r0
 804702c:	b190      	cbz	r0, 8047054 <HAL_UART_DeInit+0x2c>
  __HAL_UART_DISABLE(huart);
 804702e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8047030:	2324      	movs	r3, #36	; 0x24
 8047032:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8047036:	68d3      	ldr	r3, [r2, #12]
 8047038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 804703c:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 804703e:	f009 fa7f 	bl	8050540 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047042:	2000      	movs	r0, #0
 8047044:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8047046:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 804704a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 804704e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 8047052:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8047054:	2001      	movs	r0, #1
 8047056:	e7fc      	b.n	8047052 <HAL_UART_DeInit+0x2a>

08047058 <HAL_UART_Transmit>:
{
 8047058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804705c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 804705e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8047062:	2b20      	cmp	r3, #32
{
 8047064:	4604      	mov	r4, r0
 8047066:	460d      	mov	r5, r1
 8047068:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 804706a:	d14f      	bne.n	804710c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 804706c:	2900      	cmp	r1, #0
 804706e:	d04b      	beq.n	8047108 <HAL_UART_Transmit+0xb0>
 8047070:	2a00      	cmp	r2, #0
 8047072:	d049      	beq.n	8047108 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8047074:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8047078:	2b01      	cmp	r3, #1
 804707a:	d047      	beq.n	804710c <HAL_UART_Transmit+0xb4>
 804707c:	2301      	movs	r3, #1
 804707e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047082:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8047086:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047088:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804708c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8047090:	f7fc fbb2 	bl	80437f8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8047094:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8047098:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 804709a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 804709e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80470a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80470a4:	b29b      	uxth	r3, r3
 80470a6:	b953      	cbnz	r3, 80470be <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80470a8:	463b      	mov	r3, r7
 80470aa:	4632      	mov	r2, r6
 80470ac:	2140      	movs	r1, #64	; 0x40
 80470ae:	4620      	mov	r0, r4
 80470b0:	f7ff ff64 	bl	8046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80470b4:	b998      	cbnz	r0, 80470de <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80470b6:	2320      	movs	r3, #32
 80470b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80470bc:	e010      	b.n	80470e0 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 80470be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80470c0:	3b01      	subs	r3, #1
 80470c2:	b29b      	uxth	r3, r3
 80470c4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80470c6:	68a3      	ldr	r3, [r4, #8]
 80470c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80470cc:	4632      	mov	r2, r6
 80470ce:	463b      	mov	r3, r7
 80470d0:	f04f 0180 	mov.w	r1, #128	; 0x80
 80470d4:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80470d6:	d10e      	bne.n	80470f6 <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80470d8:	f7ff ff50 	bl	8046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80470dc:	b110      	cbz	r0, 80470e4 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 80470de:	2003      	movs	r0, #3
}
 80470e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80470e4:	882b      	ldrh	r3, [r5, #0]
 80470e6:	6822      	ldr	r2, [r4, #0]
 80470e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80470ec:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80470ee:	6923      	ldr	r3, [r4, #16]
 80470f0:	b943      	cbnz	r3, 8047104 <HAL_UART_Transmit+0xac>
          pData += 2U;
 80470f2:	3502      	adds	r5, #2
 80470f4:	e7d5      	b.n	80470a2 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80470f6:	f7ff ff41 	bl	8046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80470fa:	2800      	cmp	r0, #0
 80470fc:	d1ef      	bne.n	80470de <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80470fe:	6823      	ldr	r3, [r4, #0]
 8047100:	782a      	ldrb	r2, [r5, #0]
 8047102:	605a      	str	r2, [r3, #4]
 8047104:	3501      	adds	r5, #1
 8047106:	e7cc      	b.n	80470a2 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8047108:	2001      	movs	r0, #1
 804710a:	e7e9      	b.n	80470e0 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 804710c:	2002      	movs	r0, #2
 804710e:	e7e7      	b.n	80470e0 <HAL_UART_Transmit+0x88>

08047110 <HAL_UART_Receive>:
{
 8047110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8047114:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8047116:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 804711a:	2b20      	cmp	r3, #32
{
 804711c:	4604      	mov	r4, r0
 804711e:	460d      	mov	r5, r1
 8047120:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8047122:	d155      	bne.n	80471d0 <HAL_UART_Receive+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8047124:	2900      	cmp	r1, #0
 8047126:	d051      	beq.n	80471cc <HAL_UART_Receive+0xbc>
 8047128:	2a00      	cmp	r2, #0
 804712a:	d04f      	beq.n	80471cc <HAL_UART_Receive+0xbc>
    __HAL_LOCK(huart);
 804712c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8047130:	2b01      	cmp	r3, #1
 8047132:	d04d      	beq.n	80471d0 <HAL_UART_Receive+0xc0>
 8047134:	2301      	movs	r3, #1
 8047136:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804713a:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 804713e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047140:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8047144:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8047148:	f7fc fb56 	bl	80437f8 <HAL_GetTick>
    huart->RxXferSize = Size;
 804714c:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8047150:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8047152:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8047156:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 804715a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804715c:	b280      	uxth	r0, r0
 804715e:	b918      	cbnz	r0, 8047168 <HAL_UART_Receive+0x58>
    huart->RxState = HAL_UART_STATE_READY;
 8047160:	2320      	movs	r3, #32
 8047162:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8047166:	e010      	b.n	804718a <HAL_UART_Receive+0x7a>
      huart->RxXferCount--;
 8047168:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 804716a:	3b01      	subs	r3, #1
 804716c:	b29b      	uxth	r3, r3
 804716e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047170:	68a3      	ldr	r3, [r4, #8]
 8047172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8047176:	4632      	mov	r2, r6
 8047178:	463b      	mov	r3, r7
 804717a:	f04f 0120 	mov.w	r1, #32
 804717e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047180:	d116      	bne.n	80471b0 <HAL_UART_Receive+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8047182:	f7ff fefb 	bl	8046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8047186:	b110      	cbz	r0, 804718e <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8047188:	2003      	movs	r0, #3
}
 804718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 804718e:	6922      	ldr	r2, [r4, #16]
 8047190:	6823      	ldr	r3, [r4, #0]
 8047192:	b93a      	cbnz	r2, 80471a4 <HAL_UART_Receive+0x94>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8047194:	685a      	ldr	r2, [r3, #4]
 8047196:	462b      	mov	r3, r5
 8047198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804719c:	f823 2b02 	strh.w	r2, [r3], #2
{
 80471a0:	461d      	mov	r5, r3
 80471a2:	e7da      	b.n	804715a <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80471a4:	685a      	ldr	r2, [r3, #4]
 80471a6:	462b      	mov	r3, r5
 80471a8:	b2d2      	uxtb	r2, r2
 80471aa:	f823 2b01 	strh.w	r2, [r3], #1
 80471ae:	e7f7      	b.n	80471a0 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80471b0:	f7ff fee4 	bl	8046f7c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80471b4:	2800      	cmp	r0, #0
 80471b6:	d1e7      	bne.n	8047188 <HAL_UART_Receive+0x78>
 80471b8:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80471ba:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80471bc:	6852      	ldr	r2, [r2, #4]
 80471be:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80471c0:	b909      	cbnz	r1, 80471c6 <HAL_UART_Receive+0xb6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80471c2:	702a      	strb	r2, [r5, #0]
 80471c4:	e7ec      	b.n	80471a0 <HAL_UART_Receive+0x90>
 80471c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80471ca:	e7fa      	b.n	80471c2 <HAL_UART_Receive+0xb2>
      return  HAL_ERROR;
 80471cc:	2001      	movs	r0, #1
 80471ce:	e7dc      	b.n	804718a <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 80471d0:	2002      	movs	r0, #2
 80471d2:	e7da      	b.n	804718a <HAL_UART_Receive+0x7a>

080471d4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80471d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80471d8:	2b20      	cmp	r3, #32
 80471da:	d120      	bne.n	804721e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80471dc:	b1e9      	cbz	r1, 804721a <HAL_UART_Receive_IT+0x46>
 80471de:	b1e2      	cbz	r2, 804721a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80471e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80471e4:	2b01      	cmp	r3, #1
 80471e6:	d01a      	beq.n	804721e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80471e8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80471ea:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80471ec:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80471ee:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80471f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80471f2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80471f6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80471f8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80471fa:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80471fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8047200:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8047204:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8047206:	6951      	ldr	r1, [r2, #20]
 8047208:	f041 0101 	orr.w	r1, r1, #1
 804720c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 804720e:	68d1      	ldr	r1, [r2, #12]
 8047210:	f041 0120 	orr.w	r1, r1, #32
 8047214:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8047216:	4618      	mov	r0, r3
 8047218:	4770      	bx	lr
      return HAL_ERROR;
 804721a:	2001      	movs	r0, #1
 804721c:	4770      	bx	lr
    return HAL_BUSY;
 804721e:	2002      	movs	r0, #2
}
 8047220:	4770      	bx	lr
	...

08047224 <HAL_UART_Transmit_DMA>:
{
 8047224:	b538      	push	{r3, r4, r5, lr}
 8047226:	4604      	mov	r4, r0
 8047228:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 804722a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804722e:	2a20      	cmp	r2, #32
 8047230:	d12a      	bne.n	8047288 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8047232:	b339      	cbz	r1, 8047284 <HAL_UART_Transmit_DMA+0x60>
 8047234:	b333      	cbz	r3, 8047284 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8047236:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 804723a:	2a01      	cmp	r2, #1
 804723c:	d024      	beq.n	8047288 <HAL_UART_Transmit_DMA+0x64>
 804723e:	2201      	movs	r2, #1
 8047240:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047244:	2500      	movs	r5, #0
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047246:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8047248:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804724a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804724c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804724e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047252:	4a0e      	ldr	r2, [pc, #56]	; (804728c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8047254:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8047256:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8047258:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 804725a:	4a0d      	ldr	r2, [pc, #52]	; (8047290 <HAL_UART_Transmit_DMA+0x6c>)
 804725c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 804725e:	4a0d      	ldr	r2, [pc, #52]	; (8047294 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8047260:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8047264:	6822      	ldr	r2, [r4, #0]
 8047266:	3204      	adds	r2, #4
 8047268:	f7fc fe32 	bl	8043ed0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 804726c:	6823      	ldr	r3, [r4, #0]
 804726e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8047272:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8047274:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8047276:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804727a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804727e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8047280:	4628      	mov	r0, r5
}
 8047282:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8047284:	2001      	movs	r0, #1
 8047286:	e7fc      	b.n	8047282 <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8047288:	2002      	movs	r0, #2
 804728a:	e7fa      	b.n	8047282 <HAL_UART_Transmit_DMA+0x5e>
 804728c:	08047299 	.word	0x08047299
 8047290:	080472c7 	.word	0x080472c7
 8047294:	0804734b 	.word	0x0804734b

08047298 <UART_DMATransmitCplt>:
{
 8047298:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 804729a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 804729c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 804729e:	681b      	ldr	r3, [r3, #0]
 80472a0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80472a4:	d10a      	bne.n	80472bc <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 80472a6:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80472a8:	6813      	ldr	r3, [r2, #0]
 80472aa:	695a      	ldr	r2, [r3, #20]
 80472ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80472b0:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80472b2:	68da      	ldr	r2, [r3, #12]
 80472b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80472b8:	60da      	str	r2, [r3, #12]
}
 80472ba:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80472bc:	4610      	mov	r0, r2
 80472be:	f009 f801 	bl	80502c4 <HAL_UART_TxCpltCallback>
}
 80472c2:	e7fa      	b.n	80472ba <UART_DMATransmitCplt+0x22>

080472c4 <HAL_UART_TxHalfCpltCallback>:
 80472c4:	4770      	bx	lr

080472c6 <UART_DMATxHalfCplt>:
{
 80472c6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80472c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80472ca:	f7ff fffb 	bl	80472c4 <HAL_UART_TxHalfCpltCallback>
}
 80472ce:	bd08      	pop	{r3, pc}

080472d0 <HAL_UART_RxCpltCallback>:
 80472d0:	4770      	bx	lr

080472d2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80472d2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80472d6:	2b22      	cmp	r3, #34	; 0x22
{
 80472d8:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80472da:	d133      	bne.n	8047344 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80472dc:	6881      	ldr	r1, [r0, #8]
 80472de:	6904      	ldr	r4, [r0, #16]
 80472e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80472e2:	6802      	ldr	r2, [r0, #0]
 80472e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80472e8:	d123      	bne.n	8047332 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80472ea:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80472ec:	b9ec      	cbnz	r4, 804732a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80472ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80472f2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80472f6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80472f8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80472fa:	3c01      	subs	r4, #1
 80472fc:	b2a4      	uxth	r4, r4
 80472fe:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8047300:	b98c      	cbnz	r4, 8047326 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8047302:	6803      	ldr	r3, [r0, #0]
 8047304:	68da      	ldr	r2, [r3, #12]
 8047306:	f022 0220 	bic.w	r2, r2, #32
 804730a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 804730c:	68da      	ldr	r2, [r3, #12]
 804730e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8047312:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8047314:	695a      	ldr	r2, [r3, #20]
 8047316:	f022 0201 	bic.w	r2, r2, #1
 804731a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 804731c:	2320      	movs	r3, #32
 804731e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8047322:	f7ff ffd5 	bl	80472d0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8047326:	2000      	movs	r0, #0
 8047328:	e00d      	b.n	8047346 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 804732a:	b2d2      	uxtb	r2, r2
 804732c:	f823 2b01 	strh.w	r2, [r3], #1
 8047330:	e7e1      	b.n	80472f6 <UART_Receive_IT+0x24>
 8047332:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8047334:	6852      	ldr	r2, [r2, #4]
 8047336:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8047338:	b90c      	cbnz	r4, 804733e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 804733a:	701a      	strb	r2, [r3, #0]
 804733c:	e7dc      	b.n	80472f8 <UART_Receive_IT+0x26>
 804733e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8047342:	e7fa      	b.n	804733a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8047344:	2002      	movs	r0, #2
}
 8047346:	bd10      	pop	{r4, pc}

08047348 <HAL_UART_ErrorCallback>:
 8047348:	4770      	bx	lr

0804734a <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 804734a:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 804734c:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 804734e:	680b      	ldr	r3, [r1, #0]
 8047350:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8047352:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8047356:	2821      	cmp	r0, #33	; 0x21
 8047358:	d10a      	bne.n	8047370 <UART_DMAError+0x26>
 804735a:	0612      	lsls	r2, r2, #24
 804735c:	d508      	bpl.n	8047370 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 804735e:	2200      	movs	r2, #0
 8047360:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8047362:	68da      	ldr	r2, [r3, #12]
 8047364:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8047368:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 804736a:	2220      	movs	r2, #32
 804736c:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8047370:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8047372:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8047376:	2a22      	cmp	r2, #34	; 0x22
 8047378:	d106      	bne.n	8047388 <UART_DMAError+0x3e>
 804737a:	065b      	lsls	r3, r3, #25
 804737c:	d504      	bpl.n	8047388 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 804737e:	2300      	movs	r3, #0
 8047380:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8047382:	4608      	mov	r0, r1
 8047384:	f7ff fd7c 	bl	8046e80 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8047388:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 804738a:	f043 0310 	orr.w	r3, r3, #16
 804738e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8047390:	4608      	mov	r0, r1
 8047392:	f7ff ffd9 	bl	8047348 <HAL_UART_ErrorCallback>
}
 8047396:	bd08      	pop	{r3, pc}

08047398 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8047398:	6803      	ldr	r3, [r0, #0]
 804739a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 804739c:	68d9      	ldr	r1, [r3, #12]
{
 804739e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80473a0:	0716      	lsls	r6, r2, #28
{
 80473a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80473a4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80473a6:	d107      	bne.n	80473b8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80473a8:	0696      	lsls	r6, r2, #26
 80473aa:	d55a      	bpl.n	8047462 <HAL_UART_IRQHandler+0xca>
 80473ac:	068d      	lsls	r5, r1, #26
 80473ae:	d558      	bpl.n	8047462 <HAL_UART_IRQHandler+0xca>
}
 80473b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80473b4:	f7ff bf8d 	b.w	80472d2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80473b8:	f015 0501 	ands.w	r5, r5, #1
 80473bc:	d102      	bne.n	80473c4 <HAL_UART_IRQHandler+0x2c>
 80473be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80473c2:	d04e      	beq.n	8047462 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80473c4:	07d0      	lsls	r0, r2, #31
 80473c6:	d505      	bpl.n	80473d4 <HAL_UART_IRQHandler+0x3c>
 80473c8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80473ca:	bf42      	ittt	mi
 80473cc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80473ce:	f043 0301 	orrmi.w	r3, r3, #1
 80473d2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80473d4:	0756      	lsls	r6, r2, #29
 80473d6:	d504      	bpl.n	80473e2 <HAL_UART_IRQHandler+0x4a>
 80473d8:	b11d      	cbz	r5, 80473e2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80473da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80473dc:	f043 0302 	orr.w	r3, r3, #2
 80473e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80473e2:	0790      	lsls	r0, r2, #30
 80473e4:	d504      	bpl.n	80473f0 <HAL_UART_IRQHandler+0x58>
 80473e6:	b11d      	cbz	r5, 80473f0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80473e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80473ea:	f043 0304 	orr.w	r3, r3, #4
 80473ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80473f0:	0713      	lsls	r3, r2, #28
 80473f2:	d506      	bpl.n	8047402 <HAL_UART_IRQHandler+0x6a>
 80473f4:	068e      	lsls	r6, r1, #26
 80473f6:	d400      	bmi.n	80473fa <HAL_UART_IRQHandler+0x62>
 80473f8:	b11d      	cbz	r5, 8047402 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80473fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80473fc:	f043 0308 	orr.w	r3, r3, #8
 8047400:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8047402:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8047404:	b343      	cbz	r3, 8047458 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8047406:	0695      	lsls	r5, r2, #26
 8047408:	d504      	bpl.n	8047414 <HAL_UART_IRQHandler+0x7c>
 804740a:	0688      	lsls	r0, r1, #26
 804740c:	d502      	bpl.n	8047414 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 804740e:	4620      	mov	r0, r4
 8047410:	f7ff ff5f 	bl	80472d2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8047414:	6823      	ldr	r3, [r4, #0]
 8047416:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8047418:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 804741a:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 804741c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 804741e:	d402      	bmi.n	8047426 <HAL_UART_IRQHandler+0x8e>
 8047420:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8047424:	d019      	beq.n	804745a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8047426:	f7ff fd2b 	bl	8046e80 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804742a:	6823      	ldr	r3, [r4, #0]
 804742c:	695a      	ldr	r2, [r3, #20]
 804742e:	0652      	lsls	r2, r2, #25
 8047430:	d50f      	bpl.n	8047452 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047432:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8047434:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804743a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 804743c:	b148      	cbz	r0, 8047452 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804743e:	4b26      	ldr	r3, [pc, #152]	; (80474d8 <HAL_UART_IRQHandler+0x140>)
 8047440:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8047442:	f7fc fd7f 	bl	8043f44 <HAL_DMA_Abort_IT>
 8047446:	b138      	cbz	r0, 8047458 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8047448:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 804744a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804744e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8047450:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8047452:	4620      	mov	r0, r4
 8047454:	f7ff ff78 	bl	8047348 <HAL_UART_ErrorCallback>
}
 8047458:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 804745a:	f7ff ff75 	bl	8047348 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804745e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8047460:	e7fa      	b.n	8047458 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8047462:	0616      	lsls	r6, r2, #24
 8047464:	d528      	bpl.n	80474b8 <HAL_UART_IRQHandler+0x120>
 8047466:	060d      	lsls	r5, r1, #24
 8047468:	d526      	bpl.n	80474b8 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804746a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 804746e:	2a21      	cmp	r2, #33	; 0x21
 8047470:	d1f2      	bne.n	8047458 <HAL_UART_IRQHandler+0xc0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8047472:	68a1      	ldr	r1, [r4, #8]
 8047474:	6a22      	ldr	r2, [r4, #32]
 8047476:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 804747a:	d118      	bne.n	80474ae <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 804747c:	8811      	ldrh	r1, [r2, #0]
 804747e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8047482:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8047484:	6921      	ldr	r1, [r4, #16]
 8047486:	b981      	cbnz	r1, 80474aa <HAL_UART_IRQHandler+0x112>
        huart->pTxBuffPtr += 2U;
 8047488:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 804748a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 804748c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 804748e:	3a01      	subs	r2, #1
 8047490:	b292      	uxth	r2, r2
 8047492:	84e2      	strh	r2, [r4, #38]	; 0x26
 8047494:	2a00      	cmp	r2, #0
 8047496:	d1df      	bne.n	8047458 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8047498:	68da      	ldr	r2, [r3, #12]
 804749a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804749e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80474a0:	68da      	ldr	r2, [r3, #12]
 80474a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80474a6:	60da      	str	r2, [r3, #12]
 80474a8:	e7d6      	b.n	8047458 <HAL_UART_IRQHandler+0xc0>
        huart->pTxBuffPtr += 1U;
 80474aa:	3201      	adds	r2, #1
 80474ac:	e7ed      	b.n	804748a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80474ae:	1c51      	adds	r1, r2, #1
 80474b0:	6221      	str	r1, [r4, #32]
 80474b2:	7812      	ldrb	r2, [r2, #0]
 80474b4:	605a      	str	r2, [r3, #4]
 80474b6:	e7e9      	b.n	804748c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80474b8:	0650      	lsls	r0, r2, #25
 80474ba:	d5cd      	bpl.n	8047458 <HAL_UART_IRQHandler+0xc0>
 80474bc:	064a      	lsls	r2, r1, #25
 80474be:	d5cb      	bpl.n	8047458 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80474c0:	68da      	ldr	r2, [r3, #12]
 80474c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80474c6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80474c8:	2320      	movs	r3, #32
 80474ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80474ce:	4620      	mov	r0, r4
 80474d0:	f008 fef8 	bl	80502c4 <HAL_UART_TxCpltCallback>
 80474d4:	e7c0      	b.n	8047458 <HAL_UART_IRQHandler+0xc0>
 80474d6:	bf00      	nop
 80474d8:	080474dd 	.word	0x080474dd

080474dc <UART_DMAAbortOnError>:
{
 80474dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80474de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80474e0:	2300      	movs	r3, #0
 80474e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80474e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80474e6:	f7ff ff2f 	bl	8047348 <HAL_UART_ErrorCallback>
}
 80474ea:	bd08      	pop	{r3, pc}

080474ec <HAL_UART_AbortCpltCallback>:
 80474ec:	4770      	bx	lr
	...

080474f0 <HAL_UART_Abort_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80474f0:	6803      	ldr	r3, [r0, #0]
 80474f2:	68da      	ldr	r2, [r3, #12]
 80474f4:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
{
 80474f8:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80474fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80474fc:	695a      	ldr	r2, [r3, #20]
{
 80474fe:	4604      	mov	r4, r0
  if (huart->hdmatx != NULL)
 8047500:	6b00      	ldr	r0, [r0, #48]	; 0x30
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8047502:	f022 0201 	bic.w	r2, r2, #1
 8047506:	615a      	str	r2, [r3, #20]
  if (huart->hdmatx != NULL)
 8047508:	b128      	cbz	r0, 8047516 <HAL_UART_Abort_IT+0x26>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 804750a:	695a      	ldr	r2, [r3, #20]
 804750c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8047510:	bf18      	it	ne
 8047512:	4a1f      	ldrne	r2, [pc, #124]	; (8047590 <HAL_UART_Abort_IT+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8047514:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8047516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8047518:	b129      	cbz	r1, 8047526 <HAL_UART_Abort_IT+0x36>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804751a:	695a      	ldr	r2, [r3, #20]
 804751c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8047520:	bf18      	it	ne
 8047522:	4a1c      	ldrne	r2, [pc, #112]	; (8047594 <HAL_UART_Abort_IT+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8047524:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8047526:	695a      	ldr	r2, [r3, #20]
 8047528:	0612      	lsls	r2, r2, #24
 804752a:	d41d      	bmi.n	8047568 <HAL_UART_Abort_IT+0x78>
  uint32_t AbortCplt = 0x01U;
 804752c:	2301      	movs	r3, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804752e:	6822      	ldr	r2, [r4, #0]
 8047530:	6951      	ldr	r1, [r2, #20]
 8047532:	0649      	lsls	r1, r1, #25
 8047534:	d527      	bpl.n	8047586 <HAL_UART_Abort_IT+0x96>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8047536:	6951      	ldr	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8047538:	6b60      	ldr	r0, [r4, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804753a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 804753e:	6151      	str	r1, [r2, #20]
    if (huart->hdmarx != NULL)
 8047540:	b308      	cbz	r0, 8047586 <HAL_UART_Abort_IT+0x96>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8047542:	f7fc fcff 	bl	8043f44 <HAL_DMA_Abort_IT>
 8047546:	b300      	cbz	r0, 804758a <HAL_UART_Abort_IT+0x9a>
        huart->hdmarx->XferAbortCallback = NULL;
 8047548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804754a:	2200      	movs	r2, #0
 804754c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferCount = 0x00U;
 804754e:	2300      	movs	r3, #0
 8047550:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8047552:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047554:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8047556:	2320      	movs	r3, #32
 8047558:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_AbortCpltCallback(huart);
 804755c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 804755e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 8047562:	f7ff ffc3 	bl	80474ec <HAL_UART_AbortCpltCallback>
 8047566:	e010      	b.n	804758a <HAL_UART_Abort_IT+0x9a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8047568:	695a      	ldr	r2, [r3, #20]
 804756a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804756e:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8047570:	2800      	cmp	r0, #0
 8047572:	d0db      	beq.n	804752c <HAL_UART_Abort_IT+0x3c>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8047574:	f7fc fce6 	bl	8043f44 <HAL_DMA_Abort_IT>
 8047578:	b118      	cbz	r0, 8047582 <HAL_UART_Abort_IT+0x92>
        huart->hdmatx->XferAbortCallback = NULL;
 804757a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804757c:	2200      	movs	r2, #0
 804757e:	651a      	str	r2, [r3, #80]	; 0x50
 8047580:	e7d4      	b.n	804752c <HAL_UART_Abort_IT+0x3c>
        AbortCplt = 0x00U;
 8047582:	4603      	mov	r3, r0
 8047584:	e7d3      	b.n	804752e <HAL_UART_Abort_IT+0x3e>
  if (AbortCplt == 0x01U)
 8047586:	2b00      	cmp	r3, #0
 8047588:	d1e1      	bne.n	804754e <HAL_UART_Abort_IT+0x5e>
}
 804758a:	2000      	movs	r0, #0
 804758c:	bd10      	pop	{r4, pc}
 804758e:	bf00      	nop
 8047590:	080475c1 	.word	0x080475c1
 8047594:	08047599 	.word	0x08047599

08047598 <UART_DMARxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8047598:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 804759a:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 804759c:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 804759e:	2300      	movs	r3, #0
 80475a0:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 80475a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80475a4:	b10a      	cbz	r2, 80475aa <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80475a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80475a8:	b94a      	cbnz	r2, 80475be <UART_DMARxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80475aa:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80475ac:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80475ae:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80475b0:	2320      	movs	r3, #32
 80475b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80475b6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80475ba:	f7ff ff97 	bl	80474ec <HAL_UART_AbortCpltCallback>
}
 80475be:	bd08      	pop	{r3, pc}

080475c0 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80475c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80475c2:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 80475c4:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80475c6:	2300      	movs	r3, #0
 80475c8:	6513      	str	r3, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80475ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80475cc:	b10a      	cbz	r2, 80475d2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80475ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80475d0:	b94a      	cbnz	r2, 80475e6 <UART_DMATxAbortCallback+0x26>
  huart->TxXferCount = 0x00U;
 80475d2:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80475d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80475d6:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 80475d8:	2320      	movs	r3, #32
 80475da:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80475de:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 80475e2:	f7ff ff83 	bl	80474ec <HAL_UART_AbortCpltCallback>
}
 80475e6:	bd08      	pop	{r3, pc}

080475e8 <HAL_UART_AbortReceiveCpltCallback>:
 80475e8:	4770      	bx	lr
	...

080475ec <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80475ec:	6803      	ldr	r3, [r0, #0]
 80475ee:	68da      	ldr	r2, [r3, #12]
 80475f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 80475f4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80475f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80475f8:	695a      	ldr	r2, [r3, #20]
 80475fa:	f022 0201 	bic.w	r2, r2, #1
 80475fe:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8047600:	695a      	ldr	r2, [r3, #20]
 8047602:	f012 0240 	ands.w	r2, r2, #64	; 0x40
{
 8047606:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8047608:	d017      	beq.n	804763a <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804760a:	695a      	ldr	r2, [r3, #20]
 804760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047610:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8047612:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047614:	b153      	cbz	r3, 804762c <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8047616:	4a0a      	ldr	r2, [pc, #40]	; (8047640 <HAL_UART_AbortReceive_IT+0x54>)
 8047618:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804761a:	4618      	mov	r0, r3
 804761c:	f7fc fc92 	bl	8043f44 <HAL_DMA_Abort_IT>
 8047620:	b110      	cbz	r0, 8047628 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8047622:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8047624:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8047626:	4798      	blx	r3
}
 8047628:	2000      	movs	r0, #0
 804762a:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 804762c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 804762e:	2320      	movs	r3, #32
 8047630:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8047634:	f7ff ffd8 	bl	80475e8 <HAL_UART_AbortReceiveCpltCallback>
 8047638:	e7f6      	b.n	8047628 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 804763a:	85c2      	strh	r2, [r0, #46]	; 0x2e
 804763c:	e7f7      	b.n	804762e <HAL_UART_AbortReceive_IT+0x42>
 804763e:	bf00      	nop
 8047640:	08047645 	.word	0x08047645

08047644 <UART_DMARxOnlyAbortCallback>:
{
 8047644:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8047646:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8047648:	2300      	movs	r3, #0
 804764a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 804764c:	2320      	movs	r3, #32
 804764e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8047652:	f7ff ffc9 	bl	80475e8 <HAL_UART_AbortReceiveCpltCallback>
}
 8047656:	bd08      	pop	{r3, pc}

08047658 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047658:	4b12      	ldr	r3, [pc, #72]	; (80476a4 <SDMMC_GetCmdResp2+0x4c>)
 804765a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804765e:	681b      	ldr	r3, [r3, #0]
 8047660:	fbb3 f2f2 	udiv	r2, r3, r2
 8047664:	f241 3388 	movw	r3, #5000	; 0x1388
 8047668:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 804766a:	f113 33ff 	adds.w	r3, r3, #4294967295
 804766e:	d315      	bcc.n	804769c <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8047670:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047672:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047676:	d0f8      	beq.n	804766a <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047678:	0512      	lsls	r2, r2, #20
 804767a:	d4f6      	bmi.n	804766a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 804767c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804767e:	075b      	lsls	r3, r3, #29
 8047680:	d503      	bpl.n	804768a <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047682:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047684:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8047686:	4618      	mov	r0, r3
 8047688:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 804768a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804768c:	f013 0301 	ands.w	r3, r3, #1
 8047690:	d001      	beq.n	8047696 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047692:	2301      	movs	r3, #1
 8047694:	e7f6      	b.n	8047684 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8047696:	22c5      	movs	r2, #197	; 0xc5
 8047698:	6382      	str	r2, [r0, #56]	; 0x38
 804769a:	e7f4      	b.n	8047686 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 804769c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80476a0:	e7f1      	b.n	8047686 <SDMMC_GetCmdResp2+0x2e>
 80476a2:	bf00      	nop
 80476a4:	20001048 	.word	0x20001048

080476a8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80476a8:	4b0f      	ldr	r3, [pc, #60]	; (80476e8 <SDMMC_GetCmdResp3+0x40>)
 80476aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80476ae:	681b      	ldr	r3, [r3, #0]
 80476b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80476b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80476b8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80476ba:	f113 33ff 	adds.w	r3, r3, #4294967295
 80476be:	d30f      	bcc.n	80476e0 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80476c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80476c2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80476c6:	d0f8      	beq.n	80476ba <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80476c8:	0512      	lsls	r2, r2, #20
 80476ca:	d4f6      	bmi.n	80476ba <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80476cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80476ce:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80476d2:	bf15      	itete	ne
 80476d4:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80476d6:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80476d8:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80476da:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80476dc:	4618      	mov	r0, r3
 80476de:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80476e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80476e4:	4770      	bx	lr
 80476e6:	bf00      	nop
 80476e8:	20001048 	.word	0x20001048

080476ec <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80476ec:	4b44      	ldr	r3, [pc, #272]	; (8047800 <SDMMC_GetCmdResp1+0x114>)
{
 80476ee:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80476f0:	681b      	ldr	r3, [r3, #0]
 80476f2:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80476f6:	fbb3 f3f4 	udiv	r3, r3, r4
 80476fa:	435a      	muls	r2, r3
    if (count-- == 0U)
 80476fc:	2a00      	cmp	r2, #0
 80476fe:	d04a      	beq.n	8047796 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8047700:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047702:	f013 0f45 	tst.w	r3, #69	; 0x45
 8047706:	d008      	beq.n	804771a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047708:	051c      	lsls	r4, r3, #20
 804770a:	d406      	bmi.n	804771a <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 804770c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 804770e:	075b      	lsls	r3, r3, #29
 8047710:	d505      	bpl.n	804771e <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047712:	2304      	movs	r3, #4
 8047714:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8047716:	4618      	mov	r0, r3
}
 8047718:	bd10      	pop	{r4, pc}
 804771a:	3a01      	subs	r2, #1
 804771c:	e7ee      	b.n	80476fc <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 804771e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047720:	07dc      	lsls	r4, r3, #31
 8047722:	d503      	bpl.n	804772c <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047724:	2301      	movs	r3, #1
 8047726:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8047728:	2001      	movs	r0, #1
 804772a:	e7f5      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 804772c:	23c5      	movs	r3, #197	; 0xc5
 804772e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8047730:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8047732:	b2db      	uxtb	r3, r3
 8047734:	4299      	cmp	r1, r3
 8047736:	d1f7      	bne.n	8047728 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8047738:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 804773a:	4832      	ldr	r0, [pc, #200]	; (8047804 <SDMMC_GetCmdResp1+0x118>)
 804773c:	4018      	ands	r0, r3
 804773e:	2800      	cmp	r0, #0
 8047740:	d0ea      	beq.n	8047718 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8047742:	2b00      	cmp	r3, #0
 8047744:	db2a      	blt.n	804779c <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8047746:	005a      	lsls	r2, r3, #1
 8047748:	d42b      	bmi.n	80477a2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 804774a:	009c      	lsls	r4, r3, #2
 804774c:	d42b      	bmi.n	80477a6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 804774e:	00d9      	lsls	r1, r3, #3
 8047750:	d42b      	bmi.n	80477aa <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8047752:	011a      	lsls	r2, r3, #4
 8047754:	d42c      	bmi.n	80477b0 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8047756:	015c      	lsls	r4, r3, #5
 8047758:	d42d      	bmi.n	80477b6 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 804775a:	01d9      	lsls	r1, r3, #7
 804775c:	d42e      	bmi.n	80477bc <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 804775e:	021a      	lsls	r2, r3, #8
 8047760:	d42f      	bmi.n	80477c2 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8047762:	025c      	lsls	r4, r3, #9
 8047764:	d430      	bmi.n	80477c8 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8047766:	0299      	lsls	r1, r3, #10
 8047768:	d431      	bmi.n	80477ce <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 804776a:	02da      	lsls	r2, r3, #11
 804776c:	d432      	bmi.n	80477d4 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 804776e:	035c      	lsls	r4, r3, #13
 8047770:	d433      	bmi.n	80477da <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8047772:	0399      	lsls	r1, r3, #14
 8047774:	d434      	bmi.n	80477e0 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8047776:	03da      	lsls	r2, r3, #15
 8047778:	d435      	bmi.n	80477e6 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 804777a:	041c      	lsls	r4, r3, #16
 804777c:	d436      	bmi.n	80477ec <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 804777e:	0459      	lsls	r1, r3, #17
 8047780:	d437      	bmi.n	80477f2 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8047782:	049a      	lsls	r2, r3, #18
 8047784:	d438      	bmi.n	80477f8 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8047786:	f013 0f08 	tst.w	r3, #8
 804778a:	bf0c      	ite	eq
 804778c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8047790:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8047794:	e7c0      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8047796:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 804779a:	e7bd      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 804779c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80477a0:	e7ba      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80477a2:	2040      	movs	r0, #64	; 0x40
 80477a4:	e7b8      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80477a6:	2080      	movs	r0, #128	; 0x80
 80477a8:	e7b6      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80477aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80477ae:	e7b3      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80477b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80477b4:	e7b0      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80477b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80477ba:	e7ad      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80477bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80477c0:	e7aa      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80477c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80477c6:	e7a7      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80477c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80477cc:	e7a4      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80477ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80477d2:	e7a1      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80477d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80477d8:	e79e      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80477da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80477de:	e79b      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80477e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80477e4:	e798      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80477e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80477ea:	e795      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80477ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80477f0:	e792      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80477f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80477f6:	e78f      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80477f8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80477fc:	e78c      	b.n	8047718 <SDMMC_GetCmdResp1+0x2c>
 80477fe:	bf00      	nop
 8047800:	20001048 	.word	0x20001048
 8047804:	fdffe008 	.word	0xfdffe008

08047808 <SDIO_Init>:
{
 8047808:	b084      	sub	sp, #16
 804780a:	b510      	push	{r4, lr}
 804780c:	ac03      	add	r4, sp, #12
 804780e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8047812:	460b      	mov	r3, r1
 8047814:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8047816:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8047818:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 804781a:	9905      	ldr	r1, [sp, #20]
 804781c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 804781e:	9906      	ldr	r1, [sp, #24]
 8047820:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8047822:	9907      	ldr	r1, [sp, #28]
 8047824:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8047826:	9908      	ldr	r1, [sp, #32]
}
 8047828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 804782c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8047830:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8047832:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8047836:	4313      	orrs	r3, r2
 8047838:	6043      	str	r3, [r0, #4]
}
 804783a:	b004      	add	sp, #16
 804783c:	2000      	movs	r0, #0
 804783e:	4770      	bx	lr

08047840 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8047840:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8047844:	4770      	bx	lr

08047846 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8047846:	680b      	ldr	r3, [r1, #0]
 8047848:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 804784c:	2000      	movs	r0, #0
 804784e:	4770      	bx	lr

08047850 <SDIO_PowerState_ON>:
{  
 8047850:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8047852:	2303      	movs	r3, #3
 8047854:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8047856:	2002      	movs	r0, #2
 8047858:	f008 f96c 	bl	804fb34 <HAL_Delay>
}
 804785c:	2000      	movs	r0, #0
 804785e:	bd08      	pop	{r3, pc}

08047860 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8047860:	6800      	ldr	r0, [r0, #0]
}
 8047862:	f000 0003 	and.w	r0, r0, #3
 8047866:	4770      	bx	lr

08047868 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8047868:	680b      	ldr	r3, [r1, #0]
{
 804786a:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 804786c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 804786e:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8047872:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8047874:	4323      	orrs	r3, r4
                       Command->Response         |\
 8047876:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8047878:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 804787a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 804787c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8047880:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8047882:	f022 020f 	bic.w	r2, r2, #15
 8047886:	4313      	orrs	r3, r2
 8047888:	60c3      	str	r3, [r0, #12]
}
 804788a:	2000      	movs	r0, #0
 804788c:	bd10      	pop	{r4, pc}

0804788e <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 804788e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8047890:	5840      	ldr	r0, [r0, r1]
}  
 8047892:	4770      	bx	lr

08047894 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8047894:	680b      	ldr	r3, [r1, #0]
{
 8047896:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8047898:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 804789a:	684b      	ldr	r3, [r1, #4]
 804789c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 804789e:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80478a2:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80478a4:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80478a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 80478a8:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80478aa:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80478ac:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80478ae:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80478b2:	4313      	orrs	r3, r2
 80478b4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80478b6:	2000      	movs	r0, #0
 80478b8:	bd10      	pop	{r4, pc}

080478ba <SDMMC_CmdBlockLength>:
{
 80478ba:	b530      	push	{r4, r5, lr}
 80478bc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80478be:	2410      	movs	r4, #16
 80478c0:	2340      	movs	r3, #64	; 0x40
{
 80478c2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80478c4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80478c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80478ca:	2200      	movs	r2, #0
 80478cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80478d0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80478d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80478d6:	f7ff ffc7 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80478da:	f241 3288 	movw	r2, #5000	; 0x1388
 80478de:	4621      	mov	r1, r4
 80478e0:	4628      	mov	r0, r5
 80478e2:	f7ff ff03 	bl	80476ec <SDMMC_GetCmdResp1>
}
 80478e6:	b007      	add	sp, #28
 80478e8:	bd30      	pop	{r4, r5, pc}

080478ea <SDMMC_CmdReadSingleBlock>:
{
 80478ea:	b530      	push	{r4, r5, lr}
 80478ec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80478ee:	2411      	movs	r4, #17
 80478f0:	2340      	movs	r3, #64	; 0x40
{
 80478f2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80478f4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80478f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80478fa:	2200      	movs	r2, #0
 80478fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047900:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047902:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047906:	f7ff ffaf 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 804790a:	f241 3288 	movw	r2, #5000	; 0x1388
 804790e:	4621      	mov	r1, r4
 8047910:	4628      	mov	r0, r5
 8047912:	f7ff feeb 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047916:	b007      	add	sp, #28
 8047918:	bd30      	pop	{r4, r5, pc}

0804791a <SDMMC_CmdReadMultiBlock>:
{
 804791a:	b530      	push	{r4, r5, lr}
 804791c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804791e:	2412      	movs	r4, #18
 8047920:	2340      	movs	r3, #64	; 0x40
{
 8047922:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8047924:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047926:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804792a:	2200      	movs	r2, #0
 804792c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047930:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047932:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047936:	f7ff ff97 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 804793a:	f241 3288 	movw	r2, #5000	; 0x1388
 804793e:	4621      	mov	r1, r4
 8047940:	4628      	mov	r0, r5
 8047942:	f7ff fed3 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047946:	b007      	add	sp, #28
 8047948:	bd30      	pop	{r4, r5, pc}

0804794a <SDMMC_CmdWriteSingleBlock>:
{
 804794a:	b530      	push	{r4, r5, lr}
 804794c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804794e:	2418      	movs	r4, #24
 8047950:	2340      	movs	r3, #64	; 0x40
{
 8047952:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8047954:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047956:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804795a:	2200      	movs	r2, #0
 804795c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047960:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047962:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047966:	f7ff ff7f 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 804796a:	f241 3288 	movw	r2, #5000	; 0x1388
 804796e:	4621      	mov	r1, r4
 8047970:	4628      	mov	r0, r5
 8047972:	f7ff febb 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047976:	b007      	add	sp, #28
 8047978:	bd30      	pop	{r4, r5, pc}

0804797a <SDMMC_CmdWriteMultiBlock>:
{
 804797a:	b530      	push	{r4, r5, lr}
 804797c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 804797e:	2419      	movs	r4, #25
 8047980:	2340      	movs	r3, #64	; 0x40
{
 8047982:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8047984:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047986:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 804798a:	2200      	movs	r2, #0
 804798c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047990:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047992:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047996:	f7ff ff67 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 804799a:	f241 3288 	movw	r2, #5000	; 0x1388
 804799e:	4621      	mov	r1, r4
 80479a0:	4628      	mov	r0, r5
 80479a2:	f7ff fea3 	bl	80476ec <SDMMC_GetCmdResp1>
}
 80479a6:	b007      	add	sp, #28
 80479a8:	bd30      	pop	{r4, r5, pc}
	...

080479ac <SDMMC_CmdStopTransfer>:
{
 80479ac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80479ae:	2300      	movs	r3, #0
{
 80479b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80479b2:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80479b4:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80479b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80479ba:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80479bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80479c0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80479c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80479c6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80479c8:	f7ff ff4e 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80479cc:	4a03      	ldr	r2, [pc, #12]	; (80479dc <SDMMC_CmdStopTransfer+0x30>)
 80479ce:	4621      	mov	r1, r4
 80479d0:	4628      	mov	r0, r5
 80479d2:	f7ff fe8b 	bl	80476ec <SDMMC_GetCmdResp1>
}
 80479d6:	b007      	add	sp, #28
 80479d8:	bd30      	pop	{r4, r5, pc}
 80479da:	bf00      	nop
 80479dc:	05f5e100 	.word	0x05f5e100

080479e0 <SDMMC_CmdSelDesel>:
{
 80479e0:	b530      	push	{r4, r5, lr}
 80479e2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80479e4:	2407      	movs	r4, #7
 80479e6:	2340      	movs	r3, #64	; 0x40
{
 80479e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80479ea:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80479ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80479f0:	2200      	movs	r2, #0
 80479f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80479f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80479f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80479fc:	f7ff ff34 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8047a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8047a04:	4621      	mov	r1, r4
 8047a06:	4628      	mov	r0, r5
 8047a08:	f7ff fe70 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047a0c:	b007      	add	sp, #28
 8047a0e:	bd30      	pop	{r4, r5, pc}

08047a10 <SDMMC_CmdGoIdleState>:
{
 8047a10:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8047a12:	2300      	movs	r3, #0
{
 8047a14:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8047a16:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047a1a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047a1e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047a24:	9305      	str	r3, [sp, #20]
{
 8047a26:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047a28:	f7ff ff1e 	bl	8047868 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047a2c:	4b0b      	ldr	r3, [pc, #44]	; (8047a5c <SDMMC_CmdGoIdleState+0x4c>)
 8047a2e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047a32:	681b      	ldr	r3, [r3, #0]
 8047a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8047a38:	f241 3388 	movw	r3, #5000	; 0x1388
 8047a3c:	4353      	muls	r3, r2
    if (count-- == 0U)
 8047a3e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047a42:	d307      	bcc.n	8047a54 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8047a44:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8047a46:	0612      	lsls	r2, r2, #24
 8047a48:	d5f9      	bpl.n	8047a3e <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8047a4a:	23c5      	movs	r3, #197	; 0xc5
 8047a4c:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8047a4e:	2000      	movs	r0, #0
}
 8047a50:	b006      	add	sp, #24
 8047a52:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8047a54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8047a58:	e7fa      	b.n	8047a50 <SDMMC_CmdGoIdleState+0x40>
 8047a5a:	bf00      	nop
 8047a5c:	20001048 	.word	0x20001048

08047a60 <SDMMC_CmdOperCond>:
{
 8047a60:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8047a62:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 8047a66:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8047a68:	2308      	movs	r3, #8
 8047a6a:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047a6e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8047a72:	2300      	movs	r3, #0
 8047a74:	e9cd c303 	strd	ip, r3, [sp, #12]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047a78:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047a7e:	9305      	str	r3, [sp, #20]
{
 8047a80:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047a82:	f7ff fef1 	bl	8047868 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047a86:	4b15      	ldr	r3, [pc, #84]	; (8047adc <SDMMC_CmdOperCond+0x7c>)
 8047a88:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047a8c:	681b      	ldr	r3, [r3, #0]
 8047a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8047a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8047a96:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8047a98:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047a9c:	d31a      	bcc.n	8047ad4 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8047a9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047aa0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047aa4:	d0f8      	beq.n	8047a98 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047aa6:	0512      	lsls	r2, r2, #20
 8047aa8:	d4f6      	bmi.n	8047a98 <SDMMC_CmdOperCond+0x38>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8047aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047aac:	075b      	lsls	r3, r3, #29
 8047aae:	d503      	bpl.n	8047ab8 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047ab0:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047ab2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8047ab4:	b006      	add	sp, #24
 8047ab6:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8047ab8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8047aba:	f012 0201 	ands.w	r2, r2, #1
 8047abe:	d001      	beq.n	8047ac4 <SDMMC_CmdOperCond+0x64>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047ac0:	2001      	movs	r0, #1
 8047ac2:	e7f6      	b.n	8047ab2 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8047ac4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8047ac6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8047aca:	d0f3      	beq.n	8047ab4 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8047acc:	2340      	movs	r3, #64	; 0x40
 8047ace:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8047ad0:	4610      	mov	r0, r2
 8047ad2:	e7ef      	b.n	8047ab4 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 8047ad4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8047ad8:	e7ec      	b.n	8047ab4 <SDMMC_CmdOperCond+0x54>
 8047ada:	bf00      	nop
 8047adc:	20001048 	.word	0x20001048

08047ae0 <SDMMC_CmdAppCommand>:
{
 8047ae0:	b530      	push	{r4, r5, lr}
 8047ae2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047ae4:	2437      	movs	r4, #55	; 0x37
 8047ae6:	2340      	movs	r3, #64	; 0x40
{
 8047ae8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8047aea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047aec:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047af0:	2200      	movs	r2, #0
 8047af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047af6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047afc:	f7ff feb4 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8047b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b04:	4621      	mov	r1, r4
 8047b06:	4628      	mov	r0, r5
 8047b08:	f7ff fdf0 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047b0c:	b007      	add	sp, #28
 8047b0e:	bd30      	pop	{r4, r5, pc}

08047b10 <SDMMC_CmdAppOperCommand>:
{
 8047b10:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047b12:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8047b16:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b18:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b1e:	2340      	movs	r3, #64	; 0x40
 8047b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8047b24:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047b2a:	2100      	movs	r1, #0
 8047b2c:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8047b30:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b32:	a901      	add	r1, sp, #4
 8047b34:	f7ff fe98 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8047b38:	4620      	mov	r0, r4
 8047b3a:	f7ff fdb5 	bl	80476a8 <SDMMC_GetCmdResp3>
}
 8047b3e:	b006      	add	sp, #24
 8047b40:	bd10      	pop	{r4, pc}

08047b42 <SDMMC_CmdBusWidth>:
{
 8047b42:	b530      	push	{r4, r5, lr}
 8047b44:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b46:	2406      	movs	r4, #6
 8047b48:	2340      	movs	r3, #64	; 0x40
{
 8047b4a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8047b4c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b4e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b52:	2200      	movs	r2, #0
 8047b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b58:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b5e:	f7ff fe83 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8047b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b66:	4621      	mov	r1, r4
 8047b68:	4628      	mov	r0, r5
 8047b6a:	f7ff fdbf 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047b6e:	b007      	add	sp, #28
 8047b70:	bd30      	pop	{r4, r5, pc}

08047b72 <SDMMC_CmdSendSCR>:
{
 8047b72:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047b74:	2300      	movs	r3, #0
{
 8047b76:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047b78:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047b7a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047b7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047b80:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8047b82:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b86:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047b8c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047b8e:	f7ff fe6b 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8047b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8047b96:	4621      	mov	r1, r4
 8047b98:	4628      	mov	r0, r5
 8047b9a:	f7ff fda7 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047b9e:	b007      	add	sp, #28
 8047ba0:	bd30      	pop	{r4, r5, pc}

08047ba2 <SDMMC_CmdSendCID>:
{
 8047ba2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8047ba4:	2300      	movs	r3, #0
{
 8047ba6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8047ba8:	2202      	movs	r2, #2
 8047baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8047bae:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047bb0:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047bb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047bba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047bbc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047bbe:	f7ff fe53 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8047bc2:	4620      	mov	r0, r4
 8047bc4:	f7ff fd48 	bl	8047658 <SDMMC_GetCmdResp2>
}
 8047bc8:	b006      	add	sp, #24
 8047bca:	bd10      	pop	{r4, pc}

08047bcc <SDMMC_CmdSendCSD>:
{
 8047bcc:	b510      	push	{r4, lr}
 8047bce:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8047bd0:	2209      	movs	r2, #9
 8047bd2:	23c0      	movs	r3, #192	; 0xc0
 8047bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8047bd8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8047bde:	2100      	movs	r1, #0
 8047be0:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8047be4:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047be6:	a901      	add	r1, sp, #4
 8047be8:	f7ff fe3e 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8047bec:	4620      	mov	r0, r4
 8047bee:	f7ff fd33 	bl	8047658 <SDMMC_GetCmdResp2>
}
 8047bf2:	b006      	add	sp, #24
 8047bf4:	bd10      	pop	{r4, pc}
	...

08047bf8 <SDMMC_CmdSetRelAdd>:
{
 8047bf8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8047bfa:	2300      	movs	r3, #0
{
 8047bfc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8047bfe:	2203      	movs	r2, #3
 8047c00:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047c04:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8047c06:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8047c0a:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c10:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047c12:	9305      	str	r3, [sp, #20]
{
 8047c14:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047c16:	f7ff fe27 	bl	8047868 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8047c1a:	4b1e      	ldr	r3, [pc, #120]	; (8047c94 <SDMMC_CmdSetRelAdd+0x9c>)
 8047c1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8047c20:	681b      	ldr	r3, [r3, #0]
 8047c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8047c26:	f241 3388 	movw	r3, #5000	; 0x1388
 8047c2a:	4353      	muls	r3, r2
    if (count-- == 0U)
 8047c2c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8047c30:	d328      	bcc.n	8047c84 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8047c32:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8047c34:	f012 0f45 	tst.w	r2, #69	; 0x45
 8047c38:	d0f8      	beq.n	8047c2c <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8047c3a:	0512      	lsls	r2, r2, #20
 8047c3c:	d4f6      	bmi.n	8047c2c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8047c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047c40:	0758      	lsls	r0, r3, #29
 8047c42:	d503      	bpl.n	8047c4c <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8047c44:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047c46:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8047c48:	b007      	add	sp, #28
 8047c4a:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8047c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8047c4e:	07d9      	lsls	r1, r3, #31
 8047c50:	d501      	bpl.n	8047c56 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8047c52:	2001      	movs	r0, #1
 8047c54:	e7f7      	b.n	8047c46 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8047c56:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8047c58:	b2db      	uxtb	r3, r3
 8047c5a:	2b03      	cmp	r3, #3
 8047c5c:	d115      	bne.n	8047c8a <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8047c5e:	23c5      	movs	r3, #197	; 0xc5
 8047c60:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8047c62:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8047c64:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8047c68:	d102      	bne.n	8047c70 <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8047c6a:	0c1b      	lsrs	r3, r3, #16
 8047c6c:	802b      	strh	r3, [r5, #0]
 8047c6e:	e7eb      	b.n	8047c48 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8047c70:	045a      	lsls	r2, r3, #17
 8047c72:	d40c      	bmi.n	8047c8e <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8047c74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8047c78:	bf0c      	ite	eq
 8047c7a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8047c7e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8047c82:	e7e1      	b.n	8047c48 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8047c84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8047c88:	e7de      	b.n	8047c48 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8047c8a:	2001      	movs	r0, #1
 8047c8c:	e7dc      	b.n	8047c48 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8047c8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8047c92:	e7d9      	b.n	8047c48 <SDMMC_CmdSetRelAdd+0x50>
 8047c94:	20001048 	.word	0x20001048

08047c98 <SDMMC_CmdSendStatus>:
{
 8047c98:	b530      	push	{r4, r5, lr}
 8047c9a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047c9c:	240d      	movs	r4, #13
 8047c9e:	2340      	movs	r3, #64	; 0x40
{
 8047ca0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8047ca2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8047ca4:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047ca8:	2200      	movs	r2, #0
 8047caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047cae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8047cb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8047cb4:	f7ff fdd8 	bl	8047868 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8047cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8047cbc:	4621      	mov	r1, r4
 8047cbe:	4628      	mov	r0, r5
 8047cc0:	f7ff fd14 	bl	80476ec <SDMMC_GetCmdResp1>
}
 8047cc4:	b007      	add	sp, #28
 8047cc6:	bd30      	pop	{r4, r5, pc}

08047cc8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8047cc8:	4b03      	ldr	r3, [pc, #12]	; (8047cd8 <disk_status+0x10>)
 8047cca:	181a      	adds	r2, r3, r0
 8047ccc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047cd0:	7a10      	ldrb	r0, [r2, #8]
 8047cd2:	685b      	ldr	r3, [r3, #4]
 8047cd4:	685b      	ldr	r3, [r3, #4]
 8047cd6:	4718      	bx	r3
 8047cd8:	20002460 	.word	0x20002460

08047cdc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8047cdc:	4b06      	ldr	r3, [pc, #24]	; (8047cf8 <disk_initialize+0x1c>)
 8047cde:	5c1a      	ldrb	r2, [r3, r0]
 8047ce0:	b942      	cbnz	r2, 8047cf4 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8047ce2:	2201      	movs	r2, #1
 8047ce4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8047ce6:	181a      	adds	r2, r3, r0
 8047ce8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047cec:	7a10      	ldrb	r0, [r2, #8]
 8047cee:	685b      	ldr	r3, [r3, #4]
 8047cf0:	681b      	ldr	r3, [r3, #0]
 8047cf2:	4718      	bx	r3
  }
  return stat;
}
 8047cf4:	2000      	movs	r0, #0
 8047cf6:	4770      	bx	lr
 8047cf8:	20002460 	.word	0x20002460

08047cfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8047cfc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8047cfe:	4c05      	ldr	r4, [pc, #20]	; (8047d14 <disk_read+0x18>)
 8047d00:	1825      	adds	r5, r4, r0
 8047d02:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8047d06:	6860      	ldr	r0, [r4, #4]
 8047d08:	6884      	ldr	r4, [r0, #8]
 8047d0a:	7a28      	ldrb	r0, [r5, #8]
 8047d0c:	46a4      	mov	ip, r4
  return res;
}
 8047d0e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8047d10:	4760      	bx	ip
 8047d12:	bf00      	nop
 8047d14:	20002460 	.word	0x20002460

08047d18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8047d18:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8047d1a:	4c05      	ldr	r4, [pc, #20]	; (8047d30 <disk_write+0x18>)
 8047d1c:	1825      	adds	r5, r4, r0
 8047d1e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8047d22:	6860      	ldr	r0, [r4, #4]
 8047d24:	68c4      	ldr	r4, [r0, #12]
 8047d26:	7a28      	ldrb	r0, [r5, #8]
 8047d28:	46a4      	mov	ip, r4
  return res;
}
 8047d2a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8047d2c:	4760      	bx	ip
 8047d2e:	bf00      	nop
 8047d30:	20002460 	.word	0x20002460

08047d34 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047d34:	4b05      	ldr	r3, [pc, #20]	; (8047d4c <disk_ioctl+0x18>)
{
 8047d36:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047d38:	181c      	adds	r4, r3, r0
 8047d3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8047d3e:	7a20      	ldrb	r0, [r4, #8]
 8047d40:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8047d42:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8047d46:	691b      	ldr	r3, [r3, #16]
 8047d48:	4718      	bx	r3
 8047d4a:	bf00      	nop
 8047d4c:	20002460 	.word	0x20002460

08047d50 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8047d50:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8047d52:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8047d54:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8047d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8047d5a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8047d5e:	4770      	bx	lr

08047d60 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8047d60:	6802      	ldr	r2, [r0, #0]
{
 8047d62:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8047d64:	b152      	cbz	r2, 8047d7c <get_ldnumber+0x1c>
 8047d66:	4611      	mov	r1, r2
 8047d68:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8047d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8047d6e:	2c20      	cmp	r4, #32
 8047d70:	d90c      	bls.n	8047d8c <get_ldnumber+0x2c>
 8047d72:	2c3a      	cmp	r4, #58	; 0x3a
 8047d74:	d1f8      	bne.n	8047d68 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8047d76:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8047d78:	428b      	cmp	r3, r1
 8047d7a:	d002      	beq.n	8047d82 <get_ldnumber+0x22>
	int vol = -1;
 8047d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8047d80:	e005      	b.n	8047d8e <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8047d82:	7812      	ldrb	r2, [r2, #0]
 8047d84:	2a30      	cmp	r2, #48	; 0x30
 8047d86:	d1f9      	bne.n	8047d7c <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8047d88:	3301      	adds	r3, #1
 8047d8a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8047d8c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8047d8e:	bd10      	pop	{r4, pc}

08047d90 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8047d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8047d92:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8047d94:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8047d98:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8047d9a:	2301      	movs	r3, #1
 8047d9c:	462a      	mov	r2, r5
 8047d9e:	4639      	mov	r1, r7
 8047da0:	7840      	ldrb	r0, [r0, #1]
 8047da2:	f7ff ffb9 	bl	8047d18 <disk_write>
 8047da6:	b9a0      	cbnz	r0, 8047dd2 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8047da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8047daa:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8047dac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8047dae:	1aeb      	subs	r3, r5, r3
 8047db0:	4293      	cmp	r3, r2
 8047db2:	d301      	bcc.n	8047db8 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8047db4:	2000      	movs	r0, #0
}
 8047db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8047db8:	78a6      	ldrb	r6, [r4, #2]
 8047dba:	2e01      	cmp	r6, #1
 8047dbc:	d9fa      	bls.n	8047db4 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8047dbe:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8047dc0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8047dc2:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8047dc4:	462a      	mov	r2, r5
 8047dc6:	2301      	movs	r3, #1
 8047dc8:	4639      	mov	r1, r7
 8047dca:	f7ff ffa5 	bl	8047d18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8047dce:	3e01      	subs	r6, #1
 8047dd0:	e7f3      	b.n	8047dba <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8047dd2:	2001      	movs	r0, #1
 8047dd4:	e7ef      	b.n	8047db6 <sync_window.part.4+0x26>

08047dd6 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8047dd6:	78c3      	ldrb	r3, [r0, #3]
 8047dd8:	b10b      	cbz	r3, 8047dde <sync_window+0x8>
 8047dda:	f7ff bfd9 	b.w	8047d90 <sync_window.part.4>
}
 8047dde:	4618      	mov	r0, r3
 8047de0:	4770      	bx	lr

08047de2 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8047de2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047de4:	428b      	cmp	r3, r1
{
 8047de6:	b570      	push	{r4, r5, r6, lr}
 8047de8:	4606      	mov	r6, r0
 8047dea:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8047dec:	d012      	beq.n	8047e14 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8047dee:	f7ff fff2 	bl	8047dd6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8047df2:	4604      	mov	r4, r0
 8047df4:	b960      	cbnz	r0, 8047e10 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8047df6:	462a      	mov	r2, r5
 8047df8:	2301      	movs	r3, #1
 8047dfa:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8047dfe:	7870      	ldrb	r0, [r6, #1]
 8047e00:	f7ff ff7c 	bl	8047cfc <disk_read>
 8047e04:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8047e06:	bf1c      	itt	ne
 8047e08:	f04f 35ff 	movne.w	r5, #4294967295
 8047e0c:	2401      	movne	r4, #1
			fs->winsect = sector;
 8047e0e:	6375      	str	r5, [r6, #52]	; 0x34
}
 8047e10:	4620      	mov	r0, r4
 8047e12:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8047e14:	2400      	movs	r4, #0
 8047e16:	e7fb      	b.n	8047e10 <move_window+0x2e>

08047e18 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8047e18:	2300      	movs	r3, #0
{
 8047e1a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8047e1c:	70c3      	strb	r3, [r0, #3]
 8047e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8047e22:	6343      	str	r3, [r0, #52]	; 0x34
{
 8047e24:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8047e26:	f7ff ffdc 	bl	8047de2 <move_window>
 8047e2a:	bb30      	cbnz	r0, 8047e7a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8047e2c:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8047e30:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8047e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8047e38:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8047e3c:	4293      	cmp	r3, r2
 8047e3e:	d11e      	bne.n	8047e7e <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8047e40:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8047e44:	2be9      	cmp	r3, #233	; 0xe9
 8047e46:	d005      	beq.n	8047e54 <check_fs+0x3c>
 8047e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8047e4a:	4a10      	ldr	r2, [pc, #64]	; (8047e8c <check_fs+0x74>)
 8047e4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8047e50:	4293      	cmp	r3, r2
 8047e52:	d116      	bne.n	8047e82 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8047e54:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8047e58:	f7ff ff7a 	bl	8047d50 <ld_dword>
 8047e5c:	4b0c      	ldr	r3, [pc, #48]	; (8047e90 <check_fs+0x78>)
 8047e5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8047e62:	4298      	cmp	r0, r3
 8047e64:	d00f      	beq.n	8047e86 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8047e66:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8047e6a:	f7ff ff71 	bl	8047d50 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8047e6e:	4b09      	ldr	r3, [pc, #36]	; (8047e94 <check_fs+0x7c>)
 8047e70:	4298      	cmp	r0, r3
 8047e72:	bf14      	ite	ne
 8047e74:	2002      	movne	r0, #2
 8047e76:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8047e78:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8047e7a:	2004      	movs	r0, #4
 8047e7c:	e7fc      	b.n	8047e78 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8047e7e:	2003      	movs	r0, #3
 8047e80:	e7fa      	b.n	8047e78 <check_fs+0x60>
	return 2;
 8047e82:	2002      	movs	r0, #2
 8047e84:	e7f8      	b.n	8047e78 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8047e86:	2000      	movs	r0, #0
 8047e88:	e7f6      	b.n	8047e78 <check_fs+0x60>
 8047e8a:	bf00      	nop
 8047e8c:	009000eb 	.word	0x009000eb
 8047e90:	00544146 	.word	0x00544146
 8047e94:	33544146 	.word	0x33544146

08047e98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8047e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8047e9c:	2300      	movs	r3, #0
{
 8047e9e:	b085      	sub	sp, #20
	*rfs = 0;
 8047ea0:	600b      	str	r3, [r1, #0]
{
 8047ea2:	4688      	mov	r8, r1
 8047ea4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8047ea6:	f7ff ff5b 	bl	8047d60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8047eaa:	1e07      	subs	r7, r0, #0
 8047eac:	f2c0 815e 	blt.w	804816c <find_volume+0x2d4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8047eb0:	4eb2      	ldr	r6, [pc, #712]	; (804817c <find_volume+0x2e4>)
 8047eb2:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8047eb6:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8047eb8:	2c00      	cmp	r4, #0
 8047eba:	f000 8159 	beq.w	8048170 <find_volume+0x2d8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8047ebe:	f8c8 4000 	str.w	r4, [r8]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 8047ec2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8047ec4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8047ec8:	b173      	cbz	r3, 8047ee8 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8047eca:	7860      	ldrb	r0, [r4, #1]
 8047ecc:	f7ff fefc 	bl	8047cc8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8047ed0:	07c1      	lsls	r1, r0, #31
 8047ed2:	d409      	bmi.n	8047ee8 <find_volume+0x50>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8047ed4:	2d00      	cmp	r5, #0
 8047ed6:	f000 814d 	beq.w	8048174 <find_volume+0x2dc>
 8047eda:	f010 0004 	ands.w	r0, r0, #4
 8047ede:	d000      	beq.n	8047ee2 <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8047ee0:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8047ee2:	b005      	add	sp, #20
 8047ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8047ee8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8047eea:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 8047eec:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8047eee:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8047ef0:	f7ff fef4 	bl	8047cdc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8047ef4:	07c2      	lsls	r2, r0, #31
 8047ef6:	f100 813f 	bmi.w	8048178 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8047efa:	b10d      	cbz	r5, 8047f00 <find_volume+0x68>
 8047efc:	0743      	lsls	r3, r0, #29
 8047efe:	d4ef      	bmi.n	8047ee0 <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8047f00:	f104 020c 	add.w	r2, r4, #12
 8047f04:	2102      	movs	r1, #2
 8047f06:	7860      	ldrb	r0, [r4, #1]
 8047f08:	f7ff ff14 	bl	8047d34 <disk_ioctl>
 8047f0c:	b108      	cbz	r0, 8047f12 <find_volume+0x7a>
 8047f0e:	2001      	movs	r0, #1
 8047f10:	e7e7      	b.n	8047ee2 <find_volume+0x4a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8047f12:	89a5      	ldrh	r5, [r4, #12]
 8047f14:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8047f18:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8047f1c:	d8f7      	bhi.n	8047f0e <find_volume+0x76>
 8047f1e:	1e69      	subs	r1, r5, #1
 8047f20:	400d      	ands	r5, r1
 8047f22:	d1f4      	bne.n	8047f0e <find_volume+0x76>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8047f24:	4629      	mov	r1, r5
 8047f26:	4620      	mov	r0, r4
 8047f28:	f7ff ff76 	bl	8047e18 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8047f2c:	2802      	cmp	r0, #2
 8047f2e:	f040 8101 	bne.w	8048134 <find_volume+0x29c>
 8047f32:	f504 77ff 	add.w	r7, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8047f36:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 8047f3a:	b110      	cbz	r0, 8047f42 <find_volume+0xaa>
 8047f3c:	4638      	mov	r0, r7
 8047f3e:	f7ff ff07 	bl	8047d50 <ld_dword>
 8047f42:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8047f46:	3501      	adds	r5, #1
 8047f48:	2d04      	cmp	r5, #4
 8047f4a:	f107 0710 	add.w	r7, r7, #16
 8047f4e:	d1f2      	bne.n	8047f36 <find_volume+0x9e>
 8047f50:	2500      	movs	r5, #0
			bsect = br[i];
 8047f52:	f85d 7025 	ldr.w	r7, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8047f56:	2f00      	cmp	r7, #0
 8047f58:	f000 80e4 	beq.w	8048124 <find_volume+0x28c>
 8047f5c:	4639      	mov	r1, r7
 8047f5e:	4620      	mov	r0, r4
 8047f60:	f7ff ff5a 	bl	8047e18 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8047f64:	2801      	cmp	r0, #1
 8047f66:	f200 80de 	bhi.w	8048126 <find_volume+0x28e>
	rv = rv << 8 | ptr[0];
 8047f6a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8047f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8047f72:	89a1      	ldrh	r1, [r4, #12]
 8047f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8047f78:	4299      	cmp	r1, r3
 8047f7a:	f040 80e0 	bne.w	804813e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8047f7e:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8047f82:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8047f86:	ea59 2903 	orrs.w	r9, r9, r3, lsl #8
 8047f8a:	d104      	bne.n	8047f96 <find_volume+0xfe>
 8047f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8047f90:	f7ff fede 	bl	8047d50 <ld_dword>
 8047f94:	4681      	mov	r9, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8047f96:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8047f9a:	f8c4 9020 	str.w	r9, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8047f9e:	1e6b      	subs	r3, r5, #1
 8047fa0:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8047fa2:	70a5      	strb	r5, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8047fa4:	f200 80cb 	bhi.w	804813e <find_volume+0x2a6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8047fa8:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8047fac:	fa1f f388 	uxth.w	r3, r8
 8047fb0:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8047fb2:	2b00      	cmp	r3, #0
 8047fb4:	f000 80c3 	beq.w	804813e <find_volume+0x2a6>
 8047fb8:	f108 33ff 	add.w	r3, r8, #4294967295
 8047fbc:	ea13 0f08 	tst.w	r3, r8
 8047fc0:	f040 80bd 	bne.w	804813e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8047fc4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8047fc8:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8047fcc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8047fd0:	094b      	lsrs	r3, r1, #5
 8047fd2:	fbba fbf3 	udiv	fp, sl, r3
 8047fd6:	fb03 a31b 	mls	r3, r3, fp, sl
 8047fda:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8047fdc:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8047fe0:	2b00      	cmp	r3, #0
 8047fe2:	f040 80ac 	bne.w	804813e <find_volume+0x2a6>
	rv = rv << 8 | ptr[0];
 8047fe6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8047fea:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8047fee:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8047ff2:	d103      	bne.n	8047ffc <find_volume+0x164>
 8047ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8047ff8:	f7ff feaa 	bl	8047d50 <ld_dword>
	rv = rv << 8 | ptr[0];
 8047ffc:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8048000:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8048004:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8048008:	f000 8099 	beq.w	804813e <find_volume+0x2a6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 804800c:	fb09 fc05 	mul.w	ip, r9, r5
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8048010:	eb0b 0203 	add.w	r2, fp, r3
 8048014:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8048016:	4290      	cmp	r0, r2
 8048018:	f0c0 8091 	bcc.w	804813e <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 804801c:	1a80      	subs	r0, r0, r2
 804801e:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8048022:	2800      	cmp	r0, #0
 8048024:	f000 808b 	beq.w	804813e <find_volume+0x2a6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8048028:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 804802c:	4540      	cmp	r0, r8
 804802e:	bf8c      	ite	hi
 8048030:	f04f 0803 	movhi.w	r8, #3
 8048034:	f04f 0802 	movls.w	r8, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8048038:	f640 75f5 	movw	r5, #4085	; 0xff5
 804803c:	42a8      	cmp	r0, r5
 804803e:	bf98      	it	ls
 8048040:	f04f 0801 	movls.w	r8, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8048044:	443b      	add	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8048046:	1c85      	adds	r5, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8048048:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 804804a:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 804804e:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8048050:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8048052:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8048054:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8048056:	d176      	bne.n	8048146 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8048058:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 804805c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8048060:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8048064:	d16b      	bne.n	804813e <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8048066:	f1ba 0f00 	cmp.w	sl, #0
 804806a:	d168      	bne.n	804813e <find_volume+0x2a6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 804806c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8048070:	f7ff fe6e 	bl	8047d50 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8048074:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8048076:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8048078:	1e4b      	subs	r3, r1, #1
 804807a:	441d      	add	r5, r3
 804807c:	fbb5 f1f1 	udiv	r1, r5, r1
 8048080:	4549      	cmp	r1, r9
 8048082:	d85c      	bhi.n	804813e <find_volume+0x2a6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8048084:	f04f 33ff 	mov.w	r3, #4294967295
 8048088:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 804808c:	f1b8 0f03 	cmp.w	r8, #3
		fs->fsi_flag = 0x80;
 8048090:	f04f 0380 	mov.w	r3, #128	; 0x80
 8048094:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8048096:	d12f      	bne.n	80480f8 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 8048098:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 804809c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80480a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80480a4:	2b01      	cmp	r3, #1
 80480a6:	d127      	bne.n	80480f8 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 80480a8:	1c79      	adds	r1, r7, #1
 80480aa:	4620      	mov	r0, r4
 80480ac:	f7ff fe99 	bl	8047de2 <move_window>
 80480b0:	bb10      	cbnz	r0, 80480f8 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 80480b2:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80480b6:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 80480ba:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80480bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80480c0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80480c4:	4293      	cmp	r3, r2
 80480c6:	d117      	bne.n	80480f8 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80480c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80480cc:	f7ff fe40 	bl	8047d50 <ld_dword>
 80480d0:	4b2b      	ldr	r3, [pc, #172]	; (8048180 <find_volume+0x2e8>)
 80480d2:	4298      	cmp	r0, r3
 80480d4:	d110      	bne.n	80480f8 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80480d6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80480da:	f7ff fe39 	bl	8047d50 <ld_dword>
 80480de:	4b29      	ldr	r3, [pc, #164]	; (8048184 <find_volume+0x2ec>)
 80480e0:	4298      	cmp	r0, r3
 80480e2:	d109      	bne.n	80480f8 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80480e4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80480e8:	f7ff fe32 	bl	8047d50 <ld_dword>
 80480ec:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80480ee:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80480f2:	f7ff fe2d 	bl	8047d50 <ld_dword>
 80480f6:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80480f8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 80480fa:	6832      	ldr	r2, [r6, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80480fc:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8048100:	3301      	adds	r3, #1
 8048102:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8048104:	4294      	cmp	r4, r2
	fs->id = ++Fsid;		/* File system mount ID */
 8048106:	84b3      	strh	r3, [r6, #36]	; 0x24
 8048108:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;			/* Initialize current directory */
 804810a:	f04f 0300 	mov.w	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 804810e:	bf08      	it	eq
 8048110:	6033      	streq	r3, [r6, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8048112:	61a3      	str	r3, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8048114:	6933      	ldr	r3, [r6, #16]
 8048116:	429c      	cmp	r4, r3
 8048118:	f04f 0000 	mov.w	r0, #0
 804811c:	f47f aee1 	bne.w	8047ee2 <find_volume+0x4a>
 8048120:	6130      	str	r0, [r6, #16]
 8048122:	e6de      	b.n	8047ee2 <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8048124:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8048126:	3501      	adds	r5, #1
 8048128:	2d04      	cmp	r5, #4
 804812a:	f47f af12 	bne.w	8047f52 <find_volume+0xba>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 804812e:	2804      	cmp	r0, #4
 8048130:	d105      	bne.n	804813e <find_volume+0x2a6>
 8048132:	e6ec      	b.n	8047f0e <find_volume+0x76>
 8048134:	2804      	cmp	r0, #4
 8048136:	f43f aeea 	beq.w	8047f0e <find_volume+0x76>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 804813a:	2801      	cmp	r0, #1
 804813c:	d901      	bls.n	8048142 <find_volume+0x2aa>
 804813e:	200d      	movs	r0, #13
 8048140:	e6cf      	b.n	8047ee2 <find_volume+0x4a>
	bsect = 0;
 8048142:	462f      	mov	r7, r5
 8048144:	e711      	b.n	8047f6a <find_volume+0xd2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8048146:	f1ba 0f00 	cmp.w	sl, #0
 804814a:	d0f8      	beq.n	804813e <find_volume+0x2a6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804814c:	f1b8 0f02 	cmp.w	r8, #2
 8048150:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8048154:	bf18      	it	ne
 8048156:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8048158:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 804815a:	bf18      	it	ne
 804815c:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8048160:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8048162:	bf0c      	ite	eq
 8048164:	4605      	moveq	r5, r0
 8048166:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 804816a:	e785      	b.n	8048078 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 804816c:	200b      	movs	r0, #11
 804816e:	e6b8      	b.n	8047ee2 <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8048170:	200c      	movs	r0, #12
 8048172:	e6b6      	b.n	8047ee2 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8048174:	4628      	mov	r0, r5
 8048176:	e6b4      	b.n	8047ee2 <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8048178:	2003      	movs	r0, #3
 804817a:	e6b2      	b.n	8047ee2 <find_volume+0x4a>
 804817c:	20002438 	.word	0x20002438
 8048180:	41615252 	.word	0x41615252
 8048184:	61417272 	.word	0x61417272

08048188 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8048188:	b530      	push	{r4, r5, lr}
 804818a:	b085      	sub	sp, #20
 804818c:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8048190:	a804      	add	r0, sp, #16
{
 8048192:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 8048194:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8048198:	f7ff fde2 	bl	8047d60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 804819c:	2800      	cmp	r0, #0
 804819e:	db1f      	blt.n	80481e0 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80481a0:	4b11      	ldr	r3, [pc, #68]	; (80481e8 <f_mount+0x60>)
 80481a2:	0081      	lsls	r1, r0, #2
 80481a4:	185a      	adds	r2, r3, r1
 80481a6:	6a10      	ldr	r0, [r2, #32]

	if (cfs) {
 80481a8:	b150      	cbz	r0, 80481c0 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80481aa:	681a      	ldr	r2, [r3, #0]
 80481ac:	4290      	cmp	r0, r2
 80481ae:	bf04      	itt	eq
 80481b0:	2200      	moveq	r2, #0
 80481b2:	601a      	streq	r2, [r3, #0]
 80481b4:	691a      	ldr	r2, [r3, #16]
 80481b6:	2400      	movs	r4, #0
 80481b8:	4290      	cmp	r0, r2
 80481ba:	bf08      	it	eq
 80481bc:	611c      	streq	r4, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80481be:	7004      	strb	r4, [r0, #0]
	}

	if (fs) {
 80481c0:	9801      	ldr	r0, [sp, #4]
 80481c2:	b108      	cbz	r0, 80481c8 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 80481c4:	2200      	movs	r2, #0
 80481c6:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80481c8:	440b      	add	r3, r1
 80481ca:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80481cc:	b130      	cbz	r0, 80481dc <f_mount+0x54>
 80481ce:	2d01      	cmp	r5, #1
 80481d0:	d108      	bne.n	80481e4 <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80481d2:	2200      	movs	r2, #0
 80481d4:	a901      	add	r1, sp, #4
 80481d6:	4668      	mov	r0, sp
 80481d8:	f7ff fe5e 	bl	8047e98 <find_volume>
	LEAVE_FF(fs, res);
}
 80481dc:	b005      	add	sp, #20
 80481de:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80481e0:	200b      	movs	r0, #11
 80481e2:	e7fb      	b.n	80481dc <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80481e4:	2000      	movs	r0, #0
 80481e6:	e7f9      	b.n	80481dc <f_mount+0x54>
 80481e8:	20002438 	.word	0x20002438

080481ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80481ec:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80481ee:	4b0f      	ldr	r3, [pc, #60]	; (804822c <FATFS_LinkDriverEx+0x40>)
 80481f0:	7a5d      	ldrb	r5, [r3, #9]
 80481f2:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80481f6:	b9b5      	cbnz	r5, 8048226 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80481f8:	7a5d      	ldrb	r5, [r3, #9]
 80481fa:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80481fc:	7a5d      	ldrb	r5, [r3, #9]
 80481fe:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8048202:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8048204:	7a58      	ldrb	r0, [r3, #9]
 8048206:	4418      	add	r0, r3
 8048208:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 804820a:	7a5a      	ldrb	r2, [r3, #9]
 804820c:	b2d2      	uxtb	r2, r2
 804820e:	1c50      	adds	r0, r2, #1
 8048210:	b2c0      	uxtb	r0, r0
 8048212:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8048214:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8048216:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8048218:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 804821a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 804821c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 804821e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8048220:	70cc      	strb	r4, [r1, #3]
 8048222:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8048224:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8048226:	2001      	movs	r0, #1
 8048228:	e7fc      	b.n	8048224 <FATFS_LinkDriverEx+0x38>
 804822a:	bf00      	nop
 804822c:	20002460 	.word	0x20002460

08048230 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8048230:	2200      	movs	r2, #0
 8048232:	f7ff bfdb 	b.w	80481ec <FATFS_LinkDriverEx>

08048236 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8048236:	780a      	ldrb	r2, [r1, #0]
 8048238:	7803      	ldrb	r3, [r0, #0]
 804823a:	4053      	eors	r3, r2
 804823c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 804823e:	784a      	ldrb	r2, [r1, #1]
 8048240:	7843      	ldrb	r3, [r0, #1]
 8048242:	4053      	eors	r3, r2
 8048244:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8048246:	788a      	ldrb	r2, [r1, #2]
 8048248:	7883      	ldrb	r3, [r0, #2]
 804824a:	4053      	eors	r3, r2
 804824c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 804824e:	78ca      	ldrb	r2, [r1, #3]
 8048250:	78c3      	ldrb	r3, [r0, #3]
 8048252:	4053      	eors	r3, r2
 8048254:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8048256:	790a      	ldrb	r2, [r1, #4]
 8048258:	7903      	ldrb	r3, [r0, #4]
 804825a:	4053      	eors	r3, r2
 804825c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 804825e:	794a      	ldrb	r2, [r1, #5]
 8048260:	7943      	ldrb	r3, [r0, #5]
 8048262:	4053      	eors	r3, r2
 8048264:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8048266:	798a      	ldrb	r2, [r1, #6]
 8048268:	7983      	ldrb	r3, [r0, #6]
 804826a:	4053      	eors	r3, r2
 804826c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 804826e:	79ca      	ldrb	r2, [r1, #7]
 8048270:	79c3      	ldrb	r3, [r0, #7]
 8048272:	4053      	eors	r3, r2
 8048274:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8048276:	7a0a      	ldrb	r2, [r1, #8]
 8048278:	7a03      	ldrb	r3, [r0, #8]
 804827a:	4053      	eors	r3, r2
 804827c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 804827e:	7a4a      	ldrb	r2, [r1, #9]
 8048280:	7a43      	ldrb	r3, [r0, #9]
 8048282:	4053      	eors	r3, r2
 8048284:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8048286:	7a8a      	ldrb	r2, [r1, #10]
 8048288:	7a83      	ldrb	r3, [r0, #10]
 804828a:	4053      	eors	r3, r2
 804828c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 804828e:	7aca      	ldrb	r2, [r1, #11]
 8048290:	7ac3      	ldrb	r3, [r0, #11]
 8048292:	4053      	eors	r3, r2
 8048294:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8048296:	7b0a      	ldrb	r2, [r1, #12]
 8048298:	7b03      	ldrb	r3, [r0, #12]
 804829a:	4053      	eors	r3, r2
 804829c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 804829e:	7b4a      	ldrb	r2, [r1, #13]
 80482a0:	7b43      	ldrb	r3, [r0, #13]
 80482a2:	4053      	eors	r3, r2
 80482a4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80482a6:	7b8a      	ldrb	r2, [r1, #14]
 80482a8:	7b83      	ldrb	r3, [r0, #14]
 80482aa:	4053      	eors	r3, r2
 80482ac:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80482ae:	7bca      	ldrb	r2, [r1, #15]
 80482b0:	7bc3      	ldrb	r3, [r0, #15]
 80482b2:	4053      	eors	r3, r2
 80482b4:	73c3      	strb	r3, [r0, #15]
#endif
}
 80482b6:	4770      	bx	lr

080482b8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80482b8:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80482ba:	780b      	ldrb	r3, [r1, #0]
 80482bc:	7814      	ldrb	r4, [r2, #0]
 80482be:	4063      	eors	r3, r4
 80482c0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80482c2:	7854      	ldrb	r4, [r2, #1]
 80482c4:	784b      	ldrb	r3, [r1, #1]
 80482c6:	4063      	eors	r3, r4
 80482c8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80482ca:	7894      	ldrb	r4, [r2, #2]
 80482cc:	788b      	ldrb	r3, [r1, #2]
 80482ce:	4063      	eors	r3, r4
 80482d0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80482d2:	78d4      	ldrb	r4, [r2, #3]
 80482d4:	78cb      	ldrb	r3, [r1, #3]
 80482d6:	4063      	eors	r3, r4
 80482d8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80482da:	7914      	ldrb	r4, [r2, #4]
 80482dc:	790b      	ldrb	r3, [r1, #4]
 80482de:	4063      	eors	r3, r4
 80482e0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80482e2:	7954      	ldrb	r4, [r2, #5]
 80482e4:	794b      	ldrb	r3, [r1, #5]
 80482e6:	4063      	eors	r3, r4
 80482e8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80482ea:	7994      	ldrb	r4, [r2, #6]
 80482ec:	798b      	ldrb	r3, [r1, #6]
 80482ee:	4063      	eors	r3, r4
 80482f0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80482f2:	79d4      	ldrb	r4, [r2, #7]
 80482f4:	79cb      	ldrb	r3, [r1, #7]
 80482f6:	4063      	eors	r3, r4
 80482f8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80482fa:	7a14      	ldrb	r4, [r2, #8]
 80482fc:	7a0b      	ldrb	r3, [r1, #8]
 80482fe:	4063      	eors	r3, r4
 8048300:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8048302:	7a54      	ldrb	r4, [r2, #9]
 8048304:	7a4b      	ldrb	r3, [r1, #9]
 8048306:	4063      	eors	r3, r4
 8048308:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 804830a:	7a8b      	ldrb	r3, [r1, #10]
 804830c:	7a94      	ldrb	r4, [r2, #10]
 804830e:	4063      	eors	r3, r4
 8048310:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8048312:	7ad4      	ldrb	r4, [r2, #11]
 8048314:	7acb      	ldrb	r3, [r1, #11]
 8048316:	4063      	eors	r3, r4
 8048318:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 804831a:	7b14      	ldrb	r4, [r2, #12]
 804831c:	7b0b      	ldrb	r3, [r1, #12]
 804831e:	4063      	eors	r3, r4
 8048320:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8048322:	7b54      	ldrb	r4, [r2, #13]
 8048324:	7b4b      	ldrb	r3, [r1, #13]
 8048326:	4063      	eors	r3, r4
 8048328:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 804832a:	7b94      	ldrb	r4, [r2, #14]
 804832c:	7b8b      	ldrb	r3, [r1, #14]
 804832e:	4063      	eors	r3, r4
 8048330:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8048332:	7bcb      	ldrb	r3, [r1, #15]
 8048334:	7bd2      	ldrb	r2, [r2, #15]
 8048336:	4053      	eors	r3, r2
 8048338:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 804833a:	bd10      	pop	{r4, pc}

0804833c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 804833c:	f1a1 0310 	sub.w	r3, r1, #16
 8048340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8048344:	b2dc      	uxtb	r4, r3
 8048346:	2c10      	cmp	r4, #16
 8048348:	d806      	bhi.n	8048358 <aes_set_key+0x1c>
 804834a:	2301      	movs	r3, #1
 804834c:	40a3      	lsls	r3, r4
 804834e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8048352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8048356:	b92b      	cbnz	r3, 8048364 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8048358:	2300      	movs	r3, #0
 804835a:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 804835e:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8048360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048364:	1e53      	subs	r3, r2, #1
 8048366:	1844      	adds	r4, r0, r1
    while( nn-- )
 8048368:	42a0      	cmp	r0, r4
 804836a:	d150      	bne.n	804840e <aes_set_key+0xd2>
    hi = (keylen + 28) << 2;
 804836c:	f101 0e1c 	add.w	lr, r1, #28
 8048370:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8048374:	fa5f fe8e 	uxtb.w	lr, lr
    ctx->rnd = (hi >> 4) - 1;
 8048378:	ea4f 131e 	mov.w	r3, lr, lsr #4
 804837c:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 804837e:	4c2c      	ldr	r4, [pc, #176]	; (8048430 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8048380:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048384:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 8048388:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 804838a:	18d5      	adds	r5, r2, r3
        if( cc % keylen == 0 )
 804838c:	fbb3 f0f1 	udiv	r0, r3, r1
 8048390:	fb01 3010 	mls	r0, r1, r0, r3
 8048394:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 8048398:	f815 ac04 	ldrb.w	sl, [r5, #-4]
        t1 = ctx->ksch[cc - 3];
 804839c:	f815 cc03 	ldrb.w	ip, [r5, #-3]
        t2 = ctx->ksch[cc - 2];
 80483a0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
        t3 = ctx->ksch[cc - 1];
 80483a4:	f815 6c01 	ldrb.w	r6, [r5, #-1]
        if( cc % keylen == 0 )
 80483a8:	d136      	bne.n	8048418 <aes_set_key+0xdc>
            rc = f2(rc);
 80483aa:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 80483ae:	f814 800c 	ldrb.w	r8, [r4, ip]
            t1 = s_box(t2);
 80483b2:	f814 c007 	ldrb.w	ip, [r4, r7]
            t2 = s_box(t3);
 80483b6:	5da7      	ldrb	r7, [r4, r6]
            t3 = s_box(tt);
 80483b8:	f814 600a 	ldrb.w	r6, [r4, sl]
            rc = f2(rc);
 80483bc:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80483c0:	4450      	add	r0, sl
 80483c2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 80483c6:	ea89 0808 	eor.w	r8, r9, r8
            rc = f2(rc);
 80483ca:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 80483ce:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 80483d2:	46c2      	mov	sl, r8
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80483d4:	1a58      	subs	r0, r3, r1
 80483d6:	b2c0      	uxtb	r0, r0
 80483d8:	f812 8000 	ldrb.w	r8, [r2, r0]
 80483dc:	ea8a 0a08 	eor.w	sl, sl, r8
 80483e0:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80483e4:	4410      	add	r0, r2
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80483e6:	3304      	adds	r3, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80483e8:	f890 8001 	ldrb.w	r8, [r0, #1]
 80483ec:	ea8c 0c08 	eor.w	ip, ip, r8
 80483f0:	f885 c001 	strb.w	ip, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80483f4:	f890 c002 	ldrb.w	ip, [r0, #2]
 80483f8:	ea87 070c 	eor.w	r7, r7, ip
 80483fc:	70af      	strb	r7, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80483fe:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048400:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8048402:	4046      	eors	r6, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048404:	459e      	cmp	lr, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8048406:	70ee      	strb	r6, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8048408:	d8bf      	bhi.n	804838a <aes_set_key+0x4e>
    return 0;
 804840a:	2000      	movs	r0, #0
 804840c:	e7a8      	b.n	8048360 <aes_set_key+0x24>
        *d++ = *s++;
 804840e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8048412:	f803 5f01 	strb.w	r5, [r3, #1]!
 8048416:	e7a7      	b.n	8048368 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8048418:	2918      	cmp	r1, #24
 804841a:	d9db      	bls.n	80483d4 <aes_set_key+0x98>
 804841c:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 804841e:	bf01      	itttt	eq
 8048420:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8048424:	f814 c00c 	ldrbeq.w	ip, [r4, ip]
            t2 = s_box(t2);
 8048428:	5de7      	ldrbeq	r7, [r4, r7]
            t3 = s_box(t3);
 804842a:	5da6      	ldrbeq	r6, [r4, r6]
 804842c:	e7d2      	b.n	80483d4 <aes_set_key+0x98>
 804842e:	bf00      	nop
 8048430:	080521e8 	.word	0x080521e8

08048434 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8048434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048438:	b09f      	sub	sp, #124	; 0x7c
    if( ctx->rnd )
 804843a:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 804843e:	9118      	str	r1, [sp, #96]	; 0x60
 8048440:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8048442:	2b00      	cmp	r3, #0
 8048444:	f000 8168 	beq.w	8048718 <aes_encrypt+0x2e4>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8048448:	ad1a      	add	r5, sp, #104	; 0x68
 804844a:	4601      	mov	r1, r0
 804844c:	4cb3      	ldr	r4, [pc, #716]	; (804871c <aes_encrypt+0x2e8>)
 804844e:	4628      	mov	r0, r5
 8048450:	f7ff ff32 	bl	80482b8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8048454:	f04f 0b01 	mov.w	fp, #1
    xor_block(d, k);
 8048458:	9519      	str	r5, [sp, #100]	; 0x64
 804845a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804845c:	f89d c068 	ldrb.w	ip, [sp, #104]	; 0x68
 8048460:	f89d 706d 	ldrb.w	r7, [sp, #109]	; 0x6d
 8048464:	f89d 8072 	ldrb.w	r8, [sp, #114]	; 0x72
 8048468:	f89d e077 	ldrb.w	lr, [sp, #119]	; 0x77
 804846c:	f814 5008 	ldrb.w	r5, [r4, r8]
 8048470:	f814 100e 	ldrb.w	r1, [r4, lr]
 8048474:	f814 200c 	ldrb.w	r2, [r4, ip]
 8048478:	f814 a007 	ldrb.w	sl, [r4, r7]
 804847c:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8048480:	930b      	str	r3, [sp, #44]	; 0x2c
 8048482:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8048486:	930c      	str	r3, [sp, #48]	; 0x30
 8048488:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 804848c:	930d      	str	r3, [sp, #52]	; 0x34
 804848e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8048490:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8048494:	5da6      	ldrb	r6, [r4, r6]
 8048496:	930e      	str	r3, [sp, #56]	; 0x38
 8048498:	5ce3      	ldrb	r3, [r4, r3]
 804849a:	9300      	str	r3, [sp, #0]
 804849c:	9601      	str	r6, [sp, #4]
 804849e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80484a2:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 80484a6:	9610      	str	r6, [sp, #64]	; 0x40
 80484a8:	f89d 6075 	ldrb.w	r6, [sp, #117]	; 0x75
 80484ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80484ae:	5ce0      	ldrb	r0, [r4, r3]
 80484b0:	9611      	str	r6, [sp, #68]	; 0x44
 80484b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80484b4:	f89d 606a 	ldrb.w	r6, [sp, #106]	; 0x6a
 80484b8:	5ce3      	ldrb	r3, [r4, r3]
 80484ba:	9612      	str	r6, [sp, #72]	; 0x48
 80484bc:	5da6      	ldrb	r6, [r4, r6]
 80484be:	9602      	str	r6, [sp, #8]
 80484c0:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 80484c4:	9613      	str	r6, [sp, #76]	; 0x4c
 80484c6:	5da6      	ldrb	r6, [r4, r6]
 80484c8:	9603      	str	r6, [sp, #12]
 80484ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80484cc:	5da6      	ldrb	r6, [r4, r6]
 80484ce:	9604      	str	r6, [sp, #16]
 80484d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80484d2:	5da6      	ldrb	r6, [r4, r6]
 80484d4:	9605      	str	r6, [sp, #20]
 80484d6:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
 80484da:	9614      	str	r6, [sp, #80]	; 0x50
 80484dc:	f89d 6069 	ldrb.w	r6, [sp, #105]	; 0x69
 80484e0:	9615      	str	r6, [sp, #84]	; 0x54
 80484e2:	f89d 606e 	ldrb.w	r6, [sp, #110]	; 0x6e
 80484e6:	9616      	str	r6, [sp, #88]	; 0x58
 80484e8:	5da6      	ldrb	r6, [r4, r6]
 80484ea:	9606      	str	r6, [sp, #24]
 80484ec:	f89d 6073 	ldrb.w	r6, [sp, #115]	; 0x73
 80484f0:	9617      	str	r6, [sp, #92]	; 0x5c
 80484f2:	5da6      	ldrb	r6, [r4, r6]
 80484f4:	9607      	str	r6, [sp, #28]
 80484f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80484f8:	5da6      	ldrb	r6, [r4, r6]
 80484fa:	9608      	str	r6, [sp, #32]
 80484fc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80484fe:	5da6      	ldrb	r6, [r4, r6]
 8048500:	9609      	str	r6, [sp, #36]	; 0x24
        for( r = 1 ; r < ctx->rnd ; ++r )
 8048502:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8048504:	f896 90f0 	ldrb.w	r9, [r6, #240]	; 0xf0
 8048508:	45d9      	cmp	r9, fp
 804850a:	d832      	bhi.n	8048572 <aes_encrypt+0x13e>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 804850c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8048510:	9b04      	ldr	r3, [sp, #16]
 8048512:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8048516:	9b08      	ldr	r3, [sp, #32]
 8048518:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 804851c:	9b01      	ldr	r3, [sp, #4]
 804851e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8048522:	9b05      	ldr	r3, [sp, #20]
 8048524:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 8048528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804852a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804852e:	9b02      	ldr	r3, [sp, #8]
 8048530:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8048534:	9b00      	ldr	r3, [sp, #0]
 8048536:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 804853a:	9b06      	ldr	r3, [sp, #24]
 804853c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048540:	9b07      	ldr	r3, [sp, #28]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8048542:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048546:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 804854a:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 804854e:	9b03      	ldr	r3, [sp, #12]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8048550:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8048554:	9818      	ldr	r0, [sp, #96]	; 0x60
 8048556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8048558:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 804855c:	a91a      	add	r1, sp, #104	; 0x68
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 804855e:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8048562:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8048566:	f7ff fea7 	bl	80482b8 <copy_and_key>
 804856a:	2000      	movs	r0, #0
    }
    else
        return ( uint8_t )-1;
    return 0;
}
 804856c:	b01f      	add	sp, #124	; 0x7c
 804856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8048572:	44a4      	add	ip, r4
 8048574:	4427      	add	r7, r4
 8048576:	f89c 6100 	ldrb.w	r6, [ip, #256]	; 0x100
 804857a:	ea85 0901 	eor.w	r9, r5, r1
 804857e:	ea86 0909 	eor.w	r9, r6, r9
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8048582:	44a0      	add	r8, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8048584:	f897 6200 	ldrb.w	r6, [r7, #512]	; 0x200
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8048588:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
 804858c:	4051      	eors	r1, r2
 804858e:	4079      	eors	r1, r7
 8048590:	f898 7200 	ldrb.w	r7, [r8, #512]	; 0x200
 8048594:	4079      	eors	r1, r7
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8048596:	44a6      	add	lr, r4
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8048598:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 804859c:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
 80485a0:	ea82 020a 	eor.w	r2, r2, sl
 80485a4:	404a      	eors	r2, r1
 80485a6:	f89e 1200 	ldrb.w	r1, [lr, #512]	; 0x200
 80485aa:	404a      	eors	r2, r1
 80485ac:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80485b2:	4422      	add	r2, r4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80485b4:	ea89 0906 	eor.w	r9, r9, r6
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485b8:	4616      	mov	r6, r2
 80485ba:	9a00      	ldr	r2, [sp, #0]
 80485bc:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80485c0:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80485c4:	ea85 050a 	eor.w	r5, r5, sl
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485c8:	4042      	eors	r2, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80485ca:	f89c a200 	ldrb.w	sl, [ip, #512]	; 0x200
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485ce:	404a      	eors	r2, r1
 80485d0:	990d      	ldr	r1, [sp, #52]	; 0x34
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80485d2:	ea8a 0505 	eor.w	r5, sl, r5
 80485d6:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485da:	4421      	add	r1, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80485dc:	ea85 050a 	eor.w	r5, r5, sl
 80485e0:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80485e4:	f891 5200 	ldrb.w	r5, [r1, #512]	; 0x200
 80485e8:	406a      	eors	r2, r5
 80485ea:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80485ee:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 80485f2:	4058      	eors	r0, r3
 80485f4:	4050      	eors	r0, r2
 80485f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80485f8:	4422      	add	r2, r4
 80485fa:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80485fe:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8048602:	4048      	eors	r0, r1
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8048604:	9901      	ldr	r1, [sp, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8048606:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 804860a:	404b      	eors	r3, r1
 804860c:	4053      	eors	r3, r2
 804860e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8048610:	4422      	add	r2, r4
 8048612:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8048616:	404b      	eors	r3, r1
 8048618:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 804861c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8048620:	404b      	eors	r3, r1
 8048622:	f896 1200 	ldrb.w	r1, [r6, #512]	; 0x200
 8048626:	404b      	eors	r3, r1
 8048628:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 804862c:	404b      	eors	r3, r1
 804862e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048632:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8048634:	4423      	add	r3, r4
 8048636:	461a      	mov	r2, r3
 8048638:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 804863c:	404b      	eors	r3, r1
 804863e:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8048642:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048646:	404b      	eors	r3, r1
 8048648:	9911      	ldr	r1, [sp, #68]	; 0x44
 804864a:	4421      	add	r1, r4
 804864c:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8048650:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8048654:	4043      	eors	r3, r0
 8048656:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804865a:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 804865e:	4043      	eors	r3, r0
 8048660:	404b      	eors	r3, r1
 8048662:	9912      	ldr	r1, [sp, #72]	; 0x48
 8048664:	4421      	add	r1, r4
 8048666:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 804866a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 804866e:	4043      	eors	r3, r0
 8048670:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8048674:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8048678:	4043      	eors	r3, r0
 804867a:	404b      	eors	r3, r1
 804867c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 804867e:	4421      	add	r1, r4
 8048680:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8048684:	4043      	eors	r3, r0
 8048686:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 804868a:	9805      	ldr	r0, [sp, #20]
 804868c:	9b02      	ldr	r3, [sp, #8]
 804868e:	4043      	eors	r3, r0
 8048690:	4053      	eors	r3, r2
 8048692:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
 8048696:	4053      	eors	r3, r2
 8048698:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 804869c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804869e:	4423      	add	r3, r4
 80486a0:	461a      	mov	r2, r3
 80486a2:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 80486a6:	404b      	eors	r3, r1
 80486a8:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
 80486ac:	404b      	eors	r3, r1
 80486ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80486b0:	4421      	add	r1, r4
 80486b2:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80486b6:	4043      	eors	r3, r0
 80486b8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80486bc:	e9dd 3007 	ldrd	r3, r0, [sp, #28]
 80486c0:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80486c4:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80486c8:	4043      	eors	r3, r0
 80486ca:	404b      	eors	r3, r1
 80486cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80486ce:	4421      	add	r1, r4
 80486d0:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80486d4:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80486d8:	4043      	eors	r3, r0
 80486da:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80486de:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80486e2:	4043      	eors	r3, r0
 80486e4:	404b      	eors	r3, r1
 80486e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80486e8:	4421      	add	r1, r4
 80486ea:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 80486ee:	4043      	eors	r3, r0
 80486f0:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80486f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80486f6:	9b06      	ldr	r3, [sp, #24]
 80486f8:	4043      	eors	r3, r0
 80486fa:	4053      	eors	r3, r2
 80486fc:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
    xor_block(d, k);
 8048700:	9819      	ldr	r0, [sp, #100]	; 0x64
 8048702:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8048704:	4053      	eors	r3, r2
 8048706:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    xor_block(d, k);
 804870a:	f7ff fd94 	bl	8048236 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 804870e:	f10b 0301 	add.w	r3, fp, #1
 8048712:	fa5f fb83 	uxtb.w	fp, r3
 8048716:	e6a0      	b.n	804845a <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8048718:	20ff      	movs	r0, #255	; 0xff
 804871a:	e727      	b.n	804856c <aes_encrypt+0x138>
 804871c:	080521e8 	.word	0x080521e8

08048720 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8048720:	b510      	push	{r4, lr}
            memset1(ctx->X, 0, sizeof ctx->X);
 8048722:	2210      	movs	r2, #16
{
 8048724:	4604      	mov	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8048726:	2100      	movs	r1, #0
 8048728:	30f1      	adds	r0, #241	; 0xf1
 804872a:	f005 ff74 	bl	804e616 <memset1>
            ctx->M_n = 0;
 804872e:	2100      	movs	r1, #0
 8048730:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 8048734:	4620      	mov	r0, r4
 8048736:	22f0      	movs	r2, #240	; 0xf0
}
 8048738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset1(ctx->rijndael.ksch, '\0', 240);
 804873c:	f005 bf6b 	b.w	804e616 <memset1>

08048740 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8048740:	460b      	mov	r3, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8048742:	4602      	mov	r2, r0
 8048744:	2110      	movs	r1, #16
 8048746:	4618      	mov	r0, r3
 8048748:	f7ff bdf8 	b.w	804833c <aes_set_key>

0804874c <AES_CMAC_Update>:
}
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 804874c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8048750:	4604      	mov	r4, r0
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8048752:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8048756:	b085      	sub	sp, #20
 8048758:	460e      	mov	r6, r1
 804875a:	4615      	mov	r5, r2
 804875c:	f204 1801 	addw	r8, r4, #257	; 0x101
            if (ctx->M_n > 0) {
 8048760:	b310      	cbz	r0, 80487a8 <AES_CMAC_Update+0x5c>
                  mlen = MIN(16 - ctx->M_n, len);
 8048762:	f1c0 0910 	rsb	r9, r0, #16
 8048766:	4591      	cmp	r9, r2
 8048768:	464f      	mov	r7, r9
 804876a:	bf28      	it	cs
 804876c:	4617      	movcs	r7, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 804876e:	b2ba      	uxth	r2, r7
 8048770:	4440      	add	r0, r8
 8048772:	f005 ff3c 	bl	804e5ee <memcpy1>
                    ctx->M_n += mlen;
 8048776:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 804877a:	443b      	add	r3, r7
                    if (ctx->M_n < 16 || len == mlen)
 804877c:	2b0f      	cmp	r3, #15
                    ctx->M_n += mlen;
 804877e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 8048782:	d91c      	bls.n	80487be <AES_CMAC_Update+0x72>
 8048784:	45a9      	cmp	r9, r5
 8048786:	d21a      	bcs.n	80487be <AES_CMAC_Update+0x72>
 8048788:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 804878c:	4619      	mov	r1, r3
                            return;
                   XOR(ctx->M_last, ctx->X);
 804878e:	781a      	ldrb	r2, [r3, #0]
 8048790:	7c18      	ldrb	r0, [r3, #16]
 8048792:	4042      	eors	r2, r0
 8048794:	f803 2b01 	strb.w	r2, [r3], #1
 8048798:	4543      	cmp	r3, r8
 804879a:	d1f8      	bne.n	804878e <AES_CMAC_Update+0x42>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 804879c:	4622      	mov	r2, r4
 804879e:	4608      	mov	r0, r1
 80487a0:	f7ff fe48 	bl	8048434 <aes_encrypt>
                    data += mlen;
 80487a4:	443e      	add	r6, r7
                    len -= mlen;
 80487a6:	1bed      	subs	r5, r5, r7
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80487a8:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
            while (len > 16) {      /* not last block */
 80487ac:	2d10      	cmp	r5, #16
 80487ae:	d809      	bhi.n	80487c4 <AES_CMAC_Update+0x78>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80487b0:	b2aa      	uxth	r2, r5
 80487b2:	4631      	mov	r1, r6
 80487b4:	4640      	mov	r0, r8
 80487b6:	f005 ff1a 	bl	804e5ee <memcpy1>
            ctx->M_n = len;
 80487ba:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 80487be:	b005      	add	sp, #20
 80487c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80487c4:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
 80487c8:	1e73      	subs	r3, r6, #1
 80487ca:	f106 000f 	add.w	r0, r6, #15
                    XOR(data, ctx->X);
 80487ce:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80487d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80487d6:	4283      	cmp	r3, r0
 80487d8:	ea81 010c 	eor.w	r1, r1, ip
 80487dc:	7011      	strb	r1, [r2, #0]
 80487de:	d1f6      	bne.n	80487ce <AES_CMAC_Update+0x82>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80487e0:	2210      	movs	r2, #16
 80487e2:	4639      	mov	r1, r7
 80487e4:	4668      	mov	r0, sp
 80487e6:	f005 ff02 	bl	804e5ee <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 80487ea:	4622      	mov	r2, r4
 80487ec:	4669      	mov	r1, sp
 80487ee:	4668      	mov	r0, sp
 80487f0:	f7ff fe20 	bl	8048434 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 80487f4:	2210      	movs	r2, #16
 80487f6:	4669      	mov	r1, sp
 80487f8:	4638      	mov	r0, r7
 80487fa:	f005 fef8 	bl	804e5ee <memcpy1>
                    data += 16;
 80487fe:	3610      	adds	r6, #16
                    len -= 16;
 8048800:	3d10      	subs	r5, #16
 8048802:	e7d3      	b.n	80487ac <AES_CMAC_Update+0x60>

08048804 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8048804:	b570      	push	{r4, r5, r6, lr}
 8048806:	b088      	sub	sp, #32
 8048808:	460c      	mov	r4, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 804880a:	2210      	movs	r2, #16
 804880c:	2100      	movs	r1, #0
{
 804880e:	4605      	mov	r5, r0
            memset1(K, '\0', 16);
 8048810:	4668      	mov	r0, sp
 8048812:	f005 ff00 	bl	804e616 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8048816:	4622      	mov	r2, r4
 8048818:	4669      	mov	r1, sp
 804881a:	4668      	mov	r0, sp
 804881c:	f7ff fe0a 	bl	8048434 <aes_encrypt>

            if (K[0] & 0x80) {
 8048820:	f99d 3000 	ldrsb.w	r3, [sp]
 8048824:	2b00      	cmp	r3, #0
 8048826:	466a      	mov	r2, sp
 8048828:	f10d 010f 	add.w	r1, sp, #15
 804882c:	da3e      	bge.n	80488ac <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 804882e:	7813      	ldrb	r3, [r2, #0]
 8048830:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8048834:	005b      	lsls	r3, r3, #1
 8048836:	b25b      	sxtb	r3, r3
 8048838:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 804883c:	4291      	cmp	r1, r2
 804883e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8048842:	d1f4      	bne.n	804882e <AES_CMAC_Final+0x2a>
 8048844:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8048848:	005b      	lsls	r3, r3, #1
                   K[15] ^= 0x87;
 804884a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
            } else
                    LSHIFT(K, K);
 804884e:	f88d 300f 	strb.w	r3, [sp, #15]


            if (ctx->M_n == 16) {
 8048852:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8048856:	2b10      	cmp	r3, #16
 8048858:	d137      	bne.n	80488ca <AES_CMAC_Final+0xc6>
 804885a:	f204 1201 	addw	r2, r4, #257	; 0x101
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 804885e:	2300      	movs	r3, #0
 8048860:	7811      	ldrb	r1, [r2, #0]
 8048862:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8048866:	3301      	adds	r3, #1
 8048868:	4041      	eors	r1, r0
 804886a:	2b10      	cmp	r3, #16
 804886c:	f802 1b01 	strb.w	r1, [r2], #1
 8048870:	d1f6      	bne.n	8048860 <AES_CMAC_Final+0x5c>
 8048872:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8048876:	f204 1001 	addw	r0, r4, #257	; 0x101
 804887a:	4619      	mov	r1, r3
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 804887c:	781a      	ldrb	r2, [r3, #0]
 804887e:	7c1e      	ldrb	r6, [r3, #16]
 8048880:	4072      	eors	r2, r6
 8048882:	f803 2b01 	strb.w	r2, [r3], #1
 8048886:	4298      	cmp	r0, r3
 8048888:	d1f8      	bne.n	804887c <AES_CMAC_Final+0x78>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 804888a:	2210      	movs	r2, #16
 804888c:	eb0d 0002 	add.w	r0, sp, r2
 8048890:	f005 fead 	bl	804e5ee <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8048894:	4622      	mov	r2, r4
 8048896:	4629      	mov	r1, r5
 8048898:	a804      	add	r0, sp, #16
 804889a:	f7ff fdcb 	bl	8048434 <aes_encrypt>
           memset1(K, 0, sizeof K);
 804889e:	2210      	movs	r2, #16
 80488a0:	2100      	movs	r1, #0
 80488a2:	4668      	mov	r0, sp
 80488a4:	f005 feb7 	bl	804e616 <memset1>

}
 80488a8:	b008      	add	sp, #32
 80488aa:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 80488ac:	7813      	ldrb	r3, [r2, #0]
 80488ae:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80488b2:	005b      	lsls	r3, r3, #1
 80488b4:	b25b      	sxtb	r3, r3
 80488b6:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80488ba:	428a      	cmp	r2, r1
 80488bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80488c0:	d1f4      	bne.n	80488ac <AES_CMAC_Final+0xa8>
 80488c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80488c6:	005b      	lsls	r3, r3, #1
 80488c8:	e7c1      	b.n	804884e <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 80488ca:	f99d 2000 	ldrsb.w	r2, [sp]
 80488ce:	2a00      	cmp	r2, #0
 80488d0:	4668      	mov	r0, sp
 80488d2:	da28      	bge.n	8048926 <AES_CMAC_Final+0x122>
                          LSHIFT(K, K);
 80488d4:	7802      	ldrb	r2, [r0, #0]
 80488d6:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 80488da:	0052      	lsls	r2, r2, #1
 80488dc:	b252      	sxtb	r2, r2
 80488de:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 80488e2:	4281      	cmp	r1, r0
 80488e4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80488e8:	d1f4      	bne.n	80488d4 <AES_CMAC_Final+0xd0>
 80488ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80488ee:	0052      	lsls	r2, r2, #1
                          K[15] ^= 0x87;
 80488f0:	f082 0287 	eor.w	r2, r2, #135	; 0x87
                           LSHIFT(K, K);
 80488f4:	f88d 200f 	strb.w	r2, [sp, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 80488f8:	18e2      	adds	r2, r4, r3
 80488fa:	2180      	movs	r1, #128	; 0x80
 80488fc:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8048900:	2200      	movs	r2, #0
                   while (++ctx->M_n < 16)
 8048902:	3301      	adds	r3, #1
 8048904:	2b0f      	cmp	r3, #15
 8048906:	d91d      	bls.n	8048944 <AES_CMAC_Final+0x140>
 8048908:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 804890c:	f204 1201 	addw	r2, r4, #257	; 0x101
                  XOR(K, ctx->M_last);
 8048910:	2300      	movs	r3, #0
 8048912:	7811      	ldrb	r1, [r2, #0]
 8048914:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8048918:	3301      	adds	r3, #1
 804891a:	4041      	eors	r1, r0
 804891c:	2b10      	cmp	r3, #16
 804891e:	f802 1b01 	strb.w	r1, [r2], #1
 8048922:	d1f6      	bne.n	8048912 <AES_CMAC_Final+0x10e>
 8048924:	e7a5      	b.n	8048872 <AES_CMAC_Final+0x6e>
                           LSHIFT(K, K);
 8048926:	7802      	ldrb	r2, [r0, #0]
 8048928:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 804892c:	0052      	lsls	r2, r2, #1
 804892e:	b252      	sxtb	r2, r2
 8048930:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8048934:	4281      	cmp	r1, r0
 8048936:	f800 2c01 	strb.w	r2, [r0, #-1]
 804893a:	d1f4      	bne.n	8048926 <AES_CMAC_Final+0x122>
 804893c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8048940:	0052      	lsls	r2, r2, #1
 8048942:	e7d7      	b.n	80488f4 <AES_CMAC_Final+0xf0>
                         ctx->M_last[ctx->M_n] = 0;
 8048944:	18e1      	adds	r1, r4, r3
 8048946:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 804894a:	e7da      	b.n	8048902 <AES_CMAC_Final+0xfe>

0804894c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 804894c:	4770      	bx	lr
	...

08048950 <GetKeyByID>:
{
 8048950:	b530      	push	{r4, r5, lr}
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048952:	4a0a      	ldr	r2, [pc, #40]	; (804897c <GetKeyByID+0x2c>)
{
 8048954:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048956:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 804895a:	1915      	adds	r5, r2, r4
 804895c:	f895 522c 	ldrb.w	r5, [r5, #556]	; 0x22c
 8048960:	4285      	cmp	r5, r0
 8048962:	d105      	bne.n	8048970 <GetKeyByID+0x20>
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8048964:	f504 740b 	add.w	r4, r4, #556	; 0x22c
 8048968:	4422      	add	r2, r4
 804896a:	600a      	str	r2, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 804896c:	2000      	movs	r0, #0
}
 804896e:	bd30      	pop	{r4, r5, pc}
 8048970:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8048972:	2b18      	cmp	r3, #24
 8048974:	d1ef      	bne.n	8048956 <GetKeyByID+0x6>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048976:	2003      	movs	r0, #3
 8048978:	e7f9      	b.n	804896e <GetKeyByID+0x1e>
 804897a:	bf00      	nop
 804897c:	2000246c 	.word	0x2000246c

08048980 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8048980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048982:	461c      	mov	r4, r3
 8048984:	b087      	sub	sp, #28
 8048986:	4605      	mov	r5, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8048988:	4812      	ldr	r0, [pc, #72]	; (80489d4 <ComputeCmac.part.0+0x54>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 804898a:	460e      	mov	r6, r1
 804898c:	4617      	mov	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 804898e:	f7ff fec7 	bl	8048720 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8048992:	4620      	mov	r0, r4
 8048994:	a901      	add	r1, sp, #4
 8048996:	f7ff ffdb 	bl	8048950 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 804899a:	4604      	mov	r4, r0
 804899c:	b9b0      	cbnz	r0, 80489cc <ComputeCmac.part.0+0x4c>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 804899e:	9901      	ldr	r1, [sp, #4]
 80489a0:	480c      	ldr	r0, [pc, #48]	; (80489d4 <ComputeCmac.part.0+0x54>)
 80489a2:	3101      	adds	r1, #1
 80489a4:	f7ff fecc 	bl	8048740 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80489a8:	b125      	cbz	r5, 80489b4 <ComputeCmac.part.0+0x34>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 80489aa:	2210      	movs	r2, #16
 80489ac:	4629      	mov	r1, r5
 80489ae:	4809      	ldr	r0, [pc, #36]	; (80489d4 <ComputeCmac.part.0+0x54>)
 80489b0:	f7ff fecc 	bl	804874c <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 80489b4:	463a      	mov	r2, r7
 80489b6:	4631      	mov	r1, r6
 80489b8:	4806      	ldr	r0, [pc, #24]	; (80489d4 <ComputeCmac.part.0+0x54>)
 80489ba:	f7ff fec7 	bl	804874c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 80489be:	4905      	ldr	r1, [pc, #20]	; (80489d4 <ComputeCmac.part.0+0x54>)
 80489c0:	a802      	add	r0, sp, #8
 80489c2:	f7ff ff1f 	bl	8048804 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 80489c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80489c8:	9a02      	ldr	r2, [sp, #8]
 80489ca:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 80489cc:	4620      	mov	r0, r4
 80489ce:	b007      	add	sp, #28
 80489d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80489d2:	bf00      	nop
 80489d4:	20002580 	.word	0x20002580

080489d8 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 80489d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 80489da:	4c34      	ldr	r4, [pc, #208]	; (8048aac <SecureElementInit+0xd4>)
{
 80489dc:	4606      	mov	r6, r0
    uint8_t zeroKey[16] = { 0 };
 80489de:	2210      	movs	r2, #16
 80489e0:	2100      	movs	r1, #0
 80489e2:	4668      	mov	r0, sp
 80489e4:	f007 ffad 	bl	8050942 <memset>
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 80489e8:	2301      	movs	r3, #1
 80489ea:	f884 323d 	strb.w	r3, [r4, #573]	; 0x23d
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 80489ee:	2302      	movs	r3, #2
 80489f0:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 80489f4:	2303      	movs	r3, #3
 80489f6:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 80489fa:	2304      	movs	r3, #4
 80489fc:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8048a00:	2305      	movs	r3, #5
 8048a02:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8048a06:	2306      	movs	r3, #6
 8048a08:	f884 3292 	strb.w	r3, [r4, #658]	; 0x292
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8048a0c:	2307      	movs	r3, #7
 8048a0e:	f884 32a3 	strb.w	r3, [r4, #675]	; 0x2a3
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8048a12:	2308      	movs	r3, #8
 8048a14:	f884 32b4 	strb.w	r3, [r4, #692]	; 0x2b4
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8048a18:	2309      	movs	r3, #9
 8048a1a:	f884 32c5 	strb.w	r3, [r4, #709]	; 0x2c5
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8048a1e:	237f      	movs	r3, #127	; 0x7f
 8048a20:	f884 32d6 	strb.w	r3, [r4, #726]	; 0x2d6
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8048a24:	2380      	movs	r3, #128	; 0x80
 8048a26:	f884 32e7 	strb.w	r3, [r4, #743]	; 0x2e7
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8048a2a:	2381      	movs	r3, #129	; 0x81
 8048a2c:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8048a30:	2382      	movs	r3, #130	; 0x82
 8048a32:	f884 3309 	strb.w	r3, [r4, #777]	; 0x309
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8048a36:	2383      	movs	r3, #131	; 0x83
 8048a38:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8048a3c:	2384      	movs	r3, #132	; 0x84
 8048a3e:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8048a42:	2385      	movs	r3, #133	; 0x85
 8048a44:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8048a48:	2386      	movs	r3, #134	; 0x86
 8048a4a:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8048a4e:	2387      	movs	r3, #135	; 0x87
 8048a50:	f884 335e 	strb.w	r3, [r4, #862]	; 0x35e
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8048a54:	2388      	movs	r3, #136	; 0x88
 8048a56:	f884 336f 	strb.w	r3, [r4, #879]	; 0x36f
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8048a5a:	2389      	movs	r3, #137	; 0x89
 8048a5c:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8048a60:	238a      	movs	r3, #138	; 0x8a
 8048a62:	f884 3391 	strb.w	r3, [r4, #913]	; 0x391
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8048a66:	238b      	movs	r3, #139	; 0x8b
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8048a68:	2500      	movs	r5, #0
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8048a6a:	f884 33a2 	strb.w	r3, [r4, #930]	; 0x3a2
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048a6e:	2210      	movs	r2, #16
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8048a70:	238c      	movs	r3, #140	; 0x8c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048a72:	4669      	mov	r1, sp
 8048a74:	f504 706d 	add.w	r0, r4, #948	; 0x3b4
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8048a78:	f884 33b3 	strb.w	r3, [r4, #947]	; 0x3b3
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8048a7c:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8048a80:	f005 fdb5 	bl	804e5ee <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8048a84:	2210      	movs	r2, #16
 8048a86:	4629      	mov	r1, r5
 8048a88:	4620      	mov	r0, r4
 8048a8a:	f005 fdc4 	bl	804e616 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8048a8e:	2210      	movs	r2, #16
 8048a90:	4629      	mov	r1, r5
 8048a92:	18a0      	adds	r0, r4, r2
 8048a94:	f005 fdbf 	bl	804e616 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8048a98:	b126      	cbz	r6, 8048aa4 <SecureElementInit+0xcc>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8048a9a:	f8c4 63c4 	str.w	r6, [r4, #964]	; 0x3c4
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8048a9e:	2000      	movs	r0, #0
 8048aa0:	b004      	add	sp, #16
 8048aa2:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 8048aa4:	4b02      	ldr	r3, [pc, #8]	; (8048ab0 <SecureElementInit+0xd8>)
 8048aa6:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
 8048aaa:	e7f8      	b.n	8048a9e <SecureElementInit+0xc6>
 8048aac:	2000246c 	.word	0x2000246c
 8048ab0:	0804894d 	.word	0x0804894d

08048ab4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8048ab4:	b508      	push	{r3, lr}
    // Restore nvm context
    if( seNvmCtx != 0 )
 8048ab6:	4601      	mov	r1, r0
 8048ab8:	b130      	cbz	r0, 8048ac8 <SecureElementRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8048aba:	4804      	ldr	r0, [pc, #16]	; (8048acc <SecureElementRestoreNvmCtx+0x18>)
 8048abc:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8048ac0:	f005 fd95 	bl	804e5ee <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8048ac4:	2000      	movs	r0, #0
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
}
 8048ac6:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048ac8:	2002      	movs	r0, #2
 8048aca:	e7fc      	b.n	8048ac6 <SecureElementRestoreNvmCtx+0x12>
 8048acc:	2000246c 	.word	0x2000246c

08048ad0 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8048ad0:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8048ad4:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8048ad6:	4801      	ldr	r0, [pc, #4]	; (8048adc <SecureElementGetNvmCtx+0xc>)
 8048ad8:	4770      	bx	lr
 8048ada:	bf00      	nop
 8048adc:	2000246c 	.word	0x2000246c

08048ae0 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8048ae0:	b430      	push	{r4, r5}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048ae2:	2b7e      	cmp	r3, #126	; 0x7e
{
 8048ae4:	9c02      	ldr	r4, [sp, #8]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8048ae6:	d804      	bhi.n	8048af2 <SecureElementComputeAesCmac+0x12>
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8048ae8:	b131      	cbz	r1, 8048af8 <SecureElementComputeAesCmac+0x18>
 8048aea:	b12c      	cbz	r4, 8048af8 <SecureElementComputeAesCmac+0x18>
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 8048aec:	bc30      	pop	{r4, r5}
 8048aee:	f7ff bf47 	b.w	8048980 <ComputeCmac.part.0>
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048af2:	2003      	movs	r0, #3
}
 8048af4:	bc30      	pop	{r4, r5}
 8048af6:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8048af8:	2002      	movs	r0, #2
 8048afa:	e7fb      	b.n	8048af4 <SecureElementComputeAesCmac+0x14>

08048afc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8048afc:	b530      	push	{r4, r5, lr}
 8048afe:	460d      	mov	r5, r1
 8048b00:	b085      	sub	sp, #20
 8048b02:	4614      	mov	r4, r2
    if( buffer == NULL )
 8048b04:	4601      	mov	r1, r0
 8048b06:	b170      	cbz	r0, 8048b26 <SecureElementVerifyAesCmac+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8048b08:	aa04      	add	r2, sp, #16
 8048b0a:	2000      	movs	r0, #0
 8048b0c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8048b10:	9200      	str	r2, [sp, #0]
 8048b12:	462a      	mov	r2, r5
 8048b14:	f7ff ff34 	bl	8048980 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8048b18:	b918      	cbnz	r0, 8048b22 <SecureElementVerifyAesCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8048b1a:	9803      	ldr	r0, [sp, #12]
 8048b1c:	1b00      	subs	r0, r0, r4
 8048b1e:	bf18      	it	ne
 8048b20:	2001      	movne	r0, #1
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8048b22:	b005      	add	sp, #20
 8048b24:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048b26:	2002      	movs	r0, #2
 8048b28:	e7fb      	b.n	8048b22 <SecureElementVerifyAesCmac+0x26>
	...

08048b2c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8048b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8048b30:	460e      	mov	r6, r1
 8048b32:	4614      	mov	r4, r2
 8048b34:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 8048b36:	4607      	mov	r7, r0
 8048b38:	b330      	cbz	r0, 8048b88 <SecureElementAesEncrypt+0x5c>
 8048b3a:	b32b      	cbz	r3, 8048b88 <SecureElementAesEncrypt+0x5c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8048b3c:	f011 010f 	ands.w	r1, r1, #15
 8048b40:	d124      	bne.n	8048b8c <SecureElementAesEncrypt+0x60>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8048b42:	22f0      	movs	r2, #240	; 0xf0
 8048b44:	4812      	ldr	r0, [pc, #72]	; (8048b90 <SecureElementAesEncrypt+0x64>)
 8048b46:	f005 fd66 	bl	804e616 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8048b4a:	a901      	add	r1, sp, #4
 8048b4c:	4620      	mov	r0, r4
 8048b4e:	f7ff feff 	bl	8048950 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8048b52:	4605      	mov	r5, r0
 8048b54:	b958      	cbnz	r0, 8048b6e <SecureElementAesEncrypt+0x42>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8048b56:	9801      	ldr	r0, [sp, #4]
 8048b58:	4a0d      	ldr	r2, [pc, #52]	; (8048b90 <SecureElementAesEncrypt+0x64>)

        uint8_t block = 0;

        while( size != 0 )
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048b5a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8048b90 <SecureElementAesEncrypt+0x64>
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8048b5e:	2110      	movs	r1, #16
 8048b60:	3001      	adds	r0, #1
 8048b62:	f7ff fbeb 	bl	804833c <aes_set_key>
 8048b66:	4634      	mov	r4, r6
 8048b68:	1b30      	subs	r0, r6, r4
 8048b6a:	b2c0      	uxtb	r0, r0
        while( size != 0 )
 8048b6c:	b91c      	cbnz	r4, 8048b76 <SecureElementAesEncrypt+0x4a>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8048b6e:	4628      	mov	r0, r5
 8048b70:	b003      	add	sp, #12
 8048b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048b76:	eb08 0100 	add.w	r1, r8, r0
 8048b7a:	464a      	mov	r2, r9
 8048b7c:	4438      	add	r0, r7
            size = size - 16;
 8048b7e:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8048b80:	f7ff fc58 	bl	8048434 <aes_encrypt>
            size = size - 16;
 8048b84:	b2a4      	uxth	r4, r4
 8048b86:	e7ef      	b.n	8048b68 <SecureElementAesEncrypt+0x3c>
        return SECURE_ELEMENT_ERROR_NPE;
 8048b88:	2502      	movs	r5, #2
 8048b8a:	e7f0      	b.n	8048b6e <SecureElementAesEncrypt+0x42>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8048b8c:	2505      	movs	r5, #5
 8048b8e:	e7ee      	b.n	8048b6e <SecureElementAesEncrypt+0x42>
 8048b90:	2000248c 	.word	0x2000248c

08048b94 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8048b94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8048b96:	460e      	mov	r6, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048b98:	491f      	ldr	r1, [pc, #124]	; (8048c18 <SecureElementSetKey.part.2+0x84>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8048b9a:	2300      	movs	r3, #0
 8048b9c:	460d      	mov	r5, r1
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8048b9e:	011c      	lsls	r4, r3, #4
 8048ba0:	18e2      	adds	r2, r4, r3
 8048ba2:	440a      	add	r2, r1
 8048ba4:	f892 222c 	ldrb.w	r2, [r2, #556]	; 0x22c
 8048ba8:	4282      	cmp	r2, r0
 8048baa:	d12f      	bne.n	8048c0c <SecureElementSetKey.part.2+0x78>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8048bac:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8048bb0:	2809      	cmp	r0, #9
 8048bb2:	bf9e      	ittt	ls
 8048bb4:	f240 2149 	movwls	r1, #585	; 0x249
 8048bb8:	40c1      	lsrls	r1, r0
 8048bba:	43c9      	mvnls	r1, r1
 8048bbc:	441c      	add	r4, r3
 8048bbe:	f204 242d 	addw	r4, r4, #557	; 0x22d
 8048bc2:	bf94      	ite	ls
 8048bc4:	f001 0101 	andls.w	r1, r1, #1
 8048bc8:	2101      	movhi	r1, #1
 8048bca:	442c      	add	r4, r5
                uint8_t decryptedKey[16] = { 0 };
 8048bcc:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8048bce:	b9a1      	cbnz	r1, 8048bfa <SecureElementSetKey.part.2+0x66>
                uint8_t decryptedKey[16] = { 0 };
 8048bd0:	4668      	mov	r0, sp
 8048bd2:	f007 feb6 	bl	8050942 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048bd6:	466b      	mov	r3, sp
 8048bd8:	227f      	movs	r2, #127	; 0x7f
 8048bda:	2110      	movs	r1, #16
 8048bdc:	4630      	mov	r0, r6
 8048bde:	f7ff ffa5 	bl	8048b2c <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048be2:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8048be4:	4606      	mov	r6, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8048be6:	4669      	mov	r1, sp
 8048be8:	4620      	mov	r0, r4
 8048bea:	f005 fd00 	bl	804e5ee <memcpy1>
                SeNvmCtxChanged( );
 8048bee:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048bf2:	4798      	blx	r3
}
 8048bf4:	4630      	mov	r0, r6
 8048bf6:	b004      	add	sp, #16
 8048bf8:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8048bfa:	4631      	mov	r1, r6
 8048bfc:	4620      	mov	r0, r4
 8048bfe:	f005 fcf6 	bl	804e5ee <memcpy1>
                SeNvmCtxChanged( );
 8048c02:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 8048c06:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8048c08:	2600      	movs	r6, #0
 8048c0a:	e7f3      	b.n	8048bf4 <SecureElementSetKey.part.2+0x60>
 8048c0c:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8048c0e:	2b18      	cmp	r3, #24
 8048c10:	d1c5      	bne.n	8048b9e <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048c12:	2603      	movs	r6, #3
 8048c14:	e7ee      	b.n	8048bf4 <SecureElementSetKey.part.2+0x60>
 8048c16:	bf00      	nop
 8048c18:	2000246c 	.word	0x2000246c

08048c1c <SecureElementSetKey>:
    if( key == NULL )
 8048c1c:	b109      	cbz	r1, 8048c22 <SecureElementSetKey+0x6>
 8048c1e:	f7ff bfb9 	b.w	8048b94 <SecureElementSetKey.part.2>
}
 8048c22:	2002      	movs	r0, #2
 8048c24:	4770      	bx	lr

08048c26 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8048c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8048c28:	4607      	mov	r7, r0
 8048c2a:	b085      	sub	sp, #20
 8048c2c:	4614      	mov	r4, r2
 8048c2e:	461d      	mov	r5, r3
    if( input == NULL )
 8048c30:	460e      	mov	r6, r1
 8048c32:	b1d9      	cbz	r1, 8048c6c <SecureElementDeriveAndStoreKey+0x46>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8048c34:	2210      	movs	r2, #16
 8048c36:	2100      	movs	r1, #0
 8048c38:	4668      	mov	r0, sp
 8048c3a:	f007 fe82 	bl	8050942 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8048c3e:	2d7f      	cmp	r5, #127	; 0x7f
 8048c40:	d107      	bne.n	8048c52 <SecureElementDeriveAndStoreKey+0x2c>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8048c42:	b924      	cbnz	r4, 8048c4e <SecureElementDeriveAndStoreKey+0x28>
 8048c44:	f417 0f7f 	tst.w	r7, #16711680	; 0xff0000
 8048c48:	d103      	bne.n	8048c52 <SecureElementDeriveAndStoreKey+0x2c>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8048c4a:	2003      	movs	r0, #3
 8048c4c:	e00c      	b.n	8048c68 <SecureElementDeriveAndStoreKey+0x42>
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8048c4e:	2c02      	cmp	r4, #2
 8048c50:	d0fb      	beq.n	8048c4a <SecureElementDeriveAndStoreKey+0x24>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8048c52:	466b      	mov	r3, sp
 8048c54:	4622      	mov	r2, r4
 8048c56:	2110      	movs	r1, #16
 8048c58:	4630      	mov	r0, r6
 8048c5a:	f7ff ff67 	bl	8048b2c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8048c5e:	b918      	cbnz	r0, 8048c68 <SecureElementDeriveAndStoreKey+0x42>
 8048c60:	4669      	mov	r1, sp
 8048c62:	4628      	mov	r0, r5
 8048c64:	f7ff ff96 	bl	8048b94 <SecureElementSetKey.part.2>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8048c68:	b005      	add	sp, #20
 8048c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048c6c:	2002      	movs	r0, #2
 8048c6e:	e7fb      	b.n	8048c68 <SecureElementDeriveAndStoreKey+0x42>

08048c70 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8048c70:	b510      	push	{r4, lr}
    if( randomNum == NULL )
 8048c72:	4604      	mov	r4, r0
 8048c74:	b128      	cbz	r0, 8048c82 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 8048c76:	4b04      	ldr	r3, [pc, #16]	; (8048c88 <SecureElementRandomNumber+0x18>)
 8048c78:	69db      	ldr	r3, [r3, #28]
 8048c7a:	4798      	blx	r3
 8048c7c:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8048c7e:	2000      	movs	r0, #0
}
 8048c80:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048c82:	2002      	movs	r0, #2
 8048c84:	e7fc      	b.n	8048c80 <SecureElementRandomNumber+0x10>
 8048c86:	bf00      	nop
 8048c88:	08052140 	.word	0x08052140

08048c8c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8048c8c:	b510      	push	{r4, lr}
    if( devEui == NULL )
 8048c8e:	4601      	mov	r1, r0
 8048c90:	b148      	cbz	r0, 8048ca6 <SecureElementSetDevEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8048c92:	4c06      	ldr	r4, [pc, #24]	; (8048cac <SecureElementSetDevEui+0x20>)
 8048c94:	2210      	movs	r2, #16
 8048c96:	4620      	mov	r0, r4
 8048c98:	f005 fca9 	bl	804e5ee <memcpy1>
    SeNvmCtxChanged( );
 8048c9c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8048ca0:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8048ca2:	2000      	movs	r0, #0
}
 8048ca4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048ca6:	2002      	movs	r0, #2
 8048ca8:	e7fc      	b.n	8048ca4 <SecureElementSetDevEui+0x18>
 8048caa:	bf00      	nop
 8048cac:	2000246c 	.word	0x2000246c

08048cb0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8048cb0:	4800      	ldr	r0, [pc, #0]	; (8048cb4 <SecureElementGetDevEui+0x4>)
 8048cb2:	4770      	bx	lr
 8048cb4:	2000246c 	.word	0x2000246c

08048cb8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8048cb8:	b510      	push	{r4, lr}
    if( joinEui == NULL )
 8048cba:	4601      	mov	r1, r0
 8048cbc:	b148      	cbz	r0, 8048cd2 <SecureElementSetJoinEui+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 8048cbe:	4c06      	ldr	r4, [pc, #24]	; (8048cd8 <SecureElementSetJoinEui+0x20>)
 8048cc0:	2210      	movs	r2, #16
 8048cc2:	18a0      	adds	r0, r4, r2
 8048cc4:	f005 fc93 	bl	804e5ee <memcpy1>
    SeNvmCtxChanged( );
 8048cc8:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8048ccc:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8048cce:	2000      	movs	r0, #0
}
 8048cd0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8048cd2:	2002      	movs	r0, #2
 8048cd4:	e7fc      	b.n	8048cd0 <SecureElementSetJoinEui+0x18>
 8048cd6:	bf00      	nop
 8048cd8:	2000246c 	.word	0x2000246c

08048cdc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8048cdc:	4800      	ldr	r0, [pc, #0]	; (8048ce0 <SecureElementGetJoinEui+0x4>)
 8048cde:	4770      	bx	lr
 8048ce0:	2000247c 	.word	0x2000247c

08048ce4 <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8048ce4:	4b05      	ldr	r3, [pc, #20]	; (8048cfc <OnRadioRxError+0x18>)
 8048ce6:	781a      	ldrb	r2, [r3, #0]
 8048ce8:	f042 0202 	orr.w	r2, r2, #2
 8048cec:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8048cee:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048cf2:	b113      	cbz	r3, 8048cfa <OnRadioRxError+0x16>
 8048cf4:	68db      	ldr	r3, [r3, #12]
 8048cf6:	b103      	cbz	r3, 8048cfa <OnRadioRxError+0x16>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048cf8:	4718      	bx	r3
    }
}
 8048cfa:	4770      	bx	lr
 8048cfc:	20002834 	.word	0x20002834

08048d00 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048d00:	4b05      	ldr	r3, [pc, #20]	; (8048d18 <UpdateRxSlotIdleState+0x18>)
 8048d02:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048d06:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8048d0a:	2a02      	cmp	r2, #2
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8048d0c:	bf18      	it	ne
 8048d0e:	2206      	movne	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8048d10:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8048d14:	4770      	bx	lr
 8048d16:	bf00      	nop
 8048d18:	20002834 	.word	0x20002834

08048d1c <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8048d1c:	4b10      	ldr	r3, [pc, #64]	; (8048d60 <StopRetransmission+0x44>)
 8048d1e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8048d22:	0792      	lsls	r2, r2, #30
 8048d24:	d503      	bpl.n	8048d2e <StopRetransmission+0x12>
 8048d26:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 8048d2a:	2a01      	cmp	r2, #1
 8048d2c:	d909      	bls.n	8048d42 <StopRetransmission+0x26>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8048d2e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048d32:	f892 10f2 	ldrb.w	r1, [r2, #242]	; 0xf2
 8048d36:	b121      	cbz	r1, 8048d42 <StopRetransmission+0x26>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8048d38:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8048d3c:	3101      	adds	r1, #1
 8048d3e:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8048d42:	2200      	movs	r2, #0
 8048d44:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.NodeAckRequested = false;
 8048d48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.AckTimeoutRetry = false;
 8048d4c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8048d50:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8048d54:	f022 0202 	bic.w	r2, r2, #2
 8048d58:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    return true;
}
 8048d5c:	2001      	movs	r0, #1
 8048d5e:	4770      	bx	lr
 8048d60:	20002834 	.word	0x20002834

08048d64 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8048d64:	4b03      	ldr	r3, [pc, #12]	; (8048d74 <CallNvmCtxCallback+0x10>)
 8048d66:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048d6a:	b113      	cbz	r3, 8048d72 <CallNvmCtxCallback+0xe>
 8048d6c:	689b      	ldr	r3, [r3, #8]
 8048d6e:	b103      	cbz	r3, 8048d72 <CallNvmCtxCallback+0xe>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8048d70:	4718      	bx	r3
    }
}
 8048d72:	4770      	bx	lr
 8048d74:	20002834 	.word	0x20002834

08048d78 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8048d78:	2000      	movs	r0, #0
 8048d7a:	f7ff bff3 	b.w	8048d64 <CallNvmCtxCallback>

08048d7e <EventRegionNvmCtxChanged>:
}

static void EventRegionNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8048d7e:	2001      	movs	r0, #1
 8048d80:	f7ff bff0 	b.w	8048d64 <CallNvmCtxCallback>

08048d84 <EventCryptoNvmCtxChanged>:
}

static void EventCryptoNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8048d84:	2002      	movs	r0, #2
 8048d86:	f7ff bfed 	b.w	8048d64 <CallNvmCtxCallback>

08048d8a <EventSecureElementNvmCtxChanged>:
}

static void EventSecureElementNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8048d8a:	2003      	movs	r0, #3
 8048d8c:	f7ff bfea 	b.w	8048d64 <CallNvmCtxCallback>

08048d90 <EventCommandsNvmCtxChanged>:
}

static void EventCommandsNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8048d90:	2004      	movs	r0, #4
 8048d92:	f7ff bfe7 	b.w	8048d64 <CallNvmCtxCallback>

08048d96 <EventClassBNvmCtxChanged>:
}

static void EventClassBNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8048d96:	2005      	movs	r0, #5
 8048d98:	f7ff bfe4 	b.w	8048d64 <CallNvmCtxCallback>

08048d9c <EventConfirmQueueNvmCtxChanged>:
}

static void EventConfirmQueueNvmCtxChanged( void )
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8048d9c:	2006      	movs	r0, #6
 8048d9e:	f7ff bfe1 	b.w	8048d64 <CallNvmCtxCallback>
	...

08048da4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8048da4:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048da6:	4b0d      	ldr	r3, [pc, #52]	; (8048ddc <GetMaxAppPayloadWithoutFOptsLength+0x38>)
    getPhy.Datarate = datarate;
 8048da8:	f88d 0001 	strb.w	r0, [sp, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8048dac:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8048db0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8048db4:	f88d 2002 	strb.w	r2, [sp, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8048db8:	220d      	movs	r2, #13
 8048dba:	f88d 2000 	strb.w	r2, [sp]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8048dbe:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 8048dc2:	b112      	cbz	r2, 8048dca <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8048dc4:	220e      	movs	r2, #14
 8048dc6:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8048dca:	4669      	mov	r1, sp
 8048dcc:	7818      	ldrb	r0, [r3, #0]
 8048dce:	f003 fd26 	bl	804c81e <RegionGetPhyParam>
}
 8048dd2:	b2c0      	uxtb	r0, r0
 8048dd4:	b003      	add	sp, #12
 8048dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8048dda:	bf00      	nop
 8048ddc:	20002834 	.word	0x20002834

08048de0 <OnAckTimeoutTimerEvent>:
{
 8048de0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8048de2:	4c10      	ldr	r4, [pc, #64]	; (8048e24 <OnAckTimeoutTimerEvent+0x44>)
 8048de4:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 8048de8:	f005 fb12 	bl	804e410 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8048dec:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8048df0:	4623      	mov	r3, r4
 8048df2:	b112      	cbz	r2, 8048dfa <OnAckTimeoutTimerEvent+0x1a>
        MacCtx.AckTimeoutRetry = true;
 8048df4:	2201      	movs	r2, #1
 8048df6:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8048dfa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8048dfe:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8048e02:	2a02      	cmp	r2, #2
        MacCtx.MacFlags.Bits.MacDone = 1;
 8048e04:	bf02      	ittt	eq
 8048e06:	f893 2485 	ldrbeq.w	r2, [r3, #1157]	; 0x485
 8048e0a:	f042 0220 	orreq.w	r2, r2, #32
 8048e0e:	f883 2485 	strbeq.w	r2, [r3, #1157]	; 0x485
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8048e12:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8048e16:	b123      	cbz	r3, 8048e22 <OnAckTimeoutTimerEvent+0x42>
 8048e18:	68db      	ldr	r3, [r3, #12]
 8048e1a:	b113      	cbz	r3, 8048e22 <OnAckTimeoutTimerEvent+0x42>
}
 8048e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8048e20:	4718      	bx	r3
}
 8048e22:	bd10      	pop	{r4, pc}
 8048e24:	20002834 	.word	0x20002834

08048e28 <PrepareRxDoneAbort>:
{
 8048e28:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8048e2a:	4c0d      	ldr	r4, [pc, #52]	; (8048e60 <PrepareRxDoneAbort+0x38>)
	PRINTF("AbortRX\r\n");
 8048e2c:	480d      	ldr	r0, [pc, #52]	; (8048e64 <PrepareRxDoneAbort+0x3c>)
 8048e2e:	f005 fb79 	bl	804e524 <TraceSend>
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8048e32:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8048e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8048e3a:	f8c4 2344 	str.w	r2, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == true )
 8048e3e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8048e42:	b112      	cbz	r2, 8048e4a <PrepareRxDoneAbort+0x22>
        OnAckTimeoutTimerEvent( NULL );
 8048e44:	2000      	movs	r0, #0
 8048e46:	f7ff ffcb 	bl	8048de0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8048e4a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8048e4e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8048e52:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
}
 8048e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8048e5a:	f7ff bf51 	b.w	8048d00 <UpdateRxSlotIdleState>
 8048e5e:	bf00      	nop
 8048e60:	20002834 	.word	0x20002834
 8048e64:	08052694 	.word	0x08052694

08048e68 <HandleRadioRxErrorTimeout>:
{
 8048e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048e6c:	4c2a      	ldr	r4, [pc, #168]	; (8048f18 <HandleRadioRxErrorTimeout+0xb0>)
 8048e6e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048e72:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048e76:	2b02      	cmp	r3, #2
{
 8048e78:	4607      	mov	r7, r0
 8048e7a:	460e      	mov	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048e7c:	d002      	beq.n	8048e84 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8048e7e:	4b27      	ldr	r3, [pc, #156]	; (8048f1c <HandleRadioRxErrorTimeout+0xb4>)
 8048e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048e82:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8048e84:	f002 fd3e 	bl	804b904 <LoRaMacClassBIsBeaconExpected>
 8048e88:	4605      	mov	r5, r0
 8048e8a:	b128      	cbz	r0, 8048e98 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8048e8c:	2002      	movs	r0, #2
 8048e8e:	f002 fd2f 	bl	804b8f0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8048e92:	2000      	movs	r0, #0
 8048e94:	f002 fd31 	bl	804b8fa <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8048e98:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048e9c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048ea0:	2b01      	cmp	r3, #1
 8048ea2:	d117      	bne.n	8048ed4 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8048ea4:	f002 fd30 	bl	804b908 <LoRaMacClassBIsPingExpected>
 8048ea8:	4680      	mov	r8, r0
 8048eaa:	b130      	cbz	r0, 8048eba <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8048eac:	2000      	movs	r0, #0
 8048eae:	f002 fd20 	bl	804b8f2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8048eb2:	2000      	movs	r0, #0
 8048eb4:	f002 fd22 	bl	804b8fc <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8048eb8:	4645      	mov	r5, r8
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8048eba:	f002 fd27 	bl	804b90c <LoRaMacClassBIsMulticastExpected>
 8048ebe:	b148      	cbz	r0, 8048ed4 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8048ec0:	2000      	movs	r0, #0
 8048ec2:	f002 fd17 	bl	804b8f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8048ec6:	2000      	movs	r0, #0
 8048ec8:	f002 fd19 	bl	804b8fe <LoRaMacClassBMulticastSlotTimerEvent>
}
 8048ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8048ed0:	f7ff bf16 	b.w	8048d00 <UpdateRxSlotIdleState>
    if( classBRx == false )
 8048ed4:	2d00      	cmp	r5, #0
 8048ed6:	d1f9      	bne.n	8048ecc <HandleRadioRxErrorTimeout+0x64>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8048ed8:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8048edc:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8048ee0:	b932      	cbnz	r2, 8048ef0 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8048ee2:	b10b      	cbz	r3, 8048ee8 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8048ee4:	f884 7441 	strb.w	r7, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8048ee8:	4638      	mov	r0, r7
 8048eea:	f002 fecf 	bl	804bc8c <LoRaMacConfirmQueueSetStatusCmn>
 8048eee:	e7ed      	b.n	8048ecc <HandleRadioRxErrorTimeout+0x64>
            if( MacCtx.NodeAckRequested == true )
 8048ef0:	b10b      	cbz	r3, 8048ef6 <HandleRadioRxErrorTimeout+0x8e>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8048ef2:	f884 6441 	strb.w	r6, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8048ef6:	4630      	mov	r0, r6
 8048ef8:	f002 fec8 	bl	804bc8c <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8048efc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048f00:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8048f04:	2b02      	cmp	r3, #2
                MacCtx.MacFlags.Bits.MacDone = 1;
 8048f06:	bf1e      	ittt	ne
 8048f08:	f894 3485 	ldrbne.w	r3, [r4, #1157]	; 0x485
 8048f0c:	f043 0320 	orrne.w	r3, r3, #32
 8048f10:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
 8048f14:	e7da      	b.n	8048ecc <HandleRadioRxErrorTimeout+0x64>
 8048f16:	bf00      	nop
 8048f18:	20002834 	.word	0x20002834
 8048f1c:	08052140 	.word	0x08052140

08048f20 <ResetMacParameters>:
{
 8048f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8048f22:	4c30      	ldr	r4, [pc, #192]	; (8048fe4 <ResetMacParameters+0xc4>)
 8048f24:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048f28:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 8048f2a:	2601      	movs	r6, #1
    MacCtx.ChannelsNbTransCounter = 0;
 8048f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8048f30:	f883 51d4 	strb.w	r5, [r3, #468]	; 0x1d4
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8048f34:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
    MacCtx.ChannelsNbTransCounter = 0;
 8048f38:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    MacCtx.AckTimeoutRetries = 1;
 8048f3c:	f884 6416 	strb.w	r6, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetry = false;
 8048f40:	f884 5417 	strb.w	r5, [r4, #1047]	; 0x417
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8048f44:	791a      	ldrb	r2, [r3, #4]
 8048f46:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8048f4a:	795a      	ldrb	r2, [r3, #5]
 8048f4c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8048f50:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    MacCtx.NvmCtx->MaxDCycle = 0;
 8048f54:	f883 513c 	strb.w	r5, [r3, #316]	; 0x13c
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8048f58:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8048f5c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8048f60:	c903      	ldmia	r1, {r0, r1}
 8048f62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8048f66:	f8a3 61c2 	strh.w	r6, [r3, #450]	; 0x1c2
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8048f6a:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8048f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8048f72:	c903      	ldmia	r1, {r0, r1}
 8048f74:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8048f78:	e882 0003 	stmia.w	r2, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8048f7c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8048f80:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8048f84:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8048f88:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
    params.NvmCtx = NULL;
 8048f8c:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8048f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8048f90:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8048f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8048f96:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    MacCtx.NodeAckRequested = false;
 8048f9a:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    MacCtx.NvmCtx->SrvAckRequested = false;
 8048f9e:	f883 51c0 	strb.w	r5, [r3, #448]	; 0x1c0
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048fa2:	7818      	ldrb	r0, [r3, #0]
    params.NvmCtx = NULL;
 8048fa4:	f841 5d08 	str.w	r5, [r1, #-8]!
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8048fa8:	f88d 6004 	strb.w	r6, [sp, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8048fac:	f003 fc47 	bl	804c83e <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8048fb0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.Channel = 0;
 8048fb4:	f884 5419 	strb.w	r5, [r4, #1049]	; 0x419
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8048fb8:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8048fbc:	f884 53d0 	strb.w	r5, [r4, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8048fc0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8048fc4:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8048fc8:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8048fcc:	f884 23e0 	strb.w	r2, [r4, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8048fd0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8048fd4:	f884 33e1 	strb.w	r3, [r4, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8048fd8:	f884 53e2 	strb.w	r5, [r4, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8048fdc:	f884 63e3 	strb.w	r6, [r4, #995]	; 0x3e3
}
 8048fe0:	b002      	add	sp, #8
 8048fe2:	bd70      	pop	{r4, r5, r6, pc}
 8048fe4:	20002834 	.word	0x20002834

08048fe8 <OpenContinuousRxCWindow>:
{
 8048fe8:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8048fea:	4c0d      	ldr	r4, [pc, #52]	; (8049020 <OpenContinuousRxCWindow+0x38>)
 8048fec:	2302      	movs	r3, #2
 8048fee:	f884 33f7 	strb.w	r3, [r4, #1015]	; 0x3f7
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8048ff2:	2301      	movs	r3, #1
 8048ff4:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8048ff8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8048ffc:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8049000:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8049004:	7818      	ldrb	r0, [r3, #0]
 8049006:	f003 fc4c 	bl	804c8a2 <RegionRxConfig>
 804900a:	b138      	cbz	r0, 804901c <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 804900c:	4b05      	ldr	r3, [pc, #20]	; (8049024 <OpenContinuousRxCWindow+0x3c>)
 804900e:	2000      	movs	r0, #0
 8049010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049012:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8049014:	f894 33f7 	ldrb.w	r3, [r4, #1015]	; 0x3f7
 8049018:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 804901c:	bd10      	pop	{r4, pc}
 804901e:	bf00      	nop
 8049020:	20002834 	.word	0x20002834
 8049024:	08052140 	.word	0x08052140

08049028 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8049028:	4b0d      	ldr	r3, [pc, #52]	; (8049060 <OnRadioRxTimeout+0x38>)
{
 804902a:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 804902c:	781a      	ldrb	r2, [r3, #0]
 804902e:	f042 0201 	orr.w	r2, r2, #1
 8049032:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8049034:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8049038:	b113      	cbz	r3, 8049040 <OnRadioRxTimeout+0x18>
 804903a:	68db      	ldr	r3, [r3, #12]
 804903c:	b103      	cbz	r3, 8049040 <OnRadioRxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804903e:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8049040:	4668      	mov	r0, sp
 8049042:	f005 f934 	bl	804e2ae <SysTimeGetMcuTime>
 8049046:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804904a:	9900      	ldr	r1, [sp, #0]
 804904c:	4805      	ldr	r0, [pc, #20]	; (8049064 <OnRadioRxTimeout+0x3c>)
 804904e:	f005 fa69 	bl	804e524 <TraceSend>
 8049052:	4805      	ldr	r0, [pc, #20]	; (8049068 <OnRadioRxTimeout+0x40>)
}
 8049054:	b003      	add	sp, #12
 8049056:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 804905a:	f005 ba63 	b.w	804e524 <TraceSend>
 804905e:	bf00      	nop
 8049060:	20002834 	.word	0x20002834
 8049064:	0805269e 	.word	0x0805269e
 8049068:	080526a9 	.word	0x080526a9

0804906c <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 804906c:	4b0d      	ldr	r3, [pc, #52]	; (80490a4 <OnRadioTxTimeout+0x38>)
{
 804906e:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8049070:	781a      	ldrb	r2, [r3, #0]
 8049072:	f042 0204 	orr.w	r2, r2, #4
 8049076:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8049078:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 804907c:	b113      	cbz	r3, 8049084 <OnRadioTxTimeout+0x18>
 804907e:	68db      	ldr	r3, [r3, #12]
 8049080:	b103      	cbz	r3, 8049084 <OnRadioTxTimeout+0x18>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8049082:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 8049084:	4668      	mov	r0, sp
 8049086:	f005 f912 	bl	804e2ae <SysTimeGetMcuTime>
 804908a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 804908e:	9900      	ldr	r1, [sp, #0]
 8049090:	4805      	ldr	r0, [pc, #20]	; (80490a8 <OnRadioTxTimeout+0x3c>)
 8049092:	f005 fa47 	bl	804e524 <TraceSend>
 8049096:	4805      	ldr	r0, [pc, #20]	; (80490ac <OnRadioTxTimeout+0x40>)
}
 8049098:	b003      	add	sp, #12
 804909a:	f85d eb04 	ldr.w	lr, [sp], #4
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 804909e:	f005 ba41 	b.w	804e524 <TraceSend>
 80490a2:	bf00      	nop
 80490a4:	20002834 	.word	0x20002834
 80490a8:	0805269e 	.word	0x0805269e
 80490ac:	080526b9 	.word	0x080526b9

080490b0 <OnRadioRxDone>:
{
 80490b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80490b4:	4616      	mov	r6, r2
 80490b6:	461d      	mov	r5, r3
 80490b8:	4680      	mov	r8, r0
 80490ba:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80490bc:	f005 f9e1 	bl	804e482 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 80490c0:	4b0f      	ldr	r3, [pc, #60]	; (8049100 <OnRadioRxDone+0x50>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80490c2:	4c10      	ldr	r4, [pc, #64]	; (8049104 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80490c4:	781a      	ldrb	r2, [r3, #0]
    RxDoneParams.Size = size;
 80490c6:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80490c8:	f042 0208 	orr.w	r2, r2, #8
 80490cc:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80490ce:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
    RxDoneParams.Rssi = rssi;
 80490d2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Payload = payload;
 80490d4:	e9c4 0800 	strd	r0, r8, [r4]
    RxDoneParams.Snr = snr;
 80490d8:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80490da:	b113      	cbz	r3, 80490e2 <OnRadioRxDone+0x32>
 80490dc:	68db      	ldr	r3, [r3, #12]
 80490de:	b103      	cbz	r3, 80490e2 <OnRadioRxDone+0x32>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80490e0:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 80490e2:	4668      	mov	r0, sp
 80490e4:	f005 f8e3 	bl	804e2ae <SysTimeGetMcuTime>
 80490e8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80490ec:	9900      	ldr	r1, [sp, #0]
 80490ee:	4806      	ldr	r0, [pc, #24]	; (8049108 <OnRadioRxDone+0x58>)
 80490f0:	f005 fa18 	bl	804e524 <TraceSend>
 80490f4:	4805      	ldr	r0, [pc, #20]	; (804910c <OnRadioRxDone+0x5c>)
}
 80490f6:	b002      	add	sp, #8
 80490f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 80490fc:	f005 ba12 	b.w	804e524 <TraceSend>
 8049100:	20002834 	.word	0x20002834
 8049104:	20005e18 	.word	0x20005e18
 8049108:	0805269e 	.word	0x0805269e
 804910c:	080526c9 	.word	0x080526c9

08049110 <OnRadioTxDone>:
{
 8049110:	b530      	push	{r4, r5, lr}
 8049112:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8049114:	f005 f9b5 	bl	804e482 <TimerGetCurrentTime>
 8049118:	4b12      	ldr	r3, [pc, #72]	; (8049164 <OnRadioTxDone+0x54>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 804911a:	4c13      	ldr	r4, [pc, #76]	; (8049168 <OnRadioTxDone+0x58>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 804911c:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 804911e:	466d      	mov	r5, sp
 8049120:	4628      	mov	r0, r5
 8049122:	f005 f8a0 	bl	804e266 <SysTimeGet>
 8049126:	e895 0003 	ldmia.w	r5, {r0, r1}
 804912a:	f504 734f 	add.w	r3, r4, #828	; 0x33c
 804912e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8049132:	7823      	ldrb	r3, [r4, #0]
 8049134:	f043 0310 	orr.w	r3, r3, #16
 8049138:	7023      	strb	r3, [r4, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804913a:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
 804913e:	b113      	cbz	r3, 8049146 <OnRadioTxDone+0x36>
 8049140:	68db      	ldr	r3, [r3, #12]
 8049142:	b103      	cbz	r3, 8049146 <OnRadioTxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8049144:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8049146:	a802      	add	r0, sp, #8
 8049148:	f005 f8b1 	bl	804e2ae <SysTimeGetMcuTime>
 804914c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8049150:	9902      	ldr	r1, [sp, #8]
 8049152:	4806      	ldr	r0, [pc, #24]	; (804916c <OnRadioTxDone+0x5c>)
 8049154:	f005 f9e6 	bl	804e524 <TraceSend>
 8049158:	4805      	ldr	r0, [pc, #20]	; (8049170 <OnRadioTxDone+0x60>)
}
 804915a:	b005      	add	sp, #20
 804915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8049160:	f005 b9e0 	b.w	804e524 <TraceSend>
 8049164:	20005e14 	.word	0x20005e14
 8049168:	20002834 	.word	0x20002834
 804916c:	0805269e 	.word	0x0805269e
 8049170:	080526d6 	.word	0x080526d6

08049174 <SwitchClass>:
{
 8049174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8049176:	4e3d      	ldr	r6, [pc, #244]	; (804926c <SwitchClass+0xf8>)
 8049178:	f8d6 4488 	ldr.w	r4, [r6, #1160]	; 0x488
 804917c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 8049180:	2b01      	cmp	r3, #1
{
 8049182:	4607      	mov	r7, r0
 8049184:	4635      	mov	r5, r6
    switch( MacCtx.NvmCtx->DeviceClass )
 8049186:	d010      	beq.n	80491aa <SwitchClass+0x36>
 8049188:	d303      	bcc.n	8049192 <SwitchClass+0x1e>
 804918a:	2b02      	cmp	r3, #2
 804918c:	d064      	beq.n	8049258 <SwitchClass+0xe4>
 804918e:	2003      	movs	r0, #3
 8049190:	e05c      	b.n	804924c <SwitchClass+0xd8>
            if( deviceClass == CLASS_A )
 8049192:	b940      	cbnz	r0, 80491a6 <SwitchClass+0x32>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8049194:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8049198:	f504 748e 	add.w	r4, r4, #284	; 0x11c
 804919c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80491a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80491a4:	e7f3      	b.n	804918e <SwitchClass+0x1a>
            if( deviceClass == CLASS_B )
 80491a6:	2801      	cmp	r0, #1
 80491a8:	d108      	bne.n	80491bc <SwitchClass+0x48>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80491aa:	f002 fbb6 	bl	804b91a <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80491ae:	2800      	cmp	r0, #0
 80491b0:	d14c      	bne.n	804924c <SwitchClass+0xd8>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80491b2:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80491b6:	f883 70f0 	strb.w	r7, [r3, #240]	; 0xf0
 80491ba:	e047      	b.n	804924c <SwitchClass+0xd8>
            if( deviceClass == CLASS_C )
 80491bc:	2802      	cmp	r0, #2
 80491be:	d1e6      	bne.n	804918e <SwitchClass+0x1a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80491c0:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80491c4:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80491c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80491cc:	f506 7679 	add.w	r6, r6, #996	; 0x3e4
 80491d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80491d2:	f8dc 3000 	ldr.w	r3, [ip]
 80491d6:	f846 3910 	str.w	r3, [r6], #-16
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80491da:	2128      	movs	r1, #40	; 0x28
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80491dc:	f885 73f7 	strb.w	r7, [r5, #1015]	; 0x3f7
 80491e0:	2300      	movs	r3, #0
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80491e2:	fb01 4203 	mla	r2, r1, r3, r4
 80491e6:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 80491ea:	b388      	cbz	r0, 8049250 <SwitchClass+0xdc>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80491ec:	6e53      	ldr	r3, [r2, #100]	; 0x64
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80491ee:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80491f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80491f6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80491fa:	f895 2419 	ldrb.w	r2, [r5, #1049]	; 0x419
 80491fe:	f885 23e4 	strb.w	r2, [r5, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8049202:	f8c5 33e8 	str.w	r3, [r5, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049206:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 804920a:	f885 33f4 	strb.w	r3, [r5, #1012]	; 0x3f4
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 804920e:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8049212:	f885 33f5 	strb.w	r3, [r5, #1013]	; 0x3f5
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8049216:	2303      	movs	r3, #3
 8049218:	f885 33f7 	strb.w	r3, [r5, #1015]	; 0x3f7
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 804921c:	2301      	movs	r3, #1
 804921e:	f885 33f6 	strb.w	r3, [r5, #1014]	; 0x3f6
                Radio.Sleep( );
 8049222:	4b13      	ldr	r3, [pc, #76]	; (8049270 <SwitchClass+0xfc>)
                MacCtx.NodeAckRequested = false;
 8049224:	2400      	movs	r4, #0
                Radio.Sleep( );
 8049226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                MacCtx.NodeAckRequested = false;
 8049228:	f885 4418 	strb.w	r4, [r5, #1048]	; 0x418
                Radio.Sleep( );
 804922c:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804922e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 8049232:	7818      	ldrb	r0, [r3, #0]
 8049234:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049238:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 804923c:	9600      	str	r6, [sp, #0]
 804923e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049242:	f003 fb1f 	bl	804c884 <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8049246:	f7ff fecf 	bl	8048fe8 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 804924a:	4620      	mov	r0, r4
}
 804924c:	b003      	add	sp, #12
 804924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8049250:	3301      	adds	r3, #1
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8049252:	2b04      	cmp	r3, #4
 8049254:	d1c5      	bne.n	80491e2 <SwitchClass+0x6e>
 8049256:	e7e4      	b.n	8049222 <SwitchClass+0xae>
            if( deviceClass == CLASS_A )
 8049258:	2800      	cmp	r0, #0
 804925a:	d198      	bne.n	804918e <SwitchClass+0x1a>
                Radio.Sleep( );
 804925c:	4b04      	ldr	r3, [pc, #16]	; (8049270 <SwitchClass+0xfc>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 804925e:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
                Radio.Sleep( );
 8049262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049264:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8049266:	4638      	mov	r0, r7
 8049268:	e7f0      	b.n	804924c <SwitchClass+0xd8>
 804926a:	bf00      	nop
 804926c:	20002834 	.word	0x20002834
 8049270:	08052140 	.word	0x08052140

08049274 <RxWindowSetup.constprop.6>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8049274:	b570      	push	{r4, r5, r6, lr}
    Radio.Standby( );
 8049276:	4e0d      	ldr	r6, [pc, #52]	; (80492ac <RxWindowSetup.constprop.6+0x38>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8049278:	4c0d      	ldr	r4, [pc, #52]	; (80492b0 <RxWindowSetup.constprop.6+0x3c>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 804927a:	460d      	mov	r5, r1
    TimerStop( rxTimer );
 804927c:	f005 f8c8 	bl	804e410 <TimerStop>
    Radio.Standby( );
 8049280:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8049282:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8049284:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049288:	f204 4224 	addw	r2, r4, #1060	; 0x424
 804928c:	4629      	mov	r1, r5
 804928e:	7818      	ldrb	r0, [r3, #0]
 8049290:	f003 fb07 	bl	804c8a2 <RegionRxConfig>
 8049294:	b140      	cbz	r0, 80492a8 <RxWindowSetup.constprop.6+0x34>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8049296:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804929a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 804929c:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 80492a0:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80492a2:	7ceb      	ldrb	r3, [r5, #19]
 80492a4:	f884 3484 	strb.w	r3, [r4, #1156]	; 0x484
}
 80492a8:	bd70      	pop	{r4, r5, r6, pc}
 80492aa:	bf00      	nop
 80492ac:	08052140 	.word	0x08052140
 80492b0:	20002834 	.word	0x20002834

080492b4 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80492b4:	480e      	ldr	r0, [pc, #56]	; (80492f0 <OnRxWindow1TimerEvent+0x3c>)
 80492b6:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 80492ba:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80492be:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 80492c2:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80492c6:	f880 23bf 	strb.w	r2, [r0, #959]	; 0x3bf
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80492ca:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80492ce:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80492d2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80492d6:	f880 33cd 	strb.w	r3, [r0, #973]	; 0x3cd
    MacCtx.RxWindow1Config.RxContinuous = false;
 80492da:	2300      	movs	r3, #0
 80492dc:	f880 33ce 	strb.w	r3, [r0, #974]	; 0x3ce
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80492e0:	f880 33cf 	strb.w	r3, [r0, #975]	; 0x3cf
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80492e4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80492e8:	f500 7061 	add.w	r0, r0, #900	; 0x384
 80492ec:	f7ff bfc2 	b.w	8049274 <RxWindowSetup.constprop.6>
 80492f0:	20002834 	.word	0x20002834

080492f4 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80492f4:	4811      	ldr	r0, [pc, #68]	; (804933c <OnRxWindow2TimerEvent+0x48>)
 80492f6:	f890 3484 	ldrb.w	r3, [r0, #1156]	; 0x484
 80492fa:	b1eb      	cbz	r3, 8049338 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80492fc:	f890 3419 	ldrb.w	r3, [r0, #1049]	; 0x419
 8049300:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8049304:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
 8049308:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 804930c:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8049310:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8049314:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8049318:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 804931c:	f880 33e1 	strb.w	r3, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8049320:	2300      	movs	r3, #0
 8049322:	f880 33e2 	strb.w	r3, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8049326:	2301      	movs	r3, #1
 8049328:	f880 33e3 	strb.w	r3, [r0, #995]	; 0x3e3
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 804932c:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8049330:	f500 7067 	add.w	r0, r0, #924	; 0x39c
 8049334:	f7ff bf9e 	b.w	8049274 <RxWindowSetup.constprop.6>
}
 8049338:	4770      	bx	lr
 804933a:	bf00      	nop
 804933c:	20002834 	.word	0x20002834

08049340 <ProcessMacCommands.isra.1.constprop.7>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8049340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049344:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8049346:	2700      	movs	r7, #0
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8049348:	4ec4      	ldr	r6, [pc, #784]	; (804965c <ProcessMacCommands.isra.1.constprop.7+0x31c>)
    uint8_t status = 0;
 804934a:	f88d 7015 	strb.w	r7, [sp, #21]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 804934e:	4605      	mov	r5, r0
 8049350:	468a      	mov	sl, r1
 8049352:	4693      	mov	fp, r2
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8049354:	f8ad 7018 	strh.w	r7, [sp, #24]
 8049358:	46b8      	mov	r8, r7
    while( macIndex < commandsSize )
 804935a:	45d0      	cmp	r8, sl
 804935c:	d302      	bcc.n	8049364 <ProcessMacCommands.isra.1.constprop.7+0x24>
}
 804935e:	b011      	add	sp, #68	; 0x44
 8049360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch( payload[macIndex++] )
 8049364:	f815 3008 	ldrb.w	r3, [r5, r8]
 8049368:	f108 0401 	add.w	r4, r8, #1
 804936c:	3b02      	subs	r3, #2
 804936e:	b2e4      	uxtb	r4, r4
 8049370:	2b11      	cmp	r3, #17
 8049372:	d8f4      	bhi.n	804935e <ProcessMacCommands.isra.1.constprop.7+0x1e>
 8049374:	a201      	add	r2, pc, #4	; (adr r2, 804937c <ProcessMacCommands.isra.1.constprop.7+0x3c>)
 8049376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804937a:	bf00      	nop
 804937c:	080493c5 	.word	0x080493c5
 8049380:	080493f5 	.word	0x080493f5
 8049384:	080494bb 	.word	0x080494bb
 8049388:	080494e7 	.word	0x080494e7
 804938c:	08049585 	.word	0x08049585
 8049390:	080495ad 	.word	0x080495ad
 8049394:	08049619 	.word	0x08049619
 8049398:	08049661 	.word	0x08049661
 804939c:	080496f9 	.word	0x080496f9
 80493a0:	0804935f 	.word	0x0804935f
 80493a4:	0804935f 	.word	0x0804935f
 80493a8:	08049751 	.word	0x08049751
 80493ac:	0804935f 	.word	0x0804935f
 80493b0:	0804935f 	.word	0x0804935f
 80493b4:	080497f3 	.word	0x080497f3
 80493b8:	08049805 	.word	0x08049805
 80493bc:	08049849 	.word	0x08049849
 80493c0:	08049873 	.word	0x08049873
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80493c4:	2003      	movs	r0, #3
 80493c6:	f002 fc79 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 80493ca:	b188      	cbz	r0, 80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80493cc:	2103      	movs	r1, #3
 80493ce:	2000      	movs	r0, #0
 80493d0:	f002 fc28 	bl	804bc24 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80493d4:	5d2b      	ldrb	r3, [r5, r4]
 80493d6:	f886 345c 	strb.w	r3, [r6, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80493da:	f108 0403 	add.w	r4, r8, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80493de:	f108 0802 	add.w	r8, r8, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80493e2:	fa5f f888 	uxtb.w	r8, r8
 80493e6:	b2e4      	uxtb	r4, r4
 80493e8:	f815 3008 	ldrb.w	r3, [r5, r8]
 80493ec:	f886 345d 	strb.w	r3, [r6, #1117]	; 0x45d
                uint8_t eirpDwellTime = payload[macIndex++];
 80493f0:	46a0      	mov	r8, r4
 80493f2:	e7b2      	b.n	804935a <ProcessMacCommands.isra.1.constprop.7+0x1a>
                int8_t linkAdrDatarate = DR_0;
 80493f4:	2300      	movs	r3, #0
 80493f6:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 80493fa:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 80493fe:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8049402:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8049406:	2f00      	cmp	r7, #0
 8049408:	d14e      	bne.n	80494a8 <ProcessMacCommands.isra.1.constprop.7+0x168>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 804940a:	1e63      	subs	r3, r4, #1
 804940c:	442b      	add	r3, r5
 804940e:	930d      	str	r3, [sp, #52]	; 0x34
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8049410:	f10a 0301 	add.w	r3, sl, #1
 8049414:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8049416:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 804941a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804941e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8049422:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049426:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804942a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804942e:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8049432:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8049436:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 804943a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804943e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8049442:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8049446:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804944a:	7818      	ldrb	r0, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 804944c:	920c      	str	r2, [sp, #48]	; 0x30
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 804944e:	ab08      	add	r3, sp, #32
 8049450:	9301      	str	r3, [sp, #4]
 8049452:	ab07      	add	r3, sp, #28
 8049454:	9300      	str	r3, [sp, #0]
 8049456:	f10d 0216 	add.w	r2, sp, #22
 804945a:	f10d 0317 	add.w	r3, sp, #23
 804945e:	a90c      	add	r1, sp, #48	; 0x30
 8049460:	f003 fa37 	bl	804c8d2 <RegionLinkAdrReq>
 8049464:	f88d 0015 	strb.w	r0, [sp, #21]
                    if( ( status & 0x07 ) == 0x07 )
 8049468:	f000 0007 	and.w	r0, r0, #7
 804946c:	2807      	cmp	r0, #7
 804946e:	d10d      	bne.n	804948c <ProcessMacCommands.isra.1.constprop.7+0x14c>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8049470:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049474:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8049478:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 804947c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8049480:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8049484:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8049488:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 804948c:	2700      	movs	r7, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 804948e:	f04f 0905 	mov.w	r9, #5
 8049492:	b2fb      	uxtb	r3, r7
 8049494:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8049498:	fbb4 f2f9 	udiv	r2, r4, r9
 804949c:	4293      	cmp	r3, r2
 804949e:	f107 0701 	add.w	r7, r7, #1
 80494a2:	d303      	bcc.n	80494ac <ProcessMacCommands.isra.1.constprop.7+0x16c>
                    macIndex += linkAdrNbBytesParsed - 1;
 80494a4:	4444      	add	r4, r8
 80494a6:	b2e4      	uxtb	r4, r4
 80494a8:	2701      	movs	r7, #1
 80494aa:	e7a1      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80494ac:	2201      	movs	r2, #1
 80494ae:	f10d 0115 	add.w	r1, sp, #21
 80494b2:	2003      	movs	r0, #3
 80494b4:	f002 fa6e 	bl	804b994 <LoRaMacCommandsAddCmd>
 80494b8:	e7eb      	b.n	8049492 <ProcessMacCommands.isra.1.constprop.7+0x152>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80494ba:	5d2b      	ldrb	r3, [r5, r4]
 80494bc:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
 80494c0:	f003 030f 	and.w	r3, r3, #15
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80494c4:	2201      	movs	r2, #1
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80494c6:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
 80494ca:	f108 0802 	add.w	r8, r8, #2
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80494ce:	fa02 f303 	lsl.w	r3, r2, r3
 80494d2:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80494d6:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80494da:	2200      	movs	r2, #0
 80494dc:	a906      	add	r1, sp, #24
 80494de:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80494e0:	f002 fa58 	bl	804b994 <LoRaMacCommandsAddCmd>
 80494e4:	e0b7      	b.n	8049656 <ProcessMacCommands.isra.1.constprop.7+0x316>
                status = 0x07;
 80494e6:	2307      	movs	r3, #7
 80494e8:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80494ec:	5d2b      	ldrb	r3, [r5, r4]
 80494ee:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80494f2:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80494f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80494fa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80494fe:	f108 0204 	add.w	r2, r8, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8049502:	f108 0303 	add.w	r3, r8, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049506:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049508:	b2d2      	uxtb	r2, r2
 804950a:	f108 0405 	add.w	r4, r8, #5
                macIndex++;
 804950e:	f108 0802 	add.w	r8, r8, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049512:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049514:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8049516:	fa5f f888 	uxtb.w	r8, r8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804951a:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 804951c:	f815 2008 	ldrb.w	r2, [r5, r8]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049520:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8049524:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8049526:	2264      	movs	r2, #100	; 0x64
 8049528:	4353      	muls	r3, r2
 804952a:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 804952c:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049530:	a90c      	add	r1, sp, #48	; 0x30
 8049532:	7818      	ldrb	r0, [r3, #0]
 8049534:	f003 f9dd 	bl	804c8f2 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8049538:	f000 0307 	and.w	r3, r0, #7
 804953c:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804953e:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8049540:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8049544:	d110      	bne.n	8049568 <ProcessMacCommands.isra.1.constprop.7+0x228>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8049546:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 804954a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 804954e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8049552:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8049556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8049558:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 804955c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8049560:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8049564:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                macCmdPayload[0] = status;
 8049568:	a910      	add	r1, sp, #64	; 0x40
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 804956a:	2201      	movs	r2, #1
                macCmdPayload[0] = status;
 804956c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8049570:	2005      	movs	r0, #5
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8049572:	f002 fa0f 	bl	804b994 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049576:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
 804957a:	f043 0310 	orr.w	r3, r3, #16
 804957e:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
 8049582:	e735      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8049584:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 8049588:	b173      	cbz	r3, 80495a8 <ProcessMacCommands.isra.1.constprop.7+0x268>
 804958a:	681b      	ldr	r3, [r3, #0]
 804958c:	b163      	cbz	r3, 80495a8 <ProcessMacCommands.isra.1.constprop.7+0x268>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 804958e:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8049590:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
 8049594:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8049598:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 804959c:	2202      	movs	r2, #2
 804959e:	a906      	add	r1, sp, #24
 80495a0:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80495a2:	f002 f9f7 	bl	804b994 <LoRaMacCommandsAddCmd>
 80495a6:	e723      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80495a8:	20ff      	movs	r0, #255	; 0xff
 80495aa:	e7f1      	b.n	8049590 <ProcessMacCommands.isra.1.constprop.7+0x250>
                status = 0x03;
 80495ac:	2303      	movs	r3, #3
 80495ae:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 80495b2:	5d2b      	ldrb	r3, [r5, r4]
 80495b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 80495b8:	ab0c      	add	r3, sp, #48	; 0x30
 80495ba:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80495bc:	f108 0204 	add.w	r2, r8, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80495c0:	f108 0303 	add.w	r3, r8, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80495c4:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80495c6:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80495c8:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80495ca:	5cab      	ldrb	r3, [r5, r2]
                newChannelReq.ChannelId = payload[macIndex++];
 80495cc:	f108 0202 	add.w	r2, r8, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80495d0:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80495d2:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80495d4:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80495d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80495da:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80495dc:	f108 0406 	add.w	r4, r8, #6
                chParam.Frequency *= 100;
 80495e0:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80495e2:	f108 0805 	add.w	r8, r8, #5
                chParam.Frequency *= 100;
 80495e6:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80495e8:	fa5f f888 	uxtb.w	r8, r8
                chParam.Frequency *= 100;
 80495ec:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 80495ee:	2300      	movs	r3, #0
 80495f0:	930d      	str	r3, [sp, #52]	; 0x34
                chParam.DrRange.Value = payload[macIndex++];
 80495f2:	f815 3008 	ldrb.w	r3, [r5, r8]
 80495f6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80495fa:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80495fe:	a908      	add	r1, sp, #32
 8049600:	7818      	ldrb	r0, [r3, #0]
 8049602:	f003 f97d 	bl	804c900 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8049606:	a910      	add	r1, sp, #64	; 0x40
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8049608:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 804960c:	f801 0d28 	strb.w	r0, [r1, #-40]!
                chParam.DrRange.Value = payload[macIndex++];
 8049610:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8049612:	2201      	movs	r2, #1
 8049614:	2007      	movs	r0, #7
 8049616:	e7c4      	b.n	80495a2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049618:	5d2b      	ldrb	r3, [r5, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 804961a:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
                    delay++;
 804961e:	f013 020f 	ands.w	r2, r3, #15
 8049622:	bf08      	it	eq
 8049624:	2201      	moveq	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8049626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804962a:	4353      	muls	r3, r2
 804962c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8049630:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8049634:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8049638:	2200      	movs	r2, #0
 804963a:	a906      	add	r1, sp, #24
 804963c:	2008      	movs	r0, #8
 804963e:	f002 f9a9 	bl	804b994 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049642:	f896 3485 	ldrb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049646:	f108 0802 	add.w	r8, r8, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804964a:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 804964e:	fa5f f888 	uxtb.w	r8, r8
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8049652:	f886 3485 	strb.w	r3, [r6, #1157]	; 0x485
                uint8_t delay = payload[macIndex++] & 0x0F;
 8049656:	4644      	mov	r4, r8
 8049658:	e6ca      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
 804965a:	bf00      	nop
 804965c:	20002834 	.word	0x20002834
                uint8_t eirpDwellTime = payload[macIndex++];
 8049660:	5d2b      	ldrb	r3, [r5, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8049662:	2200      	movs	r2, #0
 8049664:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8049668:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 804966c:	bf18      	it	ne
 804966e:	2201      	movne	r2, #1
 8049670:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8049674:	06da      	lsls	r2, r3, #27
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8049676:	f003 030f 	and.w	r3, r3, #15
                    txParamSetupReq.UplinkDwellTime = 1;
 804967a:	bf48      	it	mi
 804967c:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 804967e:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8049682:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    txParamSetupReq.UplinkDwellTime = 1;
 8049686:	bf48      	it	mi
 8049688:	f88d 201c 	strbmi.w	r2, [sp, #28]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 804968c:	a907      	add	r1, sp, #28
 804968e:	7818      	ldrb	r0, [r3, #0]
 8049690:	f003 f93d 	bl	804c90e <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8049694:	f108 0802 	add.w	r8, r8, #2
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8049698:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 804969a:	fa5f f888 	uxtb.w	r8, r8
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 804969e:	d0da      	beq.n	8049656 <ProcessMacCommands.isra.1.constprop.7+0x316>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80496a0:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 80496a4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80496a8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80496ac:	f89d 101d 	ldrb.w	r1, [sp, #29]
 80496b0:	f883 112d 	strb.w	r1, [r3, #301]	; 0x12d
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80496b4:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80496b8:	487e      	ldr	r0, [pc, #504]	; (80498b4 <ProcessMacCommands.isra.1.constprop.7+0x574>)
 80496ba:	5c41      	ldrb	r1, [r0, r1]
 80496bc:	ee07 1a90 	vmov	s15, r1
 80496c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80496c4:	2102      	movs	r1, #2
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80496c6:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80496ca:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80496ce:	f88d 1020 	strb.w	r1, [sp, #32]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80496d2:	7818      	ldrb	r0, [r3, #0]
 80496d4:	a908      	add	r1, sp, #32
 80496d6:	f003 f8a2 	bl	804c81e <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80496da:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80496de:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80496e0:	f993 20f9 	ldrsb.w	r2, [r3, #249]	; 0xf9
 80496e4:	b240      	sxtb	r0, r0
 80496e6:	4290      	cmp	r0, r2
 80496e8:	bfb8      	it	lt
 80496ea:	4610      	movlt	r0, r2
 80496ec:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80496f0:	2200      	movs	r2, #0
 80496f2:	a906      	add	r1, sp, #24
 80496f4:	2009      	movs	r0, #9
 80496f6:	e6f3      	b.n	80494e0 <ProcessMacCommands.isra.1.constprop.7+0x1a0>
                status = 0x03;
 80496f8:	2303      	movs	r3, #3
 80496fa:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 80496fe:	5d2b      	ldrb	r3, [r5, r4]
 8049700:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049704:	f108 0204 	add.w	r2, r8, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8049708:	f108 0303 	add.w	r3, r8, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804970c:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804970e:	b2d2      	uxtb	r2, r2
 8049710:	f108 0405 	add.w	r4, r8, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8049714:	f108 0802 	add.w	r8, r8, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8049718:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804971a:	5cab      	ldrb	r3, [r5, r2]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 804971c:	fa5f f888 	uxtb.w	r8, r8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049720:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8049722:	f815 2008 	ldrb.w	r2, [r5, r8]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049726:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804972a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 804972c:	2264      	movs	r2, #100	; 0x64
 804972e:	4353      	muls	r3, r2
 8049730:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8049732:	f8d6 3488 	ldr.w	r3, [r6, #1160]	; 0x488
 8049736:	a90c      	add	r1, sp, #48	; 0x30
 8049738:	7818      	ldrb	r0, [r3, #0]
 804973a:	f003 f8ef 	bl	804c91c <RegionDlChannelReq>
                macCmdPayload[0] = status;
 804973e:	a910      	add	r1, sp, #64	; 0x40
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8049740:	f88d 0015 	strb.w	r0, [sp, #21]
                macCmdPayload[0] = status;
 8049744:	f801 0d28 	strb.w	r0, [r1, #-40]!
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8049748:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 804974a:	2201      	movs	r2, #1
 804974c:	200a      	movs	r0, #10
 804974e:	e710      	b.n	8049572 <ProcessMacCommands.isra.1.constprop.7+0x232>
                SysTime_t sysTime = { 0 };
 8049750:	2300      	movs	r3, #0
 8049752:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8049756:	f108 0203 	add.w	r2, r8, #3
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 804975a:	f108 0302 	add.w	r3, r8, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 804975e:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049760:	b2d2      	uxtb	r2, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8049762:	5ce9      	ldrb	r1, [r5, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049764:	5cab      	ldrb	r3, [r5, r2]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8049766:	5d2a      	ldrb	r2, [r5, r4]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8049768:	041b      	lsls	r3, r3, #16
 804976a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804976e:	4313      	orrs	r3, r2
 8049770:	f108 0204 	add.w	r2, r8, #4
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8049774:	f108 0406 	add.w	r4, r8, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049778:	b2d2      	uxtb	r2, r2
 804977a:	f108 0805 	add.w	r8, r8, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 804977e:	fa5f f888 	uxtb.w	r8, r8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049782:	5caa      	ldrb	r2, [r5, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8049784:	f815 1008 	ldrb.w	r1, [r5, r8]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8049788:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 804978c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8049790:	434a      	muls	r2, r1
                sysTimeCurrent = SysTimeGet( );
 8049792:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8049796:	1212      	asrs	r2, r2, #8
                sysTimeCurrent = SysTimeGet( );
 8049798:	4648      	mov	r0, r9
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 804979a:	9303      	str	r3, [sp, #12]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 804979c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                sysTimeCurrent = SysTimeGet( );
 80497a0:	f004 fd61 	bl	804e266 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80497a4:	9b03      	ldr	r3, [sp, #12]
 80497a6:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 80497aa:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 80497ae:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80497b2:	9308      	str	r3, [sp, #32]
 80497b4:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 80497b8:	9300      	str	r3, [sp, #0]
 80497ba:	f10d 0820 	add.w	r8, sp, #32
 80497be:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 80497c2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80497c6:	a80a      	add	r0, sp, #40	; 0x28
 80497c8:	f004 fd10 	bl	804e1ec <SysTimeSub>
 80497cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80497ce:	9300      	str	r3, [sp, #0]
 80497d0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80497d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80497d6:	4640      	mov	r0, r8
 80497d8:	f004 fcec 	bl	804e1b4 <SysTimeAdd>
                SysTimeSet( sysTime );
 80497dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80497e0:	f004 fd20 	bl	804e224 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 80497e4:	f002 f8a3 	bl	804b92e <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80497e8:	2301      	movs	r3, #1
                gpsEpochTime.SubSeconds = payload[macIndex++];
 80497ea:	b2e4      	uxtb	r4, r4
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80497ec:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 80497f0:	e5fe      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80497f2:	f896 3484 	ldrb.w	r3, [r6, #1156]	; 0x484
 80497f6:	3b04      	subs	r3, #4
 80497f8:	2b01      	cmp	r3, #1
 80497fa:	f67f adf9 	bls.w	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    LoRaMacClassBPingSlotInfoAns( );
 80497fe:	f002 f892 	bl	804b926 <LoRaMacClassBPingSlotInfoAns>
 8049802:	e5f5      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                frequency = ( uint32_t )payload[macIndex++];
 8049804:	f108 0202 	add.w	r2, r8, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049808:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 804980a:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 804980c:	5ca8      	ldrb	r0, [r5, r2]
 804980e:	f108 0203 	add.w	r2, r8, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049812:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8049814:	f108 0405 	add.w	r4, r8, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049818:	5cab      	ldrb	r3, [r5, r2]
 804981a:	f108 0804 	add.w	r8, r8, #4
                datarate = payload[macIndex++] & 0x0F;
 804981e:	fa5f f888 	uxtb.w	r8, r8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049822:	041b      	lsls	r3, r3, #16
 8049824:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8049828:	f815 0008 	ldrb.w	r0, [r5, r8]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 804982c:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 804982e:	2164      	movs	r1, #100	; 0x64
 8049830:	4359      	muls	r1, r3
 8049832:	f000 000f 	and.w	r0, r0, #15
 8049836:	f002 f877 	bl	804b928 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 804983a:	a910      	add	r1, sp, #64	; 0x40
                datarate = payload[macIndex++] & 0x0F;
 804983c:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 804983e:	f801 0d28 	strb.w	r0, [r1, #-40]!
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8049842:	2201      	movs	r2, #1
 8049844:	2011      	movs	r0, #17
 8049846:	e6ac      	b.n	80495a2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8049848:	f108 0302 	add.w	r3, r8, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 804984c:	b2db      	uxtb	r3, r3
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 804984e:	4a1a      	ldr	r2, [pc, #104]	; (80498b8 <ProcessMacCommands.isra.1.constprop.7+0x578>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8049850:	5ce8      	ldrb	r0, [r5, r3]
 8049852:	5d2b      	ldrb	r3, [r5, r4]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049854:	6812      	ldr	r2, [r2, #0]
                beaconTimingChannel = payload[macIndex++];
 8049856:	f108 0404 	add.w	r4, r8, #4
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 804985a:	f108 0803 	add.w	r8, r8, #3
                beaconTimingChannel = payload[macIndex++];
 804985e:	fa5f f888 	uxtb.w	r8, r8
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8049862:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8049866:	f815 1008 	ldrb.w	r1, [r5, r8]
                beaconTimingChannel = payload[macIndex++];
 804986a:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 804986c:	f002 f85e 	bl	804b92c <LoRaMacClassBBeaconTimingAns>
 8049870:	e5be      	b.n	80493f0 <ProcessMacCommands.isra.1.constprop.7+0xb0>
                    frequency = ( uint32_t )payload[macIndex++];
 8049872:	5d28      	ldrb	r0, [r5, r4]
 8049874:	f108 0302 	add.w	r3, r8, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049878:	f108 0404 	add.w	r4, r8, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 804987c:	f108 0803 	add.w	r8, r8, #3
 8049880:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049882:	fa5f f888 	uxtb.w	r8, r8
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8049886:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049888:	f815 3008 	ldrb.w	r3, [r5, r8]
 804988c:	041b      	lsls	r3, r3, #16
 804988e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8049892:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8049894:	2064      	movs	r0, #100	; 0x64
 8049896:	4358      	muls	r0, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8049898:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 804989a:	f002 f849 	bl	804b930 <LoRaMacClassBBeaconFreqReq>
 804989e:	b130      	cbz	r0, 80498ae <ProcessMacCommands.isra.1.constprop.7+0x56e>
                        macCmdPayload[0] = 1;
 80498a0:	2301      	movs	r3, #1
 80498a2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80498a6:	2201      	movs	r2, #1
 80498a8:	a906      	add	r1, sp, #24
 80498aa:	2013      	movs	r0, #19
 80498ac:	e679      	b.n	80495a2 <ProcessMacCommands.isra.1.constprop.7+0x262>
                        macCmdPayload[0] = 0;
 80498ae:	f88d 0018 	strb.w	r0, [sp, #24]
 80498b2:	e7f8      	b.n	80498a6 <ProcessMacCommands.isra.1.constprop.7+0x566>
 80498b4:	080524e8 	.word	0x080524e8
 80498b8:	20005e18 	.word	0x20005e18

080498bc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80498bc:	4b06      	ldr	r3, [pc, #24]	; (80498d8 <LoRaMacIsBusy+0x1c>)
 80498be:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 80498c2:	b932      	cbnz	r2, 80498d2 <LoRaMacIsBusy+0x16>
 80498c4:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 80498c8:	f110 30ff 	adds.w	r0, r0, #4294967295
 80498cc:	bf18      	it	ne
 80498ce:	2001      	movne	r0, #1
 80498d0:	4770      	bx	lr
    return true;
 80498d2:	2001      	movs	r0, #1
}
 80498d4:	4770      	bx	lr
 80498d6:	bf00      	nop
 80498d8:	20002834 	.word	0x20002834

080498dc <PrepareFrame>:
{
 80498dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80498e0:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    MacCtx.PktBufferLen = 0;
 80498e4:	4e58      	ldr	r6, [pc, #352]	; (8049a48 <PrepareFrame+0x16c>)
 80498e6:	2500      	movs	r5, #0
        fBufferSize = 0;
 80498e8:	42ab      	cmp	r3, r5
 80498ea:	bf08      	it	eq
 80498ec:	46ab      	moveq	fp, r5
 80498ee:	469a      	mov	sl, r3
{
 80498f0:	4680      	mov	r8, r0
    PRINTF("PREPARE FRAME\r\n");
 80498f2:	4856      	ldr	r0, [pc, #344]	; (8049a4c <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 80498f4:	80b5      	strh	r5, [r6, #4]
{
 80498f6:	460f      	mov	r7, r1
 80498f8:	4691      	mov	r9, r2
    MacCtx.NodeAckRequested = false;
 80498fa:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    size_t macCmdsSize = 0;
 80498fe:	e9cd 5500 	strd	r5, r5, [sp]
    PRINTF("PREPARE FRAME\r\n");
 8049902:	f004 fe0f 	bl	804e524 <TraceSend>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8049906:	465a      	mov	r2, fp
 8049908:	4651      	mov	r1, sl
 804990a:	f506 709e 	add.w	r0, r6, #316	; 0x13c
 804990e:	f004 fe6e 	bl	804e5ee <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8049912:	fa5f f28b 	uxtb.w	r2, fp
 8049916:	f886 223b 	strb.w	r2, [r6, #571]	; 0x23b
    MacCtx.PktBuffer[0] = macHdr->Value;
 804991a:	f898 3000 	ldrb.w	r3, [r8]
 804991e:	71b3      	strb	r3, [r6, #6]
    switch( macHdr->Bits.MType )
 8049920:	f898 1000 	ldrb.w	r1, [r8]
 8049924:	0949      	lsrs	r1, r1, #5
 8049926:	2904      	cmp	r1, #4
 8049928:	4634      	mov	r4, r6
 804992a:	d037      	beq.n	804999c <PrepareFrame+0xc0>
 804992c:	2907      	cmp	r1, #7
 804992e:	d079      	beq.n	8049a24 <PrepareFrame+0x148>
 8049930:	2902      	cmp	r1, #2
 8049932:	f040 8085 	bne.w	8049a40 <PrepareFrame+0x164>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8049936:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049938:	4d45      	ldr	r5, [pc, #276]	; (8049a50 <PrepareFrame+0x174>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 804993a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804993e:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8049940:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049944:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8049948:	f898 3000 	ldrb.w	r3, [r8]
 804994c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049950:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8049954:	f884 912c 	strb.w	r9, [r4, #300]	; 0x12c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8049958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804995a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 804995e:	783b      	ldrb	r3, [r7, #0]
 8049960:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049964:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8049966:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 804996a:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 804996e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049972:	f002 fb8f 	bl	804c094 <LoRaMacCryptoGetFCntUp>
 8049976:	2800      	cmp	r0, #0
 8049978:	d164      	bne.n	8049a44 <PrepareFrame+0x168>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 804997a:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.NbRetries = 0;
 804997c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 8049980:	f884 0444 	strb.w	r0, [r4, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8049984:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8049986:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 804998a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804998e:	f002 f8af 	bl	804baf0 <LoRaMacCommandsGetSizeSerializedCmds>
 8049992:	b138      	cbz	r0, 80499a4 <PrepareFrame+0xc8>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049994:	2013      	movs	r0, #19
}
 8049996:	b003      	add	sp, #12
 8049998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.NodeAckRequested = true;
 804999c:	2301      	movs	r3, #1
 804999e:	f886 3418 	strb.w	r3, [r6, #1048]	; 0x418
 80499a2:	e7c8      	b.n	8049936 <PrepareFrame+0x5a>
            if( macCmdsSize > 0 )
 80499a4:	9b01      	ldr	r3, [sp, #4]
 80499a6:	b90b      	cbnz	r3, 80499ac <PrepareFrame+0xd0>
    return LORAMAC_STATUS_OK;
 80499a8:	2000      	movs	r0, #0
 80499aa:	e7f4      	b.n	8049996 <PrepareFrame+0xba>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80499ac:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 80499b0:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
 80499b4:	f7ff f9f6 	bl	8048da4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80499b8:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 80499bc:	b1eb      	cbz	r3, 80499fa <PrepareFrame+0x11e>
 80499be:	9b01      	ldr	r3, [sp, #4]
 80499c0:	2b0f      	cmp	r3, #15
 80499c2:	d80f      	bhi.n	80499e4 <PrepareFrame+0x108>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80499c4:	f505 728b 	add.w	r2, r5, #278	; 0x116
 80499c8:	a901      	add	r1, sp, #4
 80499ca:	200f      	movs	r0, #15
 80499cc:	f002 f89c 	bl	804bb08 <LoRaMacCommandsSerializeCmds>
 80499d0:	2800      	cmp	r0, #0
 80499d2:	d1df      	bne.n	8049994 <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80499d4:	783b      	ldrb	r3, [r7, #0]
 80499d6:	9a01      	ldr	r2, [sp, #4]
 80499d8:	f362 0303 	bfi	r3, r2, #0, #4
 80499dc:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80499de:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80499e2:	e7d8      	b.n	8049996 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80499e4:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 80499e8:	a901      	add	r1, sp, #4
 80499ea:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80499ee:	f002 f88b 	bl	804bb08 <LoRaMacCommandsSerializeCmds>
 80499f2:	2800      	cmp	r0, #0
 80499f4:	d1ce      	bne.n	8049994 <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80499f6:	200a      	movs	r0, #10
 80499f8:	e7cd      	b.n	8049996 <PrepareFrame+0xba>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80499fa:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 80499fe:	a901      	add	r1, sp, #4
 8049a00:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8049a04:	f002 f880 	bl	804bb08 <LoRaMacCommandsSerializeCmds>
 8049a08:	2800      	cmp	r0, #0
 8049a0a:	d1c3      	bne.n	8049994 <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8049a0c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8049a10:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8049a14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8049a18:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8049a1c:	9b01      	ldr	r3, [sp, #4]
 8049a1e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8049a22:	e7b8      	b.n	8049996 <PrepareFrame+0xba>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8049a24:	f1ba 0f00 	cmp.w	sl, #0
 8049a28:	d0be      	beq.n	80499a8 <PrepareFrame+0xcc>
 8049a2a:	2a00      	cmp	r2, #0
 8049a2c:	d0bc      	beq.n	80499a8 <PrepareFrame+0xcc>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8049a2e:	4651      	mov	r1, sl
 8049a30:	1df0      	adds	r0, r6, #7
 8049a32:	f004 fddc 	bl	804e5ee <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8049a36:	f896 323b 	ldrb.w	r3, [r6, #571]	; 0x23b
 8049a3a:	3301      	adds	r3, #1
 8049a3c:	80b3      	strh	r3, [r6, #4]
 8049a3e:	e7b3      	b.n	80499a8 <PrepareFrame+0xcc>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8049a40:	2002      	movs	r0, #2
 8049a42:	e7a8      	b.n	8049996 <PrepareFrame+0xba>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8049a44:	2012      	movs	r0, #18
 8049a46:	e7a6      	b.n	8049996 <PrepareFrame+0xba>
 8049a48:	20002834 	.word	0x20002834
 8049a4c:	080526e3 	.word	0x080526e3
 8049a50:	2000283a 	.word	0x2000283a

08049a54 <SendFrameOnChannel>:
{
 8049a54:	b530      	push	{r4, r5, lr}
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049a56:	4c38      	ldr	r4, [pc, #224]	; (8049b38 <SendFrameOnChannel+0xe4>)
{
 8049a58:	b087      	sub	sp, #28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049a5a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    txConfig.Channel = channel;
 8049a5e:	f88d 0008 	strb.w	r0, [sp, #8]
    int8_t txPower = 0;
 8049a62:	2200      	movs	r2, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049a64:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
    int8_t txPower = 0;
 8049a68:	f88d 2007 	strb.w	r2, [sp, #7]
    txConfig.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8049a6c:	f88d 200a 	strb.w	r2, [sp, #10]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8049a70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8049a74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8049a78:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8049a7a:	88a3      	ldrh	r3, [r4, #4]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049a7c:	f88d 1009 	strb.w	r1, [sp, #9]
{
 8049a80:	4605      	mov	r5, r0
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8049a82:	9203      	str	r2, [sp, #12]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8049a84:	f8ad 3014 	strh.w	r3, [sp, #20]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8049a88:	f001 ff3c 	bl	804b904 <LoRaMacClassBIsBeaconExpected>
 8049a8c:	2800      	cmp	r0, #0
 8049a8e:	d151      	bne.n	8049b34 <SendFrameOnChannel+0xe0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049a90:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049a94:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8049a98:	2b01      	cmp	r3, #1
 8049a9a:	d10b      	bne.n	8049ab4 <SendFrameOnChannel+0x60>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8049a9c:	f001 ff34 	bl	804b908 <LoRaMacClassBIsPingExpected>
 8049aa0:	b110      	cbz	r0, 8049aa8 <SendFrameOnChannel+0x54>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8049aa2:	200f      	movs	r0, #15
}
 8049aa4:	b007      	add	sp, #28
 8049aa6:	bd30      	pop	{r4, r5, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8049aa8:	f001 ff30 	bl	804b90c <LoRaMacClassBIsMulticastExpected>
 8049aac:	2800      	cmp	r0, #0
 8049aae:	d1f8      	bne.n	8049aa2 <SendFrameOnChannel+0x4e>
            LoRaMacClassBStopRxSlots( );
 8049ab0:	f001 ff42 	bl	804b938 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8049ab4:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 8049ab8:	4b20      	ldr	r3, [pc, #128]	; (8049b3c <SendFrameOnChannel+0xe8>)
 8049aba:	7800      	ldrb	r0, [r0, #0]
 8049abc:	f10d 0207 	add.w	r2, sp, #7
 8049ac0:	a902      	add	r1, sp, #8
 8049ac2:	f002 fef7 	bl	804c8b4 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8049ac6:	2301      	movs	r3, #1
 8049ac8:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049acc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049ad0:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8049ad4:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8049ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8049adc:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049ae0:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8049ae4:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049ae8:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049aec:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8049af0:	f001 ff0e 	bl	804b910 <LoRaMacClassBIsBeaconModeActive>
 8049af4:	b9b0      	cbnz	r0, 8049b24 <SendFrameOnChannel+0xd0>
    LoRaMacClassBHaltBeaconing( );
 8049af6:	f001 ff0e 	bl	804b916 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8049afa:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8049afe:	f043 0302 	orr.w	r3, r3, #2
 8049b02:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.NodeAckRequested == false )
 8049b06:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8049b0a:	b923      	cbnz	r3, 8049b16 <SendFrameOnChannel+0xc2>
        MacCtx.ChannelsNbTransCounter++;
 8049b0c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8049b10:	3301      	adds	r3, #1
 8049b12:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8049b16:	4b0a      	ldr	r3, [pc, #40]	; (8049b40 <SendFrameOnChannel+0xec>)
 8049b18:	480a      	ldr	r0, [pc, #40]	; (8049b44 <SendFrameOnChannel+0xf0>)
 8049b1a:	7921      	ldrb	r1, [r4, #4]
 8049b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8049b1e:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8049b20:	2000      	movs	r0, #0
 8049b22:	e7bf      	b.n	8049aa4 <SendFrameOnChannel+0x50>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8049b24:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8049b28:	f001 ff04 	bl	804b934 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8049b2c:	2800      	cmp	r0, #0
 8049b2e:	d0e2      	beq.n	8049af6 <SendFrameOnChannel+0xa2>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8049b30:	2010      	movs	r0, #16
 8049b32:	e7b7      	b.n	8049aa4 <SendFrameOnChannel+0x50>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8049b34:	200e      	movs	r0, #14
 8049b36:	e7b5      	b.n	8049aa4 <SendFrameOnChannel+0x50>
 8049b38:	20002834 	.word	0x20002834
 8049b3c:	20002c50 	.word	0x20002c50
 8049b40:	08052140 	.word	0x08052140
 8049b44:	2000283a 	.word	0x2000283a

08049b48 <ScheduleTx>:
{
 8049b48:	b570      	push	{r4, r5, r6, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049b4a:	4c80      	ldr	r4, [pc, #512]	; (8049d4c <ScheduleTx+0x204>)
    TimerTime_t dutyCycleTimeOff = 0;
 8049b4c:	2300      	movs	r3, #0
{
 8049b4e:	b088      	sub	sp, #32
 8049b50:	4605      	mov	r5, r0
    PRINTF("ScheduleTx\r\n");
 8049b52:	487f      	ldr	r0, [pc, #508]	; (8049d50 <ScheduleTx+0x208>)
    size_t macCmdsSize = 0;
 8049b54:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PRINTF("ScheduleTx\r\n");
 8049b58:	f004 fce4 	bl	804e524 <TraceSend>
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049b5c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049b60:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8049b64:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049b68:	2a00      	cmp	r2, #0
 8049b6a:	d15c      	bne.n	8049c26 <ScheduleTx+0xde>
        calcBackOff.Joined = true;
 8049b6c:	f88d 2014 	strb.w	r2, [sp, #20]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049b70:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
    calcBackOff.Channel = channel;
 8049b74:	f88d 1017 	strb.w	r1, [sp, #23]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049b78:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049b7c:	f88d 2016 	strb.w	r2, [sp, #22]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049b80:	f004 fc86 	bl	804e490 <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8049b84:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8049b88:	9307      	str	r3, [sp, #28]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049b8a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8049b8e:	9006      	str	r0, [sp, #24]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049b90:	075b      	lsls	r3, r3, #29
    calcBackOff.LastTxIsJoinRequest = false;
 8049b92:	f04f 0000 	mov.w	r0, #0
 8049b96:	f88d 0015 	strb.w	r0, [sp, #21]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8049b9a:	d505      	bpl.n	8049ba8 <ScheduleTx+0x60>
 8049b9c:	f002 f88e 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 8049ba0:	b110      	cbz	r0, 8049ba8 <ScheduleTx+0x60>
        calcBackOff.LastTxIsJoinRequest = true;
 8049ba2:	2301      	movs	r3, #1
 8049ba4:	f88d 3015 	strb.w	r3, [sp, #21]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8049ba8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049bac:	a905      	add	r1, sp, #20
 8049bae:	7818      	ldrb	r0, [r3, #0]
 8049bb0:	f002 fec4 	bl	804c93c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8049bb4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049bb8:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
 8049bbc:	1e51      	subs	r1, r2, #1
 8049bbe:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
 8049bc2:	434a      	muls	r2, r1
 8049bc4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8049bc8:	9205      	str	r2, [sp, #20]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049bca:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8049bce:	f88d 201c 	strb.w	r2, [sp, #28]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8049bd2:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8049bd6:	f88d 201e 	strb.w	r2, [sp, #30]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049bda:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8049bde:	bb22      	cbnz	r2, 8049c2a <ScheduleTx+0xe2>
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049be0:	7818      	ldrb	r0, [r3, #0]
        nextChan.Joined = true;
 8049be2:	f88d 201d 	strb.w	r2, [sp, #29]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049be6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8049bea:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8049bee:	9206      	str	r2, [sp, #24]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8049bf0:	9300      	str	r3, [sp, #0]
 8049bf2:	4a58      	ldr	r2, [pc, #352]	; (8049d54 <ScheduleTx+0x20c>)
 8049bf4:	ab02      	add	r3, sp, #8
 8049bf6:	a905      	add	r1, sp, #20
 8049bf8:	f002 fea6 	bl	804c948 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8049bfc:	b1b8      	cbz	r0, 8049c2e <ScheduleTx+0xe6>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8049bfe:	280b      	cmp	r0, #11
 8049c00:	d10f      	bne.n	8049c22 <ScheduleTx+0xda>
 8049c02:	b175      	cbz	r5, 8049c22 <ScheduleTx+0xda>
            if( dutyCycleTimeOff != 0 )
 8049c04:	9902      	ldr	r1, [sp, #8]
 8049c06:	b159      	cbz	r1, 8049c20 <ScheduleTx+0xd8>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8049c08:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8049c0c:	4852      	ldr	r0, [pc, #328]	; (8049d58 <ScheduleTx+0x210>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8049c0e:	f043 0320 	orr.w	r3, r3, #32
 8049c12:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8049c16:	f004 fc23 	bl	804e460 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8049c1a:	484f      	ldr	r0, [pc, #316]	; (8049d58 <ScheduleTx+0x210>)
 8049c1c:	f004 fb86 	bl	804e32c <TimerStart>
            return LORAMAC_STATUS_OK;
 8049c20:	2000      	movs	r0, #0
}
 8049c22:	b008      	add	sp, #32
 8049c24:	bd70      	pop	{r4, r5, r6, pc}
        calcBackOff.Joined = true;
 8049c26:	2201      	movs	r2, #1
 8049c28:	e7a0      	b.n	8049b6c <ScheduleTx+0x24>
        nextChan.Joined = true;
 8049c2a:	2201      	movs	r2, #1
 8049c2c:	e7d8      	b.n	8049be0 <ScheduleTx+0x98>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049c2e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 8049c32:	4d4a      	ldr	r5, [pc, #296]	; (8049d5c <ScheduleTx+0x214>)
 8049c34:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8049c36:	f991 3119 	ldrsb.w	r3, [r1, #281]	; 0x119
 8049c3a:	f991 20f9 	ldrsb.w	r2, [r1, #249]	; 0xf9
 8049c3e:	f891 112d 	ldrb.w	r1, [r1, #301]	; 0x12d
 8049c42:	4630      	mov	r0, r6
 8049c44:	f002 fe96 	bl	804c974 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8049c48:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049c4c:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049c50:	9500      	str	r5, [sp, #0]
 8049c52:	b241      	sxtb	r1, r0
 8049c54:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049c58:	4630      	mov	r0, r6
 8049c5a:	f002 fe13 	bl	804c884 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8049c5e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049c62:	3514      	adds	r5, #20
 8049c64:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8049c68:	f993 1120 	ldrsb.w	r1, [r3, #288]	; 0x120
 8049c6c:	7818      	ldrb	r0, [r3, #0]
 8049c6e:	9500      	str	r5, [sp, #0]
 8049c70:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8049c74:	f002 fe06 	bl	804c884 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049c78:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049c7c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 8049c80:	b9e2      	cbnz	r2, 8049cbc <ScheduleTx+0x174>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049c82:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8049c86:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049c8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049c8e:	440a      	add	r2, r1
 8049c90:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049c94:	f8d4 23dc 	ldr.w	r2, [r4, #988]	; 0x3dc
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8049c98:	f894 6419 	ldrb.w	r6, [r4, #1049]	; 0x419
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049c9c:	4413      	add	r3, r2
 8049c9e:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8049ca2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049ca6:	f993 50f9 	ldrsb.w	r5, [r3, #249]	; 0xf9
    uint32_t fCntUp = 0;
 8049caa:	2300      	movs	r3, #0
 8049cac:	9304      	str	r3, [sp, #16]
    switch( MacCtx.TxMsg.Type )
 8049cae:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8049cb2:	b313      	cbz	r3, 8049cfa <ScheduleTx+0x1b2>
 8049cb4:	2b04      	cmp	r3, #4
 8049cb6:	d02b      	beq.n	8049d10 <ScheduleTx+0x1c8>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8049cb8:	2003      	movs	r0, #3
 8049cba:	e7b2      	b.n	8049c22 <ScheduleTx+0xda>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8049cbc:	a803      	add	r0, sp, #12
 8049cbe:	f001 ff17 	bl	804baf0 <LoRaMacCommandsGetSizeSerializedCmds>
 8049cc2:	2800      	cmp	r0, #0
 8049cc4:	d13d      	bne.n	8049d42 <ScheduleTx+0x1fa>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049cc6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049cca:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8049cce:	f993 00f9 	ldrsb.w	r0, [r3, #249]	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8049cd2:	f89d 600c 	ldrb.w	r6, [sp, #12]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8049cd6:	f7ff f865 	bl	8048da4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8049cda:	4435      	add	r5, r6
 8049cdc:	b280      	uxth	r0, r0
 8049cde:	42a8      	cmp	r0, r5
 8049ce0:	d331      	bcc.n	8049d46 <ScheduleTx+0x1fe>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8049ce2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 8049ce6:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8049cea:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8049cee:	440b      	add	r3, r1
 8049cf0:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8049cf4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8049cf8:	e7cc      	b.n	8049c94 <ScheduleTx+0x14c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8049cfa:	4819      	ldr	r0, [pc, #100]	; (8049d60 <ScheduleTx+0x218>)
 8049cfc:	f002 fa22 	bl	804c144 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8049d00:	b9d8      	cbnz	r0, 8049d3a <ScheduleTx+0x1f2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8049d02:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8049d06:	80a3      	strh	r3, [r4, #4]
    return SendFrameOnChannel( 0/*MacCtx.Channel  JP*/);
 8049d08:	2000      	movs	r0, #0
 8049d0a:	f7ff fea3 	bl	8049a54 <SendFrameOnChannel>
 8049d0e:	e788      	b.n	8049c22 <ScheduleTx+0xda>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8049d10:	a804      	add	r0, sp, #16
 8049d12:	f002 f9bf 	bl	804c094 <LoRaMacCryptoGetFCntUp>
 8049d16:	b990      	cbnz	r0, 8049d3e <ScheduleTx+0x1f6>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8049d18:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8049d1c:	b91b      	cbnz	r3, 8049d26 <ScheduleTx+0x1de>
 8049d1e:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8049d22:	2b01      	cmp	r3, #1
 8049d24:	d902      	bls.n	8049d2c <ScheduleTx+0x1e4>
                fCntUp -= 1;
 8049d26:	9b04      	ldr	r3, [sp, #16]
 8049d28:	3b01      	subs	r3, #1
 8049d2a:	9304      	str	r3, [sp, #16]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8049d2c:	4b0c      	ldr	r3, [pc, #48]	; (8049d60 <ScheduleTx+0x218>)
 8049d2e:	9804      	ldr	r0, [sp, #16]
 8049d30:	4632      	mov	r2, r6
 8049d32:	b2e9      	uxtb	r1, r5
 8049d34:	f002 fa36 	bl	804c1a4 <LoRaMacCryptoSecureMessage>
 8049d38:	e7e2      	b.n	8049d00 <ScheduleTx+0x1b8>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8049d3a:	2011      	movs	r0, #17
 8049d3c:	e771      	b.n	8049c22 <ScheduleTx+0xda>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8049d3e:	2012      	movs	r0, #18
 8049d40:	e76f      	b.n	8049c22 <ScheduleTx+0xda>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049d42:	2013      	movs	r0, #19
 8049d44:	e76d      	b.n	8049c22 <ScheduleTx+0xda>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8049d46:	2008      	movs	r0, #8
 8049d48:	e76b      	b.n	8049c22 <ScheduleTx+0xda>
 8049d4a:	bf00      	nop
 8049d4c:	20002834 	.word	0x20002834
 8049d50:	080526f3 	.word	0x080526f3
 8049d54:	20002c4d 	.word	0x20002c4d
 8049d58:	20002ba0 	.word	0x20002ba0
 8049d5c:	20002bf0 	.word	0x20002bf0
 8049d60:	20002940 	.word	0x20002940

08049d64 <OnTxDelayedTimerEvent>:
{
 8049d64:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8049d66:	4c12      	ldr	r4, [pc, #72]	; (8049db0 <OnTxDelayedTimerEvent+0x4c>)
 8049d68:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 8049d6c:	f004 fb50 	bl	804e410 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8049d70:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8049d74:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8049d76:	f023 0320 	bic.w	r3, r3, #32
 8049d7a:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    switch( ScheduleTx( true ) )
 8049d7e:	f7ff fee3 	bl	8049b48 <ScheduleTx>
 8049d82:	b1a0      	cbz	r0, 8049dae <OnTxDelayedTimerEvent+0x4a>
 8049d84:	280b      	cmp	r0, #11
 8049d86:	d012      	beq.n	8049dae <OnTxDelayedTimerEvent+0x4a>
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049d88:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049d8c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8049d90:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8049d94:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8049d96:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 8049d9a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8049d9e:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8049da2:	f001 ff73 	bl	804bc8c <LoRaMacConfirmQueueSetStatusCmn>
}
 8049da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8049daa:	f7fe bfb7 	b.w	8048d1c <StopRetransmission>
}
 8049dae:	bd10      	pop	{r4, pc}
 8049db0:	20002834 	.word	0x20002834

08049db4 <Send>:
{
 8049db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049db8:	4d47      	ldr	r5, [pc, #284]	; (8049ed8 <Send+0x124>)
{
 8049dba:	4699      	mov	r9, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049dbc:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
{
 8049dc0:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049dc2:	f993 60f9 	ldrsb.w	r6, [r3, #249]	; 0xf9
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8049dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8049dca:	9304      	str	r3, [sp, #16]
{
 8049dcc:	4604      	mov	r4, r0
    PRINTF("Send\r\n");
 8049dce:	4843      	ldr	r0, [pc, #268]	; (8049edc <Send+0x128>)
{
 8049dd0:	460f      	mov	r7, r1
 8049dd2:	4690      	mov	r8, r2
    PRINTF("Send\r\n");
 8049dd4:	f004 fba6 	bl	804e524 <TraceSend>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8049dd8:	f8d5 1488 	ldr.w	r1, [r5, #1160]	; 0x488
 8049ddc:	f891 31d4 	ldrb.w	r3, [r1, #468]	; 0x1d4
 8049de0:	b93b      	cbnz	r3, 8049df2 <Send+0x3e>
    	PRINTF("NO NETWORK\r\n");
 8049de2:	483f      	ldr	r0, [pc, #252]	; (8049ee0 <Send+0x12c>)
 8049de4:	f004 fb9e 	bl	804e524 <TraceSend>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8049de8:	2407      	movs	r4, #7
}
 8049dea:	4620      	mov	r0, r4
 8049dec:	b00b      	add	sp, #44	; 0x2c
 8049dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8049df2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
 8049df6:	b90b      	cbnz	r3, 8049dfc <Send+0x48>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8049df8:	f8c1 31c8 	str.w	r3, [r1, #456]	; 0x1c8
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8049dfc:	f891 20f2 	ldrb.w	r2, [r1, #242]	; 0xf2
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049e00:	f891 00f0 	ldrb.w	r0, [r1, #240]	; 0xf0
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8049e04:	f04f 0300 	mov.w	r3, #0
 8049e08:	f362 13c7 	bfi	r3, r2, #7, #1
 8049e0c:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8049e10:	2801      	cmp	r0, #1
 8049e12:	b2db      	uxtb	r3, r3
        fCtrl.Bits.FPending      = 1;
 8049e14:	bf08      	it	eq
 8049e16:	f043 0310 	orreq.w	r3, r3, #16
        fCtrl.Bits.FPending      = 0;
 8049e1a:	f88d 300c 	strb.w	r3, [sp, #12]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8049e1e:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
 8049e22:	b12b      	cbz	r3, 8049e30 <Send+0x7c>
        fCtrl.Bits.Ack = 1;
 8049e24:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8049e28:	f043 0320 	orr.w	r3, r3, #32
 8049e2c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8049e30:	f8d1 31d0 	ldr.w	r3, [r1, #464]	; 0x1d0
 8049e34:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 8049e36:	2301      	movs	r3, #1
 8049e38:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8049e3c:	f8d1 30f4 	ldr.w	r3, [r1, #244]	; 0xf4
 8049e40:	9307      	str	r3, [sp, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8049e42:	f8b5 33f8 	ldrh.w	r3, [r5, #1016]	; 0x3f8
 8049e46:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8049e4a:	f8b5 33fa 	ldrh.w	r3, [r5, #1018]	; 0x3fa
 8049e4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049e52:	f891 30f9 	ldrb.w	r3, [r1, #249]	; 0xf9
 8049e56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.TxPower = TX_POWER_0 /*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 8049e5a:	2300      	movs	r3, #0
 8049e5c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8049e60:	f88d 2019 	strb.w	r2, [sp, #25]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8049e64:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
 8049e68:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = MacCtx.NvmCtx->Region;
 8049e6c:	460a      	mov	r2, r1
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8049e6e:	a805      	add	r0, sp, #20
    adrNext.Region = MacCtx.NvmCtx->Region;
 8049e70:	f812 3bf8 	ldrb.w	r3, [r2], #248
 8049e74:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8049e78:	31f9      	adds	r1, #249	; 0xf9
 8049e7a:	ab04      	add	r3, sp, #16
 8049e7c:	f001 fcca 	bl	804b814 <LoRaMacAdrCalcNext>
 8049e80:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8049e84:	a90a      	add	r1, sp, #40	; 0x28
 8049e86:	f360 1386 	bfi	r3, r0, #6, #1
 8049e8a:	f801 3d1c 	strb.w	r3, [r1, #-28]!
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8049e8e:	4620      	mov	r0, r4
 8049e90:	f8cd 9000 	str.w	r9, [sp]
 8049e94:	4643      	mov	r3, r8
 8049e96:	463a      	mov	r2, r7
 8049e98:	f7ff fd20 	bl	80498dc <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8049e9c:	4604      	mov	r4, r0
 8049e9e:	b108      	cbz	r0, 8049ea4 <Send+0xf0>
 8049ea0:	280a      	cmp	r0, #10
 8049ea2:	d104      	bne.n	8049eae <Send+0xfa>
        status = ScheduleTx( false );
 8049ea4:	2000      	movs	r0, #0
 8049ea6:	f7ff fe4f 	bl	8049b48 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8049eaa:	4604      	mov	r4, r0
 8049eac:	b138      	cbz	r0, 8049ebe <Send+0x10a>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8049eae:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8049eb2:	2200      	movs	r2, #0
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8049eb4:	f883 60f9 	strb.w	r6, [r3, #249]	; 0xf9
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8049eb8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8049ebc:	e795      	b.n	8049dea <Send+0x36>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8049ebe:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8049ec2:	9a04      	ldr	r2, [sp, #16]
        MacCtx.NvmCtx->SrvAckRequested = false;
 8049ec4:	f883 01c0 	strb.w	r0, [r3, #448]	; 0x1c0
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8049ec8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8049ecc:	f001 fde4 	bl	804ba98 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8049ed0:	2800      	cmp	r0, #0
 8049ed2:	bf18      	it	ne
 8049ed4:	2413      	movne	r4, #19
 8049ed6:	e788      	b.n	8049dea <Send+0x36>
 8049ed8:	20002834 	.word	0x20002834
 8049edc:	08052700 	.word	0x08052700
 8049ee0:	08052707 	.word	0x08052707

08049ee4 <SendReJoinReq>:
{
 8049ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( joinReqType )
 8049ee6:	28ff      	cmp	r0, #255	; 0xff
    macHdr.Value = 0;
 8049ee8:	f04f 0400 	mov.w	r4, #0
{
 8049eec:	4607      	mov	r7, r0
    macHdr.Value = 0;
 8049eee:	4626      	mov	r6, r4
    switch( joinReqType )
 8049ef0:	d123      	bne.n	8049f3a <SendReJoinReq+0x56>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8049ef2:	4d13      	ldr	r5, [pc, #76]	; (8049f40 <SendReJoinReq+0x5c>)
            SwitchClass( CLASS_A );
 8049ef4:	4620      	mov	r0, r4
 8049ef6:	f7ff f93d 	bl	8049174 <SwitchClass>
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8049efa:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8049efe:	1dab      	adds	r3, r5, #6
 8049f00:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8049f04:	f885 4108 	strb.w	r4, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8049f08:	f885 7110 	strb.w	r7, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8049f0c:	f885 6111 	strb.w	r6, [r5, #273]	; 0x111
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8049f10:	f7fe fee4 	bl	8048cdc <SecureElementGetJoinEui>
 8049f14:	2208      	movs	r2, #8
 8049f16:	4601      	mov	r1, r0
 8049f18:	f505 7089 	add.w	r0, r5, #274	; 0x112
 8049f1c:	f004 fb67 	bl	804e5ee <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8049f20:	f7fe fec6 	bl	8048cb0 <SecureElementGetDevEui>
 8049f24:	2208      	movs	r2, #8
 8049f26:	4601      	mov	r1, r0
 8049f28:	f505 708d 	add.w	r0, r5, #282	; 0x11a
 8049f2c:	f004 fb5f 	bl	804e5ee <memcpy1>
            allowDelayedTx = false;
 8049f30:	4620      	mov	r0, r4
}
 8049f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = ScheduleTx( allowDelayedTx );
 8049f36:	f7ff be07 	b.w	8049b48 <ScheduleTx>
    bool allowDelayedTx = true;
 8049f3a:	2001      	movs	r0, #1
 8049f3c:	e7f9      	b.n	8049f32 <SendReJoinReq+0x4e>
 8049f3e:	bf00      	nop
 8049f40:	20002834 	.word	0x20002834

08049f44 <SetTxContinuousWave>:
{
 8049f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 8049f46:	4c12      	ldr	r4, [pc, #72]	; (8049f90 <SetTxContinuousWave+0x4c>)
    continuousWave.Timeout = timeout;
 8049f48:	f8ad 000c 	strh.w	r0, [sp, #12]
    continuousWave.Channel = MacCtx.Channel;
 8049f4c:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8049f50:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8049f54:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 8049f58:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8049f5c:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8049f60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8049f64:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8049f68:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8049f6c:	9201      	str	r2, [sp, #4]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8049f6e:	7818      	ldrb	r0, [r3, #0]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8049f70:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8049f74:	9202      	str	r2, [sp, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8049f76:	4669      	mov	r1, sp
 8049f78:	f002 fcf6 	bl	804c968 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8049f7c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
}
 8049f80:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8049f82:	f043 0302 	orr.w	r3, r3, #2
 8049f86:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
}
 8049f8a:	b004      	add	sp, #16
 8049f8c:	bd10      	pop	{r4, pc}
 8049f8e:	bf00      	nop
 8049f90:	20002834 	.word	0x20002834

08049f94 <SetTxContinuousWave1>:
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8049f94:	4b08      	ldr	r3, [pc, #32]	; (8049fb8 <SetTxContinuousWave1+0x24>)
{
 8049f96:	b510      	push	{r4, lr}
 8049f98:	460c      	mov	r4, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8049f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049f9c:	b251      	sxtb	r1, r2
 8049f9e:	4602      	mov	r2, r0
 8049fa0:	4620      	mov	r0, r4
 8049fa2:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8049fa4:	4a05      	ldr	r2, [pc, #20]	; (8049fbc <SetTxContinuousWave1+0x28>)
 8049fa6:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
 8049faa:	f043 0302 	orr.w	r3, r3, #2
 8049fae:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
 8049fb2:	2000      	movs	r0, #0
 8049fb4:	bd10      	pop	{r4, pc}
 8049fb6:	bf00      	nop
 8049fb8:	08052140 	.word	0x08052140
 8049fbc:	20002834 	.word	0x20002834

08049fc0 <GetCtxs>:
{
 8049fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 8049fc2:	4d18      	ldr	r5, [pc, #96]	; (804a024 <GetCtxs+0x64>)
 8049fc4:	4c18      	ldr	r4, [pc, #96]	; (804a028 <GetCtxs+0x68>)
 8049fc6:	f205 438c 	addw	r3, r5, #1164	; 0x48c
 8049fca:	6023      	str	r3, [r4, #0]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8049fcc:	f104 0014 	add.w	r0, r4, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8049fd0:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8049fd4:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8049fd6:	f002 f857 	bl	804c088 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 8049fda:	a902      	add	r1, sp, #8
 8049fdc:	2300      	movs	r3, #0
 8049fde:	f841 3d04 	str.w	r3, [r1, #-4]!
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049fe2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8049fe6:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049fe8:	7818      	ldrb	r0, [r3, #0]
 8049fea:	f002 fc2e 	bl	804c84a <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8049fee:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8049ff0:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8049ff2:	f104 001c 	add.w	r0, r4, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8049ff6:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8049ff8:	f7fe fd6a 	bl	8048ad0 <SecureElementGetNvmCtx>
 8049ffc:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8049ffe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 804a002:	f001 fcc1 	bl	804b988 <LoRaMacCommandsGetNvmCtx>
 804a006:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 804a008:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 804a00c:	f001 fc6c 	bl	804b8e8 <LoRaMacClassBGetNvmCtx>
 804a010:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 804a012:	f104 0034 	add.w	r0, r4, #52	; 0x34
 804a016:	f001 fdcf 	bl	804bbb8 <LoRaMacConfirmQueueGetNvmCtx>
 804a01a:	6320      	str	r0, [r4, #48]	; 0x30
}
 804a01c:	4620      	mov	r0, r4
 804a01e:	b003      	add	sp, #12
 804a020:	bd30      	pop	{r4, r5, pc}
 804a022:	bf00      	nop
 804a024:	20002834 	.word	0x20002834
 804a028:	20005e28 	.word	0x20005e28

0804a02c <RestoreCtxs>:
{
 804a02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( contexts == NULL )
 804a02e:	4604      	mov	r4, r0
 804a030:	2800      	cmp	r0, #0
 804a032:	d033      	beq.n	804a09c <RestoreCtxs+0x70>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 804a034:	4d1d      	ldr	r5, [pc, #116]	; (804a0ac <RestoreCtxs+0x80>)
 804a036:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804a03a:	2b01      	cmp	r3, #1
 804a03c:	d130      	bne.n	804a0a0 <RestoreCtxs+0x74>
    if( contexts->MacNvmCtx != NULL )
 804a03e:	6801      	ldr	r1, [r0, #0]
 804a040:	b121      	cbz	r1, 804a04c <RestoreCtxs+0x20>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 804a042:	8882      	ldrh	r2, [r0, #4]
 804a044:	f205 408c 	addw	r0, r5, #1164	; 0x48c
 804a048:	f004 fad1 	bl	804e5ee <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 804a04c:	2302      	movs	r3, #2
    params.NvmCtx = contexts->RegionNvmCtx;
 804a04e:	a902      	add	r1, sp, #8
    params.Type = INIT_TYPE_RESTORE_CTX;
 804a050:	f88d 3004 	strb.w	r3, [sp, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 804a054:	68a3      	ldr	r3, [r4, #8]
 804a056:	f841 3d08 	str.w	r3, [r1, #-8]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a05a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804a05e:	7818      	ldrb	r0, [r3, #0]
 804a060:	f002 fbed 	bl	804c83e <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 804a064:	69a0      	ldr	r0, [r4, #24]
 804a066:	f7fe fd25 	bl	8048ab4 <SecureElementRestoreNvmCtx>
 804a06a:	b110      	cbz	r0, 804a072 <RestoreCtxs+0x46>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 804a06c:	2011      	movs	r0, #17
}
 804a06e:	b003      	add	sp, #12
 804a070:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 804a072:	6920      	ldr	r0, [r4, #16]
 804a074:	f001 fffa 	bl	804c06c <LoRaMacCryptoRestoreNvmCtx>
 804a078:	2800      	cmp	r0, #0
 804a07a:	d1f7      	bne.n	804a06c <RestoreCtxs+0x40>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 804a07c:	6a20      	ldr	r0, [r4, #32]
 804a07e:	f001 fc75 	bl	804b96c <LoRaMacCommandsRestoreNvmCtx>
 804a082:	b978      	cbnz	r0, 804a0a4 <RestoreCtxs+0x78>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 804a084:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 804a086:	f001 fc2d 	bl	804b8e4 <LoRaMacClassBRestoreNvmCtx>
 804a08a:	b168      	cbz	r0, 804a0a8 <RestoreCtxs+0x7c>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 804a08c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 804a08e:	f001 fd87 	bl	804bba0 <LoRaMacConfirmQueueRestoreNvmCtx>
    return LORAMAC_STATUS_OK;
 804a092:	2800      	cmp	r0, #0
 804a094:	bf0c      	ite	eq
 804a096:	2015      	moveq	r0, #21
 804a098:	2000      	movne	r0, #0
 804a09a:	e7e8      	b.n	804a06e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a09c:	2003      	movs	r0, #3
 804a09e:	e7e6      	b.n	804a06e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_BUSY;
 804a0a0:	2001      	movs	r0, #1
 804a0a2:	e7e4      	b.n	804a06e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804a0a4:	2013      	movs	r0, #19
 804a0a6:	e7e2      	b.n	804a06e <RestoreCtxs+0x42>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 804a0a8:	2014      	movs	r0, #20
 804a0aa:	e7e0      	b.n	804a06e <RestoreCtxs+0x42>
 804a0ac:	20002834 	.word	0x20002834

0804a0b0 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 804a0b0:	4602      	mov	r2, r0
 804a0b2:	b1d0      	cbz	r0, 804a0ea <DetermineFrameType+0x3a>
 804a0b4:	b1c9      	cbz	r1, 804a0ea <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 804a0b6:	7b03      	ldrb	r3, [r0, #12]
 804a0b8:	f013 000f 	ands.w	r0, r3, #15
 804a0bc:	d005      	beq.n	804a0ca <DetermineFrameType+0x1a>
 804a0be:	f892 3020 	ldrb.w	r3, [r2, #32]
 804a0c2:	b113      	cbz	r3, 804a0ca <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 804a0c4:	2000      	movs	r0, #0
 804a0c6:	7008      	strb	r0, [r1, #0]
 804a0c8:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 804a0ca:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 804a0ce:	b91b      	cbnz	r3, 804a0d8 <DetermineFrameType+0x28>
        *fType = FRAME_TYPE_B;
 804a0d0:	2201      	movs	r2, #1
 804a0d2:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 804a0d4:	4618      	mov	r0, r3
 804a0d6:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 804a0d8:	b948      	cbnz	r0, 804a0ee <DetermineFrameType+0x3e>
 804a0da:	f892 3020 	ldrb.w	r3, [r2, #32]
 804a0de:	b913      	cbnz	r3, 804a0e6 <DetermineFrameType+0x36>
        *fType = FRAME_TYPE_C;
 804a0e0:	2302      	movs	r3, #2
        *fType = FRAME_TYPE_D;
 804a0e2:	700b      	strb	r3, [r1, #0]
 804a0e4:	4770      	bx	lr
 804a0e6:	2303      	movs	r3, #3
 804a0e8:	e7fb      	b.n	804a0e2 <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804a0ea:	2003      	movs	r0, #3
 804a0ec:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 804a0ee:	2017      	movs	r0, #23
}
 804a0f0:	4770      	bx	lr
	...

0804a0f4 <LoRaMacProcess>:
{
 804a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a0f8:	b0a1      	sub	sp, #132	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804a0fa:	f3ef 8310 	mrs	r3, PRIMASK
    events = LoRaMacRadioEvents;
 804a0fe:	4cbd      	ldr	r4, [pc, #756]	; (804a3f4 <LoRaMacProcess+0x300>)
    LoRaMacRadioEvents.Value = 0;
 804a100:	2200      	movs	r2, #0
    events = LoRaMacRadioEvents;
 804a102:	6825      	ldr	r5, [r4, #0]
    LoRaMacRadioEvents.Value = 0;
 804a104:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804a106:	f383 8810 	msr	PRIMASK, r3
    if( events.Value != 0 )
 804a10a:	2d00      	cmp	r5, #0
 804a10c:	f000 80c3 	beq.w	804a296 <LoRaMacProcess+0x1a2>
 804a110:	b2ed      	uxtb	r5, r5
        if( events.Events.TxDone == 1 )
 804a112:	06e9      	lsls	r1, r5, #27
 804a114:	d552      	bpl.n	804a1bc <LoRaMacProcess+0xc8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804a116:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a11a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a11e:	2b02      	cmp	r3, #2
 804a120:	d002      	beq.n	804a128 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 804a122:	4bb5      	ldr	r3, [pc, #724]	; (804a3f8 <LoRaMacProcess+0x304>)
 804a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804a126:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 804a128:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 804a12c:	48b3      	ldr	r0, [pc, #716]	; (804a3fc <LoRaMacProcess+0x308>)
 804a12e:	f004 f997 	bl	804e460 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 804a132:	48b2      	ldr	r0, [pc, #712]	; (804a3fc <LoRaMacProcess+0x308>)
 804a134:	f004 f8fa 	bl	804e32c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 804a138:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 804a13c:	48b0      	ldr	r0, [pc, #704]	; (804a400 <LoRaMacProcess+0x30c>)
 804a13e:	f004 f98f 	bl	804e460 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 804a142:	48af      	ldr	r0, [pc, #700]	; (804a400 <LoRaMacProcess+0x30c>)
 804a144:	f004 f8f2 	bl	804e32c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 804a148:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a14c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804a150:	2a02      	cmp	r2, #2
 804a152:	d002      	beq.n	804a15a <LoRaMacProcess+0x66>
 804a154:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 804a158:	b182      	cbz	r2, 804a17c <LoRaMacProcess+0x88>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 804a15a:	a920      	add	r1, sp, #128	; 0x80
 804a15c:	2216      	movs	r2, #22
 804a15e:	f801 2d60 	strb.w	r2, [r1, #-96]!
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a162:	7818      	ldrb	r0, [r3, #0]
 804a164:	f002 fb5b 	bl	804c81e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804a168:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a16c:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804a16e:	4401      	add	r1, r0
 804a170:	48a4      	ldr	r0, [pc, #656]	; (804a404 <LoRaMacProcess+0x310>)
 804a172:	f004 f975 	bl	804e460 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 804a176:	48a3      	ldr	r0, [pc, #652]	; (804a404 <LoRaMacProcess+0x310>)
 804a178:	f004 f8d8 	bl	804e32c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 804a17c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a180:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 804a184:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    txDone.Channel = MacCtx.Channel;
 804a188:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 804a18c:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
 804a190:	2a00      	cmp	r2, #0
 804a192:	f040 812c 	bne.w	804a3ee <LoRaMacProcess+0x2fa>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804a196:	4e9c      	ldr	r6, [pc, #624]	; (804a408 <LoRaMacProcess+0x314>)
        txDone.Joined  = true;
 804a198:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804a19c:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804a19e:	6832      	ldr	r2, [r6, #0]
 804a1a0:	9215      	str	r2, [sp, #84]	; 0x54
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 804a1a2:	a914      	add	r1, sp, #80	; 0x50
 804a1a4:	f002 fb45 	bl	804c832 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 804a1a8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a1ac:	6832      	ldr	r2, [r6, #0]
 804a1ae:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    if( MacCtx.NodeAckRequested == false )
 804a1b2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a1b6:	b90b      	cbnz	r3, 804a1bc <LoRaMacProcess+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a1b8:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
        if( events.Events.RxDone == 1 )
 804a1bc:	072a      	lsls	r2, r5, #28
 804a1be:	d540      	bpl.n	804a242 <LoRaMacProcess+0x14e>
    uint8_t *payload = RxDoneParams.Payload;
 804a1c0:	4b92      	ldr	r3, [pc, #584]	; (804a40c <LoRaMacProcess+0x318>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a1c2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
    uint8_t *payload = RxDoneParams.Payload;
 804a1c6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 804a1ca:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 804a1ce:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 804a1d2:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a1d6:	6cd6      	ldr	r6, [r2, #76]	; 0x4c
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 804a1d8:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 804a1dc:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint32_t downLinkCounter = 0;
 804a1e0:	2300      	movs	r3, #0
 804a1e2:	9307      	str	r3, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 804a1e4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.McpsIndication.Multicast = 0;
 804a1e8:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 804a1ec:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 804a1f0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 804a1f4:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 804a1f8:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 804a1fc:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 804a200:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 804a204:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 804a208:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 804a20c:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 804a210:	4b79      	ldr	r3, [pc, #484]	; (804a3f8 <LoRaMacProcess+0x304>)
    MacCtx.McpsIndication.Rssi = rssi;
 804a212:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
 804a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    MacCtx.McpsIndication.Snr = snr;
 804a218:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    Radio.Sleep( );
 804a21c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 804a21e:	4878      	ldr	r0, [pc, #480]	; (804a400 <LoRaMacProcess+0x30c>)
 804a220:	f004 f8f6 	bl	804e410 <TimerStop>
    PRINTF("RxDone\r\n");
 804a224:	487a      	ldr	r0, [pc, #488]	; (804a410 <LoRaMacProcess+0x31c>)
 804a226:	f004 f97d 	bl	804e524 <TraceSend>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 804a22a:	4641      	mov	r1, r8
 804a22c:	4648      	mov	r0, r9
 804a22e:	f001 fb67 	bl	804b900 <LoRaMacClassBRxBeacon>
 804a232:	4683      	mov	fp, r0
 804a234:	2800      	cmp	r0, #0
 804a236:	f000 80f7 	beq.w	804a428 <LoRaMacProcess+0x334>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 804a23a:	f8a4 a47a 	strh.w	sl, [r4, #1146]	; 0x47a
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 804a23e:	f884 747c 	strb.w	r7, [r4, #1148]	; 0x47c
        if( events.Events.TxTimeout == 1 )
 804a242:	076f      	lsls	r7, r5, #29
 804a244:	d51b      	bpl.n	804a27e <LoRaMacProcess+0x18a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 804a246:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a24a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a24e:	2b02      	cmp	r3, #2
 804a250:	d002      	beq.n	804a258 <LoRaMacProcess+0x164>
        Radio.Sleep( );
 804a252:	4b69      	ldr	r3, [pc, #420]	; (804a3f8 <LoRaMacProcess+0x304>)
 804a254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804a256:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 804a258:	f7fe fd52 	bl	8048d00 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 804a25c:	2002      	movs	r0, #2
 804a25e:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 804a262:	f001 fd13 	bl	804bc8c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 804a266:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a26a:	b113      	cbz	r3, 804a272 <LoRaMacProcess+0x17e>
        MacCtx.AckTimeoutRetry = true;
 804a26c:	2301      	movs	r3, #1
 804a26e:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    MacCtx.MacFlags.Bits.MacDone = 1;
 804a272:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a276:	f043 0320 	orr.w	r3, r3, #32
 804a27a:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        if( events.Events.RxError == 1 )
 804a27e:	07ae      	lsls	r6, r5, #30
 804a280:	d503      	bpl.n	804a28a <LoRaMacProcess+0x196>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 804a282:	2106      	movs	r1, #6
 804a284:	2005      	movs	r0, #5
 804a286:	f7fe fdef 	bl	8048e68 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 804a28a:	07ed      	lsls	r5, r5, #31
 804a28c:	d503      	bpl.n	804a296 <LoRaMacProcess+0x1a2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 804a28e:	2104      	movs	r1, #4
 804a290:	2003      	movs	r0, #3
 804a292:	f7fe fde9 	bl	8048e68 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 804a296:	f001 fb50 	bl	804b93a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 804a29a:	f894 2485 	ldrb.w	r2, [r4, #1157]	; 0x485
 804a29e:	0690      	lsls	r0, r2, #26
 804a2a0:	d56a      	bpl.n	804a378 <LoRaMacProcess+0x284>
    MacCtx.AllowRequests = requestState;
 804a2a2:	2300      	movs	r3, #0
 804a2a4:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 804a2a8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a2ac:	0619      	lsls	r1, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a2ae:	bf44      	itt	mi
 804a2b0:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 804a2b4:	f8c4 3344 	strmi.w	r3, [r4, #836]	; 0x344
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 804a2b8:	f012 0f05 	tst.w	r2, #5
 804a2bc:	f000 82e0 	beq.w	804a880 <LoRaMacProcess+0x78c>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804a2c0:	200b      	movs	r0, #11
 804a2c2:	f001 fcfb 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 804a2c6:	2800      	cmp	r0, #0
 804a2c8:	f000 82da 	beq.w	804a880 <LoRaMacProcess+0x78c>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 804a2cc:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804a2d0:	07df      	lsls	r7, r3, #31
 804a2d2:	f100 82d5 	bmi.w	804a880 <LoRaMacProcess+0x78c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a2d6:	075e      	lsls	r6, r3, #29
 804a2d8:	f140 82d2 	bpl.w	804a880 <LoRaMacProcess+0x78c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a2dc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a2e0:	f023 0302 	bic.w	r3, r3, #2
 804a2e4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacState == LORAMAC_IDLE )
 804a2e8:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 804a2ec:	bb82      	cbnz	r2, 804a350 <LoRaMacProcess+0x25c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804a2ee:	f894 5485 	ldrb.w	r5, [r4, #1157]	; 0x485
 804a2f2:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 804a2f6:	bf1e      	ittt	ne
 804a2f8:	462b      	movne	r3, r5
 804a2fa:	f362 0300 	bfine	r3, r2, #0, #1
 804a2fe:	f884 3485 	strbne.w	r3, [r4, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a302:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a306:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804a308:	bf44      	itt	mi
 804a30a:	f36f 0382 	bfcmi	r3, #2, #1
 804a30e:	f884 3485 	strbmi.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 804a312:	2301      	movs	r3, #1
 804a314:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 804a318:	b121      	cbz	r1, 804a324 <LoRaMacProcess+0x230>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 804a31a:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a31e:	483d      	ldr	r0, [pc, #244]	; (804a414 <LoRaMacProcess+0x320>)
 804a320:	681b      	ldr	r3, [r3, #0]
 804a322:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 804a324:	076d      	lsls	r5, r5, #29
 804a326:	d50b      	bpl.n	804a340 <LoRaMacProcess+0x24c>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 804a328:	483b      	ldr	r0, [pc, #236]	; (804a418 <LoRaMacProcess+0x324>)
 804a32a:	f001 fcdf 	bl	804bcec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 804a32e:	f001 fd09 	bl	804bd44 <LoRaMacConfirmQueueGetCnt>
 804a332:	b128      	cbz	r0, 804a340 <LoRaMacProcess+0x24c>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 804a334:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a338:	f043 0304 	orr.w	r3, r3, #4
 804a33c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        LoRaMacClassBResumeBeaconing( );
 804a340:	f001 faea 	bl	804b918 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 804a344:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a348:	f36f 1345 	bfc	r3, #5, #1
 804a34c:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 804a350:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a354:	b96b      	cbnz	r3, 804a372 <LoRaMacProcess+0x27e>
        bool isStickyMacCommandPending = false;
 804a356:	a820      	add	r0, sp, #128	; 0x80
 804a358:	f800 3d30 	strb.w	r3, [r0, #-48]!
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 804a35c:	f001 fbf6 	bl	804bb4c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 804a360:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 804a364:	b12b      	cbz	r3, 804a372 <LoRaMacProcess+0x27e>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804a366:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a36a:	f043 0310 	orr.w	r3, r3, #16
 804a36e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 804a372:	2301      	movs	r3, #1
 804a374:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 804a378:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a37c:	0718      	lsls	r0, r3, #28
 804a37e:	d508      	bpl.n	804a392 <LoRaMacProcess+0x29e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 804a380:	f36f 03c3 	bfc	r3, #3, #1
 804a384:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 804a388:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a38c:	4823      	ldr	r0, [pc, #140]	; (804a41c <LoRaMacProcess+0x328>)
 804a38e:	68db      	ldr	r3, [r3, #12]
 804a390:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 804a392:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a396:	06d9      	lsls	r1, r3, #27
 804a398:	d510      	bpl.n	804a3bc <LoRaMacProcess+0x2c8>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 804a39a:	2306      	movs	r3, #6
 804a39c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a3a0:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a3a4:	2500      	movs	r5, #0
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a3a6:	68db      	ldr	r3, [r3, #12]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a3a8:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804a3ac:	a814      	add	r0, sp, #80	; 0x50
 804a3ae:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 804a3b0:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a3b4:	f365 1304 	bfi	r3, r5, #4, #1
 804a3b8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a3bc:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a3c0:	079a      	lsls	r2, r3, #30
 804a3c2:	d508      	bpl.n	804a3d6 <LoRaMacProcess+0x2e2>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 804a3c4:	f36f 0341 	bfc	r3, #1, #1
 804a3c8:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 804a3cc:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 804a3d0:	4813      	ldr	r0, [pc, #76]	; (804a420 <LoRaMacProcess+0x32c>)
 804a3d2:	685b      	ldr	r3, [r3, #4]
 804a3d4:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 804a3d6:	f894 3484 	ldrb.w	r3, [r4, #1156]	; 0x484
 804a3da:	2b02      	cmp	r3, #2
 804a3dc:	d104      	bne.n	804a3e8 <LoRaMacProcess+0x2f4>
    	PRINTF("Recebe em Classe C\r\n");
 804a3de:	4811      	ldr	r0, [pc, #68]	; (804a424 <LoRaMacProcess+0x330>)
 804a3e0:	f004 f8a0 	bl	804e524 <TraceSend>
        OpenContinuousRxCWindow( );
 804a3e4:	f7fe fe00 	bl	8048fe8 <OpenContinuousRxCWindow>
}
 804a3e8:	b021      	add	sp, #132	; 0x84
 804a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txDone.Joined  = true;
 804a3ee:	2201      	movs	r2, #1
 804a3f0:	e6d1      	b.n	804a196 <LoRaMacProcess+0xa2>
 804a3f2:	bf00      	nop
 804a3f4:	20002834 	.word	0x20002834
 804a3f8:	08052140 	.word	0x08052140
 804a3fc:	20002bb8 	.word	0x20002bb8
 804a400:	20002bd0 	.word	0x20002bd0
 804a404:	20002c30 	.word	0x20002c30
 804a408:	20005e14 	.word	0x20005e14
 804a40c:	20005e18 	.word	0x20005e18
 804a410:	08052714 	.word	0x08052714
 804a414:	20002c74 	.word	0x20002c74
 804a418:	20002c88 	.word	0x20002c88
 804a41c:	20002c9c 	.word	0x20002c9c
 804a420:	20002c54 	.word	0x20002c54
 804a424:	0805272e 	.word	0x0805272e
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 804a428:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a42c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a430:	2b01      	cmp	r3, #1
 804a432:	d10c      	bne.n	804a44e <LoRaMacProcess+0x35a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 804a434:	f001 fa68 	bl	804b908 <LoRaMacClassBIsPingExpected>
 804a438:	4682      	mov	sl, r0
 804a43a:	b1c8      	cbz	r0, 804a470 <LoRaMacProcess+0x37c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804a43c:	4658      	mov	r0, fp
 804a43e:	f001 fa58 	bl	804b8f2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 804a442:	4658      	mov	r0, fp
 804a444:	f001 fa5a 	bl	804b8fc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 804a448:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 804a44a:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 804a44e:	f899 a000 	ldrb.w	sl, [r9]
    switch( macHdr.Bits.MType )
 804a452:	ea4f 135a 	mov.w	r3, sl, lsr #5
 804a456:	3b01      	subs	r3, #1
 804a458:	2b06      	cmp	r3, #6
 804a45a:	f200 81fe 	bhi.w	804a85a <LoRaMacProcess+0x766>
 804a45e:	e8df f013 	tbh	[pc, r3, lsl #1]
 804a462:	0013      	.short	0x0013
 804a464:	009401fc 	.word	0x009401fc
 804a468:	009101fc 	.word	0x009101fc
 804a46c:	01e701fc 	.word	0x01e701fc
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 804a470:	f001 fa4c 	bl	804b90c <LoRaMacClassBIsMulticastExpected>
 804a474:	2800      	cmp	r0, #0
 804a476:	d0ea      	beq.n	804a44e <LoRaMacProcess+0x35a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804a478:	4650      	mov	r0, sl
 804a47a:	f001 fa3b 	bl	804b8f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 804a47e:	4650      	mov	r0, sl
 804a480:	f001 fa3d 	bl	804b8fe <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 804a484:	2305      	movs	r3, #5
 804a486:	e7e0      	b.n	804a44a <LoRaMacProcess+0x356>
            macMsgJoinAccept.BufSize = size;
 804a488:	fa5f f888 	uxtb.w	r8, r8
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a48c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            macMsgJoinAccept.BufSize = size;
 804a490:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a494:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
            macMsgJoinAccept.Buffer = payload;
 804a498:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 804a49c:	b11e      	cbz	r6, 804a4a6 <LoRaMacProcess+0x3b2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a49e:	2301      	movs	r3, #1
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 804a4a0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 804a4a4:	e10e      	b.n	804a6c4 <LoRaMacProcess+0x5d0>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 804a4a6:	f7fe fc19 	bl	8048cdc <SecureElementGetJoinEui>
 804a4aa:	aa0a      	add	r2, sp, #40	; 0x28
 804a4ac:	4601      	mov	r1, r0
 804a4ae:	20ff      	movs	r0, #255	; 0xff
 804a4b0:	f001 ffa8 	bl	804c404 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 804a4b4:	2800      	cmp	r0, #0
 804a4b6:	d15d      	bne.n	804a574 <LoRaMacProcess+0x480>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a4b8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 804a4bc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 804a4c0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a4c4:	0412      	lsls	r2, r2, #16
 804a4c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 804a4ca:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 804a4ce:	430a      	orrs	r2, r1
 804a4d0:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 804a4d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a4d4:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 804a4d6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 804a4da:	f3c2 1202 	ubfx	r2, r2, #4, #3
 804a4de:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804a4e2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 804a4e6:	f3c2 0203 	ubfx	r2, r2, #0, #4
 804a4ea:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 804a4ee:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 804a4f2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 804a4f6:	b3da      	cbz	r2, 804a570 <LoRaMacProcess+0x47c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 804a4f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 804a4fc:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 804a500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804a504:	434a      	muls	r2, r1
 804a506:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 804a50a:	2600      	movs	r6, #0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 804a50c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
                applyCFList.Size = size - 17;
 804a510:	f1a8 0811 	sub.w	r8, r8, #17
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 804a514:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 804a518:	f883 61d2 	strb.w	r6, [r3, #466]	; 0x1d2
                applyCFList.Size = size - 17;
 804a51c:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
                applyCFList.Payload = macMsgJoinAccept.CFList;
 804a520:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 804a524:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 804a526:	9208      	str	r2, [sp, #32]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 804a528:	a908      	add	r1, sp, #32
 804a52a:	f002 f99e 	bl	804c86a <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 804a52e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a532:	2202      	movs	r2, #2
 804a534:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804a538:	4630      	mov	r0, r6
 804a53a:	f001 fbbf 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 804a53e:	b118      	cbz	r0, 804a548 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 804a540:	4631      	mov	r1, r6
 804a542:	4630      	mov	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 804a544:	f001 fb6e 	bl	804bc24 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 804a548:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 804a54c:	2b00      	cmp	r3, #0
 804a54e:	f000 818a 	beq.w	804a866 <LoRaMacProcess+0x772>
        if( MacCtx.McpsConfirm.AckReceived == true )
 804a552:	f894 3444 	ldrb.w	r3, [r4, #1092]	; 0x444
 804a556:	b113      	cbz	r3, 804a55e <LoRaMacProcess+0x46a>
            OnAckTimeoutTimerEvent( NULL );
 804a558:	2000      	movs	r0, #0
 804a55a:	f7fe fc41 	bl	8048de0 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 804a55e:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a562:	f043 0320 	orr.w	r3, r3, #32
 804a566:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 804a56a:	f7fe fbc9 	bl	8048d00 <UpdateRxSlotIdleState>
 804a56e:	e668      	b.n	804a242 <LoRaMacProcess+0x14e>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 804a570:	2201      	movs	r2, #1
 804a572:	e7c1      	b.n	804a4f8 <LoRaMacProcess+0x404>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804a574:	4630      	mov	r0, r6
 804a576:	f001 fba1 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 804a57a:	2800      	cmp	r0, #0
 804a57c:	d0e4      	beq.n	804a548 <LoRaMacProcess+0x454>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 804a57e:	4631      	mov	r1, r6
 804a580:	2007      	movs	r0, #7
 804a582:	e7df      	b.n	804a544 <LoRaMacProcess+0x450>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 804a584:	2301      	movs	r3, #1
 804a586:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804a58a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a58e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804a592:	f88d 2016 	strb.w	r2, [sp, #22]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 804a596:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
 804a59a:	f88d 2015 	strb.w	r2, [sp, #21]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 804a59e:	220d      	movs	r2, #13
 804a5a0:	f88d 2014 	strb.w	r2, [sp, #20]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 804a5a4:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 804a5a8:	b112      	cbz	r2, 804a5b0 <LoRaMacProcess+0x4bc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 804a5aa:	220e      	movs	r2, #14
 804a5ac:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a5b0:	7818      	ldrb	r0, [r3, #0]
 804a5b2:	a905      	add	r1, sp, #20
 804a5b4:	f002 f933 	bl	804c81e <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 804a5b8:	f1a8 030d 	sub.w	r3, r8, #13
 804a5bc:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a5be:	9006      	str	r0, [sp, #24]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 804a5c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 804a5c4:	b200      	sxth	r0, r0
 804a5c6:	4283      	cmp	r3, r0
 804a5c8:	f73f af69 	bgt.w	804a49e <LoRaMacProcess+0x3aa>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 804a5cc:	4baa      	ldr	r3, [pc, #680]	; (804a878 <LoRaMacProcess+0x784>)
 804a5ce:	931d      	str	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a5d0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804a5d4:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a5d6:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 804a5d8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
            macMsgData.BufSize = size;
 804a5dc:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 804a5e0:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 804a5e4:	f002 f81c 	bl	804c620 <LoRaMacParserData>
 804a5e8:	2800      	cmp	r0, #0
 804a5ea:	f47f af58 	bne.w	804a49e <LoRaMacProcess+0x3aa>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 804a5ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 804a5f0:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 804a5f4:	a908      	add	r1, sp, #32
 804a5f6:	4658      	mov	r0, fp
 804a5f8:	f7ff fd5a 	bl	804a0b0 <DetermineFrameType>
 804a5fc:	2800      	cmp	r0, #0
 804a5fe:	f47f af4e 	bne.w	804a49e <LoRaMacProcess+0x3aa>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 804a602:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a606:	9916      	ldr	r1, [sp, #88]	; 0x58
            downLinkCounter = 0;
 804a608:	9007      	str	r0, [sp, #28]
 804a60a:	461a      	mov	r2, r3
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 804a60c:	4681      	mov	r9, r0
 804a60e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 804a610:	9003      	str	r0, [sp, #12]
 804a612:	4288      	cmp	r0, r1
 804a614:	d114      	bne.n	804a640 <LoRaMacProcess+0x54c>
 804a616:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 804a61a:	b188      	cbz	r0, 804a640 <LoRaMacProcess+0x54c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 804a61c:	2028      	movs	r0, #40	; 0x28
 804a61e:	fb00 3009 	mla	r0, r0, r9, r3
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 804a622:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 804a624:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 804a628:	6812      	ldr	r2, [r2, #0]
 804a62a:	9207      	str	r2, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804a62c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804a630:	2a02      	cmp	r2, #2
 804a632:	d102      	bne.n	804a63a <LoRaMacProcess+0x546>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 804a634:	2203      	movs	r2, #3
 804a636:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
                    multicast = 1;
 804a63a:	f04f 0801 	mov.w	r8, #1
 804a63e:	e009      	b.n	804a654 <LoRaMacProcess+0x560>
 804a640:	f109 0901 	add.w	r9, r9, #1
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 804a644:	f1b9 0f04 	cmp.w	r9, #4
 804a648:	f102 0228 	add.w	r2, r2, #40	; 0x28
 804a64c:	d1df      	bne.n	804a60e <LoRaMacProcess+0x51a>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 804a64e:	9603      	str	r6, [sp, #12]
            multicast = 0;
 804a650:	f04f 0800 	mov.w	r8, #0
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 804a654:	2215      	movs	r2, #21
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a656:	a905      	add	r1, sp, #20
 804a658:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 804a65a:	f88d 2014 	strb.w	r2, [sp, #20]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a65e:	f002 f8de 	bl	804c81e <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 804a662:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a666:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 804a668:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804a66c:	f892 21d2 	ldrb.w	r2, [r2, #466]	; 0x1d2
 804a670:	b281      	uxth	r1, r0
    switch( addrID )
 804a672:	f1b9 0f04 	cmp.w	r9, #4
 804a676:	d840      	bhi.n	804a6fa <LoRaMacProcess+0x606>
 804a678:	e8df f009 	tbb	[pc, r9]
 804a67c:	312f3303 	.word	0x312f3303
 804a680:	27          	.byte	0x27
 804a681:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_0;
 804a682:	2604      	movs	r6, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 804a684:	ab07      	add	r3, sp, #28
 804a686:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 804a68a:	4630      	mov	r0, r6
 804a68c:	f001 fd0e 	bl	804c0ac <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804a690:	b3a8      	cbz	r0, 804a6fe <LoRaMacProcess+0x60a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 804a692:	2807      	cmp	r0, #7
 804a694:	d12b      	bne.n	804a6ee <LoRaMacProcess+0x5fa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 804a696:	2308      	movs	r3, #8
 804a698:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 804a69c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a6a0:	f893 21d2 	ldrb.w	r2, [r3, #466]	; 0x1d2
 804a6a4:	b95a      	cbnz	r2, 804a6be <LoRaMacProcess+0x5ca>
 804a6a6:	f00a 02e0 	and.w	r2, sl, #224	; 0xe0
 804a6aa:	2aa0      	cmp	r2, #160	; 0xa0
 804a6ac:	d107      	bne.n	804a6be <LoRaMacProcess+0x5ca>
 804a6ae:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 804a6b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 804a6b4:	4291      	cmp	r1, r2
 804a6b6:	d102      	bne.n	804a6be <LoRaMacProcess+0x5ca>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 804a6b8:	2201      	movs	r2, #1
 804a6ba:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a6be:	9b07      	ldr	r3, [sp, #28]
 804a6c0:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 804a6c4:	f7fe fbb0 	bl	8048e28 <PrepareRxDoneAbort>
 804a6c8:	e5bb      	b.n	804a242 <LoRaMacProcess+0x14e>
            if( lrWanVersion.Fields.Minor == 1 )
 804a6ca:	2a01      	cmp	r2, #1
 804a6cc:	d10b      	bne.n	804a6e6 <LoRaMacProcess+0x5f2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 804a6ce:	b163      	cbz	r3, 804a6ea <LoRaMacProcess+0x5f6>
                    *fCntID = A_FCNT_DOWN;
 804a6d0:	2b03      	cmp	r3, #3
 804a6d2:	bf14      	ite	ne
 804a6d4:	2601      	movne	r6, #1
 804a6d6:	2602      	moveq	r6, #2
 804a6d8:	e7d4      	b.n	804a684 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_2;
 804a6da:	2606      	movs	r6, #6
 804a6dc:	e7d2      	b.n	804a684 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_3;
 804a6de:	2607      	movs	r6, #7
 804a6e0:	e7d0      	b.n	804a684 <LoRaMacProcess+0x590>
            *fCntID = MC_FCNT_DOWN_1;
 804a6e2:	2605      	movs	r6, #5
 804a6e4:	e7ce      	b.n	804a684 <LoRaMacProcess+0x590>
                *fCntID = FCNT_DOWN;
 804a6e6:	2603      	movs	r6, #3
 804a6e8:	e7cc      	b.n	804a684 <LoRaMacProcess+0x590>
                    *fCntID = A_FCNT_DOWN;
 804a6ea:	2602      	movs	r6, #2
 804a6ec:	e7ca      	b.n	804a684 <LoRaMacProcess+0x590>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 804a6ee:	2808      	cmp	r0, #8
 804a6f0:	d103      	bne.n	804a6fa <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 804a6f2:	230a      	movs	r3, #10
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a6f4:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 804a6f8:	e7e1      	b.n	804a6be <LoRaMacProcess+0x5ca>
 804a6fa:	2301      	movs	r3, #1
 804a6fc:	e7fa      	b.n	804a6f4 <LoRaMacProcess+0x600>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 804a6fe:	f8cd b000 	str.w	fp, [sp]
 804a702:	9b07      	ldr	r3, [sp, #28]
 804a704:	9903      	ldr	r1, [sp, #12]
 804a706:	4632      	mov	r2, r6
 804a708:	4648      	mov	r0, r9
 804a70a:	f001 fdb3 	bl	804c274 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804a70e:	b120      	cbz	r0, 804a71a <LoRaMacProcess+0x626>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 804a710:	2802      	cmp	r0, #2
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 804a712:	bf0c      	ite	eq
 804a714:	230b      	moveq	r3, #11
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 804a716:	230c      	movne	r3, #12
 804a718:	e6c2      	b.n	804a4a0 <LoRaMacProcess+0x3ac>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a71a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 804a71e:	f894 1431 	ldrb.w	r1, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a722:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a726:	f3c3 1200 	ubfx	r2, r3, #4, #1
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 804a72a:	2901      	cmp	r1, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 804a72c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 804a730:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 804a734:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
                MacCtx.NvmCtx->AdrAckCounter = 0;
 804a738:	bf98      	it	ls
 804a73a:	f8d4 3488 	ldrls.w	r3, [r4, #1160]	; 0x488
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 804a73e:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a742:	9a07      	ldr	r2, [sp, #28]
            MacCtx.McpsIndication.Multicast = multicast;
 804a744:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 804a748:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 804a74c:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 804a750:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a754:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
                MacCtx.NvmCtx->AdrAckCounter = 0;
 804a758:	bf98      	it	ls
 804a75a:	f8c3 00f4 	strls.w	r0, [r3, #244]	; 0xf4
            if( multicast == 1 )
 804a75e:	f1b8 0f00 	cmp.w	r8, #0
 804a762:	d01b      	beq.n	804a79c <LoRaMacProcess+0x6a8>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 804a764:	2302      	movs	r3, #2
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804a766:	2901      	cmp	r1, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 804a768:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 804a76c:	f894 2440 	ldrb.w	r2, [r4, #1088]	; 0x440
 804a770:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804a774:	d805      	bhi.n	804a782 <LoRaMacProcess+0x68e>
        if( request == MCPS_CONFIRMED )
 804a776:	2a01      	cmp	r2, #1
 804a778:	d101      	bne.n	804a77e <LoRaMacProcess+0x68a>
            if( fCtrl.Bits.Ack == 1 )
 804a77a:	069b      	lsls	r3, r3, #26
 804a77c:	d501      	bpl.n	804a782 <LoRaMacProcess+0x68e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 804a77e:	f001 f99d 	bl	804babc <LoRaMacCommandsRemoveStickyAnsCmds>
            PRINTF("FRame type: %d\r\n", fType);
 804a782:	f89d 1020 	ldrb.w	r1, [sp, #32]
 804a786:	483d      	ldr	r0, [pc, #244]	; (804a87c <LoRaMacProcess+0x788>)
 804a788:	f003 fecc 	bl	804e524 <TraceSend>
            switch( fType )
 804a78c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 804a790:	2b03      	cmp	r3, #3
 804a792:	d847      	bhi.n	804a824 <LoRaMacProcess+0x730>
 804a794:	e8df f003 	tbb	[pc, r3]
 804a798:	1f412e17 	.word	0x1f412e17
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 804a79c:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 804a7a0:	2ba0      	cmp	r3, #160	; 0xa0
 804a7a2:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804a7a6:	d10a      	bne.n	804a7be <LoRaMacProcess+0x6ca>
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a7a8:	f892 01d2 	ldrb.w	r0, [r2, #466]	; 0x1d2
                    MacCtx.NvmCtx->SrvAckRequested = true;
 804a7ac:	2301      	movs	r3, #1
 804a7ae:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a7b2:	2800      	cmp	r0, #0
 804a7b4:	d1d7      	bne.n	804a766 <LoRaMacProcess+0x672>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 804a7b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 804a7b8:	f8c2 01d8 	str.w	r0, [r2, #472]	; 0x1d8
 804a7bc:	e7d3      	b.n	804a766 <LoRaMacProcess+0x672>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 804a7be:	2300      	movs	r3, #0
 804a7c0:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 804a7c4:	e7cf      	b.n	804a766 <LoRaMacProcess+0x672>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804a7c6:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804a7ca:	463a      	mov	r2, r7
 804a7cc:	f001 010f 	and.w	r1, r1, #15
 804a7d0:	a818      	add	r0, sp, #96	; 0x60
 804a7d2:	f7fe fdb5 	bl	8049340 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804a7d6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804a7da:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 804a7de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804a7e0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 804a7e4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 804a7e8:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 804a7ec:	2301      	movs	r3, #1
 804a7ee:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
 804a7f2:	e00b      	b.n	804a80c <LoRaMacProcess+0x718>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 804a7f4:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 804a7f8:	463a      	mov	r2, r7
 804a7fa:	f001 010f 	and.w	r1, r1, #15
 804a7fe:	a818      	add	r0, sp, #96	; 0x60
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804a800:	f7fe fd9e 	bl	8049340 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 804a804:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 804a808:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            MacCtx.MacFlags.Bits.McpsInd = 1;
 804a80c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a810:	f043 0302 	orr.w	r3, r3, #2
 804a814:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 804a818:	e696      	b.n	804a548 <LoRaMacProcess+0x454>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 804a81a:	463a      	mov	r2, r7
 804a81c:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 804a820:	981d      	ldr	r0, [sp, #116]	; 0x74
 804a822:	e7ed      	b.n	804a800 <LoRaMacProcess+0x70c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a824:	2301      	movs	r3, #1
 804a826:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 804a82a:	f7fe fafd 	bl	8048e28 <PrepareRxDoneAbort>
 804a82e:	e7ed      	b.n	804a80c <LoRaMacProcess+0x718>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 804a830:	4e11      	ldr	r6, [pc, #68]	; (804a878 <LoRaMacProcess+0x784>)
 804a832:	f108 38ff 	add.w	r8, r8, #4294967295
 804a836:	fa1f f288 	uxth.w	r2, r8
 804a83a:	f109 0101 	add.w	r1, r9, #1
 804a83e:	4630      	mov	r0, r6
 804a840:	f003 fed5 	bl	804e5ee <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 804a844:	2303      	movs	r3, #3
 804a846:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804a84a:	2300      	movs	r3, #0
 804a84c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 804a850:	f8c4 6428 	str.w	r6, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 804a854:	f884 842c 	strb.w	r8, [r4, #1068]	; 0x42c
 804a858:	e7d8      	b.n	804a80c <LoRaMacProcess+0x718>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804a85a:	2301      	movs	r3, #1
 804a85c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 804a860:	f7fe fae2 	bl	8048e28 <PrepareRxDoneAbort>
 804a864:	e670      	b.n	804a548 <LoRaMacProcess+0x454>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 804a866:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804a86a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a86e:	2b02      	cmp	r3, #2
 804a870:	f47f ae75 	bne.w	804a55e <LoRaMacProcess+0x46a>
 804a874:	e670      	b.n	804a558 <LoRaMacProcess+0x464>
 804a876:	bf00      	nop
 804a878:	20002a70 	.word	0x20002a70
 804a87c:	0805271d 	.word	0x0805271d
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804a880:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804a884:	075d      	lsls	r5, r3, #29
 804a886:	d50f      	bpl.n	804a8a8 <LoRaMacProcess+0x7b4>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 804a888:	2000      	movs	r0, #0
 804a88a:	f001 fa17 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 804a88e:	b390      	cbz	r0, 804a8f6 <LoRaMacProcess+0x802>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 804a890:	2000      	movs	r0, #0
 804a892:	f001 f9e1 	bl	804bc58 <LoRaMacConfirmQueueGetStatus>
 804a896:	b908      	cbnz	r0, 804a89c <LoRaMacProcess+0x7a8>
                MacCtx.ChannelsNbTransCounter = 0;
 804a898:	f884 0414 	strb.w	r0, [r4, #1044]	; 0x414
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804a89c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a8a0:	f023 0302 	bic.w	r3, r3, #2
 804a8a4:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804a8a8:	f894 1485 	ldrb.w	r1, [r4, #1157]	; 0x485
 804a8ac:	07c8      	lsls	r0, r1, #31
 804a8ae:	f57f ad1b 	bpl.w	804a2e8 <LoRaMacProcess+0x1f4>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 804a8b2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 804a8b6:	b10b      	cbz	r3, 804a8bc <LoRaMacProcess+0x7c8>
 804a8b8:	2b03      	cmp	r3, #3
 804a8ba:	d127      	bne.n	804a90c <LoRaMacProcess+0x818>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 804a8bc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    if( MacCtx.ChannelsNbTransCounter >=
 804a8c0:	f894 0414 	ldrb.w	r0, [r4, #1044]	; 0x414
 804a8c4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 804a8c8:	4290      	cmp	r0, r2
 804a8ca:	d208      	bcs.n	804a8de <LoRaMacProcess+0x7ea>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a8cc:	078a      	lsls	r2, r1, #30
 804a8ce:	d552      	bpl.n	804a976 <LoRaMacProcess+0x882>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804a8d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804a8d4:	b11b      	cbz	r3, 804a8de <LoRaMacProcess+0x7ea>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 804a8d6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 804a8da:	2b00      	cmp	r3, #0
 804a8dc:	d14b      	bne.n	804a976 <LoRaMacProcess+0x882>
            TimerStop( &MacCtx.TxDelayedTimer );
 804a8de:	4839      	ldr	r0, [pc, #228]	; (804a9c4 <LoRaMacProcess+0x8d0>)
 804a8e0:	f003 fd96 	bl	804e410 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804a8e4:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804a8e8:	f023 0320 	bic.w	r3, r3, #32
 804a8ec:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
            StopRetransmission( );
 804a8f0:	f7fe fa14 	bl	8048d1c <StopRetransmission>
 804a8f4:	e4f8      	b.n	804a2e8 <LoRaMacProcess+0x1f4>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804a8f6:	2004      	movs	r0, #4
 804a8f8:	f001 f9e0 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
 804a8fc:	2800      	cmp	r0, #0
 804a8fe:	d1cd      	bne.n	804a89c <LoRaMacProcess+0x7a8>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 804a900:	2005      	movs	r0, #5
 804a902:	f001 f9db 	bl	804bcbc <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 804a906:	2800      	cmp	r0, #0
 804a908:	d1c8      	bne.n	804a89c <LoRaMacProcess+0x7a8>
 804a90a:	e7cd      	b.n	804a8a8 <LoRaMacProcess+0x7b4>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 804a90c:	2b01      	cmp	r3, #1
 804a90e:	d132      	bne.n	804a976 <LoRaMacProcess+0x882>
            if( MacCtx.AckTimeoutRetry == true )
 804a910:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
 804a914:	2a00      	cmp	r2, #0
 804a916:	f43f ace7 	beq.w	804a2e8 <LoRaMacProcess+0x1f4>
    if( MacCtx.AckTimeoutRetriesCounter >=
 804a91a:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
        MacCtx.AckTimeoutRetries )
 804a91e:	f894 5415 	ldrb.w	r5, [r4, #1045]	; 0x415
    if( MacCtx.AckTimeoutRetriesCounter >=
 804a922:	42ab      	cmp	r3, r5
 804a924:	d204      	bcs.n	804a930 <LoRaMacProcess+0x83c>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804a926:	f011 0202 	ands.w	r2, r1, #2
        if( MacCtx.McpsConfirm.AckReceived == true )
 804a92a:	bf18      	it	ne
 804a92c:	f894 2444 	ldrbne.w	r2, [r4, #1092]	; 0x444
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 804a930:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804a934:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
 804a938:	2900      	cmp	r1, #0
 804a93a:	d13f      	bne.n	804a9bc <LoRaMacProcess+0x8c8>
                    if( stopRetransmission == false )
 804a93c:	bb3a      	cbnz	r2, 804a98e <LoRaMacProcess+0x89a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 804a93e:	42ab      	cmp	r3, r5
 804a940:	d219      	bcs.n	804a976 <LoRaMacProcess+0x882>
        MacCtx.AckTimeoutRetriesCounter++;
 804a942:	3301      	adds	r3, #1
 804a944:	b2db      	uxtb	r3, r3
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804a946:	07df      	lsls	r7, r3, #31
        MacCtx.AckTimeoutRetriesCounter++;
 804a948:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 804a94c:	d513      	bpl.n	804a976 <LoRaMacProcess+0x882>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804a94e:	2322      	movs	r3, #34	; 0x22
 804a950:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804a954:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 804a958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804a95c:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
 804a960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a964:	a90a      	add	r1, sp, #40	; 0x28
 804a966:	7800      	ldrb	r0, [r0, #0]
 804a968:	f001 ff59 	bl	804c81e <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804a96c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804a970:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 804a972:	f883 00f9 	strb.w	r0, [r3, #249]	; 0xf9
            MacCtx.MacFlags.Bits.MacDone = 0;
 804a976:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804a97a:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 804a97c:	f36f 1345 	bfc	r3, #5, #1
 804a980:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 804a984:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
            OnTxDelayedTimerEvent( NULL );
 804a988:	f7ff f9ec 	bl	8049d64 <OnTxDelayedTimerEvent>
 804a98c:	e4ac      	b.n	804a2e8 <LoRaMacProcess+0x1f4>
    if( MacCtx.McpsConfirm.AckReceived == false )
 804a98e:	f894 5444 	ldrb.w	r5, [r4, #1092]	; 0x444
 804a992:	b975      	cbnz	r5, 804a9b2 <LoRaMacProcess+0x8be>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804a994:	2301      	movs	r3, #1
 804a996:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        params.NvmCtx = Contexts.RegionNvmCtx;
 804a99a:	4b0b      	ldr	r3, [pc, #44]	; (804a9c8 <LoRaMacProcess+0x8d4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a99c:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 804a99e:	689b      	ldr	r3, [r3, #8]
 804a9a0:	a920      	add	r1, sp, #128	; 0x80
 804a9a2:	f841 3d30 	str.w	r3, [r1, #-48]!
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804a9a6:	f001 ff4a 	bl	804c83e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 804a9aa:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
        MacCtx.McpsConfirm.AckReceived = false;
 804a9ae:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 804a9b2:	f894 3416 	ldrb.w	r3, [r4, #1046]	; 0x416
 804a9b6:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 804a9ba:	e790      	b.n	804a8de <LoRaMacProcess+0x7ea>
        if( stopRetransmission == true )
 804a9bc:	2a00      	cmp	r2, #0
 804a9be:	d0da      	beq.n	804a976 <LoRaMacProcess+0x882>
 804a9c0:	e78d      	b.n	804a8de <LoRaMacProcess+0x7ea>
 804a9c2:	bf00      	nop
 804a9c4:	20002ba0 	.word	0x20002ba0
 804a9c8:	20005e28 	.word	0x20005e28

0804a9cc <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 804a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a9d0:	4688      	mov	r8, r1
 804a9d2:	b08f      	sub	sp, #60	; 0x3c
 804a9d4:	4692      	mov	sl, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 804a9d6:	4607      	mov	r7, r0
 804a9d8:	2800      	cmp	r0, #0
 804a9da:	f000 81da 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
 804a9de:	2900      	cmp	r1, #0
 804a9e0:	f000 81d7 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 804a9e4:	6803      	ldr	r3, [r0, #0]
 804a9e6:	2b00      	cmp	r3, #0
 804a9e8:	f000 81d3 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
 804a9ec:	6843      	ldr	r3, [r0, #4]
 804a9ee:	2b00      	cmp	r3, #0
 804a9f0:	f000 81cf 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMcpsIndication == NULL ) ||
 804a9f4:	6883      	ldr	r3, [r0, #8]
 804a9f6:	2b00      	cmp	r3, #0
 804a9f8:	f000 81cb 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeConfirm == NULL ) ||
 804a9fc:	68c3      	ldr	r3, [r0, #12]
 804a9fe:	2b00      	cmp	r3, #0
 804aa00:	f000 81c7 	beq.w	804ad92 <LoRaMacInitialization+0x3c6>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 804aa04:	4610      	mov	r0, r2
 804aa06:	f001 ff06 	bl	804c816 <RegionIsActive>
 804aa0a:	2800      	cmp	r0, #0
 804aa0c:	f000 81c3 	beq.w	804ad96 <LoRaMacInitialization+0x3ca>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804aa10:	4cb0      	ldr	r4, [pc, #704]	; (804acd4 <LoRaMacInitialization+0x308>)
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804aa12:	49b1      	ldr	r1, [pc, #708]	; (804acd8 <LoRaMacInitialization+0x30c>)
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804aa14:	f204 458c 	addw	r5, r4, #1164	; 0x48c
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 804aa18:	4638      	mov	r0, r7
 804aa1a:	f001 f8a9 	bl	804bb70 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 804aa1e:	4628      	mov	r0, r5
 804aa20:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 804aa24:	2100      	movs	r1, #0
 804aa26:	f003 fdf6 	bl	804e616 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 804aa2a:	f44f 6291 	mov.w	r2, #1160	; 0x488
 804aa2e:	2100      	movs	r1, #0
 804aa30:	1d20      	adds	r0, r4, #4
 804aa32:	f003 fdf0 	bl	804e616 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 804aa36:	f8c4 5488 	str.w	r5, [r4, #1160]	; 0x488
    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;
 804aa3a:	4ba8      	ldr	r3, [pc, #672]	; (804acdc <LoRaMacInitialization+0x310>)
 804aa3c:	f8c4 365c 	str.w	r3, [r4, #1628]	; 0x65c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 804aa40:	ad0e      	add	r5, sp, #56	; 0x38
 804aa42:	230f      	movs	r3, #15
 804aa44:	f805 3d38 	strb.w	r3, [r5, #-56]!
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804aa48:	2600      	movs	r6, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 804aa4a:	f04f 0901 	mov.w	r9, #1
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa4e:	4629      	mov	r1, r5
 804aa50:	4650      	mov	r0, sl
    MacCtx.NvmCtx->Region = region;
 804aa52:	f884 a48c 	strb.w	sl, [r4, #1164]	; 0x48c
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 804aa56:	f884 657c 	strb.w	r6, [r4, #1404]	; 0x57c
    MacCtx.NvmCtx->RepeaterSupport = false;
 804aa5a:	f884 65cb 	strb.w	r6, [r4, #1483]	; 0x5cb
    MacCtx.AckTimeoutRetriesCounter = 1;
 804aa5e:	f884 9416 	strb.w	r9, [r4, #1046]	; 0x416
    MacCtx.AckTimeoutRetries = 1;
 804aa62:	f884 9415 	strb.w	r9, [r4, #1045]	; 0x415
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa66:	f001 feda 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804aa6a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa6e:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804aa70:	1b80      	subs	r0, r0, r6
 804aa72:	bf18      	it	ne
 804aa74:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 804aa76:	220a      	movs	r2, #10
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 804aa78:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa7c:	4629      	mov	r1, r5
 804aa7e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 804aa80:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa84:	f001 fecb 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804aa88:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa8c:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 804aa8e:	7118      	strb	r0, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 804aa90:	f04f 0a06 	mov.w	sl, #6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa94:	4629      	mov	r1, r5
 804aa96:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_DR;
 804aa98:	f88d a000 	strb.w	sl, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aa9c:	f001 febf 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804aaa0:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aaa4:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 804aaa6:	7158      	strb	r0, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804aaa8:	2210      	movs	r2, #16
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aaaa:	4629      	mov	r1, r5
 804aaac:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 804aaae:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aab2:	f001 feb4 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804aab6:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aaba:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 804aabc:	6118      	str	r0, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804aabe:	2211      	movs	r2, #17
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aac0:	4629      	mov	r1, r5
 804aac2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 804aac4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aac8:	f001 fea9 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804aacc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aad0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 804aad2:	6158      	str	r0, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804aad4:	2212      	movs	r2, #18
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aad6:	4629      	mov	r1, r5
 804aad8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 804aada:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aade:	f001 fe9e 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804aae2:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aae6:	9001      	str	r0, [sp, #4]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804aae8:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 804aaea:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aaec:	4629      	mov	r1, r5
 804aaee:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 804aaf0:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aaf4:	f001 fe93 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804aaf8:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aafc:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 804aafe:	61d8      	str	r0, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804ab00:	f04f 0b14 	mov.w	fp, #20
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab04:	4629      	mov	r1, r5
 804ab06:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 804ab08:	f88d b000 	strb.w	fp, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab0c:	f001 fe87 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804ab10:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab14:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 804ab16:	6218      	str	r0, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804ab18:	2217      	movs	r2, #23
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab1a:	4629      	mov	r1, r5
 804ab1c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 804ab1e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab22:	f001 fe7c 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804ab26:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab2a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 804ab2c:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804ab30:	2218      	movs	r2, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab32:	4629      	mov	r1, r5
 804ab34:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 804ab36:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab3a:	f001 fe70 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804ab3e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab42:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 804ab44:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 804ab46:	6318      	str	r0, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 804ab48:	2219      	movs	r2, #25
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab4a:	4629      	mov	r1, r5
 804ab4c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 804ab4e:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab52:	f001 fe64 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804ab56:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab5a:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 804ab5c:	b2c0      	uxtb	r0, r0
 804ab5e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 804ab62:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804ab66:	221e      	movs	r2, #30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab68:	4629      	mov	r1, r5
 804ab6a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 804ab6c:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab70:	f001 fe55 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804ab74:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab78:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 804ab7a:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804ab7e:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab80:	4629      	mov	r1, r5
 804ab82:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 804ab84:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab88:	f001 fe49 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804ab8c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab90:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 804ab92:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804ab96:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ab98:	4629      	mov	r1, r5
 804ab9a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 804ab9c:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aba0:	f001 fe3d 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804aba4:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804aba8:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 804abaa:	9a01      	ldr	r2, [sp, #4]
 804abac:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abae:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804abb0:	2221      	movs	r2, #33	; 0x21
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abb2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 804abb4:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abb8:	f001 fe31 	bl	804c81e <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804abbc:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abc0:	9001      	str	r0, [sp, #4]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 804abc2:	9a01      	ldr	r2, [sp, #4]
 804abc4:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abc6:	4629      	mov	r1, r5
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804abc8:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abca:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 804abcc:	f88d 2000 	strb.w	r2, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abd0:	f001 fe25 	bl	804c81e <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 804abd4:	230c      	movs	r3, #12
 804abd6:	f88d 3000 	strb.w	r3, [sp]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abda:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abde:	9001      	str	r0, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abe0:	4629      	mov	r1, r5
    MacCtx.AdrAckLimit = phyParam.Value;
 804abe2:	f8a4 03f8 	strh.w	r0, [r4, #1016]	; 0x3f8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804abe6:	7818      	ldrb	r0, [r3, #0]
 804abe8:	f001 fe19 	bl	804c81e <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804abec:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    MacCtx.AdrAckDelay = phyParam.Value;
 804abf0:	f8a4 03fa 	strh.w	r0, [r4, #1018]	; 0x3fa
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 804abf4:	691a      	ldr	r2, [r3, #16]
 804abf6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 804abfa:	695a      	ldr	r2, [r3, #20]
 804abfc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 804ac00:	699a      	ldr	r2, [r3, #24]
 804ac02:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 804ac06:	69da      	ldr	r2, [r3, #28]
 804ac08:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 804ac0c:	6a1a      	ldr	r2, [r3, #32]
 804ac0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 804ac12:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 804ac16:	f8c3 b008 	str.w	fp, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 804ac1a:	f883 a00c 	strb.w	sl, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 804ac1e:	f8c3 b0fc 	str.w	fp, [r3, #252]	; 0xfc
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 804ac22:	f883 a100 	strb.w	sl, [r3, #256]	; 0x100
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 804ac26:	f883 9118 	strb.w	r9, [r3, #280]	; 0x118
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804ac2a:	9001      	str	r0, [sp, #4]

    ResetMacParameters( );
 804ac2c:	f7fe f978 	bl	8048f20 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 804ac30:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ac34:	492a      	ldr	r1, [pc, #168]	; (804ace0 <LoRaMacInitialization+0x314>)
    MacCtx.NvmCtx->PublicNetwork = true;
 804ac36:	f883 90f1 	strb.w	r9, [r3, #241]	; 0xf1
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ac3a:	f504 705b 	add.w	r0, r4, #876	; 0x36c
    MacCtx.MacFlags.Value = 0;
 804ac3e:	f884 6485 	strb.w	r6, [r4, #1157]	; 0x485
    MacCtx.MacPrimitives = primitives;
 804ac42:	f8c4 7348 	str.w	r7, [r4, #840]	; 0x348
    MacCtx.MacCallbacks = callbacks;
 804ac46:	f8c4 834c 	str.w	r8, [r4, #844]	; 0x34c
    MacCtx.MacState = LORAMAC_STOPPED;
 804ac4a:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 804ac4e:	f8c3 61c4 	str.w	r6, [r3, #452]	; 0x1c4
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 804ac52:	f8c3 61c8 	str.w	r6, [r3, #456]	; 0x1c8
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 804ac56:	f003 fb5f 	bl	804e318 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 804ac5a:	4922      	ldr	r1, [pc, #136]	; (804ace4 <LoRaMacInitialization+0x318>)
 804ac5c:	f504 7061 	add.w	r0, r4, #900	; 0x384
 804ac60:	f003 fb5a 	bl	804e318 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 804ac64:	4920      	ldr	r1, [pc, #128]	; (804ace8 <LoRaMacInitialization+0x31c>)
 804ac66:	f504 7067 	add.w	r0, r4, #924	; 0x39c
 804ac6a:	f003 fb55 	bl	804e318 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 804ac6e:	491f      	ldr	r1, [pc, #124]	; (804acec <LoRaMacInitialization+0x320>)
 804ac70:	f504 707f 	add.w	r0, r4, #1020	; 0x3fc
 804ac74:	f003 fb50 	bl	804e318 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804ac78:	f8d4 5488 	ldr.w	r5, [r4, #1160]	; 0x488
 804ac7c:	f003 fc01 	bl	804e482 <TimerGetCurrentTime>

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804ac80:	4b1b      	ldr	r3, [pc, #108]	; (804acf0 <LoRaMacInitialization+0x324>)
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 804ac82:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 804ac86:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 804ac8a:	4b1a      	ldr	r3, [pc, #104]	; (804acf4 <LoRaMacInitialization+0x328>)
 804ac8c:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 804ac90:	4b19      	ldr	r3, [pc, #100]	; (804acf8 <LoRaMacInitialization+0x32c>)
 804ac92:	f8c4 3360 	str.w	r3, [r4, #864]	; 0x360
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 804ac96:	4d19      	ldr	r5, [pc, #100]	; (804acfc <LoRaMacInitialization+0x330>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 804ac98:	4b19      	ldr	r3, [pc, #100]	; (804ad00 <LoRaMacInitialization+0x334>)
 804ac9a:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 804ac9e:	4b19      	ldr	r3, [pc, #100]	; (804ad04 <LoRaMacInitialization+0x338>)
 804aca0:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    Radio.Init( &MacCtx.RadioEvents );
 804aca4:	f504 7054 	add.w	r0, r4, #848	; 0x350
 804aca8:	68ab      	ldr	r3, [r5, #8]
 804acaa:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    params.NvmCtx = NULL;
 804acac:	a90e      	add	r1, sp, #56	; 0x38
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804acae:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    params.NvmCtx = NULL;
 804acb2:	f841 6d28 	str.w	r6, [r1, #-40]!
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804acb6:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_INIT;
 804acb8:	f88d 6014 	strb.w	r6, [sp, #20]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 804acbc:	f001 fdbf 	bl	804c83e <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 804acc0:	4811      	ldr	r0, [pc, #68]	; (804ad08 <LoRaMacInitialization+0x33c>)
 804acc2:	f7fd fe89 	bl	80489d8 <SecureElementInit>
 804acc6:	462e      	mov	r6, r5
 804acc8:	b300      	cbz	r0, 804ad0c <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 804acca:	2011      	movs	r0, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 804accc:	b00f      	add	sp, #60	; 0x3c
 804acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804acd2:	bf00      	nop
 804acd4:	20002834 	.word	0x20002834
 804acd8:	08048d9d 	.word	0x08048d9d
 804acdc:	01000300 	.word	0x01000300
 804ace0:	08049d65 	.word	0x08049d65
 804ace4:	080492b5 	.word	0x080492b5
 804ace8:	080492f5 	.word	0x080492f5
 804acec:	08048de1 	.word	0x08048de1
 804acf0:	08049111 	.word	0x08049111
 804acf4:	080490b1 	.word	0x080490b1
 804acf8:	08048ce5 	.word	0x08048ce5
 804acfc:	08052140 	.word	0x08052140
 804ad00:	0804906d 	.word	0x0804906d
 804ad04:	08049029 	.word	0x08049029
 804ad08:	08048d8b 	.word	0x08048d8b
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 804ad0c:	4824      	ldr	r0, [pc, #144]	; (804ada0 <LoRaMacInitialization+0x3d4>)
 804ad0e:	f001 f979 	bl	804c004 <LoRaMacCryptoInit>
 804ad12:	2800      	cmp	r0, #0
 804ad14:	d1d9      	bne.n	804acca <LoRaMacInitialization+0x2fe>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 804ad16:	4823      	ldr	r0, [pc, #140]	; (804ada4 <LoRaMacInitialization+0x3d8>)
 804ad18:	f000 fe18 	bl	804b94c <LoRaMacCommandsInit>
 804ad1c:	2800      	cmp	r0, #0
 804ad1e:	d13c      	bne.n	804ad9a <LoRaMacInitialization+0x3ce>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 804ad20:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
 804ad24:	3050      	adds	r0, #80	; 0x50
 804ad26:	f001 f9f7 	bl	804c118 <LoRaMacCryptoSetMulticastReference>
 804ad2a:	4605      	mov	r5, r0
 804ad2c:	2800      	cmp	r0, #0
 804ad2e:	d1cc      	bne.n	804acca <LoRaMacInitialization+0x2fe>
    srand1( Radio.Random( ) );
 804ad30:	69f3      	ldr	r3, [r6, #28]
 804ad32:	4798      	blx	r3
 804ad34:	f003 fc48 	bl	804e5c8 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804ad38:	f8d4 2488 	ldr.w	r2, [r4, #1160]	; 0x488
 804ad3c:	6e33      	ldr	r3, [r6, #96]	; 0x60
 804ad3e:	f892 00f1 	ldrb.w	r0, [r2, #241]	; 0xf1
 804ad42:	4798      	blx	r3
    Radio.Sleep( );
 804ad44:	6b73      	ldr	r3, [r6, #52]	; 0x34
 804ad46:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 804ad48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804ad4c:	9302      	str	r3, [sp, #8]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 804ad4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804ad52:	9303      	str	r3, [sp, #12]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 804ad54:	4b14      	ldr	r3, [pc, #80]	; (804ada8 <LoRaMacInitialization+0x3dc>)
 804ad56:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 804ad58:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 804ad5c:	9207      	str	r2, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804ad5e:	f1a3 0214 	sub.w	r2, r3, #20
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 804ad62:	331d      	adds	r3, #29
 804ad64:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804ad66:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804ad6a:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 804ad6c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 804ad70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 804ad74:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 804ad78:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804ad7a:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804ad7c:	a806      	add	r0, sp, #24
 804ad7e:	4a0b      	ldr	r2, [pc, #44]	; (804adac <LoRaMacInitialization+0x3e0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 804ad80:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 804ad82:	a902      	add	r1, sp, #8
 804ad84:	f000 fdad 	bl	804b8e2 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 804ad88:	2301      	movs	r3, #1
 804ad8a:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
    return LORAMAC_STATUS_OK;
 804ad8e:	4628      	mov	r0, r5
 804ad90:	e79c      	b.n	804accc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804ad92:	2003      	movs	r0, #3
 804ad94:	e79a      	b.n	804accc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 804ad96:	2009      	movs	r0, #9
 804ad98:	e798      	b.n	804accc <LoRaMacInitialization+0x300>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804ad9a:	2013      	movs	r0, #19
 804ad9c:	e796      	b.n	804accc <LoRaMacInitialization+0x300>
 804ad9e:	bf00      	nop
 804ada0:	08048d85 	.word	0x08048d85
 804ada4:	08048d91 	.word	0x08048d91
 804ada8:	20002c9c 	.word	0x20002c9c
 804adac:	08048d97 	.word	0x08048d97

0804adb0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 804adb0:	4b02      	ldr	r3, [pc, #8]	; (804adbc <LoRaMacStart+0xc>)
 804adb2:	2000      	movs	r0, #0
 804adb4:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    return LORAMAC_STATUS_OK;
}
 804adb8:	4770      	bx	lr
 804adba:	bf00      	nop
 804adbc:	20002834 	.word	0x20002834

0804adc0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 804adc0:	b570      	push	{r4, r5, r6, lr}
 804adc2:	4605      	mov	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804adc4:	482c      	ldr	r0, [pc, #176]	; (804ae78 <LoRaMacQueryTxPossible+0xb8>)
 804adc6:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
{
 804adca:	b088      	sub	sp, #32
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804adcc:	795a      	ldrb	r2, [r3, #5]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804adce:	f8d3 60f4 	ldr.w	r6, [r3, #244]	; 0xf4
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804add2:	f88d 2002 	strb.w	r2, [sp, #2]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804add6:	2200      	movs	r2, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804add8:	9601      	str	r6, [sp, #4]
    int8_t txPower = TX_POWER_0/*MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower*/;
 804adda:	f88d 2003 	strb.w	r2, [sp, #3]
    size_t macCmdsSize = 0;
 804adde:	9202      	str	r2, [sp, #8]

    if( txInfo == NULL )
 804ade0:	460c      	mov	r4, r1
 804ade2:	b929      	cbnz	r1, 804adf0 <LoRaMacQueryTxPossible+0x30>
    {
    	PRINTF("Invalid");
 804ade4:	4825      	ldr	r0, [pc, #148]	; (804ae7c <LoRaMacQueryTxPossible+0xbc>)
 804ade6:	f003 fb9d 	bl	804e524 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804adea:	2003      	movs	r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 804adec:	b008      	add	sp, #32
 804adee:	bd70      	pop	{r4, r5, r6, pc}
    adrNext.Version = MacCtx.NvmCtx->Version;
 804adf0:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 804adf4:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 804adf6:	f893 10f2 	ldrb.w	r1, [r3, #242]	; 0xf2
 804adfa:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 804adfe:	f8b0 13f8 	ldrh.w	r1, [r0, #1016]	; 0x3f8
 804ae02:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804ae06:	f8b0 13fa 	ldrh.w	r1, [r0, #1018]	; 0x3fa
    adrNext.TxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804ae0a:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UpdateChanMask = false;
 804ae0e:	f88d 2010 	strb.w	r2, [sp, #16]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804ae12:	f8ad 101a 	strh.w	r1, [sp, #26]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804ae16:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804ae1a:	f893 10f9 	ldrb.w	r1, [r3, #249]	; 0xf9
 804ae1e:	f88d 101c 	strb.w	r1, [sp, #28]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804ae22:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = MacCtx.NvmCtx->Region;
 804ae26:	781b      	ldrb	r3, [r3, #0]
 804ae28:	f88d 301f 	strb.w	r3, [sp, #31]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804ae2c:	f10d 0203 	add.w	r2, sp, #3
 804ae30:	ab01      	add	r3, sp, #4
 804ae32:	f10d 0102 	add.w	r1, sp, #2
 804ae36:	a803      	add	r0, sp, #12
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 804ae38:	9605      	str	r6, [sp, #20]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 804ae3a:	f000 fceb 	bl	804b814 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804ae3e:	f99d 0002 	ldrsb.w	r0, [sp, #2]
 804ae42:	f7fd ffaf 	bl	8048da4 <GetMaxAppPayloadWithoutFOptsLength>
 804ae46:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804ae48:	a802      	add	r0, sp, #8
 804ae4a:	f000 fe51 	bl	804baf0 <LoRaMacCommandsGetSizeSerializedCmds>
 804ae4e:	b988      	cbnz	r0, 804ae74 <LoRaMacQueryTxPossible+0xb4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 804ae50:	9b02      	ldr	r3, [sp, #8]
 804ae52:	2b0f      	cmp	r3, #15
 804ae54:	d80a      	bhi.n	804ae6c <LoRaMacQueryTxPossible+0xac>
 804ae56:	7860      	ldrb	r0, [r4, #1]
 804ae58:	4283      	cmp	r3, r0
 804ae5a:	d807      	bhi.n	804ae6c <LoRaMacQueryTxPossible+0xac>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804ae5c:	1ac2      	subs	r2, r0, r3
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 804ae5e:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 804ae60:	7022      	strb	r2, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 804ae62:	4298      	cmp	r0, r3
 804ae64:	bf34      	ite	cc
 804ae66:	2008      	movcc	r0, #8
 804ae68:	2000      	movcs	r0, #0
 804ae6a:	e7bf      	b.n	804adec <LoRaMacQueryTxPossible+0x2c>
        txInfo->MaxPossibleApplicationDataSize = 0;
 804ae6c:	2300      	movs	r3, #0
 804ae6e:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 804ae70:	2008      	movs	r0, #8
 804ae72:	e7bb      	b.n	804adec <LoRaMacQueryTxPossible+0x2c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804ae74:	2013      	movs	r0, #19
 804ae76:	e7b9      	b.n	804adec <LoRaMacQueryTxPossible+0x2c>
 804ae78:	20002834 	.word	0x20002834
 804ae7c:	08052743 	.word	0x08052743

0804ae80 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 804ae80:	b513      	push	{r0, r1, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 804ae82:	4604      	mov	r4, r0
 804ae84:	2800      	cmp	r0, #0
 804ae86:	f000 80d3 	beq.w	804b030 <LoRaMacMibGetRequestConfirm+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 804ae8a:	7803      	ldrb	r3, [r0, #0]
 804ae8c:	2b34      	cmp	r3, #52	; 0x34
 804ae8e:	f200 80cc 	bhi.w	804b02a <LoRaMacMibGetRequestConfirm+0x1aa>
 804ae92:	e8df f003 	tbb	[pc, r3]
 804ae96:	231b      	.short	0x231b
 804ae98:	36302d29 	.word	0x36302d29
 804ae9c:	cacaca3c 	.word	0xcacaca3c
 804aea0:	cacacaca 	.word	0xcacacaca
 804aea4:	cacacaca 	.word	0xcacacaca
 804aea8:	cacacaca 	.word	0xcacacaca
 804aeac:	cacacaca 	.word	0xcacacaca
 804aeb0:	41cacaca 	.word	0x41cacaca
 804aeb4:	63584d47 	.word	0x63584d47
 804aeb8:	76797069 	.word	0x76797069
 804aebc:	8e88827c 	.word	0x8e88827c
 804aec0:	a5a09a94 	.word	0xa5a09a94
 804aec4:	b5afabab 	.word	0xb5afabab
 804aec8:	c5bb      	.short	0xc5bb
 804aeca:	c2          	.byte	0xc2
 804aecb:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 804aecc:	4b59      	ldr	r3, [pc, #356]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804aece:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804aed2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
            break;
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804aed6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804aed8:	2000      	movs	r0, #0
            break;
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
            break;
 804aeda:	e089      	b.n	804aff0 <LoRaMacMibGetRequestConfirm+0x170>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 804aedc:	4b55      	ldr	r3, [pc, #340]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804aede:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804aee2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804aee6:	e7f6      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 804aee8:	f7fd fee2 	bl	8048cb0 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 804aeec:	6060      	str	r0, [r4, #4]
 804aeee:	e7f3      	b.n	804aed8 <LoRaMacMibGetRequestConfirm+0x58>
 804aef0:	f7fd fef4 	bl	8048cdc <SecureElementGetJoinEui>
 804aef4:	e7fa      	b.n	804aeec <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 804aef6:	4b4f      	ldr	r3, [pc, #316]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804aef8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804aefc:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 804af00:	e7e9      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 804af02:	4b4c      	ldr	r3, [pc, #304]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af04:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804af0a:	6063      	str	r3, [r4, #4]
 804af0c:	e7e4      	b.n	804aed8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 804af0e:	4b49      	ldr	r3, [pc, #292]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af10:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804af16:	e7f8      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 804af18:	4b46      	ldr	r3, [pc, #280]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af1a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af1e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 804af22:	e7d8      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 804af24:	4b43      	ldr	r3, [pc, #268]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af26:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af2a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 804af2e:	e7d2      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            getPhy.Attribute = PHY_CHANNELS;
 804af30:	a902      	add	r1, sp, #8
 804af32:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804af34:	f801 3d08 	strb.w	r3, [r1, #-8]!
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804af38:	4b3e      	ldr	r3, [pc, #248]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af3a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af3e:	7818      	ldrb	r0, [r3, #0]
 804af40:	f001 fc6d 	bl	804c81e <RegionGetPhyParam>
 804af44:	e7d2      	b.n	804aeec <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 804af46:	4b3b      	ldr	r3, [pc, #236]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af48:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af4c:	3404      	adds	r4, #4
 804af4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804af52:	e893 0003 	ldmia.w	r3, {r0, r1}
 804af56:	e884 0003 	stmia.w	r4, {r0, r1}
 804af5a:	e7bd      	b.n	804aed8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 804af5c:	4b35      	ldr	r3, [pc, #212]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af5e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af62:	3404      	adds	r4, #4
 804af64:	3328      	adds	r3, #40	; 0x28
 804af66:	e7f4      	b.n	804af52 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 804af68:	4b32      	ldr	r3, [pc, #200]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af6a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af6e:	3404      	adds	r4, #4
 804af70:	f503 7392 	add.w	r3, r3, #292	; 0x124
 804af74:	e7ed      	b.n	804af52 <LoRaMacMibGetRequestConfirm+0xd2>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 804af76:	4b2f      	ldr	r3, [pc, #188]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af78:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af7c:	3404      	adds	r4, #4
 804af7e:	3330      	adds	r3, #48	; 0x30
 804af80:	e7e7      	b.n	804af52 <LoRaMacMibGetRequestConfirm+0xd2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 804af82:	a902      	add	r1, sp, #8
 804af84:	231b      	movs	r3, #27
 804af86:	e7d5      	b.n	804af34 <LoRaMacMibGetRequestConfirm+0xb4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 804af88:	a902      	add	r1, sp, #8
 804af8a:	231a      	movs	r3, #26
 804af8c:	e7d2      	b.n	804af34 <LoRaMacMibGetRequestConfirm+0xb4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 804af8e:	4b29      	ldr	r3, [pc, #164]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af90:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804af94:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 804af98:	e79d      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 804af9a:	4b26      	ldr	r3, [pc, #152]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804af9c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 804afa4:	e7b1      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 804afa6:	4b23      	ldr	r3, [pc, #140]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afa8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 804afb0:	e7ab      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 804afb2:	4b20      	ldr	r3, [pc, #128]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afb4:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 804afbc:	e7a5      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 804afbe:	4b1d      	ldr	r3, [pc, #116]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afc0:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 804afc8:	e79f      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 804afca:	4b1a      	ldr	r3, [pc, #104]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afcc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 804afd4:	e799      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 804afd6:	4b17      	ldr	r3, [pc, #92]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afd8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afdc:	795b      	ldrb	r3, [r3, #5]
 804afde:	e77a      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 804afe0:	4b14      	ldr	r3, [pc, #80]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804afe2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804afe6:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 804afea:	e774      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.ChannelsTxPower = TX_POWER_0/*MacCtx.NvmCtx->MacParams.ChannelsTxPower*/;
 804afec:	2000      	movs	r0, #0
 804afee:	7120      	strb	r0, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 804aff0:	b002      	add	sp, #8
 804aff2:	bd10      	pop	{r4, pc}
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 804aff4:	4b0f      	ldr	r3, [pc, #60]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804aff6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804affa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804affe:	e784      	b.n	804af0a <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 804b000:	4b0c      	ldr	r3, [pc, #48]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b002:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b006:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 804b00a:	e764      	b.n	804aed6 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 804b00c:	4b09      	ldr	r3, [pc, #36]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b00e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b012:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804b016:	6063      	str	r3, [r4, #4]
 804b018:	e75e      	b.n	804aed8 <LoRaMacMibGetRequestConfirm+0x58>
            mibGet->Param.Contexts = GetCtxs( );
 804b01a:	f7fe ffd1 	bl	8049fc0 <GetCtxs>
 804b01e:	e765      	b.n	804aeec <LoRaMacMibGetRequestConfirm+0x6c>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 804b020:	4b04      	ldr	r3, [pc, #16]	; (804b034 <LoRaMacMibGetRequestConfirm+0x1b4>)
 804b022:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 804b026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804b028:	e7f5      	b.n	804b016 <LoRaMacMibGetRequestConfirm+0x196>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 804b02a:	f000 fc78 	bl	804b91e <LoRaMacClassBMibGetRequestConfirm>
            break;
 804b02e:	e7df      	b.n	804aff0 <LoRaMacMibGetRequestConfirm+0x170>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b030:	2003      	movs	r0, #3
 804b032:	e7dd      	b.n	804aff0 <LoRaMacMibGetRequestConfirm+0x170>
 804b034:	20002834 	.word	0x20002834

0804b038 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 804b038:	b530      	push	{r4, r5, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 804b03a:	4604      	mov	r4, r0
{
 804b03c:	b087      	sub	sp, #28
    if( mibSet == NULL )
 804b03e:	b930      	cbnz	r0, 804b04e <LoRaMacMibSetRequestConfirm+0x16>
    {
    	PRINTF("LORAMAC_STATUS_PARAMETER_INVALID\r\n");
 804b040:	4897      	ldr	r0, [pc, #604]	; (804b2a0 <LoRaMacMibSetRequestConfirm+0x268>)
 804b042:	f003 fa6f 	bl	804e524 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b046:	2403      	movs	r4, #3
        }
    }
    EventRegionNvmCtxChanged( );
    EventMacNvmCtxChanged( );
    return status;
}
 804b048:	4620      	mov	r0, r4
 804b04a:	b007      	add	sp, #28
 804b04c:	bd30      	pop	{r4, r5, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 804b04e:	4d95      	ldr	r5, [pc, #596]	; (804b2a4 <LoRaMacMibSetRequestConfirm+0x26c>)
 804b050:	f8d5 3344 	ldr.w	r3, [r5, #836]	; 0x344
 804b054:	079b      	lsls	r3, r3, #30
 804b056:	d504      	bpl.n	804b062 <LoRaMacMibSetRequestConfirm+0x2a>
    	PRINTF("LORAMAC_STATUS_BUSY");
 804b058:	4893      	ldr	r0, [pc, #588]	; (804b2a8 <LoRaMacMibSetRequestConfirm+0x270>)
 804b05a:	f003 fa63 	bl	804e524 <TraceSend>
        return LORAMAC_STATUS_BUSY;
 804b05e:	2401      	movs	r4, #1
 804b060:	e7f2      	b.n	804b048 <LoRaMacMibSetRequestConfirm+0x10>
    switch( mibSet->Type )
 804b062:	7803      	ldrb	r3, [r0, #0]
 804b064:	2b35      	cmp	r3, #53	; 0x35
 804b066:	f200 8233 	bhi.w	804b4d0 <LoRaMacMibSetRequestConfirm+0x498>
 804b06a:	e8df f013 	tbh	[pc, r3, lsl #1]
 804b06e:	0036      	.short	0x0036
 804b070:	0044003b 	.word	0x0044003b
 804b074:	0053004f 	.word	0x0053004f
 804b078:	005e0059 	.word	0x005e0059
 804b07c:	006d0063 	.word	0x006d0063
 804b080:	00770072 	.word	0x00770072
 804b084:	0081007c 	.word	0x0081007c
 804b088:	008b0086 	.word	0x008b0086
 804b08c:	00950090 	.word	0x00950090
 804b090:	009f009a 	.word	0x009f009a
 804b094:	00a900a4 	.word	0x00a900a4
 804b098:	00b300ae 	.word	0x00b300ae
 804b09c:	00bd00b8 	.word	0x00bd00b8
 804b0a0:	00c700c2 	.word	0x00c700c2
 804b0a4:	00d300cd 	.word	0x00d300cd
 804b0a8:	00e200d9 	.word	0x00e200d9
 804b0ac:	00e80231 	.word	0x00e80231
 804b0b0:	01210103 	.word	0x01210103
 804b0b4:	017c0158 	.word	0x017c0158
 804b0b8:	0180016d 	.word	0x0180016d
 804b0bc:	0190018a 	.word	0x0190018a
 804b0c0:	019c0196 	.word	0x019c0196
 804b0c4:	01a801a2 	.word	0x01a801a2
 804b0c8:	01eb01bb 	.word	0x01eb01bb
 804b0cc:	020401d3 	.word	0x020401d3
 804b0d0:	0212020b 	.word	0x0212020b
 804b0d4:	021d0218 	.word	0x021d0218
 804b0d8:	0224      	.short	0x0224
            status = SwitchClass( mibSet->Param.Class );
 804b0da:	7900      	ldrb	r0, [r0, #4]
 804b0dc:	f7fe f84a 	bl	8049174 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804b0e0:	4604      	mov	r4, r0
            break;
 804b0e2:	e00e      	b.n	804b102 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 804b0e4:	7903      	ldrb	r3, [r0, #4]
 804b0e6:	2b02      	cmp	r3, #2
 804b0e8:	d00a      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 804b0ea:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804b0ee:	f882 31d4 	strb.w	r3, [r2, #468]	; 0x1d4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 804b0f2:	2400      	movs	r4, #0
 804b0f4:	e005      	b.n	804b102 <LoRaMacMibSetRequestConfirm+0xca>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 804b0f6:	6840      	ldr	r0, [r0, #4]
 804b0f8:	f7fd fdc8 	bl	8048c8c <SecureElementSetDevEui>
 804b0fc:	2800      	cmp	r0, #0
 804b0fe:	d0f8      	beq.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 804b100:	2403      	movs	r4, #3
    EventRegionNvmCtxChanged( );
 804b102:	f7fd fe3c 	bl	8048d7e <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 804b106:	f7fd fe37 	bl	8048d78 <EventMacNvmCtxChanged>
    return status;
 804b10a:	e79d      	b.n	804b048 <LoRaMacMibSetRequestConfirm+0x10>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 804b10c:	6840      	ldr	r0, [r0, #4]
 804b10e:	f7fd fdd3 	bl	8048cb8 <SecureElementSetJoinEui>
 804b112:	e7f3      	b.n	804b0fc <LoRaMacMibSetRequestConfirm+0xc4>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 804b114:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b118:	7902      	ldrb	r2, [r0, #4]
 804b11a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 804b11e:	e7e8      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 804b120:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b124:	6842      	ldr	r2, [r0, #4]
 804b126:	649a      	str	r2, [r3, #72]	; 0x48
 804b128:	e7e3      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 804b12a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b12e:	6842      	ldr	r2, [r0, #4]
 804b130:	64da      	str	r2, [r3, #76]	; 0x4c
 804b132:	e7de      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.GenAppKey != NULL )
 804b134:	6841      	ldr	r1, [r0, #4]
 804b136:	2900      	cmp	r1, #0
 804b138:	d0e2      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 804b13a:	2001      	movs	r0, #1
 804b13c:	f001 f94e 	bl	804c3dc <LoRaMacCryptoSetKey>
 804b140:	2800      	cmp	r0, #0
 804b142:	d0d6      	beq.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 804b144:	2411      	movs	r4, #17
 804b146:	e77f      	b.n	804b048 <LoRaMacMibSetRequestConfirm+0x10>
            if( mibSet->Param.AppKey != NULL )
 804b148:	6841      	ldr	r1, [r0, #4]
 804b14a:	2900      	cmp	r1, #0
 804b14c:	d0d8      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 804b14e:	2000      	movs	r0, #0
 804b150:	e7f4      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkKey != NULL )
 804b152:	6841      	ldr	r1, [r0, #4]
 804b154:	2900      	cmp	r1, #0
 804b156:	d0d3      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 804b158:	2002      	movs	r0, #2
 804b15a:	e7ef      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSIntKey != NULL )
 804b15c:	6841      	ldr	r1, [r0, #4]
 804b15e:	2900      	cmp	r1, #0
 804b160:	d0ce      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 804b162:	2003      	movs	r0, #3
 804b164:	e7ea      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.JSEncKey != NULL )
 804b166:	6841      	ldr	r1, [r0, #4]
 804b168:	2900      	cmp	r1, #0
 804b16a:	d0c9      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 804b16c:	2004      	movs	r0, #4
 804b16e:	e7e5      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.FNwkSIntKey != NULL )
 804b170:	6841      	ldr	r1, [r0, #4]
 804b172:	2900      	cmp	r1, #0
 804b174:	d0c4      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 804b176:	2005      	movs	r0, #5
 804b178:	e7e0      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.SNwkSIntKey != NULL )
 804b17a:	6841      	ldr	r1, [r0, #4]
 804b17c:	2900      	cmp	r1, #0
 804b17e:	d0bf      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 804b180:	2006      	movs	r0, #6
 804b182:	e7db      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.NwkSEncKey != NULL )
 804b184:	6841      	ldr	r1, [r0, #4]
 804b186:	2900      	cmp	r1, #0
 804b188:	d0ba      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 804b18a:	2007      	movs	r0, #7
 804b18c:	e7d6      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.AppSKey != NULL )
 804b18e:	6841      	ldr	r1, [r0, #4]
 804b190:	2900      	cmp	r1, #0
 804b192:	d0b5      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 804b194:	2008      	movs	r0, #8
 804b196:	e7d1      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKEKey != NULL )
 804b198:	6841      	ldr	r1, [r0, #4]
 804b19a:	2900      	cmp	r1, #0
 804b19c:	d0b0      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 804b19e:	207f      	movs	r0, #127	; 0x7f
 804b1a0:	e7cc      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey0 != NULL )
 804b1a2:	6841      	ldr	r1, [r0, #4]
 804b1a4:	2900      	cmp	r1, #0
 804b1a6:	d0ab      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 804b1a8:	2080      	movs	r0, #128	; 0x80
 804b1aa:	e7c7      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey0 != NULL )
 804b1ac:	6841      	ldr	r1, [r0, #4]
 804b1ae:	2900      	cmp	r1, #0
 804b1b0:	d0a6      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 804b1b2:	2081      	movs	r0, #129	; 0x81
 804b1b4:	e7c2      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey0 != NULL )
 804b1b6:	6841      	ldr	r1, [r0, #4]
 804b1b8:	2900      	cmp	r1, #0
 804b1ba:	d0a1      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 804b1bc:	2082      	movs	r0, #130	; 0x82
 804b1be:	e7bd      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey1 != NULL )
 804b1c0:	6841      	ldr	r1, [r0, #4]
 804b1c2:	2900      	cmp	r1, #0
 804b1c4:	d09c      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 804b1c6:	2083      	movs	r0, #131	; 0x83
 804b1c8:	e7b8      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey1 != NULL )
 804b1ca:	6841      	ldr	r1, [r0, #4]
 804b1cc:	2900      	cmp	r1, #0
 804b1ce:	d097      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 804b1d0:	2084      	movs	r0, #132	; 0x84
 804b1d2:	e7b3      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey1 != NULL )
 804b1d4:	6841      	ldr	r1, [r0, #4]
 804b1d6:	2900      	cmp	r1, #0
 804b1d8:	d092      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 804b1da:	2085      	movs	r0, #133	; 0x85
 804b1dc:	e7ae      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey2 != NULL )
 804b1de:	6841      	ldr	r1, [r0, #4]
 804b1e0:	2900      	cmp	r1, #0
 804b1e2:	d08d      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 804b1e4:	2086      	movs	r0, #134	; 0x86
 804b1e6:	e7a9      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey2 != NULL )
 804b1e8:	6841      	ldr	r1, [r0, #4]
 804b1ea:	2900      	cmp	r1, #0
 804b1ec:	d088      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 804b1ee:	2087      	movs	r0, #135	; 0x87
 804b1f0:	e7a4      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey2 != NULL )
 804b1f2:	6841      	ldr	r1, [r0, #4]
 804b1f4:	2900      	cmp	r1, #0
 804b1f6:	d083      	beq.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 804b1f8:	2088      	movs	r0, #136	; 0x88
 804b1fa:	e79f      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McKey3 != NULL )
 804b1fc:	6841      	ldr	r1, [r0, #4]
 804b1fe:	2900      	cmp	r1, #0
 804b200:	f43f af7e 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 804b204:	2089      	movs	r0, #137	; 0x89
 804b206:	e799      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McAppSKey3 != NULL )
 804b208:	6841      	ldr	r1, [r0, #4]
 804b20a:	2900      	cmp	r1, #0
 804b20c:	f43f af78 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 804b210:	208a      	movs	r0, #138	; 0x8a
 804b212:	e793      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            if( mibSet->Param.McNwkSKey3 != NULL )
 804b214:	6841      	ldr	r1, [r0, #4]
 804b216:	2900      	cmp	r1, #0
 804b218:	f43f af72 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 804b21c:	208b      	movs	r0, #139	; 0x8b
 804b21e:	e78d      	b.n	804b13c <LoRaMacMibSetRequestConfirm+0x104>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 804b220:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b224:	7900      	ldrb	r0, [r0, #4]
 804b226:	f883 00f1 	strb.w	r0, [r3, #241]	; 0xf1
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 804b22a:	4b20      	ldr	r3, [pc, #128]	; (804b2ac <LoRaMacMibSetRequestConfirm+0x274>)
 804b22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804b22e:	4798      	blx	r3
 804b230:	e75f      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 804b232:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b236:	7902      	ldrb	r2, [r0, #4]
 804b238:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 804b23c:	e759      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804b23e:	7a03      	ldrb	r3, [r0, #8]
 804b240:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b244:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b248:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b24c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b250:	a903      	add	r1, sp, #12
 804b252:	2207      	movs	r2, #7
 804b254:	7818      	ldrb	r0, [r3, #0]
 804b256:	f001 faff 	bl	804c858 <RegionVerify>
 804b25a:	2800      	cmp	r0, #0
 804b25c:	f43f af50 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 804b260:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b264:	f503 738e 	add.w	r3, r3, #284	; 0x11c
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804b268:	3404      	adds	r4, #4
 804b26a:	e894 0003 	ldmia.w	r4, {r0, r1}
 804b26e:	e883 0003 	stmia.w	r3, {r0, r1}
 804b272:	e73e      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 804b274:	7a03      	ldrb	r3, [r0, #8]
 804b276:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b27a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b27e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b282:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b286:	a903      	add	r1, sp, #12
 804b288:	2207      	movs	r2, #7
 804b28a:	7818      	ldrb	r0, [r3, #0]
 804b28c:	f001 fae4 	bl	804c858 <RegionVerify>
 804b290:	2800      	cmp	r0, #0
 804b292:	f43f af35 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 804b296:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b29a:	3328      	adds	r3, #40	; 0x28
 804b29c:	e7e4      	b.n	804b268 <LoRaMacMibSetRequestConfirm+0x230>
 804b29e:	bf00      	nop
 804b2a0:	0805274b 	.word	0x0805274b
 804b2a4:	20002834 	.word	0x20002834
 804b2a8:	0805276e 	.word	0x0805276e
 804b2ac:	08052140 	.word	0x08052140
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804b2b0:	7a03      	ldrb	r3, [r0, #8]
 804b2b2:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b2b6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b2ba:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b2be:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b2c2:	a903      	add	r1, sp, #12
 804b2c4:	2207      	movs	r2, #7
 804b2c6:	7818      	ldrb	r0, [r3, #0]
 804b2c8:	f001 fac6 	bl	804c858 <RegionVerify>
 804b2cc:	2800      	cmp	r0, #0
 804b2ce:	f43f af17 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 804b2d2:	3404      	adds	r4, #4
 804b2d4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b2d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 804b2dc:	f503 7292 	add.w	r2, r3, #292	; 0x124
 804b2e0:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 804b2e4:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 804b2e8:	2a02      	cmp	r2, #2
 804b2ea:	f47f af02 	bne.w	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
 804b2ee:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 804b2f2:	2b00      	cmp	r3, #0
 804b2f4:	f43f aefd 	beq.w	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
                    Radio.Sleep( );
 804b2f8:	4b77      	ldr	r3, [pc, #476]	; (804b4d8 <LoRaMacMibSetRequestConfirm+0x4a0>)
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804b2fa:	4c78      	ldr	r4, [pc, #480]	; (804b4dc <LoRaMacMibSetRequestConfirm+0x4a4>)
                    Radio.Sleep( );
 804b2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804b2fe:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 804b300:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b304:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 804b308:	f993 1128 	ldrsb.w	r1, [r3, #296]	; 0x128
 804b30c:	7818      	ldrb	r0, [r3, #0]
 804b30e:	9400      	str	r4, [sp, #0]
 804b310:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804b314:	f001 fab6 	bl	804c884 <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 804b318:	f7fd fe66 	bl	8048fe8 <OpenContinuousRxCWindow>
 804b31c:	e6e9      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 804b31e:	7a03      	ldrb	r3, [r0, #8]
 804b320:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 804b324:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b328:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 804b32c:	f88d 200d 	strb.w	r2, [sp, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 804b330:	a903      	add	r1, sp, #12
 804b332:	2207      	movs	r2, #7
 804b334:	7818      	ldrb	r0, [r3, #0]
 804b336:	f001 fa8f 	bl	804c858 <RegionVerify>
 804b33a:	2800      	cmp	r0, #0
 804b33c:	f43f aee0 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 804b340:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b344:	3330      	adds	r3, #48	; 0x30
 804b346:	e78f      	b.n	804b268 <LoRaMacMibSetRequestConfirm+0x230>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 804b348:	6843      	ldr	r3, [r0, #4]
 804b34a:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 804b34c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804b34e:	f88d 3014 	strb.w	r3, [sp, #20]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 804b352:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b356:	a904      	add	r1, sp, #16
 804b358:	7818      	ldrb	r0, [r3, #0]
 804b35a:	f001 fa8c 	bl	804c876 <RegionChanMaskSet>
 804b35e:	2800      	cmp	r0, #0
 804b360:	f47f aec7 	bne.w	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
 804b364:	e6cc      	b.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 804b366:	6843      	ldr	r3, [r0, #4]
 804b368:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 804b36a:	2300      	movs	r3, #0
 804b36c:	e7ef      	b.n	804b34e <LoRaMacMibSetRequestConfirm+0x316>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 804b36e:	7903      	ldrb	r3, [r0, #4]
 804b370:	1e5a      	subs	r2, r3, #1
 804b372:	2a0e      	cmp	r2, #14
 804b374:	f63f aec4 	bhi.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 804b378:	f8d5 2488 	ldr.w	r2, [r5, #1160]	; 0x488
 804b37c:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
 804b380:	e6b7      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 804b382:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b386:	6842      	ldr	r2, [r0, #4]
 804b388:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 804b38c:	e6b1      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 804b38e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b392:	6842      	ldr	r2, [r0, #4]
 804b394:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 804b398:	e6ab      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 804b39a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b39e:	6842      	ldr	r2, [r0, #4]
 804b3a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 804b3a4:	e6a5      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 804b3a6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b3aa:	6842      	ldr	r2, [r0, #4]
 804b3ac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 804b3b0:	e69f      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 804b3b2:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b3b6:	6842      	ldr	r2, [r0, #4]
 804b3b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 804b3bc:	e699      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 804b3be:	a906      	add	r1, sp, #24
 804b3c0:	7903      	ldrb	r3, [r0, #4]
 804b3c2:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 804b3c6:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b3ca:	2206      	movs	r2, #6
 804b3cc:	7818      	ldrb	r0, [r3, #0]
 804b3ce:	f001 fa43 	bl	804c858 <RegionVerify>
 804b3d2:	2800      	cmp	r0, #0
 804b3d4:	f43f ae94 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b3d8:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b3dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b3e0:	715a      	strb	r2, [r3, #5]
 804b3e2:	e686      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 804b3e4:	7903      	ldrb	r3, [r0, #4]
 804b3e6:	f88d 300c 	strb.w	r3, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b3ea:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b3ee:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804b3f2:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804b3f6:	a903      	add	r1, sp, #12
 804b3f8:	2205      	movs	r2, #5
 804b3fa:	7818      	ldrb	r0, [r3, #0]
 804b3fc:	f001 fa2c 	bl	804c858 <RegionVerify>
 804b400:	2800      	cmp	r0, #0
 804b402:	f43f ae7d 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b406:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b40a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b40e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 804b412:	e66e      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 804b414:	a906      	add	r1, sp, #24
 804b416:	7903      	ldrb	r3, [r0, #4]
 804b418:	f801 3d0c 	strb.w	r3, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 804b41c:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b420:	220a      	movs	r2, #10
 804b422:	7818      	ldrb	r0, [r3, #0]
 804b424:	f001 fa18 	bl	804c858 <RegionVerify>
 804b428:	b930      	cbnz	r0, 804b438 <LoRaMacMibSetRequestConfirm+0x400>
            	PPRINTF("erro");
 804b42a:	4c2d      	ldr	r4, [pc, #180]	; (804b4e0 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804b42c:	4620      	mov	r0, r4
 804b42e:	f003 f879 	bl	804e524 <TraceSend>
 804b432:	2800      	cmp	r0, #0
 804b434:	d1fa      	bne.n	804b42c <LoRaMacMibSetRequestConfirm+0x3f4>
 804b436:	e663      	b.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 804b438:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b43c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b440:	711a      	strb	r2, [r3, #4]
 804b442:	e656      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804b444:	a906      	add	r1, sp, #24
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804b446:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
            verify.TxPower = TX_POWER_0/*mibSet->Param.ChannelsTxPower*/;
 804b44a:	2400      	movs	r4, #0
 804b44c:	f801 4d0c 	strb.w	r4, [r1, #-12]!
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 804b450:	2209      	movs	r2, #9
 804b452:	7818      	ldrb	r0, [r3, #0]
 804b454:	f001 fa00 	bl	804c858 <RegionVerify>
 804b458:	b930      	cbnz	r0, 804b468 <LoRaMacMibSetRequestConfirm+0x430>
            	PPRINTF("erro");
 804b45a:	4c21      	ldr	r4, [pc, #132]	; (804b4e0 <LoRaMacMibSetRequestConfirm+0x4a8>)
 804b45c:	4620      	mov	r0, r4
 804b45e:	f003 f861 	bl	804e524 <TraceSend>
 804b462:	2800      	cmp	r0, #0
 804b464:	d1fa      	bne.n	804b45c <LoRaMacMibSetRequestConfirm+0x424>
 804b466:	e64b      	b.n	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 804b468:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b46c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b470:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 804b474:	e645      	b.n	804b102 <LoRaMacMibSetRequestConfirm+0xca>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 804b476:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b47a:	6842      	ldr	r2, [r0, #4]
 804b47c:	609a      	str	r2, [r3, #8]
 804b47e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 804b482:	e636      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 804b484:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b488:	7902      	ldrb	r2, [r0, #4]
 804b48a:	731a      	strb	r2, [r3, #12]
 804b48c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 804b490:	e62f      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 804b492:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b496:	6842      	ldr	r2, [r0, #4]
 804b498:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 804b49c:	e629      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 804b49e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b4a2:	6842      	ldr	r2, [r0, #4]
 804b4a4:	641a      	str	r2, [r3, #64]	; 0x40
 804b4a6:	e624      	b.n	804b0f2 <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.Contexts != 0 )
 804b4a8:	6840      	ldr	r0, [r0, #4]
 804b4aa:	2800      	cmp	r0, #0
 804b4ac:	f43f ae28 	beq.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                status = RestoreCtxs( mibSet->Param.Contexts );
 804b4b0:	f7fe fdbc 	bl	804a02c <RestoreCtxs>
 804b4b4:	e614      	b.n	804b0e0 <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 804b4b6:	7983      	ldrb	r3, [r0, #6]
 804b4b8:	2b01      	cmp	r3, #1
 804b4ba:	f63f ae21 	bhi.w	804b100 <LoRaMacMibSetRequestConfirm+0xc8>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 804b4be:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b4c2:	6842      	ldr	r2, [r0, #4]
 804b4c4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 804b4c8:	6840      	ldr	r0, [r0, #4]
 804b4ca:	f000 fdc7 	bl	804c05c <LoRaMacCryptoSetLrWanVersion>
 804b4ce:	e637      	b.n	804b140 <LoRaMacMibSetRequestConfirm+0x108>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 804b4d0:	f000 fa27 	bl	804b922 <LoRaMacMibClassBSetRequestConfirm>
 804b4d4:	e604      	b.n	804b0e0 <LoRaMacMibSetRequestConfirm+0xa8>
 804b4d6:	bf00      	nop
 804b4d8:	08052140 	.word	0x08052140
 804b4dc:	20002c18 	.word	0x20002c18
 804b4e0:	08052782 	.word	0x08052782

0804b4e4 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 804b4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 804b4e6:	2300      	movs	r3, #0
 804b4e8:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 804b4ec:	4606      	mov	r6, r0
 804b4ee:	b930      	cbnz	r0, 804b4fe <LoRaMacMlmeRequest+0x1a>
    {
    	PRINTF("INVALID\n\r");
 804b4f0:	4862      	ldr	r0, [pc, #392]	; (804b67c <LoRaMacMlmeRequest+0x198>)
 804b4f2:	f003 f817 	bl	804e524 <TraceSend>
    	return LORAMAC_STATUS_PARAMETER_INVALID;
 804b4f6:	2403      	movs	r4, #3
    	PRINTF("LORA_MAC_OK\n\r");
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 804b4f8:	4620      	mov	r0, r4
 804b4fa:	b003      	add	sp, #12
 804b4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 804b4fe:	f7fe f9dd 	bl	80498bc <LoRaMacIsBusy>
 804b502:	b120      	cbz	r0, 804b50e <LoRaMacMlmeRequest+0x2a>
    	PRINTF("BUSY1\n\r");
 804b504:	485e      	ldr	r0, [pc, #376]	; (804b680 <LoRaMacMlmeRequest+0x19c>)
    	PRINTF("BUSY2\n\r");
 804b506:	f003 f80d 	bl	804e524 <TraceSend>
                return LORAMAC_STATUS_BUSY;
 804b50a:	2401      	movs	r4, #1
 804b50c:	e7f4      	b.n	804b4f8 <LoRaMacMlmeRequest+0x14>
    if( LoRaMacConfirmQueueIsFull( ) == true )
 804b50e:	f000 fc1f 	bl	804bd50 <LoRaMacConfirmQueueIsFull>
 804b512:	b108      	cbz	r0, 804b518 <LoRaMacMlmeRequest+0x34>
    	PRINTF("BUSY2\n\r");
 804b514:	485b      	ldr	r0, [pc, #364]	; (804b684 <LoRaMacMlmeRequest+0x1a0>)
 804b516:	e7f6      	b.n	804b506 <LoRaMacMlmeRequest+0x22>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804b518:	f000 fc14 	bl	804bd44 <LoRaMacConfirmQueueGetCnt>
 804b51c:	4604      	mov	r4, r0
 804b51e:	b938      	cbnz	r0, 804b530 <LoRaMacMlmeRequest+0x4c>
    	PRINTF("gETcnT\n\r");
 804b520:	4859      	ldr	r0, [pc, #356]	; (804b688 <LoRaMacMlmeRequest+0x1a4>)
 804b522:	f002 ffff 	bl	804e524 <TraceSend>
    	memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 804b526:	2214      	movs	r2, #20
 804b528:	4621      	mov	r1, r4
 804b52a:	4858      	ldr	r0, [pc, #352]	; (804b68c <LoRaMacMlmeRequest+0x1a8>)
 804b52c:	f003 f873 	bl	804e616 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b530:	4d57      	ldr	r5, [pc, #348]	; (804b690 <LoRaMacMlmeRequest+0x1ac>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 804b532:	f895 2485 	ldrb.w	r2, [r5, #1157]	; 0x485
 804b536:	f042 0204 	orr.w	r2, r2, #4
 804b53a:	f885 2485 	strb.w	r2, [r5, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 804b53e:	7832      	ldrb	r2, [r6, #0]
 804b540:	f88d 2004 	strb.w	r2, [sp, #4]
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b544:	2301      	movs	r3, #1
    queueElement.RestrictCommonReadyToHandle = false;
 804b546:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b548:	f885 3455 	strb.w	r3, [r5, #1109]	; 0x455
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b54c:	f88d 3005 	strb.w	r3, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 804b550:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( mlmeRequest->Type )
 804b554:	2a0d      	cmp	r2, #13
 804b556:	f200 808d 	bhi.w	804b674 <LoRaMacMlmeRequest+0x190>
 804b55a:	e8df f002 	tbb	[pc, r2]
 804b55e:	8b07      	.short	0x8b07
 804b560:	5b483d8b 	.word	0x5b483d8b
 804b564:	648b8b8b 	.word	0x648b8b8b
 804b568:	7b6b7f8b 	.word	0x7b6b7f8b
        	PRINTF("JOIN\n\r");
 804b56c:	4849      	ldr	r0, [pc, #292]	; (804b694 <LoRaMacMlmeRequest+0x1b0>)
 804b56e:	f002 ffd9 	bl	804e524 <TraceSend>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 804b572:	f8d5 2344 	ldr.w	r2, [r5, #836]	; 0x344
 804b576:	f012 0420 	ands.w	r4, r2, #32
 804b57a:	d1c6      	bne.n	804b50a <LoRaMacMlmeRequest+0x26>
            ResetMacParameters( );
 804b57c:	f7fd fcd0 	bl	8048f20 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804b580:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804b584:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804b588:	7838      	ldrb	r0, [r7, #0]
 804b58a:	4622      	mov	r2, r4
 804b58c:	f001 f9cd 	bl	804c92a <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804b590:	2307      	movs	r3, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 804b592:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
            status = SendReJoinReq( JOIN_REQ );
 804b596:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 804b598:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 804b59c:	f7fe fca2 	bl	8049ee4 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 804b5a0:	4604      	mov	r4, r0
 804b5a2:	b368      	cbz	r0, 804b600 <LoRaMacMlmeRequest+0x11c>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 804b5a4:	f8d5 7488 	ldr.w	r7, [r5, #1160]	; 0x488
 804b5a8:	f996 1004 	ldrsb.w	r1, [r6, #4]
 804b5ac:	7838      	ldrb	r0, [r7, #0]
 804b5ae:	2201      	movs	r2, #1
 804b5b0:	f001 f9bb 	bl	804c92a <RegionAlternateDr>
 804b5b4:	f887 00f9 	strb.w	r0, [r7, #249]	; 0xf9
    	PRINTF("LORA_MAC_NOT_OK\n\r");
 804b5b8:	4837      	ldr	r0, [pc, #220]	; (804b698 <LoRaMacMlmeRequest+0x1b4>)
 804b5ba:	f002 ffb3 	bl	804e524 <TraceSend>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 804b5be:	f000 fbc1 	bl	804bd44 <LoRaMacConfirmQueueGetCnt>
 804b5c2:	2800      	cmp	r0, #0
 804b5c4:	d198      	bne.n	804b4f8 <LoRaMacMlmeRequest+0x14>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804b5c6:	f895 3485 	ldrb.w	r3, [r5, #1157]	; 0x485
            MacCtx.NodeAckRequested = false;
 804b5ca:	f885 0418 	strb.w	r0, [r5, #1048]	; 0x418
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804b5ce:	f360 0382 	bfi	r3, r0, #2, #1
 804b5d2:	f885 3485 	strb.w	r3, [r5, #1157]	; 0x485
 804b5d6:	e78f      	b.n	804b4f8 <LoRaMacMlmeRequest+0x14>
        	PRINTF("LINK CHECK");
 804b5d8:	4830      	ldr	r0, [pc, #192]	; (804b69c <LoRaMacMlmeRequest+0x1b8>)
 804b5da:	f002 ffa3 	bl	804e524 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b5de:	2200      	movs	r2, #0
 804b5e0:	4669      	mov	r1, sp
 804b5e2:	2002      	movs	r0, #2
 804b5e4:	f000 f9d6 	bl	804b994 <LoRaMacCommandsAddCmd>
 804b5e8:	b150      	cbz	r0, 804b600 <LoRaMacMlmeRequest+0x11c>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804b5ea:	2413      	movs	r4, #19
 804b5ec:	e7e4      	b.n	804b5b8 <LoRaMacMlmeRequest+0xd4>
        	PRINTF("TXCW\n\r");
 804b5ee:	482c      	ldr	r0, [pc, #176]	; (804b6a0 <LoRaMacMlmeRequest+0x1bc>)
 804b5f0:	f002 ff98 	bl	804e524 <TraceSend>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 804b5f4:	88b0      	ldrh	r0, [r6, #4]
 804b5f6:	f7fe fca5 	bl	8049f44 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804b5fa:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 804b5fc:	2800      	cmp	r0, #0
 804b5fe:	d1db      	bne.n	804b5b8 <LoRaMacMlmeRequest+0xd4>
    	PRINTF("LORA_MAC_OK\n\r");
 804b600:	4828      	ldr	r0, [pc, #160]	; (804b6a4 <LoRaMacMlmeRequest+0x1c0>)
 804b602:	f002 ff8f 	bl	804e524 <TraceSend>
        LoRaMacConfirmQueueAdd( &queueElement );
 804b606:	a801      	add	r0, sp, #4
 804b608:	f000 fadc 	bl	804bbc4 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 804b60c:	2400      	movs	r4, #0
 804b60e:	f7fd fbb3 	bl	8048d78 <EventMacNvmCtxChanged>
 804b612:	e771      	b.n	804b4f8 <LoRaMacMlmeRequest+0x14>
        	PRINTF("TXCW_1\n\r");
 804b614:	4824      	ldr	r0, [pc, #144]	; (804b6a8 <LoRaMacMlmeRequest+0x1c4>)
 804b616:	f002 ff85 	bl	804e524 <TraceSend>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 804b61a:	7b32      	ldrb	r2, [r6, #12]
 804b61c:	68b1      	ldr	r1, [r6, #8]
 804b61e:	88b0      	ldrh	r0, [r6, #4]
 804b620:	f7fe fcb8 	bl	8049f94 <SetTxContinuousWave1>
 804b624:	e7e9      	b.n	804b5fa <LoRaMacMlmeRequest+0x116>
        	PRINTF("Device Time\n\r");
 804b626:	4821      	ldr	r0, [pc, #132]	; (804b6ac <LoRaMacMlmeRequest+0x1c8>)
 804b628:	f002 ff7c 	bl	804e524 <TraceSend>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b62c:	2200      	movs	r2, #0
 804b62e:	4669      	mov	r1, sp
 804b630:	200d      	movs	r0, #13
 804b632:	e7d7      	b.n	804b5e4 <LoRaMacMlmeRequest+0x100>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 804b634:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
 804b638:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 804b63c:	b9d3      	cbnz	r3, 804b674 <LoRaMacMlmeRequest+0x190>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 804b63e:	7934      	ldrb	r4, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 804b640:	f004 0007 	and.w	r0, r4, #7
 804b644:	f000 f966 	bl	804b914 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 804b648:	a902      	add	r1, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804b64a:	2201      	movs	r2, #1
                macCmdPayload[0] = value;
 804b64c:	f801 4d08 	strb.w	r4, [r1, #-8]!
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 804b650:	2010      	movs	r0, #16
 804b652:	e7c7      	b.n	804b5e4 <LoRaMacMlmeRequest+0x100>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 804b654:	2200      	movs	r2, #0
 804b656:	4669      	mov	r1, sp
 804b658:	2012      	movs	r0, #18
 804b65a:	e7c3      	b.n	804b5e4 <LoRaMacMlmeRequest+0x100>
            queueElement.RestrictCommonReadyToHandle = true;
 804b65c:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 804b660:	f000 f949 	bl	804b8f6 <LoRaMacClassBIsAcquisitionInProgress>
 804b664:	4604      	mov	r4, r0
 804b666:	b938      	cbnz	r0, 804b678 <LoRaMacMlmeRequest+0x194>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 804b668:	f000 f942 	bl	804b8f0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 804b66c:	4620      	mov	r0, r4
 804b66e:	f000 f944 	bl	804b8fa <LoRaMacClassBBeaconTimerEvent>
 804b672:	e7c5      	b.n	804b600 <LoRaMacMlmeRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 804b674:	2402      	movs	r4, #2
 804b676:	e79f      	b.n	804b5b8 <LoRaMacMlmeRequest+0xd4>
                status = LORAMAC_STATUS_BUSY;
 804b678:	2401      	movs	r4, #1
 804b67a:	e79d      	b.n	804b5b8 <LoRaMacMlmeRequest+0xd4>
 804b67c:	08052787 	.word	0x08052787
 804b680:	08052791 	.word	0x08052791
 804b684:	08052799 	.word	0x08052799
 804b688:	080527a1 	.word	0x080527a1
 804b68c:	20002c88 	.word	0x20002c88
 804b690:	20002834 	.word	0x20002834
 804b694:	080527aa 	.word	0x080527aa
 804b698:	080527da 	.word	0x080527da
 804b69c:	080527b1 	.word	0x080527b1
 804b6a0:	080527bc 	.word	0x080527bc
 804b6a4:	080527ec 	.word	0x080527ec
 804b6a8:	080527c3 	.word	0x080527c3
 804b6ac:	080527cc 	.word	0x080527cc

0804b6b0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 804b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 804b6b4:	4605      	mov	r5, r0
{
 804b6b6:	b085      	sub	sp, #20
    if( mcpsRequest == NULL )
 804b6b8:	2800      	cmp	r0, #0
 804b6ba:	f000 809e 	beq.w	804b7fa <LoRaMacMcpsRequest+0x14a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 804b6be:	f7fe f8fd 	bl	80498bc <LoRaMacIsBusy>
 804b6c2:	4607      	mov	r7, r0
 804b6c4:	2800      	cmp	r0, #0
 804b6c6:	f040 809e 	bne.w	804b806 <LoRaMacMcpsRequest+0x156>
    {
        return LORAMAC_STATUS_BUSY;
    }

    macHdr.Value = 0;
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804b6ca:	4c50      	ldr	r4, [pc, #320]	; (804b80c <LoRaMacMcpsRequest+0x15c>)
    macHdr.Value = 0;
 804b6cc:	f88d 0000 	strb.w	r0, [sp]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 804b6d0:	2214      	movs	r2, #20
 804b6d2:	4601      	mov	r1, r0
 804b6d4:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 804b6d8:	f002 ff9d 	bl	804e616 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b6dc:	2301      	movs	r3, #1

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 804b6de:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416

    switch( mcpsRequest->Type )
 804b6e2:	782a      	ldrb	r2, [r5, #0]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804b6e4:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    switch( mcpsRequest->Type )
 804b6e8:	429a      	cmp	r2, r3
 804b6ea:	d05a      	beq.n	804b7a2 <LoRaMacMcpsRequest+0xf2>
 804b6ec:	d304      	bcc.n	804b6f8 <LoRaMacMcpsRequest+0x48>
 804b6ee:	2a03      	cmp	r2, #3
 804b6f0:	d06e      	beq.n	804b7d0 <LoRaMacMcpsRequest+0x120>
    int8_t datarate = DR_0;
 804b6f2:	46bb      	mov	fp, r7
    uint8_t fPort = 0;
 804b6f4:	46b8      	mov	r8, r7
 804b6f6:	e011      	b.n	804b71c <LoRaMacMcpsRequest+0x6c>
        case MCPS_UNCONFIRMED:
        {
            readyToSend = true;
            MacCtx.AckTimeoutRetries = 1;

            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b6f8:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804b6fc:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b700:	2102      	movs	r1, #2
 804b702:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 804b706:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 804b70a:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 804b70e:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 804b712:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 804b716:	f88d 2000 	strb.w	r2, [sp]
            readyToSend = true;
 804b71a:	461f      	mov	r7, r3
            break;
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b71c:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b720:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 804b724:	f88d 2006 	strb.w	r2, [sp, #6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804b728:	2602      	movs	r6, #2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804b72a:	a901      	add	r1, sp, #4
 804b72c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 804b72e:	f88d 6004 	strb.w	r6, [sp, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 804b732:	f001 f874 	bl	804c81e <RegionGetPhyParam>
 804b736:	9002      	str	r0, [sp, #8]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );

    if( readyToSend == true )
 804b738:	b36f      	cbz	r7, 804b796 <LoRaMacMcpsRequest+0xe6>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 804b73a:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b73e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 804b742:	b9b2      	cbnz	r2, 804b772 <LoRaMacMcpsRequest+0xc2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 804b744:	b240      	sxtb	r0, r0
 804b746:	4558      	cmp	r0, fp
 804b748:	bfb8      	it	lt
 804b74a:	4658      	movlt	r0, fp
        {
            verify.DatarateParams.Datarate = datarate;
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b74c:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
            verify.DatarateParams.Datarate = datarate;
 804b750:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 804b754:	f88d 200e 	strb.w	r2, [sp, #14]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 804b758:	a903      	add	r1, sp, #12
 804b75a:	2205      	movs	r2, #5
 804b75c:	7818      	ldrb	r0, [r3, #0]
 804b75e:	f001 f87b 	bl	804c858 <RegionVerify>
 804b762:	2800      	cmp	r0, #0
 804b764:	d046      	beq.n	804b7f4 <LoRaMacMcpsRequest+0x144>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 804b766:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
 804b76a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 804b76e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            	PRINTF("Invalid data rate\r\n");
                return LORAMAC_STATUS_PARAMETER_INVALID;
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 804b772:	4653      	mov	r3, sl
 804b774:	464a      	mov	r2, r9
 804b776:	4641      	mov	r1, r8
 804b778:	4668      	mov	r0, sp
 804b77a:	f7fe fb1b 	bl	8049db4 <Send>
        if( status == LORAMAC_STATUS_OK )
 804b77e:	4606      	mov	r6, r0
 804b780:	2800      	cmp	r0, #0
 804b782:	d13c      	bne.n	804b7fe <LoRaMacMcpsRequest+0x14e>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 804b784:	782b      	ldrb	r3, [r5, #0]
 804b786:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 804b78a:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 804b78e:	f043 0301 	orr.w	r3, r3, #1
 804b792:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
        {
            MacCtx.NodeAckRequested = false;
        }
    }

    EventMacNvmCtxChanged( );
 804b796:	f7fd faef 	bl	8048d78 <EventMacNvmCtxChanged>
    return status;
}
 804b79a:	4630      	mov	r0, r6
 804b79c:	b005      	add	sp, #20
 804b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 804b7a2:	7beb      	ldrb	r3, [r5, #15]
 804b7a4:	2b08      	cmp	r3, #8
 804b7a6:	bf28      	it	cs
 804b7a8:	2308      	movcs	r3, #8
 804b7aa:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804b7ae:	f89d 3000 	ldrb.w	r3, [sp]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 804b7b2:	f895 8004 	ldrb.w	r8, [r5, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 804b7b6:	f8d5 9008 	ldr.w	r9, [r5, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 804b7ba:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 804b7be:	f995 b00e 	ldrsb.w	fp, [r5, #14]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 804b7c2:	2104      	movs	r1, #4
 804b7c4:	f361 1347 	bfi	r3, r1, #5, #3
 804b7c8:	f88d 3000 	strb.w	r3, [sp]
            readyToSend = true;
 804b7cc:	4617      	mov	r7, r2
            break;
 804b7ce:	e7a5      	b.n	804b71c <LoRaMacMcpsRequest+0x6c>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b7d0:	f89d 2000 	ldrb.w	r2, [sp]
            MacCtx.AckTimeoutRetries = 1;
 804b7d4:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 804b7d8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 804b7dc:	f88d 2000 	strb.w	r2, [sp]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 804b7e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 804b7e4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 804b7e8:	f995 b00a 	ldrsb.w	fp, [r5, #10]
            readyToSend = true;
 804b7ec:	461f      	mov	r7, r3
    uint8_t fPort = 0;
 804b7ee:	f04f 0800 	mov.w	r8, #0
            break;
 804b7f2:	e793      	b.n	804b71c <LoRaMacMcpsRequest+0x6c>
            	PRINTF("Invalid data rate\r\n");
 804b7f4:	4806      	ldr	r0, [pc, #24]	; (804b810 <LoRaMacMcpsRequest+0x160>)
 804b7f6:	f002 fe95 	bl	804e524 <TraceSend>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804b7fa:	2603      	movs	r6, #3
 804b7fc:	e7cd      	b.n	804b79a <LoRaMacMcpsRequest+0xea>
            MacCtx.NodeAckRequested = false;
 804b7fe:	2300      	movs	r3, #0
 804b800:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
 804b804:	e7c7      	b.n	804b796 <LoRaMacMcpsRequest+0xe6>
        return LORAMAC_STATUS_BUSY;
 804b806:	2601      	movs	r6, #1
 804b808:	e7c7      	b.n	804b79a <LoRaMacMcpsRequest+0xea>
 804b80a:	bf00      	nop
 804b80c:	20002834 	.word	0x20002834
 804b810:	080527fa 	.word	0x080527fa

0804b814 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 804b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 804b818:	7887      	ldrb	r7, [r0, #2]
{
 804b81a:	b087      	sub	sp, #28
 804b81c:	4604      	mov	r4, r0
 804b81e:	468a      	mov	sl, r1
 804b820:	4691      	mov	r9, r2
    if( adrNext->Version.Fields.Minor == 0 )
 804b822:	2f00      	cmp	r7, #0
 804b824:	d15b      	bne.n	804b8de <LoRaMacAdrCalcNext+0xca>
    if( adrNext->AdrEnabled == true )
 804b826:	7945      	ldrb	r5, [r0, #5]
    *adrAckCounter = adrNext->AdrAckCounter;
 804b828:	6882      	ldr	r2, [r0, #8]
    int8_t datarate = adrNext->Datarate;
 804b82a:	f990 8010 	ldrsb.w	r8, [r0, #16]
    *adrAckCounter = adrNext->AdrAckCounter;
 804b82e:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 804b830:	2d00      	cmp	r5, #0
 804b832:	d052      	beq.n	804b8da <LoRaMacAdrCalcNext+0xc6>
        getPhy.Attribute = PHY_MIN_TX_DR;
 804b834:	2202      	movs	r2, #2
 804b836:	f88d 2008 	strb.w	r2, [sp, #8]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b83a:	a902      	add	r1, sp, #8
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b83c:	7c82      	ldrb	r2, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b83e:	7cc0      	ldrb	r0, [r0, #19]
 804b840:	9301      	str	r3, [sp, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b842:	f88d 200a 	strb.w	r2, [sp, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b846:	f000 ffea 	bl	804c81e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 804b84a:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 804b84e:	45d8      	cmp	r8, fp
 804b850:	4646      	mov	r6, r8
 804b852:	bfb8      	it	lt
 804b854:	465e      	movlt	r6, fp
        if( datarate == minTxDatarate )
 804b856:	45d8      	cmp	r8, fp
 804b858:	dc0b      	bgt.n	804b872 <LoRaMacAdrCalcNext+0x5e>
            *adrAckCounter = 0;
 804b85a:	9b01      	ldr	r3, [sp, #4]
 804b85c:	601f      	str	r7, [r3, #0]
                        adrAckReq = false;
 804b85e:	463d      	mov	r5, r7
    *txPowOut = txPower;
 804b860:	2300      	movs	r3, #0
    *drOut = datarate;
 804b862:	f88a 6000 	strb.w	r6, [sl]
    *txPowOut = txPower;
 804b866:	f889 3000 	strb.w	r3, [r9]
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
}
 804b86a:	4628      	mov	r0, r5
 804b86c:	b007      	add	sp, #28
 804b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b872:	68a2      	ldr	r2, [r4, #8]
 804b874:	89a1      	ldrh	r1, [r4, #12]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b876:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b878:	428a      	cmp	r2, r1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b87a:	440b      	add	r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 804b87c:	bf34      	ite	cc
 804b87e:	2500      	movcc	r5, #0
 804b880:	2501      	movcs	r5, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 804b882:	429a      	cmp	r2, r3
 804b884:	d3ec      	bcc.n	804b860 <LoRaMacAdrCalcNext+0x4c>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804b886:	2308      	movs	r3, #8
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b888:	eb0d 0103 	add.w	r1, sp, r3
 804b88c:	7ce0      	ldrb	r0, [r4, #19]
                getPhy.Attribute = PHY_MAX_TX_POWER;
 804b88e:	f88d 3008 	strb.w	r3, [sp, #8]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b892:	f000 ffc4 	bl	804c81e <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 804b896:	89e3      	ldrh	r3, [r4, #14]
 804b898:	68a2      	ldr	r2, [r4, #8]
 804b89a:	fbb2 f8f3 	udiv	r8, r2, r3
 804b89e:	fb03 2818 	mls	r8, r3, r8, r2
 804b8a2:	f1b8 0f01 	cmp.w	r8, #1
 804b8a6:	d1db      	bne.n	804b860 <LoRaMacAdrCalcNext+0x4c>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 804b8a8:	2322      	movs	r3, #34	; 0x22
 804b8aa:	f88d 3008 	strb.w	r3, [sp, #8]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b8ae:	a902      	add	r1, sp, #8
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b8b0:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b8b2:	7ce0      	ldrb	r0, [r4, #19]
                    getPhy.Datarate = datarate;
 804b8b4:	f88d 6009 	strb.w	r6, [sp, #9]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 804b8b8:	f88d 300a 	strb.w	r3, [sp, #10]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 804b8bc:	f000 ffaf 	bl	804c81e <RegionGetPhyParam>
                    datarate = phyParam.Value;
 804b8c0:	b246      	sxtb	r6, r0
                    if( datarate == minTxDatarate )
 804b8c2:	45b3      	cmp	fp, r6
 804b8c4:	d1cc      	bne.n	804b860 <LoRaMacAdrCalcNext+0x4c>
                        if( adrNext->UpdateChanMask == true )
 804b8c6:	7925      	ldrb	r5, [r4, #4]
 804b8c8:	2d00      	cmp	r5, #0
 804b8ca:	d0c9      	beq.n	804b860 <LoRaMacAdrCalcNext+0x4c>
                            RegionInitDefaults( adrNext->Region, &params );
 804b8cc:	a904      	add	r1, sp, #16
 804b8ce:	7ce0      	ldrb	r0, [r4, #19]
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 804b8d0:	f88d 8014 	strb.w	r8, [sp, #20]
                            RegionInitDefaults( adrNext->Region, &params );
 804b8d4:	f000 ffb3 	bl	804c83e <RegionInitDefaults>
 804b8d8:	e7c1      	b.n	804b85e <LoRaMacAdrCalcNext+0x4a>
    int8_t datarate = adrNext->Datarate;
 804b8da:	4646      	mov	r6, r8
 804b8dc:	e7c0      	b.n	804b860 <LoRaMacAdrCalcNext+0x4c>
    return false;
 804b8de:	2500      	movs	r5, #0
 804b8e0:	e7c3      	b.n	804b86a <LoRaMacAdrCalcNext+0x56>

0804b8e2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8e2:	4770      	bx	lr

0804b8e4 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8e4:	2001      	movs	r0, #1
 804b8e6:	4770      	bx	lr

0804b8e8 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 804b8e8:	2300      	movs	r3, #0
 804b8ea:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8ec:	4618      	mov	r0, r3
 804b8ee:	4770      	bx	lr

0804b8f0 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8f0:	4770      	bx	lr

0804b8f2 <LoRaMacClassBSetPingSlotState>:
 804b8f2:	4770      	bx	lr

0804b8f4 <LoRaMacClassBSetMulticastSlotState>:
 804b8f4:	4770      	bx	lr

0804b8f6 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8f6:	2000      	movs	r0, #0
 804b8f8:	4770      	bx	lr

0804b8fa <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b8fa:	4770      	bx	lr

0804b8fc <LoRaMacClassBPingSlotTimerEvent>:
 804b8fc:	4770      	bx	lr

0804b8fe <LoRaMacClassBMulticastSlotTimerEvent>:
 804b8fe:	4770      	bx	lr

0804b900 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b900:	2000      	movs	r0, #0
 804b902:	4770      	bx	lr

0804b904 <LoRaMacClassBIsBeaconExpected>:
 804b904:	2000      	movs	r0, #0
 804b906:	4770      	bx	lr

0804b908 <LoRaMacClassBIsPingExpected>:
 804b908:	2000      	movs	r0, #0
 804b90a:	4770      	bx	lr

0804b90c <LoRaMacClassBIsMulticastExpected>:
 804b90c:	2000      	movs	r0, #0
 804b90e:	4770      	bx	lr

0804b910 <LoRaMacClassBIsBeaconModeActive>:
 804b910:	2000      	movs	r0, #0
 804b912:	4770      	bx	lr

0804b914 <LoRaMacClassBSetPingSlotInfo>:
 804b914:	4770      	bx	lr

0804b916 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b916:	4770      	bx	lr

0804b918 <LoRaMacClassBResumeBeaconing>:
 804b918:	4770      	bx	lr

0804b91a <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b91a:	2002      	movs	r0, #2
 804b91c:	4770      	bx	lr

0804b91e <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b91e:	2002      	movs	r0, #2
 804b920:	4770      	bx	lr

0804b922 <LoRaMacMibClassBSetRequestConfirm>:
 804b922:	2002      	movs	r0, #2
 804b924:	4770      	bx	lr

0804b926 <LoRaMacClassBPingSlotInfoAns>:
 804b926:	4770      	bx	lr

0804b928 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b928:	2000      	movs	r0, #0
 804b92a:	4770      	bx	lr

0804b92c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 804b92c:	4770      	bx	lr

0804b92e <LoRaMacClassBDeviceTimeAns>:
 804b92e:	4770      	bx	lr

0804b930 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b930:	2000      	movs	r0, #0
 804b932:	4770      	bx	lr

0804b934 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 804b934:	2000      	movs	r0, #0
 804b936:	4770      	bx	lr

0804b938 <LoRaMacClassBStopRxSlots>:
 804b938:	4770      	bx	lr

0804b93a <LoRaMacClassBProcess>:
 804b93a:	4770      	bx	lr

0804b93c <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 804b93c:	4b02      	ldr	r3, [pc, #8]	; (804b948 <NvmCtxCallback+0xc>)
 804b93e:	681b      	ldr	r3, [r3, #0]
 804b940:	b103      	cbz	r3, 804b944 <NvmCtxCallback+0x8>
    {
        CommandsNvmCtxChanged( );
 804b942:	4718      	bx	r3
    }
}
 804b944:	4770      	bx	lr
 804b946:	bf00      	nop
 804b948:	20002e9c 	.word	0x20002e9c

0804b94c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 804b94c:	b538      	push	{r3, r4, r5, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804b94e:	4c06      	ldr	r4, [pc, #24]	; (804b968 <LoRaMacCommandsInit+0x1c>)
{
 804b950:	4605      	mov	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 804b952:	22fc      	movs	r2, #252	; 0xfc
 804b954:	1d20      	adds	r0, r4, #4
 804b956:	2100      	movs	r1, #0
 804b958:	f002 fe5d 	bl	804e616 <memset1>
    list->First = 0;
 804b95c:	2000      	movs	r0, #0
    list->Last = 0;
 804b95e:	e9c4 0001 	strd	r0, r0, [r4, #4]

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 804b962:	6025      	str	r5, [r4, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 804b964:	bd38      	pop	{r3, r4, r5, pc}
 804b966:	bf00      	nop
 804b968:	20002e9c 	.word	0x20002e9c

0804b96c <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 804b96c:	b508      	push	{r3, lr}
    // Restore module context
    if( commandsNvmCtx != NULL )
 804b96e:	4601      	mov	r1, r0
 804b970:	b128      	cbz	r0, 804b97e <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 804b972:	4804      	ldr	r0, [pc, #16]	; (804b984 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 804b974:	22fc      	movs	r2, #252	; 0xfc
 804b976:	f002 fe3a 	bl	804e5ee <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 804b97a:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 804b97c:	bd08      	pop	{r3, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804b97e:	2001      	movs	r0, #1
 804b980:	e7fc      	b.n	804b97c <LoRaMacCommandsRestoreNvmCtx+0x10>
 804b982:	bf00      	nop
 804b984:	20002ea0 	.word	0x20002ea0

0804b988 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 804b988:	23fc      	movs	r3, #252	; 0xfc
 804b98a:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804b98c:	4800      	ldr	r0, [pc, #0]	; (804b990 <LoRaMacCommandsGetNvmCtx+0x8>)
 804b98e:	4770      	bx	lr
 804b990:	20002ea0 	.word	0x20002ea0

0804b994 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 804b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b998:	4680      	mov	r8, r0
 804b99a:	4617      	mov	r7, r2
    if( payload == 0 )
 804b99c:	2900      	cmp	r1, #0
 804b99e:	d03f      	beq.n	804ba20 <LoRaMacCommandsAddCmd+0x8c>
 804b9a0:	4824      	ldr	r0, [pc, #144]	; (804ba34 <LoRaMacCommandsAddCmd+0xa0>)
 804b9a2:	2300      	movs	r3, #0
 804b9a4:	461a      	mov	r2, r3
 804b9a6:	1e46      	subs	r6, r0, #1
 804b9a8:	f100 0c0f 	add.w	ip, r0, #15
 804b9ac:	18c5      	adds	r5, r0, r3
 804b9ae:	18f4      	adds	r4, r6, r3
 804b9b0:	eb0c 0e03 	add.w	lr, ip, r3
        if( mem[size] != 0x00 )
 804b9b4:	f814 9f01 	ldrb.w	r9, [r4, #1]!
 804b9b8:	f1b9 0f00 	cmp.w	r9, #0
 804b9bc:	d132      	bne.n	804ba24 <LoRaMacCommandsAddCmd+0x90>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 804b9be:	4574      	cmp	r4, lr
 804b9c0:	d1f8      	bne.n	804b9b4 <LoRaMacCommandsAddCmd+0x20>
    if( list->First == 0 )
 804b9c2:	4c1d      	ldr	r4, [pc, #116]	; (804ba38 <LoRaMacCommandsAddCmd+0xa4>)
 804b9c4:	6860      	ldr	r0, [r4, #4]
 804b9c6:	b900      	cbnz	r0, 804b9ca <LoRaMacCommandsAddCmd+0x36>
        list->First = element;
 804b9c8:	6065      	str	r5, [r4, #4]
    if( list->Last )
 804b9ca:	68a0      	ldr	r0, [r4, #8]
 804b9cc:	b100      	cbz	r0, 804b9d0 <LoRaMacCommandsAddCmd+0x3c>
        list->Last->Next = element;
 804b9ce:	6005      	str	r5, [r0, #0]
    element->Next = 0;
 804b9d0:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    list->Last = element;
 804b9d4:	60a5      	str	r5, [r4, #8]
    element->Next = 0;
 804b9d6:	2600      	movs	r6, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 804b9d8:	1c55      	adds	r5, r2, #1
    element->Next = 0;
 804b9da:	60c6      	str	r6, [r0, #12]
    newCmd->CID = cid;
 804b9dc:	f880 8010 	strb.w	r8, [r0, #16]
    newCmd->PayloadSize = payloadSize;
 804b9e0:	eb04 1205 	add.w	r2, r4, r5, lsl #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804b9e4:	4815      	ldr	r0, [pc, #84]	; (804ba3c <LoRaMacCommandsAddCmd+0xa8>)
    newCmd->PayloadSize = payloadSize;
 804b9e6:	6057      	str	r7, [r2, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 804b9e8:	4418      	add	r0, r3
 804b9ea:	b2ba      	uxth	r2, r7
 804b9ec:	f002 fdff 	bl	804e5ee <memcpy1>
 804b9f0:	f1b8 0f0a 	cmp.w	r8, #10
 804b9f4:	d806      	bhi.n	804ba04 <LoRaMacCommandsAddCmd+0x70>
 804b9f6:	2301      	movs	r3, #1
 804b9f8:	fa03 f808 	lsl.w	r8, r3, r8
 804b9fc:	f418 6fa4 	tst.w	r8, #1312	; 0x520
 804ba00:	bf18      	it	ne
 804ba02:	461e      	movne	r6, r3
    newCmd->IsSticky = IsSticky( cid );
 804ba04:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 804ba08:	7216      	strb	r6, [r2, #8]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 804ba0a:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 804ba0e:	3201      	adds	r2, #1
 804ba10:	443a      	add	r2, r7
 804ba12:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc

    NvmCtxCallback( );
 804ba16:	f7ff ff91 	bl	804b93c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 804ba1a:	2000      	movs	r0, #0
}
 804ba1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804ba20:	2001      	movs	r0, #1
 804ba22:	e7fb      	b.n	804ba1c <LoRaMacCommandsAddCmd+0x88>
 804ba24:	3201      	adds	r2, #1
        if( itr == NUM_OF_MAC_COMMANDS )
 804ba26:	2a0f      	cmp	r2, #15
 804ba28:	f103 0310 	add.w	r3, r3, #16
 804ba2c:	d1be      	bne.n	804b9ac <LoRaMacCommandsAddCmd+0x18>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 804ba2e:	2002      	movs	r0, #2
 804ba30:	e7f4      	b.n	804ba1c <LoRaMacCommandsAddCmd+0x88>
 804ba32:	bf00      	nop
 804ba34:	20002ea8 	.word	0x20002ea8
 804ba38:	20002e9c 	.word	0x20002e9c
 804ba3c:	20002ead 	.word	0x20002ead

0804ba40 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 804ba40:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 804ba42:	b320      	cbz	r0, 804ba8e <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
 804ba44:	4a13      	ldr	r2, [pc, #76]	; (804ba94 <LoRaMacCommandsRemoveCmd+0x54>)
 804ba46:	6853      	ldr	r3, [r2, #4]
    if( element != curElement )
 804ba48:	4298      	cmp	r0, r3
 804ba4a:	d104      	bne.n	804ba56 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 804ba4c:	6803      	ldr	r3, [r0, #0]
 804ba4e:	6053      	str	r3, [r2, #4]
        curElement = NULL;
 804ba50:	2300      	movs	r3, #0
 804ba52:	e004      	b.n	804ba5e <LoRaMacCommandsRemoveCmd+0x1e>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 804ba54:	460b      	mov	r3, r1
 804ba56:	b113      	cbz	r3, 804ba5e <LoRaMacCommandsRemoveCmd+0x1e>
 804ba58:	6819      	ldr	r1, [r3, #0]
 804ba5a:	4288      	cmp	r0, r1
 804ba5c:	d1fa      	bne.n	804ba54 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 804ba5e:	6891      	ldr	r1, [r2, #8]
 804ba60:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 804ba62:	bf08      	it	eq
 804ba64:	6093      	streq	r3, [r2, #8]
    if( PrevElement != NULL )
 804ba66:	b10b      	cbz	r3, 804ba6c <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 804ba68:	6801      	ldr	r1, [r0, #0]
 804ba6a:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804ba6c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 804ba70:	6881      	ldr	r1, [r0, #8]
 804ba72:	3b01      	subs	r3, #1
 804ba74:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 804ba76:	2400      	movs	r4, #0
 804ba78:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804ba7a:	4621      	mov	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 804ba7c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 804ba80:	2210      	movs	r2, #16
 804ba82:	f002 fdc8 	bl	804e616 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 804ba86:	f7ff ff59 	bl	804b93c <NvmCtxCallback>
 804ba8a:	4620      	mov	r0, r4

    return LORAMAC_COMMANDS_SUCCESS;
}
 804ba8c:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 804ba8e:	2001      	movs	r0, #1
 804ba90:	e7fc      	b.n	804ba8c <LoRaMacCommandsRemoveCmd+0x4c>
 804ba92:	bf00      	nop
 804ba94:	20002e9c 	.word	0x20002e9c

0804ba98 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 804ba98:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804ba9a:	4b07      	ldr	r3, [pc, #28]	; (804bab8 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>)
 804ba9c:	685c      	ldr	r4, [r3, #4]

    // Loop through all elements
    while( curElement != NULL )
 804ba9e:	b91c      	cbnz	r4, 804baa8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 804baa0:	f7ff ff4c 	bl	804b93c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804baa4:	4620      	mov	r0, r4
 804baa6:	bd38      	pop	{r3, r4, r5, pc}
        if( curElement->IsSticky == false )
 804baa8:	7b23      	ldrb	r3, [r4, #12]
 804baaa:	6825      	ldr	r5, [r4, #0]
 804baac:	b913      	cbnz	r3, 804bab4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
 804baae:	4620      	mov	r0, r4
 804bab0:	f7ff ffc6 	bl	804ba40 <LoRaMacCommandsRemoveCmd>
{
 804bab4:	462c      	mov	r4, r5
 804bab6:	e7f2      	b.n	804ba9e <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 804bab8:	20002e9c 	.word	0x20002e9c

0804babc <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 804babc:	4b0b      	ldr	r3, [pc, #44]	; (804baec <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
{
 804babe:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 804bac0:	685c      	ldr	r4, [r3, #4]
 804bac2:	2501      	movs	r5, #1

    // Loop through all elements
    while( curElement != NULL )
 804bac4:	b91c      	cbnz	r4, 804bace <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 804bac6:	f7ff ff39 	bl	804b93c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 804baca:	4620      	mov	r0, r4
 804bacc:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 804bace:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 804bad0:	6826      	ldr	r6, [r4, #0]
 804bad2:	2b0a      	cmp	r3, #10
 804bad4:	d807      	bhi.n	804bae6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
 804bad6:	fa05 f303 	lsl.w	r3, r5, r3
 804bada:	f413 6fa4 	tst.w	r3, #1312	; 0x520
 804bade:	d002      	beq.n	804bae6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
            LoRaMacCommandsRemoveCmd( curElement );
 804bae0:	4620      	mov	r0, r4
 804bae2:	f7ff ffad 	bl	804ba40 <LoRaMacCommandsRemoveCmd>
{
 804bae6:	4634      	mov	r4, r6
 804bae8:	e7ec      	b.n	804bac4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
 804baea:	bf00      	nop
 804baec:	20002e9c 	.word	0x20002e9c

0804baf0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 804baf0:	b128      	cbz	r0, 804bafe <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 804baf2:	4b04      	ldr	r3, [pc, #16]	; (804bb04 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 804baf4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 804baf8:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 804bafa:	2000      	movs	r0, #0
 804bafc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bafe:	2001      	movs	r0, #1
}
 804bb00:	4770      	bx	lr
 804bb02:	bf00      	nop
 804bb04:	20002e9c 	.word	0x20002e9c

0804bb08 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 804bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bb0a:	4607      	mov	r7, r0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 804bb0c:	4616      	mov	r6, r2
 804bb0e:	b1ca      	cbz	r2, 804bb44 <LoRaMacCommandsSerializeCmds+0x3c>
 804bb10:	b1c1      	cbz	r1, 804bb44 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804bb12:	4b0d      	ldr	r3, [pc, #52]	; (804bb48 <LoRaMacCommandsSerializeCmds+0x40>)
 804bb14:	685c      	ldr	r4, [r3, #4]
    uint8_t itr = 0;
 804bb16:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 804bb18:	b90c      	cbnz	r4, 804bb1e <LoRaMacCommandsSerializeCmds+0x16>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 804bb1a:	2000      	movs	r0, #0
 804bb1c:	e013      	b.n	804bb46 <LoRaMacCommandsSerializeCmds+0x3e>
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 804bb1e:	68a2      	ldr	r2, [r4, #8]
 804bb20:	1af9      	subs	r1, r7, r3
 804bb22:	3201      	adds	r2, #1
 804bb24:	4291      	cmp	r1, r2
 804bb26:	d3f8      	bcc.n	804bb1a <LoRaMacCommandsSerializeCmds+0x12>
            buffer[itr++] = curElement->CID;
 804bb28:	7922      	ldrb	r2, [r4, #4]
 804bb2a:	54f2      	strb	r2, [r6, r3]
 804bb2c:	1c5d      	adds	r5, r3, #1
 804bb2e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 804bb30:	8922      	ldrh	r2, [r4, #8]
 804bb32:	1d61      	adds	r1, r4, #5
 804bb34:	1970      	adds	r0, r6, r5
 804bb36:	f002 fd5a 	bl	804e5ee <memcpy1>
            itr = itr + curElement->PayloadSize;
 804bb3a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 804bb3c:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 804bb3e:	441d      	add	r5, r3
 804bb40:	b2eb      	uxtb	r3, r5
 804bb42:	e7e9      	b.n	804bb18 <LoRaMacCommandsSerializeCmds+0x10>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bb44:	2001      	movs	r0, #1
}
 804bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bb48:	20002e9c 	.word	0x20002e9c

0804bb4c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 804bb4c:	b160      	cbz	r0, 804bb68 <LoRaMacCommandsStickyCmdsPending+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 804bb4e:	4b07      	ldr	r3, [pc, #28]	; (804bb6c <LoRaMacCommandsStickyCmdsPending+0x20>)

    *cmdsPending = false;
 804bb50:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 804bb52:	685b      	ldr	r3, [r3, #4]
    *cmdsPending = false;
 804bb54:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 804bb56:	b11b      	cbz	r3, 804bb60 <LoRaMacCommandsStickyCmdsPending+0x14>
    {
        if( curElement->IsSticky == true )
 804bb58:	7b1a      	ldrb	r2, [r3, #12]
 804bb5a:	b11a      	cbz	r2, 804bb64 <LoRaMacCommandsStickyCmdsPending+0x18>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 804bb5c:	2301      	movs	r3, #1
 804bb5e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 804bb60:	2000      	movs	r0, #0
 804bb62:	4770      	bx	lr
        }
        curElement = curElement->Next;
 804bb64:	681b      	ldr	r3, [r3, #0]
 804bb66:	e7f6      	b.n	804bb56 <LoRaMacCommandsStickyCmdsPending+0xa>
        return LORAMAC_COMMANDS_ERROR_NPE;
 804bb68:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 804bb6a:	4770      	bx	lr
 804bb6c:	20002e9c 	.word	0x20002e9c

0804bb70 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 804bb70:	b538      	push	{r3, r4, r5, lr}
    ConfirmQueueCtx.Primitives = primitives;
 804bb72:	4c0a      	ldr	r4, [pc, #40]	; (804bb9c <LoRaMacConfirmQueueInit+0x2c>)
 804bb74:	4623      	mov	r3, r4

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804bb76:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 804bb78:	f843 0b14 	str.w	r0, [r3], #20
{
 804bb7c:	460d      	mov	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 804bb7e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804bb82:	4618      	mov	r0, r3
 804bb84:	2214      	movs	r2, #20
 804bb86:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 804bb88:	6123      	str	r3, [r4, #16]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bb8a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 804bb8e:	f002 fd42 	bl	804e616 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804bb92:	6923      	ldr	r3, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 804bb94:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804bb96:	2201      	movs	r2, #1
 804bb98:	755a      	strb	r2, [r3, #21]
}
 804bb9a:	bd38      	pop	{r3, r4, r5, pc}
 804bb9c:	20002f9c 	.word	0x20002f9c

0804bba0 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 804bba0:	b508      	push	{r3, lr}
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 804bba2:	b128      	cbz	r0, 804bbb0 <LoRaMacConfirmQueueRestoreNvmCtx+0x10>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 804bba4:	4601      	mov	r1, r0
 804bba6:	2216      	movs	r2, #22
 804bba8:	4802      	ldr	r0, [pc, #8]	; (804bbb4 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>)
 804bbaa:	f002 fd20 	bl	804e5ee <memcpy1>
        return true;
 804bbae:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 804bbb0:	bd08      	pop	{r3, pc}
 804bbb2:	bf00      	nop
 804bbb4:	20002fb0 	.word	0x20002fb0

0804bbb8 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 804bbb8:	2316      	movs	r3, #22
 804bbba:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 804bbbc:	4800      	ldr	r0, [pc, #0]	; (804bbc0 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 804bbbe:	4770      	bx	lr
 804bbc0:	20002fb0 	.word	0x20002fb0

0804bbc4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 804bbc4:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804bbc6:	490d      	ldr	r1, [pc, #52]	; (804bbfc <LoRaMacConfirmQueueAdd+0x38>)
 804bbc8:	690b      	ldr	r3, [r1, #16]
 804bbca:	7d1a      	ldrb	r2, [r3, #20]
 804bbcc:	2a04      	cmp	r2, #4
 804bbce:	d813      	bhi.n	804bbf8 <LoRaMacConfirmQueueAdd+0x34>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 804bbd0:	688a      	ldr	r2, [r1, #8]
 804bbd2:	7804      	ldrb	r4, [r0, #0]
 804bbd4:	7014      	strb	r4, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804bbd6:	7844      	ldrb	r4, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 804bbd8:	78c0      	ldrb	r0, [r0, #3]
 804bbda:	70d0      	strb	r0, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804bbdc:	2000      	movs	r0, #0
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 804bbde:	7054      	strb	r4, [r2, #1]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 804bbe0:	7090      	strb	r0, [r2, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 804bbe2:	7d18      	ldrb	r0, [r3, #20]
 804bbe4:	3001      	adds	r0, #1
 804bbe6:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bbe8:	f103 0010 	add.w	r0, r3, #16
 804bbec:	4282      	cmp	r2, r0
        bufferPointer++;
 804bbee:	bf18      	it	ne
 804bbf0:	1d13      	addne	r3, r2, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 804bbf2:	608b      	str	r3, [r1, #8]

    return true;
 804bbf4:	2001      	movs	r0, #1
}
 804bbf6:	bd10      	pop	{r4, pc}
        return false;
 804bbf8:	2000      	movs	r0, #0
 804bbfa:	e7fc      	b.n	804bbf6 <LoRaMacConfirmQueueAdd+0x32>
 804bbfc:	20002f9c 	.word	0x20002f9c

0804bc00 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 804bc00:	4a07      	ldr	r2, [pc, #28]	; (804bc20 <LoRaMacConfirmQueueRemoveFirst+0x20>)
 804bc02:	6913      	ldr	r3, [r2, #16]
 804bc04:	7d18      	ldrb	r0, [r3, #20]
 804bc06:	b148      	cbz	r0, 804bc1c <LoRaMacConfirmQueueRemoveFirst+0x1c>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804bc08:	6851      	ldr	r1, [r2, #4]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 804bc0a:	3801      	subs	r0, #1
 804bc0c:	7518      	strb	r0, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc0e:	f103 0010 	add.w	r0, r3, #16
 804bc12:	4281      	cmp	r1, r0
        bufferPointer++;
 804bc14:	bf18      	it	ne
 804bc16:	1d0b      	addne	r3, r1, #4
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 804bc18:	6053      	str	r3, [r2, #4]

    return true;
 804bc1a:	2001      	movs	r0, #1
}
 804bc1c:	4770      	bx	lr
 804bc1e:	bf00      	nop
 804bc20:	20002f9c 	.word	0x20002f9c

0804bc24 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 804bc24:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bc26:	4c0b      	ldr	r4, [pc, #44]	; (804bc54 <LoRaMacConfirmQueueSetStatus+0x30>)
 804bc28:	6922      	ldr	r2, [r4, #16]
 804bc2a:	7d13      	ldrb	r3, [r2, #20]
 804bc2c:	b12b      	cbz	r3, 804bc3a <LoRaMacConfirmQueueSetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804bc2e:	e9d4 3401 	ldrd	r3, r4, [r4, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc32:	f102 0510 	add.w	r5, r2, #16
    while( element != bufferEnd )
 804bc36:	429c      	cmp	r4, r3
 804bc38:	d100      	bne.n	804bc3c <LoRaMacConfirmQueueSetStatus+0x18>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 804bc3a:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 804bc3c:	781e      	ldrb	r6, [r3, #0]
 804bc3e:	428e      	cmp	r6, r1
 804bc40:	d004      	beq.n	804bc4c <LoRaMacConfirmQueueSetStatus+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc42:	42ab      	cmp	r3, r5
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bc44:	bf0c      	ite	eq
 804bc46:	4613      	moveq	r3, r2
        bufferPointer++;
 804bc48:	3304      	addne	r3, #4
 804bc4a:	e7f4      	b.n	804bc36 <LoRaMacConfirmQueueSetStatus+0x12>
            element->ReadyToHandle = true;
 804bc4c:	2201      	movs	r2, #1
            element->Status = status;
 804bc4e:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 804bc50:	709a      	strb	r2, [r3, #2]
 804bc52:	e7f2      	b.n	804bc3a <LoRaMacConfirmQueueSetStatus+0x16>
 804bc54:	20002f9c 	.word	0x20002f9c

0804bc58 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 804bc58:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bc5a:	490b      	ldr	r1, [pc, #44]	; (804bc88 <LoRaMacConfirmQueueGetStatus+0x30>)
 804bc5c:	690a      	ldr	r2, [r1, #16]
 804bc5e:	7d13      	ldrb	r3, [r2, #20]
 804bc60:	b12b      	cbz	r3, 804bc6e <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 804bc62:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc66:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804bc6a:	4299      	cmp	r1, r3
 804bc6c:	d101      	bne.n	804bc72 <LoRaMacConfirmQueueGetStatus+0x1a>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 804bc6e:	2001      	movs	r0, #1
}
 804bc70:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804bc72:	781d      	ldrb	r5, [r3, #0]
 804bc74:	4285      	cmp	r5, r0
 804bc76:	d004      	beq.n	804bc82 <LoRaMacConfirmQueueGetStatus+0x2a>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc78:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bc7a:	bf0c      	ite	eq
 804bc7c:	4613      	moveq	r3, r2
        bufferPointer++;
 804bc7e:	3304      	addne	r3, #4
 804bc80:	e7f3      	b.n	804bc6a <LoRaMacConfirmQueueGetStatus+0x12>
            return element->Status;
 804bc82:	7858      	ldrb	r0, [r3, #1]
 804bc84:	e7f4      	b.n	804bc70 <LoRaMacConfirmQueueGetStatus+0x18>
 804bc86:	bf00      	nop
 804bc88:	20002f9c 	.word	0x20002f9c

0804bc8c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 804bc8c:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804bc8e:	490a      	ldr	r1, [pc, #40]	; (804bcb8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804bc90:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 804bc92:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bc94:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 804bc96:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 804bc98:	b16c      	cbz	r4, 804bcb6 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 804bc9a:	6889      	ldr	r1, [r1, #8]
                element->ReadyToHandle = true;
 804bc9c:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bc9e:	f102 0410 	add.w	r4, r2, #16
            if( element->RestrictCommonReadyToHandle == false )
 804bca2:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 804bca4:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 804bca6:	b906      	cbnz	r6, 804bcaa <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 804bca8:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bcaa:	42a3      	cmp	r3, r4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bcac:	bf0c      	ite	eq
 804bcae:	4613      	moveq	r3, r2
        bufferPointer++;
 804bcb0:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 804bcb2:	4299      	cmp	r1, r3
 804bcb4:	d1f5      	bne.n	804bca2 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 804bcb6:	bd70      	pop	{r4, r5, r6, pc}
 804bcb8:	20002f9c 	.word	0x20002f9c

0804bcbc <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 804bcbc:	4a0a      	ldr	r2, [pc, #40]	; (804bce8 <LoRaMacConfirmQueueIsCmdActive+0x2c>)
 804bcbe:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bcc2:	6912      	ldr	r2, [r2, #16]
{
 804bcc4:	b530      	push	{r4, r5, lr}
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bcc6:	f102 0410 	add.w	r4, r2, #16
    while( element != bufferEnd )
 804bcca:	4299      	cmp	r1, r3
 804bccc:	d101      	bne.n	804bcd2 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 804bcce:	2000      	movs	r0, #0
}
 804bcd0:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 804bcd2:	781d      	ldrb	r5, [r3, #0]
 804bcd4:	4285      	cmp	r5, r0
 804bcd6:	d004      	beq.n	804bce2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 804bcd8:	42a3      	cmp	r3, r4
        bufferPointer++;
 804bcda:	bf14      	ite	ne
 804bcdc:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 804bcde:	4613      	moveq	r3, r2
 804bce0:	e7f3      	b.n	804bcca <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 804bce2:	2001      	movs	r0, #1
 804bce4:	e7f4      	b.n	804bcd0 <LoRaMacConfirmQueueIsCmdActive+0x14>
 804bce6:	bf00      	nop
 804bce8:	20002f9c 	.word	0x20002f9c

0804bcec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 804bcec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804bcf0:	4c13      	ldr	r4, [pc, #76]	; (804bd40 <LoRaMacConfirmQueueHandleCb+0x54>)
 804bcf2:	6923      	ldr	r3, [r4, #16]
 804bcf4:	f893 8014 	ldrb.w	r8, [r3, #20]
{
 804bcf8:	4606      	mov	r6, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 804bcfa:	2500      	movs	r5, #0
 804bcfc:	b2eb      	uxtb	r3, r5
 804bcfe:	4598      	cmp	r8, r3
 804bd00:	d802      	bhi.n	804bd08 <LoRaMacConfirmQueueHandleCb+0x1c>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 804bd02:	b002      	add	sp, #8
 804bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bd08:	6863      	ldr	r3, [r4, #4]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 804bd0a:	789f      	ldrb	r7, [r3, #2]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bd0c:	7819      	ldrb	r1, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804bd0e:	785a      	ldrb	r2, [r3, #1]
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 804bd10:	7031      	strb	r1, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 804bd12:	7072      	strb	r2, [r6, #1]
        if( readyToHandle == true )
 804bd14:	b15f      	cbz	r7, 804bd2e <LoRaMacConfirmQueueHandleCb+0x42>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 804bd16:	6823      	ldr	r3, [r4, #0]
 804bd18:	4630      	mov	r0, r6
 804bd1a:	689b      	ldr	r3, [r3, #8]
 804bd1c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 804bd1e:	f7ff ff6f 	bl	804bc00 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 804bd22:	b917      	cbnz	r7, 804bd2a <LoRaMacConfirmQueueHandleCb+0x3e>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 804bd24:	a801      	add	r0, sp, #4
 804bd26:	f7ff ff4d 	bl	804bbc4 <LoRaMacConfirmQueueAdd>
 804bd2a:	3501      	adds	r5, #1
 804bd2c:	e7e6      	b.n	804bcfc <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804bd2e:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 804bd30:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 804bd34:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 804bd38:	f88d 3007 	strb.w	r3, [sp, #7]
 804bd3c:	e7ef      	b.n	804bd1e <LoRaMacConfirmQueueHandleCb+0x32>
 804bd3e:	bf00      	nop
 804bd40:	20002f9c 	.word	0x20002f9c

0804bd44 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 804bd44:	4b01      	ldr	r3, [pc, #4]	; (804bd4c <LoRaMacConfirmQueueGetCnt+0x8>)
 804bd46:	691b      	ldr	r3, [r3, #16]
}
 804bd48:	7d18      	ldrb	r0, [r3, #20]
 804bd4a:	4770      	bx	lr
 804bd4c:	20002f9c 	.word	0x20002f9c

0804bd50 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 804bd50:	4b03      	ldr	r3, [pc, #12]	; (804bd60 <LoRaMacConfirmQueueIsFull+0x10>)
 804bd52:	691b      	ldr	r3, [r3, #16]
 804bd54:	7d18      	ldrb	r0, [r3, #20]
    }
    else
    {
        return false;
    }
}
 804bd56:	2804      	cmp	r0, #4
 804bd58:	bf94      	ite	ls
 804bd5a:	2000      	movls	r0, #0
 804bd5c:	2001      	movhi	r0, #1
 804bd5e:	4770      	bx	lr
 804bd60:	20002f9c 	.word	0x20002f9c

0804bd64 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 804bd64:	3801      	subs	r0, #1
 804bd66:	2806      	cmp	r0, #6
 804bd68:	d82b      	bhi.n	804bdc2 <GetLastFcntDown+0x5e>
 804bd6a:	e8df f000 	tbb	[pc, r0]
 804bd6e:	0d04      	.short	0x0d04
 804bd70:	221e1913 	.word	0x221e1913
 804bd74:	26          	.byte	0x26
 804bd75:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 804bd76:	4b14      	ldr	r3, [pc, #80]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bd78:	685a      	ldr	r2, [r3, #4]
 804bd7a:	4613      	mov	r3, r2
 804bd7c:	f853 0f10 	ldr.w	r0, [r3, #16]!
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bd80:	6008      	str	r0, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bd82:	6313      	str	r3, [r2, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 804bd84:	2000      	movs	r0, #0
            break;
 804bd86:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 804bd88:	4b0f      	ldr	r3, [pc, #60]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bd8a:	685a      	ldr	r2, [r3, #4]
 804bd8c:	4613      	mov	r3, r2
 804bd8e:	f853 0f14 	ldr.w	r0, [r3, #20]!
 804bd92:	e7f5      	b.n	804bd80 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 804bd94:	4b0c      	ldr	r3, [pc, #48]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bd96:	685a      	ldr	r2, [r3, #4]
 804bd98:	4613      	mov	r3, r2
 804bd9a:	f853 0f18 	ldr.w	r0, [r3, #24]!
 804bd9e:	e7ef      	b.n	804bd80 <GetLastFcntDown+0x1c>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804bda0:	4b09      	ldr	r3, [pc, #36]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bda2:	685b      	ldr	r3, [r3, #4]
 804bda4:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804bda6:	600b      	str	r3, [r1, #0]
 804bda8:	e7ec      	b.n	804bd84 <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804bdaa:	4b07      	ldr	r3, [pc, #28]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bdac:	685b      	ldr	r3, [r3, #4]
 804bdae:	6a1b      	ldr	r3, [r3, #32]
 804bdb0:	e7f9      	b.n	804bda6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804bdb2:	4b05      	ldr	r3, [pc, #20]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bdb4:	685b      	ldr	r3, [r3, #4]
 804bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804bdb8:	e7f5      	b.n	804bda6 <GetLastFcntDown+0x42>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804bdba:	4b03      	ldr	r3, [pc, #12]	; (804bdc8 <GetLastFcntDown+0x64>)
 804bdbc:	685b      	ldr	r3, [r3, #4]
 804bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804bdc0:	e7f1      	b.n	804bda6 <GetLastFcntDown+0x42>
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 804bdc2:	2005      	movs	r0, #5
}
 804bdc4:	4770      	bx	lr
 804bdc6:	bf00      	nop
 804bdc8:	20002fc8 	.word	0x20002fc8

0804bdcc <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 804bdcc:	4770      	bx	lr

0804bdce <PayloadEncrypt>:
{
 804bdce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804bdd2:	b089      	sub	sp, #36	; 0x24
 804bdd4:	460f      	mov	r7, r1
 804bdd6:	4690      	mov	r8, r2
 804bdd8:	4699      	mov	r9, r3
 804bdda:	9d11      	ldr	r5, [sp, #68]	; 0x44
    if( buffer == 0 )
 804bddc:	4606      	mov	r6, r0
 804bdde:	2800      	cmp	r0, #0
 804bde0:	d058      	beq.n	804be94 <PayloadEncrypt+0xc6>
    uint8_t sBlock[16] = { 0 };
 804bde2:	2210      	movs	r2, #16
 804bde4:	2100      	movs	r1, #0
 804bde6:	4668      	mov	r0, sp
 804bde8:	f004 fdab 	bl	8050942 <memset>
    uint8_t aBlock[16] = { 0 };
 804bdec:	2210      	movs	r2, #16
 804bdee:	2100      	movs	r1, #0
 804bdf0:	eb0d 0002 	add.w	r0, sp, r2
 804bdf4:	f004 fda5 	bl	8050942 <memset>
    aBlock[5] = dir;
 804bdf8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 804bdfc:	f88d 3015 	strb.w	r3, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 804be00:	ea4f 2319 	mov.w	r3, r9, lsr #8
 804be04:	f88d 3017 	strb.w	r3, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 804be08:	ea4f 4319 	mov.w	r3, r9, lsr #16
 804be0c:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804be10:	0a2b      	lsrs	r3, r5, #8
    aBlock[0] = 0x01;
 804be12:	2401      	movs	r4, #1
    aBlock[6] = address & 0xFF;
 804be14:	f88d 9016 	strb.w	r9, [sp, #22]
    aBlock[10] = frameCounter & 0xFF;
 804be18:	f88d 501a 	strb.w	r5, [sp, #26]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804be1c:	ea4f 6919 	mov.w	r9, r9, lsr #24
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 804be20:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804be24:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 804be26:	0e2d      	lsrs	r5, r5, #24
 804be28:	f88d 501d 	strb.w	r5, [sp, #29]
    aBlock[0] = 0x01;
 804be2c:	f88d 4010 	strb.w	r4, [sp, #16]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 804be30:	f88d 9019 	strb.w	r9, [sp, #25]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 804be34:	f88d 301c 	strb.w	r3, [sp, #28]
    while( size > 0 )
 804be38:	463d      	mov	r5, r7
 804be3a:	eba7 0905 	sub.w	r9, r7, r5
 804be3e:	2d00      	cmp	r5, #0
 804be40:	fa5f f989 	uxtb.w	r9, r9
 804be44:	dc03      	bgt.n	804be4e <PayloadEncrypt+0x80>
    return LORAMAC_CRYPTO_SUCCESS;
 804be46:	2000      	movs	r0, #0
}
 804be48:	b009      	add	sp, #36	; 0x24
 804be4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804be4e:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 804be50:	f88d 401f 	strb.w	r4, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804be54:	466b      	mov	r3, sp
        ctr++;
 804be56:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804be58:	4642      	mov	r2, r8
 804be5a:	eb0d 0001 	add.w	r0, sp, r1
        ctr++;
 804be5e:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 804be60:	f7fc fe64 	bl	8048b2c <SecureElementAesEncrypt>
 804be64:	b9c0      	cbnz	r0, 804be98 <PayloadEncrypt+0xca>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 804be66:	2d10      	cmp	r5, #16
 804be68:	46ac      	mov	ip, r5
 804be6a:	bfa8      	it	ge
 804be6c:	f04f 0c10 	movge.w	ip, #16
 804be70:	b2c3      	uxtb	r3, r0
 804be72:	4563      	cmp	r3, ip
 804be74:	f100 0001 	add.w	r0, r0, #1
 804be78:	db02      	blt.n	804be80 <PayloadEncrypt+0xb2>
 804be7a:	3d10      	subs	r5, #16
 804be7c:	b22d      	sxth	r5, r5
 804be7e:	e7dc      	b.n	804be3a <PayloadEncrypt+0x6c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 804be80:	aa08      	add	r2, sp, #32
 804be82:	eb09 0103 	add.w	r1, r9, r3
 804be86:	4413      	add	r3, r2
 804be88:	5c72      	ldrb	r2, [r6, r1]
 804be8a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 804be8e:	4053      	eors	r3, r2
 804be90:	5473      	strb	r3, [r6, r1]
 804be92:	e7ed      	b.n	804be70 <PayloadEncrypt+0xa2>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804be94:	200a      	movs	r0, #10
 804be96:	e7d7      	b.n	804be48 <PayloadEncrypt+0x7a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804be98:	200f      	movs	r0, #15
 804be9a:	e7d5      	b.n	804be48 <PayloadEncrypt+0x7a>

0804be9c <DeriveSessionKey10x>:
{
 804be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804be9e:	4604      	mov	r4, r0
 804bea0:	b085      	sub	sp, #20
 804bea2:	460f      	mov	r7, r1
 804bea4:	4616      	mov	r6, r2
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 804bea6:	461d      	mov	r5, r3
 804bea8:	b34b      	cbz	r3, 804befe <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 804beaa:	2210      	movs	r2, #16
 804beac:	2100      	movs	r1, #0
 804beae:	4668      	mov	r0, sp
 804beb0:	f004 fd47 	bl	8050942 <memset>
    switch( keyID )
 804beb4:	2c08      	cmp	r4, #8
            compBase[0] = 0x01;
 804beb6:	bf14      	ite	ne
 804beb8:	2301      	movne	r3, #1
            compBase[0] = 0x02;
 804beba:	2302      	moveq	r3, #2
    memcpy1( compBase + 1, joinNonce, 3 );
 804bebc:	2203      	movs	r2, #3
 804bebe:	4639      	mov	r1, r7
 804bec0:	f10d 0001 	add.w	r0, sp, #1
            compBase[0] = 0x02;
 804bec4:	f88d 3000 	strb.w	r3, [sp]
    memcpy1( compBase + 1, joinNonce, 3 );
 804bec8:	f002 fb91 	bl	804e5ee <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 804becc:	2203      	movs	r2, #3
 804bece:	4631      	mov	r1, r6
 804bed0:	a801      	add	r0, sp, #4
 804bed2:	f002 fb8c 	bl	804e5ee <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 804bed6:	2202      	movs	r2, #2
 804bed8:	4629      	mov	r1, r5
 804beda:	f10d 0007 	add.w	r0, sp, #7
 804bede:	f002 fb86 	bl	804e5ee <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 804bee2:	4b08      	ldr	r3, [pc, #32]	; (804bf04 <DeriveSessionKey10x+0x68>)
 804bee4:	6858      	ldr	r0, [r3, #4]
 804bee6:	2202      	movs	r2, #2
 804bee8:	4623      	mov	r3, r4
 804beea:	4669      	mov	r1, sp
 804beec:	6800      	ldr	r0, [r0, #0]
 804beee:	f7fc fe9a 	bl	8048c26 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 804bef2:	2800      	cmp	r0, #0
 804bef4:	bf14      	ite	ne
 804bef6:	200f      	movne	r0, #15
 804bef8:	2000      	moveq	r0, #0
}
 804befa:	b005      	add	sp, #20
 804befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804befe:	200a      	movs	r0, #10
 804bf00:	e7fb      	b.n	804befa <DeriveSessionKey10x+0x5e>
 804bf02:	bf00      	nop
 804bf04:	20002fc8 	.word	0x20002fc8

0804bf08 <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 804bf08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 804bf0a:	2210      	movs	r2, #16
 804bf0c:	2100      	movs	r1, #0
 804bf0e:	4668      	mov	r0, sp
 804bf10:	f004 fd17 	bl	8050942 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 804bf14:	4b07      	ldr	r3, [pc, #28]	; (804bf34 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 804bf16:	6858      	ldr	r0, [r3, #4]
 804bf18:	2209      	movs	r2, #9
 804bf1a:	237f      	movs	r3, #127	; 0x7f
 804bf1c:	4669      	mov	r1, sp
 804bf1e:	6800      	ldr	r0, [r0, #0]
 804bf20:	f7fc fe81 	bl	8048c26 <SecureElementDeriveAndStoreKey>
 804bf24:	2800      	cmp	r0, #0
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 804bf26:	bf14      	ite	ne
 804bf28:	200f      	movne	r0, #15
 804bf2a:	2000      	moveq	r0, #0
 804bf2c:	b005      	add	sp, #20
 804bf2e:	f85d fb04 	ldr.w	pc, [sp], #4
 804bf32:	bf00      	nop
 804bf34:	20002fc8 	.word	0x20002fc8

0804bf38 <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 804bf38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804bf3c:	b0c5      	sub	sp, #276	; 0x114
 804bf3e:	460c      	mov	r4, r1
 804bf40:	4617      	mov	r7, r2
 804bf42:	4699      	mov	r9, r3
 804bf44:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 804bf46:	9d4d      	ldr	r5, [sp, #308]	; 0x134
    if( msg == 0 )
 804bf48:	4680      	mov	r8, r0
 804bf4a:	2800      	cmp	r0, #0
 804bf4c:	d053      	beq.n	804bff6 <VerifyCmacB0.constprop.3+0xbe>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804bf4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 804bf52:	d852      	bhi.n	804bffa <VerifyCmacB0.constprop.3+0xc2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 804bf54:	f44f 7288 	mov.w	r2, #272	; 0x110
 804bf58:	2100      	movs	r1, #0
 804bf5a:	4668      	mov	r0, sp
 804bf5c:	f002 fb5b 	bl	804e616 <memset1>
    b0[0] = 0x49;
 804bf60:	2349      	movs	r3, #73	; 0x49
 804bf62:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 804bf66:	f1b9 0f00 	cmp.w	r9, #0
 804bf6a:	d03f      	beq.n	804bfec <VerifyCmacB0.constprop.3+0xb4>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 804bf6c:	4b24      	ldr	r3, [pc, #144]	; (804c000 <VerifyCmacB0.constprop.3+0xc8>)
 804bf6e:	685b      	ldr	r3, [r3, #4]
 804bf70:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 804bf72:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 804bf76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 804bf7a:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 804bf7e:	2201      	movs	r2, #1
 804bf80:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804bf84:	0a32      	lsrs	r2, r6, #8
 804bf86:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804bf8a:	0c32      	lsrs	r2, r6, #16
 804bf8c:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804bf90:	0a2a      	lsrs	r2, r5, #8
 804bf92:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804bf96:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 804bf98:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 804bf9a:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 804bf9e:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804bfa2:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804bfa6:	4641      	mov	r1, r8
 804bfa8:	4622      	mov	r2, r4
 804bfaa:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804bfac:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804bfae:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 804bfb0:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 804bfb4:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 804bfb8:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804bfbc:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804bfc0:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 804bfc4:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 804bfc8:	f002 fb11 	bl	804e5ee <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 804bfcc:	f104 0110 	add.w	r1, r4, #16
 804bfd0:	463b      	mov	r3, r7
 804bfd2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 804bfd4:	b289      	uxth	r1, r1
 804bfd6:	4668      	mov	r0, sp
 804bfd8:	f7fc fd90 	bl	8048afc <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 804bfdc:	b118      	cbz	r0, 804bfe6 <VerifyCmacB0.constprop.3+0xae>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804bfde:	2801      	cmp	r0, #1
 804bfe0:	bf0c      	ite	eq
 804bfe2:	2001      	moveq	r0, #1
 804bfe4:	200f      	movne	r0, #15
}
 804bfe6:	b045      	add	sp, #276	; 0x114
 804bfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 804bfec:	f88d 9001 	strb.w	r9, [sp, #1]
        b0[2] = 0x00;
 804bff0:	f88d 9002 	strb.w	r9, [sp, #2]
 804bff4:	e7c3      	b.n	804bf7e <VerifyCmacB0.constprop.3+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804bff6:	200a      	movs	r0, #10
 804bff8:	e7f5      	b.n	804bfe6 <VerifyCmacB0.constprop.3+0xae>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804bffa:	200e      	movs	r0, #14
 804bffc:	e7f3      	b.n	804bfe6 <VerifyCmacB0.constprop.3+0xae>
 804bffe:	bf00      	nop
 804c000:	20002fc8 	.word	0x20002fc8

0804c004 <LoRaMacCryptoInit>:
{
 804c004:	b538      	push	{r3, r4, r5, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 804c006:	4c11      	ldr	r4, [pc, #68]	; (804c04c <LoRaMacCryptoInit+0x48>)
 804c008:	f104 030c 	add.w	r3, r4, #12
 804c00c:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 804c00e:	b1d0      	cbz	r0, 804c046 <LoRaMacCryptoInit+0x42>
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 804c010:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 804c012:	480f      	ldr	r0, [pc, #60]	; (804c050 <LoRaMacCryptoInit+0x4c>)
 804c014:	2234      	movs	r2, #52	; 0x34
 804c016:	2100      	movs	r1, #0
 804c018:	f002 fafd 	bl	804e616 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 804c01c:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 804c01e:	4a0d      	ldr	r2, [pc, #52]	; (804c054 <LoRaMacCryptoInit+0x50>)
 804c020:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c022:	4619      	mov	r1, r3
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c024:	f04f 32ff 	mov.w	r2, #4294967295
 804c028:	2500      	movs	r5, #0
 804c02a:	e9c3 5203 	strd	r5, r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c02e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c030:	f841 2f18 	str.w	r2, [r1, #24]!
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 804c034:	e9c3 2207 	strd	r2, r2, [r3, #28]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 804c038:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 804c03a:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c03e:	68a3      	ldr	r3, [r4, #8]
 804c040:	4798      	blx	r3
}
 804c042:	4628      	mov	r0, r5
 804c044:	bd38      	pop	{r3, r4, r5, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 804c046:	4b04      	ldr	r3, [pc, #16]	; (804c058 <LoRaMacCryptoInit+0x54>)
 804c048:	60a3      	str	r3, [r4, #8]
 804c04a:	e7e2      	b.n	804c012 <LoRaMacCryptoInit+0xe>
 804c04c:	20002fc8 	.word	0x20002fc8
 804c050:	20002fd4 	.word	0x20002fd4
 804c054:	01010100 	.word	0x01010100
 804c058:	0804bdcd 	.word	0x0804bdcd

0804c05c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 804c05c:	4b02      	ldr	r3, [pc, #8]	; (804c068 <LoRaMacCryptoSetLrWanVersion+0xc>)
 804c05e:	685b      	ldr	r3, [r3, #4]
 804c060:	6018      	str	r0, [r3, #0]
}
 804c062:	2000      	movs	r0, #0
 804c064:	4770      	bx	lr
 804c066:	bf00      	nop
 804c068:	20002fc8 	.word	0x20002fc8

0804c06c <LoRaMacCryptoRestoreNvmCtx>:
{
 804c06c:	b508      	push	{r3, lr}
    if( cryptoNvmCtx != 0 )
 804c06e:	4601      	mov	r1, r0
 804c070:	b128      	cbz	r0, 804c07e <LoRaMacCryptoRestoreNvmCtx+0x12>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 804c072:	4804      	ldr	r0, [pc, #16]	; (804c084 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 804c074:	2234      	movs	r2, #52	; 0x34
 804c076:	f002 faba 	bl	804e5ee <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 804c07a:	2000      	movs	r0, #0
}
 804c07c:	bd08      	pop	{r3, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c07e:	200a      	movs	r0, #10
 804c080:	e7fc      	b.n	804c07c <LoRaMacCryptoRestoreNvmCtx+0x10>
 804c082:	bf00      	nop
 804c084:	20002fd4 	.word	0x20002fd4

0804c088 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 804c088:	2334      	movs	r3, #52	; 0x34
 804c08a:	6003      	str	r3, [r0, #0]
}
 804c08c:	4800      	ldr	r0, [pc, #0]	; (804c090 <LoRaMacCryptoGetNvmCtx+0x8>)
 804c08e:	4770      	bx	lr
 804c090:	20002fd4 	.word	0x20002fd4

0804c094 <LoRaMacCryptoGetFCntUp>:
    if( currentUp == NULL )
 804c094:	b130      	cbz	r0, 804c0a4 <LoRaMacCryptoGetFCntUp+0x10>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 804c096:	4b04      	ldr	r3, [pc, #16]	; (804c0a8 <LoRaMacCryptoGetFCntUp+0x14>)
 804c098:	685b      	ldr	r3, [r3, #4]
 804c09a:	68db      	ldr	r3, [r3, #12]
 804c09c:	3301      	adds	r3, #1
 804c09e:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 804c0a0:	2000      	movs	r0, #0
 804c0a2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c0a4:	200a      	movs	r0, #10
}
 804c0a6:	4770      	bx	lr
 804c0a8:	20002fc8 	.word	0x20002fc8

0804c0ac <LoRaMacCryptoGetFCntDown>:
{
 804c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804c0ae:	4617      	mov	r7, r2
    uint32_t lastDown = 0;
 804c0b0:	2200      	movs	r2, #0
{
 804c0b2:	460e      	mov	r6, r1
    uint32_t lastDown = 0;
 804c0b4:	9201      	str	r2, [sp, #4]
    if( currentDown == NULL )
 804c0b6:	461d      	mov	r5, r3
 804c0b8:	b353      	cbz	r3, 804c110 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 804c0ba:	a901      	add	r1, sp, #4
 804c0bc:	f7ff fe52 	bl	804bd64 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 804c0c0:	b9e8      	cbnz	r0, 804c0fe <LoRaMacCryptoGetFCntDown+0x52>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 804c0c2:	9c01      	ldr	r4, [sp, #4]
 804c0c4:	1c63      	adds	r3, r4, #1
 804c0c6:	d110      	bne.n	804c0ea <LoRaMacCryptoGetFCntDown+0x3e>
         *currentDown = frameFcnt;
 804c0c8:	602f      	str	r7, [r5, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c0ca:	4b12      	ldr	r3, [pc, #72]	; (804c114 <LoRaMacCryptoGetFCntDown+0x68>)
 804c0cc:	685b      	ldr	r3, [r3, #4]
 804c0ce:	789b      	ldrb	r3, [r3, #2]
 804c0d0:	b9ab      	cbnz	r3, 804c0fe <LoRaMacCryptoGetFCntDown+0x52>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 804c0d2:	682b      	ldr	r3, [r5, #0]
 804c0d4:	b2b6      	uxth	r6, r6
 804c0d6:	1b1c      	subs	r4, r3, r4
 804c0d8:	eb63 0503 	sbc.w	r5, r3, r3
 804c0dc:	2700      	movs	r7, #0
 804c0de:	42b4      	cmp	r4, r6
 804c0e0:	eb75 0307 	sbcs.w	r3, r5, r7
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 804c0e4:	bfa8      	it	ge
 804c0e6:	2008      	movge	r0, #8
 804c0e8:	e009      	b.n	804c0fe <LoRaMacCryptoGetFCntDown+0x52>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 804c0ea:	b2a3      	uxth	r3, r4
 804c0ec:	1afb      	subs	r3, r7, r3
        if( fCntDiff > 0 )
 804c0ee:	2b00      	cmp	r3, #0
 804c0f0:	dd02      	ble.n	804c0f8 <LoRaMacCryptoGetFCntDown+0x4c>
            *currentDown = lastDown + fCntDiff;
 804c0f2:	4423      	add	r3, r4
 804c0f4:	602b      	str	r3, [r5, #0]
 804c0f6:	e7e8      	b.n	804c0ca <LoRaMacCryptoGetFCntDown+0x1e>
        else if( fCntDiff == 0 )
 804c0f8:	d103      	bne.n	804c102 <LoRaMacCryptoGetFCntDown+0x56>
            *currentDown = lastDown;
 804c0fa:	602c      	str	r4, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 804c0fc:	2007      	movs	r0, #7
}
 804c0fe:	b003      	add	sp, #12
 804c100:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 804c102:	0c21      	lsrs	r1, r4, #16
 804c104:	0409      	lsls	r1, r1, #16
 804c106:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 804c10a:	4439      	add	r1, r7
 804c10c:	6029      	str	r1, [r5, #0]
 804c10e:	e7dc      	b.n	804c0ca <LoRaMacCryptoGetFCntDown+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c110:	200a      	movs	r0, #10
 804c112:	e7f4      	b.n	804c0fe <LoRaMacCryptoGetFCntDown+0x52>
 804c114:	20002fc8 	.word	0x20002fc8

0804c118 <LoRaMacCryptoSetMulticastReference>:
    if( multicastList == NULL )
 804c118:	b178      	cbz	r0, 804c13a <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 804c11a:	4b09      	ldr	r3, [pc, #36]	; (804c140 <LoRaMacCryptoSetMulticastReference+0x28>)
 804c11c:	685b      	ldr	r3, [r3, #4]
 804c11e:	f103 021c 	add.w	r2, r3, #28
 804c122:	61c2      	str	r2, [r0, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 804c124:	f103 0220 	add.w	r2, r3, #32
 804c128:	6442      	str	r2, [r0, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804c12a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804c12e:	3328      	adds	r3, #40	; 0x28
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 804c130:	66c2      	str	r2, [r0, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 804c132:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    return LORAMAC_CRYPTO_SUCCESS;
 804c136:	2000      	movs	r0, #0
 804c138:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c13a:	200a      	movs	r0, #10
}
 804c13c:	4770      	bx	lr
 804c13e:	bf00      	nop
 804c140:	20002fc8 	.word	0x20002fc8

0804c144 <LoRaMacCryptoPrepareJoinRequest>:
{
 804c144:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
 804c146:	4604      	mov	r4, r0
{
 804c148:	b085      	sub	sp, #20
    if( macMsg == 0 )
 804c14a:	b320      	cbz	r0, 804c196 <LoRaMacCryptoPrepareJoinRequest+0x52>
    uint32_t devNonce = 0;
 804c14c:	a804      	add	r0, sp, #16
 804c14e:	2300      	movs	r3, #0
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804c150:	4d13      	ldr	r5, [pc, #76]	; (804c1a0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
    uint32_t devNonce = 0;
 804c152:	f840 3d04 	str.w	r3, [r0, #-4]!
    SecureElementRandomNumber( &devNonce );
 804c156:	f7fc fd8b 	bl	8048c70 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 804c15a:	686b      	ldr	r3, [r5, #4]
 804c15c:	9a03      	ldr	r2, [sp, #12]
 804c15e:	809a      	strh	r2, [r3, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c160:	68ab      	ldr	r3, [r5, #8]
 804c162:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 804c164:	686b      	ldr	r3, [r5, #4]
 804c166:	889b      	ldrh	r3, [r3, #4]
 804c168:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c16a:	4620      	mov	r0, r4
 804c16c:	f000 fab3 	bl	804c6d6 <LoRaMacSerializerJoinRequest>
 804c170:	b110      	cbz	r0, 804c178 <LoRaMacCryptoPrepareJoinRequest+0x34>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804c172:	2011      	movs	r0, #17
}
 804c174:	b005      	add	sp, #20
 804c176:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 804c178:	f104 0318 	add.w	r3, r4, #24
 804c17c:	9300      	str	r3, [sp, #0]
 804c17e:	2213      	movs	r2, #19
 804c180:	2302      	movs	r3, #2
 804c182:	6821      	ldr	r1, [r4, #0]
 804c184:	f7fc fcac 	bl	8048ae0 <SecureElementComputeAesCmac>
 804c188:	b938      	cbnz	r0, 804c19a <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c18a:	4620      	mov	r0, r4
 804c18c:	f000 faa3 	bl	804c6d6 <LoRaMacSerializerJoinRequest>
 804c190:	2800      	cmp	r0, #0
 804c192:	d0ef      	beq.n	804c174 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804c194:	e7ed      	b.n	804c172 <LoRaMacCryptoPrepareJoinRequest+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c196:	200a      	movs	r0, #10
 804c198:	e7ec      	b.n	804c174 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c19a:	200f      	movs	r0, #15
 804c19c:	e7ea      	b.n	804c174 <LoRaMacCryptoPrepareJoinRequest+0x30>
 804c19e:	bf00      	nop
 804c1a0:	20002fc8 	.word	0x20002fc8

0804c1a4 <LoRaMacCryptoSecureMessage>:
{
 804c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c1a6:	4605      	mov	r5, r0
 804c1a8:	b087      	sub	sp, #28
    if( macMsg == NULL )
 804c1aa:	461c      	mov	r4, r3
 804c1ac:	b32b      	cbz	r3, 804c1fa <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 804c1ae:	4e30      	ldr	r6, [pc, #192]	; (804c270 <LoRaMacCryptoSecureMessage+0xcc>)
 804c1b0:	6873      	ldr	r3, [r6, #4]
 804c1b2:	68db      	ldr	r3, [r3, #12]
 804c1b4:	4283      	cmp	r3, r0
 804c1b6:	d859      	bhi.n	804c26c <LoRaMacCryptoSecureMessage+0xc8>
    if( macMsg->FPort == 0 )
 804c1b8:	f894 2020 	ldrb.w	r2, [r4, #32]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804c1bc:	2a00      	cmp	r2, #0
 804c1be:	bf14      	ite	ne
 804c1c0:	2208      	movne	r2, #8
 804c1c2:	2207      	moveq	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 804c1c4:	4283      	cmp	r3, r0
 804c1c6:	d309      	bcc.n	804c1dc <LoRaMacCryptoSecureMessage+0x38>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 804c1c8:	6873      	ldr	r3, [r6, #4]
 804c1ca:	60dd      	str	r5, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c1cc:	68b3      	ldr	r3, [r6, #8]
 804c1ce:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c1d0:	4620      	mov	r0, r4
 804c1d2:	f000 fab4 	bl	804c73e <LoRaMacSerializerData>
 804c1d6:	b170      	cbz	r0, 804c1f6 <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 804c1d8:	2011      	movs	r0, #17
 804c1da:	e00a      	b.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 804c1dc:	2300      	movs	r3, #0
 804c1de:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 804c1e2:	9001      	str	r0, [sp, #4]
 804c1e4:	9300      	str	r3, [sp, #0]
 804c1e6:	68a3      	ldr	r3, [r4, #8]
 804c1e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804c1ea:	f7ff fdf0 	bl	804bdce <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c1ee:	2800      	cmp	r0, #0
 804c1f0:	d0ea      	beq.n	804c1c8 <LoRaMacCryptoSecureMessage+0x24>
}
 804c1f2:	b007      	add	sp, #28
 804c1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c1f6:	6821      	ldr	r1, [r4, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 804c1f8:	b909      	cbnz	r1, 804c1fe <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c1fa:	200a      	movs	r0, #10
 804c1fc:	e7f9      	b.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c1fe:	7926      	ldrb	r6, [r4, #4]
 804c200:	3e04      	subs	r6, #4
 804c202:	b2b2      	uxth	r2, r6
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 804c204:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 804c208:	d82e      	bhi.n	804c268 <LoRaMacCryptoSecureMessage+0xc4>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c20a:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 804c20c:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 804c210:	2749      	movs	r7, #73	; 0x49
 804c212:	9702      	str	r7, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 804c214:	0a1f      	lsrs	r7, r3, #8
 804c216:	f88d 700f 	strb.w	r7, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804c21a:	0c1f      	lsrs	r7, r3, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 804c21c:	0e1b      	lsrs	r3, r3, #24
 804c21e:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 804c222:	0a2b      	lsrs	r3, r5, #8
 804c224:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 804c228:	0c2b      	lsrs	r3, r5, #16
 804c22a:	f88d 3014 	strb.w	r3, [sp, #20]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 804c22e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    b0[3] = 0x00;
 804c232:	f8ad 000c 	strh.w	r0, [sp, #12]
    b0[10] = fCnt & 0xFF;
 804c236:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[14] = 0x00;
 804c23a:	f88d 0016 	strb.w	r0, [sp, #22]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c23e:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804c240:	9300      	str	r3, [sp, #0]
 804c242:	a802      	add	r0, sp, #8
 804c244:	2307      	movs	r3, #7
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 804c246:	f88d 7010 	strb.w	r7, [sp, #16]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 804c24a:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
 804c24e:	f88d 6017 	strb.w	r6, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 804c252:	f7fc fc45 	bl	8048ae0 <SecureElementComputeAesCmac>
 804c256:	b928      	cbnz	r0, 804c264 <LoRaMacCryptoSecureMessage+0xc0>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 804c258:	4620      	mov	r0, r4
 804c25a:	f000 fa70 	bl	804c73e <LoRaMacSerializerData>
 804c25e:	2800      	cmp	r0, #0
 804c260:	d0c7      	beq.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
 804c262:	e7b9      	b.n	804c1d8 <LoRaMacCryptoSecureMessage+0x34>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c264:	200f      	movs	r0, #15
 804c266:	e7c4      	b.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 804c268:	200e      	movs	r0, #14
 804c26a:	e7c2      	b.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804c26c:	2006      	movs	r0, #6
 804c26e:	e7c0      	b.n	804c1f2 <LoRaMacCryptoSecureMessage+0x4e>
 804c270:	20002fc8 	.word	0x20002fc8

0804c274 <LoRaMacCryptoUnsecureMessage>:
{
 804c274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c278:	b086      	sub	sp, #24
 804c27a:	4604      	mov	r4, r0
 804c27c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 804c27e:	4689      	mov	r9, r1
 804c280:	4690      	mov	r8, r2
 804c282:	461d      	mov	r5, r3
    if( macMsg == 0 )
 804c284:	2e00      	cmp	r6, #0
 804c286:	d07a      	beq.n	804c37e <LoRaMacCryptoUnsecureMessage+0x10a>
    uint32_t lastDown = 0;
 804c288:	a906      	add	r1, sp, #24
 804c28a:	2300      	movs	r3, #0
 804c28c:	f841 3d04 	str.w	r3, [r1, #-4]!
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 804c290:	4610      	mov	r0, r2
 804c292:	f7ff fd67 	bl	804bd64 <GetLastFcntDown>
 804c296:	b120      	cbz	r0, 804c2a2 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 804c298:	2706      	movs	r7, #6
}
 804c29a:	4638      	mov	r0, r7
 804c29c:	b006      	add	sp, #24
 804c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 804c2a2:	9b05      	ldr	r3, [sp, #20]
 804c2a4:	429d      	cmp	r5, r3
 804c2a6:	d801      	bhi.n	804c2ac <LoRaMacCryptoUnsecureMessage+0x38>
 804c2a8:	3301      	adds	r3, #1
 804c2aa:	d1f5      	bne.n	804c298 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804c2ac:	4630      	mov	r0, r6
 804c2ae:	f000 f9b7 	bl	804c620 <LoRaMacParserData>
 804c2b2:	2800      	cmp	r0, #0
 804c2b4:	d165      	bne.n	804c382 <LoRaMacCryptoUnsecureMessage+0x10e>
        if( KeyAddrList[i].AddrID == addrID )
 804c2b6:	4b34      	ldr	r3, [pc, #208]	; (804c388 <LoRaMacCryptoUnsecureMessage+0x114>)
 804c2b8:	461a      	mov	r2, r3
 804c2ba:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 804c2be:	42a1      	cmp	r1, r4
 804c2c0:	ea4f 0780 	mov.w	r7, r0, lsl #2
 804c2c4:	d104      	bne.n	804c2d0 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
 804c2c6:	68b3      	ldr	r3, [r6, #8]
 804c2c8:	454b      	cmp	r3, r9
 804c2ca:	d006      	beq.n	804c2da <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 804c2cc:	2702      	movs	r7, #2
 804c2ce:	e7e4      	b.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
 804c2d0:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 804c2d2:	2805      	cmp	r0, #5
 804c2d4:	d1f1      	bne.n	804c2ba <LoRaMacCryptoUnsecureMessage+0x46>
 804c2d6:	270c      	movs	r7, #12
 804c2d8:	e7df      	b.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c2da:	4c2c      	ldr	r4, [pc, #176]	; (804c38c <LoRaMacCryptoUnsecureMessage+0x118>)
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c2dc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c2de:	6861      	ldr	r1, [r4, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804c2e0:	7b33      	ldrb	r3, [r6, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c2e2:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 804c2e4:	443a      	add	r2, r7
        isAck = false;
 804c2e6:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 804c2e8:	f892 a001 	ldrb.w	sl, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c2ec:	7931      	ldrb	r1, [r6, #4]
 804c2ee:	7892      	ldrb	r2, [r2, #2]
 804c2f0:	f8cd 9000 	str.w	r9, [sp]
 804c2f4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 804c2f8:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 804c2fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 804c300:	b289      	uxth	r1, r1
 804c302:	bf08      	it	eq
 804c304:	2300      	moveq	r3, #0
 804c306:	6830      	ldr	r0, [r6, #0]
 804c308:	f7ff fe16 	bl	804bf38 <VerifyCmacB0.constprop.3>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c30c:	4607      	mov	r7, r0
 804c30e:	2800      	cmp	r0, #0
 804c310:	d1c3      	bne.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 804c312:	f896 3020 	ldrb.w	r3, [r6, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804c316:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 804c31a:	9501      	str	r5, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 804c31c:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 804c31e:	f04f 0301 	mov.w	r3, #1
 804c322:	9300      	str	r3, [sp, #0]
 804c324:	bf18      	it	ne
 804c326:	4652      	movne	r2, sl
 804c328:	464b      	mov	r3, r9
 804c32a:	bf08      	it	eq
 804c32c:	2207      	moveq	r2, #7
 804c32e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 804c330:	f7ff fd4d 	bl	804bdce <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c334:	4607      	mov	r7, r0
 804c336:	2800      	cmp	r0, #0
 804c338:	d1af      	bne.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 804c33a:	f108 38ff 	add.w	r8, r8, #4294967295
 804c33e:	f1b8 0f06 	cmp.w	r8, #6
 804c342:	d807      	bhi.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
 804c344:	e8df f008 	tbb	[pc, r8]
 804c348:	0f0c0904 	.word	0x0f0c0904
 804c34c:	1512      	.short	0x1512
 804c34e:	18          	.byte	0x18
 804c34f:	00          	.byte	0x00
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 804c350:	6863      	ldr	r3, [r4, #4]
 804c352:	611d      	str	r5, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c354:	68a3      	ldr	r3, [r4, #8]
 804c356:	4798      	blx	r3
 804c358:	e79f      	b.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 804c35a:	6863      	ldr	r3, [r4, #4]
 804c35c:	615d      	str	r5, [r3, #20]
 804c35e:	e7f9      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 804c360:	6863      	ldr	r3, [r4, #4]
 804c362:	619d      	str	r5, [r3, #24]
 804c364:	e7f6      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 804c366:	6863      	ldr	r3, [r4, #4]
 804c368:	61dd      	str	r5, [r3, #28]
 804c36a:	e7f3      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 804c36c:	6863      	ldr	r3, [r4, #4]
 804c36e:	621d      	str	r5, [r3, #32]
 804c370:	e7f0      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 804c372:	6863      	ldr	r3, [r4, #4]
 804c374:	625d      	str	r5, [r3, #36]	; 0x24
 804c376:	e7ed      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 804c378:	6863      	ldr	r3, [r4, #4]
 804c37a:	629d      	str	r5, [r3, #40]	; 0x28
 804c37c:	e7ea      	b.n	804c354 <LoRaMacCryptoUnsecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c37e:	270a      	movs	r7, #10
 804c380:	e78b      	b.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804c382:	2710      	movs	r7, #16
 804c384:	e789      	b.n	804c29a <LoRaMacCryptoUnsecureMessage+0x26>
 804c386:	bf00      	nop
 804c388:	20001058 	.word	0x20001058
 804c38c:	20002fc8 	.word	0x20002fc8

0804c390 <LoRaMacCryptoDeriveMcRootKey>:
{
 804c390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 804c392:	4b11      	ldr	r3, [pc, #68]	; (804c3d8 <LoRaMacCryptoDeriveMcRootKey+0x48>)
 804c394:	685e      	ldr	r6, [r3, #4]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804c396:	4604      	mov	r4, r0
 804c398:	78b5      	ldrb	r5, [r6, #2]
 804c39a:	b910      	cbnz	r0, 804c3a2 <LoRaMacCryptoDeriveMcRootKey+0x12>
 804c39c:	b92d      	cbnz	r5, 804c3aa <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 804c39e:	200b      	movs	r0, #11
 804c3a0:	e017      	b.n	804c3d2 <LoRaMacCryptoDeriveMcRootKey+0x42>
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 804c3a2:	2801      	cmp	r0, #1
 804c3a4:	d101      	bne.n	804c3aa <LoRaMacCryptoDeriveMcRootKey+0x1a>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 804c3a6:	2d01      	cmp	r5, #1
 804c3a8:	d0f9      	beq.n	804c39e <LoRaMacCryptoDeriveMcRootKey+0xe>
    uint8_t compBase[16] = { 0 };
 804c3aa:	2210      	movs	r2, #16
 804c3ac:	2100      	movs	r1, #0
 804c3ae:	4668      	mov	r0, sp
 804c3b0:	f004 fac7 	bl	8050942 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 804c3b4:	2d01      	cmp	r5, #1
        compBase[0] = 0x20;
 804c3b6:	bf04      	itt	eq
 804c3b8:	2320      	moveq	r3, #32
 804c3ba:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 804c3be:	4622      	mov	r2, r4
 804c3c0:	2309      	movs	r3, #9
 804c3c2:	4669      	mov	r1, sp
 804c3c4:	6830      	ldr	r0, [r6, #0]
 804c3c6:	f7fc fc2e 	bl	8048c26 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c3ca:	2800      	cmp	r0, #0
 804c3cc:	bf0c      	ite	eq
 804c3ce:	2000      	moveq	r0, #0
 804c3d0:	200f      	movne	r0, #15
}
 804c3d2:	b004      	add	sp, #16
 804c3d4:	bd70      	pop	{r4, r5, r6, pc}
 804c3d6:	bf00      	nop
 804c3d8:	20002fc8 	.word	0x20002fc8

0804c3dc <LoRaMacCryptoSetKey>:
{
 804c3dc:	b510      	push	{r4, lr}
 804c3de:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 804c3e0:	f7fc fc1c 	bl	8048c1c <SecureElementSetKey>
 804c3e4:	b108      	cbz	r0, 804c3ea <LoRaMacCryptoSetKey+0xe>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c3e6:	200f      	movs	r0, #15
}
 804c3e8:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 804c3ea:	2c01      	cmp	r4, #1
 804c3ec:	d808      	bhi.n	804c400 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 804c3ee:	4620      	mov	r0, r4
 804c3f0:	f7ff ffce 	bl	804c390 <LoRaMacCryptoDeriveMcRootKey>
 804c3f4:	2800      	cmp	r0, #0
 804c3f6:	d1f6      	bne.n	804c3e6 <LoRaMacCryptoSetKey+0xa>
 804c3f8:	f7ff fd86 	bl	804bf08 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 804c3fc:	2800      	cmp	r0, #0
 804c3fe:	d1f2      	bne.n	804c3e6 <LoRaMacCryptoSetKey+0xa>
    return LORAMAC_CRYPTO_SUCCESS;
 804c400:	2000      	movs	r0, #0
 804c402:	e7f1      	b.n	804c3e8 <LoRaMacCryptoSetKey+0xc>

0804c404 <LoRaMacCryptoHandleJoinAccept>:
{
 804c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804c408:	4681      	mov	r9, r0
 804c40a:	b0c7      	sub	sp, #284	; 0x11c
 804c40c:	4688      	mov	r8, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 804c40e:	4614      	mov	r4, r2
 804c410:	2a00      	cmp	r2, #0
 804c412:	f000 80af 	beq.w	804c574 <LoRaMacCryptoHandleJoinAccept+0x170>
 804c416:	2900      	cmp	r1, #0
 804c418:	f000 80ac 	beq.w	804c574 <LoRaMacCryptoHandleJoinAccept+0x170>
    uint8_t micComputationOffset = 0;
 804c41c:	28ff      	cmp	r0, #255	; 0xff
 804c41e:	bf0c      	ite	eq
 804c420:	250c      	moveq	r5, #12
 804c422:	2500      	movne	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 804c424:	7912      	ldrb	r2, [r2, #4]
 804c426:	b2ae      	uxth	r6, r5
 804c428:	4432      	add	r2, r6
 804c42a:	2100      	movs	r1, #0
 804c42c:	a803      	add	r0, sp, #12
 804c42e:	f002 f8f2 	bl	804e616 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 804c432:	7921      	ldrb	r1, [r4, #4]
 804c434:	6820      	ldr	r0, [r4, #0]
 804c436:	ab03      	add	r3, sp, #12
 804c438:	441d      	add	r5, r3
 804c43a:	3901      	subs	r1, #1
 804c43c:	462b      	mov	r3, r5
 804c43e:	2202      	movs	r2, #2
 804c440:	b289      	uxth	r1, r1
 804c442:	3001      	adds	r0, #1
 804c444:	f7fc fb72 	bl	8048b2c <SecureElementAesEncrypt>
 804c448:	b118      	cbz	r0, 804c452 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 804c44a:	200f      	movs	r0, #15
}
 804c44c:	b047      	add	sp, #284	; 0x11c
 804c44e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 804c452:	7922      	ldrb	r2, [r4, #4]
 804c454:	6820      	ldr	r0, [r4, #0]
 804c456:	3a01      	subs	r2, #1
 804c458:	3001      	adds	r0, #1
 804c45a:	b292      	uxth	r2, r2
 804c45c:	4629      	mov	r1, r5
 804c45e:	f002 f8c6 	bl	804e5ee <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 804c462:	4620      	mov	r0, r4
 804c464:	f000 f88e 	bl	804c584 <LoRaMacParserJoinAccept>
 804c468:	2800      	cmp	r0, #0
 804c46a:	f040 8085 	bne.w	804c578 <LoRaMacCryptoHandleJoinAccept+0x174>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 804c46e:	f994 2010 	ldrsb.w	r2, [r4, #16]
 804c472:	4d43      	ldr	r5, [pc, #268]	; (804c580 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 804c474:	2a00      	cmp	r2, #0
 804c476:	686b      	ldr	r3, [r5, #4]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 804c478:	bfba      	itte	lt
 804c47a:	2201      	movlt	r2, #1
 804c47c:	709a      	strblt	r2, [r3, #2]
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 804c47e:	7098      	strbge	r0, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c480:	789b      	ldrb	r3, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 804c482:	bfb4      	ite	lt
 804c484:	2703      	movlt	r7, #3
        micComputationKeyID = NWK_KEY;
 804c486:	2702      	movge	r7, #2
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 804c488:	2b00      	cmp	r3, #0
 804c48a:	d145      	bne.n	804c518 <LoRaMacCryptoHandleJoinAccept+0x114>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c48c:	7921      	ldrb	r1, [r4, #4]
 804c48e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804c490:	6820      	ldr	r0, [r4, #0]
 804c492:	3904      	subs	r1, #4
 804c494:	463b      	mov	r3, r7
 804c496:	b289      	uxth	r1, r1
 804c498:	f7fc fb30 	bl	8048afc <SecureElementVerifyAesCmac>
 804c49c:	2800      	cmp	r0, #0
 804c49e:	d1d4      	bne.n	804c44a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 804c4a0:	2001      	movs	r0, #1
 804c4a2:	f7ff ff75 	bl	804c390 <LoRaMacCryptoDeriveMcRootKey>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4a6:	2800      	cmp	r0, #0
 804c4a8:	d1d0      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
 804c4aa:	f7ff fd2d 	bl	804bf08 <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4ae:	2800      	cmp	r0, #0
 804c4b0:	d1cc      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c4b2:	686b      	ldr	r3, [r5, #4]
 804c4b4:	1da6      	adds	r6, r4, #6
 804c4b6:	3409      	adds	r4, #9
 804c4b8:	3304      	adds	r3, #4
 804c4ba:	4622      	mov	r2, r4
 804c4bc:	4631      	mov	r1, r6
 804c4be:	2008      	movs	r0, #8
 804c4c0:	f7ff fcec 	bl	804be9c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4c4:	2800      	cmp	r0, #0
 804c4c6:	d1c1      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c4c8:	686b      	ldr	r3, [r5, #4]
 804c4ca:	4622      	mov	r2, r4
 804c4cc:	3304      	adds	r3, #4
 804c4ce:	4631      	mov	r1, r6
 804c4d0:	2007      	movs	r0, #7
 804c4d2:	f7ff fce3 	bl	804be9c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4d6:	2800      	cmp	r0, #0
 804c4d8:	d1b8      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c4da:	686b      	ldr	r3, [r5, #4]
 804c4dc:	4622      	mov	r2, r4
 804c4de:	3304      	adds	r3, #4
 804c4e0:	4631      	mov	r1, r6
 804c4e2:	2005      	movs	r0, #5
 804c4e4:	f7ff fcda 	bl	804be9c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4e8:	2800      	cmp	r0, #0
 804c4ea:	d1af      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 804c4ec:	686b      	ldr	r3, [r5, #4]
 804c4ee:	4622      	mov	r2, r4
 804c4f0:	3304      	adds	r3, #4
 804c4f2:	4631      	mov	r1, r6
 804c4f4:	2006      	movs	r0, #6
 804c4f6:	f7ff fcd1 	bl	804be9c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 804c4fa:	2800      	cmp	r0, #0
 804c4fc:	d1a6      	bne.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c4fe:	686b      	ldr	r3, [r5, #4]
    CryptoCtx.RJcount0 = 0;
 804c500:	8028      	strh	r0, [r5, #0]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c502:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c506:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 804c508:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 804c50a:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c50e:	68ab      	ldr	r3, [r5, #8]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 804c510:	9001      	str	r0, [sp, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 804c512:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 804c514:	9801      	ldr	r0, [sp, #4]
 804c516:	e799      	b.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c518:	2208      	movs	r2, #8
 804c51a:	4641      	mov	r1, r8
 804c51c:	f10d 000d 	add.w	r0, sp, #13
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 804c520:	f88d 900c 	strb.w	r9, [sp, #12]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c524:	f002 f86d 	bl	804e602 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804c528:	686b      	ldr	r3, [r5, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c52a:	7921      	ldrb	r1, [r4, #4]
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 804c52c:	889a      	ldrh	r2, [r3, #4]
 804c52e:	f88d 2015 	strb.w	r2, [sp, #21]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c532:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c534:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c536:	0a1b      	lsrs	r3, r3, #8
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c538:	3905      	subs	r1, #5
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 804c53a:	f88d 3016 	strb.w	r3, [sp, #22]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c53e:	4431      	add	r1, r6
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 804c540:	7963      	ldrb	r3, [r4, #5]
 804c542:	f88d 3017 	strb.w	r3, [sp, #23]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 804c546:	b289      	uxth	r1, r1
 804c548:	463b      	mov	r3, r7
 804c54a:	a803      	add	r0, sp, #12
 804c54c:	f7fc fad6 	bl	8048afc <SecureElementVerifyAesCmac>
 804c550:	2800      	cmp	r0, #0
 804c552:	f47f af7a 	bne.w	804c44a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804c556:	7a23      	ldrb	r3, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 804c558:	79e1      	ldrb	r1, [r4, #7]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 804c55a:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 804c55c:	041b      	lsls	r3, r3, #16
 804c55e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804c562:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 804c564:	686a      	ldr	r2, [r5, #4]
 804c566:	6891      	ldr	r1, [r2, #8]
 804c568:	4299      	cmp	r1, r3
 804c56a:	d207      	bcs.n	804c57c <LoRaMacCryptoHandleJoinAccept+0x178>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 804c56c:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 804c56e:	68ab      	ldr	r3, [r5, #8]
 804c570:	4798      	blx	r3
 804c572:	e795      	b.n	804c4a0 <LoRaMacCryptoHandleJoinAccept+0x9c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804c574:	200a      	movs	r0, #10
 804c576:	e769      	b.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 804c578:	2010      	movs	r0, #16
 804c57a:	e767      	b.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 804c57c:	2003      	movs	r0, #3
 804c57e:	e765      	b.n	804c44c <LoRaMacCryptoHandleJoinAccept+0x48>
 804c580:	20002fc8 	.word	0x20002fc8

0804c584 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 804c584:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c586:	4604      	mov	r4, r0
 804c588:	2800      	cmp	r0, #0
 804c58a:	d045      	beq.n	804c618 <LoRaMacParserJoinAccept+0x94>
 804c58c:	6801      	ldr	r1, [r0, #0]
 804c58e:	2900      	cmp	r1, #0
 804c590:	d042      	beq.n	804c618 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804c592:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c596:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 804c598:	2203      	movs	r2, #3
 804c59a:	3006      	adds	r0, #6
 804c59c:	f002 f827 	bl	804e5ee <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 804c5a0:	4620      	mov	r0, r4
 804c5a2:	2203      	movs	r2, #3
 804c5a4:	f850 1b09 	ldr.w	r1, [r0], #9
 804c5a8:	3104      	adds	r1, #4
 804c5aa:	f002 f820 	bl	804e5ee <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c5ae:	6821      	ldr	r1, [r4, #0]
 804c5b0:	79cb      	ldrb	r3, [r1, #7]
 804c5b2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c5b4:	7a0a      	ldrb	r2, [r1, #8]
 804c5b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804c5ba:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c5bc:	7a4a      	ldrb	r2, [r1, #9]
 804c5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804c5c2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c5c4:	7a8a      	ldrb	r2, [r1, #10]
 804c5c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c5ca:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 804c5cc:	7acb      	ldrb	r3, [r1, #11]
 804c5ce:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804c5d0:	7b0b      	ldrb	r3, [r1, #12]
 804c5d2:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 804c5d4:	7923      	ldrb	r3, [r4, #4]
 804c5d6:	2b21      	cmp	r3, #33	; 0x21
 804c5d8:	d11a      	bne.n	804c610 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 804c5da:	2210      	movs	r2, #16
 804c5dc:	310d      	adds	r1, #13
 804c5de:	f104 0012 	add.w	r0, r4, #18
 804c5e2:	f002 f804 	bl	804e5ee <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 804c5e6:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c5e8:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c5ea:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 804c5ec:	5c8b      	ldrb	r3, [r1, r2]
 804c5ee:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c5f0:	5c08      	ldrb	r0, [r1, r0]
 804c5f2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c5f6:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c5f8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c5fa:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c5fc:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c5fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 804c602:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c604:	5c8a      	ldrb	r2, [r1, r2]
 804c606:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c60a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 804c60c:	2000      	movs	r0, #0
}
 804c60e:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 804c610:	2b11      	cmp	r3, #17
 804c612:	dc03      	bgt.n	804c61c <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 804c614:	220d      	movs	r2, #13
 804c616:	e7e7      	b.n	804c5e8 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 804c618:	2002      	movs	r0, #2
 804c61a:	e7f8      	b.n	804c60e <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 804c61c:	2001      	movs	r0, #1
 804c61e:	e7f6      	b.n	804c60e <LoRaMacParserJoinAccept+0x8a>

0804c620 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 804c620:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c622:	4604      	mov	r4, r0
 804c624:	2800      	cmp	r0, #0
 804c626:	d054      	beq.n	804c6d2 <LoRaMacParserData+0xb2>
 804c628:	6801      	ldr	r1, [r0, #0]
 804c62a:	2900      	cmp	r1, #0
 804c62c:	d051      	beq.n	804c6d2 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 804c62e:	780b      	ldrb	r3, [r1, #0]
 804c630:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 804c632:	784b      	ldrb	r3, [r1, #1]
 804c634:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 804c636:	788a      	ldrb	r2, [r1, #2]
 804c638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804c63c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 804c63e:	78ca      	ldrb	r2, [r1, #3]
 804c640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804c644:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 804c646:	790a      	ldrb	r2, [r1, #4]
 804c648:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c64c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 804c64e:	794b      	ldrb	r3, [r1, #5]
 804c650:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 804c652:	798b      	ldrb	r3, [r1, #6]
 804c654:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804c656:	79ca      	ldrb	r2, [r1, #7]
 804c658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c65c:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 804c65e:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c660:	f002 020f 	and.w	r2, r2, #15
 804c664:	3108      	adds	r1, #8
 804c666:	3010      	adds	r0, #16
 804c668:	f001 ffc1 	bl	804e5ee <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c66c:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 804c66e:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c670:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 804c674:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 804c678:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804c67c:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c67e:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 804c682:	1a11      	subs	r1, r2, r0
 804c684:	2904      	cmp	r1, #4
 804c686:	dd0d      	ble.n	804c6a4 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804c688:	6821      	ldr	r1, [r4, #0]
 804c68a:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804c68c:	3a04      	subs	r2, #4
 804c68e:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 804c690:	5c08      	ldrb	r0, [r1, r0]
 804c692:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 804c696:	b2d2      	uxtb	r2, r2
 804c698:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 804c69c:	4419      	add	r1, r3
 804c69e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804c6a0:	f001 ffa5 	bl	804e5ee <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804c6a4:	7923      	ldrb	r3, [r4, #4]
 804c6a6:	6822      	ldr	r2, [r4, #0]
 804c6a8:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 804c6aa:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 804c6ac:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 804c6b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 804c6b2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 804c6b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 804c6ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 804c6bc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 804c6c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804c6c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 804c6c6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 804c6ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 804c6ce:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 804c6d0:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 804c6d2:	2002      	movs	r0, #2
 804c6d4:	e7fc      	b.n	804c6d0 <LoRaMacParserData+0xb0>

0804c6d6 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 804c6d6:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c6d8:	4604      	mov	r4, r0
 804c6da:	b360      	cbz	r0, 804c736 <LoRaMacSerializerJoinRequest+0x60>
 804c6dc:	6803      	ldr	r3, [r0, #0]
 804c6de:	b353      	cbz	r3, 804c736 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 804c6e0:	7902      	ldrb	r2, [r0, #4]
 804c6e2:	2a16      	cmp	r2, #22
 804c6e4:	d929      	bls.n	804c73a <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804c6e6:	7942      	ldrb	r2, [r0, #5]
 804c6e8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 804c6ea:	4605      	mov	r5, r0
 804c6ec:	2208      	movs	r2, #8
 804c6ee:	f855 0b0e 	ldr.w	r0, [r5], #14
 804c6f2:	1da1      	adds	r1, r4, #6
 804c6f4:	3001      	adds	r0, #1
 804c6f6:	f001 ff84 	bl	804e602 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 804c6fa:	6820      	ldr	r0, [r4, #0]
 804c6fc:	2208      	movs	r2, #8
 804c6fe:	3009      	adds	r0, #9
 804c700:	4629      	mov	r1, r5
 804c702:	f001 ff7e 	bl	804e602 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 804c706:	6823      	ldr	r3, [r4, #0]
 804c708:	8ae2      	ldrh	r2, [r4, #22]
 804c70a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 804c70c:	8ae3      	ldrh	r3, [r4, #22]
 804c70e:	6822      	ldr	r2, [r4, #0]
 804c710:	0a1b      	lsrs	r3, r3, #8
 804c712:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c714:	6823      	ldr	r3, [r4, #0]
 804c716:	69a2      	ldr	r2, [r4, #24]
 804c718:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804c71a:	69a3      	ldr	r3, [r4, #24]
 804c71c:	6822      	ldr	r2, [r4, #0]
 804c71e:	0a1b      	lsrs	r3, r3, #8
 804c720:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804c722:	6823      	ldr	r3, [r4, #0]
 804c724:	8b62      	ldrh	r2, [r4, #26]
 804c726:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804c728:	6823      	ldr	r3, [r4, #0]
 804c72a:	7ee2      	ldrb	r2, [r4, #27]
 804c72c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 804c72e:	2317      	movs	r3, #23
 804c730:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804c732:	2000      	movs	r0, #0
}
 804c734:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804c736:	2001      	movs	r0, #1
 804c738:	e7fc      	b.n	804c734 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804c73a:	2002      	movs	r0, #2
 804c73c:	e7fa      	b.n	804c734 <LoRaMacSerializerJoinRequest+0x5e>

0804c73e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 804c73e:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 804c740:	4604      	mov	r4, r0
 804c742:	2800      	cmp	r0, #0
 804c744:	d063      	beq.n	804c80e <LoRaMacSerializerData+0xd0>
 804c746:	6801      	ldr	r1, [r0, #0]
 804c748:	2900      	cmp	r1, #0
 804c74a:	d060      	beq.n	804c80e <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c74c:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804c74e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c752:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 804c756:	2a00      	cmp	r2, #0
 804c758:	d157      	bne.n	804c80a <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c75a:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 804c75c:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 804c75e:	7920      	ldrb	r0, [r4, #4]
 804c760:	4413      	add	r3, r2
 804c762:	4298      	cmp	r0, r3
 804c764:	d355      	bcc.n	804c812 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 804c766:	7963      	ldrb	r3, [r4, #5]
 804c768:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 804c76a:	6823      	ldr	r3, [r4, #0]
 804c76c:	68a2      	ldr	r2, [r4, #8]
 804c76e:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 804c770:	68a3      	ldr	r3, [r4, #8]
 804c772:	6822      	ldr	r2, [r4, #0]
 804c774:	0a1b      	lsrs	r3, r3, #8
 804c776:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 804c778:	6823      	ldr	r3, [r4, #0]
 804c77a:	8962      	ldrh	r2, [r4, #10]
 804c77c:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 804c77e:	6823      	ldr	r3, [r4, #0]
 804c780:	7ae2      	ldrb	r2, [r4, #11]
 804c782:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 804c784:	6823      	ldr	r3, [r4, #0]
 804c786:	7b22      	ldrb	r2, [r4, #12]
 804c788:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 804c78a:	6823      	ldr	r3, [r4, #0]
 804c78c:	89e2      	ldrh	r2, [r4, #14]
 804c78e:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 804c790:	89e3      	ldrh	r3, [r4, #14]
 804c792:	6822      	ldr	r2, [r4, #0]
 804c794:	0a1b      	lsrs	r3, r3, #8
 804c796:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 804c798:	7b22      	ldrb	r2, [r4, #12]
 804c79a:	6820      	ldr	r0, [r4, #0]
 804c79c:	f002 020f 	and.w	r2, r2, #15
 804c7a0:	f104 0110 	add.w	r1, r4, #16
 804c7a4:	3008      	adds	r0, #8
 804c7a6:	f001 ff22 	bl	804e5ee <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c7aa:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 804c7ac:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 804c7b0:	f003 030f 	and.w	r3, r3, #15
 804c7b4:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 804c7b8:	b12a      	cbz	r2, 804c7c6 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 804c7ba:	6822      	ldr	r2, [r4, #0]
 804c7bc:	f894 1020 	ldrb.w	r1, [r4, #32]
 804c7c0:	5551      	strb	r1, [r2, r5]
 804c7c2:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 804c7c6:	6820      	ldr	r0, [r4, #0]
 804c7c8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 804c7cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804c7ce:	4428      	add	r0, r5
 804c7d0:	f001 ff0d 	bl	804e5ee <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c7d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c7d8:	6822      	ldr	r2, [r4, #0]
 804c7da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 804c7dc:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 804c7de:	54d1      	strb	r1, [r2, r3]
 804c7e0:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 804c7e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804c7e4:	6820      	ldr	r0, [r4, #0]
 804c7e6:	b292      	uxth	r2, r2
 804c7e8:	0a09      	lsrs	r1, r1, #8
 804c7ea:	5481      	strb	r1, [r0, r2]
 804c7ec:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 804c7ee:	6821      	ldr	r1, [r4, #0]
 804c7f0:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 804c7f2:	b292      	uxth	r2, r2
 804c7f4:	5488      	strb	r0, [r1, r2]
 804c7f6:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 804c7f8:	b292      	uxth	r2, r2
 804c7fa:	6821      	ldr	r1, [r4, #0]
 804c7fc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 804c800:	5488      	strb	r0, [r1, r2]
 804c802:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 804c804:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 804c806:	2000      	movs	r0, #0
}
 804c808:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 804c80a:	3309      	adds	r3, #9
 804c80c:	e7a6      	b.n	804c75c <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 804c80e:	2001      	movs	r0, #1
 804c810:	e7fa      	b.n	804c808 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 804c812:	2002      	movs	r0, #2
 804c814:	e7f8      	b.n	804c808 <LoRaMacSerializerData+0xca>

0804c816 <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 804c816:	1e43      	subs	r3, r0, #1
 804c818:	4258      	negs	r0, r3
 804c81a:	4158      	adcs	r0, r3
 804c81c:	4770      	bx	lr

0804c81e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
    PhyParam_t phyParam = { 0 };
    switch( region )
 804c81e:	2801      	cmp	r0, #1
{
 804c820:	b082      	sub	sp, #8
    switch( region )
 804c822:	d103      	bne.n	804c82c <RegionGetPhyParam+0xe>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 804c824:	4608      	mov	r0, r1
        default:
        {
            return phyParam;
        }
    }
}
 804c826:	b002      	add	sp, #8
        AU915_GET_PHY_PARAM( );
 804c828:	f000 b8d2 	b.w	804c9d0 <RegionAU915GetPhyParam>
}
 804c82c:	2000      	movs	r0, #0
 804c82e:	b002      	add	sp, #8
 804c830:	4770      	bx	lr

0804c832 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 804c832:	2801      	cmp	r0, #1
 804c834:	d102      	bne.n	804c83c <RegionSetBandTxDone+0xa>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 804c836:	4608      	mov	r0, r1
 804c838:	f000 b974 	b.w	804cb24 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 804c83c:	4770      	bx	lr

0804c83e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 804c83e:	2801      	cmp	r0, #1
 804c840:	d102      	bne.n	804c848 <RegionInitDefaults+0xa>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 804c842:	4608      	mov	r0, r1
 804c844:	f000 b97e 	b.w	804cb44 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 804c848:	4770      	bx	lr

0804c84a <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
    switch( region )
 804c84a:	2801      	cmp	r0, #1
 804c84c:	d102      	bne.n	804c854 <RegionGetNvmCtx+0xa>
    {
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
 804c84e:	4608      	mov	r0, r1
 804c850:	f000 b9f4 	b.w	804cc3c <RegionAU915GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 804c854:	2000      	movs	r0, #0
 804c856:	4770      	bx	lr

0804c858 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 804c858:	2801      	cmp	r0, #1
{
 804c85a:	460b      	mov	r3, r1
    switch( region )
 804c85c:	d103      	bne.n	804c866 <RegionVerify+0xe>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
 804c85e:	4611      	mov	r1, r2
 804c860:	4618      	mov	r0, r3
 804c862:	f000 b9f3 	b.w	804cc4c <RegionAU915Verify>
        default:
        {
            return false;
        }
    }
}
 804c866:	2000      	movs	r0, #0
 804c868:	4770      	bx	lr

0804c86a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 804c86a:	2801      	cmp	r0, #1
 804c86c:	d102      	bne.n	804c874 <RegionApplyCFList+0xa>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 804c86e:	4608      	mov	r0, r1
 804c870:	f000 ba18 	b.w	804cca4 <RegionAU915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 804c874:	4770      	bx	lr

0804c876 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 804c876:	2801      	cmp	r0, #1
 804c878:	d102      	bne.n	804c880 <RegionChanMaskSet+0xa>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
 804c87a:	4608      	mov	r0, r1
 804c87c:	f000 ba38 	b.w	804ccf0 <RegionAU915ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 804c880:	2000      	movs	r0, #0
 804c882:	4770      	bx	lr

0804c884 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804c884:	b410      	push	{r4}
    switch( region )
 804c886:	2801      	cmp	r0, #1
{
 804c888:	460c      	mov	r4, r1
 804c88a:	4611      	mov	r1, r2
 804c88c:	461a      	mov	r2, r3
 804c88e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804c890:	d104      	bne.n	804c89c <RegionComputeRxWindowParameters+0x18>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804c892:	4620      	mov	r0, r4
        default:
        {
            break;
        }
    }
}
 804c894:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 804c898:	f000 ba56 	b.w	804cd48 <RegionAU915ComputeRxWindowParameters>
}
 804c89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c8a0:	4770      	bx	lr

0804c8a2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 804c8a2:	2801      	cmp	r0, #1
{
 804c8a4:	460b      	mov	r3, r1
    switch( region )
 804c8a6:	d103      	bne.n	804c8b0 <RegionRxConfig+0xe>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 804c8a8:	4611      	mov	r1, r2
 804c8aa:	4618      	mov	r0, r3
 804c8ac:	f000 ba8e 	b.w	804cdcc <RegionAU915RxConfig>
        default:
        {
            return false;
        }
    }
}
 804c8b0:	2000      	movs	r0, #0
 804c8b2:	4770      	bx	lr

0804c8b4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 804c8b4:	2801      	cmp	r0, #1
{
 804c8b6:	b410      	push	{r4}
 804c8b8:	460c      	mov	r4, r1
 804c8ba:	4611      	mov	r1, r2
    switch( region )
 804c8bc:	d105      	bne.n	804c8ca <RegionTxConfig+0x16>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 804c8be:	4620      	mov	r0, r4
 804c8c0:	461a      	mov	r2, r3
        default:
        {
            return false;
        }
    }
}
 804c8c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_TX_CONFIG( );
 804c8c6:	f000 badb 	b.w	804ce80 <RegionAU915TxConfig>
}
 804c8ca:	2000      	movs	r0, #0
 804c8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c8d0:	4770      	bx	lr

0804c8d2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804c8d2:	b430      	push	{r4, r5}
    switch( region )
 804c8d4:	2801      	cmp	r0, #1
{
 804c8d6:	460c      	mov	r4, r1
 804c8d8:	4611      	mov	r1, r2
 804c8da:	461a      	mov	r2, r3
 804c8dc:	e9dd 3502 	ldrd	r3, r5, [sp, #8]
    switch( region )
 804c8e0:	d104      	bne.n	804c8ec <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 804c8e2:	9502      	str	r5, [sp, #8]
 804c8e4:	4620      	mov	r0, r4
        default:
        {
            return 0;
        }
    }
}
 804c8e6:	bc30      	pop	{r4, r5}
        AU915_LINK_ADR_REQ( );
 804c8e8:	f000 bb46 	b.w	804cf78 <RegionAU915LinkAdrReq>
}
 804c8ec:	2000      	movs	r0, #0
 804c8ee:	bc30      	pop	{r4, r5}
 804c8f0:	4770      	bx	lr

0804c8f2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 804c8f2:	2801      	cmp	r0, #1
 804c8f4:	d102      	bne.n	804c8fc <RegionRxParamSetupReq+0xa>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 804c8f6:	4608      	mov	r0, r1
 804c8f8:	f000 bc4a 	b.w	804d190 <RegionAU915RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804c8fc:	2000      	movs	r0, #0
 804c8fe:	4770      	bx	lr

0804c900 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 804c900:	2801      	cmp	r0, #1
 804c902:	d102      	bne.n	804c90a <RegionNewChannelReq+0xa>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 804c904:	4608      	mov	r0, r1
 804c906:	f000 bc69 	b.w	804d1dc <RegionAU915NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804c90a:	2000      	movs	r0, #0
 804c90c:	4770      	bx	lr

0804c90e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 804c90e:	2801      	cmp	r0, #1
 804c910:	d102      	bne.n	804c918 <RegionTxParamSetupReq+0xa>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 804c912:	4608      	mov	r0, r1
 804c914:	f000 bc64 	b.w	804d1e0 <RegionAU915TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 804c918:	2000      	movs	r0, #0
 804c91a:	4770      	bx	lr

0804c91c <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 804c91c:	2801      	cmp	r0, #1
 804c91e:	d102      	bne.n	804c926 <RegionDlChannelReq+0xa>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 804c920:	4608      	mov	r0, r1
 804c922:	f000 bc5f 	b.w	804d1e4 <RegionAU915DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 804c926:	2000      	movs	r0, #0
 804c928:	4770      	bx	lr

0804c92a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 804c92a:	2801      	cmp	r0, #1
{
 804c92c:	460b      	mov	r3, r1
    switch( region )
 804c92e:	d103      	bne.n	804c938 <RegionAlternateDr+0xe>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
 804c930:	4611      	mov	r1, r2
 804c932:	4618      	mov	r0, r3
 804c934:	f000 bc58 	b.w	804d1e8 <RegionAU915AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 804c938:	2000      	movs	r0, #0
 804c93a:	4770      	bx	lr

0804c93c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
    switch( region )
 804c93c:	2801      	cmp	r0, #1
 804c93e:	d102      	bne.n	804c946 <RegionCalcBackOff+0xa>
    {
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
 804c940:	4608      	mov	r0, r1
 804c942:	f000 bc63 	b.w	804d20c <RegionAU915CalcBackOff>
        default:
        {
            break;
        }
    }
}
 804c946:	4770      	bx	lr

0804c948 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804c948:	b410      	push	{r4}
    switch( region )
 804c94a:	2801      	cmp	r0, #1
{
 804c94c:	460c      	mov	r4, r1
 804c94e:	4611      	mov	r1, r2
 804c950:	461a      	mov	r2, r3
 804c952:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 804c954:	d104      	bne.n	804c960 <RegionNextChannel+0x18>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 804c956:	4620      	mov	r0, r4
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 804c958:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_NEXT_CHANNEL( );
 804c95c:	f000 bc74 	b.w	804d248 <RegionAU915NextChannel>
}
 804c960:	2009      	movs	r0, #9
 804c962:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c966:	4770      	bx	lr

0804c968 <RegionSetContinuousWave>:
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 804c968:	2801      	cmp	r0, #1
 804c96a:	d102      	bne.n	804c972 <RegionSetContinuousWave+0xa>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 804c96c:	4608      	mov	r0, r1
 804c96e:	f000 bd0d 	b.w	804d38c <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 804c972:	4770      	bx	lr

0804c974 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    switch( region )
 804c974:	2801      	cmp	r0, #1
{
 804c976:	b410      	push	{r4}
 804c978:	460c      	mov	r4, r1
 804c97a:	4611      	mov	r1, r2
    switch( region )
 804c97c:	d105      	bne.n	804c98a <RegionApplyDrOffset+0x16>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 804c97e:	4620      	mov	r0, r4
 804c980:	461a      	mov	r2, r3
        default:
        {
            return dr;
        }
    }
}
 804c982:	f85d 4b04 	ldr.w	r4, [sp], #4
        AU915_APPLY_DR_OFFSET( );
 804c986:	f000 bd25 	b.w	804d3d4 <RegionAU915ApplyDrOffset>
}
 804c98a:	b2d0      	uxtb	r0, r2
 804c98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c990:	4770      	bx	lr
	...

0804c994 <VerifyRfFreq>:
}

static bool VerifyRfFreq( uint32_t freq )
{
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 804c994:	4b0a      	ldr	r3, [pc, #40]	; (804c9c0 <VerifyRfFreq+0x2c>)
{
 804c996:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 804c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 804c99a:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 804c99c:	4798      	blx	r3
 804c99e:	b170      	cbz	r0, 804c9be <VerifyRfFreq+0x2a>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 804c9a0:	4b08      	ldr	r3, [pc, #32]	; (804c9c4 <VerifyRfFreq+0x30>)
 804c9a2:	4a09      	ldr	r2, [pc, #36]	; (804c9c8 <VerifyRfFreq+0x34>)
 804c9a4:	4423      	add	r3, r4
 804c9a6:	4293      	cmp	r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 804c9a8:	bf9f      	itttt	ls
 804c9aa:	4a08      	ldrls	r2, [pc, #32]	; (804c9cc <VerifyRfFreq+0x38>)
 804c9ac:	fbb3 f0f2 	udivls	r0, r3, r2
 804c9b0:	fb02 3010 	mlsls	r0, r2, r0, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 804c9b4:	fab0 f080 	clzls	r0, r0
 804c9b8:	bf94      	ite	ls
 804c9ba:	0940      	lsrls	r0, r0, #5
        return false;
 804c9bc:	2000      	movhi	r0, #0
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
    {
        return false;
    }
    return true;
}
 804c9be:	bd10      	pop	{r4, pc}
 804c9c0:	08052140 	.word	0x08052140
 804c9c4:	c8f78f60 	.word	0xc8f78f60
 804c9c8:	00401640 	.word	0x00401640
 804c9cc:	000927c0 	.word	0x000927c0

0804c9d0 <RegionAU915GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 804c9d0:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 804c9d2:	2300      	movs	r3, #0
 804c9d4:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 804c9d6:	7803      	ldrb	r3, [r0, #0]
 804c9d8:	3b01      	subs	r3, #1
 804c9da:	2b34      	cmp	r3, #52	; 0x34
 804c9dc:	d832      	bhi.n	804ca44 <RegionAU915GetPhyParam+0x74>
 804c9de:	e8df f003 	tbb	[pc, r3]
 804c9e2:	1f1b      	.short	0x1f1b
 804c9e4:	21313131 	.word	0x21313131
 804c9e8:	31313131 	.word	0x31313131
 804c9ec:	4d43413f 	.word	0x4d43413f
 804c9f0:	5e5b5831 	.word	0x5e5b5831
 804c9f4:	6a676461 	.word	0x6a676461
 804c9f8:	751d7331 	.word	0x751d7331
 804c9fc:	7d7b7977 	.word	0x7d7b7977
 804ca00:	24827f31 	.word	0x24827f31
 804ca04:	31313131 	.word	0x31313131
 804ca08:	31313131 	.word	0x31313131
 804ca0c:	31313131 	.word	0x31313131
 804ca10:	1d843131 	.word	0x1d843131
 804ca14:	1d8c      	.short	0x1d8c
 804ca16:	1d          	.byte	0x1d
 804ca17:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 804ca18:	78c3      	ldrb	r3, [r0, #3]
 804ca1a:	b91b      	cbnz	r3, 804ca24 <RegionAU915GetPhyParam+0x54>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 804ca1c:	2308      	movs	r3, #8
 804ca1e:	e002      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0)
 804ca20:	7883      	ldrb	r3, [r0, #2]
 804ca22:	b17b      	cbz	r3, 804ca44 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_DEFAULT_DATARATE;
 804ca24:	2302      	movs	r3, #2
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
            break;
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804ca26:	9300      	str	r3, [sp, #0]
            break;
 804ca28:	e00c      	b.n	804ca44 <RegionAU915GetPhyParam+0x74>
            if( getPhy->UplinkDwellTime == 0)
 804ca2a:	7882      	ldrb	r2, [r0, #2]
 804ca2c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 804ca30:	b962      	cbnz	r2, 804ca4c <RegionAU915GetPhyParam+0x7c>
    if( dr == minDr )
 804ca32:	b12b      	cbz	r3, 804ca40 <RegionAU915GetPhyParam+0x70>
    else if( dr == DR_8 )
 804ca34:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804ca36:	bf1a      	itte	ne
 804ca38:	f103 33ff 	addne.w	r3, r3, #4294967295
 804ca3c:	b2da      	uxtbne	r2, r3
        nextLowerDr = DR_6;
 804ca3e:	2206      	moveq	r2, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 804ca40:	b252      	sxtb	r2, r2
 804ca42:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 804ca44:	9800      	ldr	r0, [sp, #0]
 804ca46:	b003      	add	sp, #12
 804ca48:	f85d fb04 	ldr.w	pc, [sp], #4
    if( dr == minDr )
 804ca4c:	2b02      	cmp	r3, #2
 804ca4e:	d005      	beq.n	804ca5c <RegionAU915GetPhyParam+0x8c>
    else if( dr == DR_8 )
 804ca50:	2b08      	cmp	r3, #8
        nextLowerDr = dr - 1;
 804ca52:	bf1a      	itte	ne
 804ca54:	f103 33ff 	addne.w	r3, r3, #4294967295
 804ca58:	b2db      	uxtbne	r3, r3
        nextLowerDr = DR_6;
 804ca5a:	2306      	moveq	r3, #6
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 804ca5c:	b25b      	sxtb	r3, r3
 804ca5e:	e7e2      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 804ca60:	2340      	movs	r3, #64	; 0x40
 804ca62:	e7e0      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 804ca64:	2320      	movs	r3, #32
 804ca66:	e7de      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 804ca68:	7881      	ldrb	r1, [r0, #2]
 804ca6a:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804ca6e:	4b24      	ldr	r3, [pc, #144]	; (804cb00 <RegionAU915GetPhyParam+0x130>)
 804ca70:	b909      	cbnz	r1, 804ca76 <RegionAU915GetPhyParam+0xa6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 804ca72:	5c9b      	ldrb	r3, [r3, r2]
 804ca74:	e7d7      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 804ca76:	4413      	add	r3, r2
 804ca78:	7b9b      	ldrb	r3, [r3, #14]
 804ca7a:	e7d4      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
 804ca7c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 804ca80:	4b1f      	ldr	r3, [pc, #124]	; (804cb00 <RegionAU915GetPhyParam+0x130>)
            if( getPhy->UplinkDwellTime == 0)
 804ca82:	7881      	ldrb	r1, [r0, #2]
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804ca84:	4413      	add	r3, r2
            if( getPhy->UplinkDwellTime == 0)
 804ca86:	b909      	cbnz	r1, 804ca8c <RegionAU915GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 804ca88:	7f1b      	ldrb	r3, [r3, #28]
 804ca8a:	e7cc      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 804ca8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 804ca90:	e7c9      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 804ca92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 804ca96:	e7c6      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 804ca98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804ca9c:	e7c3      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 804ca9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 804caa2:	e7c0      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 804caa4:	f241 3388 	movw	r3, #5000	; 0x1388
 804caa8:	e7bd      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 804caaa:	f241 7370 	movw	r3, #6000	; 0x1770
 804caae:	e7ba      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 804cab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804cab4:	e7b7      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 804cab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804caba:	4812      	ldr	r0, [pc, #72]	; (804cb04 <RegionAU915GetPhyParam+0x134>)
 804cabc:	f001 fd8a 	bl	804e5d4 <randr>
 804cac0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 804cac4:	9000      	str	r0, [sp, #0]
            break;
 804cac6:	e7bd      	b.n	804ca44 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 804cac8:	4b0f      	ldr	r3, [pc, #60]	; (804cb08 <RegionAU915GetPhyParam+0x138>)
 804caca:	e7ac      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 804cacc:	4b0f      	ldr	r3, [pc, #60]	; (804cb0c <RegionAU915GetPhyParam+0x13c>)
 804cace:	e7aa      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 804cad0:	4b0f      	ldr	r3, [pc, #60]	; (804cb10 <RegionAU915GetPhyParam+0x140>)
 804cad2:	e7a8      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 804cad4:	2348      	movs	r3, #72	; 0x48
 804cad6:	e7a6      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 804cad8:	4b0e      	ldr	r3, [pc, #56]	; (804cb14 <RegionAU915GetPhyParam+0x144>)
 804cada:	e7a4      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 804cadc:	2301      	movs	r3, #1
 804cade:	e7a2      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 804cae0:	4b0d      	ldr	r3, [pc, #52]	; (804cb18 <RegionAU915GetPhyParam+0x148>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804cae2:	9300      	str	r3, [sp, #0]
            break;
 804cae4:	e7ae      	b.n	804ca44 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 804cae6:	4b0d      	ldr	r3, [pc, #52]	; (804cb1c <RegionAU915GetPhyParam+0x14c>)
 804cae8:	e7fb      	b.n	804cae2 <RegionAU915GetPhyParam+0x112>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 804caea:	f240 3313 	movw	r3, #787	; 0x313
 804caee:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 804caf2:	2301      	movs	r3, #1
 804caf4:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 804caf8:	e7a4      	b.n	804ca44 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 804cafa:	4b09      	ldr	r3, [pc, #36]	; (804cb20 <RegionAU915GetPhyParam+0x150>)
 804cafc:	e793      	b.n	804ca26 <RegionAU915GetPhyParam+0x56>
 804cafe:	bf00      	nop
 804cb00:	080524f8 	.word	0x080524f8
 804cb04:	fffffc18 	.word	0xfffffc18
 804cb08:	370870a0 	.word	0x370870a0
 804cb0c:	20003378 	.word	0x20003378
 804cb10:	20003390 	.word	0x20003390
 804cb14:	20003008 	.word	0x20003008
 804cb18:	41f00000 	.word	0x41f00000
 804cb1c:	3e19999a 	.word	0x3e19999a
 804cb20:	000927c0 	.word	0x000927c0

0804cb24 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 804cb24:	4906      	ldr	r1, [pc, #24]	; (804cb40 <RegionAU915SetBandTxDone+0x1c>)
 804cb26:	7803      	ldrb	r3, [r0, #0]
 804cb28:	220c      	movs	r2, #12
 804cb2a:	fb02 1303 	mla	r3, r2, r3, r1
 804cb2e:	6842      	ldr	r2, [r0, #4]
 804cb30:	7a5b      	ldrb	r3, [r3, #9]
 804cb32:	7840      	ldrb	r0, [r0, #1]
 804cb34:	3336      	adds	r3, #54	; 0x36
 804cb36:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 804cb3a:	f000 bcf1 	b.w	804d520 <RegionCommonSetBandTxDone>
 804cb3e:	bf00      	nop
 804cb40:	20003008 	.word	0x20003008

0804cb44 <RegionAU915InitDefaults>:
}

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 804cb44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cb46:	2301      	movs	r3, #1
 804cb48:	f8ad 3000 	strh.w	r3, [sp]
    {
        AU915_BAND0
    };

    switch( params->Type )
 804cb4c:	7903      	ldrb	r3, [r0, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cb4e:	2400      	movs	r4, #0
    switch( params->Type )
 804cb50:	2b01      	cmp	r3, #1
    Band_t bands[AU915_MAX_NB_BANDS] =
 804cb52:	f88d 4002 	strb.w	r4, [sp, #2]
 804cb56:	e9cd 4401 	strd	r4, r4, [sp, #4]
 804cb5a:	9403      	str	r4, [sp, #12]
    switch( params->Type )
 804cb5c:	d049      	beq.n	804cbf2 <RegionAU915InitDefaults+0xae>
 804cb5e:	d303      	bcc.n	804cb68 <RegionAU915InitDefaults+0x24>
 804cb60:	2b02      	cmp	r3, #2
 804cb62:	d03d      	beq.n	804cbe0 <RegionAU915InitDefaults+0x9c>
        default:
        {
            break;
        }
    }
}
 804cb64:	b004      	add	sp, #16
 804cb66:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804cb68:	2210      	movs	r2, #16
 804cb6a:	4669      	mov	r1, sp
 804cb6c:	482a      	ldr	r0, [pc, #168]	; (804cc18 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cb6e:	4d2b      	ldr	r5, [pc, #172]	; (804cc1c <RegionAU915InitDefaults+0xd8>)
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 804cb70:	f001 fd3d 	bl	804e5ee <memcpy1>
 804cb74:	4b2a      	ldr	r3, [pc, #168]	; (804cc20 <RegionAU915InitDefaults+0xdc>)
 804cb76:	4a2b      	ldr	r2, [pc, #172]	; (804cc24 <RegionAU915InitDefaults+0xe0>)
 804cb78:	4619      	mov	r1, r3
 804cb7a:	4618      	mov	r0, r3
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804cb7c:	2650      	movs	r6, #80	; 0x50
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 804cb7e:	600a      	str	r2, [r1, #0]
 804cb80:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 804cb84:	f502 72a0 	add.w	r2, r2, #320	; 0x140
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cb88:	42aa      	cmp	r2, r5
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 804cb8a:	720e      	strb	r6, [r1, #8]
                NvmCtx.Channels[i].Band = 0;
 804cb8c:	724c      	strb	r4, [r1, #9]
 804cb8e:	f101 010c 	add.w	r1, r1, #12
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 804cb92:	d1f4      	bne.n	804cb7e <RegionAU915InitDefaults+0x3a>
 804cb94:	4a24      	ldr	r2, [pc, #144]	; (804cc28 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cb96:	4c25      	ldr	r4, [pc, #148]	; (804cc2c <RegionAU915InitDefaults+0xe8>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804cb98:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 804cb9a:	2100      	movs	r1, #0
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 804cb9c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 804cba0:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 804cba4:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cba8:	42a2      	cmp	r2, r4
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 804cbaa:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
                NvmCtx.Channels[i].Band = 0;
 804cbae:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
 804cbb2:	f103 030c 	add.w	r3, r3, #12
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 804cbb6:	d1f1      	bne.n	804cb9c <RegionAU915InitDefaults+0x58>
            NvmCtx.ChannelsDefaultMask[1] = 0x0000;
 804cbb8:	f8c0 138c 	str.w	r1, [r0, #908]	; 0x38c
            NvmCtx.ChannelsDefaultMask[3] = 0x0000;
 804cbbc:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804cbc0:	491b      	ldr	r1, [pc, #108]	; (804cc30 <RegionAU915InitDefaults+0xec>)
            NvmCtx.ChannelsDefaultMask[0] = 0x0001;
 804cbc2:	2301      	movs	r3, #1
 804cbc4:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804cbc8:	2206      	movs	r2, #6
 804cbca:	f1a1 0018 	sub.w	r0, r1, #24
 804cbce:	f000 fc98 	bl	804d502 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 804cbd2:	4918      	ldr	r1, [pc, #96]	; (804cc34 <RegionAU915InitDefaults+0xf0>)
 804cbd4:	2206      	movs	r2, #6
 804cbd6:	f101 000c 	add.w	r0, r1, #12
 804cbda:	f000 fc92 	bl	804d502 <RegionCommonChanMaskCopy>
            break;
 804cbde:	e7c1      	b.n	804cb64 <RegionAU915InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 804cbe0:	6801      	ldr	r1, [r0, #0]
 804cbe2:	2900      	cmp	r1, #0
 804cbe4:	d0be      	beq.n	804cb64 <RegionAU915InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 804cbe6:	f44f 7265 	mov.w	r2, #916	; 0x394
 804cbea:	480d      	ldr	r0, [pc, #52]	; (804cc20 <RegionAU915InitDefaults+0xdc>)
 804cbec:	f001 fcff 	bl	804e5ee <memcpy1>
 804cbf0:	e7b8      	b.n	804cb64 <RegionAU915InitDefaults+0x20>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 804cbf2:	490f      	ldr	r1, [pc, #60]	; (804cc30 <RegionAU915InitDefaults+0xec>)
 804cbf4:	2206      	movs	r2, #6
 804cbf6:	f1a1 0018 	sub.w	r0, r1, #24
 804cbfa:	f000 fc82 	bl	804d502 <RegionCommonChanMaskCopy>
 804cbfe:	4b0e      	ldr	r3, [pc, #56]	; (804cc38 <RegionAU915InitDefaults+0xf4>)
 804cc00:	f103 010c 	add.w	r1, r3, #12
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804cc04:	881a      	ldrh	r2, [r3, #0]
 804cc06:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 804cc0a:	4002      	ands	r2, r0
 804cc0c:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804cc10:	428b      	cmp	r3, r1
 804cc12:	d1f7      	bne.n	804cc04 <RegionAU915InitDefaults+0xc0>
 804cc14:	e7a6      	b.n	804cb64 <RegionAU915InitDefaults+0x20>
 804cc16:	bf00      	nop
 804cc18:	20003368 	.word	0x20003368
 804cc1c:	37502800 	.word	0x37502800
 804cc20:	20003008 	.word	0x20003008
 804cc24:	368cd800 	.word	0x368cd800
 804cc28:	36978660 	.word	0x36978660
 804cc2c:	375ad660 	.word	0x375ad660
 804cc30:	20003390 	.word	0x20003390
 804cc34:	20003378 	.word	0x20003378
 804cc38:	20003384 	.word	0x20003384

0804cc3c <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 804cc3c:	f44f 7365 	mov.w	r3, #916	; 0x394
 804cc40:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 804cc42:	4801      	ldr	r0, [pc, #4]	; (804cc48 <RegionAU915GetNvmCtx+0xc>)
 804cc44:	4770      	bx	lr
 804cc46:	bf00      	nop
 804cc48:	20003008 	.word	0x20003008

0804cc4c <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 804cc4c:	b508      	push	{r3, lr}
 804cc4e:	4603      	mov	r3, r0
    switch( phyAttribute )
 804cc50:	290a      	cmp	r1, #10
 804cc52:	d825      	bhi.n	804cca0 <RegionAU915Verify+0x54>
 804cc54:	e8df f001 	tbb	[pc, r1]
 804cc58:	24242406 	.word	0x24242406
 804cc5c:	160b0b24 	.word	0x160b0b24
 804cc60:	1f24      	.short	0x1f24
 804cc62:	1f          	.byte	0x1f
 804cc63:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 804cc64:	6800      	ldr	r0, [r0, #0]
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 804cc66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 804cc6a:	f7ff be93 	b.w	804c994 <VerifyRfFreq>
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804cc6e:	7899      	ldrb	r1, [r3, #2]
 804cc70:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 804cc74:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804cc76:	b961      	cbnz	r1, 804cc92 <RegionAU915Verify+0x46>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804cc78:	f000 fc03 	bl	804d482 <RegionCommonValueInRange>
 804cc7c:	3000      	adds	r0, #0
 804cc7e:	bf18      	it	ne
 804cc80:	2001      	movne	r0, #1
}
 804cc82:	bd08      	pop	{r3, pc}
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804cc84:	789b      	ldrb	r3, [r3, #2]
 804cc86:	f990 0000 	ldrsb.w	r0, [r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804cc8a:	220d      	movs	r2, #13
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 804cc8c:	b90b      	cbnz	r3, 804cc92 <RegionAU915Verify+0x46>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 804cc8e:	2108      	movs	r1, #8
 804cc90:	e7f2      	b.n	804cc78 <RegionAU915Verify+0x2c>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 804cc92:	2102      	movs	r1, #2
 804cc94:	e7f0      	b.n	804cc78 <RegionAU915Verify+0x2c>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 804cc96:	220e      	movs	r2, #14
 804cc98:	2100      	movs	r1, #0
 804cc9a:	f990 0000 	ldrsb.w	r0, [r0]
 804cc9e:	e7eb      	b.n	804cc78 <RegionAU915Verify+0x2c>
            return AU915_DUTY_CYCLE_ENABLED;
 804cca0:	2000      	movs	r0, #0
 804cca2:	e7ee      	b.n	804cc82 <RegionAU915Verify+0x36>

0804cca4 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 804cca4:	b530      	push	{r4, r5, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 804cca6:	7903      	ldrb	r3, [r0, #4]
 804cca8:	2b10      	cmp	r3, #16
 804ccaa:	d11d      	bne.n	804cce8 <RegionAU915ApplyCFList+0x44>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 804ccac:	6800      	ldr	r0, [r0, #0]
 804ccae:	7bc3      	ldrb	r3, [r0, #15]
 804ccb0:	2b01      	cmp	r3, #1
 804ccb2:	d119      	bne.n	804cce8 <RegionAU915ApplyCFList+0x44>
 804ccb4:	4b0d      	ldr	r3, [pc, #52]	; (804ccec <RegionAU915ApplyCFList+0x48>)
 804ccb6:	2100      	movs	r1, #0
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804ccb8:	f2a3 356e 	subw	r5, r3, #878	; 0x36e
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 804ccbc:	f810 2011 	ldrb.w	r2, [r0, r1, lsl #1]
 804ccc0:	805a      	strh	r2, [r3, #2]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804ccc2:	eb00 0441 	add.w	r4, r0, r1, lsl #1
        if( chMaskItr == 4 )
 804ccc6:	2904      	cmp	r1, #4
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 804ccc8:	7864      	ldrb	r4, [r4, #1]
 804ccca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 804ccce:	f823 2f02 	strh.w	r2, [r3, #2]!
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 804ccd2:	bf04      	itt	eq
 804ccd4:	b2d2      	uxtbeq	r2, r2
 804ccd6:	f8a5 2378 	strheq.w	r2, [r5, #888]	; 0x378
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804ccda:	899a      	ldrh	r2, [r3, #12]
 804ccdc:	881c      	ldrh	r4, [r3, #0]
 804ccde:	3101      	adds	r1, #1
 804cce0:	4022      	ands	r2, r4
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804cce2:	2905      	cmp	r1, #5
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 804cce4:	819a      	strh	r2, [r3, #12]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 804cce6:	d1e9      	bne.n	804ccbc <RegionAU915ApplyCFList+0x18>
    }
}
 804cce8:	bd30      	pop	{r4, r5, pc}
 804ccea:	bf00      	nop
 804ccec:	20003376 	.word	0x20003376

0804ccf0 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 804ccf0:	b538      	push	{r3, r4, r5, lr}
    switch( chanMaskSet->ChannelsMaskType )
 804ccf2:	7904      	ldrb	r4, [r0, #4]
 804ccf4:	b11c      	cbz	r4, 804ccfe <RegionAU915ChanMaskSet+0xe>
 804ccf6:	2c01      	cmp	r4, #1
 804ccf8:	d01c      	beq.n	804cd34 <RegionAU915ChanMaskSet+0x44>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
            break;
        }
        default:
            return false;
 804ccfa:	2000      	movs	r0, #0
 804ccfc:	e019      	b.n	804cd32 <RegionAU915ChanMaskSet+0x42>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 804ccfe:	4d10      	ldr	r5, [pc, #64]	; (804cd40 <RegionAU915ChanMaskSet+0x50>)
 804cd00:	6801      	ldr	r1, [r0, #0]
 804cd02:	2206      	movs	r2, #6
 804cd04:	f505 705c 	add.w	r0, r5, #880	; 0x370
 804cd08:	f000 fbfb 	bl	804d502 <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 804cd0c:	f895 3390 	ldrb.w	r3, [r5, #912]	; 0x390
 804cd10:	f8a5 3390 	strh.w	r3, [r5, #912]	; 0x390
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 804cd14:	f8a5 4392 	strh.w	r4, [r5, #914]	; 0x392
 804cd18:	f505 735f 	add.w	r3, r5, #892	; 0x37c
 804cd1c:	f505 7562 	add.w	r5, r5, #904	; 0x388
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 804cd20:	881a      	ldrh	r2, [r3, #0]
 804cd22:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 804cd26:	400a      	ands	r2, r1
 804cd28:	f823 2b02 	strh.w	r2, [r3], #2
            for( uint8_t i = 0; i < 6; i++ )
 804cd2c:	42ab      	cmp	r3, r5
 804cd2e:	d1f7      	bne.n	804cd20 <RegionAU915ChanMaskSet+0x30>
    }
    return true;
 804cd30:	2001      	movs	r0, #1
}
 804cd32:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 804cd34:	6801      	ldr	r1, [r0, #0]
 804cd36:	4803      	ldr	r0, [pc, #12]	; (804cd44 <RegionAU915ChanMaskSet+0x54>)
 804cd38:	2206      	movs	r2, #6
 804cd3a:	f000 fbe2 	bl	804d502 <RegionCommonChanMaskCopy>
 804cd3e:	e7f7      	b.n	804cd30 <RegionAU915ChanMaskSet+0x40>
 804cd40:	20003008 	.word	0x20003008
 804cd44:	20003390 	.word	0x20003390

0804cd48 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 804cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804cd4a:	280d      	cmp	r0, #13
 804cd4c:	bfa8      	it	ge
 804cd4e:	200d      	movge	r0, #13
{
 804cd50:	4616      	mov	r6, r2
    switch( BandwidthsAU915[drIndex] )
 804cd52:	4a1a      	ldr	r2, [pc, #104]	; (804cdbc <RegionAU915ComputeRxWindowParameters+0x74>)
 804cd54:	4f1a      	ldr	r7, [pc, #104]	; (804cdc0 <RegionAU915ComputeRxWindowParameters+0x78>)
{
 804cd56:	ed2d 8b02 	vpush	{d8}
 804cd5a:	461c      	mov	r4, r3
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 804cd5c:	7058      	strb	r0, [r3, #1]
    switch( BandwidthsAU915[drIndex] )
 804cd5e:	0083      	lsls	r3, r0, #2
{
 804cd60:	460d      	mov	r5, r1
    switch( BandwidthsAU915[drIndex] )
 804cd62:	18d1      	adds	r1, r2, r3
{
 804cd64:	b083      	sub	sp, #12
    switch( BandwidthsAU915[drIndex] )
 804cd66:	6b89      	ldr	r1, [r1, #56]	; 0x38
 804cd68:	42b9      	cmp	r1, r7
 804cd6a:	d025      	beq.n	804cdb8 <RegionAU915ComputeRxWindowParameters+0x70>
            return 0;
 804cd6c:	4f15      	ldr	r7, [pc, #84]	; (804cdc4 <RegionAU915ComputeRxWindowParameters+0x7c>)
 804cd6e:	42b9      	cmp	r1, r7
 804cd70:	bf0c      	ite	eq
 804cd72:	2102      	moveq	r1, #2
 804cd74:	2100      	movne	r1, #0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cd76:	4413      	add	r3, r2
 804cd78:	4402      	add	r2, r0
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 804cd7a:	70a1      	strb	r1, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cd7c:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
 804cd80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 804cd82:	f000 fc63 	bl	804d64c <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804cd86:	4b10      	ldr	r3, [pc, #64]	; (804cdc8 <RegionAU915ComputeRxWindowParameters+0x80>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 804cd88:	eeb0 8a40 	vmov.f32	s16, s0
 804cd8c:	eef0 8a60 	vmov.f32	s17, s1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 804cd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804cd92:	4798      	blx	r3
 804cd94:	eeb0 0a48 	vmov.f32	s0, s16
 804cd98:	eef0 0a68 	vmov.f32	s1, s17
 804cd9c:	f104 030c 	add.w	r3, r4, #12
 804cda0:	9300      	str	r3, [sp, #0]
 804cda2:	4602      	mov	r2, r0
 804cda4:	f104 0308 	add.w	r3, r4, #8
 804cda8:	4631      	mov	r1, r6
 804cdaa:	4628      	mov	r0, r5
 804cdac:	f000 fc6a 	bl	804d684 <RegionCommonComputeRxWindowParameters>
}
 804cdb0:	b003      	add	sp, #12
 804cdb2:	ecbd 8b02 	vpop	{d8}
 804cdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
 804cdb8:	2101      	movs	r1, #1
 804cdba:	e7dc      	b.n	804cd76 <RegionAU915ComputeRxWindowParameters+0x2e>
 804cdbc:	080524f8 	.word	0x080524f8
 804cdc0:	0003d090 	.word	0x0003d090
 804cdc4:	0007a120 	.word	0x0007a120
 804cdc8:	08052140 	.word	0x08052140

0804cdcc <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 804cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t dr = rxConfig->Datarate;
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 804cdd0:	4e26      	ldr	r6, [pc, #152]	; (804ce6c <RegionAU915RxConfig+0xa0>)
    int8_t dr = rxConfig->Datarate;
 804cdd2:	f990 8001 	ldrsb.w	r8, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 804cdd6:	68f3      	ldr	r3, [r6, #12]
    uint32_t frequency = rxConfig->Frequency;
 804cdd8:	6845      	ldr	r5, [r0, #4]
{
 804cdda:	b08d      	sub	sp, #52	; 0x34
 804cddc:	4604      	mov	r4, r0
 804cdde:	468b      	mov	fp, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 804cde0:	4798      	blx	r3
 804cde2:	2800      	cmp	r0, #0
 804cde4:	d140      	bne.n	804ce68 <RegionAU915RxConfig+0x9c>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 804cde6:	7ce3      	ldrb	r3, [r4, #19]
 804cde8:	b933      	cbnz	r3, 804cdf8 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 804cdea:	7825      	ldrb	r5, [r4, #0]
 804cdec:	4a20      	ldr	r2, [pc, #128]	; (804ce70 <RegionAU915RxConfig+0xa4>)
 804cdee:	4b21      	ldr	r3, [pc, #132]	; (804ce74 <RegionAU915RxConfig+0xa8>)
 804cdf0:	f005 0507 	and.w	r5, r5, #7
 804cdf4:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 804cdf8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 804ce7c <RegionAU915RxConfig+0xb0>

    Radio.SetChannel( frequency );
 804cdfc:	6973      	ldr	r3, [r6, #20]
    phyDr = DataratesAU915[dr];
 804cdfe:	eb09 0a08 	add.w	sl, r9, r8
    Radio.SetChannel( frequency );
 804ce02:	4628      	mov	r0, r5
    phyDr = DataratesAU915[dr];
 804ce04:	f99a 2078 	ldrsb.w	r2, [sl, #120]	; 0x78
 804ce08:	920b      	str	r2, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 804ce0a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 804ce0c:	7ca3      	ldrb	r3, [r4, #18]
 804ce0e:	8927      	ldrh	r7, [r4, #8]
 804ce10:	9309      	str	r3, [sp, #36]	; 0x24
 804ce12:	2000      	movs	r0, #0
 804ce14:	2301      	movs	r3, #1
 804ce16:	9702      	str	r7, [sp, #8]
 804ce18:	2708      	movs	r7, #8
 804ce1a:	e9cd 0307 	strd	r0, r3, [sp, #28]
 804ce1e:	e9cd 0700 	strd	r0, r7, [sp]
 804ce22:	e9cd 0005 	strd	r0, r0, [sp, #20]
 804ce26:	e9cd 0003 	strd	r0, r0, [sp, #12]
 804ce2a:	78a1      	ldrb	r1, [r4, #2]
 804ce2c:	6a37      	ldr	r7, [r6, #32]
 804ce2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804ce30:	4618      	mov	r0, r3
 804ce32:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 804ce34:	7c63      	ldrb	r3, [r4, #17]
 804ce36:	b1a3      	cbz	r3, 804ce62 <RegionAU915RxConfig+0x96>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 804ce38:	f89a 101c 	ldrb.w	r1, [sl, #28]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 804ce3c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 804ce3e:	310d      	adds	r1, #13
 804ce40:	b2c9      	uxtb	r1, r1
 804ce42:	2001      	movs	r0, #1
 804ce44:	4798      	blx	r3
    //TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)
    PRINTF( "RX on freq %d Hz at DR %d band %d channel %d \n\r", frequency, dr, rxConfig->Bandwidth, rxConfig->Channel );
 804ce46:	7822      	ldrb	r2, [r4, #0]
 804ce48:	9200      	str	r2, [sp, #0]
 804ce4a:	78a3      	ldrb	r3, [r4, #2]
 804ce4c:	480a      	ldr	r0, [pc, #40]	; (804ce78 <RegionAU915RxConfig+0xac>)
 804ce4e:	4642      	mov	r2, r8
 804ce50:	4629      	mov	r1, r5
 804ce52:	f001 fb67 	bl	804e524 <TraceSend>
    *datarate = (uint8_t) dr;
 804ce56:	f88b 8000 	strb.w	r8, [fp]
    return true;
 804ce5a:	2001      	movs	r0, #1
}
 804ce5c:	b00d      	add	sp, #52	; 0x34
 804ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 804ce62:	f819 1008 	ldrb.w	r1, [r9, r8]
 804ce66:	e7e9      	b.n	804ce3c <RegionAU915RxConfig+0x70>
        return false;
 804ce68:	2000      	movs	r0, #0
 804ce6a:	e7f7      	b.n	804ce5c <RegionAU915RxConfig+0x90>
 804ce6c:	08052140 	.word	0x08052140
 804ce70:	000927c0 	.word	0x000927c0
 804ce74:	370870a0 	.word	0x370870a0
 804ce78:	0805280e 	.word	0x0805280e
 804ce7c:	080524f8 	.word	0x080524f8

0804ce80 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 804ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ce84:	b08f      	sub	sp, #60	; 0x3c
 804ce86:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804ce8a:	4b35      	ldr	r3, [pc, #212]	; (804cf60 <RegionAU915TxConfig+0xe0>)
 804ce8c:	f990 1001 	ldrsb.w	r1, [r0, #1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804ce90:	4e34      	ldr	r6, [pc, #208]	; (804cf64 <RegionAU915TxConfig+0xe4>)
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804ce92:	185a      	adds	r2, r3, r1
{
 804ce94:	4604      	mov	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 804ce96:	f992 7078 	ldrsb.w	r7, [r2, #120]	; 0x78
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804ce9a:	7802      	ldrb	r2, [r0, #0]
 804ce9c:	200c      	movs	r0, #12
 804ce9e:	fb00 6202 	mla	r2, r0, r2, r6
    switch( BandwidthsAU915[drIndex] )
 804cea2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804cea6:	7a52      	ldrb	r2, [r2, #9]
    switch( BandwidthsAU915[drIndex] )
 804cea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 804ceaa:	eb06 1202 	add.w	r2, r6, r2, lsl #4
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804ceae:	f992 9362 	ldrsb.w	r9, [r2, #866]	; 0x362
 804ceb2:	f994 2002 	ldrsb.w	r2, [r4, #2]
 804ceb6:	4591      	cmp	r9, r2
 804ceb8:	bfb8      	it	lt
 804ceba:	4691      	movlt	r9, r2
    switch( BandwidthsAU915[drIndex] )
 804cebc:	4a2a      	ldr	r2, [pc, #168]	; (804cf68 <RegionAU915TxConfig+0xe8>)
 804cebe:	4293      	cmp	r3, r2
 804cec0:	d04b      	beq.n	804cf5a <RegionAU915TxConfig+0xda>
            return 0;
 804cec2:	4a2a      	ldr	r2, [pc, #168]	; (804cf6c <RegionAU915TxConfig+0xec>)
 804cec4:	4293      	cmp	r3, r2
 804cec6:	bf0c      	ite	eq
 804cec8:	f04f 0802 	moveq.w	r8, #2
 804cecc:	f04f 0800 	movne.w	r8, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804ced0:	edd4 0a02 	vldr	s1, [r4, #8]
 804ced4:	ed94 0a01 	vldr	s0, [r4, #4]
    //PRINTF( "TX power %d, txPowerLimited %d, txConfig->MaxEirp %d, txConfig->AntennaGain %d \n\r", phyTxPower, txPowerLimited, (int8_t)(txConfig->MaxEirp*100), (int8_t)(txConfig->AntennaGain*100));
    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804ced8:	f8df a098 	ldr.w	sl, [pc, #152]	; 804cf74 <RegionAU915TxConfig+0xf4>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804cedc:	4648      	mov	r0, r9
 804cede:	f000 fc33 	bl	804d748 <RegionCommonComputeTxPower>
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804cee2:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 804cee4:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 804cee6:	f04f 0b0c 	mov.w	fp, #12
 804ceea:	fb0b f202 	mul.w	r2, fp, r2
 804ceee:	f8da 3014 	ldr.w	r3, [sl, #20]
 804cef2:	58b0      	ldr	r0, [r6, r2]
 804cef4:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 804cef6:	2200      	movs	r2, #0
 804cef8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 804cefc:	2501      	movs	r5, #1
 804cefe:	e9cd 2307 	strd	r2, r3, [sp, #28]
 804cf02:	2308      	movs	r3, #8
 804cf04:	e9cd 2205 	strd	r2, r2, [sp, #20]
 804cf08:	e9cd 2503 	strd	r2, r5, [sp, #12]
 804cf0c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 804cf10:	9700      	str	r7, [sp, #0]
 804cf12:	4643      	mov	r3, r8
 804cf14:	990d      	ldr	r1, [sp, #52]	; 0x34
 804cf16:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24
 804cf1a:	4628      	mov	r0, r5
 804cf1c:	47b8      	blx	r7
    PRINTF( "TX on freq %d Hz at DR %d BW %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate, bandwidth );
 804cf1e:	7823      	ldrb	r3, [r4, #0]
 804cf20:	f994 2001 	ldrsb.w	r2, [r4, #1]
 804cf24:	4812      	ldr	r0, [pc, #72]	; (804cf70 <RegionAU915TxConfig+0xf0>)
 804cf26:	fb0b fb03 	mul.w	fp, fp, r3
 804cf2a:	4643      	mov	r3, r8
 804cf2c:	f856 100b 	ldr.w	r1, [r6, fp]
 804cf30:	f001 faf8 	bl	804e524 <TraceSend>
    //TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 804cf34:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 804cf38:	7b21      	ldrb	r1, [r4, #12]
 804cf3a:	4628      	mov	r0, r5
 804cf3c:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 804cf3e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 804cf42:	7b21      	ldrb	r1, [r4, #12]
 804cf44:	4628      	mov	r0, r5
 804cf46:	4798      	blx	r3
 804cf48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804cf4a:	6018      	str	r0, [r3, #0]
    *txPower = txPowerLimited;
 804cf4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return true;
}
 804cf4e:	4628      	mov	r0, r5
    *txPower = txPowerLimited;
 804cf50:	f883 9000 	strb.w	r9, [r3]
}
 804cf54:	b00f      	add	sp, #60	; 0x3c
 804cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 1;
 804cf5a:	f04f 0801 	mov.w	r8, #1
 804cf5e:	e7b7      	b.n	804ced0 <RegionAU915TxConfig+0x50>
 804cf60:	080524f8 	.word	0x080524f8
 804cf64:	20003008 	.word	0x20003008
 804cf68:	0003d090 	.word	0x0003d090
 804cf6c:	0007a120 	.word	0x0007a120
 804cf70:	0805283e 	.word	0x0805283e
 804cf74:	08052140 	.word	0x08052140

0804cf78 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 804cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804cf7c:	b093      	sub	sp, #76	; 0x4c
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804cf7e:	ae07      	add	r6, sp, #28
 804cf80:	2400      	movs	r4, #0
{
 804cf82:	4605      	mov	r5, r0
 804cf84:	4689      	mov	r9, r1
 804cf86:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804cf88:	497f      	ldr	r1, [pc, #508]	; (804d188 <RegionAU915LinkAdrReq+0x210>)
{
 804cf8a:	9301      	str	r3, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804cf8c:	2206      	movs	r2, #6
 804cf8e:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 804cf90:	9407      	str	r4, [sp, #28]
 804cf92:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 804cf96:	f000 fab4 	bl	804d502 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 804cf9a:	46a2      	mov	sl, r4
    while( bytesProcessed < linkAdrReq->PayloadSize )
 804cf9c:	7a2b      	ldrb	r3, [r5, #8]
 804cf9e:	42a3      	cmp	r3, r4
 804cfa0:	d905      	bls.n	804cfae <RegionAU915LinkAdrReq+0x36>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 804cfa2:	6868      	ldr	r0, [r5, #4]
 804cfa4:	a905      	add	r1, sp, #20
 804cfa6:	4420      	add	r0, r4
 804cfa8:	f000 faf5 	bl	804d596 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 804cfac:	b968      	cbnz	r0, 804cfca <RegionAU915LinkAdrReq+0x52>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 804cfae:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 804cfb2:	2b05      	cmp	r3, #5
 804cfb4:	dc69      	bgt.n	804d08a <RegionAU915LinkAdrReq+0x112>
 804cfb6:	2204      	movs	r2, #4
 804cfb8:	2100      	movs	r1, #0
 804cfba:	4630      	mov	r0, r6
 804cfbc:	f000 fa81 	bl	804d4c2 <RegionCommonCountChannels>
 804cfc0:	2801      	cmp	r0, #1
 804cfc2:	d862      	bhi.n	804d08a <RegionAU915LinkAdrReq+0x112>
    {
        status &= 0xFE; // Channel mask KO
 804cfc4:	f04f 0a06 	mov.w	sl, #6
 804cfc8:	e061      	b.n	804d08e <RegionAU915LinkAdrReq+0x116>
        if( linkAdrParams.ChMaskCtrl == 6 )
 804cfca:	f89d 2017 	ldrb.w	r2, [sp, #23]
 804cfce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        bytesProcessed += nextIndex;
 804cfd2:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 804cfd4:	2a06      	cmp	r2, #6
        bytesProcessed += nextIndex;
 804cfd6:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 804cfd8:	d107      	bne.n	804cfea <RegionAU915LinkAdrReq+0x72>
            channelsMask[0] = 0xFFFF;
 804cfda:	f04f 32ff 	mov.w	r2, #4294967295
            channelsMask[1] = 0xFFFF;
 804cfde:	e9cd 2207 	strd	r2, r2, [sp, #28]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 804cfe2:	b2db      	uxtb	r3, r3
 804cfe4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 804cfe8:	e7d8      	b.n	804cf9c <RegionAU915LinkAdrReq+0x24>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 804cfea:	2a07      	cmp	r2, #7
 804cfec:	d102      	bne.n	804cff4 <RegionAU915LinkAdrReq+0x7c>
            channelsMask[1] = 0x0000;
 804cfee:	e9cd aa07 	strd	sl, sl, [sp, #28]
 804cff2:	e7f6      	b.n	804cfe2 <RegionAU915LinkAdrReq+0x6a>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 804cff4:	2a05      	cmp	r2, #5
 804cff6:	d142      	bne.n	804d07e <RegionAU915LinkAdrReq+0x106>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804cff8:	b2db      	uxtb	r3, r3
 804cffa:	2000      	movs	r0, #0
 804cffc:	9300      	str	r3, [sp, #0]
            uint8_t cntChannelMask = 0;
 804cffe:	4602      	mov	r2, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 804d000:	2301      	movs	r3, #1
 804d002:	fa03 fe00 	lsl.w	lr, r3, r0
 804d006:	ea00 0b03 	and.w	fp, r0, r3
 804d00a:	9f00      	ldr	r7, [sp, #0]
 804d00c:	ab12      	add	r3, sp, #72	; 0x48
 804d00e:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 804d012:	ea17 0f0e 	tst.w	r7, lr
 804d016:	fa0f f18e 	sxth.w	r1, lr
 804d01a:	f83c 3c2c 	ldrh.w	r3, [ip, #-44]
 804d01e:	d01b      	beq.n	804d058 <RegionAU915LinkAdrReq+0xe0>
                    if( ( i % 2 ) == 0 )
 804d020:	f1bb 0f00 	cmp.w	fp, #0
 804d024:	d10c      	bne.n	804d040 <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 804d026:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 804d02a:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804d02e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d032:	4319      	orrs	r1, r3
                        channelsMask[4] &= ~( bitMask << i );
 804d034:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 804d038:	3001      	adds	r0, #1
            for( uint8_t i = 0; i <= 7; i++ )
 804d03a:	2808      	cmp	r0, #8
 804d03c:	d1e0      	bne.n	804d000 <RegionAU915LinkAdrReq+0x88>
 804d03e:	e7ad      	b.n	804cf9c <RegionAU915LinkAdrReq+0x24>
                        channelsMask[cntChannelMask] |= 0xFF00;
 804d040:	f063 03ff 	orn	r3, r3, #255	; 0xff
 804d044:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] |= ( bitMask << i );
 804d048:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d04c:	4319      	orrs	r1, r3
                        cntChannelMask++;
 804d04e:	3201      	adds	r2, #1
                        channelsMask[4] &= ~( bitMask << i );
 804d050:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                        cntChannelMask++;
 804d054:	b2d2      	uxtb	r2, r2
 804d056:	e7ef      	b.n	804d038 <RegionAU915LinkAdrReq+0xc0>
 804d058:	43c9      	mvns	r1, r1
                    if( ( i % 2 ) == 0 )
 804d05a:	f1bb 0f00 	cmp.w	fp, #0
 804d05e:	d107      	bne.n	804d070 <RegionAU915LinkAdrReq+0xf8>
                        channelsMask[cntChannelMask] &= 0xFF00;
 804d060:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804d064:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804d068:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d06c:	4019      	ands	r1, r3
 804d06e:	e7e1      	b.n	804d034 <RegionAU915LinkAdrReq+0xbc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 804d070:	b2db      	uxtb	r3, r3
 804d072:	f82c 3c2c 	strh.w	r3, [ip, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 804d076:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 804d07a:	4019      	ands	r1, r3
 804d07c:	e7e7      	b.n	804d04e <RegionAU915LinkAdrReq+0xd6>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 804d07e:	a912      	add	r1, sp, #72	; 0x48
 804d080:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 804d084:	f822 3c2c 	strh.w	r3, [r2, #-44]
 804d088:	e788      	b.n	804cf9c <RegionAU915LinkAdrReq+0x24>
    uint8_t bytesProcessed = 0;
 804d08a:	f04f 0a07 	mov.w	sl, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 804d08e:	2302      	movs	r3, #2
 804d090:	f88d 300c 	strb.w	r3, [sp, #12]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804d094:	a803      	add	r0, sp, #12
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 804d096:	7a6b      	ldrb	r3, [r5, #9]
 804d098:	f88d 300e 	strb.w	r3, [sp, #14]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 804d09c:	f7ff fc98 	bl	804c9d0 <RegionAU915GetPhyParam>

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 804d0a0:	7aab      	ldrb	r3, [r5, #10]
 804d0a2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 804d0a6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804d0aa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 804d0ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804d0b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 804d0b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d0ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 804d0be:	7aeb      	ldrb	r3, [r5, #11]
 804d0c0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 804d0c4:	7b2b      	ldrb	r3, [r5, #12]
 804d0c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 804d0ca:	7b6b      	ldrb	r3, [r5, #13]
 804d0cc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 804d0d0:	2348      	movs	r3, #72	; 0x48
 804d0d2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 804d0d6:	230d      	movs	r3, #13
 804d0d8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 804d0dc:	230e      	movs	r3, #14
 804d0de:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804d0e2:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.Status = status;
 804d0e4:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 804d0e8:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 804d0ec:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804d0ee:	f8df a09c 	ldr.w	sl, [pc, #156]	; 804d18c <RegionAU915LinkAdrReq+0x214>
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 804d0f2:	960e      	str	r6, [sp, #56]	; 0x38

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d0f4:	ab05      	add	r3, sp, #20
 804d0f6:	f10d 0216 	add.w	r2, sp, #22
 804d0fa:	f10d 0115 	add.w	r1, sp, #21
 804d0fe:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 804d100:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d104:	f000 fa61 	bl	804d5ca <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 804d108:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 804d10a:	4605      	mov	r5, r0
    if( status == 0x07 )
 804d10c:	d129      	bne.n	804d162 <RegionAU915LinkAdrReq+0x1ea>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 804d10e:	2206      	movs	r2, #6
 804d110:	4631      	mov	r1, r6
 804d112:	f50a 705c 	add.w	r0, sl, #880	; 0x370
 804d116:	f000 f9f4 	bl	804d502 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 804d11a:	f8ba 337c 	ldrh.w	r3, [sl, #892]	; 0x37c
 804d11e:	f8ba 2370 	ldrh.w	r2, [sl, #880]	; 0x370
 804d122:	4013      	ands	r3, r2
 804d124:	f8aa 337c 	strh.w	r3, [sl, #892]	; 0x37c
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 804d128:	f8ba 2372 	ldrh.w	r2, [sl, #882]	; 0x372
 804d12c:	f8ba 337e 	ldrh.w	r3, [sl, #894]	; 0x37e
 804d130:	4013      	ands	r3, r2
 804d132:	f8aa 337e 	strh.w	r3, [sl, #894]	; 0x37e
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 804d136:	f8ba 2374 	ldrh.w	r2, [sl, #884]	; 0x374
 804d13a:	f8ba 3380 	ldrh.w	r3, [sl, #896]	; 0x380
 804d13e:	4013      	ands	r3, r2
 804d140:	f8aa 3380 	strh.w	r3, [sl, #896]	; 0x380
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 804d144:	f8ba 2376 	ldrh.w	r2, [sl, #886]	; 0x376
 804d148:	f8ba 3382 	ldrh.w	r3, [sl, #898]	; 0x382
 804d14c:	4013      	ands	r3, r2
 804d14e:	f8aa 3382 	strh.w	r3, [sl, #898]	; 0x382
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804d152:	f8ba 3378 	ldrh.w	r3, [sl, #888]	; 0x378
 804d156:	f8aa 3384 	strh.w	r3, [sl, #900]	; 0x384
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 804d15a:	f8ba 337a 	ldrh.w	r3, [sl, #890]	; 0x37a
 804d15e:	f8aa 3386 	strh.w	r3, [sl, #902]	; 0x386
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 804d162:	f89d 3015 	ldrb.w	r3, [sp, #21]
 804d166:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
 804d16a:	9a01      	ldr	r2, [sp, #4]
    *txPowOut = linkAdrParams.TxPower;
 804d16c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 804d170:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 804d174:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d178:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 804d17a:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 804d17c:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 804d17e:	701c      	strb	r4, [r3, #0]
}
 804d180:	b013      	add	sp, #76	; 0x4c
 804d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d186:	bf00      	nop
 804d188:	20003378 	.word	0x20003378
 804d18c:	20003008 	.word	0x20003008

0804d190 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 804d190:	b538      	push	{r3, r4, r5, lr}
 804d192:	4605      	mov	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 804d194:	6840      	ldr	r0, [r0, #4]
 804d196:	f7ff fbfd 	bl	804c994 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d19a:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 804d19c:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d19e:	f04f 0108 	mov.w	r1, #8
 804d1a2:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 804d1a6:	bf14      	ite	ne
 804d1a8:	2407      	movne	r4, #7
 804d1aa:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 804d1ac:	f000 f969 	bl	804d482 <RegionCommonValueInRange>
 804d1b0:	b908      	cbnz	r0, 804d1b6 <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 804d1b2:	f004 0405 	and.w	r4, r4, #5
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 804d1b6:	f995 3000 	ldrsb.w	r3, [r5]
 804d1ba:	2b07      	cmp	r3, #7
 804d1bc:	d001      	beq.n	804d1c2 <RegionAU915RxParamSetupReq+0x32>
 804d1be:	2b0d      	cmp	r3, #13
 804d1c0:	dd01      	ble.n	804d1c6 <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 804d1c2:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 804d1c6:	2206      	movs	r2, #6
 804d1c8:	2100      	movs	r1, #0
 804d1ca:	f995 0001 	ldrsb.w	r0, [r5, #1]
 804d1ce:	f000 f958 	bl	804d482 <RegionCommonValueInRange>
 804d1d2:	b908      	cbnz	r0, 804d1d8 <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 804d1d4:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    }

    return status;
}
 804d1d8:	4620      	mov	r0, r4
 804d1da:	bd38      	pop	{r3, r4, r5, pc}

0804d1dc <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 804d1dc:	2000      	movs	r0, #0
 804d1de:	4770      	bx	lr

0804d1e0 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 804d1e0:	2000      	movs	r0, #0
 804d1e2:	4770      	bx	lr

0804d1e4 <RegionAU915DlChannelReq>:
 804d1e4:	2000      	movs	r0, #0
 804d1e6:	4770      	bx	lr

0804d1e8 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 804d1e8:	4a07      	ldr	r2, [pc, #28]	; (804d208 <RegionAU915AlternateDr+0x20>)
 804d1ea:	23ff      	movs	r3, #255	; 0xff
 804d1ec:	f8a2 3378 	strh.w	r3, [r2, #888]	; 0x378

    if( ( trialsCount & 0x01 ) == 0x01 )
 804d1f0:	f892 3394 	ldrb.w	r3, [r2, #916]	; 0x394
 804d1f4:	f013 0f01 	tst.w	r3, #1
    }
    else
    {
        currentDr = DR_2;
    }
    trialsCount++;
 804d1f8:	f103 0301 	add.w	r3, r3, #1
 804d1fc:	f882 3394 	strb.w	r3, [r2, #916]	; 0x394
    return currentDr;
}
 804d200:	bf14      	ite	ne
 804d202:	2006      	movne	r0, #6
 804d204:	2002      	moveq	r0, #2
 804d206:	4770      	bx	lr
 804d208:	20003008 	.word	0x20003008

0804d20c <RegionAU915CalcBackOff>:

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 804d20c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 804d20e:	4b0d      	ldr	r3, [pc, #52]	; (804d244 <RegionAU915CalcBackOff+0x38>)
 804d210:	9301      	str	r3, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 804d212:	f503 7358 	add.w	r3, r3, #864	; 0x360
 804d216:	9302      	str	r3, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 804d218:	7843      	ldrb	r3, [r0, #1]
 804d21a:	f88d 300c 	strb.w	r3, [sp, #12]
    calcBackOffParams.Joined = calcBackOff->Joined;
 804d21e:	7803      	ldrb	r3, [r0, #0]
 804d220:	f88d 300d 	strb.w	r3, [sp, #13]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 804d224:	7883      	ldrb	r3, [r0, #2]
 804d226:	f88d 300e 	strb.w	r3, [sp, #14]
    calcBackOffParams.Channel = calcBackOff->Channel;
 804d22a:	78c3      	ldrb	r3, [r0, #3]
 804d22c:	f88d 300f 	strb.w	r3, [sp, #15]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 804d230:	6843      	ldr	r3, [r0, #4]
 804d232:	9304      	str	r3, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 804d234:	6883      	ldr	r3, [r0, #8]
 804d236:	9305      	str	r3, [sp, #20]

    RegionCommonCalcBackOff( &calcBackOffParams );
 804d238:	a801      	add	r0, sp, #4
 804d23a:	f000 fa9d 	bl	804d778 <RegionCommonCalcBackOff>
}
 804d23e:	b007      	add	sp, #28
 804d240:	f85d fb04 	ldr.w	pc, [sp], #4
 804d244:	20003008 	.word	0x20003008

0804d248 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 804d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d24c:	b099      	sub	sp, #100	; 0x64
 804d24e:	4605      	mov	r5, r0
 804d250:	9104      	str	r1, [sp, #16]
 804d252:	4693      	mov	fp, r2
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804d254:	2100      	movs	r1, #0
 804d256:	2248      	movs	r2, #72	; 0x48
 804d258:	a806      	add	r0, sp, #24
{
 804d25a:	461e      	mov	r6, r3
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 804d25c:	f003 fb71 	bl	8050942 <memset>
    TimerTime_t nextTxDelay = 0;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 804d260:	2204      	movs	r2, #4
 804d262:	2100      	movs	r1, #0
 804d264:	4846      	ldr	r0, [pc, #280]	; (804d380 <RegionAU915NextChannel+0x138>)
 804d266:	f8df 9120 	ldr.w	r9, [pc, #288]	; 804d388 <RegionAU915NextChannel+0x140>
 804d26a:	f000 f92a 	bl	804d4c2 <RegionCommonCountChannels>
 804d26e:	b930      	cbnz	r0, 804d27e <RegionAU915NextChannel+0x36>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 804d270:	f509 715c 	add.w	r1, r9, #880	; 0x370
 804d274:	2204      	movs	r2, #4
 804d276:	f101 000c 	add.w	r0, r1, #12
 804d27a:	f000 f942 	bl	804d502 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 804d27e:	f995 3008 	ldrsb.w	r3, [r5, #8]
 804d282:	2b05      	cmp	r3, #5
 804d284:	dd06      	ble.n	804d294 <RegionAU915NextChannel+0x4c>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 804d286:	f899 3384 	ldrb.w	r3, [r9, #900]	; 0x384
 804d28a:	b91b      	cbnz	r3, 804d294 <RegionAU915NextChannel+0x4c>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 804d28c:	f8b9 3378 	ldrh.w	r3, [r9, #888]	; 0x378
 804d290:	f8a9 3384 	strh.w	r3, [r9, #900]	; 0x384
        }
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 804d294:	6868      	ldr	r0, [r5, #4]
 804d296:	f001 f8fb 	bl	804e490 <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 804d29a:	686b      	ldr	r3, [r5, #4]
 804d29c:	b113      	cbz	r3, 804d2a4 <RegionAU915NextChannel+0x5c>
 804d29e:	682b      	ldr	r3, [r5, #0]
 804d2a0:	4283      	cmp	r3, r0
 804d2a2:	d860      	bhi.n	804d366 <RegionAU915NextChannel+0x11e>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 804d2a4:	2400      	movs	r4, #0

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d2a6:	2301      	movs	r3, #1
 804d2a8:	7aa9      	ldrb	r1, [r5, #10]
 804d2aa:	7a68      	ldrb	r0, [r5, #9]
        *aggregatedTimeOff = 0;
 804d2ac:	6034      	str	r4, [r6, #0]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d2ae:	4a35      	ldr	r2, [pc, #212]	; (804d384 <RegionAU915NextChannel+0x13c>)
 804d2b0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 804d380 <RegionAU915NextChannel+0x138>
 804d2b4:	f000 f939 	bl	804d52a <RegionCommonUpdateBandTimeOff>

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804d2b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 804d2bc:	9001      	str	r0, [sp, #4]
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 804d2be:	9302      	str	r3, [sp, #8]
 804d2c0:	f5aa 785f 	sub.w	r8, sl, #892	; 0x37c
    uint8_t delayTransmission = 0;
 804d2c4:	4627      	mov	r7, r4
    uint8_t nbEnabledChannels = 0;
 804d2c6:	4625      	mov	r5, r4
 804d2c8:	b2e3      	uxtb	r3, r4
 804d2ca:	9303      	str	r3, [sp, #12]
{
 804d2cc:	2600      	movs	r6, #0
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 804d2ce:	f8ba 3000 	ldrh.w	r3, [sl]
 804d2d2:	4133      	asrs	r3, r6
 804d2d4:	07db      	lsls	r3, r3, #31
 804d2d6:	d51e      	bpl.n	804d316 <RegionAU915NextChannel+0xce>
 804d2d8:	230c      	movs	r3, #12
 804d2da:	19a2      	adds	r2, r4, r6
 804d2dc:	fb03 9202 	mla	r2, r3, r2, r9
 804d2e0:	4373      	muls	r3, r6
                if( channels[i + j].Frequency == 0 )
 804d2e2:	9305      	str	r3, [sp, #20]
 804d2e4:	f858 1003 	ldr.w	r1, [r8, r3]
 804d2e8:	b1a9      	cbz	r1, 804d316 <RegionAU915NextChannel+0xce>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804d2ea:	7a11      	ldrb	r1, [r2, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804d2ec:	9802      	ldr	r0, [sp, #8]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 804d2ee:	f341 1203 	sbfx	r2, r1, #4, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 804d2f2:	f341 0103 	sbfx	r1, r1, #0, #4
 804d2f6:	b252      	sxtb	r2, r2
 804d2f8:	b249      	sxtb	r1, r1
 804d2fa:	f000 f8c2 	bl	804d482 <RegionCommonValueInRange>
 804d2fe:	b150      	cbz	r0, 804d316 <RegionAU915NextChannel+0xce>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 804d300:	9b05      	ldr	r3, [sp, #20]
 804d302:	4a21      	ldr	r2, [pc, #132]	; (804d388 <RegionAU915NextChannel+0x140>)
 804d304:	4443      	add	r3, r8
 804d306:	7a5b      	ldrb	r3, [r3, #9]
 804d308:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 804d30c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 804d310:	b303      	cbz	r3, 804d354 <RegionAU915NextChannel+0x10c>
                    delayTransmission++;
 804d312:	3701      	adds	r7, #1
 804d314:	b2ff      	uxtb	r7, r7
 804d316:	3601      	adds	r6, #1
        for( uint8_t j = 0; j < 16; j++ )
 804d318:	2e10      	cmp	r6, #16
 804d31a:	d1d8      	bne.n	804d2ce <RegionAU915NextChannel+0x86>
 804d31c:	3410      	adds	r4, #16
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 804d31e:	2c50      	cmp	r4, #80	; 0x50
 804d320:	f10a 0a02 	add.w	sl, sl, #2
 804d324:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
 804d328:	d1ce      	bne.n	804d2c8 <RegionAU915NextChannel+0x80>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 804d32a:	b31d      	cbz	r5, 804d374 <RegionAU915NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 804d32c:	1e69      	subs	r1, r5, #1
 804d32e:	2000      	movs	r0, #0
 804d330:	f001 f950 	bl	804e5d4 <randr>
 804d334:	ab18      	add	r3, sp, #96	; 0x60
 804d336:	4418      	add	r0, r3
 804d338:	9b04      	ldr	r3, [sp, #16]
 804d33a:	f810 1c48 	ldrb.w	r1, [r0, #-72]
 804d33e:	7019      	strb	r1, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 804d340:	2240      	movs	r2, #64	; 0x40
 804d342:	480f      	ldr	r0, [pc, #60]	; (804d380 <RegionAU915NextChannel+0x138>)
 804d344:	f000 f8a6 	bl	804d494 <RegionCommonChanDisable>

        *time = 0;
 804d348:	2000      	movs	r0, #0
 804d34a:	f8cb 0000 	str.w	r0, [fp]
        }
        // Datarate not supported by any channel
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 804d34e:	b019      	add	sp, #100	; 0x64
 804d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                enabledChannels[nbEnabledChannels++] = i + j;
 804d354:	aa18      	add	r2, sp, #96	; 0x60
 804d356:	1c6b      	adds	r3, r5, #1
 804d358:	4415      	add	r5, r2
 804d35a:	9a03      	ldr	r2, [sp, #12]
 804d35c:	4432      	add	r2, r6
 804d35e:	f805 2c48 	strb.w	r2, [r5, #-72]
 804d362:	b2dd      	uxtb	r5, r3
 804d364:	e7d7      	b.n	804d316 <RegionAU915NextChannel+0xce>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 804d366:	1a1b      	subs	r3, r3, r0
 804d368:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 804d36a:	9b01      	ldr	r3, [sp, #4]
 804d36c:	f8cb 3000 	str.w	r3, [fp]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 804d370:	200b      	movs	r0, #11
 804d372:	e7ec      	b.n	804d34e <RegionAU915NextChannel+0x106>
        if( delayTx > 0 )
 804d374:	2f00      	cmp	r7, #0
 804d376:	d1f8      	bne.n	804d36a <RegionAU915NextChannel+0x122>
        *time = 0;
 804d378:	f8cb 7000 	str.w	r7, [fp]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 804d37c:	200c      	movs	r0, #12
 804d37e:	e7e6      	b.n	804d34e <RegionAU915NextChannel+0x106>
 804d380:	20003384 	.word	0x20003384
 804d384:	20003368 	.word	0x20003368
 804d388:	20003008 	.word	0x20003008

0804d38c <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 804d38c:	b570      	push	{r4, r5, r6, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d38e:	7801      	ldrb	r1, [r0, #0]
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 804d390:	4b0e      	ldr	r3, [pc, #56]	; (804d3cc <RegionAU915SetContinuousWave+0x40>)
 804d392:	220c      	movs	r2, #12
 804d394:	434a      	muls	r2, r1
 804d396:	1899      	adds	r1, r3, r2
 804d398:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d39a:	7a4a      	ldrb	r2, [r1, #9]
{
 804d39c:	4604      	mov	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 804d39e:	eb03 1302 	add.w	r3, r3, r2, lsl #4

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804d3a2:	edd4 0a02 	vldr	s1, [r4, #8]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 804d3a6:	f993 0362 	ldrsb.w	r0, [r3, #866]	; 0x362
 804d3aa:	f994 3002 	ldrsb.w	r3, [r4, #2]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 804d3ae:	ed94 0a01 	vldr	s0, [r4, #4]
 804d3b2:	4298      	cmp	r0, r3
 804d3b4:	bfb8      	it	lt
 804d3b6:	4618      	movlt	r0, r3
 804d3b8:	f000 f9c6 	bl	804d748 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804d3bc:	4b04      	ldr	r3, [pc, #16]	; (804d3d0 <RegionAU915SetContinuousWave+0x44>)
 804d3be:	89a2      	ldrh	r2, [r4, #12]
 804d3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804d3c2:	4601      	mov	r1, r0
 804d3c4:	4628      	mov	r0, r5
}
 804d3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 804d3ca:	4718      	bx	r3
 804d3cc:	20003008 	.word	0x20003008
 804d3d0:	08052140 	.word	0x08052140

0804d3d4 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 804d3d4:	b510      	push	{r4, lr}
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 804d3d6:	4c07      	ldr	r4, [pc, #28]	; (804d3f4 <RegionAU915ApplyDrOffset+0x20>)
 804d3d8:	2306      	movs	r3, #6
 804d3da:	fb03 4101 	mla	r1, r3, r1, r4
 804d3de:	4411      	add	r1, r2
 804d3e0:	f991 3088 	ldrsb.w	r3, [r1, #136]	; 0x88

    if( datarate < 0 )
 804d3e4:	2b00      	cmp	r3, #0
 804d3e6:	da03      	bge.n	804d3f0 <RegionAU915ApplyDrOffset+0x1c>
    {
        if( downlinkDwellTime == 0 )
 804d3e8:	2800      	cmp	r0, #0
        {
            datarate = AU915_TX_MIN_DATARATE;
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 804d3ea:	bf0c      	ite	eq
 804d3ec:	2300      	moveq	r3, #0
 804d3ee:	2302      	movne	r3, #2
        }
    }
    return datarate;
}
 804d3f0:	b2d8      	uxtb	r0, r3
 804d3f2:	bd10      	pop	{r4, pc}
 804d3f4:	080524f8 	.word	0x080524f8

0804d3f8 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 804d3f8:	4b06      	ldr	r3, [pc, #24]	; (804d414 <RegionCommonGetJoinDc+0x1c>)
 804d3fa:	4298      	cmp	r0, r3
 804d3fc:	d908      	bls.n	804d410 <RegionCommonGetJoinDc+0x18>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 804d3fe:	4a06      	ldr	r2, [pc, #24]	; (804d418 <RegionCommonGetJoinDc+0x20>)
 804d400:	f242 7310 	movw	r3, #10000	; 0x2710
 804d404:	4290      	cmp	r0, r2
 804d406:	bf8c      	ite	hi
 804d408:	4618      	movhi	r0, r3
 804d40a:	f44f 707a 	movls.w	r0, #1000	; 0x3e8
 804d40e:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_1_HOUR;
 804d410:	2064      	movs	r0, #100	; 0x64
    }
    return dutyCycle;
}
 804d412:	4770      	bx	lr
 804d414:	0036ee7f 	.word	0x0036ee7f
 804d418:	025c3f7f 	.word	0x025c3f7f

0804d41c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 804d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 804d420:	429a      	cmp	r2, r3
{
 804d422:	9f07      	ldr	r7, [sp, #28]
    if( ( value >= min ) && ( value <= max ) )
 804d424:	db03      	blt.n	804d42e <RegionCommonChanVerifyDr+0x12>
 804d426:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 804d42a:	429a      	cmp	r2, r3
 804d42c:	dd23      	ble.n	804d476 <RegionCommonChanVerifyDr+0x5a>
        return false;
 804d42e:	2000      	movs	r0, #0
}
 804d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 804d434:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 804d438:	2400      	movs	r4, #0
 804d43a:	fa48 f504 	asr.w	r5, r8, r4
 804d43e:	07ed      	lsls	r5, r5, #31
 804d440:	d50f      	bpl.n	804d462 <RegionCommonChanVerifyDr+0x46>
 804d442:	1935      	adds	r5, r6, r4
 804d444:	fb0e 7505 	mla	r5, lr, r5, r7
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804d448:	f895 c008 	ldrb.w	ip, [r5, #8]
 804d44c:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 804d450:	f00c 0c0f 	and.w	ip, ip, #15
 804d454:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 804d456:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 804d458:	db03      	blt.n	804d462 <RegionCommonChanVerifyDr+0x46>
 804d45a:	f005 050f 	and.w	r5, r5, #15
 804d45e:	42aa      	cmp	r2, r5
 804d460:	dd0d      	ble.n	804d47e <RegionCommonChanVerifyDr+0x62>
 804d462:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 804d464:	2c10      	cmp	r4, #16
 804d466:	d1e8      	bne.n	804d43a <RegionCommonChanVerifyDr+0x1e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 804d468:	3301      	adds	r3, #1
 804d46a:	b2db      	uxtb	r3, r3
 804d46c:	011e      	lsls	r6, r3, #4
 804d46e:	b2f6      	uxtb	r6, r6
 804d470:	42b0      	cmp	r0, r6
 804d472:	d8df      	bhi.n	804d434 <RegionCommonChanVerifyDr+0x18>
 804d474:	e7db      	b.n	804d42e <RegionCommonChanVerifyDr+0x12>
 804d476:	2300      	movs	r3, #0
 804d478:	f04f 0e0c 	mov.w	lr, #12
 804d47c:	e7f6      	b.n	804d46c <RegionCommonChanVerifyDr+0x50>
                    return true;
 804d47e:	2001      	movs	r0, #1
 804d480:	e7d6      	b.n	804d430 <RegionCommonChanVerifyDr+0x14>

0804d482 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 804d482:	4288      	cmp	r0, r1
 804d484:	db04      	blt.n	804d490 <RegionCommonValueInRange+0xe>
    {
        return 1;
 804d486:	4290      	cmp	r0, r2
 804d488:	bfcc      	ite	gt
 804d48a:	2000      	movgt	r0, #0
 804d48c:	2001      	movle	r0, #1
 804d48e:	4770      	bx	lr
    }
    return 0;
 804d490:	2000      	movs	r0, #0
}
 804d492:	4770      	bx	lr

0804d494 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 804d494:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804d496:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
{
 804d49a:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 804d49c:	d80f      	bhi.n	804d4be <RegionCommonChanDisable+0x2a>
 804d49e:	4291      	cmp	r1, r2
 804d4a0:	d20d      	bcs.n	804d4be <RegionCommonChanDisable+0x2a>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 804d4a2:	b21a      	sxth	r2, r3
 804d4a4:	f001 010f 	and.w	r1, r1, #15
 804d4a8:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 804d4ac:	2301      	movs	r3, #1
 804d4ae:	fa03 f101 	lsl.w	r1, r3, r1
 804d4b2:	ea24 0101 	bic.w	r1, r4, r1
 804d4b6:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

    return true;
 804d4ba:	4618      	mov	r0, r3
}
 804d4bc:	bd10      	pop	{r4, pc}
        return false;
 804d4be:	2000      	movs	r0, #0
 804d4c0:	e7fc      	b.n	804d4bc <RegionCommonChanDisable+0x28>

0804d4c2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 804d4c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 804d4c4:	b140      	cbz	r0, 804d4d8 <RegionCommonCountChannels+0x16>
 804d4c6:	2300      	movs	r3, #0
 804d4c8:	eb00 0641 	add.w	r6, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804d4cc:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
 804d4ce:	4618      	mov	r0, r3
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 804d4d0:	18cc      	adds	r4, r1, r3
 804d4d2:	b2e4      	uxtb	r4, r4
 804d4d4:	42a2      	cmp	r2, r4
 804d4d6:	d800      	bhi.n	804d4da <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 804d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 804d4da:	2500      	movs	r5, #0
 804d4dc:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    uint8_t nbActiveBits = 0;
 804d4e0:	462c      	mov	r4, r5
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 804d4e2:	fa07 fe05 	lsl.w	lr, r7, r5
 804d4e6:	ea3e 0e0c 	bics.w	lr, lr, ip
            nbActiveBits++;
 804d4ea:	bf08      	it	eq
 804d4ec:	3401      	addeq	r4, #1
 804d4ee:	f105 0501 	add.w	r5, r5, #1
 804d4f2:	bf08      	it	eq
 804d4f4:	b2e4      	uxtbeq	r4, r4
    for( uint8_t j = 0; j < nbBits; j++ )
 804d4f6:	2d10      	cmp	r5, #16
 804d4f8:	d1f3      	bne.n	804d4e2 <RegionCommonCountChannels+0x20>
        nbChannels += CountChannels( channelsMask[i], 16 );
 804d4fa:	4420      	add	r0, r4
 804d4fc:	b2c0      	uxtb	r0, r0
 804d4fe:	3301      	adds	r3, #1
 804d500:	e7e6      	b.n	804d4d0 <RegionCommonCountChannels+0xe>

0804d502 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 804d502:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 804d504:	b100      	cbz	r0, 804d508 <RegionCommonChanMaskCopy+0x6>
 804d506:	b949      	cbnz	r1, 804d51c <RegionCommonChanMaskCopy+0x1a>
        for( uint8_t i = 0; i < len; i++ )
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 804d508:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 804d50a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 804d50e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 804d512:	3301      	adds	r3, #1
        for( uint8_t i = 0; i < len; i++ )
 804d514:	b2dc      	uxtb	r4, r3
 804d516:	42a2      	cmp	r2, r4
 804d518:	d8f7      	bhi.n	804d50a <RegionCommonChanMaskCopy+0x8>
 804d51a:	e7f5      	b.n	804d508 <RegionCommonChanMaskCopy+0x6>
 804d51c:	2300      	movs	r3, #0
 804d51e:	e7f9      	b.n	804d514 <RegionCommonChanMaskCopy+0x12>

0804d520 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 804d520:	608a      	str	r2, [r1, #8]
    if( joined == true )
 804d522:	b100      	cbz	r0, 804d526 <RegionCommonSetBandTxDone+0x6>
 804d524:	4770      	bx	lr
    }
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
 804d526:	604a      	str	r2, [r1, #4]
    }
}
 804d528:	4770      	bx	lr

0804d52a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 804d52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d52e:	4681      	mov	r9, r0
 804d530:	460e      	mov	r6, r1
 804d532:	4614      	mov	r4, r2
 804d534:	eb02 1803 	add.w	r8, r2, r3, lsl #4
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 804d538:	f04f 35ff 	mov.w	r5, #4294967295
            if( dutyCycle == true )
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
                if( bands[i].TimeOff <= elapsed )
                {
                    bands[i].TimeOff = 0;
 804d53c:	2700      	movs	r7, #0
    for( uint8_t i = 0; i < nbBands; i++ )
 804d53e:	45a0      	cmp	r8, r4
 804d540:	d105      	bne.n	804d54e <RegionCommonUpdateBandTimeOff+0x24>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 804d542:	1c6b      	adds	r3, r5, #1
}
 804d544:	bf14      	ite	ne
 804d546:	4628      	movne	r0, r5
 804d548:	2000      	moveq	r0, #0
 804d54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( joined == false )
 804d54e:	f1b9 0f00 	cmp.w	r9, #0
 804d552:	d118      	bne.n	804d586 <RegionCommonUpdateBandTimeOff+0x5c>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 804d554:	6860      	ldr	r0, [r4, #4]
 804d556:	f000 ff9b 	bl	804e490 <TimerGetElapsedTime>
 804d55a:	4682      	mov	sl, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804d55c:	68a0      	ldr	r0, [r4, #8]
 804d55e:	f000 ff97 	bl	804e490 <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 804d562:	2e00      	cmp	r6, #0
 804d564:	bf08      	it	eq
 804d566:	2000      	moveq	r0, #0
 804d568:	4550      	cmp	r0, sl
 804d56a:	bf38      	it	cc
 804d56c:	4650      	movcc	r0, sl
                if( bands[i].TimeOff <= elapsed )
 804d56e:	68e3      	ldr	r3, [r4, #12]
 804d570:	4283      	cmp	r3, r0
                    bands[i].TimeOff = 0;
 804d572:	bf98      	it	ls
 804d574:	60e7      	strls	r7, [r4, #12]
                if( bands[i].TimeOff != 0 )
 804d576:	68e3      	ldr	r3, [r4, #12]
 804d578:	b11b      	cbz	r3, 804d582 <RegionCommonUpdateBandTimeOff+0x58>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 804d57a:	1a1b      	subs	r3, r3, r0
 804d57c:	429d      	cmp	r5, r3
 804d57e:	bf28      	it	cs
 804d580:	461d      	movcs	r5, r3
 804d582:	3410      	adds	r4, #16
 804d584:	e7db      	b.n	804d53e <RegionCommonUpdateBandTimeOff+0x14>
            if( dutyCycle == true )
 804d586:	b11e      	cbz	r6, 804d590 <RegionCommonUpdateBandTimeOff+0x66>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 804d588:	68a0      	ldr	r0, [r4, #8]
 804d58a:	f000 ff81 	bl	804e490 <TimerGetElapsedTime>
 804d58e:	e7ee      	b.n	804d56e <RegionCommonUpdateBandTimeOff+0x44>
                bands[i].TimeOff = 0;
 804d590:	60e6      	str	r6, [r4, #12]
                nextTxDelay = 0;
 804d592:	4635      	mov	r5, r6
 804d594:	e7f5      	b.n	804d582 <RegionCommonUpdateBandTimeOff+0x58>

0804d596 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 804d596:	7803      	ldrb	r3, [r0, #0]
 804d598:	2b03      	cmp	r3, #3
 804d59a:	d114      	bne.n	804d5c6 <RegionCommonParseLinkAdrReq+0x30>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 804d59c:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804d59e:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804d5a2:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 804d5a4:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 804d5a6:	704b      	strb	r3, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 804d5a8:	7883      	ldrb	r3, [r0, #2]
 804d5aa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 804d5ac:	78c2      	ldrb	r2, [r0, #3]
 804d5ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804d5b2:	808b      	strh	r3, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 804d5b4:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804d5b6:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 804d5ba:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 804d5be:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 804d5c0:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 804d5c2:	2005      	movs	r0, #5
 804d5c4:	4770      	bx	lr
    uint8_t retIndex = 0;
 804d5c6:	2000      	movs	r0, #0
    }
    return retIndex;
}
 804d5c8:	4770      	bx	lr

0804d5ca <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 804d5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d5ce:	4699      	mov	r9, r3
    int8_t datarate = verifyParams->Datarate;
    int8_t txPower = verifyParams->TxPower;
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 804d5d0:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 804d5d2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 804d5d4:	f990 8006 	ldrsb.w	r8, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 804d5d8:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 804d5dc:	7a06      	ldrb	r6, [r0, #8]
{
 804d5de:	4604      	mov	r4, r0
 804d5e0:	468b      	mov	fp, r1
 804d5e2:	4692      	mov	sl, r2
    if( verifyParams->AdrEnabled == false )
 804d5e4:	b34b      	cbz	r3, 804d63a <RegionCommonLinkAdrReqVerifyParams+0x70>
    int8_t nbRepetitions = verifyParams->NbRep;
 804d5e6:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 804d5e8:	b1ed      	cbz	r5, 804d626 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 804d5ea:	69a2      	ldr	r2, [r4, #24]
 804d5ec:	9201      	str	r2, [sp, #4]
 804d5ee:	f994 2015 	ldrsb.w	r2, [r4, #21]
 804d5f2:	9200      	str	r2, [sp, #0]
 804d5f4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 804d5f8:	7b20      	ldrb	r0, [r4, #12]
 804d5fa:	6921      	ldr	r1, [r4, #16]
 804d5fc:	4642      	mov	r2, r8
 804d5fe:	f7ff ff0d 	bl	804d41c <RegionCommonChanVerifyDr>
 804d602:	b908      	cbnz	r0, 804d608 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 804d604:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 804d608:	f994 301d 	ldrsb.w	r3, [r4, #29]
 804d60c:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 804d610:	42bb      	cmp	r3, r7
 804d612:	dc19      	bgt.n	804d648 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 804d614:	42ba      	cmp	r2, r7
 804d616:	da01      	bge.n	804d61c <RegionCommonLinkAdrReqVerifyParams+0x52>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 804d618:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 804d61c:	2d07      	cmp	r5, #7
 804d61e:	d102      	bne.n	804d626 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        if( nbRepetitions == 0 )
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 804d620:	2e00      	cmp	r6, #0
 804d622:	bf08      	it	eq
 804d624:	2601      	moveq	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 804d626:	4628      	mov	r0, r5
    *dr = datarate;
 804d628:	f88b 8000 	strb.w	r8, [fp]
    *txPow = txPower;
 804d62c:	f88a 7000 	strb.w	r7, [sl]
    *nbRep = nbRepetitions;
 804d630:	f889 6000 	strb.w	r6, [r9]
}
 804d634:	b003      	add	sp, #12
 804d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbRepetitions = verifyParams->CurrentNbRep;
 804d63a:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 804d63e:	f990 8009 	ldrsb.w	r8, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 804d642:	f990 700a 	ldrsb.w	r7, [r0, #10]
 804d646:	e7cf      	b.n	804d5e8 <RegionCommonLinkAdrReqVerifyParams+0x1e>
    if( ( value >= min ) && ( value <= max ) )
 804d648:	461f      	mov	r7, r3
 804d64a:	e7e7      	b.n	804d61c <RegionCommonLinkAdrReqVerifyParams+0x52>

0804d64c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d64c:	2301      	movs	r3, #1
{
 804d64e:	b570      	push	{r4, r5, r6, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d650:	fa03 f000 	lsl.w	r0, r3, r0
{
 804d654:	460e      	mov	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 804d656:	f7f3 f895 	bl	8040784 <__aeabi_i2d>
 804d65a:	4604      	mov	r4, r0
 804d65c:	4630      	mov	r0, r6
 804d65e:	460d      	mov	r5, r1
 804d660:	f7f3 f880 	bl	8040764 <__aeabi_ui2d>
 804d664:	4602      	mov	r2, r0
 804d666:	460b      	mov	r3, r1
 804d668:	4620      	mov	r0, r4
 804d66a:	4629      	mov	r1, r5
 804d66c:	f7f3 fa1e 	bl	8040aac <__aeabi_ddiv>
 804d670:	2200      	movs	r2, #0
 804d672:	4b03      	ldr	r3, [pc, #12]	; (804d680 <RegionCommonComputeSymbolTimeLoRa+0x34>)
 804d674:	f7f3 f8f0 	bl	8040858 <__aeabi_dmul>
}
 804d678:	ec41 0b10 	vmov	d0, r0, r1
 804d67c:	bd70      	pop	{r4, r5, r6, pc}
 804d67e:	bf00      	nop
 804d680:	408f4000 	.word	0x408f4000

0804d684 <RegionCommonComputeRxWindowParameters>:
{
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 804d684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d688:	ec57 6b10 	vmov	r6, r7, d0
 804d68c:	4604      	mov	r4, r0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d68e:	3804      	subs	r0, #4
 804d690:	0040      	lsls	r0, r0, #1
{
 804d692:	4615      	mov	r5, r2
 804d694:	469a      	mov	sl, r3
 804d696:	468b      	mov	fp, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d698:	f7f3 f874 	bl	8040784 <__aeabi_i2d>
 804d69c:	4632      	mov	r2, r6
 804d69e:	463b      	mov	r3, r7
 804d6a0:	f7f3 f8da 	bl	8040858 <__aeabi_dmul>
 804d6a4:	4680      	mov	r8, r0
 804d6a6:	ea4f 004b 	mov.w	r0, fp, lsl #1
 804d6aa:	4689      	mov	r9, r1
 804d6ac:	f7f3 f85a 	bl	8040764 <__aeabi_ui2d>
 804d6b0:	4602      	mov	r2, r0
 804d6b2:	460b      	mov	r3, r1
 804d6b4:	4640      	mov	r0, r8
 804d6b6:	4649      	mov	r1, r9
 804d6b8:	f7f2 ff18 	bl	80404ec <__adddf3>
 804d6bc:	4632      	mov	r2, r6
 804d6be:	463b      	mov	r3, r7
 804d6c0:	f7f3 f9f4 	bl	8040aac <__aeabi_ddiv>
 804d6c4:	ec41 0b10 	vmov	d0, r0, r1
 804d6c8:	f004 fb16 	bl	8051cf8 <ceil>
 804d6cc:	ec51 0b10 	vmov	r0, r1, d0
 804d6d0:	f7f3 fb84 	bl	8040ddc <__aeabi_d2uiz>
 804d6d4:	4284      	cmp	r4, r0
 804d6d6:	bf38      	it	cc
 804d6d8:	4604      	movcc	r4, r0
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804d6da:	2200      	movs	r2, #0
 804d6dc:	4b18      	ldr	r3, [pc, #96]	; (804d740 <RegionCommonComputeRxWindowParameters+0xbc>)
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 804d6de:	f8ca 4000 	str.w	r4, [sl]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 804d6e2:	4630      	mov	r0, r6
 804d6e4:	4639      	mov	r1, r7
 804d6e6:	f7f3 f8b7 	bl	8040858 <__aeabi_dmul>
 804d6ea:	4680      	mov	r8, r0
 804d6ec:	4620      	mov	r0, r4
 804d6ee:	4689      	mov	r9, r1
 804d6f0:	f7f3 f838 	bl	8040764 <__aeabi_ui2d>
 804d6f4:	4632      	mov	r2, r6
 804d6f6:	463b      	mov	r3, r7
 804d6f8:	f7f3 f8ae 	bl	8040858 <__aeabi_dmul>
 804d6fc:	2200      	movs	r2, #0
 804d6fe:	4b11      	ldr	r3, [pc, #68]	; (804d744 <RegionCommonComputeRxWindowParameters+0xc0>)
 804d700:	f7f3 f8aa 	bl	8040858 <__aeabi_dmul>
 804d704:	4602      	mov	r2, r0
 804d706:	460b      	mov	r3, r1
 804d708:	4640      	mov	r0, r8
 804d70a:	4649      	mov	r1, r9
 804d70c:	f7f2 feec 	bl	80404e8 <__aeabi_dsub>
 804d710:	4606      	mov	r6, r0
 804d712:	4628      	mov	r0, r5
 804d714:	460f      	mov	r7, r1
 804d716:	f7f3 f825 	bl	8040764 <__aeabi_ui2d>
 804d71a:	460b      	mov	r3, r1
 804d71c:	4602      	mov	r2, r0
 804d71e:	4639      	mov	r1, r7
 804d720:	4630      	mov	r0, r6
 804d722:	f7f2 fee1 	bl	80404e8 <__aeabi_dsub>
 804d726:	ec41 0b10 	vmov	d0, r0, r1
 804d72a:	f004 fae5 	bl	8051cf8 <ceil>
 804d72e:	ec51 0b10 	vmov	r0, r1, d0
 804d732:	f7f3 fb2b 	bl	8040d8c <__aeabi_d2iz>
 804d736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804d738:	6018      	str	r0, [r3, #0]
}
 804d73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d73e:	bf00      	nop
 804d740:	40100000 	.word	0x40100000
 804d744:	3fe00000 	.word	0x3fe00000

0804d748 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804d748:	0040      	lsls	r0, r0, #1
 804d74a:	ee07 0a90 	vmov	s15, r0
 804d74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 804d752:	b508      	push	{r3, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 804d754:	ee30 0a67 	vsub.f32	s0, s0, s15
 804d758:	ee70 7a60 	vsub.f32	s15, s0, s1
 804d75c:	ee17 0a90 	vmov	r0, s15
 804d760:	f7f3 f822 	bl	80407a8 <__aeabi_f2d>
 804d764:	ec41 0b10 	vmov	d0, r0, r1
 804d768:	f004 fb46 	bl	8051df8 <floor>
 804d76c:	ec51 0b10 	vmov	r0, r1, d0
 804d770:	f7f3 fb0c 	bl	8040d8c <__aeabi_d2iz>

    return phyTxPower;
}
 804d774:	b240      	sxtb	r0, r0
 804d776:	bd08      	pop	{r3, pc}

0804d778 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 804d778:	b570      	push	{r4, r5, r6, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 804d77a:	7ac3      	ldrb	r3, [r0, #11]
 804d77c:	6802      	ldr	r2, [r0, #0]
 804d77e:	7a86      	ldrb	r6, [r0, #10]
 804d780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804d784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 804d788:	6842      	ldr	r2, [r0, #4]
 804d78a:	7a5b      	ldrb	r3, [r3, #9]
 804d78c:	011b      	lsls	r3, r3, #4
 804d78e:	18d5      	adds	r5, r2, r3
 804d790:	5ad1      	ldrh	r1, [r2, r3]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 804d792:	2300      	movs	r3, #0
 804d794:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 804d796:	7a43      	ldrb	r3, [r0, #9]
{
 804d798:	4604      	mov	r4, r0
    if( calcBackOffParams->Joined == false )
 804d79a:	b973      	cbnz	r3, 804d7ba <RegionCommonCalcBackOff+0x42>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 804d79c:	68c0      	ldr	r0, [r0, #12]
 804d79e:	f7ff fe2b 	bl	804d3f8 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 804d7a2:	b90e      	cbnz	r6, 804d7a8 <RegionCommonCalcBackOff+0x30>
 804d7a4:	7a23      	ldrb	r3, [r4, #8]
 804d7a6:	b153      	cbz	r3, 804d7be <RegionCommonCalcBackOff+0x46>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 804d7a8:	4281      	cmp	r1, r0
 804d7aa:	bf38      	it	cc
 804d7ac:	4601      	movcc	r1, r0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804d7ae:	b289      	uxth	r1, r1
    }
    else
    {
        if( calcBackOffParams->DutyCycleEnabled == true )
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 804d7b0:	6923      	ldr	r3, [r4, #16]
 804d7b2:	3901      	subs	r1, #1
 804d7b4:	4359      	muls	r1, r3
 804d7b6:	60e9      	str	r1, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 804d7b8:	e001      	b.n	804d7be <RegionCommonCalcBackOff+0x46>
        if( calcBackOffParams->DutyCycleEnabled == true )
 804d7ba:	2e00      	cmp	r6, #0
 804d7bc:	d1f8      	bne.n	804d7b0 <RegionCommonCalcBackOff+0x38>
}
 804d7be:	bd70      	pop	{r4, r5, r6, pc}

0804d7c0 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 804d7c0:	b510      	push	{r4, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 804d7c2:	4c2a      	ldr	r4, [pc, #168]	; (804d86c <certif_tx+0xac>)
 804d7c4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
{
 804d7c8:	b086      	sub	sp, #24
  if( certifParam.LinkCheck == true )
 804d7ca:	b17b      	cbz	r3, 804d7ec <certif_tx+0x2c>
  {
    certifParam.LinkCheck = false;
 804d7cc:	2300      	movs	r3, #0
 804d7ce:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    certifParam.DataBufferSize = 3;
 804d7d2:	2303      	movs	r3, #3
 804d7d4:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 804d7d6:	2305      	movs	r3, #5
 804d7d8:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 804d7da:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 804d7de:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 804d7e0:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 804d7e4:	71a3      	strb	r3, [r4, #6]
  else
  {
    switch( certifParam.State )
    {
    case 4:
      certifParam.State = 1;
 804d7e6:	2301      	movs	r3, #1
 804d7e8:	7063      	strb	r3, [r4, #1]
      break;
 804d7ea:	e004      	b.n	804d7f6 <certif_tx+0x36>
    switch( certifParam.State )
 804d7ec:	7863      	ldrb	r3, [r4, #1]
 804d7ee:	2b01      	cmp	r3, #1
 804d7f0:	d019      	beq.n	804d826 <certif_tx+0x66>
 804d7f2:	2b04      	cmp	r3, #4
 804d7f4:	d0f7      	beq.n	804d7e6 <certif_tx+0x26>
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 804d7f6:	a901      	add	r1, sp, #4
 804d7f8:	78e0      	ldrb	r0, [r4, #3]
 804d7fa:	f7fd fae1 	bl	804adc0 <LoRaMacQueryTxPossible>
 804d7fe:	b1d0      	cbz	r0, 804d836 <certif_tx+0x76>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 804d800:	2300      	movs	r3, #0
 804d802:	f88d 3008 	strb.w	r3, [sp, #8]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804d806:	9304      	str	r3, [sp, #16]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804d808:	f8ad 3014 	strh.w	r3, [sp, #20]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 804d80c:	f88d 3016 	strb.w	r3, [sp, #22]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 804d810:	4817      	ldr	r0, [pc, #92]	; (804d870 <certif_tx+0xb0>)
 804d812:	f000 fd8b 	bl	804e32c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804d816:	a802      	add	r0, sp, #8
 804d818:	f7fd ff4a 	bl	804b6b0 <LoRaMacMcpsRequest>
  {
      return false;
  }
    return true;
}
 804d81c:	3000      	adds	r0, #0
 804d81e:	bf18      	it	ne
 804d820:	2001      	movne	r0, #1
 804d822:	b006      	add	sp, #24
 804d824:	bd10      	pop	{r4, pc}
      certifParam.DataBufferSize = 2;
 804d826:	2302      	movs	r3, #2
 804d828:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804d82a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 804d82e:	7163      	strb	r3, [r4, #5]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 804d830:	0a1a      	lsrs	r2, r3, #8
 804d832:	7122      	strb	r2, [r4, #4]
      break;
 804d834:	e7df      	b.n	804d7f6 <certif_tx+0x36>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804d836:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 804d83a:	78e1      	ldrb	r1, [r4, #3]
 804d83c:	4a0d      	ldr	r2, [pc, #52]	; (804d874 <certif_tx+0xb4>)
 804d83e:	20e0      	movs	r0, #224	; 0xe0
 804d840:	b93b      	cbnz	r3, 804d852 <certif_tx+0x92>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 804d842:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 804d846:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 804d84a:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 804d84e:	9204      	str	r2, [sp, #16]
 804d850:	e7dc      	b.n	804d80c <certif_tx+0x4c>
          mcpsReq.Type = MCPS_CONFIRMED;
 804d852:	2301      	movs	r3, #1
 804d854:	f88d 3008 	strb.w	r3, [sp, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804d858:	f44f 6300 	mov.w	r3, #2048	; 0x800
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 804d85c:	f88d 000c 	strb.w	r0, [sp, #12]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 804d860:	f8ad 1014 	strh.w	r1, [sp, #20]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 804d864:	9204      	str	r2, [sp, #16]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 804d866:	f8ad 3016 	strh.w	r3, [sp, #22]
 804d86a:	e7d1      	b.n	804d810 <certif_tx+0x50>
 804d86c:	200033a0 	.word	0x200033a0
 804d870:	200034a0 	.word	0x200034a0
 804d874:	200033a4 	.word	0x200033a4

0804d878 <OnCertifTxNextPacketTimerEvent>:
/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
    certif_tx( );
 804d878:	f7ff bfa2 	b.w	804d7c0 <certif_tx>

0804d87c <certif_running>:
}
 804d87c:	4b01      	ldr	r3, [pc, #4]	; (804d884 <certif_running+0x8>)
 804d87e:	7818      	ldrb	r0, [r3, #0]
 804d880:	4770      	bx	lr
 804d882:	bf00      	nop
 804d884:	200033a0 	.word	0x200033a0

0804d888 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 804d888:	4a03      	ldr	r2, [pc, #12]	; (804d898 <certif_DownLinkIncrement+0x10>)
 804d88a:	f8b2 30f6 	ldrh.w	r3, [r2, #246]	; 0xf6
 804d88e:	3301      	adds	r3, #1
 804d890:	f8a2 30f6 	strh.w	r3, [r2, #246]	; 0xf6
}
 804d894:	4770      	bx	lr
 804d896:	bf00      	nop
 804d898:	200033a0 	.word	0x200033a0

0804d89c <certif_linkCheck>:
  certifParam.LinkCheck = true;
 804d89c:	4b05      	ldr	r3, [pc, #20]	; (804d8b4 <certif_linkCheck+0x18>)
 804d89e:	2201      	movs	r2, #1
 804d8a0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 804d8a4:	7a02      	ldrb	r2, [r0, #8]
 804d8a6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 804d8aa:	7a42      	ldrb	r2, [r0, #9]
 804d8ac:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 804d8b0:	4770      	bx	lr
 804d8b2:	bf00      	nop
 804d8b4:	200033a0 	.word	0x200033a0

0804d8b8 <certif_rx>:
{
 804d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 804d8ba:	4c63      	ldr	r4, [pc, #396]	; (804da48 <certif_rx+0x190>)
 804d8bc:	7823      	ldrb	r3, [r4, #0]
{
 804d8be:	b08d      	sub	sp, #52	; 0x34
 804d8c0:	460e      	mov	r6, r1
  if( certifParam.Running == false )
 804d8c2:	2b00      	cmp	r3, #0
 804d8c4:	d142      	bne.n	804d94c <certif_rx+0x94>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804d8c6:	7b07      	ldrb	r7, [r0, #12]
 804d8c8:	2f04      	cmp	r7, #4
 804d8ca:	d13a      	bne.n	804d942 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804d8cc:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 804d8ce:	7811      	ldrb	r1, [r2, #0]
 804d8d0:	2901      	cmp	r1, #1
 804d8d2:	d136      	bne.n	804d942 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 804d8d4:	7851      	ldrb	r1, [r2, #1]
 804d8d6:	2901      	cmp	r1, #1
 804d8d8:	d133      	bne.n	804d942 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 804d8da:	7891      	ldrb	r1, [r2, #2]
 804d8dc:	2901      	cmp	r1, #1
 804d8de:	d130      	bne.n	804d942 <certif_rx+0x8a>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 804d8e0:	78d6      	ldrb	r6, [r2, #3]
 804d8e2:	2e01      	cmp	r6, #1
 804d8e4:	d12d      	bne.n	804d942 <certif_rx+0x8a>
          mibReq.Type = MIB_ADR;
 804d8e6:	ad0c      	add	r5, sp, #48	; 0x30
          certifParam.DataBufferSize = 2;
 804d8e8:	2202      	movs	r2, #2
          mibReq.Type = MIB_ADR;
 804d8ea:	f805 7d20 	strb.w	r7, [r5, #-32]!
          LoRaMacMibGetRequestConfirm( &mibReq );
 804d8ee:	4628      	mov	r0, r5
          certifParam.DataBufferSize = 2;
 804d8f0:	70e2      	strb	r2, [r4, #3]
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804d8f2:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.DownLinkCounter = 0;
 804d8f6:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.LinkCheck = false;
 804d8fa:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
          certifParam.DemodMargin = 0;
 804d8fe:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
          certifParam.NbGateways = 0;
 804d902:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
          certifParam.Running = true;
 804d906:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 804d908:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 804d90a:	f7fd fab9 	bl	804ae80 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 804d90e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 804d912:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d916:	4628      	mov	r0, r5
          mibReq.Type = MIB_ADR;
 804d918:	f88d 7010 	strb.w	r7, [sp, #16]
          mibReq.Param.AdrEnable = true;
 804d91c:	f88d 6014 	strb.w	r6, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d920:	f7fd fb8a 	bl	804b038 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 804d924:	4949      	ldr	r1, [pc, #292]	; (804da4c <certif_rx+0x194>)
 804d926:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804d92a:	f000 fcf5 	bl	804e318 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 804d92e:	f241 3188 	movw	r1, #5000	; 0x1388
 804d932:	f504 7080 	add.w	r0, r4, #256	; 0x100
 804d936:	f000 fd93 	bl	804e460 <TimerSetValue>
        certif_tx( );
 804d93a:	f7ff ff41 	bl	804d7c0 <certif_tx>
    if ( certifParam.Running == false )
 804d93e:	7823      	ldrb	r3, [r4, #0]
 804d940:	b913      	cbnz	r3, 804d948 <certif_rx+0x90>
      TimerStop( &CertifTxNextPacketTimer );
 804d942:	4843      	ldr	r0, [pc, #268]	; (804da50 <certif_rx+0x198>)
 804d944:	f000 fd64 	bl	804e410 <TimerStop>
}
 804d948:	b00d      	add	sp, #52	; 0x34
 804d94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 804d94c:	6883      	ldr	r3, [r0, #8]
 804d94e:	781a      	ldrb	r2, [r3, #0]
 804d950:	7062      	strb	r2, [r4, #1]
      switch( certifParam.State )
 804d952:	2a08      	cmp	r2, #8
 804d954:	d8f3      	bhi.n	804d93e <certif_rx+0x86>
 804d956:	e8df f002 	tbb	[pc, r2]
 804d95a:	1405      	.short	0x1405
 804d95c:	2f211c17 	.word	0x2f211c17
 804d960:	4b34      	.short	0x4b34
 804d962:	74          	.byte	0x74
 804d963:	00          	.byte	0x00
          certifParam.DownLinkCounter = 0;
 804d964:	2300      	movs	r3, #0
 804d966:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
          certifParam.Running = false;
 804d96a:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 804d96c:	2304      	movs	r3, #4
 804d96e:	f88d 3010 	strb.w	r3, [sp, #16]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d972:	a804      	add	r0, sp, #16
          mibReq.Param.AdrEnable = AdrEnableInit;
 804d974:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804d978:	f88d 3014 	strb.w	r3, [sp, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 804d97c:	f7fd fb5c 	bl	804b038 <LoRaMacMibSetRequestConfirm>
 804d980:	e7dd      	b.n	804d93e <certif_rx+0x86>
          certifParam.DataBufferSize = 2;
 804d982:	2302      	movs	r3, #2
 804d984:	70e3      	strb	r3, [r4, #3]
          break;
 804d986:	e7da      	b.n	804d93e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 804d988:	2301      	movs	r3, #1
 804d98a:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804d98e:	7063      	strb	r3, [r4, #1]
          break;
 804d990:	e7d5      	b.n	804d93e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 804d992:	2300      	movs	r3, #0
 804d994:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
          certifParam.State = 1;
 804d998:	2301      	movs	r3, #1
 804d99a:	e7f8      	b.n	804d98e <certif_rx+0xd6>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 804d99c:	7b05      	ldrb	r5, [r0, #12]
 804d99e:	70e5      	strb	r5, [r4, #3]
          certifParam.DataBuffer[0] = 4;
 804d9a0:	2204      	movs	r2, #4
 804d9a2:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 804d9a4:	2200      	movs	r2, #0
 804d9a6:	3201      	adds	r2, #1
 804d9a8:	b2d1      	uxtb	r1, r2
 804d9aa:	428d      	cmp	r5, r1
 804d9ac:	d9c7      	bls.n	804d93e <certif_rx+0x86>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 804d9ae:	5c98      	ldrb	r0, [r3, r2]
 804d9b0:	18a1      	adds	r1, r4, r2
 804d9b2:	3001      	adds	r0, #1
 804d9b4:	7108      	strb	r0, [r1, #4]
 804d9b6:	e7f6      	b.n	804d9a6 <certif_rx+0xee>
          mlmeReq.Type = MLME_LINK_CHECK;
 804d9b8:	a80c      	add	r0, sp, #48	; 0x30
 804d9ba:	2303      	movs	r3, #3
          mlmeReq.Type = MLME_DEVICE_TIME;
 804d9bc:	f800 3d20 	strb.w	r3, [r0, #-32]!
 804d9c0:	e013      	b.n	804d9ea <certif_rx+0x132>
            mibReq.Type = MIB_ADR;
 804d9c2:	2304      	movs	r3, #4
            certifParam.DownLinkCounter = 0;
 804d9c4:	2500      	movs	r5, #0
            mibReq.Type = MIB_ADR;
 804d9c6:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d9ca:	a804      	add	r0, sp, #16
            mibReq.Param.AdrEnable = AdrEnableInit;
 804d9cc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 804d9d0:	f88d 3014 	strb.w	r3, [sp, #20]
            certifParam.DownLinkCounter = 0;
 804d9d4:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
            certifParam.Running = false;
 804d9d8:	7025      	strb	r5, [r4, #0]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d9da:	f7fd fb2d 	bl	804b038 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Req.Join = *JoinParameters;
 804d9de:	7833      	ldrb	r3, [r6, #0]
            mlmeReq.Type = MLME_JOIN;
 804d9e0:	f88d 5000 	strb.w	r5, [sp]
            mlmeReq.Req.Join = *JoinParameters;
 804d9e4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMlmeRequest( &mlmeReq );
 804d9e8:	4668      	mov	r0, sp
          LoRaMacMlmeRequest( &mlmeReq );
 804d9ea:	f7fd fd7b 	bl	804b4e4 <LoRaMacMlmeRequest>
 804d9ee:	e7a6      	b.n	804d93e <certif_rx+0x86>
          if( mcpsIndication->BufferSize == 3 )
 804d9f0:	7b02      	ldrb	r2, [r0, #12]
 804d9f2:	2a03      	cmp	r2, #3
 804d9f4:	d10c      	bne.n	804da10 <certif_rx+0x158>
              mlmeReq.Type = MLME_TXCW;
 804d9f6:	2204      	movs	r2, #4
 804d9f8:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804d9fc:	785a      	ldrb	r2, [r3, #1]
 804d9fe:	789b      	ldrb	r3, [r3, #2]
 804da00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 804da04:	f8ad 3014 	strh.w	r3, [sp, #20]
              LoRaMacMlmeRequest( &mlmeReq );
 804da08:	a804      	add	r0, sp, #16
 804da0a:	f7fd fd6b 	bl	804b4e4 <LoRaMacMlmeRequest>
 804da0e:	e7c3      	b.n	804d998 <certif_rx+0xe0>
          else if( mcpsIndication->BufferSize == 7 )
 804da10:	2a07      	cmp	r2, #7
 804da12:	d1c1      	bne.n	804d998 <certif_rx+0xe0>
              mlmeReq.Type = MLME_TXCW_1;
 804da14:	2205      	movs	r2, #5
 804da16:	f88d 2010 	strb.w	r2, [sp, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 804da1a:	7859      	ldrb	r1, [r3, #1]
 804da1c:	789a      	ldrb	r2, [r3, #2]
 804da1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 804da22:	f8ad 2014 	strh.w	r2, [sp, #20]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 804da26:	791a      	ldrb	r2, [r3, #4]
 804da28:	78d9      	ldrb	r1, [r3, #3]
 804da2a:	0212      	lsls	r2, r2, #8
 804da2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804da30:	7959      	ldrb	r1, [r3, #5]
 804da32:	430a      	orrs	r2, r1
 804da34:	2164      	movs	r1, #100	; 0x64
 804da36:	434a      	muls	r2, r1
 804da38:	9206      	str	r2, [sp, #24]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 804da3a:	799b      	ldrb	r3, [r3, #6]
 804da3c:	f88d 301c 	strb.w	r3, [sp, #28]
 804da40:	e7e2      	b.n	804da08 <certif_rx+0x150>
          mlmeReq.Type = MLME_DEVICE_TIME;
 804da42:	a80c      	add	r0, sp, #48	; 0x30
 804da44:	2309      	movs	r3, #9
 804da46:	e7b9      	b.n	804d9bc <certif_rx+0x104>
 804da48:	200033a0 	.word	0x200033a0
 804da4c:	0804d879 	.word	0x0804d879
 804da50:	200034a0 	.word	0x200034a0

0804da54 <MlmeIndication>:
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 804da54:	7803      	ldrb	r3, [r0, #0]
 804da56:	2b06      	cmp	r3, #6
 804da58:	d103      	bne.n	804da62 <MlmeIndication+0xe>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 804da5a:	4b02      	ldr	r3, [pc, #8]	; (804da64 <MlmeIndication+0x10>)
 804da5c:	681b      	ldr	r3, [r3, #0]
 804da5e:	69db      	ldr	r3, [r3, #28]
 804da60:	4718      	bx	r3
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 804da62:	4770      	bx	lr
 804da64:	200034bc 	.word	0x200034bc

0804da68 <McpsIndication>:
{
 804da68:	b570      	push	{r4, r5, r6, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804da6a:	7843      	ldrb	r3, [r0, #1]
{
 804da6c:	b08e      	sub	sp, #56	; 0x38
 804da6e:	4604      	mov	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804da70:	2b00      	cmp	r3, #0
 804da72:	d136      	bne.n	804dae2 <McpsIndication+0x7a>
    if( mcpsIndication->FramePending == true )
 804da74:	7943      	ldrb	r3, [r0, #5]
 804da76:	2b01      	cmp	r3, #1
 804da78:	d103      	bne.n	804da82 <McpsIndication+0x1a>
        LoRaMainCallbacks->LORA_TxNeeded( );
 804da7a:	4b22      	ldr	r3, [pc, #136]	; (804db04 <McpsIndication+0x9c>)
 804da7c:	681b      	ldr	r3, [r3, #0]
 804da7e:	69db      	ldr	r3, [r3, #28]
 804da80:	4798      	blx	r3
    if (certif_running() == true )
 804da82:	f7ff fefb 	bl	804d87c <certif_running>
 804da86:	b108      	cbz	r0, 804da8c <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 804da88:	f7ff fefe 	bl	804d888 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 804da8c:	7b63      	ldrb	r3, [r4, #13]
 804da8e:	b133      	cbz	r3, 804da9e <McpsIndication+0x36>
      switch( mcpsIndication->Port )
 804da90:	78e3      	ldrb	r3, [r4, #3]
 804da92:	2be0      	cmp	r3, #224	; 0xe0
 804da94:	d127      	bne.n	804dae6 <McpsIndication+0x7e>
          certif_rx( mcpsIndication, &JoinParameters );
 804da96:	491c      	ldr	r1, [pc, #112]	; (804db08 <McpsIndication+0xa0>)
 804da98:	4620      	mov	r0, r4
 804da9a:	f7ff ff0d 	bl	804d8b8 <certif_rx>
} 


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 804da9e:	4e1b      	ldr	r6, [pc, #108]	; (804db0c <McpsIndication+0xa4>)
 804daa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804daa2:	ad09      	add	r5, sp, #36	; 0x24
 804daa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804daa6:	6833      	ldr	r3, [r6, #0]
 804daa8:	602b      	str	r3, [r5, #0]
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
	PRINTNOW();
 804daaa:	a807      	add	r0, sp, #28
 804daac:	f000 fbff 	bl	804e2ae <SysTimeGetMcuTime>
 804dab0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 804dab4:	9907      	ldr	r1, [sp, #28]
 804dab6:	4816      	ldr	r0, [pc, #88]	; (804db10 <McpsIndication+0xa8>)
 804dab8:	f000 fd34 	bl	804e524 <TraceSend>
    PRINTF("#= D/L FRAME %lu =# RxWin %s, Port %d, data size %d, rssi %d, snr %d\r\n\r\n", \
 804dabc:	7c62      	ldrb	r2, [r4, #17]
 804dabe:	78e3      	ldrb	r3, [r4, #3]
 804dac0:	4814      	ldr	r0, [pc, #80]	; (804db14 <McpsIndication+0xac>)
 804dac2:	a90e      	add	r1, sp, #56	; 0x38
 804dac4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 804dac8:	f994 1010 	ldrsb.w	r1, [r4, #16]
 804dacc:	9102      	str	r1, [sp, #8]
 804dace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804dad2:	9101      	str	r1, [sp, #4]
 804dad4:	7b21      	ldrb	r1, [r4, #12]
 804dad6:	9100      	str	r1, [sp, #0]
 804dad8:	f852 2c14 	ldr.w	r2, [r2, #-20]
 804dadc:	6961      	ldr	r1, [r4, #20]
 804dade:	f000 fd21 	bl	804e524 <TraceSend>
}
 804dae2:	b00e      	add	sp, #56	; 0x38
 804dae4:	bd70      	pop	{r4, r5, r6, pc}
          AppData.Port = mcpsIndication->Port;
 804dae6:	f88d 3019 	strb.w	r3, [sp, #25]
          AppData.Buff = mcpsIndication->Buffer;
 804daea:	a80e      	add	r0, sp, #56	; 0x38
          AppData.BuffSize = mcpsIndication->BufferSize;
 804daec:	7b23      	ldrb	r3, [r4, #12]
 804daee:	f88d 3018 	strb.w	r3, [sp, #24]
          AppData.Buff = mcpsIndication->Buffer;
 804daf2:	68a3      	ldr	r3, [r4, #8]
 804daf4:	f840 3d24 	str.w	r3, [r0, #-36]!
          LoRaMainCallbacks->LORA_RxData( &AppData );
 804daf8:	4b02      	ldr	r3, [pc, #8]	; (804db04 <McpsIndication+0x9c>)
 804dafa:	681b      	ldr	r3, [r3, #0]
 804dafc:	691b      	ldr	r3, [r3, #16]
 804dafe:	4798      	blx	r3
 804db00:	e7cd      	b.n	804da9e <McpsIndication+0x36>
 804db02:	bf00      	nop
 804db04:	200034bc 	.word	0x200034bc
 804db08:	200034c0 	.word	0x200034c0
 804db0c:	080525ac 	.word	0x080525ac
 804db10:	0805269e 	.word	0x0805269e
 804db14:	08052860 	.word	0x08052860

0804db18 <McpsConfirm>:
{
 804db18:	b500      	push	{lr}
 804db1a:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 804db1c:	a810      	add	r0, sp, #64	; 0x40
 804db1e:	2300      	movs	r3, #0
 804db20:	f800 3d20 	strb.w	r3, [r0, #-32]!
    LoRaMacMibGetRequestConfirm( &mibReq );
 804db24:	f7fd f9ac 	bl	804ae80 <LoRaMacMibGetRequestConfirm>
    mibGet.Type  = MIB_CHANNELS_MASK;
 804db28:	a810      	add	r0, sp, #64	; 0x40
 804db2a:	2324      	movs	r3, #36	; 0x24
 804db2c:	f800 3d40 	strb.w	r3, [r0, #-64]!
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 804db30:	f7fd f9a6 	bl	804ae80 <LoRaMacMibGetRequestConfirm>
}
 804db34:	b011      	add	sp, #68	; 0x44
 804db36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804db3c <LORA_Init>:
{
 804db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804db40:	4a6f      	ldr	r2, [pc, #444]	; (804dd00 <LORA_Init+0x1c4>)
  LoRaParamInit = LoRaParam;
 804db42:	4c70      	ldr	r4, [pc, #448]	; (804dd04 <LORA_Init+0x1c8>)
{
 804db44:	b092      	sub	sp, #72	; 0x48
 804db46:	4605      	mov	r5, r0
 804db48:	460e      	mov	r6, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804db4a:	6810      	ldr	r0, [r2, #0]
 804db4c:	6851      	ldr	r1, [r2, #4]
  LoRaMainCallbacks = callbacks;
 804db4e:	6025      	str	r5, [r4, #0]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804db50:	ab0e      	add	r3, sp, #56	; 0x38
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804db52:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 804db56:	c303      	stmia	r3!, {r0, r1}
  PPRINTF( "ABP\n\r"); 
 804db58:	4d6b      	ldr	r5, [pc, #428]	; (804dd08 <LORA_Init+0x1cc>)
  LoRaParamInit = LoRaParam;
 804db5a:	60a6      	str	r6, [r4, #8]
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 804db5c:	2300      	movs	r3, #0
 804db5e:	9310      	str	r3, [sp, #64]	; 0x40
 804db60:	f8c8 3004 	str.w	r3, [r8, #4]
  PPRINTF( "ABP\n\r"); 
 804db64:	4628      	mov	r0, r5
 804db66:	f000 fcdd 	bl	804e524 <TraceSend>
 804db6a:	2800      	cmp	r0, #0
 804db6c:	d1fa      	bne.n	804db64 <LORA_Init+0x28>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 804db6e:	4d67      	ldr	r5, [pc, #412]	; (804dd0c <LORA_Init+0x1d0>)
 804db70:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
 804db74:	9004      	str	r0, [sp, #16]
 804db76:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
 804db7a:	9003      	str	r0, [sp, #12]
 804db7c:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 804db80:	9002      	str	r0, [sp, #8]
 804db82:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 804db86:	9001      	str	r0, [sp, #4]
 804db88:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 804db8c:	9000      	str	r0, [sp, #0]
 804db8e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 804db92:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 804db96:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 804db9a:	4628      	mov	r0, r5
 804db9c:	f000 fcc2 	bl	804e524 <TraceSend>
 804dba0:	2800      	cmp	r0, #0
 804dba2:	d1e5      	bne.n	804db70 <LORA_Init+0x34>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 804dba4:	4e5a      	ldr	r6, [pc, #360]	; (804dd10 <LORA_Init+0x1d4>)
 804dba6:	4d5b      	ldr	r5, [pc, #364]	; (804dd14 <LORA_Init+0x1d8>)
 804dba8:	4631      	mov	r1, r6
 804dbaa:	4628      	mov	r0, r5
 804dbac:	f000 fcba 	bl	804e524 <TraceSend>
 804dbb0:	2800      	cmp	r0, #0
 804dbb2:	d1f9      	bne.n	804dba8 <LORA_Init+0x6c>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 804dbb4:	4d58      	ldr	r5, [pc, #352]	; (804dd18 <LORA_Init+0x1dc>)
 804dbb6:	4f59      	ldr	r7, [pc, #356]	; (804dd1c <LORA_Init+0x1e0>)
 804dbb8:	462e      	mov	r6, r5
 804dbba:	7be8      	ldrb	r0, [r5, #15]
 804dbbc:	78ab      	ldrb	r3, [r5, #2]
 804dbbe:	786a      	ldrb	r2, [r5, #1]
 804dbc0:	7829      	ldrb	r1, [r5, #0]
 804dbc2:	900c      	str	r0, [sp, #48]	; 0x30
 804dbc4:	7ba8      	ldrb	r0, [r5, #14]
 804dbc6:	900b      	str	r0, [sp, #44]	; 0x2c
 804dbc8:	7b68      	ldrb	r0, [r5, #13]
 804dbca:	900a      	str	r0, [sp, #40]	; 0x28
 804dbcc:	7b28      	ldrb	r0, [r5, #12]
 804dbce:	9009      	str	r0, [sp, #36]	; 0x24
 804dbd0:	7ae8      	ldrb	r0, [r5, #11]
 804dbd2:	9008      	str	r0, [sp, #32]
 804dbd4:	7aa8      	ldrb	r0, [r5, #10]
 804dbd6:	9007      	str	r0, [sp, #28]
 804dbd8:	7a68      	ldrb	r0, [r5, #9]
 804dbda:	9006      	str	r0, [sp, #24]
 804dbdc:	7a28      	ldrb	r0, [r5, #8]
 804dbde:	9005      	str	r0, [sp, #20]
 804dbe0:	79e8      	ldrb	r0, [r5, #7]
 804dbe2:	9004      	str	r0, [sp, #16]
 804dbe4:	79a8      	ldrb	r0, [r5, #6]
 804dbe6:	9003      	str	r0, [sp, #12]
 804dbe8:	7968      	ldrb	r0, [r5, #5]
 804dbea:	9002      	str	r0, [sp, #8]
 804dbec:	7928      	ldrb	r0, [r5, #4]
 804dbee:	9001      	str	r0, [sp, #4]
 804dbf0:	78e8      	ldrb	r0, [r5, #3]
 804dbf2:	9000      	str	r0, [sp, #0]
 804dbf4:	4638      	mov	r0, r7
 804dbf6:	f000 fc95 	bl	804e524 <TraceSend>
 804dbfa:	2800      	cmp	r0, #0
 804dbfc:	d1dd      	bne.n	804dbba <LORA_Init+0x7e>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 804dbfe:	4d48      	ldr	r5, [pc, #288]	; (804dd20 <LORA_Init+0x1e4>)
 804dc00:	7ff0      	ldrb	r0, [r6, #31]
 804dc02:	7cb3      	ldrb	r3, [r6, #18]
 804dc04:	7c72      	ldrb	r2, [r6, #17]
 804dc06:	7c31      	ldrb	r1, [r6, #16]
 804dc08:	900c      	str	r0, [sp, #48]	; 0x30
 804dc0a:	7fb0      	ldrb	r0, [r6, #30]
 804dc0c:	900b      	str	r0, [sp, #44]	; 0x2c
 804dc0e:	7f70      	ldrb	r0, [r6, #29]
 804dc10:	900a      	str	r0, [sp, #40]	; 0x28
 804dc12:	7f30      	ldrb	r0, [r6, #28]
 804dc14:	9009      	str	r0, [sp, #36]	; 0x24
 804dc16:	7ef0      	ldrb	r0, [r6, #27]
 804dc18:	9008      	str	r0, [sp, #32]
 804dc1a:	7eb0      	ldrb	r0, [r6, #26]
 804dc1c:	9007      	str	r0, [sp, #28]
 804dc1e:	7e70      	ldrb	r0, [r6, #25]
 804dc20:	9006      	str	r0, [sp, #24]
 804dc22:	7e30      	ldrb	r0, [r6, #24]
 804dc24:	9005      	str	r0, [sp, #20]
 804dc26:	7df0      	ldrb	r0, [r6, #23]
 804dc28:	9004      	str	r0, [sp, #16]
 804dc2a:	7db0      	ldrb	r0, [r6, #22]
 804dc2c:	9003      	str	r0, [sp, #12]
 804dc2e:	7d70      	ldrb	r0, [r6, #21]
 804dc30:	9002      	str	r0, [sp, #8]
 804dc32:	7d30      	ldrb	r0, [r6, #20]
 804dc34:	9001      	str	r0, [sp, #4]
 804dc36:	7cf0      	ldrb	r0, [r6, #19]
 804dc38:	9000      	str	r0, [sp, #0]
 804dc3a:	4628      	mov	r0, r5
 804dc3c:	f000 fc72 	bl	804e524 <TraceSend>
 804dc40:	4607      	mov	r7, r0
 804dc42:	2800      	cmp	r0, #0
 804dc44:	d1dc      	bne.n	804dc00 <LORA_Init+0xc4>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 804dc46:	4b37      	ldr	r3, [pc, #220]	; (804dd24 <LORA_Init+0x1e8>)
 804dc48:	60e3      	str	r3, [r4, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 804dc4a:	4b37      	ldr	r3, [pc, #220]	; (804dd28 <LORA_Init+0x1ec>)
 804dc4c:	6123      	str	r3, [r4, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 804dc4e:	4b37      	ldr	r3, [pc, #220]	; (804dd2c <LORA_Init+0x1f0>)
 804dc50:	6163      	str	r3, [r4, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 804dc52:	4b37      	ldr	r3, [pc, #220]	; (804dd30 <LORA_Init+0x1f4>)
 804dc54:	61a3      	str	r3, [r4, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804dc56:	6823      	ldr	r3, [r4, #0]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804dc58:	4936      	ldr	r1, [pc, #216]	; (804dd34 <LORA_Init+0x1f8>)
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 804dc5a:	681a      	ldr	r2, [r3, #0]
 804dc5c:	61e2      	str	r2, [r4, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 804dc5e:	685a      	ldr	r2, [r3, #4]
 804dc60:	6222      	str	r2, [r4, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804dc62:	f1a1 0010 	sub.w	r0, r1, #16
 804dc66:	2201      	movs	r2, #1
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 804dc68:	6a1b      	ldr	r3, [r3, #32]
 804dc6a:	62a3      	str	r3, [r4, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AU915 );
 804dc6c:	f7fc feae 	bl	804a9cc <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 804dc70:	2302      	movs	r3, #2
 804dc72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dc76:	4830      	ldr	r0, [pc, #192]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Param.AppKey = AppKey;
 804dc78:	4d30      	ldr	r5, [pc, #192]	; (804dd3c <LORA_Init+0x200>)
  mibReq.Param.DevEui = devEui;
 804dc7a:	ab0e      	add	r3, sp, #56	; 0x38
 804dc7c:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dc7e:	f7fd f9db 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 804dc82:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dc84:	482c      	ldr	r0, [pc, #176]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_JOIN_EUI;
 804dc86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.JoinEui = joinEui;
 804dc8a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dc8e:	f7fd f9d3 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 804dc92:	2304      	movs	r3, #4
 804dc94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804dc98:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dc9a:	4827      	ldr	r0, [pc, #156]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 804dc9c:	781b      	ldrb	r3, [r3, #0]
 804dc9e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dca2:	f7fd f9c9 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 804dca6:	231d      	movs	r3, #29
 804dca8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804dcac:	68a3      	ldr	r3, [r4, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcae:	4822      	ldr	r0, [pc, #136]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 804dcb0:	789b      	ldrb	r3, [r3, #2]
 804dcb2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcb6:	f7fd f9bf 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 804dcba:	2308      	movs	r3, #8
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcbc:	481e      	ldr	r0, [pc, #120]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_APP_KEY;
 804dcbe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.AppKey = AppKey;
 804dcc2:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcc4:	f7fd f9b8 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Param.NwkKey = NwkKey;
 804dcc8:	3510      	adds	r5, #16
  mibReq.Type = MIB_NWK_KEY;
 804dcca:	2309      	movs	r3, #9
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dccc:	481a      	ldr	r0, [pc, #104]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_NWK_KEY;
 804dcce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  mibReq.Param.NwkKey = NwkKey;
 804dcd2:	6325      	str	r5, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcd4:	f7fd f9b0 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcd8:	4817      	ldr	r0, [pc, #92]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Type = MIB_DEVICE_CLASS;
 804dcda:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  mibReq.Param.Class= CLASS_A;
 804dcde:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dce2:	f7fd f9a9 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 804dce6:	2330      	movs	r3, #48	; 0x30
 804dce8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcec:	4812      	ldr	r0, [pc, #72]	; (804dd38 <LORA_Init+0x1fc>)
  mibReq.Param.SystemMaxRxError = 20;
 804dcee:	2314      	movs	r3, #20
 804dcf0:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 804dcf2:	f7fd f9a1 	bl	804b038 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 804dcf6:	f7fd f85b 	bl	804adb0 <LoRaMacStart>
}
 804dcfa:	b012      	add	sp, #72	; 0x48
 804dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804dd00:	080525c0 	.word	0x080525c0
 804dd04:	200034bc 	.word	0x200034bc
 804dd08:	080528a9 	.word	0x080528a9
 804dd0c:	080528af 	.word	0x080528af
 804dd10:	10000001 	.word	0x10000001
 804dd14:	080528e1 	.word	0x080528e1
 804dd18:	2000106c 	.word	0x2000106c
 804dd1c:	080528f1 	.word	0x080528f1
 804dd20:	0805294c 	.word	0x0805294c
 804dd24:	0804db19 	.word	0x0804db19
 804dd28:	0804da69 	.word	0x0804da69
 804dd2c:	0804dded 	.word	0x0804dded
 804dd30:	0804da55 	.word	0x0804da55
 804dd34:	200034d8 	.word	0x200034d8
 804dd38:	200034e8 	.word	0x200034e8
 804dd3c:	2000108c 	.word	0x2000108c

0804dd40 <LORA_Join>:
{
 804dd40:	b570      	push	{r4, r5, r6, lr}
    JoinParameters = mlmeReq.Req.Join;
 804dd42:	4c26      	ldr	r4, [pc, #152]	; (804dddc <LORA_Join+0x9c>)
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804dd44:	4e26      	ldr	r6, [pc, #152]	; (804dde0 <LORA_Join+0xa0>)
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 804dd46:	68a3      	ldr	r3, [r4, #8]
    JoinParameters = mlmeReq.Req.Join;
 804dd48:	785b      	ldrb	r3, [r3, #1]
 804dd4a:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd4c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    mibReq.Type = MIB_NET_ID;
 804dd50:	2305      	movs	r3, #5
 804dd52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd56:	4628      	mov	r0, r5
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 804dd58:	2300      	movs	r3, #0
 804dd5a:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd5c:	f7fd f96c 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 804dd60:	2306      	movs	r3, #6
 804dd62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd66:	4628      	mov	r0, r5
    mibReq.Param.DevAddr = DevAddr;
 804dd68:	4b1e      	ldr	r3, [pc, #120]	; (804dde4 <LORA_Join+0xa4>)
 804dd6a:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd6c:	f7fd f964 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 804dd70:	230c      	movs	r3, #12
 804dd72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd76:	4628      	mov	r0, r5
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804dd78:	f106 0340 	add.w	r3, r6, #64	; 0x40
 804dd7c:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd7e:	f7fd f95b 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 804dd82:	230d      	movs	r3, #13
 804dd84:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd88:	4628      	mov	r0, r5
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 804dd8a:	f106 0350 	add.w	r3, r6, #80	; 0x50
 804dd8e:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd90:	f7fd f952 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804dd94:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd96:	4628      	mov	r0, r5
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 804dd98:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 804dd9c:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dd9e:	f7fd f94b 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Param.AppSKey = AppSKey;
 804dda2:	3610      	adds	r6, #16
    mibReq.Type = MIB_APP_S_KEY;
 804dda4:	230f      	movs	r3, #15
    LoRaMacMibSetRequestConfirm( &mibReq );
 804dda6:	4628      	mov	r0, r5
    mibReq.Type = MIB_APP_S_KEY;
 804dda8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.AppSKey = AppSKey;
 804ddac:	6326      	str	r6, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804ddae:	f7fd f943 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804ddb2:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm( &mibReq );
 804ddb4:	4628      	mov	r0, r5
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804ddb6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 804ddba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804ddbe:	f7fd f93b 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 804ddc2:	2335      	movs	r3, #53	; 0x35
 804ddc4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    LoRaMacMibSetRequestConfirm( &mibReq );
 804ddc8:	4628      	mov	r0, r5
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 804ddca:	4b07      	ldr	r3, [pc, #28]	; (804dde8 <LORA_Join+0xa8>)
 804ddcc:	6323      	str	r3, [r4, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 804ddce:	f7fd f933 	bl	804b038 <LoRaMacMibSetRequestConfirm>
    LoRaMainCallbacks->LORA_HasJoined();
 804ddd2:	6823      	ldr	r3, [r4, #0]
}
 804ddd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRaMainCallbacks->LORA_HasJoined();
 804ddd8:	695b      	ldr	r3, [r3, #20]
 804ddda:	4718      	bx	r3
 804dddc:	200034bc 	.word	0x200034bc
 804dde0:	2000106c 	.word	0x2000106c
 804dde4:	10000001 	.word	0x10000001
 804dde8:	01000300 	.word	0x01000300

0804ddec <MlmeConfirm>:
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804ddec:	7842      	ldrb	r2, [r0, #1]
 804ddee:	4b13      	ldr	r3, [pc, #76]	; (804de3c <MlmeConfirm+0x50>)
 804ddf0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
{
 804ddf4:	b510      	push	{r4, lr}
 804ddf6:	4604      	mov	r4, r0
    PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );
 804ddf8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 804ddfa:	4811      	ldr	r0, [pc, #68]	; (804de40 <MlmeConfirm+0x54>)
 804ddfc:	f000 fb92 	bl	804e524 <TraceSend>
    switch( mlmeConfirm->MlmeRequest )
 804de00:	7823      	ldrb	r3, [r4, #0]
 804de02:	b113      	cbz	r3, 804de0a <MlmeConfirm+0x1e>
 804de04:	2b03      	cmp	r3, #3
 804de06:	d00c      	beq.n	804de22 <MlmeConfirm+0x36>
}
 804de08:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804de0a:	7863      	ldrb	r3, [r4, #1]
 804de0c:	b92b      	cbnz	r3, 804de1a <MlmeConfirm+0x2e>
              LoRaMainCallbacks->LORA_HasJoined();
 804de0e:	4b0d      	ldr	r3, [pc, #52]	; (804de44 <MlmeConfirm+0x58>)
 804de10:	681b      	ldr	r3, [r3, #0]
}
 804de12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              LoRaMainCallbacks->LORA_HasJoined();
 804de16:	695b      	ldr	r3, [r3, #20]
 804de18:	4718      	bx	r3
}
 804de1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                LORA_Join();
 804de1e:	f7ff bf8f 	b.w	804dd40 <LORA_Join>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804de22:	7863      	ldrb	r3, [r4, #1]
 804de24:	2b00      	cmp	r3, #0
 804de26:	d1ef      	bne.n	804de08 <MlmeConfirm+0x1c>
                if (certif_running() == true )
 804de28:	f7ff fd28 	bl	804d87c <certif_running>
 804de2c:	2800      	cmp	r0, #0
 804de2e:	d0eb      	beq.n	804de08 <MlmeConfirm+0x1c>
                     certif_linkCheck( mlmeConfirm);
 804de30:	4620      	mov	r0, r4
}
 804de32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                     certif_linkCheck( mlmeConfirm);
 804de36:	f7ff bd31 	b.w	804d89c <certif_linkCheck>
 804de3a:	bf00      	nop
 804de3c:	2000106c 	.word	0x2000106c
 804de40:	080529a7 	.word	0x080529a7
 804de44:	200034bc 	.word	0x200034bc

0804de48 <LORA_JoinStatus>:
{
 804de48:	b500      	push	{lr}
 804de4a:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 804de4c:	a808      	add	r0, sp, #32
 804de4e:	2301      	movs	r3, #1
 804de50:	f800 3d20 	strb.w	r3, [r0, #-32]!
  LoRaMacMibGetRequestConfirm( &mibReq );
 804de54:	f7fd f814 	bl	804ae80 <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804de58:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 804de5c:	3000      	adds	r0, #0
 804de5e:	bf18      	it	ne
 804de60:	2001      	movne	r0, #1
 804de62:	b009      	add	sp, #36	; 0x24
 804de64:	f85d fb04 	ldr.w	pc, [sp], #4

0804de68 <LORA_send>:
{
 804de68:	b570      	push	{r4, r5, r6, lr}
 804de6a:	b086      	sub	sp, #24
 804de6c:	4604      	mov	r4, r0
 804de6e:	460e      	mov	r6, r1
    if (certif_running() == true)
 804de70:	f7ff fd04 	bl	804d87c <certif_running>
 804de74:	4605      	mov	r5, r0
 804de76:	b128      	cbz	r0, 804de84 <LORA_send+0x1c>
    	PRINTF("Test mode");
 804de78:	481b      	ldr	r0, [pc, #108]	; (804dee8 <LORA_send+0x80>)
 804de7a:	f000 fb53 	bl	804e524 <TraceSend>
      return false;
 804de7e:	2000      	movs	r0, #0
}  
 804de80:	b006      	add	sp, #24
 804de82:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 804de84:	a901      	add	r1, sp, #4
 804de86:	7920      	ldrb	r0, [r4, #4]
 804de88:	f7fc ff9a 	bl	804adc0 <LoRaMacQueryTxPossible>
 804de8c:	4b17      	ldr	r3, [pc, #92]	; (804deec <LORA_send+0x84>)
 804de8e:	b178      	cbz	r0, 804deb0 <LORA_send+0x48>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804de90:	689b      	ldr	r3, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804de92:	9504      	str	r5, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804de94:	f8ad 5014 	strh.w	r5, [sp, #20]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 804de98:	785b      	ldrb	r3, [r3, #1]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 804de9a:	f88d 5008 	strb.w	r5, [sp, #8]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804de9e:	a802      	add	r0, sp, #8
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 804dea0:	f88d 3016 	strb.w	r3, [sp, #22]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 804dea4:	f7fd fc04 	bl	804b6b0 <LoRaMacMcpsRequest>
 804dea8:	3000      	adds	r0, #0
 804deaa:	bf18      	it	ne
 804deac:	2001      	movne	r0, #1
 804deae:	e7e7      	b.n	804de80 <LORA_send+0x18>
 804deb0:	689b      	ldr	r3, [r3, #8]
 804deb2:	7960      	ldrb	r0, [r4, #5]
 804deb4:	7921      	ldrb	r1, [r4, #4]
 804deb6:	6822      	ldr	r2, [r4, #0]
 804deb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 804debc:	b93e      	cbnz	r6, 804dece <LORA_send+0x66>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 804debe:	f88d 6008 	strb.w	r6, [sp, #8]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 804dec2:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 804dec6:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 804deca:	9204      	str	r2, [sp, #16]
 804decc:	e7e7      	b.n	804de9e <LORA_send+0x36>
            mcpsReq.Type = MCPS_CONFIRMED;
 804dece:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 804ded0:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804ded2:	2208      	movs	r2, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 804ded4:	f88d 4008 	strb.w	r4, [sp, #8]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 804ded8:	f88d 000c 	strb.w	r0, [sp, #12]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 804dedc:	f8ad 1014 	strh.w	r1, [sp, #20]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 804dee0:	f88d 2017 	strb.w	r2, [sp, #23]
 804dee4:	e7db      	b.n	804de9e <LORA_send+0x36>
 804dee6:	bf00      	nop
 804dee8:	080529c5 	.word	0x080529c5
 804deec:	200034bc 	.word	0x200034bc

0804def0 <LORA_RequestClass>:
{
 804def0:	b570      	push	{r4, r5, r6, lr}
 804def2:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 804def4:	ae08      	add	r6, sp, #32
 804def6:	2400      	movs	r4, #0
 804def8:	f806 4d20 	strb.w	r4, [r6, #-32]!
{
 804defc:	4605      	mov	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 804defe:	4630      	mov	r0, r6
 804df00:	f7fc ffbe 	bl	804ae80 <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 804df04:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (currentClass != newClass)
 804df08:	42ab      	cmp	r3, r5
 804df0a:	d004      	beq.n	804df16 <LORA_RequestClass+0x26>
    switch (newClass)
 804df0c:	2d01      	cmp	r5, #1
 804df0e:	d014      	beq.n	804df3a <LORA_RequestClass+0x4a>
 804df10:	d304      	bcc.n	804df1c <LORA_RequestClass+0x2c>
 804df12:	2d02      	cmp	r5, #2
 804df14:	d015      	beq.n	804df42 <LORA_RequestClass+0x52>
}
 804df16:	4620      	mov	r0, r4
 804df18:	b008      	add	sp, #32
 804df1a:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804df1c:	4630      	mov	r0, r6
        mibReq.Param.Class = CLASS_A;
 804df1e:	f88d 4004 	strb.w	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804df22:	f7fd f889 	bl	804b038 <LoRaMacMibSetRequestConfirm>
 804df26:	4604      	mov	r4, r0
 804df28:	b110      	cbz	r0, 804df30 <LORA_RequestClass+0x40>
          Errorstatus = LORA_ERROR;
 804df2a:	f04f 34ff 	mov.w	r4, #4294967295
 804df2e:	e7f2      	b.n	804df16 <LORA_RequestClass+0x26>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 804df30:	4b0c      	ldr	r3, [pc, #48]	; (804df64 <LORA_RequestClass+0x74>)
 804df32:	681b      	ldr	r3, [r3, #0]
 804df34:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804df36:	4798      	blx	r3
 804df38:	e7ed      	b.n	804df16 <LORA_RequestClass+0x26>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 804df3a:	480b      	ldr	r0, [pc, #44]	; (804df68 <LORA_RequestClass+0x78>)
 804df3c:	f000 faf2 	bl	804e524 <TraceSend>
        break;
 804df40:	e7e9      	b.n	804df16 <LORA_RequestClass+0x26>
        if (currentClass != CLASS_A)
 804df42:	1c1c      	adds	r4, r3, #0
 804df44:	bf18      	it	ne
 804df46:	2401      	movne	r4, #1
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804df48:	4630      	mov	r0, r6
        if (currentClass != CLASS_A)
 804df4a:	4264      	negs	r4, r4
        mibReq.Param.Class = CLASS_C;
 804df4c:	f88d 5004 	strb.w	r5, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804df50:	f7fd f872 	bl	804b038 <LoRaMacMibSetRequestConfirm>
 804df54:	2800      	cmp	r0, #0
 804df56:	d1e8      	bne.n	804df2a <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 804df58:	4b02      	ldr	r3, [pc, #8]	; (804df64 <LORA_RequestClass+0x74>)
 804df5a:	681b      	ldr	r3, [r3, #0]
 804df5c:	4628      	mov	r0, r5
 804df5e:	699b      	ldr	r3, [r3, #24]
 804df60:	e7e9      	b.n	804df36 <LORA_RequestClass+0x46>
 804df62:	bf00      	nop
 804df64:	200034bc 	.word	0x200034bc
 804df68:	080529cf 	.word	0x080529cf

0804df6c <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804df6c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804df6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804df72:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804df74:	b141      	cbz	r1, 804df88 <LPM_SetOffMode+0x1c>
 804df76:	2901      	cmp	r1, #1
 804df78:	d103      	bne.n	804df82 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 804df7a:	4b06      	ldr	r3, [pc, #24]	; (804df94 <LPM_SetOffMode+0x28>)
 804df7c:	681a      	ldr	r2, [r3, #0]
 804df7e:	4302      	orrs	r2, r0
 804df80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804df82:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 804df86:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 804df88:	4902      	ldr	r1, [pc, #8]	; (804df94 <LPM_SetOffMode+0x28>)
 804df8a:	680b      	ldr	r3, [r1, #0]
 804df8c:	ea23 0300 	bic.w	r3, r3, r0
 804df90:	600b      	str	r3, [r1, #0]
      break;
 804df92:	e7f6      	b.n	804df82 <LPM_SetOffMode+0x16>
 804df94:	20003508 	.word	0x20003508

0804df98 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 804df98:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804df9a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804df9e:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 804dfa0:	b141      	cbz	r1, 804dfb4 <LPM_SetStopMode+0x1c>
 804dfa2:	2901      	cmp	r1, #1
 804dfa4:	d103      	bne.n	804dfae <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 804dfa6:	4b06      	ldr	r3, [pc, #24]	; (804dfc0 <LPM_SetStopMode+0x28>)
 804dfa8:	685a      	ldr	r2, [r3, #4]
 804dfaa:	4302      	orrs	r2, r0
 804dfac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804dfae:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 804dfb2:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 804dfb4:	4902      	ldr	r1, [pc, #8]	; (804dfc0 <LPM_SetStopMode+0x28>)
 804dfb6:	684b      	ldr	r3, [r1, #4]
 804dfb8:	ea23 0300 	bic.w	r3, r3, r0
 804dfbc:	604b      	str	r3, [r1, #4]
      break;
 804dfbe:	e7f6      	b.n	804dfae <LPM_SetStopMode+0x16>
 804dfc0:	20003508 	.word	0x20003508

0804dfc4 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804dfc4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804dfc8:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 804dfca:	4b06      	ldr	r3, [pc, #24]	; (804dfe4 <LPM_GetMode+0x20>)
 804dfcc:	6859      	ldr	r1, [r3, #4]
 804dfce:	b939      	cbnz	r1, 804dfe0 <LPM_GetMode+0x1c>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 804dfd0:	681b      	ldr	r3, [r3, #0]
 804dfd2:	2b00      	cmp	r3, #0
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 804dfd4:	bf14      	ite	ne
 804dfd6:	2001      	movne	r0, #1
 804dfd8:	2002      	moveq	r0, #2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804dfda:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 804dfde:	4770      	bx	lr
    mode_selected = LPM_SleepMode;
 804dfe0:	2000      	movs	r0, #0
 804dfe2:	e7fa      	b.n	804dfda <LPM_GetMode+0x16>
 804dfe4:	20003508 	.word	0x20003508

0804dfe8 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804dfe8:	8843      	ldrh	r3, [r0, #2]
 804dfea:	6882      	ldr	r2, [r0, #8]
{
 804dfec:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 804dfee:	1c5c      	adds	r4, r3, #1
 804dff0:	8044      	strh	r4, [r0, #2]
 804dff2:	0a0c      	lsrs	r4, r1, #8
 804dff4:	54d4      	strb	r4, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804dff6:	8842      	ldrh	r2, [r0, #2]
 804dff8:	88c3      	ldrh	r3, [r0, #6]
 804dffa:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804dffc:	bf04      	itt	eq
 804dffe:	2300      	moveq	r3, #0
 804e000:	8043      	strheq	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 804e002:	8843      	ldrh	r3, [r0, #2]
 804e004:	6882      	ldr	r2, [r0, #8]
 804e006:	1c5c      	adds	r4, r3, #1
 804e008:	8044      	strh	r4, [r0, #2]
 804e00a:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 804e00c:	88c3      	ldrh	r3, [r0, #6]
 804e00e:	8842      	ldrh	r2, [r0, #2]
 804e010:	429a      	cmp	r2, r3
  {
    queue->queue_write_idx=0;
 804e012:	bf04      	itt	eq
 804e014:	2300      	moveq	r3, #0
 804e016:	8043      	strheq	r3, [r0, #2]
  }
}
 804e018:	bd10      	pop	{r4, pc}

0804e01a <circular_queue_init>:
  queue->queue_read_idx=0;
 804e01a:	2300      	movs	r3, #0
 804e01c:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 804e01e:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 804e020:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 804e022:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 804e024:	7303      	strb	r3, [r0, #12]
}
 804e026:	4770      	bx	lr

0804e028 <circular_queue_add>:
{
 804e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804e02a:	8803      	ldrh	r3, [r0, #0]
{
 804e02c:	4615      	mov	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 804e02e:	8842      	ldrh	r2, [r0, #2]
 804e030:	429a      	cmp	r2, r3
{
 804e032:	460e      	mov	r6, r1
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 804e034:	bf24      	itt	cs
 804e036:	88c1      	ldrhcs	r1, [r0, #6]
 804e038:	185b      	addcs	r3, r3, r1
  if ( queue->queue_full==1)
 804e03a:	7b01      	ldrb	r1, [r0, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804e03c:	1a9b      	subs	r3, r3, r2
    free_size=0;
 804e03e:	2901      	cmp	r1, #1
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 804e040:	b21b      	sxth	r3, r3
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e042:	f105 0101 	add.w	r1, r5, #1
    free_size=0;
 804e046:	bf08      	it	eq
 804e048:	2300      	moveq	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e04a:	4299      	cmp	r1, r3
{
 804e04c:	4604      	mov	r4, r0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e04e:	da2c      	bge.n	804e0aa <circular_queue_add+0x82>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 804e050:	88c1      	ldrh	r1, [r0, #6]
 804e052:	18a8      	adds	r0, r5, r2
 804e054:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 804e056:	4288      	cmp	r0, r1
 804e058:	db02      	blt.n	804e060 <circular_queue_add+0x38>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 804e05a:	3902      	subs	r1, #2
 804e05c:	428a      	cmp	r2, r1
 804e05e:	db24      	blt.n	804e0aa <circular_queue_add+0x82>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804e060:	4629      	mov	r1, r5
 804e062:	4620      	mov	r0, r4
 804e064:	f7ff ffc0 	bl	804dfe8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 804e068:	8863      	ldrh	r3, [r4, #2]
 804e06a:	1e5a      	subs	r2, r3, #1
 804e06c:	68a3      	ldr	r3, [r4, #8]
 804e06e:	4413      	add	r3, r2
 804e070:	1972      	adds	r2, r6, r5
  while(size--)
 804e072:	42b2      	cmp	r2, r6
 804e074:	d114      	bne.n	804e0a0 <circular_queue_add+0x78>
    queue->queue_write_idx+=buff_size;
 804e076:	8862      	ldrh	r2, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 804e078:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 804e07a:	4415      	add	r5, r2
 804e07c:	b2ad      	uxth	r5, r5
    if (queue->queue_write_idx==queue->queue_size)
 804e07e:	42ab      	cmp	r3, r5
        queue->queue_write_idx=0;
 804e080:	bf08      	it	eq
 804e082:	2300      	moveq	r3, #0
    queue->queue_write_idx+=buff_size;
 804e084:	8065      	strh	r5, [r4, #2]
        queue->queue_write_idx=0;
 804e086:	bf08      	it	eq
 804e088:	8063      	strheq	r3, [r4, #2]
    queue->queue_nb_element++; 
 804e08a:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e08c:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 804e08e:	3301      	adds	r3, #1
 804e090:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e092:	8823      	ldrh	r3, [r4, #0]
 804e094:	429a      	cmp	r2, r3
      queue->queue_full=1;
 804e096:	bf04      	itt	eq
 804e098:	2301      	moveq	r3, #1
 804e09a:	7323      	strbeq	r3, [r4, #12]
    status=0;
 804e09c:	2000      	movs	r0, #0
}
 804e09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 804e0a0:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e0a4:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e0a8:	e7e3      	b.n	804e072 <circular_queue_add+0x4a>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 804e0aa:	1ce9      	adds	r1, r5, #3
 804e0ac:	428b      	cmp	r3, r1
 804e0ae:	dd31      	ble.n	804e114 <circular_queue_add+0xec>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 804e0b0:	88e7      	ldrh	r7, [r4, #6]
 804e0b2:	3f02      	subs	r7, #2
 804e0b4:	1abf      	subs	r7, r7, r2
 804e0b6:	b2bf      	uxth	r7, r7
    add_elementSize_and_inc_writeIdx(queue,top_size);
 804e0b8:	4639      	mov	r1, r7
 804e0ba:	4620      	mov	r0, r4
 804e0bc:	f7ff ff94 	bl	804dfe8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 804e0c0:	8863      	ldrh	r3, [r4, #2]
 804e0c2:	1e5a      	subs	r2, r3, #1
 804e0c4:	68a3      	ldr	r3, [r4, #8]
 804e0c6:	4413      	add	r3, r2
 804e0c8:	19f2      	adds	r2, r6, r7
  while(size--)
 804e0ca:	4296      	cmp	r6, r2
 804e0cc:	d118      	bne.n	804e100 <circular_queue_add+0xd8>
    buff_size-=top_size;
 804e0ce:	1bed      	subs	r5, r5, r7
    queue->queue_write_idx=0;
 804e0d0:	2300      	movs	r3, #0
    buff_size-=top_size;
 804e0d2:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 804e0d4:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 804e0d6:	4629      	mov	r1, r5
 804e0d8:	4620      	mov	r0, r4
 804e0da:	f7ff ff85 	bl	804dfe8 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 804e0de:	8863      	ldrh	r3, [r4, #2]
 804e0e0:	1e5a      	subs	r2, r3, #1
 804e0e2:	68a3      	ldr	r3, [r4, #8]
 804e0e4:	4413      	add	r3, r2
 804e0e6:	1972      	adds	r2, r6, r5
  while(size--)
 804e0e8:	42b2      	cmp	r2, r6
 804e0ea:	d10e      	bne.n	804e10a <circular_queue_add+0xe2>
    queue->queue_nb_element+=2;
 804e0ec:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 804e0ee:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element+=2;
 804e0f0:	3302      	adds	r3, #2
    queue->queue_write_idx+=buff_size;
 804e0f2:	4415      	add	r5, r2
    queue->queue_nb_element+=2;
 804e0f4:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e0f6:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 804e0f8:	b2ad      	uxth	r5, r5
 804e0fa:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 804e0fc:	42ab      	cmp	r3, r5
 804e0fe:	e7ca      	b.n	804e096 <circular_queue_add+0x6e>
    *out++= *in++;
 804e100:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e104:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e108:	e7df      	b.n	804e0ca <circular_queue_add+0xa2>
 804e10a:	f816 1b01 	ldrb.w	r1, [r6], #1
 804e10e:	f803 1f01 	strb.w	r1, [r3, #1]!
 804e112:	e7e9      	b.n	804e0e8 <circular_queue_add+0xc0>
    status=-1;
 804e114:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e118:	e7c1      	b.n	804e09e <circular_queue_add+0x76>

0804e11a <circular_queue_get>:
  if (queue->queue_nb_element==0)
 804e11a:	8883      	ldrh	r3, [r0, #4]
{
 804e11c:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804e11e:	b1ab      	cbz	r3, 804e14c <circular_queue_get+0x32>
    uint16_t read_idx=queue->queue_read_idx;
 804e120:	8805      	ldrh	r5, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804e122:	6884      	ldr	r4, [r0, #8]
 804e124:	1c6b      	adds	r3, r5, #1
 804e126:	5d66      	ldrb	r6, [r4, r5]
    if (read_idx==queue->queue_size)
 804e128:	88c5      	ldrh	r5, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 804e12a:	b29b      	uxth	r3, r3
      read_idx=0;
 804e12c:	429d      	cmp	r5, r3
 804e12e:	bf08      	it	eq
 804e130:	2300      	moveq	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804e132:	1c58      	adds	r0, r3, #1
 804e134:	b280      	uxth	r0, r0
 804e136:	5ce3      	ldrb	r3, [r4, r3]
      read_idx=0;
 804e138:	4285      	cmp	r5, r0
 804e13a:	bf08      	it	eq
 804e13c:	2000      	moveq	r0, #0
    *buff= queue->queue_buff+read_idx;
 804e13e:	4420      	add	r0, r4
    size|=(uint16_t) queue->queue_buff[read_idx++];
 804e140:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *buff= queue->queue_buff+read_idx;
 804e144:	6008      	str	r0, [r1, #0]
    * buff_size=size;
 804e146:	8013      	strh	r3, [r2, #0]
    status=0;
 804e148:	2000      	movs	r0, #0
}
 804e14a:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 804e14c:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e150:	e7fb      	b.n	804e14a <circular_queue_get+0x30>

0804e152 <circular_queue_remove>:
  if (queue->queue_nb_element==0)
 804e152:	8882      	ldrh	r2, [r0, #4]
{
 804e154:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 804e156:	b322      	cbz	r2, 804e1a2 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e158:	8803      	ldrh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 804e15a:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e15c:	6886      	ldr	r6, [r0, #8]
 804e15e:	1c59      	adds	r1, r3, #1
 804e160:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804e162:	42a1      	cmp	r1, r4
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e164:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804e166:	bf08      	it	eq
 804e168:	2100      	moveq	r1, #0
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e16a:	5cf3      	ldrb	r3, [r6, r3]
      queue->queue_read_idx=0;
 804e16c:	bf08      	it	eq
 804e16e:	8001      	strheq	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e170:	8805      	ldrh	r5, [r0, #0]
 804e172:	1c69      	adds	r1, r5, #1
 804e174:	b289      	uxth	r1, r1
    if (queue->queue_read_idx==queue->queue_size)
 804e176:	428c      	cmp	r4, r1
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e178:	8001      	strh	r1, [r0, #0]
      queue->queue_read_idx=0;
 804e17a:	bf08      	it	eq
 804e17c:	2100      	moveq	r1, #0
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e17e:	5d75      	ldrb	r5, [r6, r5]
      queue->queue_read_idx=0;
 804e180:	bf08      	it	eq
 804e182:	8001      	strheq	r1, [r0, #0]
    queue->queue_read_idx+=size;
 804e184:	8801      	ldrh	r1, [r0, #0]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 804e186:	021b      	lsls	r3, r3, #8
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 804e188:	432b      	orrs	r3, r5
    queue->queue_read_idx+=size;
 804e18a:	440b      	add	r3, r1
 804e18c:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 804e18e:	429c      	cmp	r4, r3
        queue->queue_read_idx=0;
 804e190:	bf08      	it	eq
 804e192:	2300      	moveq	r3, #0
 804e194:	8003      	strh	r3, [r0, #0]
    queue->queue_nb_element--;
 804e196:	3a01      	subs	r2, #1
    queue->queue_full=0;
 804e198:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 804e19a:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 804e19c:	7303      	strb	r3, [r0, #12]
    status=0;
 804e19e:	4618      	mov	r0, r3
}
 804e1a0:	bd70      	pop	{r4, r5, r6, pc}
      status=-1;
 804e1a2:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 804e1a6:	e7fb      	b.n	804e1a0 <circular_queue_remove+0x4e>

0804e1a8 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 804e1a8:	8880      	ldrh	r0, [r0, #4]
 804e1aa:	fab0 f080 	clz	r0, r0
 804e1ae:	0940      	lsrs	r0, r0, #5
}
 804e1b0:	4240      	negs	r0, r0
 804e1b2:	4770      	bx	lr

0804e1b4 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 804e1b4:	b082      	sub	sp, #8
 804e1b6:	b082      	sub	sp, #8
 804e1b8:	f10d 0c08 	add.w	ip, sp, #8
 804e1bc:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 804e1c0:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e1c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804e1c6:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 804e1c8:	4413      	add	r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e1ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804e1ce:	440a      	add	r2, r1
 804e1d0:	b292      	uxth	r2, r2
 804e1d2:	b211      	sxth	r1, r2
    if( c.SubSeconds >= 1000 )
 804e1d4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 804e1d8:	bfa2      	ittt	ge
 804e1da:	f5a2 727a 	subge.w	r2, r2, #1000	; 0x3e8
        c.Seconds++;
 804e1de:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 804e1e0:	b211      	sxthge	r1, r2
    }
    return c;
 804e1e2:	6003      	str	r3, [r0, #0]
 804e1e4:	8081      	strh	r1, [r0, #4]
}
 804e1e6:	b002      	add	sp, #8
 804e1e8:	b002      	add	sp, #8
 804e1ea:	4770      	bx	lr

0804e1ec <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 804e1ec:	b082      	sub	sp, #8
 804e1ee:	b082      	sub	sp, #8
 804e1f0:	f10d 0c08 	add.w	ip, sp, #8
 804e1f4:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 804e1f8:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e1fa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
{
 804e1fe:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 804e200:	1ad3      	subs	r3, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e202:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 804e206:	1a52      	subs	r2, r2, r1
 804e208:	b292      	uxth	r2, r2
 804e20a:	b211      	sxth	r1, r2
    if( c.SubSeconds < 0 )
 804e20c:	2900      	cmp	r1, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 804e20e:	bfbe      	ittt	lt
 804e210:	f502 727a 	addlt.w	r2, r2, #1000	; 0x3e8
        c.Seconds--;
 804e214:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
 804e218:	b211      	sxthlt	r1, r2
    }
    return c;
 804e21a:	6003      	str	r3, [r0, #0]
 804e21c:	8081      	strh	r1, [r0, #4]
}
 804e21e:	b002      	add	sp, #8
 804e220:	b002      	add	sp, #8
 804e222:	4770      	bx	lr

0804e224 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 804e224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804e226:	466b      	mov	r3, sp
 804e228:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e22c:	a804      	add	r0, sp, #16
 804e22e:	2300      	movs	r3, #0
 804e230:	f820 3d04 	strh.w	r3, [r0, #-4]!
 804e234:	9302      	str	r3, [sp, #8]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e236:	f000 fed3 	bl	804efe0 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 804e23a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e23c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e240:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 804e242:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 804e244:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 804e248:	1a5b      	subs	r3, r3, r1
 804e24a:	b29b      	uxth	r3, r3
 804e24c:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 804e24e:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 804e250:	bfbe      	ittt	lt
 804e252:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
 804e256:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
 804e25a:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 804e25c:	f000 fed2 	bl	804f004 <HW_RTC_BKUPWrite>
}
 804e260:	b005      	add	sp, #20
 804e262:	f85d fb04 	ldr.w	pc, [sp], #4

0804e266 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 804e266:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804e268:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e26a:	a804      	add	r0, sp, #16
 804e26c:	2300      	movs	r3, #0
 804e26e:	f820 3d0c 	strh.w	r3, [r0, #-12]!
 804e272:	9300      	str	r3, [sp, #0]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e274:	f000 feb4 	bl	804efe0 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804e278:	a903      	add	r1, sp, #12
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e27a:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 804e27c:	a802      	add	r0, sp, #8
 804e27e:	f000 fed3 	bl	804f028 <HW_RTC_BKUPRead>
    c.Seconds = a.Seconds + b.Seconds;
 804e282:	9b00      	ldr	r3, [sp, #0]
 804e284:	9a02      	ldr	r2, [sp, #8]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e286:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c.Seconds = a.Seconds + b.Seconds;
 804e28a:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 804e28c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 804e290:	440b      	add	r3, r1
 804e292:	b29b      	uxth	r3, r3
 804e294:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 804e296:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 804e29a:	bfa2      	ittt	ge
 804e29c:	f5a3 737a 	subge.w	r3, r3, #1000	; 0x3e8
        c.Seconds++;
 804e2a0:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 804e2a2:	b219      	sxthge	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 804e2a4:	4620      	mov	r0, r4
    return sysTime;
 804e2a6:	6022      	str	r2, [r4, #0]
 804e2a8:	80a1      	strh	r1, [r4, #4]
}
 804e2aa:	b004      	add	sp, #16
 804e2ac:	bd10      	pop	{r4, pc}

0804e2ae <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 804e2ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e2b0:	2300      	movs	r3, #0
{
 804e2b2:	4604      	mov	r4, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e2b4:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 804e2b6:	9300      	str	r3, [sp, #0]
 804e2b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 804e2bc:	f000 fe90 	bl	804efe0 <HW_RTC_GetCalendarTime>
 804e2c0:	466d      	mov	r5, sp
 804e2c2:	9000      	str	r0, [sp, #0]
    
    return calendarTime;
 804e2c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 804e2c8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 804e2cc:	4620      	mov	r0, r4
 804e2ce:	b003      	add	sp, #12
 804e2d0:	bd30      	pop	{r4, r5, pc}

0804e2d2 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 804e2d2:	b570      	push	{r4, r5, r6, lr}
 804e2d4:	4604      	mov	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804e2d6:	f000 fd11 	bl	804ecfc <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 804e2da:	2301      	movs	r3, #1
 804e2dc:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 804e2de:	4605      	mov	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 804e2e0:	6826      	ldr	r6, [r4, #0]
 804e2e2:	f000 fd21 	bl	804ed28 <HW_RTC_GetTimerElapsedTime>
 804e2e6:	4428      	add	r0, r5
 804e2e8:	4286      	cmp	r6, r0
 804e2ea:	d203      	bcs.n	804e2f4 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 804e2ec:	f000 fd1c 	bl	804ed28 <HW_RTC_GetTimerElapsedTime>
 804e2f0:	4428      	add	r0, r5
 804e2f2:	6020      	str	r0, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 804e2f4:	6820      	ldr	r0, [r4, #0]
}
 804e2f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_RTC_SetAlarm( obj->Timestamp );
 804e2fa:	f000 bd41 	b.w	804ed80 <HW_RTC_SetAlarm>
	...

0804e300 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 804e300:	4b04      	ldr	r3, [pc, #16]	; (804e314 <TimerInsertNewHeadTimer+0x14>)
 804e302:	681a      	ldr	r2, [r3, #0]

  if( cur != NULL )
 804e304:	b10a      	cbz	r2, 804e30a <TimerInsertNewHeadTimer+0xa>
  {
    cur->IsNext2Expire = false;
 804e306:	2100      	movs	r1, #0
 804e308:	7251      	strb	r1, [r2, #9]
  }

  obj->Next = cur;
 804e30a:	6142      	str	r2, [r0, #20]
  TimerListHead = obj;
 804e30c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 804e30e:	f7ff bfe0 	b.w	804e2d2 <TimerSetTimeout>
 804e312:	bf00      	nop
 804e314:	20003510 	.word	0x20003510

0804e318 <TimerInit>:
  obj->Timestamp = 0;
 804e318:	2300      	movs	r3, #0
  obj->ReloadValue = 0;
 804e31a:	e9c0 3300 	strd	r3, r3, [r0]
  obj->IsStarted = false;
 804e31e:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 804e320:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 804e322:	e9c0 1303 	strd	r1, r3, [r0, #12]
  obj->Next = NULL;
 804e326:	6143      	str	r3, [r0, #20]
}
 804e328:	4770      	bx	lr
	...

0804e32c <TimerStart>:
{
 804e32c:	b570      	push	{r4, r5, r6, lr}
 804e32e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e330:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e334:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 804e336:	b170      	cbz	r0, 804e356 <TimerStart+0x2a>
  TimerEvent_t* cur = TimerListHead;
 804e338:	4e16      	ldr	r6, [pc, #88]	; (804e394 <TimerStart+0x68>)
 804e33a:	6831      	ldr	r1, [r6, #0]
 804e33c:	460b      	mov	r3, r1
  while( cur != NULL )
 804e33e:	b96b      	cbnz	r3, 804e35c <TimerStart+0x30>
  obj->Timestamp = obj->ReloadValue;
 804e340:	6862      	ldr	r2, [r4, #4]
 804e342:	6022      	str	r2, [r4, #0]
  obj->IsStarted = true;
 804e344:	2201      	movs	r2, #1
 804e346:	7222      	strb	r2, [r4, #8]
  obj->IsNext2Expire = false;
 804e348:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 804e34a:	b959      	cbnz	r1, 804e364 <TimerStart+0x38>
    HW_RTC_SetTimerContext( );
 804e34c:	f000 fe00 	bl	804ef50 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 804e350:	4620      	mov	r0, r4
 804e352:	f7ff ffd5 	bl	804e300 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e356:	f385 8810 	msr	PRIMASK, r5
}
 804e35a:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 804e35c:	429c      	cmp	r4, r3
 804e35e:	d0fa      	beq.n	804e356 <TimerStart+0x2a>
    cur = cur->Next;
 804e360:	695b      	ldr	r3, [r3, #20]
 804e362:	e7ec      	b.n	804e33e <TimerStart+0x12>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 804e364:	f000 fce0 	bl	804ed28 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 804e368:	6823      	ldr	r3, [r4, #0]
 804e36a:	4418      	add	r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 804e36c:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 804e36e:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 804e370:	681a      	ldr	r2, [r3, #0]
 804e372:	4290      	cmp	r0, r2
 804e374:	d3ec      	bcc.n	804e350 <TimerStart+0x24>
  TimerEvent_t* next = TimerListHead->Next;
 804e376:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 804e378:	6959      	ldr	r1, [r3, #20]
 804e37a:	b911      	cbnz	r1, 804e382 <TimerStart+0x56>
  cur->Next = obj;
 804e37c:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 804e37e:	6161      	str	r1, [r4, #20]
 804e380:	e7e9      	b.n	804e356 <TimerStart+0x2a>
    if( obj->Timestamp  > next->Timestamp )
 804e382:	6811      	ldr	r1, [r2, #0]
 804e384:	4288      	cmp	r0, r1
 804e386:	d902      	bls.n	804e38e <TimerStart+0x62>
        next = next->Next;
 804e388:	4613      	mov	r3, r2
 804e38a:	6952      	ldr	r2, [r2, #20]
 804e38c:	e7f4      	b.n	804e378 <TimerStart+0x4c>
        cur->Next = obj;
 804e38e:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 804e390:	6162      	str	r2, [r4, #20]
 804e392:	e7e0      	b.n	804e356 <TimerStart+0x2a>
 804e394:	20003510 	.word	0x20003510

0804e398 <TimerIrqHandler>:
{
 804e398:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 804e39a:	f000 fe1b 	bl	804efd4 <HW_RTC_GetTimerContext>
  if ( TimerListHead != NULL )
 804e39e:	4c1b      	ldr	r4, [pc, #108]	; (804e40c <TimerIrqHandler+0x74>)
  uint32_t old =  HW_RTC_GetTimerContext( );
 804e3a0:	4605      	mov	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 804e3a2:	f000 fdd5 	bl	804ef50 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 804e3a6:	6822      	ldr	r2, [r4, #0]
 804e3a8:	b19a      	cbz	r2, 804e3d2 <TimerIrqHandler+0x3a>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 804e3aa:	1b40      	subs	r0, r0, r5
 804e3ac:	4613      	mov	r3, r2
        next->Timestamp = 0 ;
 804e3ae:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 804e3b0:	695b      	ldr	r3, [r3, #20]
 804e3b2:	b92b      	cbnz	r3, 804e3c0 <TimerIrqHandler+0x28>
    cur->IsStarted = false;
 804e3b4:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 804e3b6:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 804e3b8:	6951      	ldr	r1, [r2, #20]
 804e3ba:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 804e3bc:	b93b      	cbnz	r3, 804e3ce <TimerIrqHandler+0x36>
 804e3be:	e7fe      	b.n	804e3be <TimerIrqHandler+0x26>
      if (next->Timestamp > DeltaContext)
 804e3c0:	6819      	ldr	r1, [r3, #0]
 804e3c2:	4281      	cmp	r1, r0
        next->Timestamp -= DeltaContext;
 804e3c4:	bf86      	itte	hi
 804e3c6:	1a09      	subhi	r1, r1, r0
 804e3c8:	6019      	strhi	r1, [r3, #0]
        next->Timestamp = 0 ;
 804e3ca:	601d      	strls	r5, [r3, #0]
 804e3cc:	e7f0      	b.n	804e3b0 <TimerIrqHandler+0x18>
    exec_cb( cur->Callback, cur->Context );
 804e3ce:	6910      	ldr	r0, [r2, #16]
 804e3d0:	4798      	blx	r3
   cur->IsStarted = false;
 804e3d2:	2600      	movs	r6, #0
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804e3d4:	6823      	ldr	r3, [r4, #0]
 804e3d6:	b92b      	cbnz	r3, 804e3e4 <TimerIrqHandler+0x4c>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804e3d8:	6820      	ldr	r0, [r4, #0]
 804e3da:	b980      	cbnz	r0, 804e3fe <TimerIrqHandler+0x66>
}
 804e3dc:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 804e3de:	6918      	ldr	r0, [r3, #16]
 804e3e0:	4790      	blx	r2
 804e3e2:	e7f7      	b.n	804e3d4 <TimerIrqHandler+0x3c>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 804e3e4:	681d      	ldr	r5, [r3, #0]
 804e3e6:	f000 fc9f 	bl	804ed28 <HW_RTC_GetTimerElapsedTime>
 804e3ea:	4285      	cmp	r5, r0
 804e3ec:	d2f4      	bcs.n	804e3d8 <TimerIrqHandler+0x40>
   cur = TimerListHead;
 804e3ee:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 804e3f0:	695a      	ldr	r2, [r3, #20]
 804e3f2:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback, cur->Context );
 804e3f4:	68da      	ldr	r2, [r3, #12]
   cur->IsStarted = false;
 804e3f6:	721e      	strb	r6, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 804e3f8:	2a00      	cmp	r2, #0
 804e3fa:	d1f0      	bne.n	804e3de <TimerIrqHandler+0x46>
 804e3fc:	e7fe      	b.n	804e3fc <TimerIrqHandler+0x64>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804e3fe:	7a43      	ldrb	r3, [r0, #9]
 804e400:	2b00      	cmp	r3, #0
 804e402:	d1eb      	bne.n	804e3dc <TimerIrqHandler+0x44>
}
 804e404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerSetTimeout( TimerListHead );
 804e408:	f7ff bf63 	b.w	804e2d2 <TimerSetTimeout>
 804e40c:	20003510 	.word	0x20003510

0804e410 <TimerStop>:
{
 804e410:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e412:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e416:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 804e418:	4d10      	ldr	r5, [pc, #64]	; (804e45c <TimerStop+0x4c>)
 804e41a:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804e41c:	b103      	cbz	r3, 804e420 <TimerStop+0x10>
 804e41e:	b910      	cbnz	r0, 804e426 <TimerStop+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e420:	f386 8810 	msr	PRIMASK, r6
}  
 804e424:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 804e426:	2200      	movs	r2, #0
  if( TimerListHead == obj ) // Stop the Head                  
 804e428:	4283      	cmp	r3, r0
  obj->IsStarted = false;
 804e42a:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 804e42c:	d10e      	bne.n	804e44c <TimerStop+0x3c>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 804e42e:	7a59      	ldrb	r1, [r3, #9]
 804e430:	695c      	ldr	r4, [r3, #20]
 804e432:	b141      	cbz	r1, 804e446 <TimerStop+0x36>
      TimerListHead->IsNext2Expire = false;
 804e434:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 804e436:	b124      	cbz	r4, 804e442 <TimerStop+0x32>
        TimerSetTimeout( TimerListHead );
 804e438:	4620      	mov	r0, r4
        TimerListHead = TimerListHead->Next;
 804e43a:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 804e43c:	f7ff ff49 	bl	804e2d2 <TimerSetTimeout>
 804e440:	e7ee      	b.n	804e420 <TimerStop+0x10>
        HW_RTC_StopAlarm( );
 804e442:	f000 fc87 	bl	804ed54 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 804e446:	602c      	str	r4, [r5, #0]
 804e448:	e7ea      	b.n	804e420 <TimerStop+0x10>
 804e44a:	4613      	mov	r3, r2
        cur = cur->Next;
 804e44c:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 804e44e:	2a00      	cmp	r2, #0
 804e450:	d0e6      	beq.n	804e420 <TimerStop+0x10>
      if( cur == obj )
 804e452:	4290      	cmp	r0, r2
 804e454:	d1f9      	bne.n	804e44a <TimerStop+0x3a>
        if( cur->Next != NULL )
 804e456:	6942      	ldr	r2, [r0, #20]
          prev->Next = cur;
 804e458:	615a      	str	r2, [r3, #20]
 804e45a:	e7e1      	b.n	804e420 <TimerStop+0x10>
 804e45c:	20003510 	.word	0x20003510

0804e460 <TimerSetValue>:
{
 804e460:	b538      	push	{r3, r4, r5, lr}
 804e462:	4605      	mov	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 804e464:	4608      	mov	r0, r1
 804e466:	f000 fc4b 	bl	804ed00 <HW_RTC_ms2Tick>
 804e46a:	4604      	mov	r4, r0
  TimerStop( obj );
 804e46c:	4628      	mov	r0, r5
 804e46e:	f7ff ffcf 	bl	804e410 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 804e472:	f000 fc43 	bl	804ecfc <HW_RTC_GetMinimumTimeout>
 804e476:	42a0      	cmp	r0, r4
 804e478:	bf38      	it	cc
 804e47a:	4620      	movcc	r0, r4
  obj->ReloadValue = ticks;
 804e47c:	e9c5 0000 	strd	r0, r0, [r5]
}
 804e480:	bd38      	pop	{r3, r4, r5, pc}

0804e482 <TimerGetCurrentTime>:
{
 804e482:	b508      	push	{r3, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 804e484:	f000 fc5e 	bl	804ed44 <HW_RTC_GetTimerValue>
}
 804e488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return  HW_RTC_Tick2ms(now);
 804e48c:	f000 bc41 	b.w	804ed12 <HW_RTC_Tick2ms>

0804e490 <TimerGetElapsedTime>:
{
 804e490:	b538      	push	{r3, r4, r5, lr}
  if ( past == 0 )
 804e492:	4605      	mov	r5, r0
 804e494:	b150      	cbz	r0, 804e4ac <TimerGetElapsedTime+0x1c>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 804e496:	f000 fc55 	bl	804ed44 <HW_RTC_GetTimerValue>
 804e49a:	4604      	mov	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 804e49c:	4628      	mov	r0, r5
 804e49e:	f000 fc2f 	bl	804ed00 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804e4a2:	1a20      	subs	r0, r4, r0
}
 804e4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 804e4a8:	f000 bc33 	b.w	804ed12 <HW_RTC_Tick2ms>
}
 804e4ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0804e4b0 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 804e4b0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e4b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e4b6:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 804e4b8:	480f      	ldr	r0, [pc, #60]	; (804e4f8 <Trace_TxCpltCallback+0x48>)
 804e4ba:	f7ff fe4a 	bl	804e152 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 804e4be:	480e      	ldr	r0, [pc, #56]	; (804e4f8 <Trace_TxCpltCallback+0x48>)
 804e4c0:	f7ff fe72 	bl	804e1a8 <circular_queue_sense>

  if ( status == 0) 
 804e4c4:	b970      	cbnz	r0, 804e4e4 <Trace_TxCpltCallback+0x34>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804e4c6:	f10d 0202 	add.w	r2, sp, #2
 804e4ca:	a901      	add	r1, sp, #4
 804e4cc:	480a      	ldr	r0, [pc, #40]	; (804e4f8 <Trace_TxCpltCallback+0x48>)
 804e4ce:	f7ff fe24 	bl	804e11a <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e4d2:	f384 8810 	msr	PRIMASK, r4
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 804e4d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 804e4da:	9801      	ldr	r0, [sp, #4]
 804e4dc:	f001 feea 	bl	80502b4 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 804e4e0:	b002      	add	sp, #8
 804e4e2:	bd10      	pop	{r4, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 804e4e4:	2100      	movs	r1, #0
 804e4e6:	2020      	movs	r0, #32
 804e4e8:	f7ff fd56 	bl	804df98 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 804e4ec:	4b03      	ldr	r3, [pc, #12]	; (804e4fc <Trace_TxCpltCallback+0x4c>)
 804e4ee:	2201      	movs	r2, #1
 804e4f0:	701a      	strb	r2, [r3, #0]
 804e4f2:	f384 8810 	msr	PRIMASK, r4
}
 804e4f6:	e7f3      	b.n	804e4e0 <Trace_TxCpltCallback+0x30>
 804e4f8:	20003514 	.word	0x20003514
 804e4fc:	200011a4 	.word	0x200011a4

0804e500 <TraceInit>:
{
 804e500:	b508      	push	{r3, lr}
  OutputInit(Trace_TxCpltCallback);
 804e502:	4806      	ldr	r0, [pc, #24]	; (804e51c <TraceInit+0x1c>)
 804e504:	f001 feba 	bl	805027c <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804e508:	4805      	ldr	r0, [pc, #20]	; (804e520 <TraceInit+0x20>)
 804e50a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804e50e:	f100 0110 	add.w	r1, r0, #16
}
 804e512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 804e516:	f7ff bd80 	b.w	804e01a <circular_queue_init>
 804e51a:	bf00      	nop
 804e51c:	0804e4b1 	.word	0x0804e4b1
 804e520:	20003514 	.word	0x20003514

0804e524 <TraceSend>:
{
 804e524:	b40f      	push	{r0, r1, r2, r3}
 804e526:	b5f0      	push	{r4, r5, r6, r7, lr}
 804e528:	b0c5      	sub	sp, #276	; 0x114
 804e52a:	ab4a      	add	r3, sp, #296	; 0x128
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804e52c:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 804e530:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( vaArgs, strFormat);
 804e534:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 804e536:	a804      	add	r0, sp, #16
 804e538:	f002 fb62 	bl	8050c00 <vsniprintf>
 804e53c:	f8ad 0006 	strh.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e540:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e544:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 804e546:	4814      	ldr	r0, [pc, #80]	; (804e598 <TraceSend+0x74>)
 804e548:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 804e54c:	a904      	add	r1, sp, #16
 804e54e:	f7ff fd6b 	bl	804e028 <circular_queue_add>
  if ((status==0 ) && (TracePeripheralReady==SET))
 804e552:	4605      	mov	r5, r0
 804e554:	b9e0      	cbnz	r0, 804e590 <TraceSend+0x6c>
 804e556:	4f11      	ldr	r7, [pc, #68]	; (804e59c <TraceSend+0x78>)
 804e558:	783c      	ldrb	r4, [r7, #0]
 804e55a:	b2e4      	uxtb	r4, r4
 804e55c:	2c01      	cmp	r4, #1
 804e55e:	d117      	bne.n	804e590 <TraceSend+0x6c>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 804e560:	f10d 0206 	add.w	r2, sp, #6
 804e564:	a903      	add	r1, sp, #12
 804e566:	480c      	ldr	r0, [pc, #48]	; (804e598 <TraceSend+0x74>)
 804e568:	f7ff fdd7 	bl	804e11a <circular_queue_get>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804e56c:	4621      	mov	r1, r4
 804e56e:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 804e570:	703d      	strb	r5, [r7, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 804e572:	f7ff fd11 	bl	804df98 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e576:	f386 8810 	msr	PRIMASK, r6
    OutputTrace(buffer, bufSize);
 804e57a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 804e57e:	9803      	ldr	r0, [sp, #12]
 804e580:	f001 fe98 	bl	80502b4 <vcom_Trace>
}
 804e584:	4628      	mov	r0, r5
 804e586:	b045      	add	sp, #276	; 0x114
 804e588:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804e58c:	b004      	add	sp, #16
 804e58e:	4770      	bx	lr
 804e590:	f386 8810 	msr	PRIMASK, r6
  return status;
 804e594:	e7f6      	b.n	804e584 <TraceSend+0x60>
 804e596:	bf00      	nop
 804e598:	20003514 	.word	0x20003514
 804e59c:	200011a4 	.word	0x200011a4

0804e5a0 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 804e5a0:	4b07      	ldr	r3, [pc, #28]	; (804e5c0 <rand1+0x20>)
 804e5a2:	4908      	ldr	r1, [pc, #32]	; (804e5c4 <rand1+0x24>)
 804e5a4:	6818      	ldr	r0, [r3, #0]
 804e5a6:	f243 0239 	movw	r2, #12345	; 0x3039
 804e5aa:	fb01 2000 	mla	r0, r1, r0, r2
 804e5ae:	6018      	str	r0, [r3, #0]
 804e5b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804e5b4:	fbb0 f3f3 	udiv	r3, r0, r3
 804e5b8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 804e5bc:	1ac0      	subs	r0, r0, r3
 804e5be:	4770      	bx	lr
 804e5c0:	200011a8 	.word	0x200011a8
 804e5c4:	41c64e6d 	.word	0x41c64e6d

0804e5c8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 804e5c8:	4b01      	ldr	r3, [pc, #4]	; (804e5d0 <srand1+0x8>)
 804e5ca:	6018      	str	r0, [r3, #0]
}
 804e5cc:	4770      	bx	lr
 804e5ce:	bf00      	nop
 804e5d0:	200011a8 	.word	0x200011a8

0804e5d4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 804e5d4:	b538      	push	{r3, r4, r5, lr}
 804e5d6:	4605      	mov	r5, r0
 804e5d8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 804e5da:	f7ff ffe1 	bl	804e5a0 <rand1>
 804e5de:	1b61      	subs	r1, r4, r5
 804e5e0:	3101      	adds	r1, #1
 804e5e2:	fb90 f3f1 	sdiv	r3, r0, r1
 804e5e6:	fb03 0011 	mls	r0, r3, r1, r0
}
 804e5ea:	4428      	add	r0, r5
 804e5ec:	bd38      	pop	{r3, r4, r5, pc}

0804e5ee <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804e5ee:	3801      	subs	r0, #1
 804e5f0:	440a      	add	r2, r1
    while( size-- )
 804e5f2:	4291      	cmp	r1, r2
 804e5f4:	d100      	bne.n	804e5f8 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 804e5f6:	4770      	bx	lr
        *dst++ = *src++;
 804e5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e5fc:	f800 3f01 	strb.w	r3, [r0, #1]!
 804e600:	e7f7      	b.n	804e5f2 <memcpy1+0x4>

0804e602 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 804e602:	4410      	add	r0, r2
 804e604:	440a      	add	r2, r1
    dst = dst + ( size - 1 );
    while( size-- )
 804e606:	4291      	cmp	r1, r2
 804e608:	d100      	bne.n	804e60c <memcpyr+0xa>
    {
        *dst-- = *src++;
    }
}
 804e60a:	4770      	bx	lr
        *dst-- = *src++;
 804e60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e610:	f800 3d01 	strb.w	r3, [r0, #-1]!
 804e614:	e7f7      	b.n	804e606 <memcpyr+0x4>

0804e616 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 804e616:	4402      	add	r2, r0
    while( size-- )
 804e618:	4290      	cmp	r0, r2
 804e61a:	d100      	bne.n	804e61e <memset1+0x8>
    {
        *dst++ = value;
    }
}
 804e61c:	4770      	bx	lr
        *dst++ = value;
 804e61e:	f800 1b01 	strb.w	r1, [r0], #1
 804e622:	e7f9      	b.n	804e618 <memset1+0x2>

0804e624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804e624:	f8df d034 	ldr.w	sp, [pc, #52]	; 804e65c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 804e628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 804e62a:	e003      	b.n	804e634 <LoopCopyDataInit>

0804e62c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 804e62c:	4b0c      	ldr	r3, [pc, #48]	; (804e660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 804e62e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 804e630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 804e632:	3104      	adds	r1, #4

0804e634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 804e634:	480b      	ldr	r0, [pc, #44]	; (804e664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 804e636:	4b0c      	ldr	r3, [pc, #48]	; (804e668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 804e638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 804e63a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 804e63c:	d3f6      	bcc.n	804e62c <CopyDataInit>
  ldr  r2, =_sbss
 804e63e:	4a0b      	ldr	r2, [pc, #44]	; (804e66c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 804e640:	e002      	b.n	804e648 <LoopFillZerobss>

0804e642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 804e642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 804e644:	f842 3b04 	str.w	r3, [r2], #4

0804e648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 804e648:	4b09      	ldr	r3, [pc, #36]	; (804e670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 804e64a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 804e64c:	d3f9      	bcc.n	804e642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 804e64e:	f7f4 ff3d 	bl	80434cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804e652:	f002 f947 	bl	80508e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804e656:	f000 ff27 	bl	804f4a8 <main>
  bx  lr    
 804e65a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 804e65c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 804e660:	080532f8 	.word	0x080532f8
  ldr  r0, =_sdata
 804e664:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 804e668:	20001278 	.word	0x20001278
  ldr  r2, =_sbss
 804e66c:	20001278 	.word	0x20001278
  ldr  r3, = _ebss
 804e670:	200061dc 	.word	0x200061dc

0804e674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804e674:	e7fe      	b.n	804e674 <ADC_IRQHandler>

0804e676 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 804e676:	4770      	bx	lr

0804e678 <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 804e678:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 804e67a:	7803      	ldrb	r3, [r0, #0]
 804e67c:	2b30      	cmp	r3, #48	; 0x30
 804e67e:	d127      	bne.n	804e6d0 <Str2Int+0x58>
 804e680:	7843      	ldrb	r3, [r0, #1]
 804e682:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804e686:	2b58      	cmp	r3, #88	; 0x58
 804e688:	d122      	bne.n	804e6d0 <Str2Int+0x58>
 804e68a:	2400      	movs	r4, #0
 804e68c:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e68e:	5d43      	ldrb	r3, [r0, r5]
 804e690:	b193      	cbz	r3, 804e6b8 <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 804e692:	f023 0620 	bic.w	r6, r3, #32
 804e696:	3e41      	subs	r6, #65	; 0x41
 804e698:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 804e69c:	2e05      	cmp	r6, #5
 804e69e:	b2d7      	uxtb	r7, r2
 804e6a0:	d901      	bls.n	804e6a6 <Str2Int+0x2e>
 804e6a2:	2f09      	cmp	r7, #9
 804e6a4:	d808      	bhi.n	804e6b8 <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e6a6:	2f09      	cmp	r7, #9
 804e6a8:	ea4f 1404 	mov.w	r4, r4, lsl #4
 804e6ac:	d809      	bhi.n	804e6c2 <Str2Int+0x4a>
 804e6ae:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 804e6b0:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e6b2:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e6b4:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 804e6b6:	d1ea      	bne.n	804e68e <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 804e6b8:	5d43      	ldrb	r3, [r0, r5]
 804e6ba:	bb4b      	cbnz	r3, 804e710 <Str2Int+0x98>
    {
      *pIntNum = val;
 804e6bc:	600c      	str	r4, [r1, #0]
      res = 1U;
 804e6be:	2001      	movs	r0, #1
 804e6c0:	e027      	b.n	804e712 <Str2Int+0x9a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 804e6c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804e6c6:	2a05      	cmp	r2, #5
 804e6c8:	bf94      	ite	ls
 804e6ca:	3b37      	subls	r3, #55	; 0x37
 804e6cc:	3b57      	subhi	r3, #87	; 0x57
 804e6ce:	e7ef      	b.n	804e6b0 <Str2Int+0x38>
 804e6d0:	1e44      	subs	r4, r0, #1
 804e6d2:	f100 060a 	add.w	r6, r0, #10
 804e6d6:	2300      	movs	r3, #0
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804e6d8:	270a      	movs	r7, #10
      if (pInputStr[i] == '\0')
 804e6da:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 804e6de:	b90a      	cbnz	r2, 804e6e4 <Str2Int+0x6c>
        *pIntNum = val;
 804e6e0:	600b      	str	r3, [r1, #0]
        res = 1U;
 804e6e2:	e7ec      	b.n	804e6be <Str2Int+0x46>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 804e6e4:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 804e6e8:	2d4b      	cmp	r5, #75	; 0x4b
 804e6ea:	d103      	bne.n	804e6f4 <Str2Int+0x7c>
 804e6ec:	4284      	cmp	r4, r0
 804e6ee:	d007      	beq.n	804e700 <Str2Int+0x88>
        val = val << 10U;
 804e6f0:	029b      	lsls	r3, r3, #10
 804e6f2:	e7f5      	b.n	804e6e0 <Str2Int+0x68>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 804e6f4:	2d4d      	cmp	r5, #77	; 0x4d
 804e6f6:	d103      	bne.n	804e700 <Str2Int+0x88>
 804e6f8:	4284      	cmp	r4, r0
 804e6fa:	d009      	beq.n	804e710 <Str2Int+0x98>
        val = val << 20U;
 804e6fc:	051b      	lsls	r3, r3, #20
 804e6fe:	e7ef      	b.n	804e6e0 <Str2Int+0x68>
      else if (ISVALIDDEC(pInputStr[i]))
 804e700:	3a30      	subs	r2, #48	; 0x30
 804e702:	b2d5      	uxtb	r5, r2
 804e704:	2d09      	cmp	r5, #9
 804e706:	d803      	bhi.n	804e710 <Str2Int+0x98>
    while ((i < 11U) && (res != 1U))
 804e708:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 804e70a:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 804e70e:	d1e4      	bne.n	804e6da <Str2Int+0x62>
      res = 1U;
 804e710:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 804e712:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804e714 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 804e714:	b507      	push	{r0, r1, r2, lr}
 804e716:	ab02      	add	r3, sp, #8
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804e718:	2264      	movs	r2, #100	; 0x64
{
 804e71a:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 804e71e:	2101      	movs	r1, #1
 804e720:	4618      	mov	r0, r3
 804e722:	f001 ff6b 	bl	80505fc <COM_Transmit>
}
 804e726:	b003      	add	sp, #12
 804e728:	f85d fb04 	ldr.w	pc, [sp], #4

0804e72c <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}

void Error_Handler(void)
{
 804e72c:	b508      	push	{r3, lr}
	PRINTF("Erro Handler");
 804e72e:	4802      	ldr	r0, [pc, #8]	; (804e738 <Error_Handler+0xc>)
 804e730:	f7ff fef8 	bl	804e524 <TraceSend>
 804e734:	e7fe      	b.n	804e734 <Error_Handler+0x8>
 804e736:	bf00      	nop
 804e738:	08052d97 	.word	0x08052d97

0804e73c <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 804e73c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 804e73e:	f7f5 fd47 	bl	80441d0 <HAL_FLASH_Unlock>
 804e742:	b950      	cbnz	r0, 804e75a <FLASH_INT_If_Clear_Error+0x1e>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR);
 804e744:	4b06      	ldr	r3, [pc, #24]	; (804e760 <FLASH_INT_If_Clear_Error+0x24>)
 804e746:	22f0      	movs	r2, #240	; 0xf0
 804e748:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 804e74a:	f7f5 fd53 	bl	80441f4 <HAL_FLASH_Lock>
 804e74e:	b118      	cbz	r0, 804e758 <FLASH_INT_If_Clear_Error+0x1c>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 804e750:	4804      	ldr	r0, [pc, #16]	; (804e764 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804e752:	f002 f973 	bl	8050a3c <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 804e756:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 804e758:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 804e75a:	4803      	ldr	r0, [pc, #12]	; (804e768 <FLASH_INT_If_Clear_Error+0x2c>)
 804e75c:	e7f9      	b.n	804e752 <FLASH_INT_If_Clear_Error+0x16>
 804e75e:	bf00      	nop
 804e760:	40023c00 	.word	0x40023c00
 804e764:	08052da4 	.word	0x08052da4
 804e768:	08052dbd 	.word	0x08052dbd

0804e76c <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804e76c:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 804e770:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 804e772:	d203      	bcs.n	804e77c <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 804e774:	f002 f8da 	bl	805092c <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 804e778:	2000      	movs	r0, #0
}
 804e77a:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 804e77c:	2001      	movs	r0, #1
 804e77e:	e7fc      	b.n	804e77a <FLASH_If_Read+0xe>

0804e780 <FLASH_INT_If_Erase_Size>:
{
 804e780:	b5f0      	push	{r4, r5, r6, r7, lr}
 804e782:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 804e784:	2300      	movs	r3, #0
{
 804e786:	4605      	mov	r5, r0
 804e788:	460f      	mov	r7, r1
  uint32_t sector_error = 0U;
 804e78a:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 804e78c:	f7ff ffd6 	bl	804e73c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804e790:	4604      	mov	r4, r0
 804e792:	bb90      	cbnz	r0, 804e7fa <FLASH_INT_If_Erase_Size+0x7a>
    if (HAL_FLASH_Unlock() == HAL_OK)
 804e794:	f7f5 fd1c 	bl	80441d0 <HAL_FLASH_Unlock>
 804e798:	4604      	mov	r4, r0
 804e79a:	bba8      	cbnz	r0, 804e808 <FLASH_INT_If_Erase_Size+0x88>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 804e79c:	4b1b      	ldr	r3, [pc, #108]	; (804e80c <FLASH_INT_If_Erase_Size+0x8c>)
  uint32_t sector = 0;
 804e79e:	4606      	mov	r6, r0
 804e7a0:	4618      	mov	r0, r3
  while (Add >= FlashSectorsAddress[sector + 1])
 804e7a2:	1c72      	adds	r2, r6, #1
 804e7a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804e7a8:	428d      	cmp	r5, r1
 804e7aa:	d229      	bcs.n	804e800 <FLASH_INT_If_Erase_Size+0x80>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804e7ac:	3f01      	subs	r7, #1
 804e7ae:	443d      	add	r5, r7
  uint32_t sector = 0;
 804e7b0:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 804e7b2:	1c5a      	adds	r2, r3, #1
 804e7b4:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 804e7b8:	428d      	cmp	r5, r1
 804e7ba:	d223      	bcs.n	804e804 <FLASH_INT_If_Erase_Size+0x84>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 804e7bc:	f1c6 0501 	rsb	r5, r6, #1
 804e7c0:	441d      	add	r5, r3
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 804e7c2:	2300      	movs	r3, #0
 804e7c4:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e7c6:	4f12      	ldr	r7, [pc, #72]	; (804e810 <FLASH_INT_If_Erase_Size+0x90>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 804e7c8:	2302      	movs	r3, #2
 804e7ca:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e7cc:	2d02      	cmp	r5, #2
 804e7ce:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e7d0:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 804e7d2:	bf28      	it	cs
 804e7d4:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e7d6:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 804e7d8:	e9cd 6303 	strd	r6, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 804e7dc:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 804e7de:	441e      	add	r6, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 804e7e0:	f7f5 fdec 	bl	80443bc <HAL_FLASHEx_Erase>
 804e7e4:	b110      	cbz	r0, 804e7ec <FLASH_INT_If_Erase_Size+0x6c>
          HAL_FLASH_GetError();
 804e7e6:	f7f5 fd0f 	bl	8044208 <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 804e7ea:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e7ec:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 804e7f0:	603b      	str	r3, [r7, #0]
      } while (nb_sectors > 0);
 804e7f2:	2d00      	cmp	r5, #0
 804e7f4:	d1ea      	bne.n	804e7cc <FLASH_INT_If_Erase_Size+0x4c>
      HAL_FLASH_Lock();
 804e7f6:	f7f5 fcfd 	bl	80441f4 <HAL_FLASH_Lock>
}
 804e7fa:	4620      	mov	r0, r4
 804e7fc:	b007      	add	sp, #28
 804e7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    sector++;
 804e800:	4616      	mov	r6, r2
 804e802:	e7ce      	b.n	804e7a2 <FLASH_INT_If_Erase_Size+0x22>
 804e804:	4613      	mov	r3, r2
 804e806:	e7d4      	b.n	804e7b2 <FLASH_INT_If_Erase_Size+0x32>
      e_ret_status = HAL_ERROR;
 804e808:	2401      	movs	r4, #1
 804e80a:	e7f6      	b.n	804e7fa <FLASH_INT_If_Erase_Size+0x7a>
 804e80c:	200011ac 	.word	0x200011ac
 804e810:	40003000 	.word	0x40003000

0804e814 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 804e814:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804e818:	d201      	bcs.n	804e81e <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 804e81a:	f7ff bfb1 	b.w	804e780 <FLASH_INT_If_Erase_Size>
}
 804e81e:	2001      	movs	r0, #1
 804e820:	4770      	bx	lr

0804e822 <FLASH_INT_If_Write>:
{
 804e822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e826:	4605      	mov	r5, r0
 804e828:	460e      	mov	r6, r1
 804e82a:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 804e82c:	f7ff ff86 	bl	804e73c <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 804e830:	4604      	mov	r4, r0
 804e832:	b940      	cbnz	r0, 804e846 <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 804e834:	f7f5 fccc 	bl	80441d0 <HAL_FLASH_Unlock>
 804e838:	4604      	mov	r4, r0
 804e83a:	b9c8      	cbnz	r0, 804e870 <FLASH_INT_If_Write+0x4e>
 804e83c:	442f      	add	r7, r5
      for (i = 0U; i < uLength; i++)
 804e83e:	42bd      	cmp	r5, r7
 804e840:	d104      	bne.n	804e84c <FLASH_INT_If_Write+0x2a>
      HAL_FLASH_Lock();
 804e842:	f7f5 fcd7 	bl	80441f4 <HAL_FLASH_Lock>
}
 804e846:	4620      	mov	r0, r4
 804e848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 804e84c:	7832      	ldrb	r2, [r6, #0]
 804e84e:	2300      	movs	r3, #0
 804e850:	4629      	mov	r1, r5
 804e852:	2000      	movs	r0, #0
 804e854:	46b0      	mov	r8, r6
 804e856:	f7f5 fd07 	bl	8044268 <HAL_FLASH_Program>
 804e85a:	b938      	cbnz	r0, 804e86c <FLASH_INT_If_Write+0x4a>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 804e85c:	f815 3b01 	ldrb.w	r3, [r5], #1
 804e860:	f898 2000 	ldrb.w	r2, [r8]
 804e864:	429a      	cmp	r2, r3
 804e866:	f106 0601 	add.w	r6, r6, #1
 804e86a:	d0e8      	beq.n	804e83e <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 804e86c:	2401      	movs	r4, #1
 804e86e:	e7e8      	b.n	804e842 <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 804e870:	2401      	movs	r4, #1
 804e872:	e7e8      	b.n	804e846 <FLASH_INT_If_Write+0x24>

0804e874 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 804e874:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 804e878:	d201      	bcs.n	804e87e <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 804e87a:	f7ff bfd2 	b.w	804e822 <FLASH_INT_If_Write>
}
 804e87e:	2001      	movs	r0, #1
 804e880:	4770      	bx	lr
	...

0804e884 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 804e884:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 804e886:	4b07      	ldr	r3, [pc, #28]	; (804e8a4 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 804e888:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 804e88a:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 804e88e:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 804e892:	0a80      	lsrs	r0, r0, #10
 804e894:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 804e896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804e89a:	f001 f94b 	bl	804fb34 <HAL_Delay>

  return HAL_OK;
}
 804e89e:	4620      	mov	r0, r4
 804e8a0:	bd10      	pop	{r4, pc}
 804e8a2:	bf00      	nop
 804e8a4:	20003624 	.word	0x20003624

0804e8a8 <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 804e8a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 804e8aa:	4c43      	ldr	r4, [pc, #268]	; (804e9b8 <Ymodem_DataPktRxCpltCallback+0x110>)
 804e8ac:	6823      	ldr	r3, [r4, #0]
{
 804e8ae:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e8b0:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 804e8b2:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e8b4:	4293      	cmp	r3, r2
{
 804e8b6:	b0d0      	sub	sp, #320	; 0x140
 804e8b8:	4606      	mov	r6, r0
  m_uPacketsReceived++;
 804e8ba:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 804e8bc:	d106      	bne.n	804e8cc <Ymodem_DataPktRxCpltCallback+0x24>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 804e8be:	6865      	ldr	r5, [r4, #4]
 804e8c0:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 804e8c4:	2d00      	cmp	r5, #0
 804e8c6:	bf08      	it	eq
 804e8c8:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 804e8cc:	2b01      	cmp	r3, #1
 804e8ce:	d112      	bne.n	804e8f6 <Ymodem_DataPktRxCpltCallback+0x4e>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 804e8d0:	4b3a      	ldr	r3, [pc, #232]	; (804e9bc <Ymodem_DataPktRxCpltCallback+0x114>)
 804e8d2:	4a3b      	ldr	r2, [pc, #236]	; (804e9c0 <Ymodem_DataPktRxCpltCallback+0x118>)
 804e8d4:	69db      	ldr	r3, [r3, #28]
 804e8d6:	69d2      	ldr	r2, [r2, #28]
 804e8d8:	68f0      	ldr	r0, [r6, #12]
 804e8da:	3301      	adds	r3, #1
 804e8dc:	1a9b      	subs	r3, r3, r2
 804e8de:	fbb0 f2f3 	udiv	r2, r0, r3
 804e8e2:	fb03 0312 	mls	r3, r3, r2, r0
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e8e6:	6932      	ldr	r2, [r6, #16]
    m_uDwlImgCurrent = uFlashDestination;
 804e8e8:	e9c4 1103 	strd	r1, r1, [r4, #12]
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e8ec:	4411      	add	r1, r2
                   + SFU_IMG_IMAGE_OFFSET;
 804e8ee:	f501 7100 	add.w	r1, r1, #512	; 0x200
 804e8f2:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 804e8f4:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804e8f6:	68e3      	ldr	r3, [r4, #12]
 804e8f8:	6920      	ldr	r0, [r4, #16]
 804e8fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 804e8fe:	4283      	cmp	r3, r0
 804e900:	d946      	bls.n	804e990 <Ymodem_DataPktRxCpltCallback+0xe8>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 804e902:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 804e904:	4293      	cmp	r3, r2
 804e906:	d843      	bhi.n	804e990 <Ymodem_DataPktRxCpltCallback+0xe8>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 804e908:	f44f 7200 	mov.w	r2, #512	; 0x200
 804e90c:	4631      	mov	r1, r6
 804e90e:	f7ff ffb1 	bl	804e874 <FLASH_If_Write>
 804e912:	2800      	cmp	r0, #0
 804e914:	d13e      	bne.n	804e994 <Ymodem_DataPktRxCpltCallback+0xec>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 804e916:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804e91a:	68e1      	ldr	r1, [r4, #12]
 804e91c:	4668      	mov	r0, sp
 804e91e:	f7ff ff25 	bl	804e76c <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 804e922:	4b26      	ldr	r3, [pc, #152]	; (804e9bc <Ymodem_DataPktRxCpltCallback+0x114>)
 804e924:	4a26      	ldr	r2, [pc, #152]	; (804e9c0 <Ymodem_DataPktRxCpltCallback+0x118>)
 804e926:	69db      	ldr	r3, [r3, #28]
 804e928:	69d2      	ldr	r2, [r2, #28]
 804e92a:	9903      	ldr	r1, [sp, #12]
 804e92c:	3301      	adds	r3, #1
 804e92e:	1a9b      	subs	r3, r3, r2
 804e930:	fbb1 f2f3 	udiv	r2, r1, r3
 804e934:	fb03 1312 	mls	r3, r3, r2, r1
 804e938:	6922      	ldr	r2, [r4, #16]
 804e93a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 804e93e:	4413      	add	r3, r2
 804e940:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 804e942:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 804e946:	f506 7600 	add.w	r6, r6, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 804e94a:	b19d      	cbz	r5, 804e974 <Ymodem_DataPktRxCpltCallback+0xcc>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 804e94c:	076b      	lsls	r3, r5, #29
 804e94e:	d00b      	beq.n	804e968 <Ymodem_DataPktRxCpltCallback+0xc0>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e950:	6962      	ldr	r2, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e952:	f025 0307 	bic.w	r3, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e956:	3208      	adds	r2, #8
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e958:	3308      	adds	r3, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 804e95a:	6162      	str	r2, [r4, #20]
 804e95c:	4435      	add	r5, r6
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 804e95e:	21ff      	movs	r1, #255	; 0xff
      while (uOldSize < uSize)
 804e960:	1baa      	subs	r2, r5, r6
 804e962:	429a      	cmp	r2, r3
 804e964:	d318      	bcc.n	804e998 <Ymodem_DataPktRxCpltCallback+0xf0>
 804e966:	461d      	mov	r5, r3
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804e968:	6923      	ldr	r3, [r4, #16]
 804e96a:	6962      	ldr	r2, [r4, #20]
 804e96c:	1959      	adds	r1, r3, r5
 804e96e:	4291      	cmp	r1, r2
 804e970:	d915      	bls.n	804e99e <Ymodem_DataPktRxCpltCallback+0xf6>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 804e972:	2001      	movs	r0, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 804e974:	68a3      	ldr	r3, [r4, #8]
 804e976:	6822      	ldr	r2, [r4, #0]
 804e978:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 804e97a:	bf04      	itt	eq
 804e97c:	2300      	moveq	r3, #0
 804e97e:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 804e980:	2801      	cmp	r0, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 804e982:	bf02      	ittt	eq
 804e984:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
 804e986:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 804e98a:	60a3      	streq	r3, [r4, #8]
  }
  return e_ret_status;
}
 804e98c:	b050      	add	sp, #320	; 0x140
 804e98e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 804e990:	2000      	movs	r0, #0
 804e992:	e7da      	b.n	804e94a <Ymodem_DataPktRxCpltCallback+0xa2>
      e_ret_status = HAL_ERROR;
 804e994:	2001      	movs	r0, #1
 804e996:	e7d8      	b.n	804e94a <Ymodem_DataPktRxCpltCallback+0xa2>
        pData[uOldSize] = 0xFF;
 804e998:	f805 1b01 	strb.w	r1, [r5], #1
 804e99c:	e7e0      	b.n	804e960 <Ymodem_DataPktRxCpltCallback+0xb8>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 804e99e:	2800      	cmp	r0, #0
 804e9a0:	d1e7      	bne.n	804e972 <Ymodem_DataPktRxCpltCallback+0xca>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 804e9a2:	462a      	mov	r2, r5
 804e9a4:	4631      	mov	r1, r6
 804e9a6:	4618      	mov	r0, r3
 804e9a8:	f7ff ff64 	bl	804e874 <FLASH_If_Write>
 804e9ac:	2800      	cmp	r0, #0
 804e9ae:	d1e0      	bne.n	804e972 <Ymodem_DataPktRxCpltCallback+0xca>
        m_uDwlImgCurrent += uSize;
 804e9b0:	6923      	ldr	r3, [r4, #16]
 804e9b2:	441d      	add	r5, r3
 804e9b4:	6125      	str	r5, [r4, #16]
 804e9b6:	e7dd      	b.n	804e974 <Ymodem_DataPktRxCpltCallback+0xcc>
 804e9b8:	20003624 	.word	0x20003624
 804e9bc:	08052608 	.word	0x08052608
 804e9c0:	080525e8 	.word	0x080525e8

0804e9c4 <FW_UPDATE_Run>:
{
 804e9c4:	b530      	push	{r4, r5, lr}
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804e9c6:	4831      	ldr	r0, [pc, #196]	; (804ea8c <FW_UPDATE_Run+0xc8>)
{
 804e9c8:	b0d7      	sub	sp, #348	; 0x15c
  PRINTF("\r\n================ New Fw Download =========================\r\n\n");
 804e9ca:	f7ff fdab 	bl	804e524 <TraceSend>
  refresh_iwdg();
 804e9ce:	f001 fbab 	bl	8050128 <refresh_iwdg>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 804e9d2:	a902      	add	r1, sp, #8
 804e9d4:	2004      	movs	r0, #4
 804e9d6:	f000 ffbb 	bl	804f950 <SFU_APP_GetDownloadAreaInfo>
  refresh_iwdg();
 804e9da:	f001 fba5 	bl	8050128 <refresh_iwdg>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 804e9de:	4b2c      	ldr	r3, [pc, #176]	; (804ea90 <FW_UPDATE_Run+0xcc>)
 804e9e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 804e9e4:	ac06      	add	r4, sp, #24
 804e9e6:	e884 0003 	stmia.w	r4, {r0, r1}
  PRINTF("  -- Send Firmware \r\n\n");
 804e9ea:	482a      	ldr	r0, [pc, #168]	; (804ea94 <FW_UPDATE_Run+0xd0>)
 804e9ec:	f7ff fd9a 	bl	804e524 <TraceSend>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 804e9f0:	4b29      	ldr	r3, [pc, #164]	; (804ea98 <FW_UPDATE_Run+0xd4>)
 804e9f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 804e9f6:	601a      	str	r2, [r3, #0]
  refresh_iwdg();
 804e9f8:	f001 fb96 	bl	8050128 <refresh_iwdg>
  PRINTF("  -- -- Erasing download area ...\r\n\n");
 804e9fc:	4827      	ldr	r0, [pc, #156]	; (804ea9c <FW_UPDATE_Run+0xd8>)
 804e9fe:	f7ff fd91 	bl	804e524 <TraceSend>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 804ea02:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 804ea06:	f7ff ff05 	bl	804e814 <FLASH_If_Erase_Size>
 804ea0a:	bb80      	cbnz	r0, 804ea6e <FW_UPDATE_Run+0xaa>
	  PRINTF("  -- -- File> Transfer> YMODEM> Send ");
 804ea0c:	4824      	ldr	r0, [pc, #144]	; (804eaa0 <FW_UPDATE_Run+0xdc>)
 804ea0e:	f7ff fd89 	bl	804e524 <TraceSend>
	 refresh_iwdg();
 804ea12:	f001 fb89 	bl	8050128 <refresh_iwdg>
    Ymodem_Init();
 804ea16:	f001 fe09 	bl	805062c <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 804ea1a:	4622      	mov	r2, r4
 804ea1c:	9903      	ldr	r1, [sp, #12]
 804ea1e:	a801      	add	r0, sp, #4
 804ea20:	f001 fe06 	bl	8050630 <Ymodem_Receive>
 804ea24:	4605      	mov	r5, r0
    PRINTF("\r\n\n");
 804ea26:	481f      	ldr	r0, [pc, #124]	; (804eaa4 <FW_UPDATE_Run+0xe0>)
 804ea28:	f7ff fd7c 	bl	804e524 <TraceSend>
    if ((e_result == COM_OK))
 804ea2c:	bb35      	cbnz	r5, 804ea7c <FW_UPDATE_Run+0xb8>
    	PRINTF("  -- -- Programming Completed Successfully!\r\n\n");
 804ea2e:	481e      	ldr	r0, [pc, #120]	; (804eaa8 <FW_UPDATE_Run+0xe4>)
 804ea30:	f7ff fd78 	bl	804e524 <TraceSend>
    	PRINTF("  -- -- Bytes: %ld\r\n\n", u_fw_size);
 804ea34:	9901      	ldr	r1, [sp, #4]
 804ea36:	481d      	ldr	r0, [pc, #116]	; (804eaac <FW_UPDATE_Run+0xe8>)
 804ea38:	f7ff fd74 	bl	804e524 <TraceSend>
    ret = FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 804ea3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804ea40:	9903      	ldr	r1, [sp, #12]
 804ea42:	4620      	mov	r0, r4
 804ea44:	f7ff fe92 	bl	804e76c <FLASH_If_Read>
 804ea48:	4605      	mov	r5, r0
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 804ea4a:	4620      	mov	r0, r4
 804ea4c:	f000 ff64 	bl	804f918 <SFU_APP_InstallAtNextReset>
    PRINTF("  -- Image correctly downloaded - reboot\r\n\n");
 804ea50:	4817      	ldr	r0, [pc, #92]	; (804eab0 <FW_UPDATE_Run+0xec>)
 804ea52:	f7ff fd67 	bl	804e524 <TraceSend>
    COM_Transmit((uint8_t*)&answer_update_success_buffer, sizeof(answer_update_success_buffer), 100);
 804ea56:	2264      	movs	r2, #100	; 0x64
 804ea58:	2103      	movs	r1, #3
 804ea5a:	4816      	ldr	r0, [pc, #88]	; (804eab4 <FW_UPDATE_Run+0xf0>)
 804ea5c:	f001 fdce 	bl	80505fc <COM_Transmit>
    HAL_Delay(1000U);
 804ea60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804ea64:	f001 f866 	bl	804fb34 <HAL_Delay>
    HAL_NVIC_SystemReset();
 804ea68:	f7f5 f952 	bl	8043d10 <HAL_NVIC_SystemReset>
  if (ret != HAL_OK)
 804ea6c:	b115      	cbz	r5, 804ea74 <FW_UPDATE_Run+0xb0>
	  PRINTF("  -- !!Operation failed!! \r\n\n");
 804ea6e:	4812      	ldr	r0, [pc, #72]	; (804eab8 <FW_UPDATE_Run+0xf4>)
 804ea70:	f7ff fd58 	bl	804e524 <TraceSend>
  HAL_NVIC_SystemReset();
 804ea74:	f7f5 f94c 	bl	8043d10 <HAL_NVIC_SystemReset>
}
 804ea78:	b057      	add	sp, #348	; 0x15c
 804ea7a:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 804ea7c:	2d02      	cmp	r5, #2
    	PRINTF("  -- -- !!Aborted by user!!\r\n\n");
 804ea7e:	bf0c      	ite	eq
 804ea80:	480e      	ldreq	r0, [pc, #56]	; (804eabc <FW_UPDATE_Run+0xf8>)
    	PRINTF("  -- -- !!Error during file download!!\r\n\n");
 804ea82:	480f      	ldrne	r0, [pc, #60]	; (804eac0 <FW_UPDATE_Run+0xfc>)
 804ea84:	f7ff fd4e 	bl	804e524 <TraceSend>
 804ea88:	e7f1      	b.n	804ea6e <FW_UPDATE_Run+0xaa>
 804ea8a:	bf00      	nop
 804ea8c:	08052dd8 	.word	0x08052dd8
 804ea90:	080525c8 	.word	0x080525c8
 804ea94:	08052e18 	.word	0x08052e18
 804ea98:	40003000 	.word	0x40003000
 804ea9c:	08052e2f 	.word	0x08052e2f
 804eaa0:	08052e54 	.word	0x08052e54
 804eaa4:	08052f4e 	.word	0x08052f4e
 804eaa8:	08052e7a 	.word	0x08052e7a
 804eaac:	08052ea9 	.word	0x08052ea9
 804eab0:	08052ebf 	.word	0x08052ebf
 804eab4:	20001013 	.word	0x20001013
 804eab8:	08052f34 	.word	0x08052f34
 804eabc:	08052eeb 	.word	0x08052eeb
 804eac0:	08052f0a 	.word	0x08052f0a

0804eac4 <HW_GPIO_GetBitPos>:

  if ((GPIO_Pin & 0xFF00) != 0)
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 804eac4:	4a0a      	ldr	r2, [pc, #40]	; (804eaf0 <HW_GPIO_GetBitPos+0x2c>)
    PinPos |= 0x8;
 804eac6:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 804eaca:	bf14      	ite	ne
 804eacc:	2308      	movne	r3, #8
 804eace:	2300      	moveq	r3, #0
  if ((GPIO_Pin & 0xF0F0) != 0)
 804ead0:	4210      	tst	r0, r2
  {
    PinPos |= 0x4;
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 804ead2:	4a08      	ldr	r2, [pc, #32]	; (804eaf4 <HW_GPIO_GetBitPos+0x30>)
    PinPos |= 0x4;
 804ead4:	bf18      	it	ne
 804ead6:	f043 0304 	orrne.w	r3, r3, #4
  if ((GPIO_Pin & 0xCCCC) != 0)
 804eada:	4210      	tst	r0, r2
  {
    PinPos |= 0x2;
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 804eadc:	4a06      	ldr	r2, [pc, #24]	; (804eaf8 <HW_GPIO_GetBitPos+0x34>)
    PinPos |= 0x2;
 804eade:	bf18      	it	ne
 804eae0:	f043 0302 	orrne.w	r3, r3, #2
  if ((GPIO_Pin & 0xAAAA) != 0)
 804eae4:	4210      	tst	r0, r2
  {
    PinPos |= 0x1;
 804eae6:	bf18      	it	ne
 804eae8:	f043 0301 	orrne.w	r3, r3, #1
  }


  return PinPos;
}
 804eaec:	4618      	mov	r0, r3
 804eaee:	4770      	bx	lr
 804eaf0:	fffff0f0 	.word	0xfffff0f0
 804eaf4:	ffffcccc 	.word	0xffffcccc
 804eaf8:	ffffaaaa 	.word	0xffffaaaa

0804eafc <HW_GPIO_Init>:
{
 804eafc:	b430      	push	{r4, r5}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804eafe:	4b28      	ldr	r3, [pc, #160]	; (804eba0 <HW_GPIO_Init+0xa4>)
 804eb00:	4298      	cmp	r0, r3
{
 804eb02:	b086      	sub	sp, #24
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804eb04:	f04f 0400 	mov.w	r4, #0
 804eb08:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 804eb0c:	d032      	beq.n	804eb74 <HW_GPIO_Init+0x78>
 804eb0e:	d80f      	bhi.n	804eb30 <HW_GPIO_Init+0x34>
 804eb10:	4d24      	ldr	r5, [pc, #144]	; (804eba4 <HW_GPIO_Init+0xa8>)
 804eb12:	42a8      	cmp	r0, r5
 804eb14:	d01e      	beq.n	804eb54 <HW_GPIO_Init+0x58>
 804eb16:	2300      	movs	r3, #0
 804eb18:	9305      	str	r3, [sp, #20]
 804eb1a:	4b23      	ldr	r3, [pc, #140]	; (804eba8 <HW_GPIO_Init+0xac>)
 804eb1c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804eb1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 804eb22:	631c      	str	r4, [r3, #48]	; 0x30
 804eb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eb26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804eb2a:	9305      	str	r3, [sp, #20]
 804eb2c:	9b05      	ldr	r3, [sp, #20]
 804eb2e:	e01b      	b.n	804eb68 <HW_GPIO_Init+0x6c>
 804eb30:	4d1e      	ldr	r5, [pc, #120]	; (804ebac <HW_GPIO_Init+0xb0>)
 804eb32:	42a8      	cmp	r0, r5
 804eb34:	d029      	beq.n	804eb8a <HW_GPIO_Init+0x8e>
 804eb36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 804eb3a:	42a8      	cmp	r0, r5
 804eb3c:	d1eb      	bne.n	804eb16 <HW_GPIO_Init+0x1a>
 804eb3e:	9404      	str	r4, [sp, #16]
 804eb40:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804eb42:	f044 0408 	orr.w	r4, r4, #8
 804eb46:	631c      	str	r4, [r3, #48]	; 0x30
 804eb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eb4a:	f003 0308 	and.w	r3, r3, #8
 804eb4e:	9304      	str	r3, [sp, #16]
 804eb50:	9b04      	ldr	r3, [sp, #16]
 804eb52:	e009      	b.n	804eb68 <HW_GPIO_Init+0x6c>
 804eb54:	9401      	str	r4, [sp, #4]
 804eb56:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804eb58:	f044 0401 	orr.w	r4, r4, #1
 804eb5c:	631c      	str	r4, [r3, #48]	; 0x30
 804eb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eb60:	f003 0301 	and.w	r3, r3, #1
 804eb64:	9301      	str	r3, [sp, #4]
 804eb66:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 804eb68:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 804eb6a:	4611      	mov	r1, r2
}
 804eb6c:	b006      	add	sp, #24
 804eb6e:	bc30      	pop	{r4, r5}
  HAL_GPIO_Init(port, initStruct);
 804eb70:	f7f5 bc72 	b.w	8044458 <HAL_GPIO_Init>
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 804eb74:	9402      	str	r4, [sp, #8]
 804eb76:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804eb78:	f044 0402 	orr.w	r4, r4, #2
 804eb7c:	631c      	str	r4, [r3, #48]	; 0x30
 804eb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eb80:	f003 0302 	and.w	r3, r3, #2
 804eb84:	9302      	str	r3, [sp, #8]
 804eb86:	9b02      	ldr	r3, [sp, #8]
 804eb88:	e7ee      	b.n	804eb68 <HW_GPIO_Init+0x6c>
 804eb8a:	9403      	str	r4, [sp, #12]
 804eb8c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 804eb8e:	f044 0404 	orr.w	r4, r4, #4
 804eb92:	631c      	str	r4, [r3, #48]	; 0x30
 804eb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804eb96:	f003 0304 	and.w	r3, r3, #4
 804eb9a:	9303      	str	r3, [sp, #12]
 804eb9c:	9b03      	ldr	r3, [sp, #12]
 804eb9e:	e7e3      	b.n	804eb68 <HW_GPIO_Init+0x6c>
 804eba0:	40020400 	.word	0x40020400
 804eba4:	40020000 	.word	0x40020000
 804eba8:	40023800 	.word	0x40023800
 804ebac:	40020800 	.word	0x40020800

0804ebb0 <HW_GPIO_SetIrq>:
{
 804ebb0:	b538      	push	{r3, r4, r5, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804ebb2:	4608      	mov	r0, r1
{
 804ebb4:	461c      	mov	r4, r3
 804ebb6:	4615      	mov	r5, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 804ebb8:	f7ff ff84 	bl	804eac4 <HW_GPIO_GetBitPos>
 804ebbc:	4b08      	ldr	r3, [pc, #32]	; (804ebe0 <HW_GPIO_SetIrq+0x30>)
    GpioIrq[ BitPos ] = irqHandler;
 804ebbe:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  if (irqHandler != NULL)
 804ebc2:	b164      	cbz	r4, 804ebde <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804ebc4:	4608      	mov	r0, r1
 804ebc6:	f001 f803 	bl	804fbd0 <MSP_GetIRQn>
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804ebca:	4629      	mov	r1, r5
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 804ebcc:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 804ebce:	2200      	movs	r2, #0
 804ebd0:	f7f5 f848 	bl	8043c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 804ebd4:	4620      	mov	r0, r4
}
 804ebd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_NVIC_EnableIRQ(IRQnb);
 804ebda:	f7f5 b877 	b.w	8043ccc <HAL_NVIC_EnableIRQ>
}
 804ebde:	bd38      	pop	{r3, r4, r5, pc}
 804ebe0:	2000363c 	.word	0x2000363c

0804ebe4 <HW_GPIO_IrqHandler>:
{
 804ebe4:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 804ebe6:	f7ff ff6d 	bl	804eac4 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 804ebea:	4b04      	ldr	r3, [pc, #16]	; (804ebfc <HW_GPIO_IrqHandler+0x18>)
 804ebec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804ebf0:	b11b      	cbz	r3, 804ebfa <HW_GPIO_IrqHandler+0x16>
    GpioIrq[ BitPos ](NULL);
 804ebf2:	2000      	movs	r0, #0
}
 804ebf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GpioIrq[ BitPos ](NULL);
 804ebf8:	4718      	bx	r3
}
 804ebfa:	bd10      	pop	{r4, pc}
 804ebfc:	2000363c 	.word	0x2000363c

0804ec00 <HW_GPIO_Write>:
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 804ec00:	b2d2      	uxtb	r2, r2
 804ec02:	f7f5 bd9d 	b.w	8044740 <HAL_GPIO_WritePin>
	...

0804ec08 <HW_I2C1_Init>:



/* I2C1 init function */
void HW_I2C1_Init(void)
{
 804ec08:	b508      	push	{r3, lr}
//  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
//  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
//  {
//    Error_Handler();
//  }
	hi2c1.Instance = I2C1;
 804ec0a:	480b      	ldr	r0, [pc, #44]	; (804ec38 <HW_I2C1_Init+0x30>)
	hi2c1.Init.ClockSpeed = 100000;
 804ec0c:	4a0b      	ldr	r2, [pc, #44]	; (804ec3c <HW_I2C1_Init+0x34>)
 804ec0e:	4b0c      	ldr	r3, [pc, #48]	; (804ec40 <HW_I2C1_Init+0x38>)
 804ec10:	e9c0 2300 	strd	r2, r3, [r0]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 804ec14:	2300      	movs	r3, #0
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 804ec16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 804ec1a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 804ec1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 804ec22:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804ec26:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 804ec28:	f7f5 ff70 	bl	8044b0c <HAL_I2C_Init>
 804ec2c:	b118      	cbz	r0, 804ec36 <HW_I2C1_Init+0x2e>
	{
		Error_Handler();
	}

}
 804ec2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 804ec32:	f7ff bd7b 	b.w	804e72c <Error_Handler>
}
 804ec36:	bd08      	pop	{r3, pc}
 804ec38:	20005e60 	.word	0x20005e60
 804ec3c:	40005400 	.word	0x40005400
 804ec40:	000186a0 	.word	0x000186a0

0804ec44 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 804ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ec48:	2200      	movs	r2, #0
{
 804ec4a:	4605      	mov	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ec4c:	4826      	ldr	r0, [pc, #152]	; (804ece8 <HW_RTC_GetCalendarValue+0xa4>)
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 804ec4e:	4f27      	ldr	r7, [pc, #156]	; (804ecec <HW_RTC_GetCalendarValue+0xa8>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804ec50:	f8df 8094 	ldr.w	r8, [pc, #148]	; 804ece8 <HW_RTC_GetCalendarValue+0xa4>
{
 804ec54:	460c      	mov	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ec56:	f7f6 ff4c 	bl	8045af2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 804ec5a:	2200      	movs	r2, #0
 804ec5c:	4629      	mov	r1, r5
 804ec5e:	4640      	mov	r0, r8
 804ec60:	6abe      	ldr	r6, [r7, #40]	; 0x28
 804ec62:	f7f6 ff6d 	bl	8045b40 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 804ec66:	2200      	movs	r2, #0
 804ec68:	4621      	mov	r1, r4
 804ec6a:	4640      	mov	r0, r8
 804ec6c:	f7f6 ff41 	bl	8045af2 <HAL_RTC_GetTime>
 804ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804ec72:	b2b6      	uxth	r6, r6
 804ec74:	b29b      	uxth	r3, r3

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 804ec76:	42b3      	cmp	r3, r6
 804ec78:	d1ef      	bne.n	804ec5a <HW_RTC_GetCalendarValue+0x16>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804ec7a:	78eb      	ldrb	r3, [r5, #3]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 804ec7c:	4a1c      	ldr	r2, [pc, #112]	; (804ecf0 <HW_RTC_GetCalendarValue+0xac>)
 804ec7e:	491d      	ldr	r1, [pc, #116]	; (804ecf4 <HW_RTC_GetCalendarValue+0xb0>)
 804ec80:	f013 0f03 	tst.w	r3, #3
 804ec84:	bf08      	it	eq
 804ec86:	4611      	moveq	r1, r2

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804ec88:	786a      	ldrb	r2, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804ec8a:	f240 50b5 	movw	r0, #1461	; 0x5b5
 804ec8e:	4358      	muls	r0, r3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804ec90:	3a01      	subs	r2, #1
 804ec92:	233d      	movs	r3, #61	; 0x3d
 804ec94:	4353      	muls	r3, r2
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 804ec96:	1cc6      	adds	r6, r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804ec98:	3301      	adds	r3, #1
 804ec9a:	2002      	movs	r0, #2
 804ec9c:	fb93 f3f0 	sdiv	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 804eca0:	78a8      	ldrb	r0, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 804eca2:	0052      	lsls	r2, r2, #1
 804eca4:	3801      	subs	r0, #1
 804eca6:	eb00 0096 	add.w	r0, r0, r6, lsr #2
 804ecaa:	fa21 f202 	lsr.w	r2, r1, r2
 804ecae:	4403      	add	r3, r0
 804ecb0:	f002 0203 	and.w	r2, r2, #3
  seconds += (RTC_DateStruct->Date - 1);
 804ecb4:	1a9b      	subs	r3, r3, r2

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804ecb6:	7862      	ldrb	r2, [r4, #1]
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 804ecb8:	7821      	ldrb	r1, [r4, #0]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804ecba:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804ecbe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 804ecc2:	0092      	lsls	r2, r2, #2
 804ecc4:	fb00 2201 	mla	r2, r0, r1, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804ecc8:	78a1      	ldrb	r1, [r4, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 804ecca:	440a      	add	r2, r1
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 804eccc:	490a      	ldr	r1, [pc, #40]	; (804ecf8 <HW_RTC_GetCalendarValue+0xb4>)
 804ecce:	fb01 2303 	mla	r3, r1, r3, r2



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 804ecd2:	0d9e      	lsrs	r6, r3, #22
 804ecd4:	029d      	lsls	r5, r3, #10
 804ecd6:	6863      	ldr	r3, [r4, #4]
 804ecd8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 804ecdc:	3303      	adds	r3, #3

  return (calendarValue);
}
 804ecde:	18e8      	adds	r0, r5, r3
 804ece0:	f146 0100 	adc.w	r1, r6, #0
 804ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ece8:	2000367c 	.word	0x2000367c
 804ecec:	40002800 	.word	0x40002800
 804ecf0:	00445550 	.word	0x00445550
 804ecf4:	0099aaa0 	.word	0x0099aaa0
 804ecf8:	00015180 	.word	0x00015180

0804ecfc <HW_RTC_GetMinimumTimeout>:
}
 804ecfc:	2003      	movs	r0, #3
 804ecfe:	4770      	bx	lr

0804ed00 <HW_RTC_ms2Tick>:
{
 804ed00:	b508      	push	{r3, lr}
 804ed02:	4601      	mov	r1, r0
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804ed04:	227d      	movs	r2, #125	; 0x7d
 804ed06:	2300      	movs	r3, #0
 804ed08:	01c0      	lsls	r0, r0, #7
 804ed0a:	0e49      	lsrs	r1, r1, #25
 804ed0c:	f7f2 f8d6 	bl	8040ebc <__aeabi_uldivmod>
}
 804ed10:	bd08      	pop	{r3, pc}

0804ed12 <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804ed12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  tick = tick & PREDIV_S;
 804ed16:	f3c0 0209 	ubfx	r2, r0, #0, #10
  uint32_t seconds = tick >> N_PREDIV_S;
 804ed1a:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 804ed1c:	435a      	muls	r2, r3
 804ed1e:	4358      	muls	r0, r3
}
 804ed20:	eb00 2092 	add.w	r0, r0, r2, lsr #10
 804ed24:	4770      	bx	lr
	...

0804ed28 <HW_RTC_GetTimerElapsedTime>:
{
 804ed28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804ed2a:	a901      	add	r1, sp, #4
 804ed2c:	4668      	mov	r0, sp
 804ed2e:	f7ff ff89 	bl	804ec44 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 804ed32:	4b03      	ldr	r3, [pc, #12]	; (804ed40 <HW_RTC_GetTimerElapsedTime+0x18>)
 804ed34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 804ed36:	1ac0      	subs	r0, r0, r3
 804ed38:	b007      	add	sp, #28
 804ed3a:	f85d fb04 	ldr.w	pc, [sp], #4
 804ed3e:	bf00      	nop
 804ed40:	2000367c 	.word	0x2000367c

0804ed44 <HW_RTC_GetTimerValue>:
{
 804ed44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804ed46:	a901      	add	r1, sp, #4
 804ed48:	4668      	mov	r0, sp
 804ed4a:	f7ff ff7b 	bl	804ec44 <HW_RTC_GetCalendarValue>
}
 804ed4e:	b007      	add	sp, #28
 804ed50:	f85d fb04 	ldr.w	pc, [sp], #4

0804ed54 <HW_RTC_StopAlarm>:
{
 804ed54:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 804ed56:	4c08      	ldr	r4, [pc, #32]	; (804ed78 <HW_RTC_StopAlarm+0x24>)
 804ed58:	f44f 7180 	mov.w	r1, #256	; 0x100
 804ed5c:	4620      	mov	r0, r4
 804ed5e:	f7f6 fc6b 	bl	8045638 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 804ed62:	6822      	ldr	r2, [r4, #0]
 804ed64:	68d3      	ldr	r3, [r2, #12]
 804ed66:	b2db      	uxtb	r3, r3
 804ed68:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804ed6c:	60d3      	str	r3, [r2, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804ed6e:	4b03      	ldr	r3, [pc, #12]	; (804ed7c <HW_RTC_StopAlarm+0x28>)
 804ed70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804ed74:	615a      	str	r2, [r3, #20]
}
 804ed76:	bd10      	pop	{r4, pc}
 804ed78:	2000367c 	.word	0x2000367c
 804ed7c:	40013c00 	.word	0x40013c00

0804ed80 <HW_RTC_SetAlarm>:
{
 804ed80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804ed84:	4c54      	ldr	r4, [pc, #336]	; (804eed8 <HW_RTC_SetAlarm+0x158>)
{
 804ed86:	4605      	mov	r5, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 804ed88:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 804ed8c:	f7ff ffcc 	bl	804ed28 <HW_RTC_GetTimerElapsedTime>
 804ed90:	3603      	adds	r6, #3
 804ed92:	1a28      	subs	r0, r5, r0
 804ed94:	4286      	cmp	r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804ed96:	bf34      	ite	cc
 804ed98:	2100      	movcc	r1, #0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 804ed9a:	2101      	movcs	r1, #1
 804ed9c:	2004      	movs	r0, #4
 804ed9e:	f7ff f8fb 	bl	804df98 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 804eda2:	f7ff f90f 	bl	804dfc4 <LPM_GetMode>
 804eda6:	2801      	cmp	r0, #1
    timeout = timeout -  McuWakeUpTimeCal;
 804eda8:	bf08      	it	eq
 804edaa:	f9b4 304c 	ldrsheq.w	r3, [r4, #76]	; 0x4c
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804edae:	6da6      	ldr	r6, [r4, #88]	; 0x58
 804edb0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 804edb4:	9201      	str	r2, [sp, #4]
    timeout = timeout -  McuWakeUpTimeCal;
 804edb6:	bf08      	it	eq
 804edb8:	1aed      	subeq	r5, r5, r3
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804edba:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804edbe:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 804edc2:	9300      	str	r3, [sp, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 804edc4:	f894 b055 	ldrb.w	fp, [r4, #85]	; 0x55
 804edc8:	f894 a056 	ldrb.w	sl, [r4, #86]	; 0x56
 804edcc:	f894 8057 	ldrb.w	r8, [r4, #87]	; 0x57
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 804edd0:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
 804edd4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 804edd8:	3603      	adds	r6, #3
  HW_RTC_StopAlarm();
 804edda:	f7ff ffbb 	bl	804ed54 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804edde:	f3c5 0109 	ubfx	r1, r5, #0, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804ede2:	9b00      	ldr	r3, [sp, #0]
 804ede4:	9a01      	ldr	r2, [sp, #4]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804ede6:	fa11 f686 	uxtah	r6, r1, r6
  while (timeoutValue >= SECONDS_IN_1DAY)
 804edea:	493c      	ldr	r1, [pc, #240]	; (804eedc <HW_RTC_SetAlarm+0x15c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 804edec:	b2b6      	uxth	r6, r6
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 804edee:	0aad      	lsrs	r5, r5, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 804edf0:	b29b      	uxth	r3, r3
  while (timeoutValue >= SECONDS_IN_1DAY)
 804edf2:	428d      	cmp	r5, r1
 804edf4:	d84b      	bhi.n	804ee8e <HW_RTC_SetAlarm+0x10e>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 804edf6:	fa1f fc82 	uxth.w	ip, r2
  while (timeoutValue >= SECONDS_IN_1HOUR)
 804edfa:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 804edfe:	d24d      	bcs.n	804ee9c <HW_RTC_SetAlarm+0x11c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 804ee00:	fa1f f28b 	uxth.w	r2, fp
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 804ee04:	2d3b      	cmp	r5, #59	; 0x3b
 804ee06:	d850      	bhi.n	804eeaa <HW_RTC_SetAlarm+0x12a>
 804ee08:	0ab1      	lsrs	r1, r6, #10
 804ee0a:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 804ee0e:	eb06 2680 	add.w	r6, r6, r0, lsl #10
 804ee12:	eb01 000a 	add.w	r0, r1, sl
 804ee16:	4428      	add	r0, r5
 804ee18:	b2b6      	uxth	r6, r6
 804ee1a:	b280      	uxth	r0, r0
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 804ee1c:	283b      	cmp	r0, #59	; 0x3b
 804ee1e:	d848      	bhi.n	804eeb2 <HW_RTC_SetAlarm+0x132>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 804ee20:	2a3b      	cmp	r2, #59	; 0x3b
 804ee22:	d84b      	bhi.n	804eebc <HW_RTC_SetAlarm+0x13c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 804ee24:	f1bc 0f17 	cmp.w	ip, #23
 804ee28:	d84f      	bhi.n	804eeca <HW_RTC_SetAlarm+0x14a>
 804ee2a:	492d      	ldr	r1, [pc, #180]	; (804eee0 <HW_RTC_SetAlarm+0x160>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 804ee2c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  if (RTC_DateStruct.Year % 4 == 0)
 804ee30:	f019 0f03 	tst.w	r9, #3
 804ee34:	f107 37ff 	add.w	r7, r7, #4294967295
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804ee38:	bf16      	itet	ne
 804ee3a:	19c9      	addne	r1, r1, r7
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 804ee3c:	5dcd      	ldrbeq	r5, [r1, r7]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804ee3e:	7b0d      	ldrbne	r5, [r1, #12]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 804ee40:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 804ee44:	42ab      	cmp	r3, r5
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804ee46:	bf84      	itt	hi
 804ee48:	fb93 f1f5 	sdivhi	r1, r3, r5
 804ee4c:	fb05 3311 	mlshi	r3, r5, r1, r3
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 804ee50:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 804ee54:	63e1      	str	r1, [r4, #60]	; 0x3c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804ee56:	4923      	ldr	r1, [pc, #140]	; (804eee4 <HW_RTC_SetAlarm+0x164>)
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 804ee58:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 804ee5c:	bf88      	it	hi
 804ee5e:	b29b      	uxthhi	r3, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804ee60:	f5c6 767f 	rsb	r6, r6, #1020	; 0x3fc
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804ee64:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804ee66:	3603      	adds	r6, #3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 804ee68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804ee6c:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804ee70:	f44f 7380 	mov.w	r3, #256	; 0x100
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 804ee74:	62a6      	str	r6, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 804ee76:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804ee7a:	6422      	str	r2, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 804ee7c:	63a2      	str	r2, [r4, #56]	; 0x38
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 804ee7e:	64a3      	str	r3, [r4, #72]	; 0x48
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 804ee80:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
}
 804ee84:	b003      	add	sp, #12
 804ee86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 804ee8a:	f7f6 bd7b 	b.w	8045984 <HAL_RTC_SetAlarm_IT>
    timeoutValue -= SECONDS_IN_1DAY;
 804ee8e:	f5a5 35a8 	sub.w	r5, r5, #86016	; 0x15000
    rtcAlarmDays++;
 804ee92:	3301      	adds	r3, #1
    timeoutValue -= SECONDS_IN_1DAY;
 804ee94:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    rtcAlarmDays++;
 804ee98:	b29b      	uxth	r3, r3
 804ee9a:	e7aa      	b.n	804edf2 <HW_RTC_SetAlarm+0x72>
    rtcAlarmHours++;
 804ee9c:	f10c 0c01 	add.w	ip, ip, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 804eea0:	f5a5 6561 	sub.w	r5, r5, #3600	; 0xe10
    rtcAlarmHours++;
 804eea4:	fa1f fc8c 	uxth.w	ip, ip
 804eea8:	e7a7      	b.n	804edfa <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 804eeaa:	3201      	adds	r2, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 804eeac:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 804eeae:	b292      	uxth	r2, r2
 804eeb0:	e7a8      	b.n	804ee04 <HW_RTC_SetAlarm+0x84>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804eeb2:	383c      	subs	r0, #60	; 0x3c
    rtcAlarmMinutes++;
 804eeb4:	3201      	adds	r2, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 804eeb6:	b280      	uxth	r0, r0
    rtcAlarmMinutes++;
 804eeb8:	b292      	uxth	r2, r2
 804eeba:	e7af      	b.n	804ee1c <HW_RTC_SetAlarm+0x9c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804eebc:	3a3c      	subs	r2, #60	; 0x3c
    rtcAlarmHours++;
 804eebe:	f10c 0c01 	add.w	ip, ip, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 804eec2:	b292      	uxth	r2, r2
    rtcAlarmHours++;
 804eec4:	fa1f fc8c 	uxth.w	ip, ip
 804eec8:	e7aa      	b.n	804ee20 <HW_RTC_SetAlarm+0xa0>
    rtcAlarmHours -= HOURS_IN_1DAY;
 804eeca:	f1ac 0c18 	sub.w	ip, ip, #24
    rtcAlarmDays++;
 804eece:	3301      	adds	r3, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 804eed0:	fa1f fc8c 	uxth.w	ip, ip
    rtcAlarmDays++;
 804eed4:	b29b      	uxth	r3, r3
 804eed6:	e7a5      	b.n	804ee24 <HW_RTC_SetAlarm+0xa4>
 804eed8:	2000367c 	.word	0x2000367c
 804eedc:	0001517f 	.word	0x0001517f
 804eee0:	080525d0 	.word	0x080525d0
 804eee4:	200036a0 	.word	0x200036a0

0804eee8 <HW_RTC_IrqHandler>:
{
 804eee8:	b508      	push	{r3, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 804eeea:	2100      	movs	r1, #0
 804eeec:	2004      	movs	r0, #4
 804eeee:	f7ff f853 	bl	804df98 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804eef2:	4b0b      	ldr	r3, [pc, #44]	; (804ef20 <HW_RTC_IrqHandler+0x38>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804eef4:	480b      	ldr	r0, [pc, #44]	; (804ef24 <HW_RTC_IrqHandler+0x3c>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 804eef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804eefa:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 804eefc:	6802      	ldr	r2, [r0, #0]
 804eefe:	6893      	ldr	r3, [r2, #8]
 804ef00:	04d9      	lsls	r1, r3, #19
 804ef02:	d50b      	bpl.n	804ef1c <HW_RTC_IrqHandler+0x34>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 804ef04:	68d3      	ldr	r3, [r2, #12]
 804ef06:	05db      	lsls	r3, r3, #23
 804ef08:	d508      	bpl.n	804ef1c <HW_RTC_IrqHandler+0x34>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 804ef0a:	68d3      	ldr	r3, [r2, #12]
 804ef0c:	b2db      	uxtb	r3, r3
 804ef0e:	f463 73c0 	orn	r3, r3, #384	; 0x180
 804ef12:	60d3      	str	r3, [r2, #12]
}
 804ef14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_RTC_AlarmAEventCallback(hrtc);
 804ef18:	f000 be56 	b.w	804fbc8 <HAL_RTC_AlarmAEventCallback>
}
 804ef1c:	bd08      	pop	{r3, pc}
 804ef1e:	bf00      	nop
 804ef20:	40013c00 	.word	0x40013c00
 804ef24:	2000367c 	.word	0x2000367c

0804ef28 <HW_RTC_DelayMs>:
{
 804ef28:	4601      	mov	r1, r0
 804ef2a:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 804ef2c:	227d      	movs	r2, #125	; 0x7d
 804ef2e:	2300      	movs	r3, #0
 804ef30:	01c0      	lsls	r0, r0, #7
 804ef32:	0e49      	lsrs	r1, r1, #25
 804ef34:	f7f1 ffc2 	bl	8040ebc <__aeabi_uldivmod>
 804ef38:	4604      	mov	r4, r0
  timeout = HW_RTC_GetTimerValue();
 804ef3a:	f7ff ff03 	bl	804ed44 <HW_RTC_GetTimerValue>
 804ef3e:	4605      	mov	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 804ef40:	f7ff ff00 	bl	804ed44 <HW_RTC_GetTimerValue>
 804ef44:	1b40      	subs	r0, r0, r5
 804ef46:	42a0      	cmp	r0, r4
 804ef48:	d300      	bcc.n	804ef4c <HW_RTC_DelayMs+0x24>
}
 804ef4a:	bd38      	pop	{r3, r4, r5, pc}
    __NOP();
 804ef4c:	bf00      	nop
 804ef4e:	e7f7      	b.n	804ef40 <HW_RTC_DelayMs+0x18>

0804ef50 <HW_RTC_SetTimerContext>:
{
 804ef50:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 804ef52:	4c04      	ldr	r4, [pc, #16]	; (804ef64 <HW_RTC_SetTimerContext+0x14>)
 804ef54:	f104 0154 	add.w	r1, r4, #84	; 0x54
 804ef58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 804ef5c:	f7ff fe72 	bl	804ec44 <HW_RTC_GetCalendarValue>
 804ef60:	6520      	str	r0, [r4, #80]	; 0x50
}
 804ef62:	bd10      	pop	{r4, pc}
 804ef64:	2000367c 	.word	0x2000367c

0804ef68 <HW_RTC_Init>:
{
 804ef68:	b530      	push	{r4, r5, lr}
  if (HW_RTC_Initalized == false)
 804ef6a:	4c17      	ldr	r4, [pc, #92]	; (804efc8 <HW_RTC_Init+0x60>)
 804ef6c:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
{
 804ef70:	b087      	sub	sp, #28
  if (HW_RTC_Initalized == false)
 804ef72:	bb3d      	cbnz	r5, 804efc4 <HW_RTC_Init+0x5c>
  RtcHandle.Instance = RTC;
 804ef74:	4b15      	ldr	r3, [pc, #84]	; (804efcc <HW_RTC_Init+0x64>)
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 804ef76:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804ef78:	221f      	movs	r2, #31
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 804ef7a:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_RTC_Init(&RtcHandle);
 804ef7e:	4620      	mov	r0, r4
  RtcHandle.Init.SynchPrediv = PREDIV_S;  /*RTC_SYNCH_PREDIV; */
 804ef80:	f240 33ff 	movw	r3, #1023	; 0x3ff
 804ef84:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 804ef88:	e9c4 5504 	strd	r5, r5, [r4, #16]
  HAL_RTC_Init(&RtcHandle);
 804ef8c:	f7f6 fbd3 	bl	8045736 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 804ef90:	a906      	add	r1, sp, #24
 804ef92:	4b0f      	ldr	r3, [pc, #60]	; (804efd0 <HW_RTC_Init+0x68>)
 804ef94:	f841 3d18 	str.w	r3, [r1, #-24]!
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 804ef98:	462a      	mov	r2, r5
 804ef9a:	4620      	mov	r0, r4
 804ef9c:	f7f6 fc95 	bl	80458ca <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 16;
 804efa0:	2310      	movs	r3, #16
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804efa2:	462a      	mov	r2, r5
 804efa4:	a901      	add	r1, sp, #4
 804efa6:	4620      	mov	r0, r4
  RTC_TimeStruct.TimeFormat = 0;
 804efa8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 804efac:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 804efb0:	f7f6 fc1a 	bl	80457e8 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 804efb4:	4620      	mov	r0, r4
 804efb6:	f7f6 fdec 	bl	8045b92 <HAL_RTCEx_EnableBypassShadow>
    HW_RTC_SetTimerContext();
 804efba:	f7ff ffc9 	bl	804ef50 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 804efbe:	2301      	movs	r3, #1
 804efc0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 804efc4:	b007      	add	sp, #28
 804efc6:	bd30      	pop	{r4, r5, pc}
 804efc8:	2000367c 	.word	0x2000367c
 804efcc:	40002800 	.word	0x40002800
 804efd0:	15060901 	.word	0x15060901

0804efd4 <HW_RTC_GetTimerContext>:
}
 804efd4:	4b01      	ldr	r3, [pc, #4]	; (804efdc <HW_RTC_GetTimerContext+0x8>)
 804efd6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804efd8:	4770      	bx	lr
 804efda:	bf00      	nop
 804efdc:	2000367c 	.word	0x2000367c

0804efe0 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 804efe0:	b530      	push	{r4, r5, lr}
 804efe2:	b087      	sub	sp, #28
 804efe4:	4605      	mov	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 804efe6:	a901      	add	r1, sp, #4
 804efe8:	4668      	mov	r0, sp
 804efea:	f7ff fe2b 	bl	804ec44 <HW_RTC_GetCalendarValue>
 804efee:	4604      	mov	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;

  *mSeconds = HW_RTC_Tick2ms(ticks);
 804eff0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 804eff4:	f7ff fe8d 	bl	804ed12 <HW_RTC_Tick2ms>
 804eff8:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 804effa:	0aa0      	lsrs	r0, r4, #10

  return seconds;
}
 804effc:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 804f000:	b007      	add	sp, #28
 804f002:	bd30      	pop	{r4, r5, pc}

0804f004 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 804f004:	b538      	push	{r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804f006:	4c07      	ldr	r4, [pc, #28]	; (804f024 <HW_RTC_BKUPWrite+0x20>)
{
 804f008:	460d      	mov	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 804f00a:	4602      	mov	r2, r0
 804f00c:	2100      	movs	r1, #0
 804f00e:	4620      	mov	r0, r4
 804f010:	f7f6 fdb5 	bl	8045b7e <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804f014:	462a      	mov	r2, r5
 804f016:	4620      	mov	r0, r4
 804f018:	2101      	movs	r1, #1
}
 804f01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 804f01e:	f7f6 bdae 	b.w	8045b7e <HAL_RTCEx_BKUPWrite>
 804f022:	bf00      	nop
 804f024:	2000367c 	.word	0x2000367c

0804f028 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 804f028:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f02a:	4c07      	ldr	r4, [pc, #28]	; (804f048 <HW_RTC_BKUPRead+0x20>)
{
 804f02c:	4606      	mov	r6, r0
 804f02e:	460d      	mov	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f030:	4620      	mov	r0, r4
 804f032:	2100      	movs	r1, #0
 804f034:	f7f6 fda8 	bl	8045b88 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804f038:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 804f03a:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 804f03c:	4620      	mov	r0, r4
 804f03e:	f7f6 fda3 	bl	8045b88 <HAL_RTCEx_BKUPRead>
 804f042:	6028      	str	r0, [r5, #0]
}
 804f044:	bd70      	pop	{r4, r5, r6, pc}
 804f046:	bf00      	nop
 804f048:	2000367c 	.word	0x2000367c

0804f04c <get_time_now>:
  // Calculate the resulting period
  return (TimerTime_t) interim;
}

void get_time_now (uint8_t* buffer_datetime)
{
 804f04c:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
	unsigned char *p;

	HAL_RTC_GetTime(&RtcHandle, &sTime, RTC_FORMAT_BIN);
 804f04e:	4d10      	ldr	r5, [pc, #64]	; (804f090 <get_time_now+0x44>)
{
 804f050:	b087      	sub	sp, #28
 804f052:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&RtcHandle, &sTime, RTC_FORMAT_BIN);
 804f054:	a901      	add	r1, sp, #4
 804f056:	2200      	movs	r2, #0
 804f058:	4628      	mov	r0, r5
 804f05a:	f7f6 fd4a 	bl	8045af2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&RtcHandle, &sDate, RTC_FORMAT_BIN);
 804f05e:	2200      	movs	r2, #0
 804f060:	4669      	mov	r1, sp
 804f062:	4628      	mov	r0, r5
 804f064:	f7f6 fd6c 	bl	8045b40 <HAL_RTC_GetDate>
    p++; //ignores WeekDay

    //put date in order month, day, year on buffer
    for (int i=0;i<sizeof(RTC_DateTypeDef)-1;i++)
    {
    	buffer_datetime[i]=*p++;
 804f068:	f89d 3001 	ldrb.w	r3, [sp, #1]
 804f06c:	7023      	strb	r3, [r4, #0]
 804f06e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 804f072:	7063      	strb	r3, [r4, #1]
 804f074:	f89d 3003 	ldrb.w	r3, [sp, #3]
 804f078:	70a3      	strb	r3, [r4, #2]
    p = (unsigned char*)&sTime;

    //put time in order hour, minute, second on buffer
    for (int i=3;i<6;i++)
	{
    	buffer_datetime[i]=*p++;
 804f07a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 804f07e:	70e3      	strb	r3, [r4, #3]
 804f080:	f89d 3005 	ldrb.w	r3, [sp, #5]
 804f084:	7123      	strb	r3, [r4, #4]
 804f086:	f89d 3006 	ldrb.w	r3, [sp, #6]
 804f08a:	7163      	strb	r3, [r4, #5]
	}
}
 804f08c:	b007      	add	sp, #28
 804f08e:	bd30      	pop	{r4, r5, pc}
 804f090:	2000367c 	.word	0x2000367c

0804f094 <DateTime_Update>:
 * @brief Update the RTC timer from RxData
 * @note The timer is based on the RTC
 * @param buffer_datetime_real	RxData buffer
 * @retval none
 */
void DateTime_Update(uint8_t* buffer_datetime_real) {
 804f094:	b530      	push	{r4, r5, lr}
 804f096:	b087      	sub	sp, #28
	RTC_TimeTypeDef RTC_TimeStruct_Real;
	RTC_DateTypeDef RTC_DateStruct_Real;

	// [Wd, Mo, D, Y, H, M, S]

	RTC_DateStruct_Real.Year = buffer_datetime_real[3]; // 0-infinite
 804f098:	78c3      	ldrb	r3, [r0, #3]
 804f09a:	f88d 3003 	strb.w	r3, [sp, #3]
	RTC_DateStruct_Real.Month = buffer_datetime_real[1]; // 0-12
 804f09e:	7843      	ldrb	r3, [r0, #1]
	RTC_DateStruct_Real.Date = buffer_datetime_real[2]; // 1-31
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
	HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct_Real, RTC_FORMAT_BIN);
 804f0a0:	4d14      	ldr	r5, [pc, #80]	; (804f0f4 <DateTime_Update+0x60>)
	RTC_DateStruct_Real.Month = buffer_datetime_real[1]; // 0-12
 804f0a2:	f88d 3001 	strb.w	r3, [sp, #1]
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
 804f0a6:	a906      	add	r1, sp, #24
	RTC_DateStruct_Real.Date = buffer_datetime_real[2]; // 1-31
 804f0a8:	7883      	ldrb	r3, [r0, #2]
 804f0aa:	f88d 3002 	strb.w	r3, [sp, #2]
void DateTime_Update(uint8_t* buffer_datetime_real) {
 804f0ae:	4604      	mov	r4, r0
	RTC_DateStruct_Real.WeekDay = buffer_datetime_real[0]; // Seg 1 ... Dom 7
 804f0b0:	7803      	ldrb	r3, [r0, #0]
 804f0b2:	f801 3d18 	strb.w	r3, [r1, #-24]!
	HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct_Real, RTC_FORMAT_BIN);
 804f0b6:	2200      	movs	r2, #0
 804f0b8:	4628      	mov	r0, r5
 804f0ba:	f7f6 fc06 	bl	80458ca <HAL_RTC_SetDate>

	/*at 0:0:0*/
	RTC_TimeStruct_Real.Hours = buffer_datetime_real[4]; // 0-23
 804f0be:	7923      	ldrb	r3, [r4, #4]
 804f0c0:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_TimeStruct_Real.Minutes = buffer_datetime_real[5]; // 0-59
 804f0c4:	7963      	ldrb	r3, [r4, #5]
 804f0c6:	f88d 3005 	strb.w	r3, [sp, #5]
	RTC_TimeStruct_Real.Seconds = buffer_datetime_real[6]; // 0-59
	RTC_TimeStruct_Real.TimeFormat = 0;
 804f0ca:	2200      	movs	r2, #0
	RTC_TimeStruct_Real.Seconds = buffer_datetime_real[6]; // 0-59
 804f0cc:	79a3      	ldrb	r3, [r4, #6]
 804f0ce:	f88d 3006 	strb.w	r3, [sp, #6]
	RTC_TimeStruct_Real.SubSeconds = 0;
	RTC_TimeStruct_Real.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
	RTC_TimeStruct_Real.DayLightSaving = RTC_STOREOPERATION_RESET;
	HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct_Real, RTC_FORMAT_BIN);
 804f0d2:	a901      	add	r1, sp, #4
 804f0d4:	4628      	mov	r0, r5
	RTC_TimeStruct_Real.TimeFormat = 0;
 804f0d6:	f88d 2007 	strb.w	r2, [sp, #7]
	RTC_TimeStruct_Real.SubSeconds = 0;
 804f0da:	9202      	str	r2, [sp, #8]
	RTC_TimeStruct_Real.DayLightSaving = RTC_STOREOPERATION_RESET;
 804f0dc:	e9cd 2204 	strd	r2, r2, [sp, #16]
	HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct_Real, RTC_FORMAT_BIN);
 804f0e0:	f7f6 fb82 	bl	80457e8 <HAL_RTC_SetTime>

	HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR2, 0x32F2);
 804f0e4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 804f0e8:	2102      	movs	r1, #2
 804f0ea:	4628      	mov	r0, r5
 804f0ec:	f7f6 fd47 	bl	8045b7e <HAL_RTCEx_BKUPWrite>

}
 804f0f0:	b007      	add	sp, #28
 804f0f2:	bd30      	pop	{r4, r5, pc}
 804f0f4:	2000367c 	.word	0x2000367c

0804f0f8 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 804f0f8:	b570      	push	{r4, r5, r6, lr}
 804f0fa:	b088      	sub	sp, #32

	GPIO_InitTypeDef initStruct = { 0 };
 804f0fc:	2214      	movs	r2, #20
 804f0fe:	2100      	movs	r1, #0
 804f100:	a803      	add	r0, sp, #12
 804f102:	f001 fc1e 	bl	8050942 <memset>
	if (hspi.Instance == SPI2) {
 804f106:	4b25      	ldr	r3, [pc, #148]	; (804f19c <HW_SPI_IoInit+0xa4>)
 804f108:	681a      	ldr	r2, [r3, #0]
 804f10a:	4b25      	ldr	r3, [pc, #148]	; (804f1a0 <HW_SPI_IoInit+0xa8>)
 804f10c:	429a      	cmp	r2, r3
 804f10e:	d143      	bne.n	804f198 <HW_SPI_IoInit+0xa0>
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 804f110:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804f114:	2400      	movs	r4, #0
 804f116:	9400      	str	r4, [sp, #0]
 804f118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		initStruct.Mode = GPIO_MODE_AF_PP;
		initStruct.Pull = GPIO_NOPULL;
		initStruct.Speed = GPIO_SPEED_HIGH;
		initStruct.Alternate = SPI2_AF;

		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f11a:	4822      	ldr	r0, [pc, #136]	; (804f1a4 <HW_SPI_IoInit+0xac>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 804f11c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804f120:	641a      	str	r2, [r3, #64]	; 0x40
 804f122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804f124:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804f128:	9200      	str	r2, [sp, #0]
 804f12a:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 804f12c:	9401      	str	r4, [sp, #4]
 804f12e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f130:	f042 0204 	orr.w	r2, r2, #4
 804f134:	631a      	str	r2, [r3, #48]	; 0x30
 804f136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f138:	f002 0204 	and.w	r2, r2, #4
 804f13c:	9201      	str	r2, [sp, #4]
 804f13e:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 804f140:	9402      	str	r4, [sp, #8]
 804f142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f144:	f042 0202 	orr.w	r2, r2, #2
 804f148:	631a      	str	r2, [r3, #48]	; 0x30
 804f14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f14c:	f003 0302 	and.w	r3, r3, #2
 804f150:	9302      	str	r3, [sp, #8]
 804f152:	9b02      	ldr	r3, [sp, #8]
		initStruct.Alternate = SPI2_AF;
 804f154:	2203      	movs	r2, #3
 804f156:	2305      	movs	r3, #5
 804f158:	e9cd 2306 	strd	r2, r3, [sp, #24]
		initStruct.Mode = GPIO_MODE_AF_PP;
 804f15c:	2502      	movs	r5, #2
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f15e:	aa03      	add	r2, sp, #12
 804f160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		initStruct.Mode = GPIO_MODE_AF_PP;
 804f164:	9504      	str	r5, [sp, #16]
		HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 804f166:	f7ff fcc9 	bl	804eafc <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 804f16a:	aa03      	add	r2, sp, #12
 804f16c:	2104      	movs	r1, #4
 804f16e:	480e      	ldr	r0, [pc, #56]	; (804f1a8 <HW_SPI_IoInit+0xb0>)
 804f170:	f7ff fcc4 	bl	804eafc <HW_GPIO_Init>
		HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 804f174:	aa03      	add	r2, sp, #12
 804f176:	2108      	movs	r1, #8
 804f178:	480b      	ldr	r0, [pc, #44]	; (804f1a8 <HW_SPI_IoInit+0xb0>)
 804f17a:	f7ff fcbf 	bl	804eafc <HW_GPIO_Init>

		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804f17e:	2601      	movs	r6, #1
		initStruct.Pull = GPIO_NOPULL;

		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804f180:	aa03      	add	r2, sp, #12
 804f182:	4629      	mov	r1, r5
 804f184:	4807      	ldr	r0, [pc, #28]	; (804f1a4 <HW_SPI_IoInit+0xac>)
		initStruct.Pull = GPIO_NOPULL;
 804f186:	e9cd 6404 	strd	r6, r4, [sp, #16]
		HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 804f18a:	f7ff fcb7 	bl	804eafc <HW_GPIO_Init>

		HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 804f18e:	4632      	mov	r2, r6
 804f190:	4629      	mov	r1, r5
 804f192:	4804      	ldr	r0, [pc, #16]	; (804f1a4 <HW_SPI_IoInit+0xac>)
 804f194:	f7ff fd34 	bl	804ec00 <HW_GPIO_Write>
	}
}
 804f198:	b008      	add	sp, #32
 804f19a:	bd70      	pop	{r4, r5, r6, pc}
 804f19c:	200036ec 	.word	0x200036ec
 804f1a0:	40003800 	.word	0x40003800
 804f1a4:	40020400 	.word	0x40020400
 804f1a8:	40020800 	.word	0x40020800

0804f1ac <HW_SPI_Init>:
{
 804f1ac:	b508      	push	{r3, lr}
  hspi.Instance = SPI_RADIO;
 804f1ae:	4b1b      	ldr	r3, [pc, #108]	; (804f21c <HW_SPI_Init+0x70>)
 804f1b0:	4a1b      	ldr	r2, [pc, #108]	; (804f220 <HW_SPI_Init+0x74>)
 804f1b2:	601a      	str	r2, [r3, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 804f1b4:	4a1b      	ldr	r2, [pc, #108]	; (804f224 <HW_SPI_Init+0x78>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 804f1b6:	481c      	ldr	r0, [pc, #112]	; (804f228 <HW_SPI_Init+0x7c>)
  uint32_t SysClkTmp = SystemCoreClock;
 804f1b8:	6811      	ldr	r1, [r2, #0]
  uint32_t divisor = 0;
 804f1ba:	2200      	movs	r2, #0
  while (SysClkTmp > hz)
 804f1bc:	4281      	cmp	r1, r0
 804f1be:	d904      	bls.n	804f1ca <HW_SPI_Init+0x1e>
  {
    divisor++;
 804f1c0:	3201      	adds	r2, #1
    SysClkTmp = (SysClkTmp >> 1);

    if (divisor >= 7)
 804f1c2:	2a07      	cmp	r2, #7
    SysClkTmp = (SysClkTmp >> 1);
 804f1c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (divisor >= 7)
 804f1c8:	d1f8      	bne.n	804f1bc <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f1ca:	f012 0104 	ands.w	r1, r2, #4
 804f1ce:	bf18      	it	ne
 804f1d0:	2120      	movne	r1, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 804f1d2:	f012 0002 	ands.w	r0, r2, #2
 804f1d6:	bf18      	it	ne
 804f1d8:	2010      	movne	r0, #16
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804f1da:	f012 0201 	ands.w	r2, r2, #1
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f1de:	ea41 0100 	orr.w	r1, r1, r0
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 804f1e2:	bf18      	it	ne
 804f1e4:	2208      	movne	r2, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 804f1e6:	430a      	orrs	r2, r1
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 804f1e8:	61da      	str	r2, [r3, #28]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 804f1ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 804f1ee:	2200      	movs	r2, #0
 804f1f0:	e9c3 1201 	strd	r1, r2, [r3, #4]
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804f1f4:	4809      	ldr	r0, [pc, #36]	; (804f21c <HW_SPI_Init+0x70>)
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 804f1f6:	60da      	str	r2, [r3, #12]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804f1f8:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804f1fc:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804f200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804f202:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 804f204:	6199      	str	r1, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 804f206:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 804f208:	f7f7 facc 	bl	80467a4 <HAL_SPI_Init>
 804f20c:	b108      	cbz	r0, 804f212 <HW_SPI_Init+0x66>
    Error_Handler();
 804f20e:	f7ff fa8d 	bl	804e72c <Error_Handler>
}
 804f212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_SPI_IoInit();
 804f216:	f7ff bf6f 	b.w	804f0f8 <HW_SPI_IoInit>
 804f21a:	bf00      	nop
 804f21c:	200036ec 	.word	0x200036ec
 804f220:	40003800 	.word	0x40003800
 804f224:	20001048 	.word	0x20001048
 804f228:	00989680 	.word	0x00989680

0804f22c <HW_SPI_InOut>:
{
 804f22c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804f22e:	f04f 33ff 	mov.w	r3, #4294967295
{
 804f232:	f8ad 000e 	strh.w	r0, [sp, #14]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 804f236:	9300      	str	r3, [sp, #0]
 804f238:	f10d 0216 	add.w	r2, sp, #22
 804f23c:	2301      	movs	r3, #1
 804f23e:	f10d 010e 	add.w	r1, sp, #14
 804f242:	4804      	ldr	r0, [pc, #16]	; (804f254 <HW_SPI_InOut+0x28>)
 804f244:	f7f7 faeb 	bl	804681e <HAL_SPI_TransmitReceive>
}
 804f248:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 804f24c:	b007      	add	sp, #28
 804f24e:	f85d fb04 	ldr.w	pc, [sp], #4
 804f252:	bf00      	nop
 804f254:	200036ec 	.word	0x200036ec

0804f258 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init()
{
 804f258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 804f25a:	2210      	movs	r2, #16
 804f25c:	2100      	movs	r1, #0
 804f25e:	a802      	add	r0, sp, #8
 804f260:	f001 fb6f 	bl	8050942 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 804f264:	4815      	ldr	r0, [pc, #84]	; (804f2bc <MX_TIM2_Init+0x64>)
	htim2.Init.Prescaler = 799;
 804f266:	f240 321f 	movw	r2, #799	; 0x31f
 804f26a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804f26e:	2300      	movs	r3, #0
	htim2.Init.Prescaler = 799;
 804f270:	e9c0 1200 	strd	r1, r2, [r0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 1999;
 804f274:	f240 72cf 	movw	r2, #1999	; 0x7cf
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 804f278:	e9cd 3300 	strd	r3, r3, [sp]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804f27c:	6083      	str	r3, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804f27e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804f282:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 804f284:	f7f7 fd00 	bl	8046c88 <HAL_TIM_Base_Init>
 804f288:	b108      	cbz	r0, 804f28e <MX_TIM2_Init+0x36>
		Error_Handler();
 804f28a:	f7ff fa4f 	bl	804e72c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f28e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804f292:	a902      	add	r1, sp, #8
 804f294:	4809      	ldr	r0, [pc, #36]	; (804f2bc <MX_TIM2_Init+0x64>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f296:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 804f298:	f7f7 fd1a 	bl	8046cd0 <HAL_TIM_ConfigClockSource>
 804f29c:	b108      	cbz	r0, 804f2a2 <MX_TIM2_Init+0x4a>
		Error_Handler();
 804f29e:	f7ff fa45 	bl	804e72c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804f2a2:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804f2a4:	4669      	mov	r1, sp
 804f2a6:	4805      	ldr	r0, [pc, #20]	; (804f2bc <MX_TIM2_Init+0x64>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804f2a8:	e9cd 3300 	strd	r3, r3, [sp]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 804f2ac:	f7f7 fda4 	bl	8046df8 <HAL_TIMEx_MasterConfigSynchronization>
 804f2b0:	b108      	cbz	r0, 804f2b6 <MX_TIM2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 804f2b2:	f7ff fa3b 	bl	804e72c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 804f2b6:	b007      	add	sp, #28
 804f2b8:	f85d fb04 	ldr.w	pc, [sp], #4
 804f2bc:	20005ef4 	.word	0x20005ef4

0804f2c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 804f2c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804f2c2:	2210      	movs	r2, #16
 804f2c4:	2100      	movs	r1, #0
 804f2c6:	a802      	add	r0, sp, #8
 804f2c8:	f001 fb3b 	bl	8050942 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804f2cc:	4815      	ldr	r0, [pc, #84]	; (804f324 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 7999;
 804f2ce:	4916      	ldr	r1, [pc, #88]	; (804f328 <MX_TIM3_Init+0x68>)
 804f2d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804f2d4:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 7999;
 804f2d6:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
 804f2da:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 804f2de:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804f2e2:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804f2e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804f2e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 804f2ea:	f7f7 fccd 	bl	8046c88 <HAL_TIM_Base_Init>
 804f2ee:	b108      	cbz	r0, 804f2f4 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 804f2f0:	f7ff fa1c 	bl	804e72c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f2f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804f2f8:	a902      	add	r1, sp, #8
 804f2fa:	480a      	ldr	r0, [pc, #40]	; (804f324 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 804f2fc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804f2fe:	f7f7 fce7 	bl	8046cd0 <HAL_TIM_ConfigClockSource>
 804f302:	b108      	cbz	r0, 804f308 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 804f304:	f7ff fa12 	bl	804e72c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804f308:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804f30a:	4669      	mov	r1, sp
 804f30c:	4805      	ldr	r0, [pc, #20]	; (804f324 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804f30e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 804f312:	f7f7 fd71 	bl	8046df8 <HAL_TIMEx_MasterConfigSynchronization>
 804f316:	b108      	cbz	r0, 804f31c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 804f318:	f7ff fa08 	bl	804e72c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 804f31c:	b007      	add	sp, #28
 804f31e:	f85d fb04 	ldr.w	pc, [sp], #4
 804f322:	bf00      	nop
 804f324:	20005eb4 	.word	0x20005eb4
 804f328:	40000400 	.word	0x40000400

0804f32c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 804f32c:	6803      	ldr	r3, [r0, #0]
 804f32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 804f332:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 804f334:	d116      	bne.n	804f364 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804f336:	2200      	movs	r2, #0
 804f338:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 804f33c:	9200      	str	r2, [sp, #0]
 804f33e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804f340:	f041 0101 	orr.w	r1, r1, #1
 804f344:	6419      	str	r1, [r3, #64]	; 0x40
 804f346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f348:	f003 0301 	and.w	r3, r3, #1
 804f34c:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804f34e:	201c      	movs	r0, #28
 804f350:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 804f352:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 804f354:	f7f4 fc86 	bl	8043c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 804f358:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 804f35a:	b003      	add	sp, #12
 804f35c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804f360:	f7f4 bcb4 	b.w	8043ccc <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 804f364:	4a0b      	ldr	r2, [pc, #44]	; (804f394 <HAL_TIM_Base_MspInit+0x68>)
 804f366:	4293      	cmp	r3, r2
 804f368:	d111      	bne.n	804f38e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 804f36a:	2200      	movs	r2, #0
 804f36c:	4b0a      	ldr	r3, [pc, #40]	; (804f398 <HAL_TIM_Base_MspInit+0x6c>)
 804f36e:	9201      	str	r2, [sp, #4]
 804f370:	6c19      	ldr	r1, [r3, #64]	; 0x40
 804f372:	f041 0102 	orr.w	r1, r1, #2
 804f376:	6419      	str	r1, [r3, #64]	; 0x40
 804f378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804f37a:	f003 0302 	and.w	r3, r3, #2
 804f37e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804f380:	201d      	movs	r0, #29
 804f382:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 804f384:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 804f386:	f7f4 fc6d 	bl	8043c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 804f38a:	201d      	movs	r0, #29
 804f38c:	e7e5      	b.n	804f35a <HAL_TIM_Base_MspInit+0x2e>
}
 804f38e:	b003      	add	sp, #12
 804f390:	f85d fb04 	ldr.w	pc, [sp], #4
 804f394:	40000400 	.word	0x40000400
 804f398:	40023800 	.word	0x40023800

0804f39c <LoraMacProcessNotify>:
  }
}

void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 804f39c:	4b01      	ldr	r3, [pc, #4]	; (804f3a4 <LoraMacProcessNotify+0x8>)
 804f39e:	2201      	movs	r2, #1
 804f3a0:	701a      	strb	r2, [r3, #0]
}
 804f3a2:	4770      	bx	lr
 804f3a4:	20003744 	.word	0x20003744

0804f3a8 <LORA_GetBatteryLevel>:
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
  return 0xFF;
}
 804f3a8:	20ff      	movs	r0, #255	; 0xff
 804f3aa:	4770      	bx	lr

0804f3ac <LORA_TxNeeded>:
  AppData.BuffSize = 0;
 804f3ac:	4803      	ldr	r0, [pc, #12]	; (804f3bc <LORA_TxNeeded+0x10>)
 804f3ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f3b2:	8083      	strh	r3, [r0, #4]
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f3b4:	2100      	movs	r1, #0
 804f3b6:	f7fe bd57 	b.w	804de68 <LORA_send>
 804f3ba:	bf00      	nop
 804f3bc:	200011e0 	.word	0x200011e0

0804f3c0 <LORA_ConfirmClass>:
{
 804f3c0:	b508      	push	{r3, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 804f3c2:	4b07      	ldr	r3, [pc, #28]	; (804f3e0 <LORA_ConfirmClass+0x20>)
 804f3c4:	5c19      	ldrb	r1, [r3, r0]
 804f3c6:	4807      	ldr	r0, [pc, #28]	; (804f3e4 <LORA_ConfirmClass+0x24>)
 804f3c8:	f7ff f8ac 	bl	804e524 <TraceSend>
  AppData.BuffSize = 0;
 804f3cc:	4806      	ldr	r0, [pc, #24]	; (804f3e8 <LORA_ConfirmClass+0x28>)
 804f3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f3d2:	8083      	strh	r3, [r0, #4]
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f3d4:	2100      	movs	r1, #0
}
 804f3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LORA_send((lora_AppData_t*)&AppData, LORAWAN_UNCONFIRMED_MSG);
 804f3da:	f7fe bd45 	b.w	804de68 <LORA_send>
 804f3de:	bf00      	nop
 804f3e0:	08053154 	.word	0x08053154
 804f3e4:	0805313a 	.word	0x0805313a
 804f3e8:	200011e0 	.word	0x200011e0

0804f3ec <LORA_HasJoined>:
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 804f3ec:	2002      	movs	r0, #2
 804f3ee:	f7fe bd7f 	b.w	804def0 <LORA_RequestClass>
	...

0804f3f4 <OnTxTimerEvent>:
{
 804f3f4:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 804f3f6:	4c03      	ldr	r4, [pc, #12]	; (804f404 <OnTxTimerEvent+0x10>)
 804f3f8:	1d20      	adds	r0, r4, #4
 804f3fa:	f7fe ff97 	bl	804e32c <TimerStart>
  AppProcessRequest = LORA_SET;
 804f3fe:	2301      	movs	r3, #1
 804f400:	7723      	strb	r3, [r4, #28]
}
 804f402:	bd10      	pop	{r4, pc}
 804f404:	20003744 	.word	0x20003744

0804f408 <LoraStartTx.part.0>:
static void LoraStartTx(TxEventType_t EventType)
 804f408:	b510      	push	{r4, lr}
    TimerInit(&TxTimer, OnTxTimerEvent);
 804f40a:	4c07      	ldr	r4, [pc, #28]	; (804f428 <LoraStartTx.part.0+0x20>)
 804f40c:	4907      	ldr	r1, [pc, #28]	; (804f42c <LoraStartTx.part.0+0x24>)
 804f40e:	4620      	mov	r0, r4
 804f410:	f7fe ff82 	bl	804e318 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 804f414:	4620      	mov	r0, r4
 804f416:	f64e 2160 	movw	r1, #60000	; 0xea60
 804f41a:	f7ff f821 	bl	804e460 <TimerSetValue>
    OnTxTimerEvent(NULL);
 804f41e:	2000      	movs	r0, #0
}
 804f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    OnTxTimerEvent(NULL);
 804f424:	f7ff bfe6 	b.w	804f3f4 <OnTxTimerEvent>
 804f428:	20003748 	.word	0x20003748
 804f42c:	0804f3f5 	.word	0x0804f3f5

0804f430 <LORA_RxData>:
{
 804f430:	b510      	push	{r4, lr}
 804f432:	4604      	mov	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 804f434:	7941      	ldrb	r1, [r0, #5]
 804f436:	4818      	ldr	r0, [pc, #96]	; (804f498 <LORA_RxData+0x68>)
 804f438:	f7ff f874 	bl	804e524 <TraceSend>
  switch (AppData->Port)
 804f43c:	7963      	ldrb	r3, [r4, #5]
 804f43e:	2b02      	cmp	r3, #2
 804f440:	d015      	beq.n	804f46e <LORA_RxData+0x3e>
 804f442:	2b03      	cmp	r3, #3
 804f444:	d109      	bne.n	804f45a <LORA_RxData+0x2a>
      if (AppData->BuffSize == 1)
 804f446:	7923      	ldrb	r3, [r4, #4]
 804f448:	2b01      	cmp	r3, #1
 804f44a:	d106      	bne.n	804f45a <LORA_RxData+0x2a>
        switch (AppData->Buff[0])
 804f44c:	6823      	ldr	r3, [r4, #0]
 804f44e:	7818      	ldrb	r0, [r3, #0]
 804f450:	2801      	cmp	r0, #1
 804f452:	d009      	beq.n	804f468 <LORA_RxData+0x38>
 804f454:	d307      	bcc.n	804f466 <LORA_RxData+0x36>
 804f456:	2802      	cmp	r0, #2
 804f458:	d006      	beq.n	804f468 <LORA_RxData+0x38>
  refresh_iwdg();
 804f45a:	f000 fe65 	bl	8050128 <refresh_iwdg>
}
 804f45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804f462:	f7ff bfd1 	b.w	804f408 <LoraStartTx.part.0>
            LORA_RequestClass(CLASS_A);
 804f466:	2000      	movs	r0, #0
            LORA_RequestClass(CLASS_C);
 804f468:	f7fe fd42 	bl	804def0 <LORA_RequestClass>
            break;
 804f46c:	e7f5      	b.n	804f45a <LORA_RxData+0x2a>
    	if(AppData->BuffSize == 7)
 804f46e:	7923      	ldrb	r3, [r4, #4]
 804f470:	2b07      	cmp	r3, #7
 804f472:	d105      	bne.n	804f480 <LORA_RxData+0x50>
			DateTime_Update(AppData->Buff);
 804f474:	6820      	ldr	r0, [r4, #0]
 804f476:	f7ff fe0d 	bl	804f094 <DateTime_Update>
			PRINTF("DATE-TIME UPDATED \n\r");
 804f47a:	4808      	ldr	r0, [pc, #32]	; (804f49c <LORA_RxData+0x6c>)
 804f47c:	f7ff f852 	bl	804e524 <TraceSend>
		if (AppData->BuffSize == 0x0D)
 804f480:	7923      	ldrb	r3, [r4, #4]
 804f482:	2b0d      	cmp	r3, #13
 804f484:	d1e9      	bne.n	804f45a <LORA_RxData+0x2a>
			AppLedStateOn = AppData->Buff[0] & 0x01;
 804f486:	6823      	ldr	r3, [r4, #0]
 804f488:	781b      	ldrb	r3, [r3, #0]
			if (AppLedStateOn == RESET)
 804f48a:	07db      	lsls	r3, r3, #31
				PRINTF("LED OFF\n\r");
 804f48c:	bf54      	ite	pl
 804f48e:	4804      	ldrpl	r0, [pc, #16]	; (804f4a0 <LORA_RxData+0x70>)
				PRINTF("LED ON\n\r");
 804f490:	4804      	ldrmi	r0, [pc, #16]	; (804f4a4 <LORA_RxData+0x74>)
 804f492:	f7ff f847 	bl	804e524 <TraceSend>
 804f496:	e7e0      	b.n	804f45a <LORA_RxData+0x2a>
 804f498:	08053158 	.word	0x08053158
 804f49c:	08053175 	.word	0x08053175
 804f4a0:	0805318a 	.word	0x0805318a
 804f4a4:	08053194 	.word	0x08053194

0804f4a8 <main>:
{
 804f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  flags_ble.all_flags=RESET;						/* Reset all bluetooth flags */
 804f4ac:	4ca0      	ldr	r4, [pc, #640]	; (804f730 <main+0x288>)
{
 804f4ae:	b085      	sub	sp, #20
  flags_ble.all_flags=RESET;						/* Reset all bluetooth flags */
 804f4b0:	2300      	movs	r3, #0
 804f4b2:	7023      	strb	r3, [r4, #0]
  HAL_Init();										/* STM32 HAL library initialization*/
 804f4b4:	f7f4 f97a 	bl	80437ac <HAL_Init>
  refresh_iwdg();
 804f4b8:	f000 fe36 	bl	8050128 <refresh_iwdg>
  SystemClock_Config();								/* Configure the system clock*/
 804f4bc:	f000 fc7e 	bl	804fdbc <SystemClock_Config>
  refresh_iwdg();
 804f4c0:	f000 fe32 	bl	8050128 <refresh_iwdg>
  HW_Init();										/* Configure the hardware*/
 804f4c4:	f000 fd78 	bl	804ffb8 <HW_Init>
  refresh_iwdg();
 804f4c8:	f000 fe2e 	bl	8050128 <refresh_iwdg>
  init_station();									/* Initialize WeatherStation Peripherals */
 804f4cc:	f7f2 fa76 	bl	80419bc <init_station>
  refresh_iwdg();
 804f4d0:	f000 fe2a 	bl	8050128 <refresh_iwdg>
	if(f_mount(&SDFatFS, (const TCHAR *)&SDPath, 1) != FR_OK)
 804f4d4:	2201      	movs	r2, #1
 804f4d6:	4997      	ldr	r1, [pc, #604]	; (804f734 <main+0x28c>)
 804f4d8:	4897      	ldr	r0, [pc, #604]	; (804f738 <main+0x290>)
 804f4da:	f7f8 fe55 	bl	8048188 <f_mount>
 804f4de:	b110      	cbz	r0, 804f4e6 <main+0x3e>
		  PRINT_SD_CARD(PRINTF("Erro ao montar o cartao\r\n");)
 804f4e0:	4896      	ldr	r0, [pc, #600]	; (804f73c <main+0x294>)
 804f4e2:	f7ff f81f 	bl	804e524 <TraceSend>
  refresh_iwdg();
 804f4e6:	f000 fe1f 	bl	8050128 <refresh_iwdg>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);		/* Disable Stand-by mode */
 804f4ea:	2101      	movs	r1, #1
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f4ec:	2600      	movs	r6, #0
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);		/* Disable Stand-by mode */
 804f4ee:	4608      	mov	r0, r1
 804f4f0:	f7fe fd3c 	bl	804df6c <LPM_SetOffMode>
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f4f4:	4633      	mov	r3, r6
 804f4f6:	9600      	str	r6, [sp, #0]
 804f4f8:	2203      	movs	r2, #3
 804f4fa:	2101      	movs	r1, #1
 804f4fc:	4890      	ldr	r0, [pc, #576]	; (804f740 <main+0x298>)
  flagsStation.all_flags=0;
 804f4fe:	4d91      	ldr	r5, [pc, #580]	; (804f744 <main+0x29c>)
    if (AppProcessRequest == LORA_SET)
 804f500:	f8df 8288 	ldr.w	r8, [pc, #648]	; 804f78c <main+0x2e4>
		vbat_int = (uint16_t)(double)(vbat*100);
 804f504:	4f90      	ldr	r7, [pc, #576]	; (804f748 <main+0x2a0>)
	PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f506:	f7ff f80d 	bl	804e524 <TraceSend>
	PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n",
 804f50a:	2204      	movs	r2, #4
 804f50c:	4611      	mov	r1, r2
 804f50e:	2302      	movs	r3, #2
 804f510:	9600      	str	r6, [sp, #0]
 804f512:	488e      	ldr	r0, [pc, #568]	; (804f74c <main+0x2a4>)
 804f514:	f7ff f806 	bl	804e524 <TraceSend>
  refresh_iwdg();
 804f518:	f000 fe06 	bl	8050128 <refresh_iwdg>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);	/* Configure the Lora Stack*/
 804f51c:	498c      	ldr	r1, [pc, #560]	; (804f750 <main+0x2a8>)
 804f51e:	1d08      	adds	r0, r1, #4
 804f520:	f7fe fb0c 	bl	804db3c <LORA_Init>
  refresh_iwdg();
 804f524:	f000 fe00 	bl	8050128 <refresh_iwdg>
  LORA_Join();
 804f528:	f7fe fc0a 	bl	804dd40 <LORA_Join>
  refresh_iwdg();
 804f52c:	f000 fdfc 	bl	8050128 <refresh_iwdg>
 804f530:	f7ff ff6a 	bl	804f408 <LoraStartTx.part.0>
  HAL_TIM_Base_Start_IT(&htim3);
 804f534:	4887      	ldr	r0, [pc, #540]	; (804f754 <main+0x2ac>)
 804f536:	f7f7 fa8b 	bl	8046a50 <HAL_TIM_Base_Start_IT>
 804f53a:	46c1      	mov	r9, r8
  flags_ble.all_flags=0;
 804f53c:	7026      	strb	r6, [r4, #0]
  flagsStation.all_flags=0;
 804f53e:	702e      	strb	r6, [r5, #0]
		vbat_int = (uint16_t)(double)(vbat*100);
 804f540:	2600      	movs	r6, #0
	refresh_iwdg();
 804f542:	f000 fdf1 	bl	8050128 <refresh_iwdg>
	if (flagsStation.pluviometer)
 804f546:	782b      	ldrb	r3, [r5, #0]
 804f548:	07d8      	lsls	r0, r3, #31
 804f54a:	d514      	bpl.n	804f576 <main+0xce>
		flagsStation.pluviometer=0;
 804f54c:	f36f 0300 	bfc	r3, #0, #1
		get_time_now((uint8_t*)&buffer_time);
 804f550:	a802      	add	r0, sp, #8
		flagsStation.pluviometer=0;
 804f552:	702b      	strb	r3, [r5, #0]
		get_time_now((uint8_t*)&buffer_time);
 804f554:	f7ff fd7a 	bl	804f04c <get_time_now>
		if ((buffer_time[3] == 23) && (buffer_time[4] == 59) && buffer_time[5] > 40)
 804f558:	f89d 300b 	ldrb.w	r3, [sp, #11]
 804f55c:	2b17      	cmp	r3, #23
 804f55e:	d10a      	bne.n	804f576 <main+0xce>
 804f560:	f89d 300c 	ldrb.w	r3, [sp, #12]
 804f564:	2b3b      	cmp	r3, #59	; 0x3b
 804f566:	d106      	bne.n	804f576 <main+0xce>
 804f568:	f89d 300d 	ldrb.w	r3, [sp, #13]
 804f56c:	2b28      	cmp	r3, #40	; 0x28
		  pluviometer_count = 0;
 804f56e:	bf82      	ittt	hi
 804f570:	4b79      	ldrhi	r3, [pc, #484]	; (804f758 <main+0x2b0>)
 804f572:	2200      	movhi	r2, #0
 804f574:	801a      	strhhi	r2, [r3, #0]
	if(flagsStation.read_sensors)
 804f576:	782b      	ldrb	r3, [r5, #0]
 804f578:	06d9      	lsls	r1, r3, #27
 804f57a:	d521      	bpl.n	804f5c0 <main+0x118>
		flagsStation.read_sensors=0;
 804f57c:	f36f 1304 	bfc	r3, #4, #1
		PRINTF("Leitura dos Sensores\r\n");
 804f580:	4876      	ldr	r0, [pc, #472]	; (804f75c <main+0x2b4>)
		flagsStation.read_sensors=0;
 804f582:	702b      	strb	r3, [r5, #0]
		PRINTF("Leitura dos Sensores\r\n");
 804f584:	f7fe ffce 	bl	804e524 <TraceSend>
		refresh_iwdg();
 804f588:	f000 fdce 	bl	8050128 <refresh_iwdg>
		read_sensors(&Parameters);
 804f58c:	4874      	ldr	r0, [pc, #464]	; (804f760 <main+0x2b8>)
		vbat = get_battery_voltage();
 804f58e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 804f780 <main+0x2d8>
		read_sensors(&Parameters);
 804f592:	f7f2 fa61 	bl	8041a58 <read_sensors>
		refresh_iwdg();
 804f596:	f000 fdc7 	bl	8050128 <refresh_iwdg>
		PRINTF("Leitura da tensão da bateria\r\n");
 804f59a:	4872      	ldr	r0, [pc, #456]	; (804f764 <main+0x2bc>)
 804f59c:	f7fe ffc2 	bl	804e524 <TraceSend>
		vbat = get_battery_voltage();
 804f5a0:	f7f1 fe46 	bl	8041230 <get_battery_voltage>
 804f5a4:	ed8a 0b00 	vstr	d0, [sl]
		refresh_iwdg();
 804f5a8:	f000 fdbe 	bl	8050128 <refresh_iwdg>
		vbat_int = (uint16_t)(double)(vbat*100);
 804f5ac:	463b      	mov	r3, r7
 804f5ae:	4632      	mov	r2, r6
 804f5b0:	e9da 0100 	ldrd	r0, r1, [sl]
 804f5b4:	f7f1 f950 	bl	8040858 <__aeabi_dmul>
 804f5b8:	f7f1 fc10 	bl	8040ddc <__aeabi_d2uiz>
 804f5bc:	4b6a      	ldr	r3, [pc, #424]	; (804f768 <main+0x2c0>)
 804f5be:	8018      	strh	r0, [r3, #0]
	if (flags_ble.enable_handler){
 804f5c0:	7823      	ldrb	r3, [r4, #0]
 804f5c2:	069a      	lsls	r2, r3, #26
 804f5c4:	d515      	bpl.n	804f5f2 <main+0x14a>
		flags_ble.enable_handler = 0;
 804f5c6:	f36f 1345 	bfc	r3, #5, #1
		HAL_TIM_Base_Stop(&htim2);
 804f5ca:	4868      	ldr	r0, [pc, #416]	; (804f76c <main+0x2c4>)
		flags_ble.enable_handler = 0;
 804f5cc:	7023      	strb	r3, [r4, #0]
		HAL_TIM_Base_Stop(&htim2);
 804f5ce:	f7f7 fa28 	bl	8046a22 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim3);
 804f5d2:	4860      	ldr	r0, [pc, #384]	; (804f754 <main+0x2ac>)
 804f5d4:	f7f7 fa25 	bl	8046a22 <HAL_TIM_Base_Stop>
		refresh_iwdg();
 804f5d8:	f000 fda6 	bl	8050128 <refresh_iwdg>
		ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
 804f5dc:	4864      	ldr	r0, [pc, #400]	; (804f770 <main+0x2c8>)
 804f5de:	f7f1 fe6f 	bl	80412c0 <ble_handler>
		refresh_iwdg();
 804f5e2:	f000 fda1 	bl	8050128 <refresh_iwdg>
		HAL_TIM_Base_Start(&htim2);
 804f5e6:	4861      	ldr	r0, [pc, #388]	; (804f76c <main+0x2c4>)
 804f5e8:	f7f7 fa09 	bl	80469fe <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 804f5ec:	4859      	ldr	r0, [pc, #356]	; (804f754 <main+0x2ac>)
 804f5ee:	f7f7 fa06 	bl	80469fe <HAL_TIM_Base_Start>
	if (flags_ble.update_mode==SET){
 804f5f2:	7823      	ldrb	r3, [r4, #0]
 804f5f4:	06db      	lsls	r3, r3, #27
 804f5f6:	d53a      	bpl.n	804f66e <main+0x1c6>
			PRINTF("Update mode \r\n");
 804f5f8:	485e      	ldr	r0, [pc, #376]	; (804f774 <main+0x2cc>)
 804f5fa:	f7fe ff93 	bl	804e524 <TraceSend>
			refresh_iwdg();
 804f5fe:	f000 fd93 	bl	8050128 <refresh_iwdg>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804f602:	f3ef 8310 	mrs	r3, PRIMASK
			flags_ble.update_mode = RESET;
 804f606:	7823      	ldrb	r3, [r4, #0]
 804f608:	f36f 1304 	bfc	r3, #4, #1
 804f60c:	7023      	strb	r3, [r4, #0]
			refresh_iwdg();
 804f60e:	f000 fd8b 	bl	8050128 <refresh_iwdg>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 804f612:	2025      	movs	r0, #37	; 0x25
 804f614:	f7f4 fb68 	bl	8043ce8 <HAL_NVIC_DisableIRQ>
			HAL_UART_AbortReceive_IT(&huart1);
 804f618:	4857      	ldr	r0, [pc, #348]	; (804f778 <main+0x2d0>)
 804f61a:	f7f7 ffe7 	bl	80475ec <HAL_UART_AbortReceive_IT>
			HAL_UART_DeInit(&huart1);
 804f61e:	4856      	ldr	r0, [pc, #344]	; (804f778 <main+0x2d0>)
 804f620:	f7f7 fd02 	bl	8047028 <HAL_UART_DeInit>
			HAL_Delay(1);
 804f624:	2001      	movs	r0, #1
 804f626:	f000 fa85 	bl	804fb34 <HAL_Delay>
			HAL_TIM_Base_Stop(&htim2);
 804f62a:	4850      	ldr	r0, [pc, #320]	; (804f76c <main+0x2c4>)
 804f62c:	f7f7 f9f9 	bl	8046a22 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 804f630:	4848      	ldr	r0, [pc, #288]	; (804f754 <main+0x2ac>)
 804f632:	f7f7 f9f6 	bl	8046a22 <HAL_TIM_Base_Stop>
			COM_Init();
 804f636:	f000 ffc1 	bl	80505bc <COM_Init>
			HAL_Delay(1);
 804f63a:	2001      	movs	r0, #1
 804f63c:	f000 fa7a 	bl	804fb34 <HAL_Delay>
			COM_Flush();
 804f640:	f000 ffec 	bl	805061c <COM_Flush>
			refresh_iwdg();
 804f644:	f000 fd70 	bl	8050128 <refresh_iwdg>
			FW_UPDATE_Run();
 804f648:	f7ff f9bc 	bl	804e9c4 <FW_UPDATE_Run>
			refresh_iwdg();
 804f64c:	f000 fd6c 	bl	8050128 <refresh_iwdg>
			HAL_TIM_Base_Start(&htim2);
 804f650:	4846      	ldr	r0, [pc, #280]	; (804f76c <main+0x2c4>)
 804f652:	f7f7 f9d4 	bl	80469fe <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 804f656:	483f      	ldr	r0, [pc, #252]	; (804f754 <main+0x2ac>)
 804f658:	f7f7 f9d1 	bl	80469fe <HAL_TIM_Base_Start>
			MX_USART1_UART_Init();
 804f65c:	f7f1 fe6e 	bl	804133c <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 804f660:	2201      	movs	r2, #1
 804f662:	4946      	ldr	r1, [pc, #280]	; (804f77c <main+0x2d4>)
 804f664:	4844      	ldr	r0, [pc, #272]	; (804f778 <main+0x2d0>)
 804f666:	f7f7 fdb5 	bl	80471d4 <HAL_UART_Receive_IT>
			refresh_iwdg();
 804f66a:	f000 fd5d 	bl	8050128 <refresh_iwdg>
    if (AppProcessRequest == LORA_SET)
 804f66e:	f898 301c 	ldrb.w	r3, [r8, #28]
 804f672:	2b01      	cmp	r3, #1
 804f674:	d129      	bne.n	804f6ca <main+0x222>
    	HAL_TIM_Base_Stop(&htim3);
 804f676:	4837      	ldr	r0, [pc, #220]	; (804f754 <main+0x2ac>)
	vbat_int = (uint16_t)(double)(vbat*100);
 804f678:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 804f768 <main+0x2c0>
    	HAL_TIM_Base_Stop(&htim3);
 804f67c:	f7f7 f9d1 	bl	8046a22 <HAL_TIM_Base_Stop>
    	HAL_TIM_Base_Stop(&htim2);
 804f680:	483a      	ldr	r0, [pc, #232]	; (804f76c <main+0x2c4>)
 804f682:	f7f7 f9ce 	bl	8046a22 <HAL_TIM_Base_Stop>
    	refresh_iwdg();
 804f686:	f000 fd4f 	bl	8050128 <refresh_iwdg>
    	AppProcessRequest = LORA_RESET;
 804f68a:	2300      	movs	r3, #0
 804f68c:	f888 301c 	strb.w	r3, [r8, #28]
	vbat = get_battery_voltage();
 804f690:	f7f1 fdce 	bl	8041230 <get_battery_voltage>
 804f694:	4b3a      	ldr	r3, [pc, #232]	; (804f780 <main+0x2d8>)
 804f696:	ec51 0b10 	vmov	r0, r1, d0
 804f69a:	ed83 0b00 	vstr	d0, [r3]
	vbat_int = (uint16_t)(double)(vbat*100);
 804f69e:	4632      	mov	r2, r6
 804f6a0:	463b      	mov	r3, r7
 804f6a2:	f7f1 f8d9 	bl	8040858 <__aeabi_dmul>
 804f6a6:	f7f1 fb99 	bl	8040ddc <__aeabi_d2uiz>
 804f6aa:	f8aa 0000 	strh.w	r0, [sl]
	if (LORA_JoinStatus() != LORA_SET) {
 804f6ae:	f7fe fbcb 	bl	804de48 <LORA_JoinStatus>
 804f6b2:	2801      	cmp	r0, #1
 804f6b4:	d018      	beq.n	804f6e8 <main+0x240>
		LORA_Join();
 804f6b6:	f7fe fb43 	bl	804dd40 <LORA_Join>
    	refresh_iwdg();
 804f6ba:	f000 fd35 	bl	8050128 <refresh_iwdg>
    	HAL_TIM_Base_Start(&htim2);
 804f6be:	482b      	ldr	r0, [pc, #172]	; (804f76c <main+0x2c4>)
 804f6c0:	f7f7 f99d 	bl	80469fe <HAL_TIM_Base_Start>
    	HAL_TIM_Base_Start(&htim3);
 804f6c4:	4823      	ldr	r0, [pc, #140]	; (804f754 <main+0x2ac>)
 804f6c6:	f7f7 f99a 	bl	80469fe <HAL_TIM_Base_Start>
    if (LoraMacProcessRequest == LORA_SET)
 804f6ca:	f899 3000 	ldrb.w	r3, [r9]
 804f6ce:	2b01      	cmp	r3, #1
 804f6d0:	f47f af37 	bne.w	804f542 <main+0x9a>
    	refresh_iwdg();
 804f6d4:	f000 fd28 	bl	8050128 <refresh_iwdg>
    	LoraMacProcessRequest = LORA_RESET;
 804f6d8:	2300      	movs	r3, #0
 804f6da:	f889 3000 	strb.w	r3, [r9]
    	LoRaMacProcess();
 804f6de:	f7fa fd09 	bl	804a0f4 <LoRaMacProcess>
    	refresh_iwdg();
 804f6e2:	f000 fd21 	bl	8050128 <refresh_iwdg>
 804f6e6:	e72c      	b.n	804f542 <main+0x9a>
	get_time_now(AppData.Buff);
 804f6e8:	f8df b09c 	ldr.w	fp, [pc, #156]	; 804f788 <main+0x2e0>
 804f6ec:	f8db 0000 	ldr.w	r0, [fp]
 804f6f0:	f7ff fcac 	bl	804f04c <get_time_now>
	AppData.Port = LORAWAN_APP_PORT;
 804f6f4:	2302      	movs	r3, #2
 804f6f6:	f88b 3005 	strb.w	r3, [fp, #5]
	memcpy(&(AppData.Buff[6]),Buffer_to_send,sizeof(Estation_Parameters));
 804f6fa:	f8db 2000 	ldr.w	r2, [fp]
 804f6fe:	4b21      	ldr	r3, [pc, #132]	; (804f784 <main+0x2dc>)
 804f700:	1d91      	adds	r1, r2, #6
 804f702:	f103 000c 	add.w	r0, r3, #12
 804f706:	f853 cb04 	ldr.w	ip, [r3], #4
 804f70a:	f841 cb04 	str.w	ip, [r1], #4
 804f70e:	4283      	cmp	r3, r0
 804f710:	d1f9      	bne.n	804f706 <main+0x25e>
 804f712:	781b      	ldrb	r3, [r3, #0]
 804f714:	700b      	strb	r3, [r1, #0]
	AppData.Buff[19]= (vbat_int>>8)&0xFF;
 804f716:	f8ba 3000 	ldrh.w	r3, [sl]
	AppData.Buff[20]= vbat_int&0xFF;
 804f71a:	7513      	strb	r3, [r2, #20]
	AppData.Buff[19]= (vbat_int>>8)&0xFF;
 804f71c:	0a19      	lsrs	r1, r3, #8
 804f71e:	74d1      	strb	r1, [r2, #19]
	AppData.BuffSize = sizeof(Estation_Parameters)+8;
 804f720:	2315      	movs	r3, #21
	LORA_send((lora_AppData_t*)&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 804f722:	2100      	movs	r1, #0
 804f724:	4818      	ldr	r0, [pc, #96]	; (804f788 <main+0x2e0>)
	AppData.BuffSize = sizeof(Estation_Parameters)+8;
 804f726:	f88b 3004 	strb.w	r3, [fp, #4]
	LORA_send((lora_AppData_t*)&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 804f72a:	f7fe fb9d 	bl	804de68 <LORA_send>
 804f72e:	e7c4      	b.n	804f6ba <main+0x212>
 804f730:	20003c38 	.word	0x20003c38
 804f734:	20003d81 	.word	0x20003d81
 804f738:	20004db8 	.word	0x20004db8
 804f73c:	0805319d 	.word	0x0805319d
 804f740:	080531b7 	.word	0x080531b7
 804f744:	20003c8c 	.word	0x20003c8c
 804f748:	40590000 	.word	0x40590000
 804f74c:	080531da 	.word	0x080531da
 804f750:	200011e8 	.word	0x200011e8
 804f754:	20005eb4 	.word	0x20005eb4
 804f758:	20002318 	.word	0x20002318
 804f75c:	080531fd 	.word	0x080531fd
 804f760:	20003c8d 	.word	0x20003c8d
 804f764:	08053214 	.word	0x08053214
 804f768:	20005fb2 	.word	0x20005fb2
 804f76c:	20005ef4 	.word	0x20005ef4
 804f770:	20002308 	.word	0x20002308
 804f774:	08053234 	.word	0x08053234
 804f778:	20003c3c 	.word	0x20003c3c
 804f77c:	20003c30 	.word	0x20003c30
 804f780:	20005f78 	.word	0x20005f78
 804f784:	20003761 	.word	0x20003761
 804f788:	200011e0 	.word	0x200011e0
 804f78c:	20003744 	.word	0x20003744

0804f790 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 804f790:	4b05      	ldr	r3, [pc, #20]	; (804f7a8 <MX_SDIO_SD_Init+0x18>)
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 804f792:	4906      	ldr	r1, [pc, #24]	; (804f7ac <MX_SDIO_SD_Init+0x1c>)
 804f794:	2200      	movs	r2, #0
 804f796:	e9c3 1200 	strd	r1, r2, [r3]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 804f79a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 804f79e:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd.Init.ClockDiv = 5;
 804f7a2:	2205      	movs	r2, #5
 804f7a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 804f7a6:	4770      	bx	lr
 804f7a8:	20006074 	.word	0x20006074
 804f7ac:	40012c00 	.word	0x40012c00

0804f7b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 804f7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804f7b4:	4606      	mov	r6, r0
 804f7b6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f7b8:	2214      	movs	r2, #20
 804f7ba:	2100      	movs	r1, #0
 804f7bc:	a803      	add	r0, sp, #12
 804f7be:	f001 f8c0 	bl	8050942 <memset>
  if(sdHandle->Instance==SDIO)
 804f7c2:	6832      	ldr	r2, [r6, #0]
 804f7c4:	4b4d      	ldr	r3, [pc, #308]	; (804f8fc <HAL_SD_MspInit+0x14c>)
 804f7c6:	429a      	cmp	r2, r3
 804f7c8:	f040 8094 	bne.w	804f8f4 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 804f7cc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 804f7d0:	2500      	movs	r5, #0
 804f7d2:	9500      	str	r5, [sp, #0]
 804f7d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f7d6:	484a      	ldr	r0, [pc, #296]	; (804f900 <HAL_SD_MspInit+0x150>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 804f7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804f7dc:	645a      	str	r2, [r3, #68]	; 0x44
 804f7de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f7e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804f7e4:	9200      	str	r2, [sp, #0]
 804f7e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804f7e8:	9501      	str	r5, [sp, #4]
 804f7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f7ec:	f042 0204 	orr.w	r2, r2, #4
 804f7f0:	631a      	str	r2, [r3, #48]	; 0x30
 804f7f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f7f4:	f002 0204 	and.w	r2, r2, #4
 804f7f8:	9201      	str	r2, [sp, #4]
 804f7fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f7fc:	9502      	str	r5, [sp, #8]
 804f7fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f800:	f042 0208 	orr.w	r2, r2, #8
 804f804:	631a      	str	r2, [r3, #48]	; 0x30
 804f806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f808:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f80c:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f80e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f810:	f04f 0a02 	mov.w	sl, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f814:	f04f 0901 	mov.w	r9, #1
 804f818:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f81a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 804f81e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f820:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f822:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 804f826:	e9cd 3a03 	strd	r3, sl, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f82a:	e9cd 9705 	strd	r9, r7, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804f82e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f832:	f7f4 fe11 	bl	8044458 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804f836:	eb0d 0104 	add.w	r1, sp, r4
 804f83a:	4832      	ldr	r0, [pc, #200]	; (804f904 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 804f83c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804f83e:	e9cd 8a03 	strd	r8, sl, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 804f842:	4c31      	ldr	r4, [pc, #196]	; (804f908 <HAL_SD_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804f844:	e9cd 9705 	strd	r9, r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804f848:	f7f4 fe06 	bl	8044458 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804f84c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 804f914 <HAL_SD_MspInit+0x164>
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f850:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 804f852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804f856:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f85a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 804f85e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804f862:	e9c4 9304 	strd	r9, r3, [r4, #16]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 804f866:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 804f86a:	2320      	movs	r3, #32
 804f86c:	e9c4 a306 	strd	sl, r3, [r4, #24]
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f870:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 804f874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804f878:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f87a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 804f87e:	e9c4 5808 	strd	r5, r8, [r4, #32]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f882:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 804f886:	f7f4 fa7b 	bl	8043d80 <HAL_DMA_Init>
 804f88a:	b108      	cbz	r0, 804f890 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 804f88c:	f7fe ff4e 	bl	804e72c <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804f890:	4a1e      	ldr	r2, [pc, #120]	; (804f90c <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 804f892:	6434      	str	r4, [r6, #64]	; 0x40
 804f894:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 804f896:	4c1e      	ldr	r4, [pc, #120]	; (804f910 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 804f898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804f89c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f8a0:	2140      	movs	r1, #64	; 0x40
 804f8a2:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f8a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804f8a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 804f8ac:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 804f8b0:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f8b2:	2704      	movs	r7, #4
 804f8b4:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804f8b6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804f8ba:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 804f8be:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 804f8c0:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f8c4:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 804f8c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804f8cc:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 804f8ce:	e9c4 5206 	strd	r5, r2, [r4, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 804f8d2:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 804f8d6:	f7f4 fa53 	bl	8043d80 <HAL_DMA_Init>
 804f8da:	b108      	cbz	r0, 804f8e0 <HAL_SD_MspInit+0x130>
    {
      Error_Handler();
 804f8dc:	f7fe ff26 	bl	804e72c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f8e0:	2200      	movs	r2, #0
 804f8e2:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804f8e4:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f8e6:	4611      	mov	r1, r2
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 804f8e8:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 804f8ea:	f7f4 f9bb 	bl	8043c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 804f8ee:	2031      	movs	r0, #49	; 0x31
 804f8f0:	f7f4 f9ec 	bl	8043ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 804f8f4:	b008      	add	sp, #32
 804f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804f8fa:	bf00      	nop
 804f8fc:	40012c00 	.word	0x40012c00
 804f900:	40020800 	.word	0x40020800
 804f904:	40020c00 	.word	0x40020c00
 804f908:	20005fb4 	.word	0x20005fb4
 804f90c:	400264a0 	.word	0x400264a0
 804f910:	20006014 	.word	0x20006014
 804f914:	40026458 	.word	0x40026458

0804f918 <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 804f918:	b513      	push	{r0, r1, r4, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 804f91a:	4604      	mov	r4, r0
 804f91c:	b910      	cbnz	r0, 804f924 <SFU_APP_InstallAtNextReset+0xc>
  {
    return HAL_ERROR;
 804f91e:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 804f920:	b002      	add	sp, #8
 804f922:	bd10      	pop	{r4, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 804f924:	4b09      	ldr	r3, [pc, #36]	; (804f94c <SFU_APP_InstallAtNextReset+0x34>)
 804f926:	69db      	ldr	r3, [r3, #28]
 804f928:	9301      	str	r3, [sp, #4]
 804f92a:	f44f 7100 	mov.w	r1, #512	; 0x200
 804f92e:	4618      	mov	r0, r3
 804f930:	f7fe ff70 	bl	804e814 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 804f934:	2800      	cmp	r0, #0
 804f936:	d1f2      	bne.n	804f91e <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 804f938:	f44f 72a0 	mov.w	r2, #320	; 0x140
 804f93c:	4621      	mov	r1, r4
 804f93e:	9801      	ldr	r0, [sp, #4]
 804f940:	f7fe ff98 	bl	804e874 <FLASH_If_Write>
    return HAL_ERROR;
 804f944:	3000      	adds	r0, #0
 804f946:	bf18      	it	ne
 804f948:	2001      	movne	r0, #1
 804f94a:	e7e9      	b.n	804f920 <SFU_APP_InstallAtNextReset+0x8>
 804f94c:	080525e8 	.word	0x080525e8

0804f950 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804f950:	4b06      	ldr	r3, [pc, #24]	; (804f96c <SFU_APP_GetDownloadAreaInfo+0x1c>)
 804f952:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804f956:	4b06      	ldr	r3, [pc, #24]	; (804f970 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 804f958:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 804f95a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804f95e:	3301      	adds	r3, #1
 804f960:	1a9b      	subs	r3, r3, r2
 804f962:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 804f964:	f44f 7300 	mov.w	r3, #512	; 0x200
 804f968:	608b      	str	r3, [r1, #8]
}
 804f96a:	4770      	bx	lr
 804f96c:	080525e8 	.word	0x080525e8
 804f970:	08052608 	.word	0x08052608

0804f974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 804f974:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f976:	2214      	movs	r2, #20
{
 804f978:	b08a      	sub	sp, #40	; 0x28
 804f97a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804f97c:	2100      	movs	r1, #0
 804f97e:	eb0d 0002 	add.w	r0, sp, r2
 804f982:	f000 ffde 	bl	8050942 <memset>
  if(hadc->Instance==ADC1)
 804f986:	6823      	ldr	r3, [r4, #0]
 804f988:	4a21      	ldr	r2, [pc, #132]	; (804fa10 <HAL_ADC_MspInit+0x9c>)
 804f98a:	4293      	cmp	r3, r2
 804f98c:	d11f      	bne.n	804f9ce <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 804f98e:	4b21      	ldr	r3, [pc, #132]	; (804fa14 <HAL_ADC_MspInit+0xa0>)
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f990:	4821      	ldr	r0, [pc, #132]	; (804fa18 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 804f992:	2100      	movs	r1, #0
 804f994:	9101      	str	r1, [sp, #4]
 804f996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804f99c:	645a      	str	r2, [r3, #68]	; 0x44
 804f99e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f9a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 804f9a4:	9201      	str	r2, [sp, #4]
 804f9a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804f9a8:	9102      	str	r1, [sp, #8]
 804f9aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f9ac:	f042 0201 	orr.w	r2, r2, #1
 804f9b0:	631a      	str	r2, [r3, #48]	; 0x30
 804f9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f9b4:	f003 0301 	and.w	r3, r3, #1
 804f9b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804f9ba:	2110      	movs	r1, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804f9bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804f9be:	2303      	movs	r3, #3
 804f9c0:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804f9c4:	a905      	add	r1, sp, #20
    PA7     ------> ADC2_IN7		// MIK
    */
	GPIO_InitStruct.Pin = BIRUTA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804f9c6:	f7f4 fd47 	bl	8044458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 804f9ca:	b00a      	add	sp, #40	; 0x28
 804f9cc:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 804f9ce:	4a13      	ldr	r2, [pc, #76]	; (804fa1c <HAL_ADC_MspInit+0xa8>)
 804f9d0:	4293      	cmp	r3, r2
 804f9d2:	d1fa      	bne.n	804f9ca <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 804f9d4:	4b0f      	ldr	r3, [pc, #60]	; (804fa14 <HAL_ADC_MspInit+0xa0>)
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804f9d6:	4812      	ldr	r0, [pc, #72]	; (804fa20 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 804f9d8:	2100      	movs	r1, #0
 804f9da:	9103      	str	r1, [sp, #12]
 804f9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f9de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804f9e2:	645a      	str	r2, [r3, #68]	; 0x44
 804f9e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f9e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 804f9ea:	9203      	str	r2, [sp, #12]
 804f9ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804f9ee:	9104      	str	r1, [sp, #16]
 804f9f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804f9f2:	f042 0201 	orr.w	r2, r2, #1
 804f9f6:	631a      	str	r2, [r3, #48]	; 0x30
 804f9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f9fa:	f003 0301 	and.w	r3, r3, #1
 804f9fe:	9304      	str	r3, [sp, #16]
 804fa00:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804fa02:	2280      	movs	r2, #128	; 0x80
 804fa04:	2303      	movs	r3, #3
 804fa06:	e9cd 2305 	strd	r2, r3, [sp, #20]
	HAL_GPIO_Init(BIRUTA_GPIO_Port, &GPIO_InitStruct);
 804fa0a:	a905      	add	r1, sp, #20
 804fa0c:	e7db      	b.n	804f9c6 <HAL_ADC_MspInit+0x52>
 804fa0e:	bf00      	nop
 804fa10:	40012000 	.word	0x40012000
 804fa14:	40023800 	.word	0x40023800
 804fa18:	40020800 	.word	0x40020800
 804fa1c:	40012100 	.word	0x40012100
 804fa20:	40020000 	.word	0x40020000

0804fa24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 804fa24:	b530      	push	{r4, r5, lr}
 804fa26:	4604      	mov	r4, r0
 804fa28:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fa2a:	2214      	movs	r2, #20
 804fa2c:	2100      	movs	r1, #0
 804fa2e:	a803      	add	r0, sp, #12
 804fa30:	f000 ff87 	bl	8050942 <memset>
  if(hi2c->Instance==I2C1)
 804fa34:	6822      	ldr	r2, [r4, #0]
 804fa36:	4b14      	ldr	r3, [pc, #80]	; (804fa88 <HAL_I2C_MspInit+0x64>)
 804fa38:	429a      	cmp	r2, r3
 804fa3a:	d123      	bne.n	804fa84 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fa3c:	4c13      	ldr	r4, [pc, #76]	; (804fa8c <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = SCL_BME280_Pin|SDA_BME280_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fa3e:	4814      	ldr	r0, [pc, #80]	; (804fa90 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fa40:	2500      	movs	r5, #0
 804fa42:	9501      	str	r5, [sp, #4]
 804fa44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804fa46:	f043 0302 	orr.w	r3, r3, #2
 804fa4a:	6323      	str	r3, [r4, #48]	; 0x30
 804fa4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804fa4e:	f003 0302 	and.w	r3, r3, #2
 804fa52:	9301      	str	r3, [sp, #4]
 804fa54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804fa56:	22c0      	movs	r2, #192	; 0xc0
 804fa58:	2312      	movs	r3, #18
 804fa5a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804fa5e:	2101      	movs	r1, #1
 804fa60:	2303      	movs	r3, #3
 804fa62:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 804fa66:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fa68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 804fa6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fa6c:	f7f4 fcf4 	bl	8044458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 804fa70:	9502      	str	r5, [sp, #8]
 804fa72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804fa74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804fa78:	6423      	str	r3, [r4, #64]	; 0x40
 804fa7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804fa7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804fa80:	9302      	str	r3, [sp, #8]
 804fa82:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 804fa84:	b009      	add	sp, #36	; 0x24
 804fa86:	bd30      	pop	{r4, r5, pc}
 804fa88:	40005400 	.word	0x40005400
 804fa8c:	40023800 	.word	0x40023800
 804fa90:	40020400 	.word	0x40020400

0804fa94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 804fa96:	4604      	mov	r4, r0
 804fa98:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fa9a:	2214      	movs	r2, #20
 804fa9c:	2100      	movs	r1, #0
 804fa9e:	a803      	add	r0, sp, #12
 804faa0:	f000 ff4f 	bl	8050942 <memset>
  if(hspi->Instance==SPI2)
 804faa4:	6822      	ldr	r2, [r4, #0]
 804faa6:	4b1f      	ldr	r3, [pc, #124]	; (804fb24 <HAL_SPI_MspInit+0x90>)
 804faa8:	429a      	cmp	r2, r3
 804faaa:	d138      	bne.n	804fb1e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 804faac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 804fab0:	2400      	movs	r4, #0
 804fab2:	9400      	str	r4, [sp, #0]
 804fab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fab6:	481c      	ldr	r0, [pc, #112]	; (804fb28 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 804fab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804fabc:	641a      	str	r2, [r3, #64]	; 0x40
 804fabe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fac0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 804fac4:	9200      	str	r2, [sp, #0]
 804fac6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804fac8:	9401      	str	r4, [sp, #4]
 804faca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804facc:	f042 0204 	orr.w	r2, r2, #4
 804fad0:	631a      	str	r2, [r3, #48]	; 0x30
 804fad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fad4:	f002 0204 	and.w	r2, r2, #4
 804fad8:	9201      	str	r2, [sp, #4]
 804fada:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804fadc:	9402      	str	r4, [sp, #8]
 804fade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804fae0:	f042 0202 	orr.w	r2, r2, #2
 804fae4:	631a      	str	r2, [r3, #48]	; 0x30
 804fae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804fae8:	f003 0302 	and.w	r3, r3, #2
 804faec:	9302      	str	r3, [sp, #8]
 804faee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804faf0:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804faf2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804faf6:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804faf8:	2603      	movs	r6, #3
 804fafa:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fafc:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804fb00:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804fb04:	f7f4 fca8 	bl	8044458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 804fb08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804fb0c:	a903      	add	r1, sp, #12
 804fb0e:	4807      	ldr	r0, [pc, #28]	; (804fb2c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 804fb10:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804fb12:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804fb16:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 804fb1a:	f7f4 fc9d 	bl	8044458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 804fb1e:	b009      	add	sp, #36	; 0x24
 804fb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804fb22:	bf00      	nop
 804fb24:	40003800 	.word	0x40003800
 804fb28:	40020800 	.word	0x40020800
 804fb2c:	40020400 	.word	0x40020400

0804fb30 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 804fb30:	2000      	movs	r0, #0
 804fb32:	4770      	bx	lr

0804fb34 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 804fb34:	b082      	sub	sp, #8
 804fb36:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804fb38:	9801      	ldr	r0, [sp, #4]
}
 804fb3a:	b002      	add	sp, #8
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 804fb3c:	f7ff b9f4 	b.w	804ef28 <HW_RTC_DelayMs>

0804fb40 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 804fb40:	b082      	sub	sp, #8
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 804fb42:	2300      	movs	r3, #0
 804fb44:	9301      	str	r3, [sp, #4]
 804fb46:	4b06      	ldr	r3, [pc, #24]	; (804fb60 <HAL_MspInit+0x20>)
 804fb48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fb4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804fb4e:	641a      	str	r2, [r3, #64]	; 0x40
 804fb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804fb52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804fb56:	9301      	str	r3, [sp, #4]
 804fb58:	9b01      	ldr	r3, [sp, #4]

  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  HW_GpioInit();
}
 804fb5a:	b002      	add	sp, #8
  HW_GpioInit();
 804fb5c:	f000 b860 	b.w	804fc20 <HW_GpioInit>
 804fb60:	40023800 	.word	0x40023800

0804fb64 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 804fb64:	b500      	push	{lr}
 804fb66:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804fb68:	222c      	movs	r2, #44	; 0x2c
 804fb6a:	2100      	movs	r1, #0
 804fb6c:	a805      	add	r0, sp, #20
 804fb6e:	f000 fee8 	bl	8050942 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 804fb72:	2210      	movs	r2, #16
 804fb74:	2100      	movs	r1, #0
 804fb76:	4668      	mov	r0, sp
 804fb78:	f000 fee3 	bl	8050942 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI; //_LSE
 804fb7c:	2308      	movs	r3, #8
 804fb7e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804fb80:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.LSIState = RCC_LSI_ON; //.LSEState = LSE_ON
 804fb82:	2301      	movs	r3, #1
 804fb84:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804fb86:	f7f5 fa31 	bl	8044fec <HAL_RCC_OscConfig>
 804fb8a:	b108      	cbz	r0, 804fb90 <HAL_RTC_MspInit+0x2c>
  {
    Error_Handler();
 804fb8c:	f7fe fdce 	bl	804e72c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804fb90:	2302      	movs	r3, #2
 804fb92:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804fb94:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;//LSE
 804fb96:	f44f 7300 	mov.w	r3, #512	; 0x200
 804fb9a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804fb9c:	f7f5 fcb4 	bl	8045508 <HAL_RCCEx_PeriphCLKConfig>
 804fba0:	b108      	cbz	r0, 804fba6 <HAL_RTC_MspInit+0x42>
  {
    Error_Handler();
 804fba2:	f7fe fdc3 	bl	804e72c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();//RTCCLK
 804fba6:	4b07      	ldr	r3, [pc, #28]	; (804fbc4 <HAL_RTC_MspInit+0x60>)
 804fba8:	2201      	movs	r2, #1
 804fbaa:	601a      	str	r2, [r3, #0]

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 804fbac:	2200      	movs	r2, #0
 804fbae:	4611      	mov	r1, r2
 804fbb0:	2029      	movs	r0, #41	; 0x29
 804fbb2:	f7f4 f857 	bl	8043c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 804fbb6:	2029      	movs	r0, #41	; 0x29
 804fbb8:	f7f4 f888 	bl	8043ccc <HAL_NVIC_EnableIRQ>
}
 804fbbc:	b011      	add	sp, #68	; 0x44
 804fbbe:	f85d fb04 	ldr.w	pc, [sp], #4
 804fbc2:	bf00      	nop
 804fbc4:	42470e3c 	.word	0x42470e3c

0804fbc8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  TimerIrqHandler();
 804fbc8:	f7fe bbe6 	b.w	804e398 <TimerIrqHandler>

0804fbcc <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	HW_GPIO_IrqHandler(GPIO_Pin);
 804fbcc:	f7ff b80a 	b.w	804ebe4 <HW_GPIO_IrqHandler>

0804fbd0 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 804fbd0:	2810      	cmp	r0, #16
 804fbd2:	d020      	beq.n	804fc16 <MSP_GetIRQn+0x46>
 804fbd4:	d80c      	bhi.n	804fbf0 <MSP_GetIRQn+0x20>
 804fbd6:	2802      	cmp	r0, #2
 804fbd8:	d019      	beq.n	804fc0e <MSP_GetIRQn+0x3e>
 804fbda:	d803      	bhi.n	804fbe4 <MSP_GetIRQn+0x14>
 804fbdc:	2801      	cmp	r0, #1
 804fbde:	d01c      	beq.n	804fc1a <MSP_GetIRQn+0x4a>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI15_10_IRQn;
 804fbe0:	2028      	movs	r0, #40	; 0x28
 804fbe2:	4770      	bx	lr
  switch (GPIO_Pin)
 804fbe4:	2804      	cmp	r0, #4
 804fbe6:	d014      	beq.n	804fc12 <MSP_GetIRQn+0x42>
 804fbe8:	2808      	cmp	r0, #8
 804fbea:	d1f9      	bne.n	804fbe0 <MSP_GetIRQn+0x10>
      return EXTI3_IRQn;
 804fbec:	2009      	movs	r0, #9
 804fbee:	4770      	bx	lr
  switch (GPIO_Pin)
 804fbf0:	2880      	cmp	r0, #128	; 0x80
 804fbf2:	d004      	beq.n	804fbfe <MSP_GetIRQn+0x2e>
 804fbf4:	d805      	bhi.n	804fc02 <MSP_GetIRQn+0x32>
 804fbf6:	2820      	cmp	r0, #32
 804fbf8:	d001      	beq.n	804fbfe <MSP_GetIRQn+0x2e>
 804fbfa:	2840      	cmp	r0, #64	; 0x40
 804fbfc:	d1f0      	bne.n	804fbe0 <MSP_GetIRQn+0x10>
      return EXTI9_5_IRQn;
 804fbfe:	2017      	movs	r0, #23
 804fc00:	4770      	bx	lr
  switch (GPIO_Pin)
 804fc02:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 804fc06:	d0fa      	beq.n	804fbfe <MSP_GetIRQn+0x2e>
 804fc08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 804fc0c:	e7f6      	b.n	804fbfc <MSP_GetIRQn+0x2c>
      return EXTI1_IRQn;
 804fc0e:	2007      	movs	r0, #7
 804fc10:	4770      	bx	lr
      return EXTI2_IRQn;
 804fc12:	2008      	movs	r0, #8
 804fc14:	4770      	bx	lr
      return EXTI4_IRQn;
 804fc16:	200a      	movs	r0, #10
 804fc18:	4770      	bx	lr
      return EXTI0_IRQn;
 804fc1a:	2006      	movs	r0, #6
  }
}
 804fc1c:	4770      	bx	lr
	...

0804fc20 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 804fc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804fc24:	b08d      	sub	sp, #52	; 0x34
	 GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804fc26:	2400      	movs	r4, #0
 804fc28:	4d60      	ldr	r5, [pc, #384]	; (804fdac <HW_GpioInit+0x18c>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804fc2a:	4f61      	ldr	r7, [pc, #388]	; (804fdb0 <HW_GpioInit+0x190>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804fc2c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 804fdb4 <HW_GpioInit+0x194>
	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOB, LED_PLUVIOMETRO_Pin|LED_ANEMOMETRO_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : USER_BUTTON_Pin */
	  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804fc30:	f8df a184 	ldr.w	sl, [pc, #388]	; 804fdb8 <HW_GpioInit+0x198>
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 804fc34:	2214      	movs	r2, #20
 804fc36:	2100      	movs	r1, #0
 804fc38:	a807      	add	r0, sp, #28
 804fc3a:	f000 fe82 	bl	8050942 <memset>
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 804fc3e:	9400      	str	r4, [sp, #0]
 804fc40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc42:	f043 0310 	orr.w	r3, r3, #16
 804fc46:	632b      	str	r3, [r5, #48]	; 0x30
 804fc48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc4a:	f003 0310 	and.w	r3, r3, #16
 804fc4e:	9300      	str	r3, [sp, #0]
 804fc50:	9b00      	ldr	r3, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 804fc52:	9401      	str	r4, [sp, #4]
 804fc54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc56:	f043 0304 	orr.w	r3, r3, #4
 804fc5a:	632b      	str	r3, [r5, #48]	; 0x30
 804fc5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc5e:	f003 0304 	and.w	r3, r3, #4
 804fc62:	9301      	str	r3, [sp, #4]
 804fc64:	9b01      	ldr	r3, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 804fc66:	9402      	str	r4, [sp, #8]
 804fc68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804fc6e:	632b      	str	r3, [r5, #48]	; 0x30
 804fc70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804fc76:	9302      	str	r3, [sp, #8]
 804fc78:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 804fc7a:	9403      	str	r4, [sp, #12]
 804fc7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc7e:	f043 0301 	orr.w	r3, r3, #1
 804fc82:	632b      	str	r3, [r5, #48]	; 0x30
 804fc84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc86:	f003 0301 	and.w	r3, r3, #1
 804fc8a:	9303      	str	r3, [sp, #12]
 804fc8c:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 804fc8e:	9404      	str	r4, [sp, #16]
 804fc90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc92:	f043 0302 	orr.w	r3, r3, #2
 804fc96:	632b      	str	r3, [r5, #48]	; 0x30
 804fc98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fc9a:	f003 0302 	and.w	r3, r3, #2
 804fc9e:	9304      	str	r3, [sp, #16]
 804fca0:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804fca2:	9405      	str	r4, [sp, #20]
 804fca4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fca6:	f043 0308 	orr.w	r3, r3, #8
 804fcaa:	632b      	str	r3, [r5, #48]	; 0x30
 804fcac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fcae:	f003 0308 	and.w	r3, r3, #8
 804fcb2:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804fcb4:	4622      	mov	r2, r4
 804fcb6:	4638      	mov	r0, r7
 804fcb8:	2140      	movs	r1, #64	; 0x40
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 804fcba:	9b05      	ldr	r3, [sp, #20]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 804fcbc:	f7f4 fd40 	bl	8044740 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 804fcc0:	4622      	mov	r2, r4
 804fcc2:	4648      	mov	r0, r9
 804fcc4:	2101      	movs	r1, #1
 804fcc6:	f7f4 fd3b 	bl	8044740 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_SET);
 804fcca:	2201      	movs	r2, #1
 804fccc:	4648      	mov	r0, r9
 804fcce:	f44f 7180 	mov.w	r1, #256	; 0x100
 804fcd2:	f7f4 fd35 	bl	8044740 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804fcd6:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804fcd8:	f04f 0808 	mov.w	r8, #8
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804fcdc:	a907      	add	r1, sp, #28
 804fcde:	4638      	mov	r0, r7

	  /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = ANEMOMETRO_Pin;
 804fce0:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804fce4:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804fce8:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 804fcea:	f7f4 fbb5 	bl	8044458 <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804fcee:	a907      	add	r1, sp, #28
 804fcf0:	4638      	mov	r0, r7
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804fcf2:	e9cd ba07 	strd	fp, sl, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 804fcf6:	9609      	str	r6, [sp, #36]	; 0x24
      HAL_GPIO_Init(ANEMOMETRO_GPIO_Port, &GPIO_InitStruct);
 804fcf8:	f7f4 fbae 	bl	8044458 <HAL_GPIO_Init>

      /*Configure GPIO pin : PtPin */
      GPIO_InitStruct.Pin = PLUVIOMETRO_Pin;
 804fcfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804fd00:	e9cd 3a07 	strd	r3, sl, [sp, #28]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804fd04:	a907      	add	r1, sp, #28
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804fd06:	2302      	movs	r3, #2
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804fd08:	4638      	mov	r0, r7
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 804fd0a:	9309      	str	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804fd0c:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
      HAL_GPIO_Init(PLUVIOMETRO_GPIO_Port, &GPIO_InitStruct);
 804fd10:	f7f4 fba2 	bl	8044458 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = LORA_RESET_Pin|MEM_WP_Pin;
 804fd14:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fd18:	a907      	add	r1, sp, #28
 804fd1a:	4648      	mov	r0, r9
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804fd1c:	e9cd 3607 	strd	r3, r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804fd20:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804fd24:	f7f4 fb98 	bl	8044458 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 804fd28:	4632      	mov	r2, r6
 804fd2a:	4659      	mov	r1, fp
 804fd2c:	4638      	mov	r0, r7
 804fd2e:	f7f4 fd07 	bl	8044740 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SD_DET_CARD_Pin;
 804fd32:	2380      	movs	r3, #128	; 0x80
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804fd34:	a907      	add	r1, sp, #28
 804fd36:	4638      	mov	r0, r7
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804fd38:	e9cd 3407 	strd	r3, r4, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804fd3c:	9609      	str	r6, [sp, #36]	; 0x24
	  HAL_GPIO_Init(SD_DET_CARD_GPIO_Port, &GPIO_InitStruct);
 804fd3e:	f7f4 fb8b 	bl	8044458 <HAL_GPIO_Init>

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804fd42:	9406      	str	r4, [sp, #24]
 804fd44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fd46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804fd4a:	632b      	str	r3, [r5, #48]	; 0x30
 804fd4c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 804fd4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804fd52:	4622      	mov	r2, r4
 804fd54:	4621      	mov	r1, r4
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804fd56:	9306      	str	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804fd58:	203b      	movs	r0, #59	; 0x3b
	  __HAL_RCC_DMA2_CLK_ENABLE();
 804fd5a:	9b06      	ldr	r3, [sp, #24]
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 804fd5c:	f7f3 ff82 	bl	8043c64 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 804fd60:	203b      	movs	r0, #59	; 0x3b
 804fd62:	f7f3 ffb3 	bl	8043ccc <HAL_NVIC_EnableIRQ>
	  /* DMA2_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 804fd66:	4622      	mov	r2, r4
 804fd68:	4621      	mov	r1, r4
 804fd6a:	2045      	movs	r0, #69	; 0x45
 804fd6c:	f7f3 ff7a 	bl	8043c64 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 804fd70:	2045      	movs	r0, #69	; 0x45
 804fd72:	f7f3 ffab 	bl	8043ccc <HAL_NVIC_EnableIRQ>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 804fd76:	4622      	mov	r2, r4
 804fd78:	4621      	mov	r1, r4
 804fd7a:	2006      	movs	r0, #6
 804fd7c:	f7f3 ff72 	bl	8043c64 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 804fd80:	2006      	movs	r0, #6
 804fd82:	f7f3 ffa3 	bl	8043ccc <HAL_NVIC_EnableIRQ>

  	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 804fd86:	4622      	mov	r2, r4
 804fd88:	4621      	mov	r1, r4
 804fd8a:	4640      	mov	r0, r8
 804fd8c:	f7f3 ff6a 	bl	8043c64 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 804fd90:	4640      	mov	r0, r8
 804fd92:	f7f3 ff9b 	bl	8043ccc <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 804fd96:	4622      	mov	r2, r4
 804fd98:	4621      	mov	r1, r4
 804fd9a:	2028      	movs	r0, #40	; 0x28
 804fd9c:	f7f3 ff62 	bl	8043c64 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804fda0:	2028      	movs	r0, #40	; 0x28
 804fda2:	f7f3 ff93 	bl	8043ccc <HAL_NVIC_EnableIRQ>

}
 804fda6:	b00d      	add	sp, #52	; 0x34
 804fda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804fdac:	40023800 	.word	0x40023800
 804fdb0:	40021000 	.word	0x40021000
 804fdb4:	40020400 	.word	0x40020400
 804fdb8:	10110000 	.word	0x10110000

0804fdbc <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 804fdbc:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804fdbe:	2400      	movs	r4, #0
{
 804fdc0:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804fdc2:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804fdc4:	2214      	movs	r2, #20
 804fdc6:	4621      	mov	r1, r4
 804fdc8:	a807      	add	r0, sp, #28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 804fdca:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 804fdce:	f000 fdb8 	bl	8050942 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 804fdd2:	462a      	mov	r2, r5
 804fdd4:	4621      	mov	r1, r4
 804fdd6:	a803      	add	r0, sp, #12
 804fdd8:	f000 fdb3 	bl	8050942 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 804fddc:	4b22      	ldr	r3, [pc, #136]	; (804fe68 <SystemClock_Config+0xac>)
 804fdde:	9401      	str	r4, [sp, #4]
 804fde0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804fde2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804fde6:	641a      	str	r2, [r3, #64]	; 0x40
 804fde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804fdea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804fdee:	9301      	str	r3, [sp, #4]
 804fdf0:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804fdf2:	4b1e      	ldr	r3, [pc, #120]	; (804fe6c <SystemClock_Config+0xb0>)
 804fdf4:	9402      	str	r4, [sp, #8]
 804fdf6:	681a      	ldr	r2, [r3, #0]
 804fdf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804fdfc:	601a      	str	r2, [r3, #0]
 804fdfe:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	//RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 804fe00:	9514      	str	r5, [sp, #80]	; 0x50
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804fe02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804fe06:	9302      	str	r3, [sp, #8]
 804fe08:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 804fe0a:	230a      	movs	r3, #10
 804fe0c:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804fe0e:	2301      	movs	r3, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804fe10:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804fe14:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 192;
 804fe16:	22c0      	movs	r2, #192	; 0xc0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804fe18:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 804fe1a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804fe1e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;

	//RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804fe22:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 4;
 804fe24:	2304      	movs	r3, #4
 804fe26:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 804fe28:	f7f5 f8e0 	bl	8044fec <HAL_RCC_OscConfig>
 804fe2c:	b108      	cbz	r0, 804fe32 <SystemClock_Config+0x76>
		Error_Handler();
 804fe2e:	f7fe fc7d 	bl	804e72c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 804fe32:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804fe34:	2100      	movs	r1, #0
 804fe36:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804fe38:	e9cd 3407 	strd	r3, r4, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804fe3c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804fe40:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 804fe42:	f7f5 faa7 	bl	8045394 <HAL_RCC_ClockConfig>
 804fe46:	b108      	cbz	r0, 804fe4c <SystemClock_Config+0x90>
		Error_Handler();
 804fe48:	f7fe fc70 	bl	804e72c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 804fe4c:	2302      	movs	r3, #2
 804fe4e:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804fe50:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 804fe52:	f44f 7300 	mov.w	r3, #512	; 0x200
 804fe56:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 804fe58:	f7f5 fb56 	bl	8045508 <HAL_RCCEx_PeriphCLKConfig>
 804fe5c:	b108      	cbz	r0, 804fe62 <SystemClock_Config+0xa6>
		Error_Handler();
 804fe5e:	f7fe fc65 	bl	804e72c <Error_Handler>
	}

}
 804fe62:	b019      	add	sp, #100	; 0x64
 804fe64:	bd30      	pop	{r4, r5, pc}
 804fe66:	bf00      	nop
 804fe68:	40023800 	.word	0x40023800
 804fe6c:	40007000 	.word	0x40007000

0804fe70 <HW_GetRandomSeed>:
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 804fe70:	4a03      	ldr	r2, [pc, #12]	; (804fe80 <HW_GetRandomSeed+0x10>)
 804fe72:	4b04      	ldr	r3, [pc, #16]	; (804fe84 <HW_GetRandomSeed+0x14>)
 804fe74:	6810      	ldr	r0, [r2, #0]
 804fe76:	681b      	ldr	r3, [r3, #0]
 804fe78:	4043      	eors	r3, r0
 804fe7a:	6850      	ldr	r0, [r2, #4]
}
 804fe7c:	4058      	eors	r0, r3
 804fe7e:	4770      	bx	lr
 804fe80:	1fff7594 	.word	0x1fff7594
 804fe84:	1fff7590 	.word	0x1fff7590

0804fe88 <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 804fe88:	4910      	ldr	r1, [pc, #64]	; (804fecc <HW_GetUniqueId+0x44>)
 804fe8a:	4a11      	ldr	r2, [pc, #68]	; (804fed0 <HW_GetUniqueId+0x48>)
 804fe8c:	680b      	ldr	r3, [r1, #0]
{
 804fe8e:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 804fe90:	6814      	ldr	r4, [r2, #0]
 804fe92:	4423      	add	r3, r4
 804fe94:	0e1b      	lsrs	r3, r3, #24
 804fe96:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 804fe98:	6814      	ldr	r4, [r2, #0]
 804fe9a:	680b      	ldr	r3, [r1, #0]
 804fe9c:	4423      	add	r3, r4
 804fe9e:	0c1b      	lsrs	r3, r3, #16
 804fea0:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 804fea2:	6814      	ldr	r4, [r2, #0]
 804fea4:	680b      	ldr	r3, [r1, #0]
 804fea6:	4423      	add	r3, r4
 804fea8:	0a1b      	lsrs	r3, r3, #8
 804feaa:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 804feac:	6812      	ldr	r2, [r2, #0]
 804feae:	680b      	ldr	r3, [r1, #0]
 804feb0:	4413      	add	r3, r2
 804feb2:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 804feb4:	4b07      	ldr	r3, [pc, #28]	; (804fed4 <HW_GetUniqueId+0x4c>)
 804feb6:	78da      	ldrb	r2, [r3, #3]
 804feb8:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 804feba:	885a      	ldrh	r2, [r3, #2]
 804febc:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 804febe:	681a      	ldr	r2, [r3, #0]
 804fec0:	0a12      	lsrs	r2, r2, #8
 804fec2:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 804fec4:	681b      	ldr	r3, [r3, #0]
 804fec6:	7003      	strb	r3, [r0, #0]
}
 804fec8:	bd10      	pop	{r4, pc}
 804feca:	bf00      	nop
 804fecc:	1fff7590 	.word	0x1fff7590
 804fed0:	1fff7598 	.word	0x1fff7598
 804fed4:	1fff7594 	.word	0x1fff7594

0804fed8 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 804fed8:	b510      	push	{r4, lr}
 804feda:	b086      	sub	sp, #24
//  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
 804fedc:	2210      	movs	r2, #16
 804fede:	2100      	movs	r1, #0
 804fee0:	a802      	add	r0, sp, #8
 804fee2:	f000 fd2e 	bl	8050942 <memset>
  if (AdcInitialized == false)
 804fee6:	4a2d      	ldr	r2, [pc, #180]	; (804ff9c <HW_AdcInit+0xc4>)
 804fee8:	7853      	ldrb	r3, [r2, #1]
 804feea:	2b00      	cmp	r3, #0
 804feec:	d153      	bne.n	804ff96 <HW_AdcInit+0xbe>
  {
    AdcInitialized = true;
 804feee:	2401      	movs	r4, #1

	hadc.Instance = ADC1;
 804fef0:	482b      	ldr	r0, [pc, #172]	; (804ffa0 <HW_AdcInit+0xc8>)
    AdcInitialized = true;
 804fef2:	7054      	strb	r4, [r2, #1]
	hadc.Instance = ADC1;
 804fef4:	4a2b      	ldr	r2, [pc, #172]	; (804ffa4 <HW_AdcInit+0xcc>)
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.NbrOfConversion = 1;
	hadc.Init.DMAContinuousRequests = DISABLE;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	 ADCCLK_ENABLE();
 804fef6:	9301      	str	r3, [sp, #4]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 804fef8:	e9c0 2300 	strd	r2, r3, [r0]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 804fefc:	6083      	str	r3, [r0, #8]
	hadc.Init.ScanConvMode = DISABLE;
 804fefe:	6103      	str	r3, [r0, #16]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804ff00:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 804ff02:	60c3      	str	r3, [r0, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 804ff04:	7603      	strb	r3, [r0, #24]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 804ff06:	f880 3020 	strb.w	r3, [r0, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804ff0a:	4a27      	ldr	r2, [pc, #156]	; (804ffa8 <HW_AdcInit+0xd0>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 804ff0c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	 ADCCLK_ENABLE();
 804ff10:	4b26      	ldr	r3, [pc, #152]	; (804ffac <HW_AdcInit+0xd4>)
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804ff12:	6282      	str	r2, [r0, #40]	; 0x28
	hadc.Init.NbrOfConversion = 1;
 804ff14:	61c4      	str	r4, [r0, #28]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 804ff16:	6144      	str	r4, [r0, #20]
	 ADCCLK_ENABLE();
 804ff18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804ff1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804ff1e:	645a      	str	r2, [r3, #68]	; 0x44
 804ff20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804ff22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804ff26:	9301      	str	r3, [sp, #4]
 804ff28:	9b01      	ldr	r3, [sp, #4]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 804ff2a:	f7f3 fc6b 	bl	8043804 <HAL_ADC_Init>
 804ff2e:	b108      	cbz	r0, 804ff34 <HW_AdcInit+0x5c>
	{
		Error_Handler();
 804ff30:	f7fe fbfc 	bl	804e72c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 804ff34:	230e      	movs	r3, #14
	sConfig.Rank = 1;
 804ff36:	e9cd 3402 	strd	r3, r4, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 804ff3a:	a902      	add	r1, sp, #8
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 804ff3c:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 804ff3e:	4818      	ldr	r0, [pc, #96]	; (804ffa0 <HW_AdcInit+0xc8>)
	sConfig.Offset = 0;
 804ff40:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 804ff44:	f7f3 fdec 	bl	8043b20 <HAL_ADC_ConfigChannel>
 804ff48:	b108      	cbz	r0, 804ff4e <HW_AdcInit+0x76>
	{
		Error_Handler();
 804ff4a:	f7fe fbef 	bl	804e72c <Error_Handler>

	///////////////////////////////////////////////////////////////////////////

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc2.Instance = ADC2;
 804ff4e:	4818      	ldr	r0, [pc, #96]	; (804ffb0 <HW_AdcInit+0xd8>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 804ff50:	4a18      	ldr	r2, [pc, #96]	; (804ffb4 <HW_AdcInit+0xdc>)
 804ff52:	2300      	movs	r3, #0
	  hadc2.Init.ContinuousConvMode = DISABLE;
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2.Init.NbrOfConversion = 1;
 804ff54:	2401      	movs	r4, #1
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 804ff56:	e9c0 2300 	strd	r2, r3, [r0]
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804ff5a:	4a13      	ldr	r2, [pc, #76]	; (804ffa8 <HW_AdcInit+0xd0>)
	  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 804ff5c:	6083      	str	r3, [r0, #8]
	  hadc2.Init.ScanConvMode = DISABLE;
 804ff5e:	6103      	str	r3, [r0, #16]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 804ff60:	7603      	strb	r3, [r0, #24]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 804ff62:	f880 3020 	strb.w	r3, [r0, #32]
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804ff66:	62c3      	str	r3, [r0, #44]	; 0x2c
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804ff68:	6282      	str	r2, [r0, #40]	; 0x28
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 804ff6a:	60c3      	str	r3, [r0, #12]
	  hadc2.Init.NbrOfConversion = 1;
 804ff6c:	61c4      	str	r4, [r0, #28]
	  hadc2.Init.DMAContinuousRequests = DISABLE;
 804ff6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 804ff72:	6144      	str	r4, [r0, #20]
	  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 804ff74:	f7f3 fc46 	bl	8043804 <HAL_ADC_Init>
 804ff78:	b108      	cbz	r0, 804ff7e <HW_AdcInit+0xa6>
	  {
	    Error_Handler();
 804ff7a:	f7fe fbd7 	bl	804e72c <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 804ff7e:	2307      	movs	r3, #7
	  sConfig.Rank = 1;
 804ff80:	e9cd 3402 	strd	r3, r4, [sp, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804ff84:	a902      	add	r1, sp, #8
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 804ff86:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804ff88:	4809      	ldr	r0, [pc, #36]	; (804ffb0 <HW_AdcInit+0xd8>)
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 804ff8a:	9304      	str	r3, [sp, #16]
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 804ff8c:	f7f3 fdc8 	bl	8043b20 <HAL_ADC_ConfigChannel>
 804ff90:	b108      	cbz	r0, 804ff96 <HW_AdcInit+0xbe>
	  {
	    Error_Handler();
 804ff92:	f7fe fbcb 	bl	804e72c <Error_Handler>
	  }

  }
}
 804ff96:	b006      	add	sp, #24
 804ff98:	bd10      	pop	{r4, pc}
 804ff9a:	bf00      	nop
 804ff9c:	20003770 	.word	0x20003770
 804ffa0:	2000614c 	.word	0x2000614c
 804ffa4:	40012000 	.word	0x40012000
 804ffa8:	0f000001 	.word	0x0f000001
 804ffac:	40023800 	.word	0x40023800
 804ffb0:	200060f8 	.word	0x200060f8
 804ffb4:	40012100 	.word	0x40012100

0804ffb8 <HW_Init>:
{
 804ffb8:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 804ffba:	4c1e      	ldr	r4, [pc, #120]	; (8050034 <HW_Init+0x7c>)
 804ffbc:	7822      	ldrb	r2, [r4, #0]
 804ffbe:	2a00      	cmp	r2, #0
 804ffc0:	d136      	bne.n	8050030 <HW_Init+0x78>
    HW_AdcInit();
 804ffc2:	f7ff ff89 	bl	804fed8 <HW_AdcInit>
    Radio.IoInit();
 804ffc6:	4b1c      	ldr	r3, [pc, #112]	; (8050038 <HW_Init+0x80>)
 804ffc8:	681b      	ldr	r3, [r3, #0]
 804ffca:	4798      	blx	r3
    HW_SPI_Init();
 804ffcc:	f7ff f8ee 	bl	804f1ac <HW_SPI_Init>
    HW_RTC_Init();
 804ffd0:	f7fe ffca 	bl	804ef68 <HW_RTC_Init>
    HW_I2C1_Init();
 804ffd4:	f7fe fe18 	bl	804ec08 <HW_I2C1_Init>
    TraceInit();
 804ffd8:	f7fe fa92 	bl	804e500 <TraceInit>
    BSP_sensor_Init();
 804ffdc:	f7fe fb4b 	bl	804e676 <BSP_sensor_Init>
    Ble_Init_GPIO();
 804ffe0:	f7f1 f9c8 	bl	8041374 <Ble_Init_GPIO>
    COM_Init();
 804ffe4:	f000 faea 	bl	80505bc <COM_Init>
    MX_USART1_UART_Init();
 804ffe8:	f7f1 f9a8 	bl	804133c <MX_USART1_UART_Init>
    MX_TIM2_Init();
 804ffec:	f7ff f934 	bl	804f258 <MX_TIM2_Init>
    MX_TIM3_Init();
 804fff0:	f7ff f966 	bl	804f2c0 <MX_TIM3_Init>
    MX_SDIO_SD_Init();
 804fff4:	f7ff fbcc 	bl	804f790 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 804fff8:	f7f3 faec 	bl	80435d4 <MX_FATFS_Init>
    HAL_TIM_Base_Start_IT(&htim2);
 804fffc:	480f      	ldr	r0, [pc, #60]	; (805003c <HW_Init+0x84>)
 804fffe:	f7f6 fd27 	bl	8046a50 <HAL_TIM_Base_Start_IT>
    HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 8050002:	2201      	movs	r2, #1
 8050004:	490e      	ldr	r1, [pc, #56]	; (8050040 <HW_Init+0x88>)
 8050006:	480f      	ldr	r0, [pc, #60]	; (8050044 <HW_Init+0x8c>)
 8050008:	f7f7 f8e4 	bl	80471d4 <HAL_UART_Receive_IT>
    init_battery_monitor(&hadc);							/* Initialize Battery monitor */
 805000c:	480e      	ldr	r0, [pc, #56]	; (8050048 <HW_Init+0x90>)
 805000e:	f7f1 f8d5 	bl	80411bc <init_battery_monitor>
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8050012:	480e      	ldr	r0, [pc, #56]	; (805004c <HW_Init+0x94>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8050014:	4a0e      	ldr	r2, [pc, #56]	; (8050050 <HW_Init+0x98>)
 8050016:	2304      	movs	r3, #4
 8050018:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 2499;
 805001c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8050020:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8050022:	f7f4 ffbb 	bl	8044f9c <HAL_IWDG_Init>
 8050026:	b108      	cbz	r0, 805002c <HW_Init+0x74>
  {
    Error_Handler();
 8050028:	f7fe fb80 	bl	804e72c <Error_Handler>
    McuInitialized = true;
 805002c:	2301      	movs	r3, #1
 805002e:	7023      	strb	r3, [r4, #0]
}
 8050030:	bd10      	pop	{r4, pc}
 8050032:	bf00      	nop
 8050034:	20003770 	.word	0x20003770
 8050038:	08052140 	.word	0x08052140
 805003c:	20005ef4 	.word	0x20005ef4
 8050040:	20003c30 	.word	0x20003c30
 8050044:	20003c3c 	.word	0x20003c3c
 8050048:	2000614c 	.word	0x2000614c
 805004c:	20006140 	.word	0x20006140
 8050050:	40003000 	.word	0x40003000

08050054 <HW_AdcReadChannel>:
{
 8050054:	b530      	push	{r4, r5, lr}
 8050056:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef adcConf = {0};
 8050058:	2210      	movs	r2, #16
 805005a:	2100      	movs	r1, #0
{
 805005c:	4605      	mov	r5, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 805005e:	a802      	add	r0, sp, #8
 8050060:	f000 fc6f 	bl	8050942 <memset>
  HW_AdcInit();
 8050064:	f7ff ff38 	bl	804fed8 <HW_AdcInit>
  if (AdcInitialized == true)
 8050068:	4b17      	ldr	r3, [pc, #92]	; (80500c8 <HW_AdcReadChannel+0x74>)
 805006a:	7858      	ldrb	r0, [r3, #1]
 805006c:	b350      	cbz	r0, 80500c4 <HW_AdcReadChannel+0x70>
    ADCCLK_ENABLE();
 805006e:	4c17      	ldr	r4, [pc, #92]	; (80500cc <HW_AdcReadChannel+0x78>)
 8050070:	2300      	movs	r3, #0
 8050072:	9301      	str	r3, [sp, #4]
 8050074:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8050076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 805007a:	6463      	str	r3, [r4, #68]	; 0x44
 805007c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    adcConf.Channel = Channel;
 805007e:	9502      	str	r5, [sp, #8]
    ADCCLK_ENABLE();
 8050080:	f403 7380 	and.w	r3, r3, #256	; 0x100
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050084:	4d12      	ldr	r5, [pc, #72]	; (80500d0 <HW_AdcReadChannel+0x7c>)
    ADCCLK_ENABLE();
 8050086:	9301      	str	r3, [sp, #4]
 8050088:	9b01      	ldr	r3, [sp, #4]
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 805008a:	2303      	movs	r3, #3
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 805008c:	a902      	add	r1, sp, #8
    adcConf.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 805008e:	9304      	str	r3, [sp, #16]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050090:	4628      	mov	r0, r5
    adcConf.Rank = 1;
 8050092:	2301      	movs	r3, #1
 8050094:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8050096:	f7f3 fd43 	bl	8043b20 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc);
 805009a:	4628      	mov	r0, r5
 805009c:	f7f3 fc58 	bl	8043950 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80500a0:	f04f 31ff 	mov.w	r1, #4294967295
 80500a4:	4628      	mov	r0, r5
 80500a6:	f7f3 fce7 	bl	8043a78 <HAL_ADC_PollForConversion>
    adcData = HAL_ADC_GetValue(&hadc);
 80500aa:	4628      	mov	r0, r5
 80500ac:	f7f3 fd34 	bl	8043b18 <HAL_ADC_GetValue>
    __HAL_ADC_DISABLE(&hadc);
 80500b0:	682a      	ldr	r2, [r5, #0]
 80500b2:	6893      	ldr	r3, [r2, #8]
 80500b4:	f023 0301 	bic.w	r3, r3, #1
 80500b8:	6093      	str	r3, [r2, #8]
    ADCCLK_DISABLE();
 80500ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80500bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    adcData = HAL_ADC_GetValue(&hadc);
 80500c0:	b280      	uxth	r0, r0
    ADCCLK_DISABLE();
 80500c2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80500c4:	b007      	add	sp, #28
 80500c6:	bd30      	pop	{r4, r5, pc}
 80500c8:	20003770 	.word	0x20003770
 80500cc:	40023800 	.word	0x40023800
 80500d0:	2000614c 	.word	0x2000614c

080500d4 <HW_GetTemperatureLevel>:
{
 80500d4:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 80500d6:	2011      	movs	r0, #17
 80500d8:	f7ff ffbc 	bl	8050054 <HW_AdcReadChannel>
  if (measuredLevel == 0)
 80500dc:	b1e8      	cbz	r0, 805011a <HW_GetTemperatureLevel+0x46>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80500de:	4b10      	ldr	r3, [pc, #64]	; (8050120 <HW_GetTemperatureLevel+0x4c>)
 80500e0:	881b      	ldrh	r3, [r3, #0]
 80500e2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80500e6:	435c      	muls	r4, r3
 80500e8:	fbb4 f4f0 	udiv	r4, r4, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 80500ec:	2010      	movs	r0, #16
 80500ee:	f7ff ffb1 	bl	8050054 <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80500f2:	4b0c      	ldr	r3, [pc, #48]	; (8050124 <HW_GetTemperatureLevel+0x50>)
 80500f4:	881a      	ldrh	r2, [r3, #0]
 80500f6:	3322      	adds	r3, #34	; 0x22
 80500f8:	4360      	muls	r0, r4
 80500fa:	881b      	ldrh	r3, [r3, #0]
 80500fc:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8050100:	fbb0 f0f4 	udiv	r0, r0, r4
 8050104:	2450      	movs	r4, #80	; 0x50
 8050106:	1a80      	subs	r0, r0, r2
 8050108:	4360      	muls	r0, r4
 805010a:	1a9b      	subs	r3, r3, r2
 805010c:	0200      	lsls	r0, r0, #8
 805010e:	fb90 f0f3 	sdiv	r0, r0, r3
 8050112:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
}
 8050116:	b280      	uxth	r0, r0
 8050118:	bd10      	pop	{r4, pc}
    batteryLevelmV = 0;
 805011a:	4604      	mov	r4, r0
 805011c:	e7e6      	b.n	80500ec <HW_GetTemperatureLevel+0x18>
 805011e:	bf00      	nop
 8050120:	1fff75aa 	.word	0x1fff75aa
 8050124:	1fff75a8 	.word	0x1fff75a8

08050128 <refresh_iwdg>:
  /* USER CODE END IWDG_Init 2 */

}

void refresh_iwdg(void){
	HAL_IWDG_Refresh(&hiwdg);
 8050128:	4801      	ldr	r0, [pc, #4]	; (8050130 <refresh_iwdg+0x8>)
 805012a:	f7f4 bf58 	b.w	8044fde <HAL_IWDG_Refresh>
 805012e:	bf00      	nop
 8050130:	20006140 	.word	0x20006140

08050134 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 8050134:	4770      	bx	lr

08050136 <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 8050136:	bf00      	nop
 8050138:	e7fd      	b.n	8050136 <HardFault_Handler>

0805013a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 805013a:	e7fe      	b.n	805013a <MemManage_Handler>

0805013c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 805013c:	e7fe      	b.n	805013c <BusFault_Handler>

0805013e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 805013e:	e7fe      	b.n	805013e <UsageFault_Handler>

08050140 <SVC_Handler>:
 8050140:	4770      	bx	lr

08050142 <DebugMon_Handler>:
 8050142:	4770      	bx	lr

08050144 <PendSV_Handler>:
 8050144:	4770      	bx	lr

08050146 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8050146:	f7f3 bb4b 	b.w	80437e0 <HAL_IncTick>
	...

0805014c <TIM2_IRQHandler>:
{

//	count_velo = aux_count_velo;
//	aux_count_velo = 0;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 805014c:	4801      	ldr	r0, [pc, #4]	; (8050154 <TIM2_IRQHandler+0x8>)
 805014e:	f7f6 bc93 	b.w	8046a78 <HAL_TIM_IRQHandler>
 8050152:	bf00      	nop
 8050154:	20005ef4 	.word	0x20005ef4

08050158 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8050158:	4801      	ldr	r0, [pc, #4]	; (8050160 <TIM3_IRQHandler+0x8>)
 805015a:	f7f6 bc8d 	b.w	8046a78 <HAL_TIM_IRQHandler>
 805015e:	bf00      	nop
 8050160:	20005eb4 	.word	0x20005eb4

08050164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8050164:	b508      	push	{r3, lr}


	HAL_UART_IRQHandler(&huart1);
 8050166:	4815      	ldr	r0, [pc, #84]	; (80501bc <USART1_IRQHandler+0x58>)
 8050168:	f7f7 f916 	bl	8047398 <HAL_UART_IRQHandler>
	if(ble_index>sizeof(message_ble))
 805016c:	4b14      	ldr	r3, [pc, #80]	; (80501c0 <USART1_IRQHandler+0x5c>)
		ble_index=0;
	message_ble[ble_index] = rx_byte_uart1[0];
 805016e:	4915      	ldr	r1, [pc, #84]	; (80501c4 <USART1_IRQHandler+0x60>)
	if(ble_index>sizeof(message_ble))
 8050170:	681a      	ldr	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 8050172:	4815      	ldr	r0, [pc, #84]	; (80501c8 <USART1_IRQHandler+0x64>)
 8050174:	7809      	ldrb	r1, [r1, #0]
	if(ble_index>sizeof(message_ble))
 8050176:	2a0a      	cmp	r2, #10
		ble_index=0;
 8050178:	bf84      	itt	hi
 805017a:	2200      	movhi	r2, #0
 805017c:	601a      	strhi	r2, [r3, #0]
	message_ble[ble_index] = rx_byte_uart1[0];
 805017e:	681a      	ldr	r2, [r3, #0]
 8050180:	5481      	strb	r1, [r0, r2]
	ble_index++;
 8050182:	3201      	adds	r2, #1
	if(ble_index>2){
 8050184:	2a02      	cmp	r2, #2
	ble_index++;
 8050186:	601a      	str	r2, [r3, #0]
	if(ble_index>2){
 8050188:	dd0b      	ble.n	80501a2 <USART1_IRQHandler+0x3e>

	//*****Comentado por JP****
	//HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
	//HAL_UART_Abort_IT(&huart1);
	//**************************
		if(message_ble[0] == 0xa){
 805018a:	7802      	ldrb	r2, [r0, #0]
 805018c:	2a0a      	cmp	r2, #10
 805018e:	d108      	bne.n	80501a2 <USART1_IRQHandler+0x3e>
			if(message_ble[ble_index-1] == 0xd)
 8050190:	290d      	cmp	r1, #13
 8050192:	d106      	bne.n	80501a2 <USART1_IRQHandler+0x3e>
			{
				// Sinaliza que chegou uma mensagem válida
				ble_index = 0;								// Zera o índice para nova mensagem
 8050194:	2200      	movs	r2, #0
 8050196:	601a      	str	r2, [r3, #0]
				//ble_handler((uint8_t*)&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
				flags_ble.enable_handler=1;
 8050198:	4a0c      	ldr	r2, [pc, #48]	; (80501cc <USART1_IRQHandler+0x68>)
 805019a:	7813      	ldrb	r3, [r2, #0]
 805019c:	f043 0320 	orr.w	r3, r3, #32
 80501a0:	7013      	strb	r3, [r2, #0]
//			ble_index = 0;								// Zera o índice para nova mensagem
//			ble_handler(&message_ble);					// Aciona o handler para selecionar a mensagem de resposta.
//		}
//	}

	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80501a2:	2025      	movs	r0, #37	; 0x25
 80501a4:	f7f3 fdc6 	bl	8043d34 <HAL_NVIC_ClearPendingIRQ>
	HAL_UART_Abort_IT(&huart1);
 80501a8:	4804      	ldr	r0, [pc, #16]	; (80501bc <USART1_IRQHandler+0x58>)
 80501aa:	f7f7 f9a1 	bl	80474f0 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 80501ae:	2201      	movs	r2, #1
 80501b0:	4904      	ldr	r1, [pc, #16]	; (80501c4 <USART1_IRQHandler+0x60>)
 80501b2:	4802      	ldr	r0, [pc, #8]	; (80501bc <USART1_IRQHandler+0x58>)

}
 80501b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, rx_byte_uart1, 1);
 80501b8:	f7f7 b80c 	b.w	80471d4 <HAL_UART_Receive_IT>
 80501bc:	20003c3c 	.word	0x20003c3c
 80501c0:	20002304 	.word	0x20002304
 80501c4:	20003c30 	.word	0x20003c30
 80501c8:	20002308 	.word	0x20002308
 80501cc:	20003c38 	.word	0x20003c38

080501d0 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80501d0:	4801      	ldr	r0, [pc, #4]	; (80501d8 <SDIO_IRQHandler+0x8>)
 80501d2:	f7f6 b973 	b.w	80464bc <HAL_SD_IRQHandler>
 80501d6:	bf00      	nop
 80501d8:	20006074 	.word	0x20006074

080501dc <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80501dc:	4801      	ldr	r0, [pc, #4]	; (80501e4 <DMA2_Stream3_IRQHandler+0x8>)
 80501de:	f7f3 bec3 	b.w	8043f68 <HAL_DMA_IRQHandler>
 80501e2:	bf00      	nop
 80501e4:	20005fb4 	.word	0x20005fb4

080501e8 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80501e8:	4801      	ldr	r0, [pc, #4]	; (80501f0 <DMA2_Stream6_IRQHandler+0x8>)
 80501ea:	f7f3 bebd 	b.w	8043f68 <HAL_DMA_IRQHandler>
 80501ee:	bf00      	nop
 80501f0:	20006014 	.word	0x20006014

080501f4 <USART3_IRQHandler>:
  /* USER CODE END DMA2_Stream6_IRQn 1 */
}

void USARTx_IRQHandler(void)
{
  vcom_IRQHandler();
 80501f4:	f000 b872 	b.w	80502dc <vcom_IRQHandler>

080501f8 <DMA1_Stream4_IRQHandler>:
}

void USARTx_DMA_TX_IRQHandler(void)
{
  vcom_DMA_TX_IRQHandler();
 80501f8:	f000 b86a 	b.w	80502d0 <vcom_DMA_TX_IRQHandler>

080501fc <RTC_Alarm_IRQHandler>:
}

void RTC_Alarm_IRQHandler(void)
{
  HW_RTC_IrqHandler();
 80501fc:	f7fe be74 	b.w	804eee8 <HW_RTC_IrqHandler>

08050200 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8050200:	2001      	movs	r0, #1
 8050202:	f7f4 baa3 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

08050206 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8050206:	2002      	movs	r0, #2
 8050208:	f7f4 baa0 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

0805020c <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 805020c:	2004      	movs	r0, #4
 805020e:	f7f4 ba9d 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

08050212 <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8050212:	2008      	movs	r0, #8
 8050214:	f7f4 ba9a 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

08050218 <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8050218:	2010      	movs	r0, #16
 805021a:	f7f4 ba97 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

0805021e <EXTI9_5_IRQHandler>:
}


void EXTI9_5_IRQHandler(void)
{
 805021e:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8050220:	2020      	movs	r0, #32
 8050222:	f7f4 fa93 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8050226:	2040      	movs	r0, #64	; 0x40
 8050228:	f7f4 fa90 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 805022c:	2080      	movs	r0, #128	; 0x80
 805022e:	f7f4 fa8d 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8050232:	f44f 7080 	mov.w	r0, #256	; 0x100
 8050236:	f7f4 fa89 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 805023a:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 805023e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8050242:	f7f4 ba83 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

08050246 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8050246:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8050248:	f44f 6080 	mov.w	r0, #1024	; 0x400
 805024c:	f7f4 fa7e 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8050250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8050254:	f7f4 fa7a 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8050258:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 805025c:	f7f4 fa76 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8050260:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8050264:	f7f4 fa72 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8050268:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 805026c:	f7f4 fa6e 	bl	804474c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8050270:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 8050274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8050278:	f7f4 ba68 	b.w	804474c <HAL_GPIO_EXTI_IRQHandler>

0805027c <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 805027c:	b508      	push	{r3, lr}
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;

  UartHandle.Init.BaudRate   = 115200;
 805027e:	490b      	ldr	r1, [pc, #44]	; (80502ac <vcom_Init+0x30>)
  TxCpltCallback = TxCb;
 8050280:	4b0b      	ldr	r3, [pc, #44]	; (80502b0 <vcom_Init+0x34>)
  UartHandle.Init.BaudRate   = 115200;
 8050282:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8050286:	e9c3 1201 	strd	r1, r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 805028a:	2200      	movs	r2, #0
  TxCpltCallback = TxCb;
 805028c:	6018      	str	r0, [r3, #0]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 805028e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8050292:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8050294:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8050296:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 8050298:	2208      	movs	r2, #8
 805029a:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 805029c:	f7f6 fe96 	bl	8046fcc <HAL_UART_Init>
 80502a0:	b118      	cbz	r0, 80502aa <vcom_Init+0x2e>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 80502a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80502a6:	f7fe ba41 	b.w	804e72c <Error_Handler>
}
 80502aa:	bd08      	pop	{r3, pc}
 80502ac:	40004800 	.word	0x40004800
 80502b0:	20003774 	.word	0x20003774

080502b4 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80502b4:	460a      	mov	r2, r1
 80502b6:	4601      	mov	r1, r0
 80502b8:	4801      	ldr	r0, [pc, #4]	; (80502c0 <vcom_Trace+0xc>)
 80502ba:	f7f6 bfb3 	b.w	8047224 <HAL_UART_Transmit_DMA>
 80502be:	bf00      	nop
 80502c0:	20003778 	.word	0x20003778

080502c4 <HAL_UART_TxCpltCallback>:
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* buffer transmission complete*/
  TxCpltCallback();
 80502c4:	4b01      	ldr	r3, [pc, #4]	; (80502cc <HAL_UART_TxCpltCallback+0x8>)
 80502c6:	681b      	ldr	r3, [r3, #0]
 80502c8:	4718      	bx	r3
 80502ca:	bf00      	nop
 80502cc:	20003774 	.word	0x20003774

080502d0 <vcom_DMA_TX_IRQHandler>:
}

void vcom_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 80502d0:	4b01      	ldr	r3, [pc, #4]	; (80502d8 <vcom_DMA_TX_IRQHandler+0x8>)
 80502d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80502d4:	f7f3 be48 	b.w	8043f68 <HAL_DMA_IRQHandler>
 80502d8:	20003774 	.word	0x20003774

080502dc <vcom_IRQHandler>:
}

void vcom_IRQHandler(void)
{
  HAL_UART_IRQHandler(&UartHandle);
 80502dc:	4801      	ldr	r0, [pc, #4]	; (80502e4 <vcom_IRQHandler+0x8>)
 80502de:	f7f7 b85b 	b.w	8047398 <HAL_UART_IRQHandler>
 80502e2:	bf00      	nop
 80502e4:	20003778 	.word	0x20003778

080502e8 <vcom_IoInit>:
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
	}
}

void vcom_IoInit(void)
{
 80502e8:	b530      	push	{r4, r5, lr}
 80502ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80502ec:	4b17      	ldr	r3, [pc, #92]	; (805034c <vcom_IoInit+0x64>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80502ee:	4c18      	ldr	r4, [pc, #96]	; (8050350 <vcom_IoInit+0x68>)
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80502f0:	2200      	movs	r2, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 80502f2:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80502f4:	9205      	str	r2, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 80502f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80502f8:	f041 0102 	orr.w	r1, r1, #2
 80502fc:	6319      	str	r1, [r3, #48]	; 0x30
 80502fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8050300:	f001 0102 	and.w	r1, r1, #2
 8050304:	9101      	str	r1, [sp, #4]
 8050306:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8050308:	9202      	str	r2, [sp, #8]
 805030a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805030c:	f042 0202 	orr.w	r2, r2, #2
 8050310:	631a      	str	r2, [r3, #48]	; 0x30
 8050312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050314:	f003 0302 	and.w	r3, r3, #2
 8050318:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 805031a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  USARTx_RX_GPIO_CLK_ENABLE();
 805031e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8050320:	2302      	movs	r3, #2
 8050322:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8050326:	2507      	movs	r5, #7
 8050328:	2303      	movs	r3, #3
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 805032a:	a903      	add	r1, sp, #12
 805032c:	4620      	mov	r0, r4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 805032e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8050332:	f7f4 f891 	bl	8044458 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8050336:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 805033a:	a903      	add	r1, sp, #12
 805033c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 805033e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8050340:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8050342:	f7f4 f889 	bl	8044458 <HAL_GPIO_Init>
}
 8050346:	b009      	add	sp, #36	; 0x24
 8050348:	bd30      	pop	{r4, r5, pc}
 805034a:	bf00      	nop
 805034c:	40023800 	.word	0x40023800
 8050350:	40020400 	.word	0x40020400

08050354 <HAL_UART_MspInit>:
{
 8050354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8050356:	4606      	mov	r6, r0
 8050358:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 805035a:	2214      	movs	r2, #20
 805035c:	2100      	movs	r1, #0
 805035e:	a809      	add	r0, sp, #36	; 0x24
 8050360:	f000 faef 	bl	8050942 <memset>
	if (huart->Instance == USART1) {
 8050364:	6833      	ldr	r3, [r6, #0]
 8050366:	4a5a      	ldr	r2, [pc, #360]	; (80504d0 <HAL_UART_MspInit+0x17c>)
 8050368:	4293      	cmp	r3, r2
 805036a:	f040 8085 	bne.w	8050478 <HAL_UART_MspInit+0x124>
		__HAL_RCC_USART1_CLK_ENABLE();
 805036e:	4b59      	ldr	r3, [pc, #356]	; (80504d4 <HAL_UART_MspInit+0x180>)
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8050370:	4859      	ldr	r0, [pc, #356]	; (80504d8 <HAL_UART_MspInit+0x184>)
		__HAL_RCC_USART1_CLK_ENABLE();
 8050372:	2400      	movs	r4, #0
 8050374:	9401      	str	r4, [sp, #4]
 8050376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8050378:	f042 0210 	orr.w	r2, r2, #16
 805037c:	645a      	str	r2, [r3, #68]	; 0x44
 805037e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8050380:	f002 0210 	and.w	r2, r2, #16
 8050384:	9201      	str	r2, [sp, #4]
 8050386:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8050388:	9402      	str	r4, [sp, #8]
 805038a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805038c:	f042 0201 	orr.w	r2, r2, #1
 8050390:	631a      	str	r2, [r3, #48]	; 0x30
 8050392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050394:	f003 0301 	and.w	r3, r3, #1
 8050398:	9302      	str	r3, [sp, #8]
 805039a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 805039c:	2502      	movs	r5, #2
 805039e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80503a2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 80503a6:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80503a8:	2307      	movs	r3, #7
 80503aa:	2703      	movs	r7, #3
 80503ac:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 80503b0:	f7f4 f852 	bl	8044458 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 80503b4:	2025      	movs	r0, #37	; 0x25
 80503b6:	462a      	mov	r2, r5
 80503b8:	4621      	mov	r1, r4
 80503ba:	f7f3 fc53 	bl	8043c64 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80503be:	2025      	movs	r0, #37	; 0x25
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80503c0:	f7f3 fc84 	bl	8043ccc <HAL_NVIC_EnableIRQ>
/*	else */if (huart->Instance == USARTx) {
 80503c4:	6832      	ldr	r2, [r6, #0]
 80503c6:	4b45      	ldr	r3, [pc, #276]	; (80504dc <HAL_UART_MspInit+0x188>)
 80503c8:	429a      	cmp	r2, r3
 80503ca:	d153      	bne.n	8050474 <HAL_UART_MspInit+0x120>
		USARTx_TX_GPIO_CLK_ENABLE();
 80503cc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80503d0:	2400      	movs	r4, #0
 80503d2:	9405      	str	r4, [sp, #20]
 80503d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		hdma_tx.Instance = USARTx_TX_DMA_CHANNEL;
 80503d6:	4d42      	ldr	r5, [pc, #264]	; (80504e0 <HAL_UART_MspInit+0x18c>)
		USARTx_TX_GPIO_CLK_ENABLE();
 80503d8:	f042 0202 	orr.w	r2, r2, #2
 80503dc:	631a      	str	r2, [r3, #48]	; 0x30
 80503de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80503e0:	f002 0202 	and.w	r2, r2, #2
 80503e4:	9205      	str	r2, [sp, #20]
 80503e6:	9a05      	ldr	r2, [sp, #20]
		USARTx_RX_GPIO_CLK_ENABLE();
 80503e8:	9406      	str	r4, [sp, #24]
 80503ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80503ec:	f042 0202 	orr.w	r2, r2, #2
 80503f0:	631a      	str	r2, [r3, #48]	; 0x30
 80503f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80503f4:	f002 0202 	and.w	r2, r2, #2
 80503f8:	9206      	str	r2, [sp, #24]
 80503fa:	9a06      	ldr	r2, [sp, #24]
		USARTx_CLK_ENABLE();
 80503fc:	9407      	str	r4, [sp, #28]
 80503fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050400:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8050404:	641a      	str	r2, [r3, #64]	; 0x40
 8050406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050408:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 805040c:	9207      	str	r2, [sp, #28]
 805040e:	9a07      	ldr	r2, [sp, #28]
		DMAx_CLK_ENABLE();
 8050410:	9408      	str	r4, [sp, #32]
 8050412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050414:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8050418:	631a      	str	r2, [r3, #48]	; 0x30
 805041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 805041c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8050420:	9308      	str	r3, [sp, #32]
 8050422:	9b08      	ldr	r3, [sp, #32]
		vcom_IoInit();
 8050424:	f7ff ff60 	bl	80502e8 <vcom_IoInit>
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 8050428:	4a2e      	ldr	r2, [pc, #184]	; (80504e4 <HAL_UART_MspInit+0x190>)
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 805042a:	666c      	str	r4, [r5, #100]	; 0x64
		hdma_tx.Init.Channel = DMA_CHANNEL_7;
 805042c:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8050430:	e9c5 2311 	strd	r2, r3, [r5, #68]	; 0x44
		HAL_DMA_Init(&hdma_tx);
 8050434:	f105 0744 	add.w	r7, r5, #68	; 0x44
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8050438:	2340      	movs	r3, #64	; 0x40
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 805043a:	e9c5 3413 	strd	r3, r4, [r5, #76]	; 0x4c
		HAL_DMA_Init(&hdma_tx);
 805043e:	4638      	mov	r0, r7
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8050440:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8050444:	e9c5 3415 	strd	r3, r4, [r5, #84]	; 0x54
		hdma_tx.Init.Mode = DMA_NORMAL;
 8050448:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
		HAL_DMA_Init(&hdma_tx);
 805044c:	f7f3 fc98 	bl	8043d80 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8050450:	2201      	movs	r2, #1
 8050452:	4621      	mov	r1, r4
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8050454:	6337      	str	r7, [r6, #48]	; 0x30
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8050456:	200f      	movs	r0, #15
		__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8050458:	67ee      	str	r6, [r5, #124]	; 0x7c
		HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 805045a:	f7f3 fc03 	bl	8043c64 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 805045e:	200f      	movs	r0, #15
 8050460:	f7f3 fc34 	bl	8043ccc <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8050464:	2027      	movs	r0, #39	; 0x27
 8050466:	2201      	movs	r2, #1
 8050468:	4621      	mov	r1, r4
 805046a:	f7f3 fbfb 	bl	8043c64 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USARTx_IRQn);
 805046e:	2027      	movs	r0, #39	; 0x27
 8050470:	f7f3 fc2c 	bl	8043ccc <HAL_NVIC_EnableIRQ>
}
 8050474:	b00f      	add	sp, #60	; 0x3c
 8050476:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (huart->Instance == USART2) {
 8050478:	4a1b      	ldr	r2, [pc, #108]	; (80504e8 <HAL_UART_MspInit+0x194>)
 805047a:	4293      	cmp	r3, r2
 805047c:	d1a2      	bne.n	80503c4 <HAL_UART_MspInit+0x70>
		__HAL_RCC_USART2_CLK_ENABLE();
 805047e:	4b15      	ldr	r3, [pc, #84]	; (80504d4 <HAL_UART_MspInit+0x180>)
 8050480:	2400      	movs	r4, #0
 8050482:	9403      	str	r4, [sp, #12]
 8050484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8050486:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 805048a:	641a      	str	r2, [r3, #64]	; 0x40
 805048c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 805048e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8050492:	9203      	str	r2, [sp, #12]
 8050494:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8050496:	9404      	str	r4, [sp, #16]
 8050498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 805049a:	f042 0201 	orr.w	r2, r2, #1
 805049e:	631a      	str	r2, [r3, #48]	; 0x30
 80504a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80504a2:	f003 0301 	and.w	r3, r3, #1
 80504a6:	9304      	str	r3, [sp, #16]
 80504a8:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80504aa:	210c      	movs	r1, #12
 80504ac:	2302      	movs	r3, #2
 80504ae:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80504b2:	2003      	movs	r0, #3
 80504b4:	2307      	movs	r3, #7
 80504b6:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
		HAL_GPIO_Init(RFID_TX_GPIO_Port, &GPIO_InitStruct);
 80504ba:	a909      	add	r1, sp, #36	; 0x24
 80504bc:	4806      	ldr	r0, [pc, #24]	; (80504d8 <HAL_UART_MspInit+0x184>)
 80504be:	f7f3 ffcb 	bl	8044458 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80504c2:	2026      	movs	r0, #38	; 0x26
 80504c4:	4622      	mov	r2, r4
 80504c6:	4621      	mov	r1, r4
 80504c8:	f7f3 fbcc 	bl	8043c64 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80504cc:	2026      	movs	r0, #38	; 0x26
 80504ce:	e777      	b.n	80503c0 <HAL_UART_MspInit+0x6c>
 80504d0:	40011000 	.word	0x40011000
 80504d4:	40023800 	.word	0x40023800
 80504d8:	40020000 	.word	0x40020000
 80504dc:	40004800 	.word	0x40004800
 80504e0:	20003774 	.word	0x20003774
 80504e4:	40026070 	.word	0x40026070
 80504e8:	40004400 	.word	0x40004400

080504ec <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 80504ec:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80504ee:	2300      	movs	r3, #0
{
 80504f0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80504f2:	e9cd 3303 	strd	r3, r3, [sp, #12]

  USARTx_TX_GPIO_CLK_ENABLE();
 80504f6:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80504f8:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 80504fa:	4b0f      	ldr	r3, [pc, #60]	; (8050538 <vcom_IoDeInit+0x4c>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 80504fc:	4d0f      	ldr	r5, [pc, #60]	; (805053c <vcom_IoDeInit+0x50>)
  USARTx_TX_GPIO_CLK_ENABLE();
 80504fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8050500:	f042 0202 	orr.w	r2, r2, #2
 8050504:	631a      	str	r2, [r3, #48]	; 0x30
 8050506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8050508:	f003 0302 	and.w	r3, r3, #2
 805050c:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 805050e:	ac06      	add	r4, sp, #24
  USARTx_TX_GPIO_CLK_ENABLE();
 8050510:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8050512:	2303      	movs	r3, #3
 8050514:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8050516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805051a:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 805051e:	4628      	mov	r0, r5
 8050520:	4621      	mov	r1, r4
 8050522:	f7f3 ff99 	bl	8044458 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8050526:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 805052a:	4621      	mov	r1, r4
 805052c:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 805052e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8050530:	f7f3 ff92 	bl	8044458 <HAL_GPIO_Init>
}
 8050534:	b007      	add	sp, #28
 8050536:	bd30      	pop	{r4, r5, pc}
 8050538:	40023800 	.word	0x40023800
 805053c:	40020400 	.word	0x40020400

08050540 <HAL_UART_MspDeInit>:
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 8050540:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == USART1) {
 8050542:	4a1a      	ldr	r2, [pc, #104]	; (80505ac <HAL_UART_MspDeInit+0x6c>)
 8050544:	6803      	ldr	r3, [r0, #0]
 8050546:	4c1a      	ldr	r4, [pc, #104]	; (80505b0 <HAL_UART_MspDeInit+0x70>)
 8050548:	4293      	cmp	r3, r2
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart) {
 805054a:	4605      	mov	r5, r0
	if (huart->Instance == USART1) {
 805054c:	d10d      	bne.n	805056a <HAL_UART_MspDeInit+0x2a>
		__HAL_RCC_USART1_CLK_DISABLE();
 805054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 8050550:	4818      	ldr	r0, [pc, #96]	; (80505b4 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART1_CLK_DISABLE();
 8050552:	f023 0310 	bic.w	r3, r3, #16
 8050556:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_GPIO_DeInit(BLE_TX_GPIO_Port, BLE_TX_Pin | BLE_RX_Pin);
 8050558:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 805055c:	f7f4 f85c 	bl	8044618 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8050560:	2025      	movs	r0, #37	; 0x25
}
 8050562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 8050566:	f7f3 bbbf 	b.w	8043ce8 <HAL_NVIC_DisableIRQ>
	} else if (huart->Instance == USART2) {
 805056a:	4a13      	ldr	r2, [pc, #76]	; (80505b8 <HAL_UART_MspDeInit+0x78>)
 805056c:	4293      	cmp	r3, r2
 805056e:	d109      	bne.n	8050584 <HAL_UART_MspDeInit+0x44>
		__HAL_RCC_USART2_CLK_DISABLE();
 8050570:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 8050572:	4810      	ldr	r0, [pc, #64]	; (80505b4 <HAL_UART_MspDeInit+0x74>)
		__HAL_RCC_USART2_CLK_DISABLE();
 8050574:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8050578:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_DeInit(RFID_TX_GPIO_Port, GPIO_PIN_2 | GPIO_PIN_3);
 805057a:	210c      	movs	r1, #12
 805057c:	f7f4 f84c 	bl	8044618 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 8050580:	2026      	movs	r0, #38	; 0x26
 8050582:	e7ee      	b.n	8050562 <HAL_UART_MspDeInit+0x22>
		vcom_IoDeInit();
 8050584:	f7ff ffb2 	bl	80504ec <vcom_IoDeInit>
		USARTx_FORCE_RESET();
 8050588:	6a23      	ldr	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 805058a:	6b68      	ldr	r0, [r5, #52]	; 0x34
		USARTx_FORCE_RESET();
 805058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8050590:	6223      	str	r3, [r4, #32]
		USARTx_RELEASE_RESET();
 8050592:	6a23      	ldr	r3, [r4, #32]
 8050594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8050598:	6223      	str	r3, [r4, #32]
		if (huart->hdmarx != 0) {
 805059a:	b108      	cbz	r0, 80505a0 <HAL_UART_MspDeInit+0x60>
			HAL_DMA_DeInit(huart->hdmarx);
 805059c:	f7f3 fc6e 	bl	8043e7c <HAL_DMA_DeInit>
		if (huart->hdmatx != 0) {
 80505a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80505a2:	b108      	cbz	r0, 80505a8 <HAL_UART_MspDeInit+0x68>
			HAL_DMA_DeInit(huart->hdmatx);
 80505a4:	f7f3 fc6a 	bl	8043e7c <HAL_DMA_DeInit>
		HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 80505a8:	200f      	movs	r0, #15
 80505aa:	e7da      	b.n	8050562 <HAL_UART_MspDeInit+0x22>
 80505ac:	40011000 	.word	0x40011000
 80505b0:	40023800 	.word	0x40023800
 80505b4:	40020000 	.word	0x40020000
 80505b8:	40004400 	.word	0x40004400

080505bc <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 80505bc:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80505be:	4b0c      	ldr	r3, [pc, #48]	; (80505f0 <COM_Init+0x34>)
 80505c0:	6818      	ldr	r0, [r3, #0]
 80505c2:	2300      	movs	r3, #0
 80505c4:	2202      	movs	r2, #2
 80505c6:	4619      	mov	r1, r3
 80505c8:	6880      	ldr	r0, [r0, #8]
 80505ca:	f000 fa3f 	bl	8050a4c <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  /*UartHandleUpdate*/huart1.Instance = COM_UART;
 80505ce:	4809      	ldr	r0, [pc, #36]	; (80505f4 <COM_Init+0x38>)
  /*UartHandleUpdate*/huart1.Init.BaudRate = 9600;
 80505d0:	4a09      	ldr	r2, [pc, #36]	; (80505f8 <COM_Init+0x3c>)
 80505d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80505d6:	e9c0 2300 	strd	r2, r3, [r0]
  /*UartHandleUpdate*/huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80505da:	2300      	movs	r3, #0
  /*UartHandleUpdate*/huart1.Init.StopBits = UART_STOPBITS_1;
 80505dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /*UartHandleUpdate*/huart1.Init.Parity = UART_PARITY_NONE;
 80505e0:	6103      	str	r3, [r0, #16]
  /*UartHandleUpdate*/huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80505e2:	6183      	str	r3, [r0, #24]
  /*UartHandleUpdate*/huart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80505e4:	230c      	movs	r3, #12
 80505e6:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
}
 80505e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&huart1/*UartHandleUpdate*/);
 80505ec:	f7f6 bcee 	b.w	8046fcc <HAL_UART_Init>
 80505f0:	20001210 	.word	0x20001210
 80505f4:	20003c3c 	.word	0x20003c3c
 80505f8:	40011000 	.word	0x40011000

080505fc <COM_Transmit>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{ //UartHandleUpdate
  return HAL_UART_Transmit(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 80505fc:	4613      	mov	r3, r2
 80505fe:	460a      	mov	r2, r1
 8050600:	4601      	mov	r1, r0
 8050602:	4801      	ldr	r0, [pc, #4]	; (8050608 <COM_Transmit+0xc>)
 8050604:	f7f6 bd28 	b.w	8047058 <HAL_UART_Transmit>
 8050608:	20003c3c 	.word	0x20003c3c

0805060c <COM_Receive>:
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
  return HAL_UART_Receive(&huart1, (uint8_t *)Data, uDataLength, uTimeout);
 805060c:	4613      	mov	r3, r2
 805060e:	460a      	mov	r2, r1
 8050610:	4601      	mov	r1, r0
 8050612:	4801      	ldr	r0, [pc, #4]	; (8050618 <COM_Receive+0xc>)
 8050614:	f7f6 bd7c 	b.w	8047110 <HAL_UART_Receive>
 8050618:	20003c3c 	.word	0x20003c3c

0805061c <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 805061c:	4b02      	ldr	r3, [pc, #8]	; (8050628 <COM_Flush+0xc>)
 805061e:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 8050620:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8050622:	685b      	ldr	r3, [r3, #4]
}
 8050624:	4770      	bx	lr
 8050626:	bf00      	nop
 8050628:	20003c3c 	.word	0x20003c3c

0805062c <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 805062c:	4770      	bx	lr
	...

08050630 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 8050630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8050634:	b08d      	sub	sp, #52	; 0x34
 8050636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 805063a:	4692      	mov	sl, r2
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH + 1U];
  uint8_t tmp;
  uint32_t packets_received;
  COM_StatusTypeDef e_result = COM_OK;
  refresh_iwdg();
 805063c:	f7ff fd74 	bl	8050128 <refresh_iwdg>
    *pData = char1;
 8050640:	4fa1      	ldr	r7, [pc, #644]	; (80508c8 <Ymodem_Receive+0x298>)
  uint32_t session_begin = 0U;
 8050642:	f04f 0900 	mov.w	r9, #0
 8050646:	2600      	movs	r6, #0
 8050648:	e0dd      	b.n	8050806 <Ymodem_Receive+0x1d6>
    switch (char1)
 805064a:	2b61      	cmp	r3, #97	; 0x61
 805064c:	d004      	beq.n	8050658 <Ymodem_Receive+0x28>
 805064e:	2b72      	cmp	r3, #114	; 0x72
 8050650:	d077      	beq.n	8050742 <Ymodem_Receive+0x112>
 8050652:	2b41      	cmp	r3, #65	; 0x41
 8050654:	f040 8085 	bne.w	8050762 <Ymodem_Receive+0x132>
        status = HAL_BUSY;
 8050658:	2402      	movs	r4, #2
  uint32_t packet_size = 0U;
 805065a:	2500      	movs	r5, #0
 805065c:	e001      	b.n	8050662 <Ymodem_Receive+0x32>
        packet_size = PACKET_1K_SIZE;
 805065e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    *pData = char1;
 8050662:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8050666:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE)
 8050668:	2d7f      	cmp	r5, #127	; 0x7f
 805066a:	d97e      	bls.n	805076a <Ymodem_Receive+0x13a>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 805066c:	fa1f fb85 	uxth.w	fp, r5
 8050670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050674:	f10b 0104 	add.w	r1, fp, #4
 8050678:	4894      	ldr	r0, [pc, #592]	; (80508cc <Ymodem_Receive+0x29c>)
 805067a:	f7ff ffc7 	bl	805060c <COM_Receive>
      if (status == HAL_OK)
 805067e:	4604      	mov	r4, r0
 8050680:	2800      	cmp	r0, #0
 8050682:	d173      	bne.n	805076c <Ymodem_Receive+0x13c>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8050684:	78fb      	ldrb	r3, [r7, #3]
 8050686:	78ba      	ldrb	r2, [r7, #2]
 8050688:	43db      	mvns	r3, r3
 805068a:	b2db      	uxtb	r3, r3
 805068c:	429a      	cmp	r2, r3
 805068e:	d16f      	bne.n	8050770 <Ymodem_Receive+0x140>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 8050690:	197b      	adds	r3, r7, r5
    out ^= 0x1021;
 8050692:	f241 0e21 	movw	lr, #4129	; 0x1021
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 8050696:	791a      	ldrb	r2, [r3, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 8050698:	795b      	ldrb	r3, [r3, #5]
 805069a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 805069e:	4a8c      	ldr	r2, [pc, #560]	; (80508d0 <Ymodem_Receive+0x2a0>)
 80506a0:	9301      	str	r3, [sp, #4]
 80506a2:	1c51      	adds	r1, r2, #1
 80506a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80506a8:	fa11 f383 	uxtah	r3, r1, r3
      crc = crc_update(crc, *pdata & i);
 80506ac:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80506b0:	2008      	movs	r0, #8
    for (i = 0x80; i; i >>= 1)
 80506b2:	2180      	movs	r1, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 80506b4:	ea4f 3bd4 	mov.w	fp, r4, lsr #15
  uint16_t out = crc_in << 1;
 80506b8:	0064      	lsls	r4, r4, #1
 80506ba:	b2a4      	uxth	r4, r4
  if (incr)
 80506bc:	ea1c 0f01 	tst.w	ip, r1
    out++;
 80506c0:	bf1c      	itt	ne
 80506c2:	3401      	addne	r4, #1
 80506c4:	b2a4      	uxthne	r4, r4
  if (xor)
 80506c6:	f1bb 0f00 	cmp.w	fp, #0
 80506ca:	d001      	beq.n	80506d0 <Ymodem_Receive+0xa0>
    out ^= 0x1021;
 80506cc:	ea84 040e 	eor.w	r4, r4, lr
    for (i = 0x80; i; i >>= 1)
 80506d0:	3801      	subs	r0, #1
 80506d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80506d6:	d1ed      	bne.n	80506b4 <Ymodem_Receive+0x84>
  for (crc = 0; size > 0; size--, pdata++)
 80506d8:	429a      	cmp	r2, r3
 80506da:	d1e7      	bne.n	80506ac <Ymodem_Receive+0x7c>
 80506dc:	2310      	movs	r3, #16
    out ^= 0x1021;
 80506de:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 80506e2:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 80506e4:	0064      	lsls	r4, r4, #1
 80506e6:	b2a4      	uxth	r4, r4
  if (xor)
 80506e8:	b101      	cbz	r1, 80506ec <Ymodem_Receive+0xbc>
    out ^= 0x1021;
 80506ea:	4054      	eors	r4, r2
 80506ec:	3b01      	subs	r3, #1
  for (i = 0; i < 16; i++)
 80506ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80506f2:	d1f6      	bne.n	80506e2 <Ymodem_Receive+0xb2>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 80506f4:	9b01      	ldr	r3, [sp, #4]
 80506f6:	42a3      	cmp	r3, r4
 80506f8:	d13a      	bne.n	8050770 <Ymodem_Receive+0x140>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 80506fa:	78ba      	ldrb	r2, [r7, #2]
 80506fc:	b2f3      	uxtb	r3, r6
 80506fe:	429a      	cmp	r2, r3
 8050700:	f040 8081 	bne.w	8050806 <Ymodem_Receive+0x1d6>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 8050704:	2e00      	cmp	r6, #0
 8050706:	f040 80bb 	bne.w	8050880 <Ymodem_Receive+0x250>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 805070a:	793b      	ldrb	r3, [r7, #4]
 805070c:	2b00      	cmp	r3, #0
 805070e:	f040 809e 	bne.w	805084e <Ymodem_Receive+0x21e>

                  }
                  /* File header packet is empty, end session */
                  else
                  {
                    Serial_PutByte(ACK);
 8050712:	2006      	movs	r0, #6
 8050714:	f7fd fffe 	bl	804e714 <Serial_PutByte>
 8050718:	4630      	mov	r0, r6
          break;
      }
    }
  }
  return e_result;
}
 805071a:	b00d      	add	sp, #52	; 0x34
 805071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 8050720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050724:	2101      	movs	r1, #1
 8050726:	f10d 0017 	add.w	r0, sp, #23
 805072a:	f7ff ff6f 	bl	805060c <COM_Receive>
 805072e:	4604      	mov	r4, r0
 8050730:	b9c8      	cbnz	r0, 8050766 <Ymodem_Receive+0x136>
 8050732:	f89d 3017 	ldrb.w	r3, [sp, #23]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 8050736:	2b18      	cmp	r3, #24
 8050738:	bf16      	itet	ne
 805073a:	2500      	movne	r5, #0
 805073c:	2502      	moveq	r5, #2
 805073e:	2401      	movne	r4, #1
 8050740:	e78f      	b.n	8050662 <Ymodem_Receive+0x32>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 8050742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050746:	2101      	movs	r1, #1
 8050748:	f10d 0017 	add.w	r0, sp, #23
 805074c:	f7ff ff5e 	bl	805060c <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 8050750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050754:	2101      	movs	r1, #1
 8050756:	f10d 0017 	add.w	r0, sp, #23
 805075a:	f7ff ff57 	bl	805060c <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 805075e:	2503      	movs	r5, #3
 8050760:	e77f      	b.n	8050662 <Ymodem_Receive+0x32>
        status = HAL_ERROR;
 8050762:	2401      	movs	r4, #1
 8050764:	e779      	b.n	805065a <Ymodem_Receive+0x2a>
          status = HAL_ERROR;
 8050766:	2401      	movs	r4, #1
 8050768:	e77b      	b.n	8050662 <Ymodem_Receive+0x32>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 805076a:	b17c      	cbz	r4, 805078c <Ymodem_Receive+0x15c>
 805076c:	2c02      	cmp	r4, #2
 805076e:	d008      	beq.n	8050782 <Ymodem_Receive+0x152>
          if (session_begin > 0U)
 8050770:	f1b9 0f00 	cmp.w	r9, #0
 8050774:	d001      	beq.n	805077a <Ymodem_Receive+0x14a>
            errors ++;
 8050776:	f108 0801 	add.w	r8, r8, #1
          if (errors > MAX_ERRORS)
 805077a:	f1b8 0f05 	cmp.w	r8, #5
 805077e:	f240 809b 	bls.w	80508b8 <Ymodem_Receive+0x288>
          Serial_PutByte(CA);
 8050782:	2018      	movs	r0, #24
 8050784:	f7fd ffc6 	bl	804e714 <Serial_PutByte>
          Serial_PutByte(CA);
 8050788:	2018      	movs	r0, #24
 805078a:	e00d      	b.n	80507a8 <Ymodem_Receive+0x178>
          switch (packet_length)
 805078c:	2d02      	cmp	r5, #2
 805078e:	d00a      	beq.n	80507a6 <Ymodem_Receive+0x176>
 8050790:	2d03      	cmp	r5, #3
 8050792:	d038      	beq.n	8050806 <Ymodem_Receive+0x1d6>
 8050794:	2d00      	cmp	r5, #0
 8050796:	d1b0      	bne.n	80506fa <Ymodem_Receive+0xca>
              Serial_PutByte(ACK);
 8050798:	2006      	movs	r0, #6
 805079a:	f7fd ffbb 	bl	804e714 <Serial_PutByte>
              *puSize = filesize;
 805079e:	9a02      	ldr	r2, [sp, #8]
 80507a0:	9b06      	ldr	r3, [sp, #24]
 80507a2:	6013      	str	r3, [r2, #0]
 80507a4:	e74f      	b.n	8050646 <Ymodem_Receive+0x16>
              Serial_PutByte(ACK);
 80507a6:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 80507a8:	f7fd ffb4 	bl	804e714 <Serial_PutByte>
          break;
 80507ac:	e066      	b.n	805087c <Ymodem_Receive+0x24c>
                      m_aFileName[i++] = *file_ptr++;
 80507ae:	5483      	strb	r3, [r0, r2]
 80507b0:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 80507b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80507b6:	b10b      	cbz	r3, 80507bc <Ymodem_Receive+0x18c>
 80507b8:	2a40      	cmp	r2, #64	; 0x40
 80507ba:	d1f8      	bne.n	80507ae <Ymodem_Receive+0x17e>
                    m_aFileName[i++] = '\0';
 80507bc:	2300      	movs	r3, #0
 80507be:	5483      	strb	r3, [r0, r2]
 80507c0:	a807      	add	r0, sp, #28
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80507c2:	5cca      	ldrb	r2, [r1, r3]
 80507c4:	2a20      	cmp	r2, #32
 80507c6:	d001      	beq.n	80507cc <Ymodem_Receive+0x19c>
 80507c8:	2b10      	cmp	r3, #16
 80507ca:	d144      	bne.n	8050856 <Ymodem_Receive+0x226>
                    file_size[i++] = '\0';
 80507cc:	aa0c      	add	r2, sp, #48	; 0x30
 80507ce:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 80507d0:	a906      	add	r1, sp, #24
                    file_size[i++] = '\0';
 80507d2:	2200      	movs	r2, #0
 80507d4:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 80507d8:	f7fd ff4e 	bl	804e678 <Str2Int>
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 80507dc:	f8da 3000 	ldr.w	r3, [sl]
 80507e0:	9806      	ldr	r0, [sp, #24]
 80507e2:	4798      	blx	r3
 80507e4:	4604      	mov	r4, r0
 80507e6:	2800      	cmp	r0, #0
 80507e8:	d138      	bne.n	805085c <Ymodem_Receive+0x22c>
                      Serial_PutByte(ACK);
 80507ea:	2006      	movs	r0, #6
 80507ec:	f7fd ff92 	bl	804e714 <Serial_PutByte>
                      COM_Flush();
 80507f0:	f7ff ff14 	bl	805061c <COM_Flush>
                      Serial_PutByte(CRC16);
 80507f4:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 80507f6:	f7fd ff8d 	bl	804e714 <Serial_PutByte>
 80507fa:	4620      	mov	r0, r4
                packets_received ++;
 80507fc:	3601      	adds	r6, #1
                session_begin = 1U;
 80507fe:	f04f 0901 	mov.w	r9, #1
    while ((file_done == 0U) && (e_result == COM_OK))
 8050802:	2800      	cmp	r0, #0
 8050804:	d189      	bne.n	805071a <Ymodem_Receive+0xea>
 8050806:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 805080a:	4b32      	ldr	r3, [pc, #200]	; (80508d4 <Ymodem_Receive+0x2a4>)
 805080c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8050810:	601a      	str	r2, [r3, #0]
  refresh_iwdg();
 8050812:	f7ff fc89 	bl	8050128 <refresh_iwdg>
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 8050816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 805081a:	2101      	movs	r1, #1
 805081c:	f10d 0017 	add.w	r0, sp, #23
 8050820:	f7ff fef4 	bl	805060c <COM_Receive>
 8050824:	4604      	mov	r4, r0
 8050826:	4605      	mov	r5, r0
  if (status == HAL_OK)
 8050828:	2800      	cmp	r0, #0
 805082a:	d19f      	bne.n	805076c <Ymodem_Receive+0x13c>
    switch (char1)
 805082c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8050830:	2b18      	cmp	r3, #24
 8050832:	f43f af75 	beq.w	8050720 <Ymodem_Receive+0xf0>
 8050836:	f63f af08 	bhi.w	805064a <Ymodem_Receive+0x1a>
 805083a:	2b02      	cmp	r3, #2
 805083c:	f43f af0f 	beq.w	805065e <Ymodem_Receive+0x2e>
 8050840:	2b04      	cmp	r3, #4
 8050842:	f43f af0a 	beq.w	805065a <Ymodem_Receive+0x2a>
 8050846:	2b01      	cmp	r3, #1
 8050848:	d18b      	bne.n	8050762 <Ymodem_Receive+0x132>
        packet_size = PACKET_SIZE;
 805084a:	2580      	movs	r5, #128	; 0x80
 805084c:	e709      	b.n	8050662 <Ymodem_Receive+0x32>
 805084e:	4632      	mov	r2, r6
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 8050850:	4921      	ldr	r1, [pc, #132]	; (80508d8 <Ymodem_Receive+0x2a8>)
 8050852:	4822      	ldr	r0, [pc, #136]	; (80508dc <Ymodem_Receive+0x2ac>)
 8050854:	e7ad      	b.n	80507b2 <Ymodem_Receive+0x182>
                      file_size[i++] = *file_ptr++;
 8050856:	54c2      	strb	r2, [r0, r3]
 8050858:	3301      	adds	r3, #1
 805085a:	e7b2      	b.n	80507c2 <Ymodem_Receive+0x192>
                      tmp = CA;
 805085c:	ac0c      	add	r4, sp, #48	; 0x30
 805085e:	2318      	movs	r3, #24
 8050860:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050868:	2101      	movs	r1, #1
 805086a:	4620      	mov	r0, r4
 805086c:	f7ff fec6 	bl	80505fc <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8050870:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8050874:	2101      	movs	r1, #1
 8050876:	4620      	mov	r0, r4
 8050878:	f7ff fec0 	bl	80505fc <COM_Transmit>
                session_begin = 1U;
 805087c:	2002      	movs	r0, #2
  return e_result;
 805087e:	e74c      	b.n	805071a <Ymodem_Receive+0xea>
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 8050880:	f8da 3004 	ldr.w	r3, [sl, #4]
 8050884:	9903      	ldr	r1, [sp, #12]
 8050886:	4814      	ldr	r0, [pc, #80]	; (80508d8 <Ymodem_Receive+0x2a8>)
 8050888:	462a      	mov	r2, r5
 805088a:	4798      	blx	r3
 805088c:	4604      	mov	r4, r0
 805088e:	b908      	cbnz	r0, 8050894 <Ymodem_Receive+0x264>
                    Serial_PutByte(ACK);
 8050890:	2006      	movs	r0, #6
 8050892:	e7b0      	b.n	80507f6 <Ymodem_Receive+0x1c6>
                    tmp = CA;
 8050894:	ac0c      	add	r4, sp, #48	; 0x30
 8050896:	2318      	movs	r3, #24
 8050898:	f804 3d1a 	strb.w	r3, [r4, #-26]!
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 805089c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80508a0:	2101      	movs	r1, #1
 80508a2:	4620      	mov	r0, r4
 80508a4:	f7ff feaa 	bl	80505fc <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 80508a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80508ac:	2101      	movs	r1, #1
 80508ae:	4620      	mov	r0, r4
 80508b0:	f7ff fea4 	bl	80505fc <COM_Transmit>
                    e_result = COM_ERROR;
 80508b4:	2001      	movs	r0, #1
 80508b6:	e7a1      	b.n	80507fc <Ymodem_Receive+0x1cc>
            Serial_PutByte(CRC16); /* Ask for a packet */
 80508b8:	2043      	movs	r0, #67	; 0x43
 80508ba:	f7fd ff2b 	bl	804e714 <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 80508be:	4808      	ldr	r0, [pc, #32]	; (80508e0 <Ymodem_Receive+0x2b0>)
 80508c0:	f000 f848 	bl	8050954 <iprintf>
 80508c4:	e7a1      	b.n	805080a <Ymodem_Receive+0x1da>
 80508c6:	bf00      	nop
 80508c8:	20003818 	.word	0x20003818
 80508cc:	2000381a 	.word	0x2000381a
 80508d0:	2000381b 	.word	0x2000381b
 80508d4:	40003000 	.word	0x40003000
 80508d8:	2000381c 	.word	0x2000381c
 80508dc:	20006194 	.word	0x20006194
 80508e0:	08053243 	.word	0x08053243

080508e4 <__libc_init_array>:
 80508e4:	b570      	push	{r4, r5, r6, lr}
 80508e6:	4e0d      	ldr	r6, [pc, #52]	; (805091c <__libc_init_array+0x38>)
 80508e8:	4c0d      	ldr	r4, [pc, #52]	; (8050920 <__libc_init_array+0x3c>)
 80508ea:	1ba4      	subs	r4, r4, r6
 80508ec:	10a4      	asrs	r4, r4, #2
 80508ee:	2500      	movs	r5, #0
 80508f0:	42a5      	cmp	r5, r4
 80508f2:	d109      	bne.n	8050908 <__libc_init_array+0x24>
 80508f4:	4e0b      	ldr	r6, [pc, #44]	; (8050924 <__libc_init_array+0x40>)
 80508f6:	4c0c      	ldr	r4, [pc, #48]	; (8050928 <__libc_init_array+0x44>)
 80508f8:	f001 fb8a 	bl	8052010 <_init>
 80508fc:	1ba4      	subs	r4, r4, r6
 80508fe:	10a4      	asrs	r4, r4, #2
 8050900:	2500      	movs	r5, #0
 8050902:	42a5      	cmp	r5, r4
 8050904:	d105      	bne.n	8050912 <__libc_init_array+0x2e>
 8050906:	bd70      	pop	{r4, r5, r6, pc}
 8050908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 805090c:	4798      	blx	r3
 805090e:	3501      	adds	r5, #1
 8050910:	e7ee      	b.n	80508f0 <__libc_init_array+0xc>
 8050912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8050916:	4798      	blx	r3
 8050918:	3501      	adds	r5, #1
 805091a:	e7f2      	b.n	8050902 <__libc_init_array+0x1e>
 805091c:	080532e8 	.word	0x080532e8
 8050920:	080532e8 	.word	0x080532e8
 8050924:	080532e8 	.word	0x080532e8
 8050928:	080532ec 	.word	0x080532ec

0805092c <memcpy>:
 805092c:	b510      	push	{r4, lr}
 805092e:	1e43      	subs	r3, r0, #1
 8050930:	440a      	add	r2, r1
 8050932:	4291      	cmp	r1, r2
 8050934:	d100      	bne.n	8050938 <memcpy+0xc>
 8050936:	bd10      	pop	{r4, pc}
 8050938:	f811 4b01 	ldrb.w	r4, [r1], #1
 805093c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8050940:	e7f7      	b.n	8050932 <memcpy+0x6>

08050942 <memset>:
 8050942:	4402      	add	r2, r0
 8050944:	4603      	mov	r3, r0
 8050946:	4293      	cmp	r3, r2
 8050948:	d100      	bne.n	805094c <memset+0xa>
 805094a:	4770      	bx	lr
 805094c:	f803 1b01 	strb.w	r1, [r3], #1
 8050950:	e7f9      	b.n	8050946 <memset+0x4>
	...

08050954 <iprintf>:
 8050954:	b40f      	push	{r0, r1, r2, r3}
 8050956:	4b0a      	ldr	r3, [pc, #40]	; (8050980 <iprintf+0x2c>)
 8050958:	b513      	push	{r0, r1, r4, lr}
 805095a:	681c      	ldr	r4, [r3, #0]
 805095c:	b124      	cbz	r4, 8050968 <iprintf+0x14>
 805095e:	69a3      	ldr	r3, [r4, #24]
 8050960:	b913      	cbnz	r3, 8050968 <iprintf+0x14>
 8050962:	4620      	mov	r0, r4
 8050964:	f000 fb0a 	bl	8050f7c <__sinit>
 8050968:	ab05      	add	r3, sp, #20
 805096a:	9a04      	ldr	r2, [sp, #16]
 805096c:	68a1      	ldr	r1, [r4, #8]
 805096e:	9301      	str	r3, [sp, #4]
 8050970:	4620      	mov	r0, r4
 8050972:	f000 fe1d 	bl	80515b0 <_vfiprintf_r>
 8050976:	b002      	add	sp, #8
 8050978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805097c:	b004      	add	sp, #16
 805097e:	4770      	bx	lr
 8050980:	20001210 	.word	0x20001210

08050984 <_puts_r>:
 8050984:	b570      	push	{r4, r5, r6, lr}
 8050986:	460e      	mov	r6, r1
 8050988:	4605      	mov	r5, r0
 805098a:	b118      	cbz	r0, 8050994 <_puts_r+0x10>
 805098c:	6983      	ldr	r3, [r0, #24]
 805098e:	b90b      	cbnz	r3, 8050994 <_puts_r+0x10>
 8050990:	f000 faf4 	bl	8050f7c <__sinit>
 8050994:	69ab      	ldr	r3, [r5, #24]
 8050996:	68ac      	ldr	r4, [r5, #8]
 8050998:	b913      	cbnz	r3, 80509a0 <_puts_r+0x1c>
 805099a:	4628      	mov	r0, r5
 805099c:	f000 faee 	bl	8050f7c <__sinit>
 80509a0:	4b23      	ldr	r3, [pc, #140]	; (8050a30 <_puts_r+0xac>)
 80509a2:	429c      	cmp	r4, r3
 80509a4:	d117      	bne.n	80509d6 <_puts_r+0x52>
 80509a6:	686c      	ldr	r4, [r5, #4]
 80509a8:	89a3      	ldrh	r3, [r4, #12]
 80509aa:	071b      	lsls	r3, r3, #28
 80509ac:	d51d      	bpl.n	80509ea <_puts_r+0x66>
 80509ae:	6923      	ldr	r3, [r4, #16]
 80509b0:	b1db      	cbz	r3, 80509ea <_puts_r+0x66>
 80509b2:	3e01      	subs	r6, #1
 80509b4:	68a3      	ldr	r3, [r4, #8]
 80509b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80509ba:	3b01      	subs	r3, #1
 80509bc:	60a3      	str	r3, [r4, #8]
 80509be:	b9e9      	cbnz	r1, 80509fc <_puts_r+0x78>
 80509c0:	2b00      	cmp	r3, #0
 80509c2:	da2e      	bge.n	8050a22 <_puts_r+0x9e>
 80509c4:	4622      	mov	r2, r4
 80509c6:	210a      	movs	r1, #10
 80509c8:	4628      	mov	r0, r5
 80509ca:	f000 f927 	bl	8050c1c <__swbuf_r>
 80509ce:	3001      	adds	r0, #1
 80509d0:	d011      	beq.n	80509f6 <_puts_r+0x72>
 80509d2:	200a      	movs	r0, #10
 80509d4:	e011      	b.n	80509fa <_puts_r+0x76>
 80509d6:	4b17      	ldr	r3, [pc, #92]	; (8050a34 <_puts_r+0xb0>)
 80509d8:	429c      	cmp	r4, r3
 80509da:	d101      	bne.n	80509e0 <_puts_r+0x5c>
 80509dc:	68ac      	ldr	r4, [r5, #8]
 80509de:	e7e3      	b.n	80509a8 <_puts_r+0x24>
 80509e0:	4b15      	ldr	r3, [pc, #84]	; (8050a38 <_puts_r+0xb4>)
 80509e2:	429c      	cmp	r4, r3
 80509e4:	bf08      	it	eq
 80509e6:	68ec      	ldreq	r4, [r5, #12]
 80509e8:	e7de      	b.n	80509a8 <_puts_r+0x24>
 80509ea:	4621      	mov	r1, r4
 80509ec:	4628      	mov	r0, r5
 80509ee:	f000 f967 	bl	8050cc0 <__swsetup_r>
 80509f2:	2800      	cmp	r0, #0
 80509f4:	d0dd      	beq.n	80509b2 <_puts_r+0x2e>
 80509f6:	f04f 30ff 	mov.w	r0, #4294967295
 80509fa:	bd70      	pop	{r4, r5, r6, pc}
 80509fc:	2b00      	cmp	r3, #0
 80509fe:	da04      	bge.n	8050a0a <_puts_r+0x86>
 8050a00:	69a2      	ldr	r2, [r4, #24]
 8050a02:	429a      	cmp	r2, r3
 8050a04:	dc06      	bgt.n	8050a14 <_puts_r+0x90>
 8050a06:	290a      	cmp	r1, #10
 8050a08:	d004      	beq.n	8050a14 <_puts_r+0x90>
 8050a0a:	6823      	ldr	r3, [r4, #0]
 8050a0c:	1c5a      	adds	r2, r3, #1
 8050a0e:	6022      	str	r2, [r4, #0]
 8050a10:	7019      	strb	r1, [r3, #0]
 8050a12:	e7cf      	b.n	80509b4 <_puts_r+0x30>
 8050a14:	4622      	mov	r2, r4
 8050a16:	4628      	mov	r0, r5
 8050a18:	f000 f900 	bl	8050c1c <__swbuf_r>
 8050a1c:	3001      	adds	r0, #1
 8050a1e:	d1c9      	bne.n	80509b4 <_puts_r+0x30>
 8050a20:	e7e9      	b.n	80509f6 <_puts_r+0x72>
 8050a22:	6823      	ldr	r3, [r4, #0]
 8050a24:	200a      	movs	r0, #10
 8050a26:	1c5a      	adds	r2, r3, #1
 8050a28:	6022      	str	r2, [r4, #0]
 8050a2a:	7018      	strb	r0, [r3, #0]
 8050a2c:	e7e5      	b.n	80509fa <_puts_r+0x76>
 8050a2e:	bf00      	nop
 8050a30:	0805326c 	.word	0x0805326c
 8050a34:	0805328c 	.word	0x0805328c
 8050a38:	0805324c 	.word	0x0805324c

08050a3c <puts>:
 8050a3c:	4b02      	ldr	r3, [pc, #8]	; (8050a48 <puts+0xc>)
 8050a3e:	4601      	mov	r1, r0
 8050a40:	6818      	ldr	r0, [r3, #0]
 8050a42:	f7ff bf9f 	b.w	8050984 <_puts_r>
 8050a46:	bf00      	nop
 8050a48:	20001210 	.word	0x20001210

08050a4c <setvbuf>:
 8050a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8050a50:	461d      	mov	r5, r3
 8050a52:	4b51      	ldr	r3, [pc, #324]	; (8050b98 <setvbuf+0x14c>)
 8050a54:	681e      	ldr	r6, [r3, #0]
 8050a56:	4604      	mov	r4, r0
 8050a58:	460f      	mov	r7, r1
 8050a5a:	4690      	mov	r8, r2
 8050a5c:	b126      	cbz	r6, 8050a68 <setvbuf+0x1c>
 8050a5e:	69b3      	ldr	r3, [r6, #24]
 8050a60:	b913      	cbnz	r3, 8050a68 <setvbuf+0x1c>
 8050a62:	4630      	mov	r0, r6
 8050a64:	f000 fa8a 	bl	8050f7c <__sinit>
 8050a68:	4b4c      	ldr	r3, [pc, #304]	; (8050b9c <setvbuf+0x150>)
 8050a6a:	429c      	cmp	r4, r3
 8050a6c:	d152      	bne.n	8050b14 <setvbuf+0xc8>
 8050a6e:	6874      	ldr	r4, [r6, #4]
 8050a70:	f1b8 0f02 	cmp.w	r8, #2
 8050a74:	d006      	beq.n	8050a84 <setvbuf+0x38>
 8050a76:	f1b8 0f01 	cmp.w	r8, #1
 8050a7a:	f200 8089 	bhi.w	8050b90 <setvbuf+0x144>
 8050a7e:	2d00      	cmp	r5, #0
 8050a80:	f2c0 8086 	blt.w	8050b90 <setvbuf+0x144>
 8050a84:	4621      	mov	r1, r4
 8050a86:	4630      	mov	r0, r6
 8050a88:	f000 fa0e 	bl	8050ea8 <_fflush_r>
 8050a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8050a8e:	b141      	cbz	r1, 8050aa2 <setvbuf+0x56>
 8050a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8050a94:	4299      	cmp	r1, r3
 8050a96:	d002      	beq.n	8050a9e <setvbuf+0x52>
 8050a98:	4630      	mov	r0, r6
 8050a9a:	f000 fb65 	bl	8051168 <_free_r>
 8050a9e:	2300      	movs	r3, #0
 8050aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8050aa2:	2300      	movs	r3, #0
 8050aa4:	61a3      	str	r3, [r4, #24]
 8050aa6:	6063      	str	r3, [r4, #4]
 8050aa8:	89a3      	ldrh	r3, [r4, #12]
 8050aaa:	061b      	lsls	r3, r3, #24
 8050aac:	d503      	bpl.n	8050ab6 <setvbuf+0x6a>
 8050aae:	6921      	ldr	r1, [r4, #16]
 8050ab0:	4630      	mov	r0, r6
 8050ab2:	f000 fb59 	bl	8051168 <_free_r>
 8050ab6:	89a3      	ldrh	r3, [r4, #12]
 8050ab8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8050abc:	f023 0303 	bic.w	r3, r3, #3
 8050ac0:	f1b8 0f02 	cmp.w	r8, #2
 8050ac4:	81a3      	strh	r3, [r4, #12]
 8050ac6:	d05d      	beq.n	8050b84 <setvbuf+0x138>
 8050ac8:	ab01      	add	r3, sp, #4
 8050aca:	466a      	mov	r2, sp
 8050acc:	4621      	mov	r1, r4
 8050ace:	4630      	mov	r0, r6
 8050ad0:	f000 fade 	bl	8051090 <__swhatbuf_r>
 8050ad4:	89a3      	ldrh	r3, [r4, #12]
 8050ad6:	4318      	orrs	r0, r3
 8050ad8:	81a0      	strh	r0, [r4, #12]
 8050ada:	bb2d      	cbnz	r5, 8050b28 <setvbuf+0xdc>
 8050adc:	9d00      	ldr	r5, [sp, #0]
 8050ade:	4628      	mov	r0, r5
 8050ae0:	f000 fb3a 	bl	8051158 <malloc>
 8050ae4:	4607      	mov	r7, r0
 8050ae6:	2800      	cmp	r0, #0
 8050ae8:	d14e      	bne.n	8050b88 <setvbuf+0x13c>
 8050aea:	f8dd 9000 	ldr.w	r9, [sp]
 8050aee:	45a9      	cmp	r9, r5
 8050af0:	d13c      	bne.n	8050b6c <setvbuf+0x120>
 8050af2:	f04f 30ff 	mov.w	r0, #4294967295
 8050af6:	89a3      	ldrh	r3, [r4, #12]
 8050af8:	f043 0302 	orr.w	r3, r3, #2
 8050afc:	81a3      	strh	r3, [r4, #12]
 8050afe:	2300      	movs	r3, #0
 8050b00:	60a3      	str	r3, [r4, #8]
 8050b02:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8050b06:	6023      	str	r3, [r4, #0]
 8050b08:	6123      	str	r3, [r4, #16]
 8050b0a:	2301      	movs	r3, #1
 8050b0c:	6163      	str	r3, [r4, #20]
 8050b0e:	b003      	add	sp, #12
 8050b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8050b14:	4b22      	ldr	r3, [pc, #136]	; (8050ba0 <setvbuf+0x154>)
 8050b16:	429c      	cmp	r4, r3
 8050b18:	d101      	bne.n	8050b1e <setvbuf+0xd2>
 8050b1a:	68b4      	ldr	r4, [r6, #8]
 8050b1c:	e7a8      	b.n	8050a70 <setvbuf+0x24>
 8050b1e:	4b21      	ldr	r3, [pc, #132]	; (8050ba4 <setvbuf+0x158>)
 8050b20:	429c      	cmp	r4, r3
 8050b22:	bf08      	it	eq
 8050b24:	68f4      	ldreq	r4, [r6, #12]
 8050b26:	e7a3      	b.n	8050a70 <setvbuf+0x24>
 8050b28:	2f00      	cmp	r7, #0
 8050b2a:	d0d8      	beq.n	8050ade <setvbuf+0x92>
 8050b2c:	69b3      	ldr	r3, [r6, #24]
 8050b2e:	b913      	cbnz	r3, 8050b36 <setvbuf+0xea>
 8050b30:	4630      	mov	r0, r6
 8050b32:	f000 fa23 	bl	8050f7c <__sinit>
 8050b36:	f1b8 0f01 	cmp.w	r8, #1
 8050b3a:	bf08      	it	eq
 8050b3c:	89a3      	ldrheq	r3, [r4, #12]
 8050b3e:	6027      	str	r7, [r4, #0]
 8050b40:	bf04      	itt	eq
 8050b42:	f043 0301 	orreq.w	r3, r3, #1
 8050b46:	81a3      	strheq	r3, [r4, #12]
 8050b48:	89a3      	ldrh	r3, [r4, #12]
 8050b4a:	f013 0008 	ands.w	r0, r3, #8
 8050b4e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8050b52:	d01b      	beq.n	8050b8c <setvbuf+0x140>
 8050b54:	f013 0001 	ands.w	r0, r3, #1
 8050b58:	bf18      	it	ne
 8050b5a:	426d      	negne	r5, r5
 8050b5c:	f04f 0300 	mov.w	r3, #0
 8050b60:	bf1d      	ittte	ne
 8050b62:	60a3      	strne	r3, [r4, #8]
 8050b64:	61a5      	strne	r5, [r4, #24]
 8050b66:	4618      	movne	r0, r3
 8050b68:	60a5      	streq	r5, [r4, #8]
 8050b6a:	e7d0      	b.n	8050b0e <setvbuf+0xc2>
 8050b6c:	4648      	mov	r0, r9
 8050b6e:	f000 faf3 	bl	8051158 <malloc>
 8050b72:	4607      	mov	r7, r0
 8050b74:	2800      	cmp	r0, #0
 8050b76:	d0bc      	beq.n	8050af2 <setvbuf+0xa6>
 8050b78:	89a3      	ldrh	r3, [r4, #12]
 8050b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050b7e:	81a3      	strh	r3, [r4, #12]
 8050b80:	464d      	mov	r5, r9
 8050b82:	e7d3      	b.n	8050b2c <setvbuf+0xe0>
 8050b84:	2000      	movs	r0, #0
 8050b86:	e7b6      	b.n	8050af6 <setvbuf+0xaa>
 8050b88:	46a9      	mov	r9, r5
 8050b8a:	e7f5      	b.n	8050b78 <setvbuf+0x12c>
 8050b8c:	60a0      	str	r0, [r4, #8]
 8050b8e:	e7be      	b.n	8050b0e <setvbuf+0xc2>
 8050b90:	f04f 30ff 	mov.w	r0, #4294967295
 8050b94:	e7bb      	b.n	8050b0e <setvbuf+0xc2>
 8050b96:	bf00      	nop
 8050b98:	20001210 	.word	0x20001210
 8050b9c:	0805326c 	.word	0x0805326c
 8050ba0:	0805328c 	.word	0x0805328c
 8050ba4:	0805324c 	.word	0x0805324c

08050ba8 <_vsniprintf_r>:
 8050ba8:	b530      	push	{r4, r5, lr}
 8050baa:	1e14      	subs	r4, r2, #0
 8050bac:	4605      	mov	r5, r0
 8050bae:	b09b      	sub	sp, #108	; 0x6c
 8050bb0:	4618      	mov	r0, r3
 8050bb2:	da05      	bge.n	8050bc0 <_vsniprintf_r+0x18>
 8050bb4:	238b      	movs	r3, #139	; 0x8b
 8050bb6:	602b      	str	r3, [r5, #0]
 8050bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8050bbc:	b01b      	add	sp, #108	; 0x6c
 8050bbe:	bd30      	pop	{r4, r5, pc}
 8050bc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8050bc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8050bc8:	bf14      	ite	ne
 8050bca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8050bce:	4623      	moveq	r3, r4
 8050bd0:	9302      	str	r3, [sp, #8]
 8050bd2:	9305      	str	r3, [sp, #20]
 8050bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8050bd8:	9100      	str	r1, [sp, #0]
 8050bda:	9104      	str	r1, [sp, #16]
 8050bdc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8050be0:	4602      	mov	r2, r0
 8050be2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8050be4:	4669      	mov	r1, sp
 8050be6:	4628      	mov	r0, r5
 8050be8:	f000 fbc0 	bl	805136c <_svfiprintf_r>
 8050bec:	1c43      	adds	r3, r0, #1
 8050bee:	bfbc      	itt	lt
 8050bf0:	238b      	movlt	r3, #139	; 0x8b
 8050bf2:	602b      	strlt	r3, [r5, #0]
 8050bf4:	2c00      	cmp	r4, #0
 8050bf6:	d0e1      	beq.n	8050bbc <_vsniprintf_r+0x14>
 8050bf8:	9b00      	ldr	r3, [sp, #0]
 8050bfa:	2200      	movs	r2, #0
 8050bfc:	701a      	strb	r2, [r3, #0]
 8050bfe:	e7dd      	b.n	8050bbc <_vsniprintf_r+0x14>

08050c00 <vsniprintf>:
 8050c00:	b507      	push	{r0, r1, r2, lr}
 8050c02:	9300      	str	r3, [sp, #0]
 8050c04:	4613      	mov	r3, r2
 8050c06:	460a      	mov	r2, r1
 8050c08:	4601      	mov	r1, r0
 8050c0a:	4803      	ldr	r0, [pc, #12]	; (8050c18 <vsniprintf+0x18>)
 8050c0c:	6800      	ldr	r0, [r0, #0]
 8050c0e:	f7ff ffcb 	bl	8050ba8 <_vsniprintf_r>
 8050c12:	b003      	add	sp, #12
 8050c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8050c18:	20001210 	.word	0x20001210

08050c1c <__swbuf_r>:
 8050c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8050c1e:	460e      	mov	r6, r1
 8050c20:	4614      	mov	r4, r2
 8050c22:	4605      	mov	r5, r0
 8050c24:	b118      	cbz	r0, 8050c2e <__swbuf_r+0x12>
 8050c26:	6983      	ldr	r3, [r0, #24]
 8050c28:	b90b      	cbnz	r3, 8050c2e <__swbuf_r+0x12>
 8050c2a:	f000 f9a7 	bl	8050f7c <__sinit>
 8050c2e:	4b21      	ldr	r3, [pc, #132]	; (8050cb4 <__swbuf_r+0x98>)
 8050c30:	429c      	cmp	r4, r3
 8050c32:	d12a      	bne.n	8050c8a <__swbuf_r+0x6e>
 8050c34:	686c      	ldr	r4, [r5, #4]
 8050c36:	69a3      	ldr	r3, [r4, #24]
 8050c38:	60a3      	str	r3, [r4, #8]
 8050c3a:	89a3      	ldrh	r3, [r4, #12]
 8050c3c:	071a      	lsls	r2, r3, #28
 8050c3e:	d52e      	bpl.n	8050c9e <__swbuf_r+0x82>
 8050c40:	6923      	ldr	r3, [r4, #16]
 8050c42:	b363      	cbz	r3, 8050c9e <__swbuf_r+0x82>
 8050c44:	6923      	ldr	r3, [r4, #16]
 8050c46:	6820      	ldr	r0, [r4, #0]
 8050c48:	1ac0      	subs	r0, r0, r3
 8050c4a:	6963      	ldr	r3, [r4, #20]
 8050c4c:	b2f6      	uxtb	r6, r6
 8050c4e:	4283      	cmp	r3, r0
 8050c50:	4637      	mov	r7, r6
 8050c52:	dc04      	bgt.n	8050c5e <__swbuf_r+0x42>
 8050c54:	4621      	mov	r1, r4
 8050c56:	4628      	mov	r0, r5
 8050c58:	f000 f926 	bl	8050ea8 <_fflush_r>
 8050c5c:	bb28      	cbnz	r0, 8050caa <__swbuf_r+0x8e>
 8050c5e:	68a3      	ldr	r3, [r4, #8]
 8050c60:	3b01      	subs	r3, #1
 8050c62:	60a3      	str	r3, [r4, #8]
 8050c64:	6823      	ldr	r3, [r4, #0]
 8050c66:	1c5a      	adds	r2, r3, #1
 8050c68:	6022      	str	r2, [r4, #0]
 8050c6a:	701e      	strb	r6, [r3, #0]
 8050c6c:	6963      	ldr	r3, [r4, #20]
 8050c6e:	3001      	adds	r0, #1
 8050c70:	4283      	cmp	r3, r0
 8050c72:	d004      	beq.n	8050c7e <__swbuf_r+0x62>
 8050c74:	89a3      	ldrh	r3, [r4, #12]
 8050c76:	07db      	lsls	r3, r3, #31
 8050c78:	d519      	bpl.n	8050cae <__swbuf_r+0x92>
 8050c7a:	2e0a      	cmp	r6, #10
 8050c7c:	d117      	bne.n	8050cae <__swbuf_r+0x92>
 8050c7e:	4621      	mov	r1, r4
 8050c80:	4628      	mov	r0, r5
 8050c82:	f000 f911 	bl	8050ea8 <_fflush_r>
 8050c86:	b190      	cbz	r0, 8050cae <__swbuf_r+0x92>
 8050c88:	e00f      	b.n	8050caa <__swbuf_r+0x8e>
 8050c8a:	4b0b      	ldr	r3, [pc, #44]	; (8050cb8 <__swbuf_r+0x9c>)
 8050c8c:	429c      	cmp	r4, r3
 8050c8e:	d101      	bne.n	8050c94 <__swbuf_r+0x78>
 8050c90:	68ac      	ldr	r4, [r5, #8]
 8050c92:	e7d0      	b.n	8050c36 <__swbuf_r+0x1a>
 8050c94:	4b09      	ldr	r3, [pc, #36]	; (8050cbc <__swbuf_r+0xa0>)
 8050c96:	429c      	cmp	r4, r3
 8050c98:	bf08      	it	eq
 8050c9a:	68ec      	ldreq	r4, [r5, #12]
 8050c9c:	e7cb      	b.n	8050c36 <__swbuf_r+0x1a>
 8050c9e:	4621      	mov	r1, r4
 8050ca0:	4628      	mov	r0, r5
 8050ca2:	f000 f80d 	bl	8050cc0 <__swsetup_r>
 8050ca6:	2800      	cmp	r0, #0
 8050ca8:	d0cc      	beq.n	8050c44 <__swbuf_r+0x28>
 8050caa:	f04f 37ff 	mov.w	r7, #4294967295
 8050cae:	4638      	mov	r0, r7
 8050cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8050cb2:	bf00      	nop
 8050cb4:	0805326c 	.word	0x0805326c
 8050cb8:	0805328c 	.word	0x0805328c
 8050cbc:	0805324c 	.word	0x0805324c

08050cc0 <__swsetup_r>:
 8050cc0:	4b32      	ldr	r3, [pc, #200]	; (8050d8c <__swsetup_r+0xcc>)
 8050cc2:	b570      	push	{r4, r5, r6, lr}
 8050cc4:	681d      	ldr	r5, [r3, #0]
 8050cc6:	4606      	mov	r6, r0
 8050cc8:	460c      	mov	r4, r1
 8050cca:	b125      	cbz	r5, 8050cd6 <__swsetup_r+0x16>
 8050ccc:	69ab      	ldr	r3, [r5, #24]
 8050cce:	b913      	cbnz	r3, 8050cd6 <__swsetup_r+0x16>
 8050cd0:	4628      	mov	r0, r5
 8050cd2:	f000 f953 	bl	8050f7c <__sinit>
 8050cd6:	4b2e      	ldr	r3, [pc, #184]	; (8050d90 <__swsetup_r+0xd0>)
 8050cd8:	429c      	cmp	r4, r3
 8050cda:	d10f      	bne.n	8050cfc <__swsetup_r+0x3c>
 8050cdc:	686c      	ldr	r4, [r5, #4]
 8050cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8050ce2:	b29a      	uxth	r2, r3
 8050ce4:	0715      	lsls	r5, r2, #28
 8050ce6:	d42c      	bmi.n	8050d42 <__swsetup_r+0x82>
 8050ce8:	06d0      	lsls	r0, r2, #27
 8050cea:	d411      	bmi.n	8050d10 <__swsetup_r+0x50>
 8050cec:	2209      	movs	r2, #9
 8050cee:	6032      	str	r2, [r6, #0]
 8050cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050cf4:	81a3      	strh	r3, [r4, #12]
 8050cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8050cfa:	e03e      	b.n	8050d7a <__swsetup_r+0xba>
 8050cfc:	4b25      	ldr	r3, [pc, #148]	; (8050d94 <__swsetup_r+0xd4>)
 8050cfe:	429c      	cmp	r4, r3
 8050d00:	d101      	bne.n	8050d06 <__swsetup_r+0x46>
 8050d02:	68ac      	ldr	r4, [r5, #8]
 8050d04:	e7eb      	b.n	8050cde <__swsetup_r+0x1e>
 8050d06:	4b24      	ldr	r3, [pc, #144]	; (8050d98 <__swsetup_r+0xd8>)
 8050d08:	429c      	cmp	r4, r3
 8050d0a:	bf08      	it	eq
 8050d0c:	68ec      	ldreq	r4, [r5, #12]
 8050d0e:	e7e6      	b.n	8050cde <__swsetup_r+0x1e>
 8050d10:	0751      	lsls	r1, r2, #29
 8050d12:	d512      	bpl.n	8050d3a <__swsetup_r+0x7a>
 8050d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8050d16:	b141      	cbz	r1, 8050d2a <__swsetup_r+0x6a>
 8050d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8050d1c:	4299      	cmp	r1, r3
 8050d1e:	d002      	beq.n	8050d26 <__swsetup_r+0x66>
 8050d20:	4630      	mov	r0, r6
 8050d22:	f000 fa21 	bl	8051168 <_free_r>
 8050d26:	2300      	movs	r3, #0
 8050d28:	6363      	str	r3, [r4, #52]	; 0x34
 8050d2a:	89a3      	ldrh	r3, [r4, #12]
 8050d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8050d30:	81a3      	strh	r3, [r4, #12]
 8050d32:	2300      	movs	r3, #0
 8050d34:	6063      	str	r3, [r4, #4]
 8050d36:	6923      	ldr	r3, [r4, #16]
 8050d38:	6023      	str	r3, [r4, #0]
 8050d3a:	89a3      	ldrh	r3, [r4, #12]
 8050d3c:	f043 0308 	orr.w	r3, r3, #8
 8050d40:	81a3      	strh	r3, [r4, #12]
 8050d42:	6923      	ldr	r3, [r4, #16]
 8050d44:	b94b      	cbnz	r3, 8050d5a <__swsetup_r+0x9a>
 8050d46:	89a3      	ldrh	r3, [r4, #12]
 8050d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8050d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8050d50:	d003      	beq.n	8050d5a <__swsetup_r+0x9a>
 8050d52:	4621      	mov	r1, r4
 8050d54:	4630      	mov	r0, r6
 8050d56:	f000 f9bf 	bl	80510d8 <__smakebuf_r>
 8050d5a:	89a2      	ldrh	r2, [r4, #12]
 8050d5c:	f012 0301 	ands.w	r3, r2, #1
 8050d60:	d00c      	beq.n	8050d7c <__swsetup_r+0xbc>
 8050d62:	2300      	movs	r3, #0
 8050d64:	60a3      	str	r3, [r4, #8]
 8050d66:	6963      	ldr	r3, [r4, #20]
 8050d68:	425b      	negs	r3, r3
 8050d6a:	61a3      	str	r3, [r4, #24]
 8050d6c:	6923      	ldr	r3, [r4, #16]
 8050d6e:	b953      	cbnz	r3, 8050d86 <__swsetup_r+0xc6>
 8050d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8050d74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8050d78:	d1ba      	bne.n	8050cf0 <__swsetup_r+0x30>
 8050d7a:	bd70      	pop	{r4, r5, r6, pc}
 8050d7c:	0792      	lsls	r2, r2, #30
 8050d7e:	bf58      	it	pl
 8050d80:	6963      	ldrpl	r3, [r4, #20]
 8050d82:	60a3      	str	r3, [r4, #8]
 8050d84:	e7f2      	b.n	8050d6c <__swsetup_r+0xac>
 8050d86:	2000      	movs	r0, #0
 8050d88:	e7f7      	b.n	8050d7a <__swsetup_r+0xba>
 8050d8a:	bf00      	nop
 8050d8c:	20001210 	.word	0x20001210
 8050d90:	0805326c 	.word	0x0805326c
 8050d94:	0805328c 	.word	0x0805328c
 8050d98:	0805324c 	.word	0x0805324c

08050d9c <__sflush_r>:
 8050d9c:	898a      	ldrh	r2, [r1, #12]
 8050d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8050da2:	4605      	mov	r5, r0
 8050da4:	0710      	lsls	r0, r2, #28
 8050da6:	460c      	mov	r4, r1
 8050da8:	d458      	bmi.n	8050e5c <__sflush_r+0xc0>
 8050daa:	684b      	ldr	r3, [r1, #4]
 8050dac:	2b00      	cmp	r3, #0
 8050dae:	dc05      	bgt.n	8050dbc <__sflush_r+0x20>
 8050db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8050db2:	2b00      	cmp	r3, #0
 8050db4:	dc02      	bgt.n	8050dbc <__sflush_r+0x20>
 8050db6:	2000      	movs	r0, #0
 8050db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8050dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8050dbe:	2e00      	cmp	r6, #0
 8050dc0:	d0f9      	beq.n	8050db6 <__sflush_r+0x1a>
 8050dc2:	2300      	movs	r3, #0
 8050dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8050dc8:	682f      	ldr	r7, [r5, #0]
 8050dca:	6a21      	ldr	r1, [r4, #32]
 8050dcc:	602b      	str	r3, [r5, #0]
 8050dce:	d032      	beq.n	8050e36 <__sflush_r+0x9a>
 8050dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8050dd2:	89a3      	ldrh	r3, [r4, #12]
 8050dd4:	075a      	lsls	r2, r3, #29
 8050dd6:	d505      	bpl.n	8050de4 <__sflush_r+0x48>
 8050dd8:	6863      	ldr	r3, [r4, #4]
 8050dda:	1ac0      	subs	r0, r0, r3
 8050ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8050dde:	b10b      	cbz	r3, 8050de4 <__sflush_r+0x48>
 8050de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8050de2:	1ac0      	subs	r0, r0, r3
 8050de4:	2300      	movs	r3, #0
 8050de6:	4602      	mov	r2, r0
 8050de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8050dea:	6a21      	ldr	r1, [r4, #32]
 8050dec:	4628      	mov	r0, r5
 8050dee:	47b0      	blx	r6
 8050df0:	1c43      	adds	r3, r0, #1
 8050df2:	89a3      	ldrh	r3, [r4, #12]
 8050df4:	d106      	bne.n	8050e04 <__sflush_r+0x68>
 8050df6:	6829      	ldr	r1, [r5, #0]
 8050df8:	291d      	cmp	r1, #29
 8050dfa:	d848      	bhi.n	8050e8e <__sflush_r+0xf2>
 8050dfc:	4a29      	ldr	r2, [pc, #164]	; (8050ea4 <__sflush_r+0x108>)
 8050dfe:	40ca      	lsrs	r2, r1
 8050e00:	07d6      	lsls	r6, r2, #31
 8050e02:	d544      	bpl.n	8050e8e <__sflush_r+0xf2>
 8050e04:	2200      	movs	r2, #0
 8050e06:	6062      	str	r2, [r4, #4]
 8050e08:	04d9      	lsls	r1, r3, #19
 8050e0a:	6922      	ldr	r2, [r4, #16]
 8050e0c:	6022      	str	r2, [r4, #0]
 8050e0e:	d504      	bpl.n	8050e1a <__sflush_r+0x7e>
 8050e10:	1c42      	adds	r2, r0, #1
 8050e12:	d101      	bne.n	8050e18 <__sflush_r+0x7c>
 8050e14:	682b      	ldr	r3, [r5, #0]
 8050e16:	b903      	cbnz	r3, 8050e1a <__sflush_r+0x7e>
 8050e18:	6560      	str	r0, [r4, #84]	; 0x54
 8050e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8050e1c:	602f      	str	r7, [r5, #0]
 8050e1e:	2900      	cmp	r1, #0
 8050e20:	d0c9      	beq.n	8050db6 <__sflush_r+0x1a>
 8050e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8050e26:	4299      	cmp	r1, r3
 8050e28:	d002      	beq.n	8050e30 <__sflush_r+0x94>
 8050e2a:	4628      	mov	r0, r5
 8050e2c:	f000 f99c 	bl	8051168 <_free_r>
 8050e30:	2000      	movs	r0, #0
 8050e32:	6360      	str	r0, [r4, #52]	; 0x34
 8050e34:	e7c0      	b.n	8050db8 <__sflush_r+0x1c>
 8050e36:	2301      	movs	r3, #1
 8050e38:	4628      	mov	r0, r5
 8050e3a:	47b0      	blx	r6
 8050e3c:	1c41      	adds	r1, r0, #1
 8050e3e:	d1c8      	bne.n	8050dd2 <__sflush_r+0x36>
 8050e40:	682b      	ldr	r3, [r5, #0]
 8050e42:	2b00      	cmp	r3, #0
 8050e44:	d0c5      	beq.n	8050dd2 <__sflush_r+0x36>
 8050e46:	2b1d      	cmp	r3, #29
 8050e48:	d001      	beq.n	8050e4e <__sflush_r+0xb2>
 8050e4a:	2b16      	cmp	r3, #22
 8050e4c:	d101      	bne.n	8050e52 <__sflush_r+0xb6>
 8050e4e:	602f      	str	r7, [r5, #0]
 8050e50:	e7b1      	b.n	8050db6 <__sflush_r+0x1a>
 8050e52:	89a3      	ldrh	r3, [r4, #12]
 8050e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050e58:	81a3      	strh	r3, [r4, #12]
 8050e5a:	e7ad      	b.n	8050db8 <__sflush_r+0x1c>
 8050e5c:	690f      	ldr	r7, [r1, #16]
 8050e5e:	2f00      	cmp	r7, #0
 8050e60:	d0a9      	beq.n	8050db6 <__sflush_r+0x1a>
 8050e62:	0793      	lsls	r3, r2, #30
 8050e64:	680e      	ldr	r6, [r1, #0]
 8050e66:	bf08      	it	eq
 8050e68:	694b      	ldreq	r3, [r1, #20]
 8050e6a:	600f      	str	r7, [r1, #0]
 8050e6c:	bf18      	it	ne
 8050e6e:	2300      	movne	r3, #0
 8050e70:	eba6 0807 	sub.w	r8, r6, r7
 8050e74:	608b      	str	r3, [r1, #8]
 8050e76:	f1b8 0f00 	cmp.w	r8, #0
 8050e7a:	dd9c      	ble.n	8050db6 <__sflush_r+0x1a>
 8050e7c:	4643      	mov	r3, r8
 8050e7e:	463a      	mov	r2, r7
 8050e80:	6a21      	ldr	r1, [r4, #32]
 8050e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8050e84:	4628      	mov	r0, r5
 8050e86:	47b0      	blx	r6
 8050e88:	2800      	cmp	r0, #0
 8050e8a:	dc06      	bgt.n	8050e9a <__sflush_r+0xfe>
 8050e8c:	89a3      	ldrh	r3, [r4, #12]
 8050e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8050e92:	81a3      	strh	r3, [r4, #12]
 8050e94:	f04f 30ff 	mov.w	r0, #4294967295
 8050e98:	e78e      	b.n	8050db8 <__sflush_r+0x1c>
 8050e9a:	4407      	add	r7, r0
 8050e9c:	eba8 0800 	sub.w	r8, r8, r0
 8050ea0:	e7e9      	b.n	8050e76 <__sflush_r+0xda>
 8050ea2:	bf00      	nop
 8050ea4:	20400001 	.word	0x20400001

08050ea8 <_fflush_r>:
 8050ea8:	b538      	push	{r3, r4, r5, lr}
 8050eaa:	690b      	ldr	r3, [r1, #16]
 8050eac:	4605      	mov	r5, r0
 8050eae:	460c      	mov	r4, r1
 8050eb0:	b1db      	cbz	r3, 8050eea <_fflush_r+0x42>
 8050eb2:	b118      	cbz	r0, 8050ebc <_fflush_r+0x14>
 8050eb4:	6983      	ldr	r3, [r0, #24]
 8050eb6:	b90b      	cbnz	r3, 8050ebc <_fflush_r+0x14>
 8050eb8:	f000 f860 	bl	8050f7c <__sinit>
 8050ebc:	4b0c      	ldr	r3, [pc, #48]	; (8050ef0 <_fflush_r+0x48>)
 8050ebe:	429c      	cmp	r4, r3
 8050ec0:	d109      	bne.n	8050ed6 <_fflush_r+0x2e>
 8050ec2:	686c      	ldr	r4, [r5, #4]
 8050ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8050ec8:	b17b      	cbz	r3, 8050eea <_fflush_r+0x42>
 8050eca:	4621      	mov	r1, r4
 8050ecc:	4628      	mov	r0, r5
 8050ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8050ed2:	f7ff bf63 	b.w	8050d9c <__sflush_r>
 8050ed6:	4b07      	ldr	r3, [pc, #28]	; (8050ef4 <_fflush_r+0x4c>)
 8050ed8:	429c      	cmp	r4, r3
 8050eda:	d101      	bne.n	8050ee0 <_fflush_r+0x38>
 8050edc:	68ac      	ldr	r4, [r5, #8]
 8050ede:	e7f1      	b.n	8050ec4 <_fflush_r+0x1c>
 8050ee0:	4b05      	ldr	r3, [pc, #20]	; (8050ef8 <_fflush_r+0x50>)
 8050ee2:	429c      	cmp	r4, r3
 8050ee4:	bf08      	it	eq
 8050ee6:	68ec      	ldreq	r4, [r5, #12]
 8050ee8:	e7ec      	b.n	8050ec4 <_fflush_r+0x1c>
 8050eea:	2000      	movs	r0, #0
 8050eec:	bd38      	pop	{r3, r4, r5, pc}
 8050eee:	bf00      	nop
 8050ef0:	0805326c 	.word	0x0805326c
 8050ef4:	0805328c 	.word	0x0805328c
 8050ef8:	0805324c 	.word	0x0805324c

08050efc <std>:
 8050efc:	2300      	movs	r3, #0
 8050efe:	b510      	push	{r4, lr}
 8050f00:	4604      	mov	r4, r0
 8050f02:	e9c0 3300 	strd	r3, r3, [r0]
 8050f06:	6083      	str	r3, [r0, #8]
 8050f08:	8181      	strh	r1, [r0, #12]
 8050f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8050f0c:	81c2      	strh	r2, [r0, #14]
 8050f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8050f12:	6183      	str	r3, [r0, #24]
 8050f14:	4619      	mov	r1, r3
 8050f16:	2208      	movs	r2, #8
 8050f18:	305c      	adds	r0, #92	; 0x5c
 8050f1a:	f7ff fd12 	bl	8050942 <memset>
 8050f1e:	4b05      	ldr	r3, [pc, #20]	; (8050f34 <std+0x38>)
 8050f20:	6263      	str	r3, [r4, #36]	; 0x24
 8050f22:	4b05      	ldr	r3, [pc, #20]	; (8050f38 <std+0x3c>)
 8050f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8050f26:	4b05      	ldr	r3, [pc, #20]	; (8050f3c <std+0x40>)
 8050f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8050f2a:	4b05      	ldr	r3, [pc, #20]	; (8050f40 <std+0x44>)
 8050f2c:	6224      	str	r4, [r4, #32]
 8050f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8050f30:	bd10      	pop	{r4, pc}
 8050f32:	bf00      	nop
 8050f34:	08051b0d 	.word	0x08051b0d
 8050f38:	08051b2f 	.word	0x08051b2f
 8050f3c:	08051b67 	.word	0x08051b67
 8050f40:	08051b8b 	.word	0x08051b8b

08050f44 <_cleanup_r>:
 8050f44:	4901      	ldr	r1, [pc, #4]	; (8050f4c <_cleanup_r+0x8>)
 8050f46:	f000 b885 	b.w	8051054 <_fwalk_reent>
 8050f4a:	bf00      	nop
 8050f4c:	08050ea9 	.word	0x08050ea9

08050f50 <__sfmoreglue>:
 8050f50:	b570      	push	{r4, r5, r6, lr}
 8050f52:	1e4a      	subs	r2, r1, #1
 8050f54:	2568      	movs	r5, #104	; 0x68
 8050f56:	4355      	muls	r5, r2
 8050f58:	460e      	mov	r6, r1
 8050f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8050f5e:	f000 f951 	bl	8051204 <_malloc_r>
 8050f62:	4604      	mov	r4, r0
 8050f64:	b140      	cbz	r0, 8050f78 <__sfmoreglue+0x28>
 8050f66:	2100      	movs	r1, #0
 8050f68:	e9c0 1600 	strd	r1, r6, [r0]
 8050f6c:	300c      	adds	r0, #12
 8050f6e:	60a0      	str	r0, [r4, #8]
 8050f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8050f74:	f7ff fce5 	bl	8050942 <memset>
 8050f78:	4620      	mov	r0, r4
 8050f7a:	bd70      	pop	{r4, r5, r6, pc}

08050f7c <__sinit>:
 8050f7c:	6983      	ldr	r3, [r0, #24]
 8050f7e:	b510      	push	{r4, lr}
 8050f80:	4604      	mov	r4, r0
 8050f82:	bb33      	cbnz	r3, 8050fd2 <__sinit+0x56>
 8050f84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8050f88:	6503      	str	r3, [r0, #80]	; 0x50
 8050f8a:	4b12      	ldr	r3, [pc, #72]	; (8050fd4 <__sinit+0x58>)
 8050f8c:	4a12      	ldr	r2, [pc, #72]	; (8050fd8 <__sinit+0x5c>)
 8050f8e:	681b      	ldr	r3, [r3, #0]
 8050f90:	6282      	str	r2, [r0, #40]	; 0x28
 8050f92:	4298      	cmp	r0, r3
 8050f94:	bf04      	itt	eq
 8050f96:	2301      	moveq	r3, #1
 8050f98:	6183      	streq	r3, [r0, #24]
 8050f9a:	f000 f81f 	bl	8050fdc <__sfp>
 8050f9e:	6060      	str	r0, [r4, #4]
 8050fa0:	4620      	mov	r0, r4
 8050fa2:	f000 f81b 	bl	8050fdc <__sfp>
 8050fa6:	60a0      	str	r0, [r4, #8]
 8050fa8:	4620      	mov	r0, r4
 8050faa:	f000 f817 	bl	8050fdc <__sfp>
 8050fae:	2200      	movs	r2, #0
 8050fb0:	60e0      	str	r0, [r4, #12]
 8050fb2:	2104      	movs	r1, #4
 8050fb4:	6860      	ldr	r0, [r4, #4]
 8050fb6:	f7ff ffa1 	bl	8050efc <std>
 8050fba:	2201      	movs	r2, #1
 8050fbc:	2109      	movs	r1, #9
 8050fbe:	68a0      	ldr	r0, [r4, #8]
 8050fc0:	f7ff ff9c 	bl	8050efc <std>
 8050fc4:	2202      	movs	r2, #2
 8050fc6:	2112      	movs	r1, #18
 8050fc8:	68e0      	ldr	r0, [r4, #12]
 8050fca:	f7ff ff97 	bl	8050efc <std>
 8050fce:	2301      	movs	r3, #1
 8050fd0:	61a3      	str	r3, [r4, #24]
 8050fd2:	bd10      	pop	{r4, pc}
 8050fd4:	08053248 	.word	0x08053248
 8050fd8:	08050f45 	.word	0x08050f45

08050fdc <__sfp>:
 8050fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8050fde:	4b1b      	ldr	r3, [pc, #108]	; (805104c <__sfp+0x70>)
 8050fe0:	681e      	ldr	r6, [r3, #0]
 8050fe2:	69b3      	ldr	r3, [r6, #24]
 8050fe4:	4607      	mov	r7, r0
 8050fe6:	b913      	cbnz	r3, 8050fee <__sfp+0x12>
 8050fe8:	4630      	mov	r0, r6
 8050fea:	f7ff ffc7 	bl	8050f7c <__sinit>
 8050fee:	3648      	adds	r6, #72	; 0x48
 8050ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8050ff4:	3b01      	subs	r3, #1
 8050ff6:	d503      	bpl.n	8051000 <__sfp+0x24>
 8050ff8:	6833      	ldr	r3, [r6, #0]
 8050ffa:	b133      	cbz	r3, 805100a <__sfp+0x2e>
 8050ffc:	6836      	ldr	r6, [r6, #0]
 8050ffe:	e7f7      	b.n	8050ff0 <__sfp+0x14>
 8051000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8051004:	b16d      	cbz	r5, 8051022 <__sfp+0x46>
 8051006:	3468      	adds	r4, #104	; 0x68
 8051008:	e7f4      	b.n	8050ff4 <__sfp+0x18>
 805100a:	2104      	movs	r1, #4
 805100c:	4638      	mov	r0, r7
 805100e:	f7ff ff9f 	bl	8050f50 <__sfmoreglue>
 8051012:	6030      	str	r0, [r6, #0]
 8051014:	2800      	cmp	r0, #0
 8051016:	d1f1      	bne.n	8050ffc <__sfp+0x20>
 8051018:	230c      	movs	r3, #12
 805101a:	603b      	str	r3, [r7, #0]
 805101c:	4604      	mov	r4, r0
 805101e:	4620      	mov	r0, r4
 8051020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8051022:	4b0b      	ldr	r3, [pc, #44]	; (8051050 <__sfp+0x74>)
 8051024:	6665      	str	r5, [r4, #100]	; 0x64
 8051026:	e9c4 5500 	strd	r5, r5, [r4]
 805102a:	60a5      	str	r5, [r4, #8]
 805102c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8051030:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8051034:	2208      	movs	r2, #8
 8051036:	4629      	mov	r1, r5
 8051038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 805103c:	f7ff fc81 	bl	8050942 <memset>
 8051040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8051044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8051048:	e7e9      	b.n	805101e <__sfp+0x42>
 805104a:	bf00      	nop
 805104c:	08053248 	.word	0x08053248
 8051050:	ffff0001 	.word	0xffff0001

08051054 <_fwalk_reent>:
 8051054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8051058:	4680      	mov	r8, r0
 805105a:	4689      	mov	r9, r1
 805105c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8051060:	2600      	movs	r6, #0
 8051062:	b914      	cbnz	r4, 805106a <_fwalk_reent+0x16>
 8051064:	4630      	mov	r0, r6
 8051066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 805106a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 805106e:	3f01      	subs	r7, #1
 8051070:	d501      	bpl.n	8051076 <_fwalk_reent+0x22>
 8051072:	6824      	ldr	r4, [r4, #0]
 8051074:	e7f5      	b.n	8051062 <_fwalk_reent+0xe>
 8051076:	89ab      	ldrh	r3, [r5, #12]
 8051078:	2b01      	cmp	r3, #1
 805107a:	d907      	bls.n	805108c <_fwalk_reent+0x38>
 805107c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8051080:	3301      	adds	r3, #1
 8051082:	d003      	beq.n	805108c <_fwalk_reent+0x38>
 8051084:	4629      	mov	r1, r5
 8051086:	4640      	mov	r0, r8
 8051088:	47c8      	blx	r9
 805108a:	4306      	orrs	r6, r0
 805108c:	3568      	adds	r5, #104	; 0x68
 805108e:	e7ee      	b.n	805106e <_fwalk_reent+0x1a>

08051090 <__swhatbuf_r>:
 8051090:	b570      	push	{r4, r5, r6, lr}
 8051092:	460e      	mov	r6, r1
 8051094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051098:	2900      	cmp	r1, #0
 805109a:	b096      	sub	sp, #88	; 0x58
 805109c:	4614      	mov	r4, r2
 805109e:	461d      	mov	r5, r3
 80510a0:	da07      	bge.n	80510b2 <__swhatbuf_r+0x22>
 80510a2:	2300      	movs	r3, #0
 80510a4:	602b      	str	r3, [r5, #0]
 80510a6:	89b3      	ldrh	r3, [r6, #12]
 80510a8:	061a      	lsls	r2, r3, #24
 80510aa:	d410      	bmi.n	80510ce <__swhatbuf_r+0x3e>
 80510ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80510b0:	e00e      	b.n	80510d0 <__swhatbuf_r+0x40>
 80510b2:	466a      	mov	r2, sp
 80510b4:	f000 fd90 	bl	8051bd8 <_fstat_r>
 80510b8:	2800      	cmp	r0, #0
 80510ba:	dbf2      	blt.n	80510a2 <__swhatbuf_r+0x12>
 80510bc:	9a01      	ldr	r2, [sp, #4]
 80510be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80510c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80510c6:	425a      	negs	r2, r3
 80510c8:	415a      	adcs	r2, r3
 80510ca:	602a      	str	r2, [r5, #0]
 80510cc:	e7ee      	b.n	80510ac <__swhatbuf_r+0x1c>
 80510ce:	2340      	movs	r3, #64	; 0x40
 80510d0:	2000      	movs	r0, #0
 80510d2:	6023      	str	r3, [r4, #0]
 80510d4:	b016      	add	sp, #88	; 0x58
 80510d6:	bd70      	pop	{r4, r5, r6, pc}

080510d8 <__smakebuf_r>:
 80510d8:	898b      	ldrh	r3, [r1, #12]
 80510da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80510dc:	079d      	lsls	r5, r3, #30
 80510de:	4606      	mov	r6, r0
 80510e0:	460c      	mov	r4, r1
 80510e2:	d507      	bpl.n	80510f4 <__smakebuf_r+0x1c>
 80510e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80510e8:	6023      	str	r3, [r4, #0]
 80510ea:	6123      	str	r3, [r4, #16]
 80510ec:	2301      	movs	r3, #1
 80510ee:	6163      	str	r3, [r4, #20]
 80510f0:	b002      	add	sp, #8
 80510f2:	bd70      	pop	{r4, r5, r6, pc}
 80510f4:	ab01      	add	r3, sp, #4
 80510f6:	466a      	mov	r2, sp
 80510f8:	f7ff ffca 	bl	8051090 <__swhatbuf_r>
 80510fc:	9900      	ldr	r1, [sp, #0]
 80510fe:	4605      	mov	r5, r0
 8051100:	4630      	mov	r0, r6
 8051102:	f000 f87f 	bl	8051204 <_malloc_r>
 8051106:	b948      	cbnz	r0, 805111c <__smakebuf_r+0x44>
 8051108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805110c:	059a      	lsls	r2, r3, #22
 805110e:	d4ef      	bmi.n	80510f0 <__smakebuf_r+0x18>
 8051110:	f023 0303 	bic.w	r3, r3, #3
 8051114:	f043 0302 	orr.w	r3, r3, #2
 8051118:	81a3      	strh	r3, [r4, #12]
 805111a:	e7e3      	b.n	80510e4 <__smakebuf_r+0xc>
 805111c:	4b0d      	ldr	r3, [pc, #52]	; (8051154 <__smakebuf_r+0x7c>)
 805111e:	62b3      	str	r3, [r6, #40]	; 0x28
 8051120:	89a3      	ldrh	r3, [r4, #12]
 8051122:	6020      	str	r0, [r4, #0]
 8051124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8051128:	81a3      	strh	r3, [r4, #12]
 805112a:	9b00      	ldr	r3, [sp, #0]
 805112c:	6163      	str	r3, [r4, #20]
 805112e:	9b01      	ldr	r3, [sp, #4]
 8051130:	6120      	str	r0, [r4, #16]
 8051132:	b15b      	cbz	r3, 805114c <__smakebuf_r+0x74>
 8051134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8051138:	4630      	mov	r0, r6
 805113a:	f000 fd5f 	bl	8051bfc <_isatty_r>
 805113e:	b128      	cbz	r0, 805114c <__smakebuf_r+0x74>
 8051140:	89a3      	ldrh	r3, [r4, #12]
 8051142:	f023 0303 	bic.w	r3, r3, #3
 8051146:	f043 0301 	orr.w	r3, r3, #1
 805114a:	81a3      	strh	r3, [r4, #12]
 805114c:	89a3      	ldrh	r3, [r4, #12]
 805114e:	431d      	orrs	r5, r3
 8051150:	81a5      	strh	r5, [r4, #12]
 8051152:	e7cd      	b.n	80510f0 <__smakebuf_r+0x18>
 8051154:	08050f45 	.word	0x08050f45

08051158 <malloc>:
 8051158:	4b02      	ldr	r3, [pc, #8]	; (8051164 <malloc+0xc>)
 805115a:	4601      	mov	r1, r0
 805115c:	6818      	ldr	r0, [r3, #0]
 805115e:	f000 b851 	b.w	8051204 <_malloc_r>
 8051162:	bf00      	nop
 8051164:	20001210 	.word	0x20001210

08051168 <_free_r>:
 8051168:	b538      	push	{r3, r4, r5, lr}
 805116a:	4605      	mov	r5, r0
 805116c:	2900      	cmp	r1, #0
 805116e:	d045      	beq.n	80511fc <_free_r+0x94>
 8051170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8051174:	1f0c      	subs	r4, r1, #4
 8051176:	2b00      	cmp	r3, #0
 8051178:	bfb8      	it	lt
 805117a:	18e4      	addlt	r4, r4, r3
 805117c:	f000 fd79 	bl	8051c72 <__malloc_lock>
 8051180:	4a1f      	ldr	r2, [pc, #124]	; (8051200 <_free_r+0x98>)
 8051182:	6813      	ldr	r3, [r2, #0]
 8051184:	4610      	mov	r0, r2
 8051186:	b933      	cbnz	r3, 8051196 <_free_r+0x2e>
 8051188:	6063      	str	r3, [r4, #4]
 805118a:	6014      	str	r4, [r2, #0]
 805118c:	4628      	mov	r0, r5
 805118e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8051192:	f000 bd6f 	b.w	8051c74 <__malloc_unlock>
 8051196:	42a3      	cmp	r3, r4
 8051198:	d90c      	bls.n	80511b4 <_free_r+0x4c>
 805119a:	6821      	ldr	r1, [r4, #0]
 805119c:	1862      	adds	r2, r4, r1
 805119e:	4293      	cmp	r3, r2
 80511a0:	bf04      	itt	eq
 80511a2:	681a      	ldreq	r2, [r3, #0]
 80511a4:	685b      	ldreq	r3, [r3, #4]
 80511a6:	6063      	str	r3, [r4, #4]
 80511a8:	bf04      	itt	eq
 80511aa:	1852      	addeq	r2, r2, r1
 80511ac:	6022      	streq	r2, [r4, #0]
 80511ae:	6004      	str	r4, [r0, #0]
 80511b0:	e7ec      	b.n	805118c <_free_r+0x24>
 80511b2:	4613      	mov	r3, r2
 80511b4:	685a      	ldr	r2, [r3, #4]
 80511b6:	b10a      	cbz	r2, 80511bc <_free_r+0x54>
 80511b8:	42a2      	cmp	r2, r4
 80511ba:	d9fa      	bls.n	80511b2 <_free_r+0x4a>
 80511bc:	6819      	ldr	r1, [r3, #0]
 80511be:	1858      	adds	r0, r3, r1
 80511c0:	42a0      	cmp	r0, r4
 80511c2:	d10b      	bne.n	80511dc <_free_r+0x74>
 80511c4:	6820      	ldr	r0, [r4, #0]
 80511c6:	4401      	add	r1, r0
 80511c8:	1858      	adds	r0, r3, r1
 80511ca:	4282      	cmp	r2, r0
 80511cc:	6019      	str	r1, [r3, #0]
 80511ce:	d1dd      	bne.n	805118c <_free_r+0x24>
 80511d0:	6810      	ldr	r0, [r2, #0]
 80511d2:	6852      	ldr	r2, [r2, #4]
 80511d4:	605a      	str	r2, [r3, #4]
 80511d6:	4401      	add	r1, r0
 80511d8:	6019      	str	r1, [r3, #0]
 80511da:	e7d7      	b.n	805118c <_free_r+0x24>
 80511dc:	d902      	bls.n	80511e4 <_free_r+0x7c>
 80511de:	230c      	movs	r3, #12
 80511e0:	602b      	str	r3, [r5, #0]
 80511e2:	e7d3      	b.n	805118c <_free_r+0x24>
 80511e4:	6820      	ldr	r0, [r4, #0]
 80511e6:	1821      	adds	r1, r4, r0
 80511e8:	428a      	cmp	r2, r1
 80511ea:	bf04      	itt	eq
 80511ec:	6811      	ldreq	r1, [r2, #0]
 80511ee:	6852      	ldreq	r2, [r2, #4]
 80511f0:	6062      	str	r2, [r4, #4]
 80511f2:	bf04      	itt	eq
 80511f4:	1809      	addeq	r1, r1, r0
 80511f6:	6021      	streq	r1, [r4, #0]
 80511f8:	605c      	str	r4, [r3, #4]
 80511fa:	e7c7      	b.n	805118c <_free_r+0x24>
 80511fc:	bd38      	pop	{r3, r4, r5, pc}
 80511fe:	bf00      	nop
 8051200:	20003c20 	.word	0x20003c20

08051204 <_malloc_r>:
 8051204:	b570      	push	{r4, r5, r6, lr}
 8051206:	1ccd      	adds	r5, r1, #3
 8051208:	f025 0503 	bic.w	r5, r5, #3
 805120c:	3508      	adds	r5, #8
 805120e:	2d0c      	cmp	r5, #12
 8051210:	bf38      	it	cc
 8051212:	250c      	movcc	r5, #12
 8051214:	2d00      	cmp	r5, #0
 8051216:	4606      	mov	r6, r0
 8051218:	db01      	blt.n	805121e <_malloc_r+0x1a>
 805121a:	42a9      	cmp	r1, r5
 805121c:	d903      	bls.n	8051226 <_malloc_r+0x22>
 805121e:	230c      	movs	r3, #12
 8051220:	6033      	str	r3, [r6, #0]
 8051222:	2000      	movs	r0, #0
 8051224:	bd70      	pop	{r4, r5, r6, pc}
 8051226:	f000 fd24 	bl	8051c72 <__malloc_lock>
 805122a:	4a21      	ldr	r2, [pc, #132]	; (80512b0 <_malloc_r+0xac>)
 805122c:	6814      	ldr	r4, [r2, #0]
 805122e:	4621      	mov	r1, r4
 8051230:	b991      	cbnz	r1, 8051258 <_malloc_r+0x54>
 8051232:	4c20      	ldr	r4, [pc, #128]	; (80512b4 <_malloc_r+0xb0>)
 8051234:	6823      	ldr	r3, [r4, #0]
 8051236:	b91b      	cbnz	r3, 8051240 <_malloc_r+0x3c>
 8051238:	4630      	mov	r0, r6
 805123a:	f000 fc57 	bl	8051aec <_sbrk_r>
 805123e:	6020      	str	r0, [r4, #0]
 8051240:	4629      	mov	r1, r5
 8051242:	4630      	mov	r0, r6
 8051244:	f000 fc52 	bl	8051aec <_sbrk_r>
 8051248:	1c43      	adds	r3, r0, #1
 805124a:	d124      	bne.n	8051296 <_malloc_r+0x92>
 805124c:	230c      	movs	r3, #12
 805124e:	6033      	str	r3, [r6, #0]
 8051250:	4630      	mov	r0, r6
 8051252:	f000 fd0f 	bl	8051c74 <__malloc_unlock>
 8051256:	e7e4      	b.n	8051222 <_malloc_r+0x1e>
 8051258:	680b      	ldr	r3, [r1, #0]
 805125a:	1b5b      	subs	r3, r3, r5
 805125c:	d418      	bmi.n	8051290 <_malloc_r+0x8c>
 805125e:	2b0b      	cmp	r3, #11
 8051260:	d90f      	bls.n	8051282 <_malloc_r+0x7e>
 8051262:	600b      	str	r3, [r1, #0]
 8051264:	50cd      	str	r5, [r1, r3]
 8051266:	18cc      	adds	r4, r1, r3
 8051268:	4630      	mov	r0, r6
 805126a:	f000 fd03 	bl	8051c74 <__malloc_unlock>
 805126e:	f104 000b 	add.w	r0, r4, #11
 8051272:	1d23      	adds	r3, r4, #4
 8051274:	f020 0007 	bic.w	r0, r0, #7
 8051278:	1ac3      	subs	r3, r0, r3
 805127a:	d0d3      	beq.n	8051224 <_malloc_r+0x20>
 805127c:	425a      	negs	r2, r3
 805127e:	50e2      	str	r2, [r4, r3]
 8051280:	e7d0      	b.n	8051224 <_malloc_r+0x20>
 8051282:	428c      	cmp	r4, r1
 8051284:	684b      	ldr	r3, [r1, #4]
 8051286:	bf16      	itet	ne
 8051288:	6063      	strne	r3, [r4, #4]
 805128a:	6013      	streq	r3, [r2, #0]
 805128c:	460c      	movne	r4, r1
 805128e:	e7eb      	b.n	8051268 <_malloc_r+0x64>
 8051290:	460c      	mov	r4, r1
 8051292:	6849      	ldr	r1, [r1, #4]
 8051294:	e7cc      	b.n	8051230 <_malloc_r+0x2c>
 8051296:	1cc4      	adds	r4, r0, #3
 8051298:	f024 0403 	bic.w	r4, r4, #3
 805129c:	42a0      	cmp	r0, r4
 805129e:	d005      	beq.n	80512ac <_malloc_r+0xa8>
 80512a0:	1a21      	subs	r1, r4, r0
 80512a2:	4630      	mov	r0, r6
 80512a4:	f000 fc22 	bl	8051aec <_sbrk_r>
 80512a8:	3001      	adds	r0, #1
 80512aa:	d0cf      	beq.n	805124c <_malloc_r+0x48>
 80512ac:	6025      	str	r5, [r4, #0]
 80512ae:	e7db      	b.n	8051268 <_malloc_r+0x64>
 80512b0:	20003c20 	.word	0x20003c20
 80512b4:	20003c24 	.word	0x20003c24

080512b8 <__ssputs_r>:
 80512b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80512bc:	688e      	ldr	r6, [r1, #8]
 80512be:	429e      	cmp	r6, r3
 80512c0:	4682      	mov	sl, r0
 80512c2:	460c      	mov	r4, r1
 80512c4:	4690      	mov	r8, r2
 80512c6:	4699      	mov	r9, r3
 80512c8:	d837      	bhi.n	805133a <__ssputs_r+0x82>
 80512ca:	898a      	ldrh	r2, [r1, #12]
 80512cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80512d0:	d031      	beq.n	8051336 <__ssputs_r+0x7e>
 80512d2:	6825      	ldr	r5, [r4, #0]
 80512d4:	6909      	ldr	r1, [r1, #16]
 80512d6:	1a6f      	subs	r7, r5, r1
 80512d8:	6965      	ldr	r5, [r4, #20]
 80512da:	2302      	movs	r3, #2
 80512dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80512e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80512e4:	f109 0301 	add.w	r3, r9, #1
 80512e8:	443b      	add	r3, r7
 80512ea:	429d      	cmp	r5, r3
 80512ec:	bf38      	it	cc
 80512ee:	461d      	movcc	r5, r3
 80512f0:	0553      	lsls	r3, r2, #21
 80512f2:	d530      	bpl.n	8051356 <__ssputs_r+0x9e>
 80512f4:	4629      	mov	r1, r5
 80512f6:	f7ff ff85 	bl	8051204 <_malloc_r>
 80512fa:	4606      	mov	r6, r0
 80512fc:	b950      	cbnz	r0, 8051314 <__ssputs_r+0x5c>
 80512fe:	230c      	movs	r3, #12
 8051300:	f8ca 3000 	str.w	r3, [sl]
 8051304:	89a3      	ldrh	r3, [r4, #12]
 8051306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805130a:	81a3      	strh	r3, [r4, #12]
 805130c:	f04f 30ff 	mov.w	r0, #4294967295
 8051310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8051314:	463a      	mov	r2, r7
 8051316:	6921      	ldr	r1, [r4, #16]
 8051318:	f7ff fb08 	bl	805092c <memcpy>
 805131c:	89a3      	ldrh	r3, [r4, #12]
 805131e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8051322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8051326:	81a3      	strh	r3, [r4, #12]
 8051328:	6126      	str	r6, [r4, #16]
 805132a:	6165      	str	r5, [r4, #20]
 805132c:	443e      	add	r6, r7
 805132e:	1bed      	subs	r5, r5, r7
 8051330:	6026      	str	r6, [r4, #0]
 8051332:	60a5      	str	r5, [r4, #8]
 8051334:	464e      	mov	r6, r9
 8051336:	454e      	cmp	r6, r9
 8051338:	d900      	bls.n	805133c <__ssputs_r+0x84>
 805133a:	464e      	mov	r6, r9
 805133c:	4632      	mov	r2, r6
 805133e:	4641      	mov	r1, r8
 8051340:	6820      	ldr	r0, [r4, #0]
 8051342:	f000 fc7d 	bl	8051c40 <memmove>
 8051346:	68a3      	ldr	r3, [r4, #8]
 8051348:	1b9b      	subs	r3, r3, r6
 805134a:	60a3      	str	r3, [r4, #8]
 805134c:	6823      	ldr	r3, [r4, #0]
 805134e:	441e      	add	r6, r3
 8051350:	6026      	str	r6, [r4, #0]
 8051352:	2000      	movs	r0, #0
 8051354:	e7dc      	b.n	8051310 <__ssputs_r+0x58>
 8051356:	462a      	mov	r2, r5
 8051358:	f000 fc8d 	bl	8051c76 <_realloc_r>
 805135c:	4606      	mov	r6, r0
 805135e:	2800      	cmp	r0, #0
 8051360:	d1e2      	bne.n	8051328 <__ssputs_r+0x70>
 8051362:	6921      	ldr	r1, [r4, #16]
 8051364:	4650      	mov	r0, sl
 8051366:	f7ff feff 	bl	8051168 <_free_r>
 805136a:	e7c8      	b.n	80512fe <__ssputs_r+0x46>

0805136c <_svfiprintf_r>:
 805136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8051370:	461d      	mov	r5, r3
 8051372:	898b      	ldrh	r3, [r1, #12]
 8051374:	061f      	lsls	r7, r3, #24
 8051376:	b09d      	sub	sp, #116	; 0x74
 8051378:	4680      	mov	r8, r0
 805137a:	460c      	mov	r4, r1
 805137c:	4616      	mov	r6, r2
 805137e:	d50f      	bpl.n	80513a0 <_svfiprintf_r+0x34>
 8051380:	690b      	ldr	r3, [r1, #16]
 8051382:	b96b      	cbnz	r3, 80513a0 <_svfiprintf_r+0x34>
 8051384:	2140      	movs	r1, #64	; 0x40
 8051386:	f7ff ff3d 	bl	8051204 <_malloc_r>
 805138a:	6020      	str	r0, [r4, #0]
 805138c:	6120      	str	r0, [r4, #16]
 805138e:	b928      	cbnz	r0, 805139c <_svfiprintf_r+0x30>
 8051390:	230c      	movs	r3, #12
 8051392:	f8c8 3000 	str.w	r3, [r8]
 8051396:	f04f 30ff 	mov.w	r0, #4294967295
 805139a:	e0c8      	b.n	805152e <_svfiprintf_r+0x1c2>
 805139c:	2340      	movs	r3, #64	; 0x40
 805139e:	6163      	str	r3, [r4, #20]
 80513a0:	2300      	movs	r3, #0
 80513a2:	9309      	str	r3, [sp, #36]	; 0x24
 80513a4:	2320      	movs	r3, #32
 80513a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80513aa:	2330      	movs	r3, #48	; 0x30
 80513ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80513b0:	9503      	str	r5, [sp, #12]
 80513b2:	f04f 0b01 	mov.w	fp, #1
 80513b6:	4637      	mov	r7, r6
 80513b8:	463d      	mov	r5, r7
 80513ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80513be:	b10b      	cbz	r3, 80513c4 <_svfiprintf_r+0x58>
 80513c0:	2b25      	cmp	r3, #37	; 0x25
 80513c2:	d13e      	bne.n	8051442 <_svfiprintf_r+0xd6>
 80513c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80513c8:	d00b      	beq.n	80513e2 <_svfiprintf_r+0x76>
 80513ca:	4653      	mov	r3, sl
 80513cc:	4632      	mov	r2, r6
 80513ce:	4621      	mov	r1, r4
 80513d0:	4640      	mov	r0, r8
 80513d2:	f7ff ff71 	bl	80512b8 <__ssputs_r>
 80513d6:	3001      	adds	r0, #1
 80513d8:	f000 80a4 	beq.w	8051524 <_svfiprintf_r+0x1b8>
 80513dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80513de:	4453      	add	r3, sl
 80513e0:	9309      	str	r3, [sp, #36]	; 0x24
 80513e2:	783b      	ldrb	r3, [r7, #0]
 80513e4:	2b00      	cmp	r3, #0
 80513e6:	f000 809d 	beq.w	8051524 <_svfiprintf_r+0x1b8>
 80513ea:	2300      	movs	r3, #0
 80513ec:	f04f 32ff 	mov.w	r2, #4294967295
 80513f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80513f4:	9304      	str	r3, [sp, #16]
 80513f6:	9307      	str	r3, [sp, #28]
 80513f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80513fc:	931a      	str	r3, [sp, #104]	; 0x68
 80513fe:	462f      	mov	r7, r5
 8051400:	2205      	movs	r2, #5
 8051402:	f817 1b01 	ldrb.w	r1, [r7], #1
 8051406:	4850      	ldr	r0, [pc, #320]	; (8051548 <_svfiprintf_r+0x1dc>)
 8051408:	f7ef f81a 	bl	8040440 <memchr>
 805140c:	9b04      	ldr	r3, [sp, #16]
 805140e:	b9d0      	cbnz	r0, 8051446 <_svfiprintf_r+0xda>
 8051410:	06d9      	lsls	r1, r3, #27
 8051412:	bf44      	itt	mi
 8051414:	2220      	movmi	r2, #32
 8051416:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 805141a:	071a      	lsls	r2, r3, #28
 805141c:	bf44      	itt	mi
 805141e:	222b      	movmi	r2, #43	; 0x2b
 8051420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8051424:	782a      	ldrb	r2, [r5, #0]
 8051426:	2a2a      	cmp	r2, #42	; 0x2a
 8051428:	d015      	beq.n	8051456 <_svfiprintf_r+0xea>
 805142a:	9a07      	ldr	r2, [sp, #28]
 805142c:	462f      	mov	r7, r5
 805142e:	2000      	movs	r0, #0
 8051430:	250a      	movs	r5, #10
 8051432:	4639      	mov	r1, r7
 8051434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8051438:	3b30      	subs	r3, #48	; 0x30
 805143a:	2b09      	cmp	r3, #9
 805143c:	d94d      	bls.n	80514da <_svfiprintf_r+0x16e>
 805143e:	b1b8      	cbz	r0, 8051470 <_svfiprintf_r+0x104>
 8051440:	e00f      	b.n	8051462 <_svfiprintf_r+0xf6>
 8051442:	462f      	mov	r7, r5
 8051444:	e7b8      	b.n	80513b8 <_svfiprintf_r+0x4c>
 8051446:	4a40      	ldr	r2, [pc, #256]	; (8051548 <_svfiprintf_r+0x1dc>)
 8051448:	1a80      	subs	r0, r0, r2
 805144a:	fa0b f000 	lsl.w	r0, fp, r0
 805144e:	4318      	orrs	r0, r3
 8051450:	9004      	str	r0, [sp, #16]
 8051452:	463d      	mov	r5, r7
 8051454:	e7d3      	b.n	80513fe <_svfiprintf_r+0x92>
 8051456:	9a03      	ldr	r2, [sp, #12]
 8051458:	1d11      	adds	r1, r2, #4
 805145a:	6812      	ldr	r2, [r2, #0]
 805145c:	9103      	str	r1, [sp, #12]
 805145e:	2a00      	cmp	r2, #0
 8051460:	db01      	blt.n	8051466 <_svfiprintf_r+0xfa>
 8051462:	9207      	str	r2, [sp, #28]
 8051464:	e004      	b.n	8051470 <_svfiprintf_r+0x104>
 8051466:	4252      	negs	r2, r2
 8051468:	f043 0302 	orr.w	r3, r3, #2
 805146c:	9207      	str	r2, [sp, #28]
 805146e:	9304      	str	r3, [sp, #16]
 8051470:	783b      	ldrb	r3, [r7, #0]
 8051472:	2b2e      	cmp	r3, #46	; 0x2e
 8051474:	d10c      	bne.n	8051490 <_svfiprintf_r+0x124>
 8051476:	787b      	ldrb	r3, [r7, #1]
 8051478:	2b2a      	cmp	r3, #42	; 0x2a
 805147a:	d133      	bne.n	80514e4 <_svfiprintf_r+0x178>
 805147c:	9b03      	ldr	r3, [sp, #12]
 805147e:	1d1a      	adds	r2, r3, #4
 8051480:	681b      	ldr	r3, [r3, #0]
 8051482:	9203      	str	r2, [sp, #12]
 8051484:	2b00      	cmp	r3, #0
 8051486:	bfb8      	it	lt
 8051488:	f04f 33ff 	movlt.w	r3, #4294967295
 805148c:	3702      	adds	r7, #2
 805148e:	9305      	str	r3, [sp, #20]
 8051490:	4d2e      	ldr	r5, [pc, #184]	; (805154c <_svfiprintf_r+0x1e0>)
 8051492:	7839      	ldrb	r1, [r7, #0]
 8051494:	2203      	movs	r2, #3
 8051496:	4628      	mov	r0, r5
 8051498:	f7ee ffd2 	bl	8040440 <memchr>
 805149c:	b138      	cbz	r0, 80514ae <_svfiprintf_r+0x142>
 805149e:	2340      	movs	r3, #64	; 0x40
 80514a0:	1b40      	subs	r0, r0, r5
 80514a2:	fa03 f000 	lsl.w	r0, r3, r0
 80514a6:	9b04      	ldr	r3, [sp, #16]
 80514a8:	4303      	orrs	r3, r0
 80514aa:	3701      	adds	r7, #1
 80514ac:	9304      	str	r3, [sp, #16]
 80514ae:	7839      	ldrb	r1, [r7, #0]
 80514b0:	4827      	ldr	r0, [pc, #156]	; (8051550 <_svfiprintf_r+0x1e4>)
 80514b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80514b6:	2206      	movs	r2, #6
 80514b8:	1c7e      	adds	r6, r7, #1
 80514ba:	f7ee ffc1 	bl	8040440 <memchr>
 80514be:	2800      	cmp	r0, #0
 80514c0:	d038      	beq.n	8051534 <_svfiprintf_r+0x1c8>
 80514c2:	4b24      	ldr	r3, [pc, #144]	; (8051554 <_svfiprintf_r+0x1e8>)
 80514c4:	bb13      	cbnz	r3, 805150c <_svfiprintf_r+0x1a0>
 80514c6:	9b03      	ldr	r3, [sp, #12]
 80514c8:	3307      	adds	r3, #7
 80514ca:	f023 0307 	bic.w	r3, r3, #7
 80514ce:	3308      	adds	r3, #8
 80514d0:	9303      	str	r3, [sp, #12]
 80514d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80514d4:	444b      	add	r3, r9
 80514d6:	9309      	str	r3, [sp, #36]	; 0x24
 80514d8:	e76d      	b.n	80513b6 <_svfiprintf_r+0x4a>
 80514da:	fb05 3202 	mla	r2, r5, r2, r3
 80514de:	2001      	movs	r0, #1
 80514e0:	460f      	mov	r7, r1
 80514e2:	e7a6      	b.n	8051432 <_svfiprintf_r+0xc6>
 80514e4:	2300      	movs	r3, #0
 80514e6:	3701      	adds	r7, #1
 80514e8:	9305      	str	r3, [sp, #20]
 80514ea:	4619      	mov	r1, r3
 80514ec:	250a      	movs	r5, #10
 80514ee:	4638      	mov	r0, r7
 80514f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80514f4:	3a30      	subs	r2, #48	; 0x30
 80514f6:	2a09      	cmp	r2, #9
 80514f8:	d903      	bls.n	8051502 <_svfiprintf_r+0x196>
 80514fa:	2b00      	cmp	r3, #0
 80514fc:	d0c8      	beq.n	8051490 <_svfiprintf_r+0x124>
 80514fe:	9105      	str	r1, [sp, #20]
 8051500:	e7c6      	b.n	8051490 <_svfiprintf_r+0x124>
 8051502:	fb05 2101 	mla	r1, r5, r1, r2
 8051506:	2301      	movs	r3, #1
 8051508:	4607      	mov	r7, r0
 805150a:	e7f0      	b.n	80514ee <_svfiprintf_r+0x182>
 805150c:	ab03      	add	r3, sp, #12
 805150e:	9300      	str	r3, [sp, #0]
 8051510:	4622      	mov	r2, r4
 8051512:	4b11      	ldr	r3, [pc, #68]	; (8051558 <_svfiprintf_r+0x1ec>)
 8051514:	a904      	add	r1, sp, #16
 8051516:	4640      	mov	r0, r8
 8051518:	f3af 8000 	nop.w
 805151c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8051520:	4681      	mov	r9, r0
 8051522:	d1d6      	bne.n	80514d2 <_svfiprintf_r+0x166>
 8051524:	89a3      	ldrh	r3, [r4, #12]
 8051526:	065b      	lsls	r3, r3, #25
 8051528:	f53f af35 	bmi.w	8051396 <_svfiprintf_r+0x2a>
 805152c:	9809      	ldr	r0, [sp, #36]	; 0x24
 805152e:	b01d      	add	sp, #116	; 0x74
 8051530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8051534:	ab03      	add	r3, sp, #12
 8051536:	9300      	str	r3, [sp, #0]
 8051538:	4622      	mov	r2, r4
 805153a:	4b07      	ldr	r3, [pc, #28]	; (8051558 <_svfiprintf_r+0x1ec>)
 805153c:	a904      	add	r1, sp, #16
 805153e:	4640      	mov	r0, r8
 8051540:	f000 f9c2 	bl	80518c8 <_printf_i>
 8051544:	e7ea      	b.n	805151c <_svfiprintf_r+0x1b0>
 8051546:	bf00      	nop
 8051548:	080532ac 	.word	0x080532ac
 805154c:	080532b2 	.word	0x080532b2
 8051550:	080532b6 	.word	0x080532b6
 8051554:	00000000 	.word	0x00000000
 8051558:	080512b9 	.word	0x080512b9

0805155c <__sfputc_r>:
 805155c:	6893      	ldr	r3, [r2, #8]
 805155e:	3b01      	subs	r3, #1
 8051560:	2b00      	cmp	r3, #0
 8051562:	b410      	push	{r4}
 8051564:	6093      	str	r3, [r2, #8]
 8051566:	da08      	bge.n	805157a <__sfputc_r+0x1e>
 8051568:	6994      	ldr	r4, [r2, #24]
 805156a:	42a3      	cmp	r3, r4
 805156c:	db01      	blt.n	8051572 <__sfputc_r+0x16>
 805156e:	290a      	cmp	r1, #10
 8051570:	d103      	bne.n	805157a <__sfputc_r+0x1e>
 8051572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8051576:	f7ff bb51 	b.w	8050c1c <__swbuf_r>
 805157a:	6813      	ldr	r3, [r2, #0]
 805157c:	1c58      	adds	r0, r3, #1
 805157e:	6010      	str	r0, [r2, #0]
 8051580:	7019      	strb	r1, [r3, #0]
 8051582:	4608      	mov	r0, r1
 8051584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8051588:	4770      	bx	lr

0805158a <__sfputs_r>:
 805158a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805158c:	4606      	mov	r6, r0
 805158e:	460f      	mov	r7, r1
 8051590:	4614      	mov	r4, r2
 8051592:	18d5      	adds	r5, r2, r3
 8051594:	42ac      	cmp	r4, r5
 8051596:	d101      	bne.n	805159c <__sfputs_r+0x12>
 8051598:	2000      	movs	r0, #0
 805159a:	e007      	b.n	80515ac <__sfputs_r+0x22>
 805159c:	463a      	mov	r2, r7
 805159e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80515a2:	4630      	mov	r0, r6
 80515a4:	f7ff ffda 	bl	805155c <__sfputc_r>
 80515a8:	1c43      	adds	r3, r0, #1
 80515aa:	d1f3      	bne.n	8051594 <__sfputs_r+0xa>
 80515ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080515b0 <_vfiprintf_r>:
 80515b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80515b4:	460c      	mov	r4, r1
 80515b6:	b09d      	sub	sp, #116	; 0x74
 80515b8:	4617      	mov	r7, r2
 80515ba:	461d      	mov	r5, r3
 80515bc:	4606      	mov	r6, r0
 80515be:	b118      	cbz	r0, 80515c8 <_vfiprintf_r+0x18>
 80515c0:	6983      	ldr	r3, [r0, #24]
 80515c2:	b90b      	cbnz	r3, 80515c8 <_vfiprintf_r+0x18>
 80515c4:	f7ff fcda 	bl	8050f7c <__sinit>
 80515c8:	4b7c      	ldr	r3, [pc, #496]	; (80517bc <_vfiprintf_r+0x20c>)
 80515ca:	429c      	cmp	r4, r3
 80515cc:	d158      	bne.n	8051680 <_vfiprintf_r+0xd0>
 80515ce:	6874      	ldr	r4, [r6, #4]
 80515d0:	89a3      	ldrh	r3, [r4, #12]
 80515d2:	0718      	lsls	r0, r3, #28
 80515d4:	d55e      	bpl.n	8051694 <_vfiprintf_r+0xe4>
 80515d6:	6923      	ldr	r3, [r4, #16]
 80515d8:	2b00      	cmp	r3, #0
 80515da:	d05b      	beq.n	8051694 <_vfiprintf_r+0xe4>
 80515dc:	2300      	movs	r3, #0
 80515de:	9309      	str	r3, [sp, #36]	; 0x24
 80515e0:	2320      	movs	r3, #32
 80515e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80515e6:	2330      	movs	r3, #48	; 0x30
 80515e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80515ec:	9503      	str	r5, [sp, #12]
 80515ee:	f04f 0b01 	mov.w	fp, #1
 80515f2:	46b8      	mov	r8, r7
 80515f4:	4645      	mov	r5, r8
 80515f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80515fa:	b10b      	cbz	r3, 8051600 <_vfiprintf_r+0x50>
 80515fc:	2b25      	cmp	r3, #37	; 0x25
 80515fe:	d154      	bne.n	80516aa <_vfiprintf_r+0xfa>
 8051600:	ebb8 0a07 	subs.w	sl, r8, r7
 8051604:	d00b      	beq.n	805161e <_vfiprintf_r+0x6e>
 8051606:	4653      	mov	r3, sl
 8051608:	463a      	mov	r2, r7
 805160a:	4621      	mov	r1, r4
 805160c:	4630      	mov	r0, r6
 805160e:	f7ff ffbc 	bl	805158a <__sfputs_r>
 8051612:	3001      	adds	r0, #1
 8051614:	f000 80c2 	beq.w	805179c <_vfiprintf_r+0x1ec>
 8051618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805161a:	4453      	add	r3, sl
 805161c:	9309      	str	r3, [sp, #36]	; 0x24
 805161e:	f898 3000 	ldrb.w	r3, [r8]
 8051622:	2b00      	cmp	r3, #0
 8051624:	f000 80ba 	beq.w	805179c <_vfiprintf_r+0x1ec>
 8051628:	2300      	movs	r3, #0
 805162a:	f04f 32ff 	mov.w	r2, #4294967295
 805162e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8051632:	9304      	str	r3, [sp, #16]
 8051634:	9307      	str	r3, [sp, #28]
 8051636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 805163a:	931a      	str	r3, [sp, #104]	; 0x68
 805163c:	46a8      	mov	r8, r5
 805163e:	2205      	movs	r2, #5
 8051640:	f818 1b01 	ldrb.w	r1, [r8], #1
 8051644:	485e      	ldr	r0, [pc, #376]	; (80517c0 <_vfiprintf_r+0x210>)
 8051646:	f7ee fefb 	bl	8040440 <memchr>
 805164a:	9b04      	ldr	r3, [sp, #16]
 805164c:	bb78      	cbnz	r0, 80516ae <_vfiprintf_r+0xfe>
 805164e:	06d9      	lsls	r1, r3, #27
 8051650:	bf44      	itt	mi
 8051652:	2220      	movmi	r2, #32
 8051654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8051658:	071a      	lsls	r2, r3, #28
 805165a:	bf44      	itt	mi
 805165c:	222b      	movmi	r2, #43	; 0x2b
 805165e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8051662:	782a      	ldrb	r2, [r5, #0]
 8051664:	2a2a      	cmp	r2, #42	; 0x2a
 8051666:	d02a      	beq.n	80516be <_vfiprintf_r+0x10e>
 8051668:	9a07      	ldr	r2, [sp, #28]
 805166a:	46a8      	mov	r8, r5
 805166c:	2000      	movs	r0, #0
 805166e:	250a      	movs	r5, #10
 8051670:	4641      	mov	r1, r8
 8051672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8051676:	3b30      	subs	r3, #48	; 0x30
 8051678:	2b09      	cmp	r3, #9
 805167a:	d969      	bls.n	8051750 <_vfiprintf_r+0x1a0>
 805167c:	b360      	cbz	r0, 80516d8 <_vfiprintf_r+0x128>
 805167e:	e024      	b.n	80516ca <_vfiprintf_r+0x11a>
 8051680:	4b50      	ldr	r3, [pc, #320]	; (80517c4 <_vfiprintf_r+0x214>)
 8051682:	429c      	cmp	r4, r3
 8051684:	d101      	bne.n	805168a <_vfiprintf_r+0xda>
 8051686:	68b4      	ldr	r4, [r6, #8]
 8051688:	e7a2      	b.n	80515d0 <_vfiprintf_r+0x20>
 805168a:	4b4f      	ldr	r3, [pc, #316]	; (80517c8 <_vfiprintf_r+0x218>)
 805168c:	429c      	cmp	r4, r3
 805168e:	bf08      	it	eq
 8051690:	68f4      	ldreq	r4, [r6, #12]
 8051692:	e79d      	b.n	80515d0 <_vfiprintf_r+0x20>
 8051694:	4621      	mov	r1, r4
 8051696:	4630      	mov	r0, r6
 8051698:	f7ff fb12 	bl	8050cc0 <__swsetup_r>
 805169c:	2800      	cmp	r0, #0
 805169e:	d09d      	beq.n	80515dc <_vfiprintf_r+0x2c>
 80516a0:	f04f 30ff 	mov.w	r0, #4294967295
 80516a4:	b01d      	add	sp, #116	; 0x74
 80516a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80516aa:	46a8      	mov	r8, r5
 80516ac:	e7a2      	b.n	80515f4 <_vfiprintf_r+0x44>
 80516ae:	4a44      	ldr	r2, [pc, #272]	; (80517c0 <_vfiprintf_r+0x210>)
 80516b0:	1a80      	subs	r0, r0, r2
 80516b2:	fa0b f000 	lsl.w	r0, fp, r0
 80516b6:	4318      	orrs	r0, r3
 80516b8:	9004      	str	r0, [sp, #16]
 80516ba:	4645      	mov	r5, r8
 80516bc:	e7be      	b.n	805163c <_vfiprintf_r+0x8c>
 80516be:	9a03      	ldr	r2, [sp, #12]
 80516c0:	1d11      	adds	r1, r2, #4
 80516c2:	6812      	ldr	r2, [r2, #0]
 80516c4:	9103      	str	r1, [sp, #12]
 80516c6:	2a00      	cmp	r2, #0
 80516c8:	db01      	blt.n	80516ce <_vfiprintf_r+0x11e>
 80516ca:	9207      	str	r2, [sp, #28]
 80516cc:	e004      	b.n	80516d8 <_vfiprintf_r+0x128>
 80516ce:	4252      	negs	r2, r2
 80516d0:	f043 0302 	orr.w	r3, r3, #2
 80516d4:	9207      	str	r2, [sp, #28]
 80516d6:	9304      	str	r3, [sp, #16]
 80516d8:	f898 3000 	ldrb.w	r3, [r8]
 80516dc:	2b2e      	cmp	r3, #46	; 0x2e
 80516de:	d10e      	bne.n	80516fe <_vfiprintf_r+0x14e>
 80516e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80516e4:	2b2a      	cmp	r3, #42	; 0x2a
 80516e6:	d138      	bne.n	805175a <_vfiprintf_r+0x1aa>
 80516e8:	9b03      	ldr	r3, [sp, #12]
 80516ea:	1d1a      	adds	r2, r3, #4
 80516ec:	681b      	ldr	r3, [r3, #0]
 80516ee:	9203      	str	r2, [sp, #12]
 80516f0:	2b00      	cmp	r3, #0
 80516f2:	bfb8      	it	lt
 80516f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80516f8:	f108 0802 	add.w	r8, r8, #2
 80516fc:	9305      	str	r3, [sp, #20]
 80516fe:	4d33      	ldr	r5, [pc, #204]	; (80517cc <_vfiprintf_r+0x21c>)
 8051700:	f898 1000 	ldrb.w	r1, [r8]
 8051704:	2203      	movs	r2, #3
 8051706:	4628      	mov	r0, r5
 8051708:	f7ee fe9a 	bl	8040440 <memchr>
 805170c:	b140      	cbz	r0, 8051720 <_vfiprintf_r+0x170>
 805170e:	2340      	movs	r3, #64	; 0x40
 8051710:	1b40      	subs	r0, r0, r5
 8051712:	fa03 f000 	lsl.w	r0, r3, r0
 8051716:	9b04      	ldr	r3, [sp, #16]
 8051718:	4303      	orrs	r3, r0
 805171a:	f108 0801 	add.w	r8, r8, #1
 805171e:	9304      	str	r3, [sp, #16]
 8051720:	f898 1000 	ldrb.w	r1, [r8]
 8051724:	482a      	ldr	r0, [pc, #168]	; (80517d0 <_vfiprintf_r+0x220>)
 8051726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805172a:	2206      	movs	r2, #6
 805172c:	f108 0701 	add.w	r7, r8, #1
 8051730:	f7ee fe86 	bl	8040440 <memchr>
 8051734:	2800      	cmp	r0, #0
 8051736:	d037      	beq.n	80517a8 <_vfiprintf_r+0x1f8>
 8051738:	4b26      	ldr	r3, [pc, #152]	; (80517d4 <_vfiprintf_r+0x224>)
 805173a:	bb1b      	cbnz	r3, 8051784 <_vfiprintf_r+0x1d4>
 805173c:	9b03      	ldr	r3, [sp, #12]
 805173e:	3307      	adds	r3, #7
 8051740:	f023 0307 	bic.w	r3, r3, #7
 8051744:	3308      	adds	r3, #8
 8051746:	9303      	str	r3, [sp, #12]
 8051748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805174a:	444b      	add	r3, r9
 805174c:	9309      	str	r3, [sp, #36]	; 0x24
 805174e:	e750      	b.n	80515f2 <_vfiprintf_r+0x42>
 8051750:	fb05 3202 	mla	r2, r5, r2, r3
 8051754:	2001      	movs	r0, #1
 8051756:	4688      	mov	r8, r1
 8051758:	e78a      	b.n	8051670 <_vfiprintf_r+0xc0>
 805175a:	2300      	movs	r3, #0
 805175c:	f108 0801 	add.w	r8, r8, #1
 8051760:	9305      	str	r3, [sp, #20]
 8051762:	4619      	mov	r1, r3
 8051764:	250a      	movs	r5, #10
 8051766:	4640      	mov	r0, r8
 8051768:	f810 2b01 	ldrb.w	r2, [r0], #1
 805176c:	3a30      	subs	r2, #48	; 0x30
 805176e:	2a09      	cmp	r2, #9
 8051770:	d903      	bls.n	805177a <_vfiprintf_r+0x1ca>
 8051772:	2b00      	cmp	r3, #0
 8051774:	d0c3      	beq.n	80516fe <_vfiprintf_r+0x14e>
 8051776:	9105      	str	r1, [sp, #20]
 8051778:	e7c1      	b.n	80516fe <_vfiprintf_r+0x14e>
 805177a:	fb05 2101 	mla	r1, r5, r1, r2
 805177e:	2301      	movs	r3, #1
 8051780:	4680      	mov	r8, r0
 8051782:	e7f0      	b.n	8051766 <_vfiprintf_r+0x1b6>
 8051784:	ab03      	add	r3, sp, #12
 8051786:	9300      	str	r3, [sp, #0]
 8051788:	4622      	mov	r2, r4
 805178a:	4b13      	ldr	r3, [pc, #76]	; (80517d8 <_vfiprintf_r+0x228>)
 805178c:	a904      	add	r1, sp, #16
 805178e:	4630      	mov	r0, r6
 8051790:	f3af 8000 	nop.w
 8051794:	f1b0 3fff 	cmp.w	r0, #4294967295
 8051798:	4681      	mov	r9, r0
 805179a:	d1d5      	bne.n	8051748 <_vfiprintf_r+0x198>
 805179c:	89a3      	ldrh	r3, [r4, #12]
 805179e:	065b      	lsls	r3, r3, #25
 80517a0:	f53f af7e 	bmi.w	80516a0 <_vfiprintf_r+0xf0>
 80517a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80517a6:	e77d      	b.n	80516a4 <_vfiprintf_r+0xf4>
 80517a8:	ab03      	add	r3, sp, #12
 80517aa:	9300      	str	r3, [sp, #0]
 80517ac:	4622      	mov	r2, r4
 80517ae:	4b0a      	ldr	r3, [pc, #40]	; (80517d8 <_vfiprintf_r+0x228>)
 80517b0:	a904      	add	r1, sp, #16
 80517b2:	4630      	mov	r0, r6
 80517b4:	f000 f888 	bl	80518c8 <_printf_i>
 80517b8:	e7ec      	b.n	8051794 <_vfiprintf_r+0x1e4>
 80517ba:	bf00      	nop
 80517bc:	0805326c 	.word	0x0805326c
 80517c0:	080532ac 	.word	0x080532ac
 80517c4:	0805328c 	.word	0x0805328c
 80517c8:	0805324c 	.word	0x0805324c
 80517cc:	080532b2 	.word	0x080532b2
 80517d0:	080532b6 	.word	0x080532b6
 80517d4:	00000000 	.word	0x00000000
 80517d8:	0805158b 	.word	0x0805158b

080517dc <_printf_common>:
 80517dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80517e0:	4691      	mov	r9, r2
 80517e2:	461f      	mov	r7, r3
 80517e4:	688a      	ldr	r2, [r1, #8]
 80517e6:	690b      	ldr	r3, [r1, #16]
 80517e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80517ec:	4293      	cmp	r3, r2
 80517ee:	bfb8      	it	lt
 80517f0:	4613      	movlt	r3, r2
 80517f2:	f8c9 3000 	str.w	r3, [r9]
 80517f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80517fa:	4606      	mov	r6, r0
 80517fc:	460c      	mov	r4, r1
 80517fe:	b112      	cbz	r2, 8051806 <_printf_common+0x2a>
 8051800:	3301      	adds	r3, #1
 8051802:	f8c9 3000 	str.w	r3, [r9]
 8051806:	6823      	ldr	r3, [r4, #0]
 8051808:	0699      	lsls	r1, r3, #26
 805180a:	bf42      	ittt	mi
 805180c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8051810:	3302      	addmi	r3, #2
 8051812:	f8c9 3000 	strmi.w	r3, [r9]
 8051816:	6825      	ldr	r5, [r4, #0]
 8051818:	f015 0506 	ands.w	r5, r5, #6
 805181c:	d107      	bne.n	805182e <_printf_common+0x52>
 805181e:	f104 0a19 	add.w	sl, r4, #25
 8051822:	68e3      	ldr	r3, [r4, #12]
 8051824:	f8d9 2000 	ldr.w	r2, [r9]
 8051828:	1a9b      	subs	r3, r3, r2
 805182a:	42ab      	cmp	r3, r5
 805182c:	dc28      	bgt.n	8051880 <_printf_common+0xa4>
 805182e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8051832:	6822      	ldr	r2, [r4, #0]
 8051834:	3300      	adds	r3, #0
 8051836:	bf18      	it	ne
 8051838:	2301      	movne	r3, #1
 805183a:	0692      	lsls	r2, r2, #26
 805183c:	d42d      	bmi.n	805189a <_printf_common+0xbe>
 805183e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8051842:	4639      	mov	r1, r7
 8051844:	4630      	mov	r0, r6
 8051846:	47c0      	blx	r8
 8051848:	3001      	adds	r0, #1
 805184a:	d020      	beq.n	805188e <_printf_common+0xb2>
 805184c:	6823      	ldr	r3, [r4, #0]
 805184e:	68e5      	ldr	r5, [r4, #12]
 8051850:	f8d9 2000 	ldr.w	r2, [r9]
 8051854:	f003 0306 	and.w	r3, r3, #6
 8051858:	2b04      	cmp	r3, #4
 805185a:	bf08      	it	eq
 805185c:	1aad      	subeq	r5, r5, r2
 805185e:	68a3      	ldr	r3, [r4, #8]
 8051860:	6922      	ldr	r2, [r4, #16]
 8051862:	bf0c      	ite	eq
 8051864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8051868:	2500      	movne	r5, #0
 805186a:	4293      	cmp	r3, r2
 805186c:	bfc4      	itt	gt
 805186e:	1a9b      	subgt	r3, r3, r2
 8051870:	18ed      	addgt	r5, r5, r3
 8051872:	f04f 0900 	mov.w	r9, #0
 8051876:	341a      	adds	r4, #26
 8051878:	454d      	cmp	r5, r9
 805187a:	d11a      	bne.n	80518b2 <_printf_common+0xd6>
 805187c:	2000      	movs	r0, #0
 805187e:	e008      	b.n	8051892 <_printf_common+0xb6>
 8051880:	2301      	movs	r3, #1
 8051882:	4652      	mov	r2, sl
 8051884:	4639      	mov	r1, r7
 8051886:	4630      	mov	r0, r6
 8051888:	47c0      	blx	r8
 805188a:	3001      	adds	r0, #1
 805188c:	d103      	bne.n	8051896 <_printf_common+0xba>
 805188e:	f04f 30ff 	mov.w	r0, #4294967295
 8051892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8051896:	3501      	adds	r5, #1
 8051898:	e7c3      	b.n	8051822 <_printf_common+0x46>
 805189a:	18e1      	adds	r1, r4, r3
 805189c:	1c5a      	adds	r2, r3, #1
 805189e:	2030      	movs	r0, #48	; 0x30
 80518a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80518a4:	4422      	add	r2, r4
 80518a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80518aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80518ae:	3302      	adds	r3, #2
 80518b0:	e7c5      	b.n	805183e <_printf_common+0x62>
 80518b2:	2301      	movs	r3, #1
 80518b4:	4622      	mov	r2, r4
 80518b6:	4639      	mov	r1, r7
 80518b8:	4630      	mov	r0, r6
 80518ba:	47c0      	blx	r8
 80518bc:	3001      	adds	r0, #1
 80518be:	d0e6      	beq.n	805188e <_printf_common+0xb2>
 80518c0:	f109 0901 	add.w	r9, r9, #1
 80518c4:	e7d8      	b.n	8051878 <_printf_common+0x9c>
	...

080518c8 <_printf_i>:
 80518c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80518cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80518d0:	460c      	mov	r4, r1
 80518d2:	7e09      	ldrb	r1, [r1, #24]
 80518d4:	b085      	sub	sp, #20
 80518d6:	296e      	cmp	r1, #110	; 0x6e
 80518d8:	4617      	mov	r7, r2
 80518da:	4606      	mov	r6, r0
 80518dc:	4698      	mov	r8, r3
 80518de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80518e0:	f000 80b3 	beq.w	8051a4a <_printf_i+0x182>
 80518e4:	d822      	bhi.n	805192c <_printf_i+0x64>
 80518e6:	2963      	cmp	r1, #99	; 0x63
 80518e8:	d036      	beq.n	8051958 <_printf_i+0x90>
 80518ea:	d80a      	bhi.n	8051902 <_printf_i+0x3a>
 80518ec:	2900      	cmp	r1, #0
 80518ee:	f000 80b9 	beq.w	8051a64 <_printf_i+0x19c>
 80518f2:	2958      	cmp	r1, #88	; 0x58
 80518f4:	f000 8083 	beq.w	80519fe <_printf_i+0x136>
 80518f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80518fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8051900:	e032      	b.n	8051968 <_printf_i+0xa0>
 8051902:	2964      	cmp	r1, #100	; 0x64
 8051904:	d001      	beq.n	805190a <_printf_i+0x42>
 8051906:	2969      	cmp	r1, #105	; 0x69
 8051908:	d1f6      	bne.n	80518f8 <_printf_i+0x30>
 805190a:	6820      	ldr	r0, [r4, #0]
 805190c:	6813      	ldr	r3, [r2, #0]
 805190e:	0605      	lsls	r5, r0, #24
 8051910:	f103 0104 	add.w	r1, r3, #4
 8051914:	d52a      	bpl.n	805196c <_printf_i+0xa4>
 8051916:	681b      	ldr	r3, [r3, #0]
 8051918:	6011      	str	r1, [r2, #0]
 805191a:	2b00      	cmp	r3, #0
 805191c:	da03      	bge.n	8051926 <_printf_i+0x5e>
 805191e:	222d      	movs	r2, #45	; 0x2d
 8051920:	425b      	negs	r3, r3
 8051922:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8051926:	486f      	ldr	r0, [pc, #444]	; (8051ae4 <_printf_i+0x21c>)
 8051928:	220a      	movs	r2, #10
 805192a:	e039      	b.n	80519a0 <_printf_i+0xd8>
 805192c:	2973      	cmp	r1, #115	; 0x73
 805192e:	f000 809d 	beq.w	8051a6c <_printf_i+0x1a4>
 8051932:	d808      	bhi.n	8051946 <_printf_i+0x7e>
 8051934:	296f      	cmp	r1, #111	; 0x6f
 8051936:	d020      	beq.n	805197a <_printf_i+0xb2>
 8051938:	2970      	cmp	r1, #112	; 0x70
 805193a:	d1dd      	bne.n	80518f8 <_printf_i+0x30>
 805193c:	6823      	ldr	r3, [r4, #0]
 805193e:	f043 0320 	orr.w	r3, r3, #32
 8051942:	6023      	str	r3, [r4, #0]
 8051944:	e003      	b.n	805194e <_printf_i+0x86>
 8051946:	2975      	cmp	r1, #117	; 0x75
 8051948:	d017      	beq.n	805197a <_printf_i+0xb2>
 805194a:	2978      	cmp	r1, #120	; 0x78
 805194c:	d1d4      	bne.n	80518f8 <_printf_i+0x30>
 805194e:	2378      	movs	r3, #120	; 0x78
 8051950:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8051954:	4864      	ldr	r0, [pc, #400]	; (8051ae8 <_printf_i+0x220>)
 8051956:	e055      	b.n	8051a04 <_printf_i+0x13c>
 8051958:	6813      	ldr	r3, [r2, #0]
 805195a:	1d19      	adds	r1, r3, #4
 805195c:	681b      	ldr	r3, [r3, #0]
 805195e:	6011      	str	r1, [r2, #0]
 8051960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8051964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8051968:	2301      	movs	r3, #1
 805196a:	e08c      	b.n	8051a86 <_printf_i+0x1be>
 805196c:	681b      	ldr	r3, [r3, #0]
 805196e:	6011      	str	r1, [r2, #0]
 8051970:	f010 0f40 	tst.w	r0, #64	; 0x40
 8051974:	bf18      	it	ne
 8051976:	b21b      	sxthne	r3, r3
 8051978:	e7cf      	b.n	805191a <_printf_i+0x52>
 805197a:	6813      	ldr	r3, [r2, #0]
 805197c:	6825      	ldr	r5, [r4, #0]
 805197e:	1d18      	adds	r0, r3, #4
 8051980:	6010      	str	r0, [r2, #0]
 8051982:	0628      	lsls	r0, r5, #24
 8051984:	d501      	bpl.n	805198a <_printf_i+0xc2>
 8051986:	681b      	ldr	r3, [r3, #0]
 8051988:	e002      	b.n	8051990 <_printf_i+0xc8>
 805198a:	0668      	lsls	r0, r5, #25
 805198c:	d5fb      	bpl.n	8051986 <_printf_i+0xbe>
 805198e:	881b      	ldrh	r3, [r3, #0]
 8051990:	4854      	ldr	r0, [pc, #336]	; (8051ae4 <_printf_i+0x21c>)
 8051992:	296f      	cmp	r1, #111	; 0x6f
 8051994:	bf14      	ite	ne
 8051996:	220a      	movne	r2, #10
 8051998:	2208      	moveq	r2, #8
 805199a:	2100      	movs	r1, #0
 805199c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80519a0:	6865      	ldr	r5, [r4, #4]
 80519a2:	60a5      	str	r5, [r4, #8]
 80519a4:	2d00      	cmp	r5, #0
 80519a6:	f2c0 8095 	blt.w	8051ad4 <_printf_i+0x20c>
 80519aa:	6821      	ldr	r1, [r4, #0]
 80519ac:	f021 0104 	bic.w	r1, r1, #4
 80519b0:	6021      	str	r1, [r4, #0]
 80519b2:	2b00      	cmp	r3, #0
 80519b4:	d13d      	bne.n	8051a32 <_printf_i+0x16a>
 80519b6:	2d00      	cmp	r5, #0
 80519b8:	f040 808e 	bne.w	8051ad8 <_printf_i+0x210>
 80519bc:	4665      	mov	r5, ip
 80519be:	2a08      	cmp	r2, #8
 80519c0:	d10b      	bne.n	80519da <_printf_i+0x112>
 80519c2:	6823      	ldr	r3, [r4, #0]
 80519c4:	07db      	lsls	r3, r3, #31
 80519c6:	d508      	bpl.n	80519da <_printf_i+0x112>
 80519c8:	6923      	ldr	r3, [r4, #16]
 80519ca:	6862      	ldr	r2, [r4, #4]
 80519cc:	429a      	cmp	r2, r3
 80519ce:	bfde      	ittt	le
 80519d0:	2330      	movle	r3, #48	; 0x30
 80519d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80519d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80519da:	ebac 0305 	sub.w	r3, ip, r5
 80519de:	6123      	str	r3, [r4, #16]
 80519e0:	f8cd 8000 	str.w	r8, [sp]
 80519e4:	463b      	mov	r3, r7
 80519e6:	aa03      	add	r2, sp, #12
 80519e8:	4621      	mov	r1, r4
 80519ea:	4630      	mov	r0, r6
 80519ec:	f7ff fef6 	bl	80517dc <_printf_common>
 80519f0:	3001      	adds	r0, #1
 80519f2:	d14d      	bne.n	8051a90 <_printf_i+0x1c8>
 80519f4:	f04f 30ff 	mov.w	r0, #4294967295
 80519f8:	b005      	add	sp, #20
 80519fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80519fe:	4839      	ldr	r0, [pc, #228]	; (8051ae4 <_printf_i+0x21c>)
 8051a00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8051a04:	6813      	ldr	r3, [r2, #0]
 8051a06:	6821      	ldr	r1, [r4, #0]
 8051a08:	1d1d      	adds	r5, r3, #4
 8051a0a:	681b      	ldr	r3, [r3, #0]
 8051a0c:	6015      	str	r5, [r2, #0]
 8051a0e:	060a      	lsls	r2, r1, #24
 8051a10:	d50b      	bpl.n	8051a2a <_printf_i+0x162>
 8051a12:	07ca      	lsls	r2, r1, #31
 8051a14:	bf44      	itt	mi
 8051a16:	f041 0120 	orrmi.w	r1, r1, #32
 8051a1a:	6021      	strmi	r1, [r4, #0]
 8051a1c:	b91b      	cbnz	r3, 8051a26 <_printf_i+0x15e>
 8051a1e:	6822      	ldr	r2, [r4, #0]
 8051a20:	f022 0220 	bic.w	r2, r2, #32
 8051a24:	6022      	str	r2, [r4, #0]
 8051a26:	2210      	movs	r2, #16
 8051a28:	e7b7      	b.n	805199a <_printf_i+0xd2>
 8051a2a:	064d      	lsls	r5, r1, #25
 8051a2c:	bf48      	it	mi
 8051a2e:	b29b      	uxthmi	r3, r3
 8051a30:	e7ef      	b.n	8051a12 <_printf_i+0x14a>
 8051a32:	4665      	mov	r5, ip
 8051a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8051a38:	fb02 3311 	mls	r3, r2, r1, r3
 8051a3c:	5cc3      	ldrb	r3, [r0, r3]
 8051a3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8051a42:	460b      	mov	r3, r1
 8051a44:	2900      	cmp	r1, #0
 8051a46:	d1f5      	bne.n	8051a34 <_printf_i+0x16c>
 8051a48:	e7b9      	b.n	80519be <_printf_i+0xf6>
 8051a4a:	6813      	ldr	r3, [r2, #0]
 8051a4c:	6825      	ldr	r5, [r4, #0]
 8051a4e:	6961      	ldr	r1, [r4, #20]
 8051a50:	1d18      	adds	r0, r3, #4
 8051a52:	6010      	str	r0, [r2, #0]
 8051a54:	0628      	lsls	r0, r5, #24
 8051a56:	681b      	ldr	r3, [r3, #0]
 8051a58:	d501      	bpl.n	8051a5e <_printf_i+0x196>
 8051a5a:	6019      	str	r1, [r3, #0]
 8051a5c:	e002      	b.n	8051a64 <_printf_i+0x19c>
 8051a5e:	066a      	lsls	r2, r5, #25
 8051a60:	d5fb      	bpl.n	8051a5a <_printf_i+0x192>
 8051a62:	8019      	strh	r1, [r3, #0]
 8051a64:	2300      	movs	r3, #0
 8051a66:	6123      	str	r3, [r4, #16]
 8051a68:	4665      	mov	r5, ip
 8051a6a:	e7b9      	b.n	80519e0 <_printf_i+0x118>
 8051a6c:	6813      	ldr	r3, [r2, #0]
 8051a6e:	1d19      	adds	r1, r3, #4
 8051a70:	6011      	str	r1, [r2, #0]
 8051a72:	681d      	ldr	r5, [r3, #0]
 8051a74:	6862      	ldr	r2, [r4, #4]
 8051a76:	2100      	movs	r1, #0
 8051a78:	4628      	mov	r0, r5
 8051a7a:	f7ee fce1 	bl	8040440 <memchr>
 8051a7e:	b108      	cbz	r0, 8051a84 <_printf_i+0x1bc>
 8051a80:	1b40      	subs	r0, r0, r5
 8051a82:	6060      	str	r0, [r4, #4]
 8051a84:	6863      	ldr	r3, [r4, #4]
 8051a86:	6123      	str	r3, [r4, #16]
 8051a88:	2300      	movs	r3, #0
 8051a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8051a8e:	e7a7      	b.n	80519e0 <_printf_i+0x118>
 8051a90:	6923      	ldr	r3, [r4, #16]
 8051a92:	462a      	mov	r2, r5
 8051a94:	4639      	mov	r1, r7
 8051a96:	4630      	mov	r0, r6
 8051a98:	47c0      	blx	r8
 8051a9a:	3001      	adds	r0, #1
 8051a9c:	d0aa      	beq.n	80519f4 <_printf_i+0x12c>
 8051a9e:	6823      	ldr	r3, [r4, #0]
 8051aa0:	079b      	lsls	r3, r3, #30
 8051aa2:	d413      	bmi.n	8051acc <_printf_i+0x204>
 8051aa4:	68e0      	ldr	r0, [r4, #12]
 8051aa6:	9b03      	ldr	r3, [sp, #12]
 8051aa8:	4298      	cmp	r0, r3
 8051aaa:	bfb8      	it	lt
 8051aac:	4618      	movlt	r0, r3
 8051aae:	e7a3      	b.n	80519f8 <_printf_i+0x130>
 8051ab0:	2301      	movs	r3, #1
 8051ab2:	464a      	mov	r2, r9
 8051ab4:	4639      	mov	r1, r7
 8051ab6:	4630      	mov	r0, r6
 8051ab8:	47c0      	blx	r8
 8051aba:	3001      	adds	r0, #1
 8051abc:	d09a      	beq.n	80519f4 <_printf_i+0x12c>
 8051abe:	3501      	adds	r5, #1
 8051ac0:	68e3      	ldr	r3, [r4, #12]
 8051ac2:	9a03      	ldr	r2, [sp, #12]
 8051ac4:	1a9b      	subs	r3, r3, r2
 8051ac6:	42ab      	cmp	r3, r5
 8051ac8:	dcf2      	bgt.n	8051ab0 <_printf_i+0x1e8>
 8051aca:	e7eb      	b.n	8051aa4 <_printf_i+0x1dc>
 8051acc:	2500      	movs	r5, #0
 8051ace:	f104 0919 	add.w	r9, r4, #25
 8051ad2:	e7f5      	b.n	8051ac0 <_printf_i+0x1f8>
 8051ad4:	2b00      	cmp	r3, #0
 8051ad6:	d1ac      	bne.n	8051a32 <_printf_i+0x16a>
 8051ad8:	7803      	ldrb	r3, [r0, #0]
 8051ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8051ade:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8051ae2:	e76c      	b.n	80519be <_printf_i+0xf6>
 8051ae4:	080532bd 	.word	0x080532bd
 8051ae8:	080532ce 	.word	0x080532ce

08051aec <_sbrk_r>:
 8051aec:	b538      	push	{r3, r4, r5, lr}
 8051aee:	4c06      	ldr	r4, [pc, #24]	; (8051b08 <_sbrk_r+0x1c>)
 8051af0:	2300      	movs	r3, #0
 8051af2:	4605      	mov	r5, r0
 8051af4:	4608      	mov	r0, r1
 8051af6:	6023      	str	r3, [r4, #0]
 8051af8:	f000 fa74 	bl	8051fe4 <_sbrk>
 8051afc:	1c43      	adds	r3, r0, #1
 8051afe:	d102      	bne.n	8051b06 <_sbrk_r+0x1a>
 8051b00:	6823      	ldr	r3, [r4, #0]
 8051b02:	b103      	cbz	r3, 8051b06 <_sbrk_r+0x1a>
 8051b04:	602b      	str	r3, [r5, #0]
 8051b06:	bd38      	pop	{r3, r4, r5, pc}
 8051b08:	200061d8 	.word	0x200061d8

08051b0c <__sread>:
 8051b0c:	b510      	push	{r4, lr}
 8051b0e:	460c      	mov	r4, r1
 8051b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051b14:	f000 f8d6 	bl	8051cc4 <_read_r>
 8051b18:	2800      	cmp	r0, #0
 8051b1a:	bfab      	itete	ge
 8051b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8051b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8051b20:	181b      	addge	r3, r3, r0
 8051b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8051b26:	bfac      	ite	ge
 8051b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8051b2a:	81a3      	strhlt	r3, [r4, #12]
 8051b2c:	bd10      	pop	{r4, pc}

08051b2e <__swrite>:
 8051b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051b32:	461f      	mov	r7, r3
 8051b34:	898b      	ldrh	r3, [r1, #12]
 8051b36:	05db      	lsls	r3, r3, #23
 8051b38:	4605      	mov	r5, r0
 8051b3a:	460c      	mov	r4, r1
 8051b3c:	4616      	mov	r6, r2
 8051b3e:	d505      	bpl.n	8051b4c <__swrite+0x1e>
 8051b40:	2302      	movs	r3, #2
 8051b42:	2200      	movs	r2, #0
 8051b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051b48:	f000 f868 	bl	8051c1c <_lseek_r>
 8051b4c:	89a3      	ldrh	r3, [r4, #12]
 8051b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8051b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8051b56:	81a3      	strh	r3, [r4, #12]
 8051b58:	4632      	mov	r2, r6
 8051b5a:	463b      	mov	r3, r7
 8051b5c:	4628      	mov	r0, r5
 8051b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8051b62:	f000 b817 	b.w	8051b94 <_write_r>

08051b66 <__sseek>:
 8051b66:	b510      	push	{r4, lr}
 8051b68:	460c      	mov	r4, r1
 8051b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051b6e:	f000 f855 	bl	8051c1c <_lseek_r>
 8051b72:	1c43      	adds	r3, r0, #1
 8051b74:	89a3      	ldrh	r3, [r4, #12]
 8051b76:	bf15      	itete	ne
 8051b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8051b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8051b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8051b82:	81a3      	strheq	r3, [r4, #12]
 8051b84:	bf18      	it	ne
 8051b86:	81a3      	strhne	r3, [r4, #12]
 8051b88:	bd10      	pop	{r4, pc}

08051b8a <__sclose>:
 8051b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8051b8e:	f000 b813 	b.w	8051bb8 <_close_r>
	...

08051b94 <_write_r>:
 8051b94:	b538      	push	{r3, r4, r5, lr}
 8051b96:	4c07      	ldr	r4, [pc, #28]	; (8051bb4 <_write_r+0x20>)
 8051b98:	4605      	mov	r5, r0
 8051b9a:	4608      	mov	r0, r1
 8051b9c:	4611      	mov	r1, r2
 8051b9e:	2200      	movs	r2, #0
 8051ba0:	6022      	str	r2, [r4, #0]
 8051ba2:	461a      	mov	r2, r3
 8051ba4:	f000 fa2c 	bl	8052000 <_write>
 8051ba8:	1c43      	adds	r3, r0, #1
 8051baa:	d102      	bne.n	8051bb2 <_write_r+0x1e>
 8051bac:	6823      	ldr	r3, [r4, #0]
 8051bae:	b103      	cbz	r3, 8051bb2 <_write_r+0x1e>
 8051bb0:	602b      	str	r3, [r5, #0]
 8051bb2:	bd38      	pop	{r3, r4, r5, pc}
 8051bb4:	200061d8 	.word	0x200061d8

08051bb8 <_close_r>:
 8051bb8:	b538      	push	{r3, r4, r5, lr}
 8051bba:	4c06      	ldr	r4, [pc, #24]	; (8051bd4 <_close_r+0x1c>)
 8051bbc:	2300      	movs	r3, #0
 8051bbe:	4605      	mov	r5, r0
 8051bc0:	4608      	mov	r0, r1
 8051bc2:	6023      	str	r3, [r4, #0]
 8051bc4:	f000 f9e6 	bl	8051f94 <_close>
 8051bc8:	1c43      	adds	r3, r0, #1
 8051bca:	d102      	bne.n	8051bd2 <_close_r+0x1a>
 8051bcc:	6823      	ldr	r3, [r4, #0]
 8051bce:	b103      	cbz	r3, 8051bd2 <_close_r+0x1a>
 8051bd0:	602b      	str	r3, [r5, #0]
 8051bd2:	bd38      	pop	{r3, r4, r5, pc}
 8051bd4:	200061d8 	.word	0x200061d8

08051bd8 <_fstat_r>:
 8051bd8:	b538      	push	{r3, r4, r5, lr}
 8051bda:	4c07      	ldr	r4, [pc, #28]	; (8051bf8 <_fstat_r+0x20>)
 8051bdc:	2300      	movs	r3, #0
 8051bde:	4605      	mov	r5, r0
 8051be0:	4608      	mov	r0, r1
 8051be2:	4611      	mov	r1, r2
 8051be4:	6023      	str	r3, [r4, #0]
 8051be6:	f000 f9dd 	bl	8051fa4 <_fstat>
 8051bea:	1c43      	adds	r3, r0, #1
 8051bec:	d102      	bne.n	8051bf4 <_fstat_r+0x1c>
 8051bee:	6823      	ldr	r3, [r4, #0]
 8051bf0:	b103      	cbz	r3, 8051bf4 <_fstat_r+0x1c>
 8051bf2:	602b      	str	r3, [r5, #0]
 8051bf4:	bd38      	pop	{r3, r4, r5, pc}
 8051bf6:	bf00      	nop
 8051bf8:	200061d8 	.word	0x200061d8

08051bfc <_isatty_r>:
 8051bfc:	b538      	push	{r3, r4, r5, lr}
 8051bfe:	4c06      	ldr	r4, [pc, #24]	; (8051c18 <_isatty_r+0x1c>)
 8051c00:	2300      	movs	r3, #0
 8051c02:	4605      	mov	r5, r0
 8051c04:	4608      	mov	r0, r1
 8051c06:	6023      	str	r3, [r4, #0]
 8051c08:	f000 f9d4 	bl	8051fb4 <_isatty>
 8051c0c:	1c43      	adds	r3, r0, #1
 8051c0e:	d102      	bne.n	8051c16 <_isatty_r+0x1a>
 8051c10:	6823      	ldr	r3, [r4, #0]
 8051c12:	b103      	cbz	r3, 8051c16 <_isatty_r+0x1a>
 8051c14:	602b      	str	r3, [r5, #0]
 8051c16:	bd38      	pop	{r3, r4, r5, pc}
 8051c18:	200061d8 	.word	0x200061d8

08051c1c <_lseek_r>:
 8051c1c:	b538      	push	{r3, r4, r5, lr}
 8051c1e:	4c07      	ldr	r4, [pc, #28]	; (8051c3c <_lseek_r+0x20>)
 8051c20:	4605      	mov	r5, r0
 8051c22:	4608      	mov	r0, r1
 8051c24:	4611      	mov	r1, r2
 8051c26:	2200      	movs	r2, #0
 8051c28:	6022      	str	r2, [r4, #0]
 8051c2a:	461a      	mov	r2, r3
 8051c2c:	f000 f9ca 	bl	8051fc4 <_lseek>
 8051c30:	1c43      	adds	r3, r0, #1
 8051c32:	d102      	bne.n	8051c3a <_lseek_r+0x1e>
 8051c34:	6823      	ldr	r3, [r4, #0]
 8051c36:	b103      	cbz	r3, 8051c3a <_lseek_r+0x1e>
 8051c38:	602b      	str	r3, [r5, #0]
 8051c3a:	bd38      	pop	{r3, r4, r5, pc}
 8051c3c:	200061d8 	.word	0x200061d8

08051c40 <memmove>:
 8051c40:	4288      	cmp	r0, r1
 8051c42:	b510      	push	{r4, lr}
 8051c44:	eb01 0302 	add.w	r3, r1, r2
 8051c48:	d807      	bhi.n	8051c5a <memmove+0x1a>
 8051c4a:	1e42      	subs	r2, r0, #1
 8051c4c:	4299      	cmp	r1, r3
 8051c4e:	d00a      	beq.n	8051c66 <memmove+0x26>
 8051c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8051c54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8051c58:	e7f8      	b.n	8051c4c <memmove+0xc>
 8051c5a:	4283      	cmp	r3, r0
 8051c5c:	d9f5      	bls.n	8051c4a <memmove+0xa>
 8051c5e:	1881      	adds	r1, r0, r2
 8051c60:	1ad2      	subs	r2, r2, r3
 8051c62:	42d3      	cmn	r3, r2
 8051c64:	d100      	bne.n	8051c68 <memmove+0x28>
 8051c66:	bd10      	pop	{r4, pc}
 8051c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8051c6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8051c70:	e7f7      	b.n	8051c62 <memmove+0x22>

08051c72 <__malloc_lock>:
 8051c72:	4770      	bx	lr

08051c74 <__malloc_unlock>:
 8051c74:	4770      	bx	lr

08051c76 <_realloc_r>:
 8051c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8051c78:	4607      	mov	r7, r0
 8051c7a:	4614      	mov	r4, r2
 8051c7c:	460e      	mov	r6, r1
 8051c7e:	b921      	cbnz	r1, 8051c8a <_realloc_r+0x14>
 8051c80:	4611      	mov	r1, r2
 8051c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8051c86:	f7ff babd 	b.w	8051204 <_malloc_r>
 8051c8a:	b922      	cbnz	r2, 8051c96 <_realloc_r+0x20>
 8051c8c:	f7ff fa6c 	bl	8051168 <_free_r>
 8051c90:	4625      	mov	r5, r4
 8051c92:	4628      	mov	r0, r5
 8051c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8051c96:	f000 f827 	bl	8051ce8 <_malloc_usable_size_r>
 8051c9a:	42a0      	cmp	r0, r4
 8051c9c:	d20f      	bcs.n	8051cbe <_realloc_r+0x48>
 8051c9e:	4621      	mov	r1, r4
 8051ca0:	4638      	mov	r0, r7
 8051ca2:	f7ff faaf 	bl	8051204 <_malloc_r>
 8051ca6:	4605      	mov	r5, r0
 8051ca8:	2800      	cmp	r0, #0
 8051caa:	d0f2      	beq.n	8051c92 <_realloc_r+0x1c>
 8051cac:	4631      	mov	r1, r6
 8051cae:	4622      	mov	r2, r4
 8051cb0:	f7fe fe3c 	bl	805092c <memcpy>
 8051cb4:	4631      	mov	r1, r6
 8051cb6:	4638      	mov	r0, r7
 8051cb8:	f7ff fa56 	bl	8051168 <_free_r>
 8051cbc:	e7e9      	b.n	8051c92 <_realloc_r+0x1c>
 8051cbe:	4635      	mov	r5, r6
 8051cc0:	e7e7      	b.n	8051c92 <_realloc_r+0x1c>
	...

08051cc4 <_read_r>:
 8051cc4:	b538      	push	{r3, r4, r5, lr}
 8051cc6:	4c07      	ldr	r4, [pc, #28]	; (8051ce4 <_read_r+0x20>)
 8051cc8:	4605      	mov	r5, r0
 8051cca:	4608      	mov	r0, r1
 8051ccc:	4611      	mov	r1, r2
 8051cce:	2200      	movs	r2, #0
 8051cd0:	6022      	str	r2, [r4, #0]
 8051cd2:	461a      	mov	r2, r3
 8051cd4:	f000 f97e 	bl	8051fd4 <_read>
 8051cd8:	1c43      	adds	r3, r0, #1
 8051cda:	d102      	bne.n	8051ce2 <_read_r+0x1e>
 8051cdc:	6823      	ldr	r3, [r4, #0]
 8051cde:	b103      	cbz	r3, 8051ce2 <_read_r+0x1e>
 8051ce0:	602b      	str	r3, [r5, #0]
 8051ce2:	bd38      	pop	{r3, r4, r5, pc}
 8051ce4:	200061d8 	.word	0x200061d8

08051ce8 <_malloc_usable_size_r>:
 8051ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8051cec:	1f18      	subs	r0, r3, #4
 8051cee:	2b00      	cmp	r3, #0
 8051cf0:	bfbc      	itt	lt
 8051cf2:	580b      	ldrlt	r3, [r1, r0]
 8051cf4:	18c0      	addlt	r0, r0, r3
 8051cf6:	4770      	bx	lr

08051cf8 <ceil>:
 8051cf8:	ec51 0b10 	vmov	r0, r1, d0
 8051cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051d00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8051d04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8051d08:	2e13      	cmp	r6, #19
 8051d0a:	460c      	mov	r4, r1
 8051d0c:	ee10 5a10 	vmov	r5, s0
 8051d10:	4680      	mov	r8, r0
 8051d12:	dc30      	bgt.n	8051d76 <ceil+0x7e>
 8051d14:	2e00      	cmp	r6, #0
 8051d16:	da12      	bge.n	8051d3e <ceil+0x46>
 8051d18:	a333      	add	r3, pc, #204	; (adr r3, 8051de8 <ceil+0xf0>)
 8051d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051d1e:	f7ee fbe5 	bl	80404ec <__adddf3>
 8051d22:	2200      	movs	r2, #0
 8051d24:	2300      	movs	r3, #0
 8051d26:	f7ef f827 	bl	8040d78 <__aeabi_dcmpgt>
 8051d2a:	b128      	cbz	r0, 8051d38 <ceil+0x40>
 8051d2c:	2c00      	cmp	r4, #0
 8051d2e:	db55      	blt.n	8051ddc <ceil+0xe4>
 8051d30:	432c      	orrs	r4, r5
 8051d32:	d057      	beq.n	8051de4 <ceil+0xec>
 8051d34:	4c2e      	ldr	r4, [pc, #184]	; (8051df0 <ceil+0xf8>)
 8051d36:	2500      	movs	r5, #0
 8051d38:	4621      	mov	r1, r4
 8051d3a:	4628      	mov	r0, r5
 8051d3c:	e025      	b.n	8051d8a <ceil+0x92>
 8051d3e:	4f2d      	ldr	r7, [pc, #180]	; (8051df4 <ceil+0xfc>)
 8051d40:	4137      	asrs	r7, r6
 8051d42:	ea01 0307 	and.w	r3, r1, r7
 8051d46:	4303      	orrs	r3, r0
 8051d48:	d01f      	beq.n	8051d8a <ceil+0x92>
 8051d4a:	a327      	add	r3, pc, #156	; (adr r3, 8051de8 <ceil+0xf0>)
 8051d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051d50:	f7ee fbcc 	bl	80404ec <__adddf3>
 8051d54:	2200      	movs	r2, #0
 8051d56:	2300      	movs	r3, #0
 8051d58:	f7ef f80e 	bl	8040d78 <__aeabi_dcmpgt>
 8051d5c:	2800      	cmp	r0, #0
 8051d5e:	d0eb      	beq.n	8051d38 <ceil+0x40>
 8051d60:	2c00      	cmp	r4, #0
 8051d62:	bfc2      	ittt	gt
 8051d64:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8051d68:	fa43 f606 	asrgt.w	r6, r3, r6
 8051d6c:	19a4      	addgt	r4, r4, r6
 8051d6e:	ea24 0407 	bic.w	r4, r4, r7
 8051d72:	2500      	movs	r5, #0
 8051d74:	e7e0      	b.n	8051d38 <ceil+0x40>
 8051d76:	2e33      	cmp	r6, #51	; 0x33
 8051d78:	dd0b      	ble.n	8051d92 <ceil+0x9a>
 8051d7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8051d7e:	d104      	bne.n	8051d8a <ceil+0x92>
 8051d80:	ee10 2a10 	vmov	r2, s0
 8051d84:	460b      	mov	r3, r1
 8051d86:	f7ee fbb1 	bl	80404ec <__adddf3>
 8051d8a:	ec41 0b10 	vmov	d0, r0, r1
 8051d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8051d92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8051d96:	f04f 33ff 	mov.w	r3, #4294967295
 8051d9a:	fa23 f707 	lsr.w	r7, r3, r7
 8051d9e:	4207      	tst	r7, r0
 8051da0:	d0f3      	beq.n	8051d8a <ceil+0x92>
 8051da2:	a311      	add	r3, pc, #68	; (adr r3, 8051de8 <ceil+0xf0>)
 8051da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051da8:	f7ee fba0 	bl	80404ec <__adddf3>
 8051dac:	2200      	movs	r2, #0
 8051dae:	2300      	movs	r3, #0
 8051db0:	f7ee ffe2 	bl	8040d78 <__aeabi_dcmpgt>
 8051db4:	2800      	cmp	r0, #0
 8051db6:	d0bf      	beq.n	8051d38 <ceil+0x40>
 8051db8:	2c00      	cmp	r4, #0
 8051dba:	dd02      	ble.n	8051dc2 <ceil+0xca>
 8051dbc:	2e14      	cmp	r6, #20
 8051dbe:	d103      	bne.n	8051dc8 <ceil+0xd0>
 8051dc0:	3401      	adds	r4, #1
 8051dc2:	ea25 0507 	bic.w	r5, r5, r7
 8051dc6:	e7b7      	b.n	8051d38 <ceil+0x40>
 8051dc8:	2301      	movs	r3, #1
 8051dca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8051dce:	fa03 f606 	lsl.w	r6, r3, r6
 8051dd2:	4435      	add	r5, r6
 8051dd4:	4545      	cmp	r5, r8
 8051dd6:	bf38      	it	cc
 8051dd8:	18e4      	addcc	r4, r4, r3
 8051dda:	e7f2      	b.n	8051dc2 <ceil+0xca>
 8051ddc:	2500      	movs	r5, #0
 8051dde:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8051de2:	e7a9      	b.n	8051d38 <ceil+0x40>
 8051de4:	4625      	mov	r5, r4
 8051de6:	e7a7      	b.n	8051d38 <ceil+0x40>
 8051de8:	8800759c 	.word	0x8800759c
 8051dec:	7e37e43c 	.word	0x7e37e43c
 8051df0:	3ff00000 	.word	0x3ff00000
 8051df4:	000fffff 	.word	0x000fffff

08051df8 <floor>:
 8051df8:	ec51 0b10 	vmov	r0, r1, d0
 8051dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051e00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8051e04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8051e08:	2e13      	cmp	r6, #19
 8051e0a:	460c      	mov	r4, r1
 8051e0c:	ee10 5a10 	vmov	r5, s0
 8051e10:	4680      	mov	r8, r0
 8051e12:	dc34      	bgt.n	8051e7e <floor+0x86>
 8051e14:	2e00      	cmp	r6, #0
 8051e16:	da16      	bge.n	8051e46 <floor+0x4e>
 8051e18:	a335      	add	r3, pc, #212	; (adr r3, 8051ef0 <floor+0xf8>)
 8051e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051e1e:	f7ee fb65 	bl	80404ec <__adddf3>
 8051e22:	2200      	movs	r2, #0
 8051e24:	2300      	movs	r3, #0
 8051e26:	f7ee ffa7 	bl	8040d78 <__aeabi_dcmpgt>
 8051e2a:	b148      	cbz	r0, 8051e40 <floor+0x48>
 8051e2c:	2c00      	cmp	r4, #0
 8051e2e:	da59      	bge.n	8051ee4 <floor+0xec>
 8051e30:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8051e34:	4a30      	ldr	r2, [pc, #192]	; (8051ef8 <floor+0x100>)
 8051e36:	432b      	orrs	r3, r5
 8051e38:	2500      	movs	r5, #0
 8051e3a:	42ab      	cmp	r3, r5
 8051e3c:	bf18      	it	ne
 8051e3e:	4614      	movne	r4, r2
 8051e40:	4621      	mov	r1, r4
 8051e42:	4628      	mov	r0, r5
 8051e44:	e025      	b.n	8051e92 <floor+0x9a>
 8051e46:	4f2d      	ldr	r7, [pc, #180]	; (8051efc <floor+0x104>)
 8051e48:	4137      	asrs	r7, r6
 8051e4a:	ea01 0307 	and.w	r3, r1, r7
 8051e4e:	4303      	orrs	r3, r0
 8051e50:	d01f      	beq.n	8051e92 <floor+0x9a>
 8051e52:	a327      	add	r3, pc, #156	; (adr r3, 8051ef0 <floor+0xf8>)
 8051e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051e58:	f7ee fb48 	bl	80404ec <__adddf3>
 8051e5c:	2200      	movs	r2, #0
 8051e5e:	2300      	movs	r3, #0
 8051e60:	f7ee ff8a 	bl	8040d78 <__aeabi_dcmpgt>
 8051e64:	2800      	cmp	r0, #0
 8051e66:	d0eb      	beq.n	8051e40 <floor+0x48>
 8051e68:	2c00      	cmp	r4, #0
 8051e6a:	bfbe      	ittt	lt
 8051e6c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8051e70:	fa43 f606 	asrlt.w	r6, r3, r6
 8051e74:	19a4      	addlt	r4, r4, r6
 8051e76:	ea24 0407 	bic.w	r4, r4, r7
 8051e7a:	2500      	movs	r5, #0
 8051e7c:	e7e0      	b.n	8051e40 <floor+0x48>
 8051e7e:	2e33      	cmp	r6, #51	; 0x33
 8051e80:	dd0b      	ble.n	8051e9a <floor+0xa2>
 8051e82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8051e86:	d104      	bne.n	8051e92 <floor+0x9a>
 8051e88:	ee10 2a10 	vmov	r2, s0
 8051e8c:	460b      	mov	r3, r1
 8051e8e:	f7ee fb2d 	bl	80404ec <__adddf3>
 8051e92:	ec41 0b10 	vmov	d0, r0, r1
 8051e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8051e9a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8051e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8051ea2:	fa23 f707 	lsr.w	r7, r3, r7
 8051ea6:	4207      	tst	r7, r0
 8051ea8:	d0f3      	beq.n	8051e92 <floor+0x9a>
 8051eaa:	a311      	add	r3, pc, #68	; (adr r3, 8051ef0 <floor+0xf8>)
 8051eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8051eb0:	f7ee fb1c 	bl	80404ec <__adddf3>
 8051eb4:	2200      	movs	r2, #0
 8051eb6:	2300      	movs	r3, #0
 8051eb8:	f7ee ff5e 	bl	8040d78 <__aeabi_dcmpgt>
 8051ebc:	2800      	cmp	r0, #0
 8051ebe:	d0bf      	beq.n	8051e40 <floor+0x48>
 8051ec0:	2c00      	cmp	r4, #0
 8051ec2:	da02      	bge.n	8051eca <floor+0xd2>
 8051ec4:	2e14      	cmp	r6, #20
 8051ec6:	d103      	bne.n	8051ed0 <floor+0xd8>
 8051ec8:	3401      	adds	r4, #1
 8051eca:	ea25 0507 	bic.w	r5, r5, r7
 8051ece:	e7b7      	b.n	8051e40 <floor+0x48>
 8051ed0:	2301      	movs	r3, #1
 8051ed2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8051ed6:	fa03 f606 	lsl.w	r6, r3, r6
 8051eda:	4435      	add	r5, r6
 8051edc:	4545      	cmp	r5, r8
 8051ede:	bf38      	it	cc
 8051ee0:	18e4      	addcc	r4, r4, r3
 8051ee2:	e7f2      	b.n	8051eca <floor+0xd2>
 8051ee4:	2500      	movs	r5, #0
 8051ee6:	462c      	mov	r4, r5
 8051ee8:	e7aa      	b.n	8051e40 <floor+0x48>
 8051eea:	bf00      	nop
 8051eec:	f3af 8000 	nop.w
 8051ef0:	8800759c 	.word	0x8800759c
 8051ef4:	7e37e43c 	.word	0x7e37e43c
 8051ef8:	bff00000 	.word	0xbff00000
 8051efc:	000fffff 	.word	0x000fffff

08051f00 <round>:
 8051f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8051f02:	ec57 6b10 	vmov	r6, r7, d0
 8051f06:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8051f0a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8051f0e:	2c13      	cmp	r4, #19
 8051f10:	463b      	mov	r3, r7
 8051f12:	463d      	mov	r5, r7
 8051f14:	dc17      	bgt.n	8051f46 <round+0x46>
 8051f16:	2c00      	cmp	r4, #0
 8051f18:	da09      	bge.n	8051f2e <round+0x2e>
 8051f1a:	3401      	adds	r4, #1
 8051f1c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8051f20:	d103      	bne.n	8051f2a <round+0x2a>
 8051f22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8051f26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8051f2a:	2100      	movs	r1, #0
 8051f2c:	e02c      	b.n	8051f88 <round+0x88>
 8051f2e:	4a18      	ldr	r2, [pc, #96]	; (8051f90 <round+0x90>)
 8051f30:	4122      	asrs	r2, r4
 8051f32:	4217      	tst	r7, r2
 8051f34:	d100      	bne.n	8051f38 <round+0x38>
 8051f36:	b19e      	cbz	r6, 8051f60 <round+0x60>
 8051f38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8051f3c:	4123      	asrs	r3, r4
 8051f3e:	442b      	add	r3, r5
 8051f40:	ea23 0302 	bic.w	r3, r3, r2
 8051f44:	e7f1      	b.n	8051f2a <round+0x2a>
 8051f46:	2c33      	cmp	r4, #51	; 0x33
 8051f48:	dd0d      	ble.n	8051f66 <round+0x66>
 8051f4a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8051f4e:	d107      	bne.n	8051f60 <round+0x60>
 8051f50:	4630      	mov	r0, r6
 8051f52:	4639      	mov	r1, r7
 8051f54:	ee10 2a10 	vmov	r2, s0
 8051f58:	f7ee fac8 	bl	80404ec <__adddf3>
 8051f5c:	4606      	mov	r6, r0
 8051f5e:	460f      	mov	r7, r1
 8051f60:	ec47 6b10 	vmov	d0, r6, r7
 8051f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8051f66:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8051f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8051f6e:	40d0      	lsrs	r0, r2
 8051f70:	4206      	tst	r6, r0
 8051f72:	d0f5      	beq.n	8051f60 <round+0x60>
 8051f74:	2201      	movs	r2, #1
 8051f76:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8051f7a:	fa02 f404 	lsl.w	r4, r2, r4
 8051f7e:	1931      	adds	r1, r6, r4
 8051f80:	bf28      	it	cs
 8051f82:	189b      	addcs	r3, r3, r2
 8051f84:	ea21 0100 	bic.w	r1, r1, r0
 8051f88:	461f      	mov	r7, r3
 8051f8a:	460e      	mov	r6, r1
 8051f8c:	e7e8      	b.n	8051f60 <round+0x60>
 8051f8e:	bf00      	nop
 8051f90:	000fffff 	.word	0x000fffff

08051f94 <_close>:
 8051f94:	4b02      	ldr	r3, [pc, #8]	; (8051fa0 <_close+0xc>)
 8051f96:	2258      	movs	r2, #88	; 0x58
 8051f98:	601a      	str	r2, [r3, #0]
 8051f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8051f9e:	4770      	bx	lr
 8051fa0:	200061d8 	.word	0x200061d8

08051fa4 <_fstat>:
 8051fa4:	4b02      	ldr	r3, [pc, #8]	; (8051fb0 <_fstat+0xc>)
 8051fa6:	2258      	movs	r2, #88	; 0x58
 8051fa8:	601a      	str	r2, [r3, #0]
 8051faa:	f04f 30ff 	mov.w	r0, #4294967295
 8051fae:	4770      	bx	lr
 8051fb0:	200061d8 	.word	0x200061d8

08051fb4 <_isatty>:
 8051fb4:	4b02      	ldr	r3, [pc, #8]	; (8051fc0 <_isatty+0xc>)
 8051fb6:	2258      	movs	r2, #88	; 0x58
 8051fb8:	601a      	str	r2, [r3, #0]
 8051fba:	2000      	movs	r0, #0
 8051fbc:	4770      	bx	lr
 8051fbe:	bf00      	nop
 8051fc0:	200061d8 	.word	0x200061d8

08051fc4 <_lseek>:
 8051fc4:	4b02      	ldr	r3, [pc, #8]	; (8051fd0 <_lseek+0xc>)
 8051fc6:	2258      	movs	r2, #88	; 0x58
 8051fc8:	601a      	str	r2, [r3, #0]
 8051fca:	f04f 30ff 	mov.w	r0, #4294967295
 8051fce:	4770      	bx	lr
 8051fd0:	200061d8 	.word	0x200061d8

08051fd4 <_read>:
 8051fd4:	4b02      	ldr	r3, [pc, #8]	; (8051fe0 <_read+0xc>)
 8051fd6:	2258      	movs	r2, #88	; 0x58
 8051fd8:	601a      	str	r2, [r3, #0]
 8051fda:	f04f 30ff 	mov.w	r0, #4294967295
 8051fde:	4770      	bx	lr
 8051fe0:	200061d8 	.word	0x200061d8

08051fe4 <_sbrk>:
 8051fe4:	4b04      	ldr	r3, [pc, #16]	; (8051ff8 <_sbrk+0x14>)
 8051fe6:	6819      	ldr	r1, [r3, #0]
 8051fe8:	4602      	mov	r2, r0
 8051fea:	b909      	cbnz	r1, 8051ff0 <_sbrk+0xc>
 8051fec:	4903      	ldr	r1, [pc, #12]	; (8051ffc <_sbrk+0x18>)
 8051fee:	6019      	str	r1, [r3, #0]
 8051ff0:	6818      	ldr	r0, [r3, #0]
 8051ff2:	4402      	add	r2, r0
 8051ff4:	601a      	str	r2, [r3, #0]
 8051ff6:	4770      	bx	lr
 8051ff8:	20003c28 	.word	0x20003c28
 8051ffc:	200061e0 	.word	0x200061e0

08052000 <_write>:
 8052000:	4b02      	ldr	r3, [pc, #8]	; (805200c <_write+0xc>)
 8052002:	2258      	movs	r2, #88	; 0x58
 8052004:	601a      	str	r2, [r3, #0]
 8052006:	f04f 30ff 	mov.w	r0, #4294967295
 805200a:	4770      	bx	lr
 805200c:	200061d8 	.word	0x200061d8

08052010 <_init>:
 8052010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052012:	bf00      	nop
 8052014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8052016:	bc08      	pop	{r3}
 8052018:	469e      	mov	lr, r3
 805201a:	4770      	bx	lr

0805201c <_fini>:
 805201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805201e:	bf00      	nop
 8052020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8052022:	bc08      	pop	{r3}
 8052024:	469e      	mov	lr, r3
 8052026:	4770      	bx	lr
